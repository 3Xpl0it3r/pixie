licenses(["restricted"])

load("@bazel_gazelle//:def.bzl", "gazelle")

gazelle(
    name = "gazelle",
    mode = "fix",
    prefix = "pixielabs.ai/pixielabs",
)

# This line is necessary to keep Gazelle from using the vendored gRPC for Go library:
# gazelle:exclude vendor
# gazelle:exclude third_party

# Make gazelle not generate proto files. We need to use gogo proto and this does
# not seem to work automatically right now. Keep an eye out on issue:
# https://github.com/bazelbuild/bazel-gazelle/issues/181 for updates.
# gazelle:proto disable

# TODO(zasgar): We should keep an eye on fixes to gazelle that make this automatic
# Make gazelle resolve the proto paths correctly.
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/compiler/compilerpb //src/carnot/compiler:compiler_status_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/planpb //src/carnot/planpb:plan_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/queryresultspb //src/carnot/queryresultspb:query_results_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/common/base/proto //src/common/base/proto:status_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/common/uuid/proto //src/common/uuid/proto:uuid_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/shared/types/proto //src/shared/types/proto:types_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/table_store/proto //src/table_store/proto:schema_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/messages/messagespb //src/vizier/messages/messagespb:messages_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/proto //src/vizier/proto:service_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/services/metadata/datapb //src/vizier/services/metadata/datapb:data_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/services/metadata/metadatapb //src/vizier/services/metadata/metadatapb:service_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/services/query_broker/querybrokerpb //src/vizier/services/query_broker/querybrokerpb:service_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/stirling/testing/proto //src/stirling/testing/proto:greet_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/experimental/stirling/proto_data_model/proto //experimental/stirling/proto_data_model/proto:http_record_pl_go_proto

load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")

buildifier(
    name = "buildifier",
)

load("@io_bazel_rules_docker//container:container.bzl", "container_bundle", "container_image", "container_pull")
load("@package_bundle//file:packages.bzl", "packages")

pl_cc_base_packages = [
    packages["libc6"],
    packages["libunwind8"],
    packages["liblzma5"],
    packages["libelf1"],
    packages["libtinfo5"],
    packages["zlib1g"],
]

container_image(
    name = "pl_cc_base_image",
    base = "@cc_base//image",
    debs = pl_cc_base_packages,
    visibility = ["//visibility:public"],
)

container_image(
    name = "pl_cc_base_debug_image",
    base = "@cc_base_debug//image",
    debs = pl_cc_base_packages,
    visibility = ["//visibility:public"],
)

container_image(
    name = "pl_cc_dev_image",
    base = "@dev_image//image",
    visibility = ["//visibility:public"],
)

container_bundle(
    name = "pl_image_bundle",
    images = {
        "gcr.io/pl-dev-infra/agent_image:$(BUNDLE_VERSION)": "//src/vizier/services/agent:agent_image",
        "gcr.io/pl-dev-infra/vizier_metadata_image:$(BUNDLE_VERSION)": "//src/vizier/services/metadata:vizier_metadata_image",
        "gcr.io/pl-dev-infra/vizier_query_broker_image:$(BUNDLE_VERSION)": "//src/vizier/services/query_broker:vizier_query_broker_image",
        "gcr.io/pl-dev-infra/api_server_image:$(BUNDLE_VERSION)": "//src/services/api:api_server_image",
        "gcr.io/pl-dev-infra/proxy_image:$(BUNDLE_VERSION)": "//src/services/proxy:proxy_prod_image",
    },
)
