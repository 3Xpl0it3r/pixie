licenses(["restricted"])

load("@bazel_gazelle//:def.bzl", "gazelle")

exports_files(["LICENSE"])

gazelle(
    name = "gazelle",
    mode = "fix",
    prefix = "pixielabs.ai/pixielabs",
)

# This line is necessary to keep Gazelle from using the vendored gRPC for Go library:
# gazelle:exclude vendor
# gazelle:exclude third_party

# Make gazelle not generate proto files. We need to use gogo proto and this does
# not seem to work automatically right now. Keep an eye out on issue:
# https://github.com/bazelbuild/bazel-gazelle/issues/181 for updates.
# gazelle:proto disable

# TODO(zasgar): We should keep an eye on fixes to gazelle that make this automatic
# Make gazelle resolve the proto paths correctly.
# gazelle:resolve go pixielabs.ai/pixielabs/src/cloud/cloudpb //src/cloud/cloudpb:cloud_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/cloud/cloudapipb //src/cloud/cloudapipb:cloudapi_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/shared/artifacts/versionspb //src/shared/artifacts/versionspb:versions_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/cloud/artifact_tracker/artifacttrackerpb //src/cloud/artifact_tracker/artifacttrackerpb:artifact_tracker_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/cloud/vzconn/vzconnpb //src/cloud/vzconn/vzconnpb:service_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/cloud/vzmgr/vzmgrpb //src/cloud/vzmgr/vzmgrpb:service_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/shared/services/proto //src/shared/services/proto:jwt_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/shared/services/testproto //src/shared/services/testproto:ping_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/planner/compilerpb //src/carnot/planner/compilerpb:compiler_status_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/planner/distributedpb //src/carnot/planner/distributedpb:distributed_plan_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/planner/plannerpb //src/carnot/planner/plannerpb:query_flags_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/planpb //src/carnot/planpb:plan_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/udfspb //src/carnot/udfspb:udfs_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/queryresultspb //src/carnot/queryresultspb:query_results_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/cloud/auth/proto //src/cloud/auth/proto:auth_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/cloud/site_manager/sitemanagerpb //src/cloud/site_manager/sitemanagerpb:service_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/cloud/artifact_tracker/artifacttrackerpb //src/cloud/artifact_tracker/artifacttrackerpb:artifact_tracker_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/cloud/artifact_tracker/versionspb //src/cloud/artifact_tracker/versionspb:versions_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/common/base/proto //src/common/base/proto:status_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/common/uuid/proto //src/common/uuid/proto:uuid_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/shared/types/proto //src/shared/types/proto:types_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/table_store/proto //src/table_store/proto:schema_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/messages/messagespb //src/vizier/messages/messagespb:messages_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/proto //src/vizier/proto:service_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/services/cloud_connector/cloud_connectorpb //src/vizier/services/cloud_connector/cloud_connectorpb:service_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/services/metadata/datapb //src/vizier/services/metadata/datapb:data_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/services/shared/agentpb //src/vizier/services/shared/agentpb:agent_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/services/metadata/metadatapb //src/vizier/services/metadata/metadatapb:service_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/vizier/services/query_broker/querybrokerpb //src/vizier/services/query_broker/querybrokerpb:service_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/experimental/stirling/proto_data_model/proto //experimental/stirling/proto_data_model/proto:http_record_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/shared/k8s/metadatapb //src/shared/k8s/metadatapb:metadata_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/src/stirling/http2/testing/proto //src/stirling/http2/testing/proto:greet_pl_go_proto
# gazelle:resolve go pixielabs.ai/pixielabs/demos/applications/hipster_shop/proto //demos/applications/hipster_shop/proto:demo_pl_go_proto
#
# Make gazelle resolve CGO libraries correctly.
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/planner/compiler_error_context //src/carnot/planner/compiler_error_context:go_default_library
# gazelle:resolve go pixielabs.ai/pixielabs/src/carnot/planner //src/carnot/planner:go_default_library

load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")

buildifier(
    name = "buildifier",
)

load("@io_bazel_rules_docker//container:container.bzl", "container_bundle", "container_image", "container_pull")
load("@io_bazel_rules_docker//contrib:push-all.bzl", "container_push")
load("@package_bundle//file:packages.bzl", "packages")

pl_cc_base_packages = [
    packages["libc6"],
    packages["libelf1"],
    packages["liblzma5"],
    packages["libtinfo5"],
    packages["zlib1g"],
]

container_image(
    name = "pl_cc_base_image",
    base = "@base_image//image",
    debs = pl_cc_base_packages,
    visibility = ["//visibility:public"],
)

container_image(
    name = "pl_cc_base_debug_image",
    base = "@base_image_debug//image",
    debs = pl_cc_base_packages,
    visibility = ["//visibility:public"],
)

container_image(
    name = "pl_cc_bpf_image",
    base = ":pl_cc_base_image",
    tars = ["@linux_headers_tar_gz//file:file"],
    visibility = ["//visibility:public"],
)

container_image(
    name = "pl_cc_bpf_debug_image",
    base = ":pl_cc_base_debug_image",
    tars = ["@linux_headers_tar_gz//file:file"],
    visibility = ["//visibility:public"],
)

alias(
    name = "llvm",
    actual = select({
        "//bazel:use_libcpp": "@com_llvm_lib_libcpp//:llvm",
        "//conditions:default": "@com_llvm_lib//:llvm",
    }),
    visibility = ["//visibility:public"],
)
