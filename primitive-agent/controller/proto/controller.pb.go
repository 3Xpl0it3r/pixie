// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: primitive-agent/controller/proto/controller.proto

package controller // import "pixielabs.ai/pixielabs/primitive-agent/controller"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OS int32

const (
	UNKNOWN_OS OS = 0
	Linux      OS = 1
	Windows    OS = 2
	Darwin     OS = 3
	iOS        OS = 4
	Android    OS = 5
)

var OS_name = map[int32]string{
	0: "UNKNOWN_OS",
	1: "Linux",
	2: "Windows",
	3: "Darwin",
	4: "iOS",
	5: "Android",
}
var OS_value = map[string]int32{
	"UNKNOWN_OS": 0,
	"Linux":      1,
	"Windows":    2,
	"Darwin":     3,
	"iOS":        4,
	"Android":    5,
}

func (OS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{0}
}

type CPUVendorId int32

const (
	UNKNOWN_VENDOR CPUVendorId = 0
	Intel          CPUVendorId = 1
	AMD            CPUVendorId = 2
	Qualcomm       CPUVendorId = 3
	NVIDIA         CPUVendorId = 4
	IBM            CPUVendorId = 5
	Samsung        CPUVendorId = 6
	Motorola       CPUVendorId = 7
	HP             CPUVendorId = 8
	Dell           CPUVendorId = 9
	Acer           CPUVendorId = 10
)

var CPUVendorId_name = map[int32]string{
	0:  "UNKNOWN_VENDOR",
	1:  "Intel",
	2:  "AMD",
	3:  "Qualcomm",
	4:  "NVIDIA",
	5:  "IBM",
	6:  "Samsung",
	7:  "Motorola",
	8:  "HP",
	9:  "Dell",
	10: "Acer",
}
var CPUVendorId_value = map[string]int32{
	"UNKNOWN_VENDOR": 0,
	"Intel":          1,
	"AMD":            2,
	"Qualcomm":       3,
	"NVIDIA":         4,
	"IBM":            5,
	"Samsung":        6,
	"Motorola":       7,
	"HP":             8,
	"Dell":           9,
	"Acer":           10,
}

func (CPUVendorId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{1}
}

type OSArchitecture int32

const (
	UNKNOWN_ARCHITECTURE OSArchitecture = 0
	x86_64               OSArchitecture = 1
	i386                 OSArchitecture = 2
	i586                 OSArchitecture = 3
)

var OSArchitecture_name = map[int32]string{
	0: "UNKNOWN_ARCHITECTURE",
	1: "x86_64",
	2: "i386",
	3: "i586",
}
var OSArchitecture_value = map[string]int32{
	"UNKNOWN_ARCHITECTURE": 0,
	"x86_64":               1,
	"i386":                 2,
	"i586":                 3,
}

func (OSArchitecture) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{2}
}

type ResponseCode int32

const (
	UNKNOWN_RESPONSE ResponseCode = 0
	OK               ResponseCode = 1
	ERROR            ResponseCode = 2
)

var ResponseCode_name = map[int32]string{
	0: "UNKNOWN_RESPONSE",
	1: "OK",
	2: "ERROR",
}
var ResponseCode_value = map[string]int32{
	"UNKNOWN_RESPONSE": 0,
	"OK":               1,
	"ERROR":            2,
}

func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{3}
}

type CpuInfo struct {
	ProcessorNum         int32       `protobuf:"varint,1,opt,name=processor_num,json=processorNum,proto3" json:"processor_num,omitempty"`
	VendorID             CPUVendorId `protobuf:"varint,2,opt,name=vendor_id,json=vendorId,proto3,enum=controller.CPUVendorId" json:"vendor_id,omitempty"`
	CpuFamily            int32       `protobuf:"varint,3,opt,name=cpu_family,json=cpuFamily,proto3" json:"cpu_family,omitempty"`
	ModelNumber          int32       `protobuf:"varint,4,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	ModelName            string      `protobuf:"bytes,5,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	FreqMhz              float32     `protobuf:"fixed32,6,opt,name=freq_mhz,json=freqMhz,proto3" json:"freq_mhz,omitempty"`
	Flags                []string    `protobuf:"bytes,7,rep,name=flags" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CpuInfo) Reset()      { *m = CpuInfo{} }
func (*CpuInfo) ProtoMessage() {}
func (*CpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{0}
}
func (m *CpuInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CpuInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuInfo.Merge(dst, src)
}
func (m *CpuInfo) XXX_Size() int {
	return m.Size()
}
func (m *CpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CpuInfo proto.InternalMessageInfo

func (m *CpuInfo) GetProcessorNum() int32 {
	if m != nil {
		return m.ProcessorNum
	}
	return 0
}

func (m *CpuInfo) GetVendorID() CPUVendorId {
	if m != nil {
		return m.VendorID
	}
	return UNKNOWN_VENDOR
}

func (m *CpuInfo) GetCpuFamily() int32 {
	if m != nil {
		return m.CpuFamily
	}
	return 0
}

func (m *CpuInfo) GetModelNumber() int32 {
	if m != nil {
		return m.ModelNumber
	}
	return 0
}

func (m *CpuInfo) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *CpuInfo) GetFreqMhz() float32 {
	if m != nil {
		return m.FreqMhz
	}
	return 0
}

func (m *CpuInfo) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

type LinuxOSInfo struct {
	DistributionID       string   `protobuf:"bytes,1,opt,name=distribution_id,json=distributionId,proto3" json:"distribution_id,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Release              string   `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`
	Codename             string   `protobuf:"bytes,4,opt,name=codename,proto3" json:"codename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinuxOSInfo) Reset()      { *m = LinuxOSInfo{} }
func (*LinuxOSInfo) ProtoMessage() {}
func (*LinuxOSInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{1}
}
func (m *LinuxOSInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinuxOSInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinuxOSInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LinuxOSInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinuxOSInfo.Merge(dst, src)
}
func (m *LinuxOSInfo) XXX_Size() int {
	return m.Size()
}
func (m *LinuxOSInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LinuxOSInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LinuxOSInfo proto.InternalMessageInfo

func (m *LinuxOSInfo) GetDistributionID() string {
	if m != nil {
		return m.DistributionID
	}
	return ""
}

func (m *LinuxOSInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LinuxOSInfo) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *LinuxOSInfo) GetCodename() string {
	if m != nil {
		return m.Codename
	}
	return ""
}

type HostConfig struct {
	Os            OS             `protobuf:"varint,1,opt,name=os,proto3,enum=controller.OS" json:"os,omitempty"`
	KernelVersion string         `protobuf:"bytes,2,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	CpuInfo       []*CpuInfo     `protobuf:"bytes,3,rep,name=cpu_info,json=cpuInfo" json:"cpu_info,omitempty"`
	RamSizeMb     int32          `protobuf:"varint,4,opt,name=ram_size_mb,json=ramSizeMb,proto3" json:"ram_size_mb,omitempty"`
	OsArch        OSArchitecture `protobuf:"varint,5,opt,name=os_arch,json=osArch,proto3,enum=controller.OSArchitecture" json:"os_arch,omitempty"`
	// Types that are valid to be assigned to OsDetails:
	//	*HostConfig_LinuxOsInfo
	OsDetails            isHostConfig_OsDetails `protobuf_oneof:"os_details"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HostConfig) Reset()      { *m = HostConfig{} }
func (*HostConfig) ProtoMessage() {}
func (*HostConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{2}
}
func (m *HostConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HostConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostConfig.Merge(dst, src)
}
func (m *HostConfig) XXX_Size() int {
	return m.Size()
}
func (m *HostConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HostConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HostConfig proto.InternalMessageInfo

type isHostConfig_OsDetails interface {
	isHostConfig_OsDetails()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HostConfig_LinuxOsInfo struct {
	LinuxOsInfo *LinuxOSInfo `protobuf:"bytes,6,opt,name=linux_os_info,json=linuxOsInfo,oneof"`
}

func (*HostConfig_LinuxOsInfo) isHostConfig_OsDetails() {}

func (m *HostConfig) GetOsDetails() isHostConfig_OsDetails {
	if m != nil {
		return m.OsDetails
	}
	return nil
}

func (m *HostConfig) GetOs() OS {
	if m != nil {
		return m.Os
	}
	return UNKNOWN_OS
}

func (m *HostConfig) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *HostConfig) GetCpuInfo() []*CpuInfo {
	if m != nil {
		return m.CpuInfo
	}
	return nil
}

func (m *HostConfig) GetRamSizeMb() int32 {
	if m != nil {
		return m.RamSizeMb
	}
	return 0
}

func (m *HostConfig) GetOsArch() OSArchitecture {
	if m != nil {
		return m.OsArch
	}
	return UNKNOWN_ARCHITECTURE
}

func (m *HostConfig) GetLinuxOsInfo() *LinuxOSInfo {
	if x, ok := m.GetOsDetails().(*HostConfig_LinuxOsInfo); ok {
		return x.LinuxOsInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HostConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HostConfig_OneofMarshaler, _HostConfig_OneofUnmarshaler, _HostConfig_OneofSizer, []interface{}{
		(*HostConfig_LinuxOsInfo)(nil),
	}
}

func _HostConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HostConfig)
	// os_details
	switch x := m.OsDetails.(type) {
	case *HostConfig_LinuxOsInfo:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinuxOsInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HostConfig.OsDetails has unexpected type %T", x)
	}
	return nil
}

func _HostConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HostConfig)
	switch tag {
	case 6: // os_details.linux_os_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LinuxOSInfo)
		err := b.DecodeMessage(msg)
		m.OsDetails = &HostConfig_LinuxOsInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HostConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HostConfig)
	// os_details
	switch x := m.OsDetails.(type) {
	case *HostConfig_LinuxOsInfo:
		s := proto.Size(x.LinuxOsInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UUID struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UUID) Reset()      { *m = UUID{} }
func (*UUID) ProtoMessage() {}
func (*UUID) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{3}
}
func (m *UUID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UUID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UUID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UUID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UUID.Merge(dst, src)
}
func (m *UUID) XXX_Size() int {
	return m.Size()
}
func (m *UUID) XXX_DiscardUnknown() {
	xxx_messageInfo_UUID.DiscardUnknown(m)
}

var xxx_messageInfo_UUID proto.InternalMessageInfo

func (m *UUID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RegisterAgentRequest struct {
	AgentHostConfig      *HostConfig `protobuf:"bytes,2,opt,name=agent_host_config,json=agentHostConfig" json:"agent_host_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegisterAgentRequest) Reset()      { *m = RegisterAgentRequest{} }
func (*RegisterAgentRequest) ProtoMessage() {}
func (*RegisterAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{4}
}
func (m *RegisterAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentRequest.Merge(dst, src)
}
func (m *RegisterAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentRequest proto.InternalMessageInfo

func (m *RegisterAgentRequest) GetAgentHostConfig() *HostConfig {
	if m != nil {
		return m.AgentHostConfig
	}
	return nil
}

type RegisterAgentResponse struct {
	AgentID              *UUID        `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Response             ResponseCode `protobuf:"varint,2,opt,name=response,proto3,enum=controller.ResponseCode" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RegisterAgentResponse) Reset()      { *m = RegisterAgentResponse{} }
func (*RegisterAgentResponse) ProtoMessage() {}
func (*RegisterAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{5}
}
func (m *RegisterAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentResponse.Merge(dst, src)
}
func (m *RegisterAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentResponse proto.InternalMessageInfo

func (m *RegisterAgentResponse) GetAgentID() *UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *RegisterAgentResponse) GetResponse() ResponseCode {
	if m != nil {
		return m.Response
	}
	return UNKNOWN_RESPONSE
}

type AgentDataStream struct {
	AgentID              *UUID    `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AgentDataStream) Reset()      { *m = AgentDataStream{} }
func (*AgentDataStream) ProtoMessage() {}
func (*AgentDataStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{6}
}
func (m *AgentDataStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentDataStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentDataStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentDataStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentDataStream.Merge(dst, src)
}
func (m *AgentDataStream) XXX_Size() int {
	return m.Size()
}
func (m *AgentDataStream) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentDataStream.DiscardUnknown(m)
}

var xxx_messageInfo_AgentDataStream proto.InternalMessageInfo

func (m *AgentDataStream) GetAgentID() *UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *AgentDataStream) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type AgentDataStreamResponse struct {
	Response             ResponseCode `protobuf:"varint,1,opt,name=response,proto3,enum=controller.ResponseCode" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AgentDataStreamResponse) Reset()      { *m = AgentDataStreamResponse{} }
func (*AgentDataStreamResponse) ProtoMessage() {}
func (*AgentDataStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{7}
}
func (m *AgentDataStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentDataStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentDataStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentDataStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentDataStreamResponse.Merge(dst, src)
}
func (m *AgentDataStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentDataStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentDataStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentDataStreamResponse proto.InternalMessageInfo

func (m *AgentDataStreamResponse) GetResponse() ResponseCode {
	if m != nil {
		return m.Response
	}
	return UNKNOWN_RESPONSE
}

type AgentMetadataStream struct {
	Status               ResponseCode `protobuf:"varint,1,opt,name=status,proto3,enum=controller.ResponseCode" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AgentMetadataStream) Reset()      { *m = AgentMetadataStream{} }
func (*AgentMetadataStream) ProtoMessage() {}
func (*AgentMetadataStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{8}
}
func (m *AgentMetadataStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentMetadataStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentMetadataStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentMetadataStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentMetadataStream.Merge(dst, src)
}
func (m *AgentMetadataStream) XXX_Size() int {
	return m.Size()
}
func (m *AgentMetadataStream) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentMetadataStream.DiscardUnknown(m)
}

var xxx_messageInfo_AgentMetadataStream proto.InternalMessageInfo

func (m *AgentMetadataStream) GetStatus() ResponseCode {
	if m != nil {
		return m.Status
	}
	return UNKNOWN_RESPONSE
}

type ControllerMetadataStream struct {
	Status               ResponseCode `protobuf:"varint,1,opt,name=status,proto3,enum=controller.ResponseCode" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ControllerMetadataStream) Reset()      { *m = ControllerMetadataStream{} }
func (*ControllerMetadataStream) ProtoMessage() {}
func (*ControllerMetadataStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_cce67bd3845dd505, []int{9}
}
func (m *ControllerMetadataStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControllerMetadataStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControllerMetadataStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ControllerMetadataStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerMetadataStream.Merge(dst, src)
}
func (m *ControllerMetadataStream) XXX_Size() int {
	return m.Size()
}
func (m *ControllerMetadataStream) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerMetadataStream.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerMetadataStream proto.InternalMessageInfo

func (m *ControllerMetadataStream) GetStatus() ResponseCode {
	if m != nil {
		return m.Status
	}
	return UNKNOWN_RESPONSE
}

func init() {
	proto.RegisterType((*CpuInfo)(nil), "controller.CpuInfo")
	proto.RegisterType((*LinuxOSInfo)(nil), "controller.LinuxOSInfo")
	proto.RegisterType((*HostConfig)(nil), "controller.HostConfig")
	proto.RegisterType((*UUID)(nil), "controller.UUID")
	proto.RegisterType((*RegisterAgentRequest)(nil), "controller.RegisterAgentRequest")
	proto.RegisterType((*RegisterAgentResponse)(nil), "controller.RegisterAgentResponse")
	proto.RegisterType((*AgentDataStream)(nil), "controller.AgentDataStream")
	proto.RegisterType((*AgentDataStreamResponse)(nil), "controller.AgentDataStreamResponse")
	proto.RegisterType((*AgentMetadataStream)(nil), "controller.AgentMetadataStream")
	proto.RegisterType((*ControllerMetadataStream)(nil), "controller.ControllerMetadataStream")
	proto.RegisterEnum("controller.OS", OS_name, OS_value)
	proto.RegisterEnum("controller.CPUVendorId", CPUVendorId_name, CPUVendorId_value)
	proto.RegisterEnum("controller.OSArchitecture", OSArchitecture_name, OSArchitecture_value)
	proto.RegisterEnum("controller.ResponseCode", ResponseCode_name, ResponseCode_value)
}
func (x OS) String() string {
	s, ok := OS_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CPUVendorId) String() string {
	s, ok := CPUVendorId_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OSArchitecture) String() string {
	s, ok := OSArchitecture_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ResponseCode) String() string {
	s, ok := ResponseCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CpuInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CpuInfo)
	if !ok {
		that2, ok := that.(CpuInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProcessorNum != that1.ProcessorNum {
		return false
	}
	if this.VendorID != that1.VendorID {
		return false
	}
	if this.CpuFamily != that1.CpuFamily {
		return false
	}
	if this.ModelNumber != that1.ModelNumber {
		return false
	}
	if this.ModelName != that1.ModelName {
		return false
	}
	if this.FreqMhz != that1.FreqMhz {
		return false
	}
	if len(this.Flags) != len(that1.Flags) {
		return false
	}
	for i := range this.Flags {
		if this.Flags[i] != that1.Flags[i] {
			return false
		}
	}
	return true
}
func (this *LinuxOSInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LinuxOSInfo)
	if !ok {
		that2, ok := that.(LinuxOSInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DistributionID != that1.DistributionID {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Release != that1.Release {
		return false
	}
	if this.Codename != that1.Codename {
		return false
	}
	return true
}
func (this *HostConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostConfig)
	if !ok {
		that2, ok := that.(HostConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Os != that1.Os {
		return false
	}
	if this.KernelVersion != that1.KernelVersion {
		return false
	}
	if len(this.CpuInfo) != len(that1.CpuInfo) {
		return false
	}
	for i := range this.CpuInfo {
		if !this.CpuInfo[i].Equal(that1.CpuInfo[i]) {
			return false
		}
	}
	if this.RamSizeMb != that1.RamSizeMb {
		return false
	}
	if this.OsArch != that1.OsArch {
		return false
	}
	if that1.OsDetails == nil {
		if this.OsDetails != nil {
			return false
		}
	} else if this.OsDetails == nil {
		return false
	} else if !this.OsDetails.Equal(that1.OsDetails) {
		return false
	}
	return true
}
func (this *HostConfig_LinuxOsInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostConfig_LinuxOsInfo)
	if !ok {
		that2, ok := that.(HostConfig_LinuxOsInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LinuxOsInfo.Equal(that1.LinuxOsInfo) {
		return false
	}
	return true
}
func (this *UUID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UUID)
	if !ok {
		that2, ok := that.(UUID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *RegisterAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentRequest)
	if !ok {
		that2, ok := that.(RegisterAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentHostConfig.Equal(that1.AgentHostConfig) {
		return false
	}
	return true
}
func (this *RegisterAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentResponse)
	if !ok {
		that2, ok := that.(RegisterAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if this.Response != that1.Response {
		return false
	}
	return true
}
func (this *AgentDataStream) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentDataStream)
	if !ok {
		that2, ok := that.(AgentDataStream)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *AgentDataStreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentDataStreamResponse)
	if !ok {
		that2, ok := that.(AgentDataStreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Response != that1.Response {
		return false
	}
	return true
}
func (this *AgentMetadataStream) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentMetadataStream)
	if !ok {
		that2, ok := that.(AgentMetadataStream)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *ControllerMetadataStream) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ControllerMetadataStream)
	if !ok {
		that2, ok := that.(ControllerMetadataStream)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *CpuInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&controller.CpuInfo{")
	s = append(s, "ProcessorNum: "+fmt.Sprintf("%#v", this.ProcessorNum)+",\n")
	s = append(s, "VendorID: "+fmt.Sprintf("%#v", this.VendorID)+",\n")
	s = append(s, "CpuFamily: "+fmt.Sprintf("%#v", this.CpuFamily)+",\n")
	s = append(s, "ModelNumber: "+fmt.Sprintf("%#v", this.ModelNumber)+",\n")
	s = append(s, "ModelName: "+fmt.Sprintf("%#v", this.ModelName)+",\n")
	s = append(s, "FreqMhz: "+fmt.Sprintf("%#v", this.FreqMhz)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LinuxOSInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&controller.LinuxOSInfo{")
	s = append(s, "DistributionID: "+fmt.Sprintf("%#v", this.DistributionID)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Release: "+fmt.Sprintf("%#v", this.Release)+",\n")
	s = append(s, "Codename: "+fmt.Sprintf("%#v", this.Codename)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&controller.HostConfig{")
	s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	s = append(s, "KernelVersion: "+fmt.Sprintf("%#v", this.KernelVersion)+",\n")
	if this.CpuInfo != nil {
		s = append(s, "CpuInfo: "+fmt.Sprintf("%#v", this.CpuInfo)+",\n")
	}
	s = append(s, "RamSizeMb: "+fmt.Sprintf("%#v", this.RamSizeMb)+",\n")
	s = append(s, "OsArch: "+fmt.Sprintf("%#v", this.OsArch)+",\n")
	if this.OsDetails != nil {
		s = append(s, "OsDetails: "+fmt.Sprintf("%#v", this.OsDetails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostConfig_LinuxOsInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&controller.HostConfig_LinuxOsInfo{` +
		`LinuxOsInfo:` + fmt.Sprintf("%#v", this.LinuxOsInfo) + `}`}, ", ")
	return s
}
func (this *UUID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&controller.UUID{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&controller.RegisterAgentRequest{")
	if this.AgentHostConfig != nil {
		s = append(s, "AgentHostConfig: "+fmt.Sprintf("%#v", this.AgentHostConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&controller.RegisterAgentResponse{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentDataStream) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&controller.AgentDataStream{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentDataStreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&controller.AgentDataStreamResponse{")
	s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentMetadataStream) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&controller.AgentMetadataStream{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ControllerMetadataStream) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&controller.ControllerMetadataStream{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringController(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	ProcessData(ctx context.Context, opts ...grpc.CallOption) (Controller_ProcessDataClient, error)
	MetadataRelay(ctx context.Context, opts ...grpc.CallOption) (Controller_MetadataRelayClient, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/RegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ProcessData(ctx context.Context, opts ...grpc.CallOption) (Controller_ProcessDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[0], "/controller.Controller/ProcessData", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerProcessDataClient{stream}
	return x, nil
}

type Controller_ProcessDataClient interface {
	Send(*AgentDataStream) error
	CloseAndRecv() (*AgentDataStreamResponse, error)
	grpc.ClientStream
}

type controllerProcessDataClient struct {
	grpc.ClientStream
}

func (x *controllerProcessDataClient) Send(m *AgentDataStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerProcessDataClient) CloseAndRecv() (*AgentDataStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AgentDataStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) MetadataRelay(ctx context.Context, opts ...grpc.CallOption) (Controller_MetadataRelayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[1], "/controller.Controller/MetadataRelay", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerMetadataRelayClient{stream}
	return x, nil
}

type Controller_MetadataRelayClient interface {
	Send(*AgentMetadataStream) error
	Recv() (*ControllerMetadataStream, error)
	grpc.ClientStream
}

type controllerMetadataRelayClient struct {
	grpc.ClientStream
}

func (x *controllerMetadataRelayClient) Send(m *AgentMetadataStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerMetadataRelayClient) Recv() (*ControllerMetadataStream, error) {
	m := new(ControllerMetadataStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Controller service

type ControllerServer interface {
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	ProcessData(Controller_ProcessDataServer) error
	MetadataRelay(Controller_MetadataRelayServer) error
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ProcessData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).ProcessData(&controllerProcessDataServer{stream})
}

type Controller_ProcessDataServer interface {
	SendAndClose(*AgentDataStreamResponse) error
	Recv() (*AgentDataStream, error)
	grpc.ServerStream
}

type controllerProcessDataServer struct {
	grpc.ServerStream
}

func (x *controllerProcessDataServer) SendAndClose(m *AgentDataStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerProcessDataServer) Recv() (*AgentDataStream, error) {
	m := new(AgentDataStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Controller_MetadataRelay_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).MetadataRelay(&controllerMetadataRelayServer{stream})
}

type Controller_MetadataRelayServer interface {
	Send(*ControllerMetadataStream) error
	Recv() (*AgentMetadataStream, error)
	grpc.ServerStream
}

type controllerMetadataRelayServer struct {
	grpc.ServerStream
}

func (x *controllerMetadataRelayServer) Send(m *ControllerMetadataStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerMetadataRelayServer) Recv() (*AgentMetadataStream, error) {
	m := new(AgentMetadataStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _Controller_RegisterAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessData",
			Handler:       _Controller_ProcessData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MetadataRelay",
			Handler:       _Controller_MetadataRelay_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "primitive-agent/controller/proto/controller.proto",
}

func (m *CpuInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProcessorNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintController(dAtA, i, uint64(m.ProcessorNum))
	}
	if m.VendorID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintController(dAtA, i, uint64(m.VendorID))
	}
	if m.CpuFamily != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintController(dAtA, i, uint64(m.CpuFamily))
	}
	if m.ModelNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintController(dAtA, i, uint64(m.ModelNumber))
	}
	if len(m.ModelName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintController(dAtA, i, uint64(len(m.ModelName)))
		i += copy(dAtA[i:], m.ModelName)
	}
	if m.FreqMhz != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FreqMhz))))
		i += 4
	}
	if len(m.Flags) > 0 {
		for _, s := range m.Flags {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *LinuxOSInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinuxOSInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DistributionID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintController(dAtA, i, uint64(len(m.DistributionID)))
		i += copy(dAtA[i:], m.DistributionID)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintController(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Release) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintController(dAtA, i, uint64(len(m.Release)))
		i += copy(dAtA[i:], m.Release)
	}
	if len(m.Codename) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintController(dAtA, i, uint64(len(m.Codename)))
		i += copy(dAtA[i:], m.Codename)
	}
	return i, nil
}

func (m *HostConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Os != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintController(dAtA, i, uint64(m.Os))
	}
	if len(m.KernelVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintController(dAtA, i, uint64(len(m.KernelVersion)))
		i += copy(dAtA[i:], m.KernelVersion)
	}
	if len(m.CpuInfo) > 0 {
		for _, msg := range m.CpuInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintController(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RamSizeMb != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintController(dAtA, i, uint64(m.RamSizeMb))
	}
	if m.OsArch != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintController(dAtA, i, uint64(m.OsArch))
	}
	if m.OsDetails != nil {
		nn1, err := m.OsDetails.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *HostConfig_LinuxOsInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LinuxOsInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintController(dAtA, i, uint64(m.LinuxOsInfo.Size()))
		n2, err := m.LinuxOsInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *UUID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UUID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintController(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *RegisterAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentHostConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintController(dAtA, i, uint64(m.AgentHostConfig.Size()))
		n3, err := m.AgentHostConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RegisterAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintController(dAtA, i, uint64(m.AgentID.Size()))
		n4, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Response != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintController(dAtA, i, uint64(m.Response))
	}
	return i, nil
}

func (m *AgentDataStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentDataStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintController(dAtA, i, uint64(m.AgentID.Size()))
		n5, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintController(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *AgentDataStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentDataStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintController(dAtA, i, uint64(m.Response))
	}
	return i, nil
}

func (m *AgentMetadataStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentMetadataStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintController(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *ControllerMetadataStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerMetadataStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintController(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeVarintController(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CpuInfo) Size() (n int) {
	var l int
	_ = l
	if m.ProcessorNum != 0 {
		n += 1 + sovController(uint64(m.ProcessorNum))
	}
	if m.VendorID != 0 {
		n += 1 + sovController(uint64(m.VendorID))
	}
	if m.CpuFamily != 0 {
		n += 1 + sovController(uint64(m.CpuFamily))
	}
	if m.ModelNumber != 0 {
		n += 1 + sovController(uint64(m.ModelNumber))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	if m.FreqMhz != 0 {
		n += 5
	}
	if len(m.Flags) > 0 {
		for _, s := range m.Flags {
			l = len(s)
			n += 1 + l + sovController(uint64(l))
		}
	}
	return n
}

func (m *LinuxOSInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.DistributionID)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	l = len(m.Release)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	l = len(m.Codename)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *HostConfig) Size() (n int) {
	var l int
	_ = l
	if m.Os != 0 {
		n += 1 + sovController(uint64(m.Os))
	}
	l = len(m.KernelVersion)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	if len(m.CpuInfo) > 0 {
		for _, e := range m.CpuInfo {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	if m.RamSizeMb != 0 {
		n += 1 + sovController(uint64(m.RamSizeMb))
	}
	if m.OsArch != 0 {
		n += 1 + sovController(uint64(m.OsArch))
	}
	if m.OsDetails != nil {
		n += m.OsDetails.Size()
	}
	return n
}

func (m *HostConfig_LinuxOsInfo) Size() (n int) {
	var l int
	_ = l
	if m.LinuxOsInfo != nil {
		l = m.LinuxOsInfo.Size()
		n += 1 + l + sovController(uint64(l))
	}
	return n
}
func (m *UUID) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *RegisterAgentRequest) Size() (n int) {
	var l int
	_ = l
	if m.AgentHostConfig != nil {
		l = m.AgentHostConfig.Size()
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *RegisterAgentResponse) Size() (n int) {
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovController(uint64(l))
	}
	if m.Response != 0 {
		n += 1 + sovController(uint64(m.Response))
	}
	return n
}

func (m *AgentDataStream) Size() (n int) {
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovController(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *AgentDataStreamResponse) Size() (n int) {
	var l int
	_ = l
	if m.Response != 0 {
		n += 1 + sovController(uint64(m.Response))
	}
	return n
}

func (m *AgentMetadataStream) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovController(uint64(m.Status))
	}
	return n
}

func (m *ControllerMetadataStream) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovController(uint64(m.Status))
	}
	return n
}

func sovController(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozController(x uint64) (n int) {
	return sovController(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CpuInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CpuInfo{`,
		`ProcessorNum:` + fmt.Sprintf("%v", this.ProcessorNum) + `,`,
		`VendorID:` + fmt.Sprintf("%v", this.VendorID) + `,`,
		`CpuFamily:` + fmt.Sprintf("%v", this.CpuFamily) + `,`,
		`ModelNumber:` + fmt.Sprintf("%v", this.ModelNumber) + `,`,
		`ModelName:` + fmt.Sprintf("%v", this.ModelName) + `,`,
		`FreqMhz:` + fmt.Sprintf("%v", this.FreqMhz) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinuxOSInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinuxOSInfo{`,
		`DistributionID:` + fmt.Sprintf("%v", this.DistributionID) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Release:` + fmt.Sprintf("%v", this.Release) + `,`,
		`Codename:` + fmt.Sprintf("%v", this.Codename) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostConfig{`,
		`Os:` + fmt.Sprintf("%v", this.Os) + `,`,
		`KernelVersion:` + fmt.Sprintf("%v", this.KernelVersion) + `,`,
		`CpuInfo:` + strings.Replace(fmt.Sprintf("%v", this.CpuInfo), "CpuInfo", "CpuInfo", 1) + `,`,
		`RamSizeMb:` + fmt.Sprintf("%v", this.RamSizeMb) + `,`,
		`OsArch:` + fmt.Sprintf("%v", this.OsArch) + `,`,
		`OsDetails:` + fmt.Sprintf("%v", this.OsDetails) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostConfig_LinuxOsInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostConfig_LinuxOsInfo{`,
		`LinuxOsInfo:` + strings.Replace(fmt.Sprintf("%v", this.LinuxOsInfo), "LinuxOSInfo", "LinuxOSInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UUID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UUID{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentRequest{`,
		`AgentHostConfig:` + strings.Replace(fmt.Sprintf("%v", this.AgentHostConfig), "HostConfig", "HostConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentResponse{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "UUID", 1) + `,`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentDataStream) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentDataStream{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "UUID", 1) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentDataStreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentDataStreamResponse{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentMetadataStream) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentMetadataStream{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControllerMetadataStream) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControllerMetadataStream{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringController(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CpuInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessorNum", wireType)
			}
			m.ProcessorNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessorNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorID", wireType)
			}
			m.VendorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorID |= (CPUVendorId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuFamily", wireType)
			}
			m.CpuFamily = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuFamily |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelNumber", wireType)
			}
			m.ModelNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModelNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreqMhz", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FreqMhz = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flags = append(m.Flags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinuxOSInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinuxOSInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinuxOSInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Release", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Release = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			m.Os = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Os |= (OS(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CpuInfo = append(m.CpuInfo, &CpuInfo{})
			if err := m.CpuInfo[len(m.CpuInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RamSizeMb", wireType)
			}
			m.RamSizeMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RamSizeMb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsArch", wireType)
			}
			m.OsArch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsArch |= (OSArchitecture(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinuxOsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LinuxOSInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OsDetails = &HostConfig_LinuxOsInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UUID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UUID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UUID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentHostConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentHostConfig == nil {
				m.AgentHostConfig = &HostConfig{}
			}
			if err := m.AgentHostConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			m.Response = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Response |= (ResponseCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentDataStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentDataStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentDataStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentDataStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentDataStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentDataStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			m.Response = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Response |= (ResponseCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentMetadataStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentMetadataStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentMetadataStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ResponseCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControllerMetadataStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerMetadataStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerMetadataStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ResponseCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipController(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowController
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthController
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowController
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipController(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthController = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowController   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("primitive-agent/controller/proto/controller.proto", fileDescriptor_controller_cce67bd3845dd505)
}

var fileDescriptor_controller_cce67bd3845dd505 = []byte{
	// 1132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xae, 0x1d, 0xff, 0x78, 0x9b, 0xb8, 0xcb, 0x34, 0x50, 0x13, 0x60, 0xe3, 0xba, 0x20,
	0x59, 0x91, 0x9a, 0x14, 0xb7, 0x84, 0x48, 0x85, 0x83, 0x7f, 0x04, 0x62, 0xda, 0xd8, 0x61, 0xdc,
	0xa4, 0x52, 0x85, 0xb4, 0x5a, 0xef, 0x8e, 0x9d, 0x81, 0xdd, 0x1d, 0x77, 0x66, 0x37, 0x6d, 0x73,
	0xe2, 0x80, 0xc4, 0x11, 0x6e, 0xdc, 0x91, 0x90, 0xf8, 0x53, 0x38, 0xf6, 0xc8, 0xa9, 0xa2, 0xe6,
	0xc2, 0xb1, 0x7f, 0x02, 0x9a, 0x59, 0x27, 0x5e, 0xa7, 0x6a, 0x41, 0xea, 0x6d, 0xde, 0x37, 0xdf,
	0xfb, 0xe6, 0x9b, 0xf7, 0xde, 0xd8, 0x0b, 0x1f, 0x4f, 0x38, 0x0d, 0x68, 0x44, 0x4f, 0xc8, 0x75,
	0x67, 0x4c, 0xc2, 0x68, 0xcb, 0x65, 0x61, 0xc4, 0x99, 0xef, 0x13, 0xbe, 0x35, 0xe1, 0x2c, 0x62,
	0x29, 0x60, 0x53, 0x01, 0x08, 0xe6, 0xc8, 0xda, 0xf5, 0x31, 0x8d, 0x8e, 0xe3, 0xe1, 0xa6, 0xcb,
	0x82, 0xad, 0x31, 0x1b, 0xb3, 0x24, 0x67, 0x18, 0x8f, 0x54, 0x94, 0x08, 0xc8, 0x55, 0x92, 0x5a,
	0xfb, 0x41, 0x87, 0x42, 0x7b, 0x12, 0x77, 0xc3, 0x11, 0x43, 0xd7, 0x60, 0x65, 0xc2, 0x99, 0x4b,
	0x84, 0x60, 0xdc, 0x0e, 0xe3, 0xa0, 0xa2, 0x55, 0xb5, 0xfa, 0x12, 0x5e, 0x3e, 0x07, 0x7b, 0x71,
	0x80, 0x5a, 0x50, 0x3a, 0x21, 0xa1, 0xc7, 0xb8, 0x4d, 0xbd, 0x8a, 0x5e, 0xd5, 0xea, 0xe5, 0xc6,
	0x95, 0xcd, 0x94, 0xa3, 0xf6, 0xc1, 0xe1, 0x91, 0xda, 0xef, 0x7a, 0xad, 0xe5, 0xe9, 0xb3, 0xf5,
	0xe2, 0x2c, 0xea, 0xe0, 0xe2, 0xc9, 0x0c, 0x47, 0x1f, 0x00, 0xb8, 0x93, 0xd8, 0x1e, 0x39, 0x01,
	0xf5, 0x9f, 0x54, 0xb2, 0xea, 0x94, 0x92, 0x3b, 0x89, 0xbf, 0x50, 0x00, 0xba, 0x0a, 0xcb, 0x01,
	0xf3, 0x88, 0x2f, 0x3d, 0x0c, 0x09, 0xaf, 0xe4, 0x14, 0xc1, 0x50, 0x58, 0x4f, 0x41, 0x52, 0x61,
	0x46, 0x71, 0x02, 0x52, 0x59, 0xaa, 0x6a, 0xf5, 0x12, 0x2e, 0x25, 0x04, 0x27, 0x20, 0xe8, 0x5d,
	0x28, 0x8e, 0x38, 0x79, 0x68, 0x07, 0xc7, 0xa7, 0x95, 0x7c, 0x55, 0xab, 0xeb, 0xb8, 0x20, 0xe3,
	0xfd, 0xe3, 0x53, 0xb4, 0x0a, 0x4b, 0x23, 0xdf, 0x19, 0x8b, 0x4a, 0xa1, 0x9a, 0xad, 0x97, 0x70,
	0x12, 0xd4, 0x7e, 0xd5, 0xc0, 0xb8, 0x4b, 0xc3, 0xf8, 0x71, 0x7f, 0xa0, 0x4a, 0x71, 0x1b, 0x2e,
	0x79, 0x54, 0x44, 0x9c, 0x0e, 0xe3, 0x88, 0xb2, 0x50, 0xde, 0x55, 0x16, 0xa3, 0xd4, 0x42, 0xd3,
	0x67, 0xeb, 0xe5, 0x4e, 0x6a, 0xab, 0xdb, 0xc1, 0xe5, 0x34, 0xb5, 0xeb, 0xa1, 0x2a, 0x18, 0x1e,
	0x11, 0x2e, 0xa7, 0x13, 0x09, 0xa8, 0x22, 0x95, 0x70, 0x1a, 0x42, 0x15, 0x28, 0x70, 0xe2, 0x13,
	0x47, 0x10, 0x75, 0xfb, 0x12, 0x3e, 0x0b, 0xd1, 0x1a, 0x14, 0x5d, 0xe6, 0x11, 0x75, 0xad, 0x9c,
	0xda, 0x3a, 0x8f, 0x6b, 0xbf, 0xe9, 0x00, 0x7b, 0x4c, 0x44, 0x6d, 0x16, 0x8e, 0xe8, 0x18, 0x59,
	0xa0, 0x33, 0xa1, 0x6c, 0x95, 0x1b, 0xe5, 0x74, 0x0b, 0xfa, 0x03, 0xac, 0x33, 0x81, 0x3e, 0x82,
	0xf2, 0x77, 0x84, 0x87, 0xc4, 0xb7, 0x4f, 0x08, 0x17, 0x73, 0x27, 0x2b, 0x09, 0x7a, 0x94, 0x80,
	0x68, 0x13, 0x8a, 0xb2, 0x19, 0x34, 0x1c, 0xb1, 0x4a, 0xb6, 0x9a, 0xad, 0x1b, 0x8d, 0xcb, 0x0b,
	0xfd, 0x4c, 0x86, 0x03, 0x17, 0xdc, 0xd9, 0x94, 0x58, 0x60, 0x70, 0x27, 0xb0, 0x05, 0x3d, 0x25,
	0x76, 0x30, 0x9c, 0x35, 0xa7, 0xc4, 0x9d, 0x60, 0x40, 0x4f, 0xc9, 0xfe, 0x10, 0xdd, 0x84, 0x02,
	0x13, 0xb6, 0xc3, 0xdd, 0x63, 0xd5, 0x97, 0x72, 0x63, 0x6d, 0xd1, 0x5b, 0x93, 0xbb, 0xc7, 0x34,
	0x22, 0x6e, 0x14, 0x73, 0x82, 0xf3, 0x4c, 0xc8, 0x18, 0x7d, 0x0e, 0x2b, 0xbe, 0x2c, 0xbf, 0xcd,
	0x44, 0xe2, 0x44, 0x76, 0xcd, 0x58, 0x9c, 0xac, 0x54, 0x7f, 0xf6, 0x32, 0xd8, 0x50, 0xfc, 0xbe,
	0x90, 0x61, 0x6b, 0x19, 0x80, 0x09, 0xdb, 0x23, 0x91, 0x43, 0x7d, 0x51, 0x7b, 0x1f, 0x72, 0x87,
	0x87, 0xdd, 0x8e, 0x6c, 0xf5, 0x89, 0xe3, 0xc7, 0x24, 0x69, 0x1d, 0x4e, 0x82, 0xda, 0x03, 0x58,
	0xc5, 0x64, 0x4c, 0x45, 0x44, 0x78, 0x53, 0xbe, 0x2f, 0x4c, 0x1e, 0xc6, 0x44, 0x44, 0xa8, 0x05,
	0x6f, 0xa9, 0xf7, 0x66, 0x1f, 0x33, 0x11, 0xd9, 0xae, 0xaa, 0xb1, 0xaa, 0x98, 0xd1, 0x78, 0x27,
	0x6d, 0x63, 0xde, 0x01, 0x7c, 0x49, 0x25, 0xcc, 0x81, 0xda, 0x8f, 0x1a, 0xbc, 0x7d, 0x41, 0x5c,
	0x4c, 0x58, 0x28, 0x08, 0xda, 0x81, 0x62, 0xa2, 0x3e, 0x9b, 0x24, 0xa3, 0x61, 0xa6, 0x45, 0xa5,
	0xdf, 0x96, 0x31, 0x7d, 0xb6, 0x5e, 0x50, 0x69, 0xdd, 0x0e, 0x2e, 0x28, 0x7a, 0xd7, 0x43, 0xb7,
	0xa0, 0xc8, 0x67, 0x2a, 0xb3, 0xf7, 0x56, 0x49, 0x67, 0x9e, 0x9d, 0xd0, 0x66, 0x1e, 0xc1, 0xe7,
	0xcc, 0x9a, 0x0d, 0x97, 0x94, 0x52, 0xc7, 0x89, 0x9c, 0x41, 0xc4, 0x89, 0x13, 0xbc, 0x81, 0x05,
	0x04, 0x39, 0xcf, 0x89, 0x9c, 0xd9, 0xfc, 0xa8, 0x75, 0xad, 0x0f, 0x57, 0x2e, 0x1c, 0x70, 0x7e,
	0xd7, 0xb4, 0x63, 0xed, 0x7f, 0x3b, 0xfe, 0x12, 0x2e, 0x2b, 0xc1, 0x7d, 0x12, 0x39, 0xde, 0xdc,
	0xf5, 0x0d, 0xc8, 0x8b, 0xc8, 0x89, 0x62, 0xf1, 0x9f, 0x52, 0x33, 0x5e, 0xed, 0x2e, 0x54, 0xda,
	0xe7, 0x94, 0x37, 0x55, 0xdb, 0xe8, 0x81, 0xde, 0x1f, 0xa0, 0x32, 0xc0, 0x61, 0xef, 0x4e, 0xaf,
	0x7f, 0xbf, 0x67, 0xf7, 0x07, 0x66, 0x06, 0x95, 0x60, 0x49, 0x8d, 0xa3, 0xa9, 0x21, 0x03, 0x0a,
	0xf7, 0x69, 0xe8, 0xb1, 0x47, 0xc2, 0xd4, 0x11, 0x40, 0xbe, 0xe3, 0xf0, 0x47, 0x34, 0x34, 0xb3,
	0xa8, 0x00, 0x59, 0xda, 0x1f, 0x98, 0x39, 0xc9, 0x68, 0x86, 0x1e, 0x67, 0xd4, 0x33, 0x97, 0x36,
	0x7e, 0xd2, 0xc0, 0x48, 0xfd, 0x46, 0x22, 0x04, 0xe5, 0x33, 0xe5, 0xa3, 0xdd, 0x5e, 0xa7, 0x8f,
	0x13, 0xf5, 0x6e, 0x18, 0x11, 0xdf, 0xd4, 0xa4, 0x48, 0x73, 0xbf, 0x63, 0xea, 0x68, 0x19, 0x8a,
	0x5f, 0xc7, 0x8e, 0xef, 0xb2, 0x20, 0x30, 0xb3, 0xf2, 0x9c, 0xde, 0x51, 0xb7, 0xd3, 0x6d, 0x9a,
	0x39, 0x49, 0xe9, 0xb6, 0xf6, 0xcd, 0x25, 0x79, 0xce, 0xc0, 0x09, 0x44, 0x1c, 0x8e, 0xcd, 0xbc,
	0xe4, 0xef, 0xb3, 0x88, 0x71, 0xe6, 0x3b, 0x66, 0x01, 0xe5, 0x41, 0xdf, 0x3b, 0x30, 0x8b, 0xa8,
	0x08, 0xb9, 0x0e, 0xf1, 0x7d, 0xb3, 0x24, 0x57, 0x4d, 0x97, 0x70, 0x13, 0x36, 0xbe, 0x82, 0xf2,
	0xe2, 0xab, 0x44, 0x15, 0x58, 0x3d, 0xf3, 0xd4, 0xc4, 0xed, 0xbd, 0xee, 0xbd, 0xdd, 0xf6, 0xbd,
	0x43, 0xbc, 0x6b, 0x66, 0xe4, 0xb9, 0x8f, 0x77, 0xb6, 0xed, 0xed, 0x5b, 0xa6, 0x26, 0x15, 0xe8,
	0xcd, 0x9d, 0x6d, 0x53, 0x57, 0xab, 0x4f, 0x76, 0xb6, 0xcd, 0xec, 0xc6, 0xa7, 0xb0, 0x9c, 0xae,
	0x22, 0x5a, 0x05, 0xf3, 0x4c, 0x09, 0xef, 0x0e, 0x0e, 0xfa, 0xbd, 0x81, 0x54, 0xc9, 0x83, 0xde,
	0xbf, 0x63, 0x6a, 0xf2, 0x9e, 0xbb, 0x18, 0xf7, 0xb1, 0xa9, 0x37, 0x7e, 0xd1, 0x01, 0xe6, 0x5d,
	0x43, 0x47, 0xb0, 0xb2, 0xf0, 0x8e, 0x50, 0x75, 0xb1, 0x51, 0x2f, 0xbf, 0xdf, 0xb5, 0xab, 0xaf,
	0x61, 0xcc, 0x46, 0x2c, 0x83, 0x06, 0x60, 0x1c, 0x24, 0xff, 0x66, 0x72, 0x6e, 0xd1, 0x7b, 0xe9,
	0x9c, 0x0b, 0xe3, 0xbc, 0x76, 0xed, 0x35, 0x9b, 0x73, 0xc9, 0xba, 0x86, 0xbe, 0x81, 0x95, 0xb3,
	0x31, 0xc3, 0xc4, 0x77, 0x9e, 0xa0, 0xf5, 0x97, 0x32, 0x17, 0xc7, 0x70, 0xed, 0xc3, 0x85, 0x5f,
	0xd8, 0x57, 0x0c, 0xab, 0xd4, 0xbe, 0xa1, 0xb5, 0xbe, 0x7d, 0xfa, 0xdc, 0xca, 0xfc, 0xf9, 0xdc,
	0xca, 0xbc, 0x78, 0x6e, 0x69, 0xdf, 0x4f, 0x2d, 0xed, 0xf7, 0xa9, 0xa5, 0xfd, 0x31, 0xb5, 0xb4,
	0xa7, 0x53, 0x4b, 0xfb, 0x6b, 0x6a, 0x69, 0xff, 0x4c, 0xad, 0xcc, 0x8b, 0xa9, 0xa5, 0xfd, 0xfc,
	0xb7, 0x95, 0x79, 0xf0, 0xd9, 0x84, 0x3e, 0xa6, 0xc4, 0x77, 0x86, 0x62, 0xd3, 0xa1, 0x5b, 0xe7,
	0xc1, 0xd6, 0xab, 0x3f, 0x2a, 0x6e, 0xcf, 0x97, 0xc3, 0xbc, 0xfa, 0x28, 0xb8, 0xf9, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x46, 0xd2, 0x71, 0x7a, 0x84, 0x08, 0x00, 0x00,
}
