// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: demos/load_generation/proto/load_config.proto

package load_generation // import "pixielabs.ai/pixielabs/demos/load_generation/proto/"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LocustConfigFile struct {
	Phases               []*LocustPhaseConfig `protobuf:"bytes,1,rep,name=phases" json:"phases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LocustConfigFile) Reset()      { *m = LocustConfigFile{} }
func (*LocustConfigFile) ProtoMessage() {}
func (*LocustConfigFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_load_config_81f83bd43966f0da, []int{0}
}
func (m *LocustConfigFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocustConfigFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocustConfigFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LocustConfigFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocustConfigFile.Merge(dst, src)
}
func (m *LocustConfigFile) XXX_Size() int {
	return m.Size()
}
func (m *LocustConfigFile) XXX_DiscardUnknown() {
	xxx_messageInfo_LocustConfigFile.DiscardUnknown(m)
}

var xxx_messageInfo_LocustConfigFile proto.InternalMessageInfo

func (m *LocustConfigFile) GetPhases() []*LocustPhaseConfig {
	if m != nil {
		return m.Phases
	}
	return nil
}

type LocustPhaseConfig struct {
	UserTypes            []*UserType `protobuf:"bytes,1,rep,name=user_types,json=userTypes" json:"user_types,omitempty"`
	Duration             int32       `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	NumUsers             int32       `protobuf:"varint,3,opt,name=num_users,json=numUsers,proto3" json:"num_users,omitempty"`
	HatchRatePerS        int32       `protobuf:"varint,4,opt,name=hatch_rate_per_s,json=hatchRatePerS,proto3" json:"hatch_rate_per_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LocustPhaseConfig) Reset()      { *m = LocustPhaseConfig{} }
func (*LocustPhaseConfig) ProtoMessage() {}
func (*LocustPhaseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_load_config_81f83bd43966f0da, []int{1}
}
func (m *LocustPhaseConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocustPhaseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocustPhaseConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LocustPhaseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocustPhaseConfig.Merge(dst, src)
}
func (m *LocustPhaseConfig) XXX_Size() int {
	return m.Size()
}
func (m *LocustPhaseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LocustPhaseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LocustPhaseConfig proto.InternalMessageInfo

func (m *LocustPhaseConfig) GetUserTypes() []*UserType {
	if m != nil {
		return m.UserTypes
	}
	return nil
}

func (m *LocustPhaseConfig) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *LocustPhaseConfig) GetNumUsers() int32 {
	if m != nil {
		return m.NumUsers
	}
	return 0
}

func (m *LocustPhaseConfig) GetHatchRatePerS() int32 {
	if m != nil {
		return m.HatchRatePerS
	}
	return 0
}

type UserType struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ratio                int32    `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	MinWaitMs            int32    `protobuf:"varint,3,opt,name=min_wait_ms,json=minWaitMs,proto3" json:"min_wait_ms,omitempty"`
	MaxWaitMs            int32    `protobuf:"varint,4,opt,name=max_wait_ms,json=maxWaitMs,proto3" json:"max_wait_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserType) Reset()      { *m = UserType{} }
func (*UserType) ProtoMessage() {}
func (*UserType) Descriptor() ([]byte, []int) {
	return fileDescriptor_load_config_81f83bd43966f0da, []int{2}
}
func (m *UserType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserType.Merge(dst, src)
}
func (m *UserType) XXX_Size() int {
	return m.Size()
}
func (m *UserType) XXX_DiscardUnknown() {
	xxx_messageInfo_UserType.DiscardUnknown(m)
}

var xxx_messageInfo_UserType proto.InternalMessageInfo

func (m *UserType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserType) GetRatio() int32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *UserType) GetMinWaitMs() int32 {
	if m != nil {
		return m.MinWaitMs
	}
	return 0
}

func (m *UserType) GetMaxWaitMs() int32 {
	if m != nil {
		return m.MaxWaitMs
	}
	return 0
}

func init() {
	proto.RegisterType((*LocustConfigFile)(nil), "pl.demos.load_generation.LocustConfigFile")
	proto.RegisterType((*LocustPhaseConfig)(nil), "pl.demos.load_generation.LocustPhaseConfig")
	proto.RegisterType((*UserType)(nil), "pl.demos.load_generation.UserType")
}
func (this *LocustConfigFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocustConfigFile)
	if !ok {
		that2, ok := that.(LocustConfigFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Phases) != len(that1.Phases) {
		return false
	}
	for i := range this.Phases {
		if !this.Phases[i].Equal(that1.Phases[i]) {
			return false
		}
	}
	return true
}
func (this *LocustPhaseConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocustPhaseConfig)
	if !ok {
		that2, ok := that.(LocustPhaseConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UserTypes) != len(that1.UserTypes) {
		return false
	}
	for i := range this.UserTypes {
		if !this.UserTypes[i].Equal(that1.UserTypes[i]) {
			return false
		}
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.NumUsers != that1.NumUsers {
		return false
	}
	if this.HatchRatePerS != that1.HatchRatePerS {
		return false
	}
	return true
}
func (this *UserType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserType)
	if !ok {
		that2, ok := that.(UserType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Ratio != that1.Ratio {
		return false
	}
	if this.MinWaitMs != that1.MinWaitMs {
		return false
	}
	if this.MaxWaitMs != that1.MaxWaitMs {
		return false
	}
	return true
}
func (this *LocustConfigFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&load_generation.LocustConfigFile{")
	if this.Phases != nil {
		s = append(s, "Phases: "+fmt.Sprintf("%#v", this.Phases)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocustPhaseConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&load_generation.LocustPhaseConfig{")
	if this.UserTypes != nil {
		s = append(s, "UserTypes: "+fmt.Sprintf("%#v", this.UserTypes)+",\n")
	}
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "NumUsers: "+fmt.Sprintf("%#v", this.NumUsers)+",\n")
	s = append(s, "HatchRatePerS: "+fmt.Sprintf("%#v", this.HatchRatePerS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&load_generation.UserType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Ratio: "+fmt.Sprintf("%#v", this.Ratio)+",\n")
	s = append(s, "MinWaitMs: "+fmt.Sprintf("%#v", this.MinWaitMs)+",\n")
	s = append(s, "MaxWaitMs: "+fmt.Sprintf("%#v", this.MaxWaitMs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLoadConfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LocustConfigFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocustConfigFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phases) > 0 {
		for _, msg := range m.Phases {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLoadConfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LocustPhaseConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocustPhaseConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserTypes) > 0 {
		for _, msg := range m.UserTypes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLoadConfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Duration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLoadConfig(dAtA, i, uint64(m.Duration))
	}
	if m.NumUsers != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLoadConfig(dAtA, i, uint64(m.NumUsers))
	}
	if m.HatchRatePerS != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLoadConfig(dAtA, i, uint64(m.HatchRatePerS))
	}
	return i, nil
}

func (m *UserType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLoadConfig(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Ratio != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLoadConfig(dAtA, i, uint64(m.Ratio))
	}
	if m.MinWaitMs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLoadConfig(dAtA, i, uint64(m.MinWaitMs))
	}
	if m.MaxWaitMs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLoadConfig(dAtA, i, uint64(m.MaxWaitMs))
	}
	return i, nil
}

func encodeVarintLoadConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LocustConfigFile) Size() (n int) {
	var l int
	_ = l
	if len(m.Phases) > 0 {
		for _, e := range m.Phases {
			l = e.Size()
			n += 1 + l + sovLoadConfig(uint64(l))
		}
	}
	return n
}

func (m *LocustPhaseConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.UserTypes) > 0 {
		for _, e := range m.UserTypes {
			l = e.Size()
			n += 1 + l + sovLoadConfig(uint64(l))
		}
	}
	if m.Duration != 0 {
		n += 1 + sovLoadConfig(uint64(m.Duration))
	}
	if m.NumUsers != 0 {
		n += 1 + sovLoadConfig(uint64(m.NumUsers))
	}
	if m.HatchRatePerS != 0 {
		n += 1 + sovLoadConfig(uint64(m.HatchRatePerS))
	}
	return n
}

func (m *UserType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLoadConfig(uint64(l))
	}
	if m.Ratio != 0 {
		n += 1 + sovLoadConfig(uint64(m.Ratio))
	}
	if m.MinWaitMs != 0 {
		n += 1 + sovLoadConfig(uint64(m.MinWaitMs))
	}
	if m.MaxWaitMs != 0 {
		n += 1 + sovLoadConfig(uint64(m.MaxWaitMs))
	}
	return n
}

func sovLoadConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLoadConfig(x uint64) (n int) {
	return sovLoadConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LocustConfigFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocustConfigFile{`,
		`Phases:` + strings.Replace(fmt.Sprintf("%v", this.Phases), "LocustPhaseConfig", "LocustPhaseConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocustPhaseConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocustPhaseConfig{`,
		`UserTypes:` + strings.Replace(fmt.Sprintf("%v", this.UserTypes), "UserType", "UserType", 1) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`NumUsers:` + fmt.Sprintf("%v", this.NumUsers) + `,`,
		`HatchRatePerS:` + fmt.Sprintf("%v", this.HatchRatePerS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Ratio:` + fmt.Sprintf("%v", this.Ratio) + `,`,
		`MinWaitMs:` + fmt.Sprintf("%v", this.MinWaitMs) + `,`,
		`MaxWaitMs:` + fmt.Sprintf("%v", this.MaxWaitMs) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLoadConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LocustConfigFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocustConfigFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocustConfigFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoadConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phases = append(m.Phases, &LocustPhaseConfig{})
			if err := m.Phases[len(m.Phases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocustPhaseConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocustPhaseConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocustPhaseConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoadConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTypes = append(m.UserTypes, &UserType{})
			if err := m.UserTypes[len(m.UserTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUsers", wireType)
			}
			m.NumUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUsers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HatchRatePerS", wireType)
			}
			m.HatchRatePerS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HatchRatePerS |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLoadConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinWaitMs", wireType)
			}
			m.MinWaitMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinWaitMs |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWaitMs", wireType)
			}
			m.MaxWaitMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWaitMs |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLoadConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoadConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoadConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoadConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLoadConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLoadConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLoadConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLoadConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoadConfig   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("demos/load_generation/proto/load_config.proto", fileDescriptor_load_config_81f83bd43966f0da)
}

var fileDescriptor_load_config_81f83bd43966f0da = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xb1, 0x8e, 0xd3, 0x30,
	0x1c, 0xc6, 0x63, 0xae, 0x77, 0xba, 0xf8, 0x84, 0x74, 0x58, 0x0c, 0xd1, 0x21, 0x59, 0x55, 0x16,
	0x2a, 0xa1, 0x4b, 0x24, 0x18, 0x99, 0xa0, 0x12, 0x13, 0x48, 0xa7, 0x00, 0xaa, 0xc4, 0x62, 0x39,
	0xa9, 0x9b, 0x58, 0x8a, 0xed, 0x10, 0xdb, 0xa2, 0xdd, 0x78, 0x04, 0x1e, 0x83, 0x47, 0xe0, 0x11,
	0x18, 0x3b, 0x32, 0xd2, 0xb0, 0x30, 0xf6, 0x11, 0x50, 0xec, 0x34, 0x43, 0x51, 0x6f, 0xf3, 0xf7,
	0x7d, 0xff, 0xef, 0xf7, 0x2d, 0x86, 0xb7, 0x4b, 0x26, 0x94, 0x4e, 0x6b, 0x45, 0x97, 0xa4, 0x64,
	0x92, 0xb5, 0xd4, 0x70, 0x25, 0xd3, 0xa6, 0x55, 0x46, 0x79, 0xb7, 0x50, 0x72, 0xc5, 0xcb, 0xc4,
	0x39, 0x28, 0x6a, 0xea, 0xc4, 0x35, 0x92, 0xa3, 0xc6, 0xcd, 0x6d, 0xc9, 0x4d, 0x65, 0xf3, 0xa4,
	0x50, 0x22, 0x2d, 0x55, 0xa9, 0x3c, 0x22, 0xb7, 0x2b, 0xa7, 0x3c, 0xaf, 0x7f, 0x79, 0x50, 0xbc,
	0x80, 0xd7, 0x6f, 0x55, 0x61, 0xb5, 0x99, 0x3b, 0xfc, 0x1b, 0x5e, 0x33, 0x34, 0x87, 0x17, 0x4d,
	0x45, 0x35, 0xd3, 0x11, 0x98, 0x9e, 0xcd, 0xae, 0x9e, 0x3f, 0x4b, 0x4e, 0xad, 0x25, 0xbe, 0x7b,
	0xd7, 0x5f, 0x7b, 0x40, 0x36, 0x54, 0xe3, 0x1f, 0x00, 0x3e, 0xfa, 0x2f, 0x45, 0xaf, 0x20, 0xb4,
	0x9a, 0xb5, 0xc4, 0x6c, 0x9a, 0x11, 0x1f, 0x9f, 0xc6, 0x7f, 0xd4, 0xac, 0xfd, 0xb0, 0x69, 0x58,
	0x16, 0xda, 0xe1, 0xa5, 0xd1, 0x0d, 0xbc, 0x5c, 0x5a, 0x9f, 0x47, 0x0f, 0xa6, 0x60, 0x76, 0x9e,
	0x8d, 0x1a, 0x3d, 0x81, 0xa1, 0xb4, 0x82, 0xf4, 0xc7, 0x3a, 0x3a, 0xf3, 0xa1, 0xb4, 0xa2, 0xc7,
	0x68, 0xf4, 0x14, 0x5e, 0x57, 0xd4, 0x14, 0x15, 0x69, 0xa9, 0x61, 0xa4, 0x61, 0x2d, 0xd1, 0xd1,
	0xc4, 0xdd, 0x3c, 0x74, 0x7e, 0x46, 0x0d, 0xbb, 0x63, 0xed, 0xfb, 0xd8, 0xc0, 0xcb, 0xc3, 0x30,
	0x42, 0x70, 0x22, 0xa9, 0x60, 0x11, 0x98, 0x82, 0x59, 0x98, 0xb9, 0x37, 0x7a, 0x0c, 0xcf, 0xdd,
	0xde, 0x30, 0xef, 0x05, 0xc2, 0xf0, 0x4a, 0x70, 0x49, 0xbe, 0x50, 0x6e, 0x88, 0x38, 0xac, 0x87,
	0x82, 0xcb, 0x05, 0xe5, 0xe6, 0x9d, 0x76, 0x39, 0x5d, 0x8f, 0xf9, 0x64, 0xc8, 0xe9, 0xda, 0xe7,
	0xaf, 0x3f, 0x6f, 0x77, 0x38, 0xf8, 0xb5, 0xc3, 0xc1, 0x7e, 0x87, 0xc1, 0xd7, 0x0e, 0x83, 0xef,
	0x1d, 0x06, 0x3f, 0x3b, 0x0c, 0xb6, 0x1d, 0x06, 0xbf, 0x3b, 0x0c, 0xfe, 0x76, 0x38, 0xd8, 0x77,
	0x18, 0x7c, 0xfb, 0x83, 0x83, 0x4f, 0xf3, 0x86, 0xaf, 0x39, 0xab, 0x69, 0xae, 0x13, 0xca, 0xd3,
	0x51, 0xa4, 0xf7, 0x7d, 0xa3, 0x97, 0x47, 0x76, 0x7e, 0xe1, 0xfc, 0x17, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xd9, 0x7c, 0x39, 0x96, 0x7d, 0x02, 0x00, 0x00,
}
