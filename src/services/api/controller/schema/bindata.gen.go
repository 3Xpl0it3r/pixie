// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x61\x6f\xdb\x46\x12\xfd\xce\x5f\xf1\x02\x7f\xc8\x1d\x70\x16\x0e\x77\x86\x3f\x10\x68\x01\xd5\x56\x62\xa5\x09\x95\x5a\x72\x82\x22\x08\x82\xe5\x72\x24\x6e\xb5\xdc\x65\x76\x97\x52\xd4\x20\xff\xbd\x98\x21\x45\xb3\x4e\xdb\x4f\x22\x97\x33\x6f\xde\xbc\x79\x3b\xba\xc0\xa6\x36\x11\x5b\x63\x09\x15\x45\x1d\x4c\x49\x11\xa9\x26\x44\x5d\x53\xa3\xb0\x0d\xbe\x91\xf7\xf9\xdb\x25\x22\x85\x83\xd1\x34\xcb\xb2\x0b\x2c\xd3\xf3\x08\xe7\x13\x4c\x45\xca\xfe\x07\x65\x97\x70\x24\x38\xa2\x0a\xc9\xa3\x51\xae\x53\xd6\x9e\xb0\x23\x47\x41\x25\x42\x3a\xb5\x14\xb1\xf5\x41\xe0\x36\xa7\x96\xd6\x3a\x98\x36\xe1\x61\x99\x5d\xe0\x58\x93\x43\x1a\xb9\x98\x88\xae\xad\x54\xa2\x6a\xd6\x33\xd4\xca\xa1\x24\x54\xde\x11\xca\x13\x42\xe7\x9c\x71\xbb\x3c\xbb\x00\x76\x41\xb5\xf5\x67\x7b\xd9\x33\xbe\x94\x3a\x3d\xf2\xb9\xf6\x65\x8a\x43\x3f\xb3\x21\x18\x97\x97\xbe\x4b\x6d\x97\xce\xe7\xd5\x2c\x45\xa1\x61\x74\x8d\xa3\xb1\x76\x42\xbc\x26\x0c\xc1\x8c\xdd\x13\x4c\xb5\x4a\x7d\x5c\x49\x68\x8d\xde\x53\x85\xae\x65\x6a\x1c\xfe\xb0\x9c\x65\x83\xb4\x13\x7c\xc9\x8c\x88\xb5\xef\x6c\x05\xfa\x62\x62\x82\x71\xbd\xda\xaa\x21\x54\x26\x90\x4e\x3e\x9c\xa0\xa6\x33\x18\x39\x73\xfa\x2c\xcb\x86\xc9\x7c\xcd\x80\xcf\x1d\x85\x53\x8e\x5f\xf8\x27\x03\x9a\x2e\xa9\x64\xbc\xcb\xf1\x66\x78\xca\xbe\x65\x42\x84\x50\xa9\xa4\x86\x19\xf8\xad\xa0\x6b\x6f\xbb\xc6\xc5\x59\x46\xae\x6b\x70\xab\x92\xba\xf1\x76\x23\x11\x8c\xfd\xd3\x6a\xf5\x7a\x31\x2f\x32\x60\x59\x6c\xae\xaf\x32\x60\xb3\x7c\xb3\xb8\xbe\x2a\xd6\x19\xf0\xe2\xf5\x6a\xde\x1f\xae\x37\xf7\xcb\xe2\x65\x5f\xe7\xfd\x30\x7f\xe5\xb0\x74\xe9\xfa\xaa\xd7\x2b\x1a\xa7\x09\xaf\xd4\x41\x0d\x03\xaf\x3c\xf5\xd6\x71\x2a\x99\x03\xd9\x13\x62\xd7\xb6\x3e\x24\x28\x5c\x5f\x5d\x96\x26\x65\x17\x30\x2e\xd1\x8e\xc2\x30\xfe\xdf\xba\x98\xa0\x7d\xd3\xfa\x48\x11\x26\xa1\x54\x91\x2a\x78\x87\x74\xf4\xf8\xff\xff\x38\xe9\x9c\x12\x67\x99\xd4\xed\x29\x70\x2b\x36\xe7\x97\x67\x19\x50\x0f\x4f\x42\xf7\x9e\xac\x88\x24\xa6\x54\xa2\x00\x36\xaa\xe4\xe9\x06\xa5\xf7\xc6\xed\xe0\x54\x43\x11\xca\x55\xbd\x74\x03\x32\x47\x4a\xe0\x88\xc0\x55\xb4\xb7\x05\x87\xe7\xf8\xb0\x4e\xc1\xb8\xdd\xb3\x8f\xfd\xa9\x68\x9a\xe3\xc3\x54\xe2\x67\x1f\x9f\x8e\x86\xf1\xe2\x0c\x77\xde\x56\x11\xe1\x0c\xcc\xa5\xf9\xfb\xd3\xca\x52\xf1\x1c\x95\x7f\xcf\x88\x9b\x9d\xa0\x9b\x08\x85\x57\xeb\x55\x01\x72\xda\x57\x54\x21\x0a\xc5\x59\x06\x09\xc8\x31\x50\x7e\x64\x15\x28\x76\x36\xb1\x59\x54\xef\xb3\x81\x82\x98\xed\xbe\xff\xc8\x24\x4c\x95\x63\x79\xcb\xf5\xa4\x85\x09\x97\x1e\x6b\xe9\xb6\x3e\x34\x43\x37\xa5\xe7\x5b\x54\x13\x6a\x1f\x13\x1a\xa5\x6b\xe3\x68\x00\xbe\xf3\x31\x71\xb0\xa0\xf2\x77\x16\xff\x4c\xec\x9f\xb0\xd4\x8e\x5c\x1a\x40\xe6\xfc\x3c\xa2\x3c\x72\xab\x07\xf0\x7c\x2c\x23\xad\x8a\xf5\x25\x67\x9d\xf8\xae\x7f\x7d\x94\x8d\xb6\x8a\x5b\x8c\x72\x6e\xb6\x6c\xd8\x9a\x2d\x61\x22\xf6\xce\x1f\x1d\x4b\x37\x7f\xb9\x28\x36\x9f\xd6\x9b\xf9\x66\xf1\xe9\xa1\xf8\xb9\x58\xbd\x2f\x46\x80\x21\x31\xa2\x26\x65\x53\x7d\x62\x8c\x9a\x54\x48\x25\xa9\x14\xa1\x02\x4b\xac\xc9\x1c\x7a\x1f\x07\xda\x75\x56\x05\x31\x71\x38\x28\x3b\xb8\xae\x26\x01\x94\x16\x19\x2c\x50\x6c\xbd\xab\x98\x48\xf2\x08\xf4\xb9\xa3\x98\xe2\x53\x2e\x77\x8b\xf9\xeb\xcd\xdd\xaf\x4f\xb8\xf4\x6b\xcd\x73\x62\xe7\x7a\xa0\x68\x0e\xd2\xdc\x28\x23\x6a\x15\xdd\xf3\x84\xc8\xcf\xea\x91\xf0\x70\x47\x8e\xb5\xb1\x3d\x23\x1f\x64\x49\x4f\x71\x78\xed\x53\x8c\x6a\xc7\x7b\x9e\xff\x37\xde\x99\xdf\x0d\x85\xef\x85\xba\x5f\xac\xdf\xae\x8a\xf5\xf2\xdd\xe2\xef\x19\x56\x26\x6a\xef\x1c\xe9\x44\xd5\x99\xe1\xcb\xfb\xb7\x37\x18\x4e\xd9\x02\x65\x20\xb5\x8f\x33\x01\xa8\x7d\x2b\x6a\xcb\x62\x1e\xdb\x11\x7c\x41\xd5\xbe\x21\x94\x4a\xef\xe1\x9d\x35\x8e\x44\x5e\xf6\x78\x43\xbc\x84\x07\xc5\x7a\x1e\x4f\x19\xdf\x2e\xd7\x37\xab\xa2\x58\xdc\x6c\x16\xb7\xbd\x11\xd9\x2d\x9d\x6c\xd2\xef\xcc\x37\x7c\x12\xfb\x89\xe1\x46\x4b\xb2\x0f\xad\x8a\xe9\xee\x2c\xea\x9b\x98\xe3\x85\xf5\x2a\x3d\xde\xd6\x64\x7a\x3e\x91\xb4\x77\xd5\xd8\x0e\xdf\xdf\xf3\x78\x50\x12\x39\x28\x6b\x0e\x34\xc3\x7b\xee\x4d\xd9\xa3\x3a\xf1\x39\x7e\xfc\xe1\xbf\xa0\x03\x39\x1c\x4d\xaa\xa1\xad\xd7\x7b\xc4\x3d\x1d\xb9\xa3\xae\x65\xf0\xf5\xa4\xa4\x34\x9b\x4f\xfc\x2f\x77\x42\x5a\x79\x88\x14\xfe\xe2\x1a\x4d\xaf\x24\xbf\x53\xa3\x8c\x9d\x1e\xb4\x46\xa7\x2e\xd0\x9f\xf6\x89\x00\xf6\x5e\x18\x21\xa5\x1b\x5e\x8a\x13\xcd\x3e\x8e\xc1\xb2\x63\x24\xae\x8b\x14\xf2\x91\x0d\x57\x38\x08\x50\x3e\x01\x1c\xd3\xce\xff\x7a\x92\x89\xc5\x17\xd2\x5d\x22\xc1\xfa\x97\x6c\xb0\x75\x0a\x67\x62\xff\xce\xa7\x8b\x2c\xfb\x96\xfd\x11\x00\x00\xff\xff\xbd\x30\x76\x4f\x0a\x09\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 2314, mode: os.FileMode(436), modTime: time.Unix(1556396452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

