// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x95\x41\x73\xdb\xb6\x13\xc5\xef\xfc\x14\xcf\x93\xc3\xff\xdf\x43\x75\x68\x3d\x3e\xf0\xa6\xda\xac\xad\xd4\xa1\x52\x91\x49\xa6\x93\xf1\x64\x20\x72\x25\xa2\x26\x01\x05\x0b\xca\x75\x3b\xf9\xee\x9d\x5d\x52\x0c\x23\xb7\x3d\x99\x02\x16\xbf\x7d\xfb\xf8\x08\x73\xd5\x50\x67\xf0\x57\x02\x7c\xee\x29\x3c\xa7\xf8\x55\xfe\x24\x40\xd7\x47\x13\xad\x77\x29\xde\x8c\x4f\xc9\x97\x24\x79\x85\xb2\x21\xd4\x26\x1a\xc4\xe7\x03\x31\xfc\x0e\xb1\x21\x54\xbe\xed\x3b\xc7\x8b\x84\x5c\xdf\xe1\xc6\x44\x73\xed\xdb\x52\x2b\x84\xfd\xd3\x7a\x7d\x9f\x2d\xf3\x04\x58\xe5\xe5\xd5\x65\x02\x94\xab\x37\xd9\xd5\x65\x5e\x24\xc0\xcf\xf7\xeb\xe5\xb0\x58\x94\x9b\x55\x7e\x3b\xf4\xf9\x40\x70\x44\x35\x8c\xc3\xca\xc5\xab\x4b\xed\x07\xb6\xae\x22\xbc\x36\x47\x53\x54\xc1\x1e\x22\x6a\x4f\x0c\xe7\x23\x9c\x89\xf6\x48\xed\x33\xb8\x3f\x1c\x7c\x88\x30\xb8\xba\xfc\x7e\x6b\x63\xf2\x0a\xd6\x45\xda\x53\x58\xa0\x6c\x2c\xe3\xf7\x9e\x23\x2a\xdf\x1d\x3c\x13\xc3\x46\x6c\x0d\x53\x0d\xef\x10\x9f\x3c\x7e\xfc\x41\x0e\x9d\x8e\xf0\x22\xd1\xbe\x83\x04\x19\xa5\x4d\xe5\xc7\x45\x02\x34\xe3\x93\xca\xdd\x50\xab\x26\x61\xe7\x03\x8c\x3a\x80\xd2\x6c\x5b\x42\x0c\xa6\x7a\xb4\x6e\x0f\x67\x3a\x62\x18\x57\x0f\xd6\x8d\x64\xa9\xd4\xc2\x89\x20\x5d\x2a\xdf\xe6\x52\x9e\xe2\x63\x11\x83\x75\xfb\x87\x8b\x61\x55\x3d\x4d\xf1\xf1\x64\xef\xc3\xc5\xf9\x6b\x11\x16\x2f\x70\xe7\xdb\x9a\x11\x4e\x50\x69\x2b\xfb\xe7\x5d\xb5\xdb\xa9\x2a\x7d\xa9\x46\xda\xce\xe8\x96\x61\xf0\xba\x58\xe7\x20\x57\xf9\x9a\x6a\xb0\xca\x5b\x24\xd0\x82\x14\x83\xdc\x99\xaa\x40\xdc\xb7\x51\x82\x62\x86\x8c\x8d\x12\x34\x68\x9b\x61\x53\x44\xd8\x3a\xc5\xea\x46\xfa\xe9\x08\x33\x2d\x03\x6b\xe5\x76\x3e\x74\xe3\x34\x5b\xdf\x47\x0d\x5e\xe3\x39\xa2\x33\x55\x63\x1d\x8d\xe0\x3b\xcf\x51\x8a\x95\x2a\xfb\x62\xfc\x49\xd8\x7f\xb1\xcc\x9e\x5c\x1c\x21\x4b\x79\x9e\x28\x5f\xb5\x35\x23\x3c\x9d\xda\xe8\xa8\x1a\x7b\x3d\x53\x44\x13\x07\x57\x47\xdb\x68\x67\x64\x44\xd6\x75\xbb\x93\xb0\x36\x12\x07\xcb\x78\x74\xfe\xc9\x89\x75\xcb\xdb\x2c\x2f\x3f\x15\xe5\xb2\xcc\x3e\xbd\xcb\x7f\xc9\xd7\x1f\xf2\x09\x30\x1e\x64\x34\x64\xda\xd8\x3c\x0b\xa3\x21\x13\xe2\x96\x4c\x64\x98\x20\x16\x57\x64\x8f\x43\x86\x03\xed\xfb\xd6\x04\x0d\x70\x38\x9a\x76\x4c\x5c\x43\x0a\xd4\x11\x05\x16\x88\x0f\xde\xd5\x22\x24\x7a\x04\xfa\xdc\x13\x47\x3e\xd7\x72\x97\x2d\xef\xcb\xbb\xdf\xce\xb4\x3c\xd9\xb6\xc5\xde\xcb\xc1\xde\x0d\x20\xb6\x47\x1d\x6e\xb2\x11\x8d\x61\xf7\xbf\x08\x96\x67\xf3\x55\xf0\xf8\x7d\x3c\x35\xb6\x1d\x14\xf9\x20\x72\xbe\xe1\x44\x8f\x8e\x98\xcd\x9e\x18\xbb\xe0\x3b\xbc\xb7\x7f\x5a\x0a\x2f\x8d\xda\x64\xc5\xdb\x75\x5e\xac\xde\x67\xff\xae\xb0\xb6\x5c\x79\xe7\xa8\x8a\x54\x9f\x14\xde\x6e\xde\x5e\x63\x5c\x95\x08\x6c\x03\x99\x47\x5e\x28\xa0\xf1\x07\x75\x3b\x36\x66\x96\x0a\xe5\x2b\xb5\xf2\x1d\x61\x6b\xaa\x47\x78\xd7\x5a\x47\x6a\xaf\x64\xbc\x23\x58\x87\xd1\xb1\x41\xc7\xb9\xe2\x9b\x55\x71\xbd\xce\xf3\xec\xba\xcc\x6e\x86\x20\x4a\x5a\x7a\xbd\x45\x5f\x84\x6f\xdc\xd2\xf8\x69\xe0\xa6\x48\x4a\x0e\x5b\xc3\xf1\xee\x64\x6a\xce\xe9\x70\x43\xc9\x8e\x76\x4e\x67\x61\xd4\x80\x2a\xf7\x1d\x53\xf8\x87\x4c\xcf\xbf\x0f\xf9\x4d\x9d\xb1\xed\x7c\xe1\x60\xab\xd8\x07\xfa\xe6\xe3\x56\xe0\xf0\x62\x26\xa4\xce\x20\xb7\xd3\x6c\x80\x87\xa9\x58\x3f\x78\xad\xeb\x99\x42\x3a\xa9\x91\x0e\x47\x05\xa5\x33\xe0\x74\xec\xf4\xef\x47\x4f\x66\x7f\x50\xd5\x47\x52\xd4\xff\xf5\x36\x29\x62\x38\xe9\xfa\x2e\x9d\x5f\x2a\xc9\x97\xe4\xef\x00\x00\x00\xff\xff\xdc\x62\x67\x18\xde\x06\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 1758, mode: os.FileMode(420), modTime: time.Unix(1554358243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

