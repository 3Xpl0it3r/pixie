// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x41\x73\xdb\x46\x0f\xbd\xf3\x57\x20\xe3\x43\xbe\x6f\xa6\xd6\xa1\xf5\xf8\xc0\x9b\x6a\xab\xb1\xd2\x84\x4a\x2d\x3a\x99\x4e\x26\x93\x59\x92\x90\xb8\x35\xb9\xcb\x2c\x40\x39\x6a\x26\xff\xbd\x03\xec\x8a\x66\xed\xb6\x27\x91\x4b\xe0\xe1\xe1\xe1\x2d\x74\x06\x65\x6b\x09\x76\xb6\x43\x68\x90\xea\x60\x2b\x24\xe0\x16\x81\xea\x16\x7b\x03\xbb\xe0\x7b\x7d\x5f\xbe\x5b\x03\x61\x38\xd8\x1a\x17\x59\x76\x06\x6b\x7e\x49\xe0\x3c\x83\x6d\xd0\x74\x3f\x40\x35\x32\x3c\x20\x38\xc4\x06\xd8\x43\x6f\xdc\x68\xba\xee\x08\x7b\x74\x18\x0c\x23\xf0\x71\x40\x82\x9d\x0f\x0a\x57\x1e\x07\xdc\xd6\xc1\x0e\x0c\x77\xeb\xec\x0c\x1e\x5a\x74\xc0\x13\x17\x4b\x30\x0e\x8d\x61\x6c\x16\x91\x61\x6d\x1c\x54\x08\x8d\x77\x08\xd5\x11\xc2\xe8\x9c\x75\xfb\x3c\x3b\x03\xd8\x07\x33\xb4\x5f\xba\xf3\xc8\xf8\x5c\xeb\x44\xe4\x53\xed\x73\xa6\xd4\xcf\x22\x05\xc3\xf9\xb9\x1f\x79\x18\xf9\x74\xde\x2c\x98\x94\x86\xad\x5b\x78\xb0\x5d\x37\x23\xde\x22\xa4\x60\xc1\x8e\x04\xb9\x35\x1c\xe3\x2a\x84\xc1\xd6\xf7\xd8\xc0\x38\x08\x35\x09\xbf\x5b\x2f\xb2\x24\xed\x0c\x5f\x33\x09\xa8\xf5\x63\xd7\x00\x7e\xb5\xc4\x60\x5d\x54\xdb\xf4\x08\x8d\x0d\x58\xb3\x0f\x47\x30\xf3\x19\x4c\x9c\x25\x7d\x91\x65\x69\x32\xdf\x32\x80\x2f\x23\x86\x63\x0e\xbf\xc9\x4f\x06\xd0\x8f\x6c\xd8\x7a\x97\xc3\xdb\xf4\x94\x7d\xcf\x94\x08\x42\x63\xd8\xa4\x19\xf8\x9d\xa2\xd7\xbe\x1b\x7b\x47\x8b\x0c\xdd\xd8\xc3\xb5\x61\x73\xe5\xbb\x52\x23\x04\xfb\xe7\xcd\xe6\xcd\x6a\x59\x64\x00\xeb\xa2\xbc\xbc\xc8\x00\xca\xf5\xdb\xd5\xe5\x45\xb1\xcd\x00\x7e\x79\xb3\x59\xc6\xc3\x6d\x79\xbb\x2e\x5e\xc5\x3a\x1f\xd2\xfc\x8d\x83\xb5\xe3\xcb\x8b\xa8\x17\x59\x57\x23\xbc\x36\x07\x93\x06\xde\x78\x8c\xd6\x71\x86\xed\x01\xbb\x23\xd0\x38\x0c\x3e\x30\x18\xb8\xbc\x38\xaf\x2c\x67\x67\x60\x1d\xe3\x1e\x43\x1a\xff\x1f\x23\x31\xd4\xbe\x1f\x3c\x21\x81\x65\xa8\x0c\x61\x03\xde\x01\x3f\x78\xf8\xe9\x47\x49\x3a\xa5\xd0\x22\xd3\xba\x91\x82\xb4\xd2\xe5\xf2\xf2\x22\x03\x68\xd3\x93\xd2\xbd\xc5\x4e\x45\x52\x53\x1a\x55\x00\x4a\x53\xc9\x74\x83\xa9\xef\xad\xdb\x83\x33\x3d\x12\x18\xd7\x44\xe9\x12\xb2\x44\x6a\xe0\x84\x20\x55\x6a\xdf\x15\x12\x9e\xc3\xc7\x2d\x07\xeb\xf6\x2f\x3e\xc5\x53\xd5\x34\x87\x8f\x73\x89\x5f\x7c\x7a\x3a\x1a\xc1\xa3\x05\xdc\xf8\xae\x21\x08\x27\x60\x29\x2d\xdf\x9f\x56\xd6\x8a\xa7\xa8\xfc\x39\x23\x69\x76\x86\x6e\x09\x0c\xbc\xde\x6e\x0a\x40\x57\xfb\x06\x1b\x20\xa5\xb8\xc8\x40\x03\x72\x48\x94\x1f\x59\x05\xa4\xb1\x63\x31\x8b\x89\x3e\x4b\x14\xd4\x6c\xb7\xf1\xa3\x90\xb0\x4d\x0e\xeb\x6b\xa9\xa7\x2d\xcc\xb8\x44\xac\xb5\xdb\xf9\xd0\xa7\x6e\x2a\x2f\xb7\xa8\x45\x68\x3d\x31\xf4\xa6\x6e\xad\xc3\x04\x7c\xe3\x89\x25\x58\x51\xe5\xbb\x88\x7f\x22\xf6\x5f\x58\x66\x8f\x8e\x13\xc8\x52\x9e\x27\x94\x47\x6e\x6d\x02\xcf\xa7\x32\xda\xaa\x5a\x5f\x73\xb6\x2c\x77\xfd\xdb\xa3\x6c\xb8\x33\xd2\x22\xe9\xb9\xdd\x89\x61\x5b\xb1\x84\x25\xb8\x77\xfe\xc1\x89\x74\xcb\x57\xab\xa2\xfc\xbc\x2d\x97\xe5\xea\xf3\x5d\xf1\x6b\xb1\xf9\x50\x4c\x00\x29\x91\xa0\x45\xd3\x71\x7b\x14\x8c\x16\x4d\xe0\x0a\x0d\x13\x98\x20\x12\xd7\x68\x0f\xd1\xc7\x01\xf7\x63\x67\x82\x9a\x38\x1c\x4c\x97\x5c\xd7\xa2\x02\x6a\x8b\x02\x16\x90\x06\xef\x1a\x21\xc2\x1e\x02\x7e\x19\x91\x98\x9e\x72\xb9\x59\x2d\xdf\x94\x37\xbf\x3f\xe1\x12\xd7\x9a\x97\xc4\xd1\x45\x20\xb2\x07\x6d\x6e\x92\x11\x5a\x43\xee\x25\x03\xc9\xb3\x79\x24\x9c\xee\xc8\x43\x6b\xbb\xc8\xc8\x07\x5d\xd2\x73\x1c\x59\xfb\x48\x64\xf6\xb2\xe7\xe5\x7f\xe3\xbd\xfd\xd3\x62\x78\x2e\xd4\xed\x6a\xfb\x6e\x53\x6c\xd7\xef\x57\xff\xce\xb0\xb1\x54\x7b\xe7\xb0\x66\x6c\x4e\x0c\x5f\xdd\xbe\xbb\x82\x74\x2a\x16\xa8\x02\x9a\x7b\x5a\x28\x40\xeb\x07\x55\x5b\x17\xf3\xd4\x8e\xe2\x2b\x6a\xed\x7b\x84\xca\xd4\xf7\xe0\x5d\x67\x1d\xaa\xbc\xe2\xf1\x1e\x65\x09\x27\xc5\x22\x8f\xa7\x8c\xaf\xd7\xdb\xab\x4d\x51\xac\xae\xca\xd5\x75\x34\xa2\xb8\x65\xd4\x4d\xfa\xcc\x7c\xe9\x93\xda\x4f\x0d\x37\x59\x52\x7c\xd8\x19\xe2\x9b\x93\xa8\x05\xe5\x71\x4b\xc9\x17\xad\x9c\xcf\xcc\xa8\x06\x55\xdc\x3b\xc2\xf0\x0f\x9e\x9e\xdf\x0f\x79\xc7\xde\xd8\x6e\x7e\x30\xd8\x9a\xc7\x80\x7f\xbb\xdc\x0a\x18\x07\x33\x41\x6a\x0f\xb2\xa1\x66\x0d\x7c\x9a\x82\xf5\xc2\x6b\xdc\x48\x18\xf2\x89\x8d\x54\x38\x28\x50\x3e\x03\x9c\xd2\x4e\x7f\x41\x9a\x09\xab\xaf\x58\x8f\x8c\x8a\xf5\x3f\x5d\x27\x5b\x0e\x27\x62\xff\xcf\xe7\x5b\x25\xfb\x9e\xfd\x15\x00\x00\xff\xff\xd3\xb9\x7b\xcc\x97\x08\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 2199, mode: os.FileMode(420), modTime: time.Unix(1555657237, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

