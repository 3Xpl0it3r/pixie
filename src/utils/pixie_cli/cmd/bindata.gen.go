// Code generated by go-bindata.
// sources:
// ../../../../../../../../../tmp/vizier_yamls/etcd.yaml
// ../../../../../../../../../tmp/vizier_yamls/nats.yaml
// ../../../../../../../../../tmp/vizier_yamls/vizier.yaml
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpVizier_yamlsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x08\xbd\x14\x18\x60\xb7\x69\x77\xd8\x74\xcb\xd2\x6c\x18\xd0\x36\x41\x93\x0d\xd8\x29\xa0\x65\xa6\xd5\xaa\xaf\x49\xb4\xb1\xf6\xd7\x0f\x8a\x1c\xe7\xc3\x49\x57\xac\xd3\xc9\x22\x1e\xf9\xa8\xc7\x67\x82\x93\xdf\xd1\x07\x69\x0d\x67\xbe\x04\x51\x40\x4d\x0f\xd6\xcb\x67\x20\x69\x4d\xf1\xf8\x21\x14\xd2\x9e\x35\x83\x12\x09\x06\xd9\xa3\x34\x15\x67\x23\x55\x07\x42\x7f\x67\x15\x66\x1a\x09\x2a\x20\xe0\x19\x63\x0a\x4a\x54\x21\x7e\x31\x06\xce\x71\xe6\x54\xae\xad\x91\x64\xbd\x34\xf7\x19\x63\x06\x34\x72\x86\x24\xaa\xdc\x3a\xf4\x40\xd6\x67\xbe\x56\x18\x78\x96\x33\x70\xf2\x8b\xb7\xb5\x5b\x15\xc8\x57\xa8\x22\x56\x2e\x21\x60\x21\xac\x47\x1b\x0a\x61\x75\xc6\x98\xc7\x60\x6b\x2f\x70\x0b\x29\x52\x4b\xa1\x0b\x94\x20\x1e\x6b\xb7\xb9\x7b\x0c\x64\x3d\xc6\x40\x83\xbe\x6c\x53\x4f\xdf\x9d\xf6\x99\xc1\x49\xfc\x4d\x68\xa2\x28\xa1\x55\xa0\xcf\x2a\xea\x40\x56\xaf\x83\x15\x2e\xa5\x91\x51\xb2\xd7\x30\x9c\x9c\xf4\xeb\x39\x5b\xa5\x6e\x03\xfa\x46\x0a\x6c\x5b\x37\x95\xb3\xd2\x50\xba\xb9\x38\xa9\x40\x68\xa8\xb1\xaa\xd6\x28\x14\x48\xdd\x02\x1b\x4c\xa8\xbf\xbf\x6e\xa5\xca\x1e\x7b\x85\x4e\xd9\x27\xfd\xca\x1a\x87\xfa\x0f\x28\x3c\xee\x67\xdf\x23\x65\x79\x9e\x67\x6f\x74\xd9\x27\x69\xaa\xe8\xa0\xb7\x9b\xcd\x2a\xbc\xc3\x65\xcc\x5a\x3f\xe9\x85\x86\x32\xc6\xfa\x86\x3f\x5c\x38\xd4\xe5\x4f\x14\xb4\x32\x72\xca\x99\xa5\x31\x0e\x85\xb0\xb5\xa1\x2e\xad\xc2\x25\xd4\x6a\x7d\x0f\x0e\x04\xc6\xd6\x7b\x2a\x6d\x1c\xb8\x27\xcb\x55\x37\xa9\xb7\xcb\xb1\xdf\x44\x70\x28\xf8\x6a\xb4\x4e\x49\x01\x81\xb3\x41\xc6\x58\x40\x85\x82\xac\x4f\xc5\x35\x90\x78\xb8\xde\x62\x3b\xc2\x47\xa8\x9d\x02\xc2\x36\x6b\xab\xd5\x78\xd4\x4e\x81\x23\x25\xd2\x39\xdc\x38\x63\xeb\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2b\x99\x33\x61\xb5\x06\x53\x6d\x38\xf2\x03\x45\xe2\x41\xd3\x6c\x83\x12\xdf\xcd\x8f\xc5\x74\x72\xb5\xb8\x1d\xde\x8c\x67\xd3\xe1\x68\xdc\x01\x18\x6b\x40\xd5\xf8\xd9\x5b\xcd\xb7\x82\x8c\x2d\x25\xaa\xaa\x35\x57\x2f\x3e\x05\x7a\xe0\x9d\x0a\x45\x27\xfb\x4b\xbc\xff\x9f\xb2\x83\x49\x0d\xf7\xc8\xd9\xaf\x1a\x9e\xe2\x8f\x97\xb6\xeb\xd9\x8e\x3c\xbc\x39\x2f\x3e\x16\xef\x5f\x1c\x43\xcf\xb4\x47\x76\x76\x6b\xe1\x8b\xd6\xc2\x63\x12\x55\xfb\x4b\xfd\x8b\x87\x9d\xca\x23\xd1\x51\xf7\xce\xaf\x67\xa9\x46\x20\x20\xd9\x79\x44\xa3\x2e\xd1\x6f\xa4\x72\x88\x7e\xb6\x5a\x5a\xed\xb3\x62\x20\x27\x15\x72\x81\x7e\xb5\xc8\xd2\x89\xfb\x78\x0f\x99\x42\x3d\xec\x5a\x97\x1d\xac\x50\x12\x0d\xed\x60\x9d\x6d\x5d\x19\x01\xe3\xb5\xfb\xd6\x0e\x18\xcf\x47\x57\x8b\xe1\xb7\xf9\x64\x31\x9a\xdc\x4c\x87\xa3\xf9\xd7\xc9\xed\xe2\x6e\x3c\x1f\xdf\xc6\xaf\x6c\xcb\x10\x9c\x9d\x0c\xce\xe3\x2a\x0e\xf2\x19\x39\xbb\x4c\xbb\x37\x8d\xe2\xb2\xb8\x28\x06\x97\xd9\x9f\x00\x00\x00\xff\xff\x38\x53\xf1\xa2\xdf\x07\x00\x00")

func tmpVizier_yamlsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsEtcdYaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

func tmpVizier_yamlsEtcdYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/etcd.yaml", size: 2015, mode: os.FileMode(436), modTime: time.Unix(1569278657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmpVizier_yamlsNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsNatsYaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

func tmpVizier_yamlsNatsYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/nats.yaml", size: 2954, mode: os.FileMode(436), modTime: time.Unix(1569278657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsVizierYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x5b\x73\xda\x3a\x10\xc7\xdf\xf9\x14\x9a\xbe\x3b\x24\x4d\x7a\xa6\xe3\xb7\x94\xd0\x94\x53\x42\x3d\x98\xb6\xd3\x27\x8f\x90\x17\xd0\x89\x2c\xa9\xd2\x9a\xd6\xfd\xf4\x67\x6c\x63\x22\x73\xbf\x84\x76\x0e\x27\x3c\x81\x2e\xff\x5d\xad\x76\x7f\x16\x02\xaa\xf9\x17\x30\x96\x2b\xe9\x93\xe9\x55\xe3\x91\xcb\xd8\x27\x21\x98\x29\x67\xd0\x48\x00\x69\x4c\x91\xfa\x0d\x42\x04\x1d\x82\xb0\xf9\x3b\x42\xa8\xd6\x3e\xd1\xc2\x4b\x94\xe4\xa8\x0c\x97\xe3\x06\x21\x92\x26\xe0\x93\x29\xff\xc5\xc1\x78\x54\x73\xcf\xce\x54\xca\x2e\xab\x29\x83\x7c\x56\xc3\x6a\x60\xb9\x8e\x56\x06\x0b\x41\x6f\x36\x17\x99\xf6\x26\x88\xfa\x75\x61\x24\xef\xf6\xc9\x9b\xcb\xd7\x97\x97\xe5\x67\xa3\x50\x31\x25\x7c\x32\x68\x05\x45\x0b\x52\x33\x06\x0c\x6a\xe3\x2c\x08\x60\xa8\xcc\x06\x47\x97\x5d\x6d\x10\x82\x99\x06\x9f\xb4\x44\x6a\x11\x4c\x27\x68\x78\x9e\xd7\x38\x51\x6c\xaa\x99\xc7\x06\xe6\x66\xc7\xc0\xdc\x1c\x18\x18\xc7\xcf\xa3\xa2\x43\xa5\x54\x48\x91\x2b\x39\x0b\x11\x13\x2a\x8d\x2f\xc6\x4a\x8d\x05\x5c\x30\x95\x34\x85\xa2\xb1\x37\xa4\x82\x4a\x06\xc6\x2b\x8d\x71\x89\x60\x24\x15\x7b\x87\x57\x1b\xf5\x33\x3b\x3c\xf9\xac\x13\xe3\x9b\x9b\xeb\x5d\x22\xfc\xe6\xf2\xc0\x08\x17\xae\xce\xc3\xdb\x55\x34\x7e\x37\x0b\xc2\x29\xf3\xef\x7b\x0a\x26\xf3\x86\x46\x3d\x82\x39\x36\x07\xaf\x77\xcc\xc1\xeb\x03\x23\xb4\xe0\xeb\xb6\x3c\x84\x9f\x08\x32\x7f\x6b\x9b\xd3\xab\x21\x20\xad\xa2\x76\x07\x5a\xa8\x2c\x01\x89\xc7\x41\x6d\x6d\xbc\x0c\x68\xc1\x19\xb5\x3e\xb9\x5a\x5a\x68\x42\x91\x4d\xba\x8e\xa9\xb5\x6b\x5f\x8d\x26\x48\xb4\xa0\x08\x33\x31\xc7\xfd\xfc\x25\x6a\xba\x1b\x94\x57\x6a\x13\x52\x2d\xa0\x28\x4c\x25\x91\x72\x09\x66\xae\xe7\x11\x90\xd3\x27\xf1\x2a\x19\x82\x6e\xf4\xf7\xd7\x41\x14\x76\xee\x7b\x9d\xde\x7d\xf4\xb1\xfd\x6d\x3e\x84\x90\x29\x15\x29\xbc\x37\x2a\xf1\x9d\xc6\x3c\x26\xcc\x00\x7e\x84\xac\x0f\xa3\x7a\x0f\x21\x8f\x90\xf9\xe4\x9f\x1f\xe8\x59\x3e\x96\x5c\x8e\xbd\x47\xc8\x16\x86\x94\x86\xb5\xf0\x58\xb9\xfb\x5e\xa9\x67\x57\xf9\x16\xb6\xfb\x5f\xda\xfd\x68\xd0\x0d\xa3\x56\xbb\x3f\x58\xf4\xcd\x27\x4d\x06\x06\x6d\x33\x87\x04\x98\x0b\x66\x70\x8b\xca\x8a\x05\x2e\x8a\xb8\x1e\x3b\x22\xad\x6e\xa7\xdd\x1b\x6c\x77\x85\x09\x0e\x12\xd7\xb9\xe2\xa8\x6c\x72\x65\x26\xb2\xc6\x95\xc2\x87\xdb\x2d\x6e\xd0\x9a\x0b\x3c\xa1\x63\xf0\xc9\x98\x99\x0b\xae\x9a\x5a\x78\x31\x4c\x3d\x2e\x47\x86\x36\xcb\x34\x6a\x52\xcd\xa3\x32\x02\x51\x39\x38\xcf\x54\x8b\x6b\x73\xce\x2b\x07\xcf\xfb\xe7\x9c\xa9\xdc\x9d\xe7\x60\xb0\xf0\xfc\x2f\x5f\x13\x65\x71\x55\xcf\x54\x89\x34\x81\x07\x95\xca\xba\x5c\x92\xb7\x04\x14\x27\xd5\x12\x1b\x8b\x29\xe5\xb6\x16\x4b\x08\x52\x21\xc2\x32\xb9\x9e\xca\x60\x9e\x7e\xc5\x90\x59\xf2\x35\x5c\xdb\x4b\x83\xeb\xe6\xca\x19\x6e\xe2\x97\x2d\xbd\x62\xec\xec\x71\xe5\xa1\xb0\x5e\x39\xef\xf7\xa2\xad\x78\x24\x7b\x4c\x49\x59\x70\xeb\xf7\x62\x6e\xd9\xf8\x69\x90\xb7\x6c\xe7\x3c\xf1\xd7\xea\x7e\x0e\x07\xed\x7e\xd4\xb9\x7b\x06\xb7\x2a\x7b\x3c\x7e\x01\xf2\x9f\x07\x32\xc8\x69\x7d\x0f\x0b\x60\x8e\xf8\xf8\x81\xea\xa5\x1d\x74\x76\x68\x96\xf8\x23\x3e\xde\x83\xed\xc5\xb4\x68\x5e\x2f\xbb\x73\x7e\xa1\xd0\xf6\x67\xfe\xdb\xb5\xcc\x7f\xfb\xec\xcc\x3f\x03\x7a\x6f\xfd\x46\x79\x12\x6c\xbb\xdf\x0f\x4f\xc2\x6b\xc7\xc0\x79\x82\xfa\x05\x8b\xcf\x84\x45\x67\xf6\x5d\x27\xbc\x7d\xd7\x6d\x47\xf7\xfd\xa0\x15\xdd\x7e\x1e\x7c\x58\xd6\x78\x85\x26\x85\x57\x7b\x80\xb0\x4a\xc4\xdd\x09\x58\x4b\x5d\xf2\x72\x3e\x3d\x96\x70\xd5\x4d\xc9\x6f\xc4\xdb\xfc\x72\xe6\x24\x6c\xab\xd4\xcf\x13\x6c\x5b\x31\x82\xc2\xae\x2b\xe0\x6d\xf0\xc8\xa7\xba\xde\x6d\x2f\xdf\x22\xd6\xbb\xd7\xee\xd3\x05\xe2\x3e\x67\x96\xd9\x25\x60\xf9\x32\x40\x63\x2e\xc1\xda\xc0\xa8\x21\xb8\xc1\x9e\x20\xea\xfb\x7a\x9d\x11\xa2\xcb\xfa\x9f\x00\x15\x38\xf9\x55\xef\x5a\xa1\x5e\x6c\x26\x9b\x40\xee\xf3\x87\xc1\x20\x08\xcf\x85\x32\x65\xe4\xff\x14\x63\x76\xba\x17\x3d\x09\x6a\x16\x6f\x39\x4f\x42\x9c\x05\x23\xe7\x09\x9e\x97\x13\xd5\x7f\xe3\x44\x55\x24\x63\x54\x26\xe3\xee\x64\x5e\x4a\x61\xb2\xd3\xb7\xc9\xeb\xff\xd3\x3d\x21\xd5\x3a\xa7\x63\x05\x46\x0a\x89\x92\x21\x1c\xc4\x45\x3a\xce\x81\xba\x8e\x84\xc7\xb2\xaf\x52\x7f\x66\xda\x55\xb2\x87\xf3\xed\xec\x0a\x37\x0c\xbb\x2b\x4a\x76\x44\x85\x75\x6a\xd6\x99\x17\xf4\x3f\xb5\xa2\xe0\x76\x55\xa1\x37\x27\xca\x62\x7e\xa0\x62\x7b\x14\x7b\xb1\x25\x9b\xca\xfb\x69\xcf\x48\x71\x78\xb2\x2a\x35\x0c\xac\x5b\x04\x82\x27\x1c\x6d\xfd\xe9\x91\x40\xa2\x4c\xe6\x93\xd7\x6f\xfe\x7a\xe0\x4e\x8f\x81\xef\x29\xd8\xc5\xd1\x4c\xa7\x3e\xb9\xba\xbc\x4c\x76\xd0\xb0\xc0\x52\xc3\x31\x6b\x29\x89\xf0\xb3\x56\x8d\x8c\x6a\x3a\xe4\x82\x23\x87\x05\x03\x34\x8e\xeb\x0d\x1e\x09\xbf\x85\x51\x30\xe8\xdf\xb6\xda\x2b\x3a\x6e\xef\x1e\x3a\x3d\xa7\x5d\x1b\x3e\xe5\x02\xc6\x10\xfb\x24\xe7\xe9\x5e\xcc\xca\xf7\x65\x09\x59\x79\xa3\x67\x94\xc2\x5a\x70\x68\xfc\x49\x8a\x6c\xc1\x46\x5d\xcd\x66\xcb\xfc\xab\xb7\xed\x24\xb3\x1d\xa4\xb1\xb4\x81\x12\x9c\x65\xf3\x5f\x75\xdf\x73\x63\xf1\x2b\xc7\xc9\x07\x65\xb1\x37\x67\xe7\xa4\xfc\xf4\x43\x99\xc7\x9a\xc9\xe2\x6e\xb0\x73\x57\x6b\x3b\x8c\xce\x08\x26\xe1\xb2\xf8\x9f\xc2\xbd\xa1\x0c\x02\x30\x5c\xc5\x21\x30\x25\x63\xeb\x93\xeb\xea\x19\x82\x4a\x80\x71\xff\xce\x50\xb0\x64\x34\x02\x86\x3e\xe9\xa9\x90\x4d\x20\x4e\xc5\x53\x48\x8a\x13\x8e\x54\x31\x78\x46\x09\xb8\x78\x4c\x87\x60\x24\x20\xd8\xbc\x5c\x12\x9a\xaf\x79\xdd\xf3\xa1\x58\x5c\x1e\x4a\x37\x4b\xca\xd0\x3a\x2d\xe5\x8f\xe2\x77\xdc\x14\x38\xce\x1a\x9b\x73\x60\xa3\x6a\x7d\x8f\x37\x0b\x3f\x8d\x7d\x9e\x07\xd9\xbf\x01\x00\x00\xff\xff\x7d\x2c\xfa\xc2\x8a\x24\x00\x00")

func tmpVizier_yamlsVizierYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsVizierYaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

func tmpVizier_yamlsVizierYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsVizierYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/vizier.yaml", size: 9354, mode: os.FileMode(436), modTime: time.Unix(1569278657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/vizier_yamls/etcd.yaml": tmpVizier_yamlsEtcdYaml,
	"tmp/vizier_yamls/nats.yaml": tmpVizier_yamlsNatsYaml,
	"tmp/vizier_yamls/vizier.yaml": tmpVizier_yamlsVizierYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"vizier_yamls": &bintree{nil, map[string]*bintree{
			"etcd.yaml": &bintree{tmpVizier_yamlsEtcdYaml, map[string]*bintree{}},
			"nats.yaml": &bintree{tmpVizier_yamlsNatsYaml, map[string]*bintree{}},
			"vizier.yaml": &bintree{tmpVizier_yamlsVizierYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

