// Code generated by go-bindata.
// sources:
// ../../../../../../../../../../tmp/vizier_yamls/etcd.yaml
// ../../../../../../../../../../tmp/vizier_yamls/nats.yaml
// ../../../../../../../../../../tmp/vizier_yamls/vizier.yaml
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpVizier_yamlsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x08\xbd\x14\x18\x60\xb7\x69\x77\xd8\x74\xcb\xd2\x6c\x18\xd0\x36\x41\x93\x0d\xd8\x29\xa0\x65\xa6\xd5\xaa\xaf\x49\xb4\xb1\xf6\xd7\x0f\x8a\x1c\xe7\xc3\x49\x57\xac\xd3\xc9\x22\x1e\xf9\xa8\xc7\x67\x82\x93\xdf\xd1\x07\x69\x0d\x67\xbe\x04\x51\x40\x4d\x0f\xd6\xcb\x67\x20\x69\x4d\xf1\xf8\x21\x14\xd2\x9e\x35\x83\x12\x09\x06\xd9\xa3\x34\x15\x67\x23\x55\x07\x42\x7f\x67\x15\x66\x1a\x09\x2a\x20\xe0\x19\x63\x0a\x4a\x54\x21\x7e\x31\x06\xce\x71\xe6\x54\xae\xad\x91\x64\xbd\x34\xf7\x19\x63\x06\x34\x72\x86\x24\xaa\xdc\x3a\xf4\x40\xd6\x67\xbe\x56\x18\x78\x96\x33\x70\xf2\x8b\xb7\xb5\x5b\x15\xc8\x57\xa8\x22\x56\x2e\x21\x60\x21\xac\x47\x1b\x0a\x61\x75\xc6\x98\xc7\x60\x6b\x2f\x70\x0b\x29\x52\x4b\xa1\x0b\x94\x20\x1e\x6b\xb7\xb9\x7b\x0c\x64\x3d\xc6\x40\x83\xbe\x6c\x53\x4f\xdf\x9d\xf6\x99\xc1\x49\xfc\x4d\x68\xa2\x28\xa1\x55\xa0\xcf\x2a\xea\x40\x56\xaf\x83\x15\x2e\xa5\x91\x51\xb2\xd7\x30\x9c\x9c\xf4\xeb\x39\x5b\xa5\x6e\x03\xfa\x46\x0a\x6c\x5b\x37\x95\xb3\xd2\x50\xba\xb9\x38\xa9\x40\x68\xa8\xb1\xaa\xd6\x28\x14\x48\xdd\x02\x1b\x4c\xa8\xbf\xbf\x6e\xa5\xca\x1e\x7b\x85\x4e\xd9\x27\xfd\xca\x1a\x87\xfa\x0f\x28\x3c\xee\x67\xdf\x23\x65\x79\x9e\x67\x6f\x74\xd9\x27\x69\xaa\xe8\xa0\xb7\x9b\xcd\x2a\xbc\xc3\x65\xcc\x5a\x3f\xe9\x85\x86\x32\xc6\xfa\x86\x3f\x5c\x38\xd4\xe5\x4f\x14\xb4\x32\x72\xca\x99\xa5\x31\x0e\x85\xb0\xb5\xa1\x2e\xad\xc2\x25\xd4\x6a\x7d\x0f\x0e\x04\xc6\xd6\x7b\x2a\x6d\x1c\xb8\x27\xcb\x55\x37\xa9\xb7\xcb\xb1\xdf\x44\x70\x28\xf8\x6a\xb4\x4e\x49\x01\x81\xb3\x41\xc6\x58\x40\x85\x82\xac\x4f\xc5\x35\x90\x78\xb8\xde\x62\x3b\xc2\x47\xa8\x9d\x02\xc2\x36\x6b\xab\xd5\x78\xd4\x4e\x81\x23\x25\xd2\x39\xdc\x38\x63\xeb\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2b\x99\x33\x61\xb5\x06\x53\x6d\x38\xf2\x03\x45\xe2\x41\xd3\x6c\x83\x12\xdf\xcd\x8f\xc5\x74\x72\xb5\xb8\x1d\xde\x8c\x67\xd3\xe1\x68\xdc\x01\x18\x6b\x40\xd5\xf8\xd9\x5b\xcd\xb7\x82\x8c\x2d\x25\xaa\xaa\x35\x57\x2f\x3e\x05\x7a\xe0\x9d\x0a\x45\x27\xfb\x4b\xbc\xff\x9f\xb2\x83\x49\x0d\xf7\xc8\xd9\xaf\x1a\x9e\xe2\x8f\x97\xb6\xeb\xd9\x8e\x3c\xbc\x39\x2f\x3e\x16\xef\x5f\x1c\x43\xcf\xb4\x47\x76\x76\x6b\xe1\x8b\xd6\xc2\x63\x12\x55\xfb\x4b\xfd\x8b\x87\x9d\xca\x23\xd1\x51\xf7\xce\xaf\x67\xa9\x46\x20\x20\xd9\x79\x44\xa3\x2e\xd1\x6f\xa4\x72\x88\x7e\xb6\x5a\x5a\xed\xb3\x62\x20\x27\x15\x72\x81\x7e\xb5\xc8\xd2\x89\xfb\x78\x0f\x99\x42\x3d\xec\x5a\x97\x1d\xac\x50\x12\x0d\xed\x60\x9d\x6d\x5d\x19\x01\xe3\xb5\xfb\xd6\x0e\x18\xcf\x47\x57\x8b\xe1\xb7\xf9\x64\x31\x9a\xdc\x4c\x87\xa3\xf9\xd7\xc9\xed\xe2\x6e\x3c\x1f\xdf\xc6\xaf\x6c\xcb\x10\x9c\x9d\x0c\xce\xe3\x2a\x0e\xf2\x19\x39\xbb\x4c\xbb\x37\x8d\xe2\xb2\xb8\x28\x06\x97\xd9\x9f\x00\x00\x00\xff\xff\x38\x53\xf1\xa2\xdf\x07\x00\x00")

func tmpVizier_yamlsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsEtcdYaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

func tmpVizier_yamlsEtcdYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/etcd.yaml", size: 2015, mode: os.FileMode(436), modTime: time.Unix(1569889475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmpVizier_yamlsNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsNatsYaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

func tmpVizier_yamlsNatsYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/nats.yaml", size: 2954, mode: os.FileMode(436), modTime: time.Unix(1569889475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsVizierYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xcd\x6e\xdb\x38\x10\xc7\xef\x7e\x0a\x22\x97\x02\x0b\xd0\x49\x9a\x74\xd1\x0a\xd8\x83\xeb\xb8\xa9\xb7\x8e\x2b\x58\x6e\x8b\x9e\x04\x9a\x1a\xcb\x6c\x28\x92\x25\x29\xb7\xee\xd3\x2f\xf4\x69\xc9\x9f\x4a\x1c\xa7\xbb\xd9\xe8\x64\x51\xe4\x70\xf8\xe7\xcc\x4f\x63\x49\x44\xb1\xcf\xa0\x0d\x93\xc2\x41\x7a\x42\x68\x9b\xc4\x76\x26\x35\xfb\x45\x2c\x93\xa2\x7d\xfb\xda\xb4\x99\x3c\x9d\x9f\x4f\xc0\x92\xf3\xd6\x2d\x13\x81\x83\xba\x3c\x36\x16\xf4\x48\x72\x68\x45\x60\x49\x40\x2c\x71\x5a\x08\x71\x32\x01\x6e\x92\x5f\x08\x11\xa5\x1c\xa4\x38\x8e\xa4\x60\x56\x6a\x26\xc2\x16\x42\x82\x44\xe0\xa0\x39\xfb\xc5\x40\x63\x0a\xda\x46\xa1\x6e\xe9\x98\x83\x71\x5a\x18\x11\xc5\xae\xb5\x8c\x55\x6a\x01\xa3\x93\x93\x16\x42\x1a\x8c\x8c\x35\x85\xbc\x4d\xc9\xc0\xa4\x3f\x0c\x50\x0d\x36\xf9\x3d\x07\x3d\xc9\xaf\xbe\xf8\xe3\x45\x0b\x63\xdc\x3a\x70\x4d\x6f\x99\x08\x12\x7f\x1f\x60\x69\x92\xc3\x08\xa6\xc9\xb0\x62\x71\x3b\x3c\x6a\x21\xb4\xae\xef\x16\xcb\x26\x9e\x7c\x03\x6a\x53\xdd\xb2\x41\x1e\xe8\x39\xa3\xd0\xa1\x54\xc6\xc2\x96\xe3\x02\x98\x92\x98\x17\xe7\x46\x11\x0a\x89\xf3\x6b\x3a\xcd\x0b\x21\x72\x3b\x07\xac\x9e\x28\x86\x4d\x6e\x65\x75\x5a\xa3\x80\x26\x76\x94\xd4\x36\xdf\xb5\x6c\xac\xa5\x0a\xcf\xac\x55\x2f\xd3\x49\x92\xcb\x0e\x7a\x75\xf6\xf2\xec\x2c\x3b\xd7\xd2\x4a\x2a\xb9\x83\xc6\x5d\x37\x6d\xb1\x44\x87\x60\xdd\x5a\x3f\x03\x1c\xa8\x95\x7a\x87\xa3\xeb\xae\xb6\x10\xb2\x0b\x05\xa5\xea\x7d\xf7\x98\xda\x14\xfb\x77\xa0\x2e\x6f\x1a\xea\xf2\xe6\x9e\xba\x2c\xdd\x7c\x44\x6d\x8a\x91\x87\x8a\x73\xd9\x50\x9c\xcb\x7b\x8a\x53\xf1\xf3\x20\x75\x88\x10\xd2\xa6\x00\xc8\x25\xa2\x5c\xc6\x41\x3b\x94\x32\xe4\xd0\xa6\x32\x3a\xe5\x92\x04\x78\x42\x38\x11\x14\x34\xce\x26\x63\xc2\x82\x16\x84\xdf\x59\x5e\xa5\xe5\xcf\xc5\xfd\x13\xd3\x54\x34\xbe\xbc\xbc\x68\xa2\xf0\xab\xb3\x7b\x2a\x9c\xba\x5a\xca\x3b\x90\x24\x78\x9b\x8b\x70\xcc\xf8\xfb\x1e\x83\x5e\xe0\x89\x96\xb7\x70\x70\x82\x5e\x34\x8c\xc1\x8b\x7b\x2a\xb4\xe2\xeb\xbe\x38\x84\x9f\x16\x44\xf2\xd3\xac\xdc\xf6\xae\x40\x71\xb9\x88\x40\xd8\xc3\x80\xbf\x55\x2f\x0d\x8a\x33\x4a\x8c\x83\xce\xd7\x16\x1a\x11\x4b\x67\x83\xca\x54\x5b\xd7\xbe\x19\xdb\x10\x29\x4e\x2c\xe4\xc6\x2a\xee\x27\x07\xaf\xd9\xdd\x61\x79\xa3\x6d\x84\x8a\x05\xa4\x89\x29\x85\x25\x4c\x80\x2e\xed\x61\x04\x62\xbe\x34\x5e\x04\x83\x3b\xf0\xff\xfe\x32\xf6\xbd\xfe\xf5\xb0\x3f\xbc\xf6\x3f\xf4\xbe\x96\x5d\x10\x9a\x13\x1e\xc3\x3b\x2d\x23\xa7\xd2\x88\xf2\x52\xe6\x03\x2c\xf2\x4a\xa1\x7a\xdc\xc2\xc2\x41\xdf\x7e\x58\x6c\x58\x28\x98\x08\xf1\x2d\x2c\x56\xba\x64\x13\x2b\x8e\x69\xb6\xfb\x78\x59\x1a\xad\xf9\xe6\xf5\x46\x9f\x7b\x23\x7f\x3c\xf0\xfc\x6e\x6f\x34\x5e\xf5\xcd\x41\xa7\x09\xf8\xcd\x69\x02\x09\xd0\x6d\xaa\xed\x1e\x2b\x1b\x16\xb8\x6a\xa4\xea\x71\xc5\x48\x77\xd0\xef\x0d\xc7\xfb\x5d\xa1\x9c\x81\xb0\xdb\x5c\xa9\x58\xd9\xe5\x4a\x6e\x64\x8b\x2b\xa9\x0f\x9d\x3d\x6e\x90\x9a\x0b\x2c\x22\x21\x38\x28\xa4\x3a\xa9\x24\x15\xc7\x01\xcc\x31\x13\x53\x4d\x4e\xb3\x30\x3a\x25\x8a\xf9\x99\x02\x7e\xd6\x39\x89\x54\x63\xb7\xc6\x1c\xce\x3a\x97\xd7\x4b\xce\x14\xee\x96\x31\xe8\xae\xd4\x46\xd9\x31\x93\xc6\x6e\xba\x32\x97\x3c\x8e\xe0\x26\xa9\x09\x6b\xe6\xa2\xa4\xc5\x25\x76\x56\x2c\xb1\xb5\x1a\x52\xd5\xd6\x74\x09\x6e\xcc\xb9\x97\x05\xd7\x32\x0d\xca\xf0\x4b\xbb\xe4\xc1\xd7\xaa\xce\xbd\xd6\xb9\x3e\x5d\x36\xa2\x1a\xf8\x59\xcb\x30\xed\x9b\xdf\xae\xb0\xe5\x06\x67\xe3\x1e\x17\x6d\xfb\xea\xb5\xa3\xe0\xad\x52\x7d\x1d\x05\x71\x4b\xfb\xcf\x98\x7b\xc6\xdc\x0e\xcc\x55\x46\x5f\xf5\xbd\xce\xdb\x41\xcf\xbf\x1e\xb9\x5d\xbf\xf3\x69\xfc\x7e\xdd\xc6\x89\xd5\x31\x9c\x6c\x1a\x3c\xec\xdc\xf4\x3c\xb7\xd3\xed\xed\x0f\x93\x29\x03\x1e\x6c\x08\x91\xb4\x3d\xe3\x55\x91\x06\xed\x32\x25\xef\xc0\xe5\x3c\xf6\x9b\xb3\xb9\x9a\x2c\xa8\x11\x98\xdf\x3c\xe3\xf7\xc1\xf0\x9b\xfc\x23\xc2\x54\x0a\x91\x72\xf5\x91\x31\xbc\x36\xf9\x91\x70\xbc\x36\xcf\xd3\xc4\x72\x77\xf0\xc9\x1b\xf7\x46\x7e\xff\xea\x01\xdc\x2a\xe6\x63\xc1\xf3\x8d\xe2\xf7\xdf\x28\x40\xcc\xeb\x7b\x98\x62\x71\xca\xc2\x1b\xa2\xd6\x76\xb0\xb2\x43\x79\xe0\x4f\x59\x78\x17\x84\x27\xc3\xfc\x32\x5f\xee\x80\xf2\x7a\xa2\xdd\xbd\xe4\x7e\xbd\xb5\xe4\x7e\xfd\xe0\xcc\x7f\x02\xf4\xde\xfb\x40\xef\x28\xd8\xae\x3e\x9e\x3b\x0a\xaf\x2b\x13\x3c\x4d\x50\x3f\x63\xf1\xdf\x50\x3f\xef\x07\x61\x11\x88\xcd\x09\x58\x0b\x5d\xf4\x5c\x9f\x1e\x4a\xb8\xe2\x41\xf5\x23\xe2\xad\x7c\x36\x7e\x14\xb6\x15\xd6\x9f\x26\xd8\xf6\x62\xc4\x72\xb3\x2d\x81\xf7\xc1\x23\x19\x5a\xf5\x6e\x7f\xfa\xa6\x5a\x37\xcf\xdd\xe5\xfb\x9b\xbb\xd4\x2c\xf9\x3b\x98\xec\xd0\x40\x02\x26\xc0\x18\x57\xcb\x09\x54\xc5\x9e\x59\xab\xae\xeb\x79\x86\x90\xca\xf2\x7f\x06\x84\xdb\xd9\xaf\xfa\xa5\x0d\xd6\xd3\xcd\xa4\x33\x48\x7c\x7e\x3f\x1e\xbb\xde\x53\xa1\x4c\xa6\xfc\xef\x62\x4c\xa3\xd7\x52\x47\x41\xcd\xea\x4b\xa6\xa3\x10\x67\x65\x92\xa7\x09\x9e\xe7\x8a\xea\xbf\x51\x51\xa5\xc1\xe8\x67\xc1\xd8\x9c\xcc\x6b\x21\x8c\x1a\xfd\x9b\xbc\xf8\x3f\x3d\x27\x24\x4a\x25\x74\x2c\xc0\x48\x20\x92\xc2\x83\x7b\x71\x91\x84\x20\xd6\x3f\x68\x2a\xb0\x71\x28\xfb\x0a\xeb\x0f\x4c\xbb\xc2\xec\x7e\xbe\x11\x1d\xd6\x42\x00\x63\x63\x99\xe6\x4c\x84\x3e\x08\x32\xe1\xe0\x2b\xa2\x4d\x72\x9a\x7e\x5c\x30\x89\xa7\xe6\xaf\x24\xce\xcb\x21\xdb\x00\xf9\xe4\x32\xdf\xf3\x06\x1b\x72\x7e\x4a\xb8\xd9\xfc\x1a\xc2\x1d\x7d\xec\xfa\x6e\x67\x13\x29\x4e\x67\xd2\xd8\xa4\x22\xa3\x77\xa0\x45\xba\xa7\xbb\xf8\xb0\xdc\x74\x84\x56\xbe\x65\x2c\x0e\xce\x22\x66\x4d\xfd\xf6\x13\x41\x24\xf5\xc2\x41\x2f\x5f\xfd\x79\xc3\x2a\x57\x34\x7c\x8f\xc1\xac\xf6\xa6\x2a\x76\xd0\xf9\xd9\x59\xd4\xc0\x86\x01\x1a\x6b\x66\x17\x5d\x29\x2c\xfc\xac\xa5\x33\x25\x8a\x4c\x18\x67\x96\xc1\xca\x04\x24\x08\xea\x0d\x18\x79\x5f\x3d\xdf\x1d\x8f\xea\x6f\x74\x8a\x0b\x9d\xab\x9b\xfe\xb0\xd2\xae\x34\x9b\x33\x0e\x21\x04\x0e\xaa\x05\x6a\x13\xe8\x25\xfb\xb2\xc6\xbc\xa4\x11\x6b\x29\x6d\x4d\x1c\x12\x7c\x14\x7c\xb1\x32\x47\xdd\x9a\x59\xac\x03\xb4\xde\xd6\xc8\xcc\x7e\x12\x07\xc2\xb8\x92\x33\xba\x28\xbf\xca\x79\xc7\xb4\xb1\x5f\x98\x9d\xbd\x97\xc6\x0e\x4b\xf8\xce\xb2\xb3\x1f\x52\xdf\xd6\xa6\x4c\x1f\x2e\xf6\xaf\x6a\x6d\xf7\xc3\xbb\x05\x1d\x31\x91\x7e\x67\x76\xad\x09\x05\x17\x34\x93\x81\x07\x54\x8a\xc0\x38\xe8\xa2\xb8\x09\x59\xc9\x41\x57\x3f\x47\x4b\x8b\xad\xe9\x14\xa8\x75\xd0\x50\x7a\x74\x06\x41\xcc\x97\x92\xa4\x25\x92\x90\x01\x60\x2d\x39\xb4\x6f\xe3\x09\x68\x01\x16\xd2\x8f\x6b\x23\x92\xac\x79\xdb\x0d\x26\x5d\x5c\x22\x65\x35\x4a\x32\x69\x2b\x2d\xd9\x47\x4d\x57\x4c\xa7\x3c\x5f\xb4\x76\xc7\xc0\x4e\xab\xf5\x3d\xde\x6d\x78\xd9\xf7\x61\xee\x84\xff\x04\x00\x00\xff\xff\x60\xae\x2e\xb8\x62\x2d\x00\x00")

func tmpVizier_yamlsVizierYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsVizierYaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

func tmpVizier_yamlsVizierYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsVizierYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/vizier.yaml", size: 11618, mode: os.FileMode(436), modTime: time.Unix(1569889475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/vizier_yamls/etcd.yaml": tmpVizier_yamlsEtcdYaml,
	"tmp/vizier_yamls/nats.yaml": tmpVizier_yamlsNatsYaml,
	"tmp/vizier_yamls/vizier.yaml": tmpVizier_yamlsVizierYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"vizier_yamls": &bintree{nil, map[string]*bintree{
			"etcd.yaml": &bintree{tmpVizier_yamlsEtcdYaml, map[string]*bintree{}},
			"nats.yaml": &bintree{tmpVizier_yamlsNatsYaml, map[string]*bintree{}},
			"vizier.yaml": &bintree{tmpVizier_yamlsVizierYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

