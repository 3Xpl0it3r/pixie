// Code generated by go-bindata.
// sources:
// ../../../../../../../../../tmp/vizier_yamls/etcd.yaml
// ../../../../../../../../../tmp/vizier_yamls/nats.yaml
// ../../../../../../../../../tmp/vizier_yamls/vizier.yaml
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpVizier_yamlsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x10\xb9\x04\x58\x40\x4a\x9c\xec\x61\x97\x37\xd7\x71\x8b\x02\x49\x6c\xc4\x6e\x81\x9e\x8c\x11\x35\x4e\xd8\xf0\xab\xe4\x48\x68\xf2\xeb\x0b\x9a\x92\x62\x5b\x76\x1a\x34\xe5\x49\x1a\xbc\x99\x37\x7c\xf3\x38\xe0\xe4\x57\xf4\x41\x5a\xc3\x99\x2f\x41\x14\x50\xd3\x83\xf5\xf2\x19\x48\x5a\x53\x3c\xfe\x17\x0a\x69\xcf\x9a\x51\x89\x04\xa3\xec\x51\x9a\x8a\xb3\x89\xaa\x03\xa1\xbf\xb3\x0a\x33\x8d\x04\x15\x10\xf0\x8c\x31\x05\x25\xaa\x10\xbf\x18\x03\xe7\x38\x73\x2a\xd7\xd6\x48\xb2\x5e\x9a\xfb\x8c\x31\x03\x1a\x39\x43\x12\x55\x6e\x1d\x7a\x20\xeb\x33\x5f\x2b\x0c\x3c\xcb\x19\x38\xf9\xc9\xdb\xda\x6d\x0a\xe4\x1b\x54\x11\x2b\x97\x10\xb0\x10\xd6\xa3\x0d\x85\xb0\x3a\x63\xcc\x63\xb0\xb5\x17\xb8\x85\x14\xa9\xa5\xd0\x07\x4a\x10\x8f\xb5\x7b\xf9\xf7\x18\xc8\x7a\x8c\x81\x06\x7d\xd9\xa6\x9e\xfe\x73\x3a\x64\x06\x27\xf1\x27\xa1\x89\xa2\x84\x56\x81\x21\xab\xa8\x03\x59\xdd\x05\x2b\x5c\x4b\x23\xa3\x64\x6f\x61\x38\x39\x19\xd6\x73\xb6\x4a\xdd\x06\xf4\x8d\x14\xd8\xb6\x6e\x2a\x67\xa5\xa1\xf4\xe7\xe2\xa4\x02\xa1\xa1\xc6\xaa\x5a\xa3\x50\x20\x75\x0b\x6c\x30\xa1\x7e\x7f\xbb\x8d\x2a\x7b\xec\x15\x3a\x65\x9f\xf4\x1b\x6b\x1c\xea\x3f\xa0\xf0\xb8\x9f\x7d\x8f\x94\xe5\x79\x9e\xbd\xd3\x65\x1f\xa4\xa9\xa2\x83\xde\x6f\x36\xab\xf0\x0e\xd7\x31\xab\xbb\xd2\x2b\x0d\x65\x8c\x0d\x0d\x7f\xb8\x70\xa8\xcb\xef\x28\x68\x63\xe4\x94\xb3\x48\x63\x1c\x0b\x61\x6b\x43\x7d\x5a\x85\x6b\xa8\x55\xf7\x1f\x1c\x08\x8c\xad\x0f\x54\x8a\x63\x3a\x6b\x3a\x2d\xae\xfa\xf1\xbc\x5f\x83\x7d\xe6\xe0\x50\xf0\xcd\x3c\x9d\x92\x02\x02\x67\xa3\x8c\xb1\x80\x0a\x05\x59\x9f\x8a\x6b\x20\xf1\x70\xbd\xc5\x76\x84\x8f\x50\x3b\x05\x84\x6d\xd6\x56\xab\xf1\xa8\x9d\x02\x47\x4a\xa4\x73\xb8\x71\xc6\xba\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2f\x99\x33\x61\xb5\x06\x53\xbd\x70\xe4\x07\x8a\xc4\x83\xa6\xd9\x06\x25\xbe\x9b\x6f\xab\xf9\xec\x6a\x75\x3b\xbe\x99\x2e\xe6\xe3\xc9\xb4\x07\x30\xd6\x80\xaa\xf1\xa3\xb7\x9a\x6f\x05\x19\x5b\x4b\x54\x55\xeb\xa8\x41\x7c\x0e\xf4\xc0\x7b\x15\x8a\x5e\xf6\xd7\x78\xff\x3e\x65\x0f\x93\x1a\xee\x91\xb3\x1f\x35\x3c\xc5\xd7\x96\x56\xea\xd9\x8e\x3c\xbc\x39\x2f\xfe\x2f\xfe\x7d\x75\x0c\xfb\x4e\x3d\xb6\xa8\xdb\xe7\x7c\xd1\x5a\x78\x4a\xa2\x6a\xdf\xd1\x9f\x78\xd8\xa9\x3c\x12\x1d\x75\xef\xf2\x7a\x91\x6a\x04\x02\x92\xbd\x47\x34\xea\x12\xfd\x8b\x54\x0e\xd1\x2f\x36\x9b\xaa\xbd\x56\x0c\xe4\xa4\x42\x2e\xd0\x6f\xb6\x57\x3a\x71\x09\xef\x21\x53\x68\x80\xed\x74\xd9\xc1\x0a\x25\xd1\xd0\x0e\xd6\xd9\xd6\x95\x11\x30\xed\xdc\xd7\x39\x60\xba\x9c\x5c\xad\xc6\x5f\x96\xb3\xd5\x64\x76\x33\x1f\x4f\x96\x9f\x67\xb7\xab\xbb\xe9\x72\x7a\x1b\xbf\xb2\x2d\x43\x70\x76\x32\x3a\x8f\xfb\x37\xc8\x67\xe4\xec\x32\x2d\xdc\x34\x8a\xcb\xe2\xa2\x18\x5d\x66\xbf\x02\x00\x00\xff\xff\x09\x0c\x05\x30\xd4\x07\x00\x00")

func tmpVizier_yamlsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsEtcdYaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

func tmpVizier_yamlsEtcdYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/etcd.yaml", size: 2004, mode: os.FileMode(436), modTime: time.Unix(1570659273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmpVizier_yamlsNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsNatsYaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

func tmpVizier_yamlsNatsYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/nats.yaml", size: 2954, mode: os.FileMode(436), modTime: time.Unix(1570659274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsVizierYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xdd\x92\xe2\x36\x16\xc7\xef\x79\x0a\xd5\xdc\xa4\x6a\xab\x04\xf4\xf4\xf4\xee\x8c\xab\x72\xc1\xd0\xa4\x87\x0d\x4d\x5c\x98\x24\x95\x2b\x97\x90\x0f\x46\x83\x2c\x69\x24\x99\x84\x7e\xfa\x2d\x7f\x62\xf3\xdd\xd0\xf4\x64\x3b\xf8\x0a\xcb\xd2\xd1\xd1\x5f\x47\x3f\x1d\x6c\x11\xc5\x7e\x03\x6d\x98\x14\x0e\xd2\x13\x42\x9b\x24\xb6\x33\xa9\xd9\x13\xb1\x4c\x8a\xe6\xfc\xa3\x69\x32\xd9\x5a\xdc\x4c\xc0\x92\x9b\xc6\x9c\x89\xc0\x41\x5d\x1e\x1b\x0b\x7a\x24\x39\x34\x22\xb0\x24\x20\x96\x38\x0d\x84\x38\x99\x00\x37\xc9\x2f\x84\x88\x52\x0e\x52\x1c\x47\x52\x30\x2b\x35\x13\x61\x03\x21\x41\x22\x70\xd0\x82\x3d\x31\xd0\x98\x82\xb6\x51\xa8\x1b\x3a\xe6\x60\x9c\x06\x46\x44\xb1\x07\x2d\x63\x95\x5a\xc0\xe8\xdd\xbb\x06\x42\x1a\x8c\x8c\x35\x85\xbc\x4c\xc9\xc0\xa4\x3f\x0c\x50\x0d\x36\xf9\xbd\x00\x3d\xc9\x9f\xfe\xf0\xaf\x1f\x1a\x18\xe3\xc6\xf7\x1b\x53\xd1\xf2\xd4\x41\xe9\x05\xa3\x90\xdd\x80\x08\x94\x64\xe2\x42\x63\xfc\xcc\x44\x90\xf8\xff\x02\xd3\x27\x39\x8c\x60\x9a\x34\x2b\xc6\xba\xc7\xa3\x06\x42\x9b\x7a\xef\xb0\x6c\xe2\xc9\x57\xa0\x36\x95\x31\x6b\xe4\x65\x02\x75\x28\x95\xb1\xb0\x65\xbb\x00\xa6\x24\xe6\xc5\xbd\x51\x84\x42\xe2\xfc\xdf\x43\xa7\x55\x48\xbc\xb8\x50\xa5\xe9\x17\x57\x6a\x51\x48\x91\xdb\x39\x63\xfc\x44\x31\x9c\x07\xf6\x46\xb7\x46\x01\x4d\xec\x28\xa9\x6d\x1e\xdf\x59\x5b\x4b\x15\x9e\x59\xab\xde\xa7\x9d\x24\x8f\x1d\x74\xd7\x7e\xdf\x6e\x67\xf7\x5a\x5a\x49\x25\x77\xd0\xb8\xeb\xa6\x25\x96\xe8\x10\xac\x5b\xab\x67\x80\x03\xb5\x52\xef\x71\x74\xd3\xd5\x06\x42\x76\xa9\xa0\x94\xbd\xef\x5e\x52\x9b\x22\xd2\xcf\xd4\xe5\xd3\x91\xba\x7c\x3a\x51\x97\x95\x9b\xaf\xa8\x4d\x19\xdc\x67\x8a\xf3\xe1\x48\x71\x3e\x9c\x28\x4e\xc5\xcf\xb3\xd4\x21\x42\x48\x9b\x12\x20\x97\x88\x72\x19\x07\xcd\x50\xca\x90\x43\x93\xca\xa8\xc5\x25\x09\xf0\x84\x70\x22\x28\x68\x9c\x75\xc6\x84\x05\x2d\x08\x7f\xb6\xbc\x4a\xcb\xbf\x96\xa7\x2f\x4c\x53\xd1\xf8\xc3\x87\xdb\x63\x14\xbe\x6b\x9f\xa8\x70\xea\x6a\x29\xef\x40\x92\xe0\x73\x2e\xc2\x25\xe3\xef\x5b\x0c\x7a\x89\x27\x5a\xce\xe1\xec\x05\x7a\x7b\x64\x0c\xde\x9e\xa8\xd0\x9a\xaf\x87\xe2\x90\x28\x65\x5a\xa5\x54\xf7\xa0\xb8\x5c\x46\x20\xec\x79\x94\xdf\x29\x92\x06\xc5\x19\x25\xc6\x41\x37\x1b\xa3\x8b\x88\xa5\xb3\x41\xa5\xab\x9d\x03\xde\xce\x6a\x88\x14\x27\x16\x72\x63\x15\xf7\x93\x8b\xd7\xec\xee\xb1\xbc\xd5\x36\x42\xc5\x00\xd2\xd5\x28\x85\x25\x4c\x80\x2e\xed\x25\x29\xda\x62\x65\xbc\x88\x00\x77\xe0\xff\xf7\xf7\xb1\xef\xf5\x1f\x86\xfd\xe1\x83\xff\x73\xef\x8f\xb2\x0a\x42\x0b\xc2\x63\xf8\x49\xcb\xc8\xa9\x14\xa2\x3c\x9b\xfd\x19\x96\x79\x7e\x50\xbd\xe6\xb0\x74\xd0\xd7\x3f\x2d\x36\x2c\x14\x4c\x84\x78\x0e\xcb\xb5\x2a\x59\xc7\x8a\x63\x9a\x4d\x39\x5e\x65\xc7\x1b\xbe\x79\xbd\xd1\x6f\xbd\x91\x3f\x1e\x78\x7e\xb7\x37\x1a\xaf\xfb\xe6\xa0\x56\x42\x7b\xd3\x4a\xc8\x00\xba\x49\xb5\x3d\x60\x65\xcb\x00\xd7\x8d\x54\x3d\xae\x18\xe9\x0e\xfa\xbd\xe1\xf8\xb0\x2b\x94\x33\x10\x76\x97\x2b\x15\x2b\xfb\x5c\xc9\x8d\xec\x70\x25\xf5\xa1\x73\xc0\x0d\x52\x73\x81\x45\x24\x04\x07\x85\x54\x27\x09\xa4\xe2\x38\x80\x05\x66\x62\xaa\x49\x2b\x0b\xa3\x16\x51\xcc\xcf\x14\xf0\xb3\xca\x49\xa4\x1a\xbb\x33\xe6\x70\x56\xb9\x7c\x5e\xc2\xa5\x70\xb7\x8c\x41\x77\x2d\x21\xca\xae\x99\x34\x76\xdb\x93\x85\xe4\x71\x04\x8f\x49\x22\x58\x33\x17\x25\x25\x2e\xb1\xb3\x62\x88\x8d\xf5\x90\xaa\x96\xa6\x43\x70\x63\xce\xbd\x2c\xb8\x56\xcb\xa0\x0c\xbf\xb4\x4a\x1e\x7c\x8d\x6a\xdf\x1b\x95\xeb\xdd\x65\x2d\xaa\x81\x9f\x95\x0c\xd3\xba\xf9\x1e\x85\x2d\x37\x38\x6b\xf7\x0a\x3c\x3b\x94\x99\x5d\x84\x69\x95\x3c\xeb\x22\x5c\x5b\xd9\xbf\xb2\xed\xca\xb6\x3d\x6c\xab\xb4\xbe\xef\x7b\x9d\xcf\x83\x9e\xff\x30\x72\xbb\x7e\xe7\xd7\xf1\x97\x4d\x1b\xef\xac\x8e\xe1\xdd\xb6\xc6\xc3\xce\x63\xcf\x73\x3b\xdd\xde\xe1\x30\x99\x32\xe0\xc1\x96\x10\x49\xcb\x33\x48\x15\xcb\xa0\x59\x2e\xc9\x67\xc0\x38\x8f\xfd\xe3\x81\x5c\x5d\x2c\xe8\x28\x1a\x7f\xba\x32\xf7\x3c\xe6\x26\x7f\x78\x30\x95\x42\xa4\x30\x7d\x65\xf6\x6e\x74\x7e\x21\x06\x6f\xf4\xf3\x36\x59\xdc\x1d\xfc\xea\x8d\x7b\x23\xbf\x7f\xff\x02\x6e\x15\xfd\xb1\xe0\xba\x3b\x7c\xff\xdd\x01\xc4\xa2\x3e\x87\x29\x0b\xa7\x2c\x7c\x24\x6a\x63\x06\x2b\x33\x94\x07\xfe\x94\x85\xcf\xe1\x76\xd2\xcc\x2f\xd7\xcb\x33\xf8\x5d\x5f\x68\xcf\x4f\xae\x3f\xee\x4c\xae\x3f\x5e\x41\x7f\x16\xe8\x0f\xbe\xda\xbb\x08\xe1\xab\x2f\xea\x2e\x82\xf6\x4a\x07\x6f\x93\xe9\x57\x82\xfe\x1d\xf2\xeb\xc3\xcc\x2c\x02\xf1\x78\x58\xd6\x42\x17\x5d\xb1\x76\x12\xd6\x8a\xf7\xd4\xaf\xc8\xb4\xf2\xd5\xf8\x45\x80\x56\x58\x3f\x4c\x33\xa2\xc3\x5a\x98\x60\xcc\x99\xb1\x20\x2a\x45\x37\xef\xff\xd3\x6c\x37\xdb\xcd\x1b\xe7\xee\xb6\x56\x33\xff\x26\x89\x35\x18\xc9\xab\x5b\x74\xf2\x90\x28\x05\x22\xc0\x06\x88\xa6\x33\x1c\xc8\x88\x30\x61\x6a\x35\x92\x8d\xd9\x4c\x19\x87\x1f\x5b\x60\x69\x2b\xbd\x5d\x5f\x2b\x5f\x89\x00\xfa\x34\x8f\x5b\xa1\xc4\x81\x30\x11\x31\xdf\x1c\x0d\x1c\x88\x01\x7c\xd3\x6c\x37\xef\xd6\xc6\x9f\xd7\xf9\xbf\x86\xf5\x41\x34\x5a\x6e\x76\x41\xe9\x10\x10\x93\xa6\x55\xef\x0e\x23\x29\x0d\xa5\xe3\x79\xb4\xfa\x3a\xf5\x9c\x94\x2d\xff\xc2\x94\x5d\x1a\x48\xc0\x04\x18\xe3\x6a\x39\x81\xaa\xd8\x33\x6b\xd5\x43\x9d\x1d\x08\xa9\x8c\x69\x33\x20\xdc\xce\x9e\xea\x8f\xb6\x58\x4f\x27\x93\xce\x20\xf1\xf9\xcb\x78\xec\x7a\x6f\x85\x9c\x99\xf2\xaf\xca\xcd\xa3\xbe\xb4\x5d\x04\x9f\xeb\xdf\xcd\x2e\x42\xd1\xb5\x4e\xae\xa9\xe1\x35\x35\xfc\x7e\xa9\x61\x1a\x8c\x7e\x16\x8c\xc7\xe3\x78\x23\x84\xd1\x51\xff\xa0\x6f\xff\xc1\xff\x93\x09\x44\x52\x78\x70\x12\x17\x49\x08\x62\xf3\x8c\x56\x81\x8d\x73\xd9\x57\x58\x7f\x61\xda\x15\x66\x4f\x49\x16\x8d\x65\x9a\x33\x11\xfa\x20\xc8\x84\x83\xaf\x88\x36\xc9\x6d\x7a\x5e\x62\x12\x4f\xcd\x8f\x49\x9c\x97\x4d\x76\x01\xf2\xcd\xad\x7c\xcf\x1b\x6c\x59\xf3\x53\xc2\xcd\xf6\xef\x2d\xee\xe8\x97\xae\xef\x76\xb6\x91\x22\x4d\x8c\x93\x34\x8c\x3e\x83\x16\xe9\x9c\xee\xe3\xc3\x6a\xd2\x11\x5a\x3b\xd7\x5a\x5c\x9c\x45\xcc\x9a\xfa\xf6\x13\x41\x24\xf5\xd2\x41\xef\xef\xfe\xfd\xc8\x2a\x4f\x34\x7c\x8b\xc1\xac\xd7\xa6\x2a\x76\xd0\x4d\xbb\x1d\x1d\x61\xc3\x00\x8d\x35\xb3\xcb\xae\x14\x16\xfe\xaa\x2d\x67\x4a\x14\x99\x30\xce\x2c\x83\xb5\x0e\x48\x10\xd4\x0b\x30\xf2\xfe\xf0\x7c\x77\x3c\xaa\x7f\xba\x2a\x1e\x74\xee\x1f\xfb\xc3\x4a\xb9\xd2\x6c\xc1\x38\x84\x10\x38\xa8\x16\xa8\xc7\x40\x2f\x99\x97\x0d\xe6\x25\x85\x58\x4b\x69\x6b\xe2\x90\xe0\x17\xc1\x97\x6b\x7d\xd4\xad\x99\xe5\x26\x40\xeb\x65\x47\x99\x39\x4c\xe2\x40\x18\x57\x72\x46\x97\xe5\x41\xa3\x9f\x98\x36\xf6\x77\x66\x67\x5f\xa4\xb1\xc3\x12\xbe\xb3\xec\xee\x4f\xa9\xe7\xb5\x2e\xd3\x17\xaa\xfd\xfb\x5a\xd9\x69\x78\xb7\xa0\x23\x26\xd2\xa3\x73\x0f\x9a\x50\x70\x41\x33\x19\x78\x40\xa5\x08\x8c\x83\x6e\x8b\x4d\xc8\x4a\x0e\xba\x7a\xc2\x2e\x4d\xb6\xa6\x53\xa0\xd6\x41\x43\xe9\xd1\x19\x04\x31\x5f\x49\x92\xa6\x48\x42\x06\x80\xb5\xe4\xd0\x9c\xc7\x13\xd0\x02\x2c\xa4\x27\x86\x23\x92\x8c\x79\xd7\x06\x93\x0e\x2e\x91\xb2\x1a\x25\x99\xb4\x95\x92\xec\x9c\xd6\x3d\xd3\x29\xcf\x97\x8d\xfd\x31\xb0\xd7\x6a\x7d\x8e\xf7\x1b\x5e\xd5\x7d\x99\x9d\xf0\x7f\x01\x00\x00\xff\xff\x2d\xc2\xb8\x78\x43\x30\x00\x00")

func tmpVizier_yamlsVizierYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsVizierYaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

func tmpVizier_yamlsVizierYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsVizierYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/vizier.yaml", size: 12355, mode: os.FileMode(436), modTime: time.Unix(1570659273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/vizier_yamls/etcd.yaml": tmpVizier_yamlsEtcdYaml,
	"tmp/vizier_yamls/nats.yaml": tmpVizier_yamlsNatsYaml,
	"tmp/vizier_yamls/vizier.yaml": tmpVizier_yamlsVizierYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"vizier_yamls": &bintree{nil, map[string]*bintree{
			"etcd.yaml": &bintree{tmpVizier_yamlsEtcdYaml, map[string]*bintree{}},
			"nats.yaml": &bintree{tmpVizier_yamlsNatsYaml, map[string]*bintree{}},
			"vizier.yaml": &bintree{tmpVizier_yamlsVizierYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

