// Code generated by go-bindata.
// sources:
// ../../../../../../../../../tmp/vizier_yamls/etcd.yaml
// ../../../../../../../../../tmp/vizier_yamls/nats.yaml
// ../../../../../../../../../tmp/vizier_yamls/vizier.yaml
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpVizier_yamlsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x08\xbd\x14\x18\x60\xb7\x69\x77\xd8\x74\xcb\xd2\x6c\x18\xd0\x36\x41\x93\x0d\xd8\x29\xa0\x65\xa6\xd5\xaa\xaf\x49\xb4\xb1\xf6\xd7\x0f\x8a\x1c\xe7\xc3\x49\x57\xac\xd3\xc9\x22\x1e\xf9\xa8\xc7\x67\x82\x93\xdf\xd1\x07\x69\x0d\x67\xbe\x04\x51\x40\x4d\x0f\xd6\xcb\x67\x20\x69\x4d\xf1\xf8\x21\x14\xd2\x9e\x35\x83\x12\x09\x06\xd9\xa3\x34\x15\x67\x23\x55\x07\x42\x7f\x67\x15\x66\x1a\x09\x2a\x20\xe0\x19\x63\x0a\x4a\x54\x21\x7e\x31\x06\xce\x71\xe6\x54\xae\xad\x91\x64\xbd\x34\xf7\x19\x63\x06\x34\x72\x86\x24\xaa\xdc\x3a\xf4\x40\xd6\x67\xbe\x56\x18\x78\x96\x33\x70\xf2\x8b\xb7\xb5\x5b\x15\xc8\x57\xa8\x22\x56\x2e\x21\x60\x21\xac\x47\x1b\x0a\x61\x75\xc6\x98\xc7\x60\x6b\x2f\x70\x0b\x29\x52\x4b\xa1\x0b\x94\x20\x1e\x6b\xb7\xb9\x7b\x0c\x64\x3d\xc6\x40\x83\xbe\x6c\x53\x4f\xdf\x9d\xf6\x99\xc1\x49\xfc\x4d\x68\xa2\x28\xa1\x55\xa0\xcf\x2a\xea\x40\x56\xaf\x83\x15\x2e\xa5\x91\x51\xb2\xd7\x30\x9c\x9c\xf4\xeb\x39\x5b\xa5\x6e\x03\xfa\x46\x0a\x6c\x5b\x37\x95\xb3\xd2\x50\xba\xb9\x38\xa9\x40\x68\xa8\xb1\xaa\xd6\x28\x14\x48\xdd\x02\x1b\x4c\xa8\xbf\xbf\x6e\xa5\xca\x1e\x7b\x85\x4e\xd9\x27\xfd\xca\x1a\x87\xfa\x0f\x28\x3c\xee\x67\xdf\x23\x65\x79\x9e\x67\x6f\x74\xd9\x27\x69\xaa\xe8\xa0\xb7\x9b\xcd\x2a\xbc\xc3\x65\xcc\x5a\x3f\xe9\x85\x86\x32\xc6\xfa\x86\x3f\x5c\x38\xd4\xe5\x4f\x14\xb4\x32\x72\xca\x99\xa5\x31\x0e\x85\xb0\xb5\xa1\x2e\xad\xc2\x25\xd4\x6a\x7d\x0f\x0e\x04\xc6\xd6\x7b\x2a\x6d\x1c\xb8\x27\xcb\x55\x37\xa9\xb7\xcb\xb1\xdf\x44\x70\x28\xf8\x6a\xb4\x4e\x49\x01\x81\xb3\x41\xc6\x58\x40\x85\x82\xac\x4f\xc5\x35\x90\x78\xb8\xde\x62\x3b\xc2\x47\xa8\x9d\x02\xc2\x36\x6b\xab\xd5\x78\xd4\x4e\x81\x23\x25\xd2\x39\xdc\x38\x63\xeb\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2b\x99\x33\x61\xb5\x06\x53\x6d\x38\xf2\x03\x45\xe2\x41\xd3\x6c\x83\x12\xdf\xcd\x8f\xc5\x74\x72\xb5\xb8\x1d\xde\x8c\x67\xd3\xe1\x68\xdc\x01\x18\x6b\x40\xd5\xf8\xd9\x5b\xcd\xb7\x82\x8c\x2d\x25\xaa\xaa\x35\x57\x2f\x3e\x05\x7a\xe0\x9d\x0a\x45\x27\xfb\x4b\xbc\xff\x9f\xb2\x83\x49\x0d\xf7\xc8\xd9\xaf\x1a\x9e\xe2\x8f\x97\xb6\xeb\xd9\x8e\x3c\xbc\x39\x2f\x3e\x16\xef\x5f\x1c\x43\xcf\xb4\x47\x76\x76\x6b\xe1\x8b\xd6\xc2\x63\x12\x55\xfb\x4b\xfd\x8b\x87\x9d\xca\x23\xd1\x51\xf7\xce\xaf\x67\xa9\x46\x20\x20\xd9\x79\x44\xa3\x2e\xd1\x6f\xa4\x72\x88\x7e\xb6\x5a\x5a\xed\xb3\x62\x20\x27\x15\x72\x81\x7e\xb5\xc8\xd2\x89\xfb\x78\x0f\x99\x42\x3d\xec\x5a\x97\x1d\xac\x50\x12\x0d\xed\x60\x9d\x6d\x5d\x19\x01\xe3\xb5\xfb\xd6\x0e\x18\xcf\x47\x57\x8b\xe1\xb7\xf9\x64\x31\x9a\xdc\x4c\x87\xa3\xf9\xd7\xc9\xed\xe2\x6e\x3c\x1f\xdf\xc6\xaf\x6c\xcb\x10\x9c\x9d\x0c\xce\xe3\x2a\x0e\xf2\x19\x39\xbb\x4c\xbb\x37\x8d\xe2\xb2\xb8\x28\x06\x97\xd9\x9f\x00\x00\x00\xff\xff\x38\x53\xf1\xa2\xdf\x07\x00\x00")

func tmpVizier_yamlsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsEtcdYaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

func tmpVizier_yamlsEtcdYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/etcd.yaml", size: 2015, mode: os.FileMode(436), modTime: time.Unix(1570311423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmpVizier_yamlsNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsNatsYaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

func tmpVizier_yamlsNatsYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/nats.yaml", size: 2954, mode: os.FileMode(436), modTime: time.Unix(1570311423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsVizierYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x5d\x73\xda\x3a\x13\xc7\xef\xf9\x14\x9a\xdc\x74\xe6\x99\x31\x24\x4d\xfa\x4c\xeb\x99\x73\x41\x09\x4d\x39\x25\xd4\x83\x69\x3b\xbd\xf2\x08\x79\x31\x6a\x64\x49\x95\x64\x5a\xfa\xe9\xcf\xf8\x15\x9b\x57\x03\x21\xed\xc9\xc1\x57\x58\x96\x56\xab\xbf\x76\x7f\x5e\x6c\x63\x49\x3f\x83\xd2\x54\x70\x1b\xa9\x31\x26\x4d\x1c\x99\xa9\x50\xf4\x17\x36\x54\xf0\xe6\xc3\x6b\xdd\xa4\xa2\x35\xbb\x1a\x83\xc1\x57\x8d\x07\xca\x7d\x1b\x75\x58\xa4\x0d\xa8\xa1\x60\xd0\x08\xc1\x60\x1f\x1b\x6c\x37\x10\x62\x78\x0c\x4c\xc7\xbf\x10\xc2\x52\xda\x48\x32\x2b\x14\x9c\x1a\xa1\x28\x0f\x1a\x08\x71\x1c\x82\x8d\x66\xf4\x17\x05\x65\x11\x50\x26\x0c\x54\x43\x45\x0c\xb4\xdd\xb0\x10\x96\xf4\x4e\x89\x48\x26\x16\x2c\x74\x71\xd1\x40\x48\x81\x16\x91\x22\x90\xb5\x49\xe1\xeb\xe4\x87\x06\xa2\xc0\xc4\xbf\x67\xa0\xc6\xd9\xd5\x17\xff\x7b\xd1\xb0\x2c\xab\xf1\xfb\xd6\x94\x8f\x3c\x74\x51\x6a\x46\x09\xa4\x27\xc0\x7d\x29\x28\x3f\xd1\x1a\xdf\x52\xee\xc7\xfe\x3f\xc2\xf6\x09\x06\x43\x98\xc4\xc3\xf2\xb5\x6e\xf1\xa8\x81\xd0\xaa\xde\x1b\x2c\xeb\x68\xfc\x0d\x88\x49\x64\x4c\x07\xb9\xa9\x40\x6d\x42\x44\xc4\x4d\x31\xce\x87\x09\x8e\x58\x7e\xae\x25\x26\x10\x3b\xff\x67\xe8\xb4\x08\x89\x47\x17\xaa\x30\xfd\xe8\x4a\xcd\x72\x29\x32\x3b\x47\xac\x1f\x4b\x6a\x65\x81\xbd\x32\xad\x96\x40\x62\x3b\x52\x28\x93\xc5\x77\x3a\xd6\x10\x69\x4d\x8d\x91\x2f\x93\x49\xe2\xcb\x36\x7a\x75\xf9\xf2\xf2\x32\x3d\x57\xc2\x08\x22\x98\x8d\x46\x1d\x27\x69\x31\x58\x05\x60\x9c\x4a\x3f\x0d\x0c\x88\x11\x6a\x8b\xa3\xab\xae\x36\x10\x32\x73\x09\x85\xec\x3d\xe7\x94\xda\xe4\x91\x7e\xa4\x2e\x6f\x6a\xea\xf2\xe6\x40\x5d\x16\x6e\x3e\xa1\x36\x45\x70\x1f\x29\xce\x4d\x4d\x71\x6e\x0e\x14\xa7\xe4\xe7\x51\xea\x60\xce\x85\x49\x08\x90\x49\x44\x98\x88\xfc\x66\x20\x44\xc0\xa0\x49\x44\xd8\x62\x02\xfb\xd6\x18\x33\xcc\x09\x28\x2b\x9d\x8c\x72\x03\x8a\x63\xb6\xb7\xbc\x52\x89\x9f\xf3\xc3\x13\x53\x97\x34\xbe\xb9\xb9\xae\xa3\xf0\xab\xcb\x03\x15\x4e\x5c\x2d\xe4\xed\x0b\xec\xbf\xcd\x44\x38\x65\xfc\x7d\x8f\x40\xcd\xad\xb1\x12\x0f\x70\x74\x82\x5e\xd7\x8c\xc1\xeb\x03\x15\x5a\xf2\x75\x57\x1c\x62\x29\x75\xab\x90\xea\x16\x24\x13\xf3\x10\xb8\x39\x8e\xf2\x1b\x45\x52\x20\x19\x25\x58\xdb\xe8\x6a\x65\x75\x21\x36\x64\xda\x2f\x4d\xb5\x71\xc1\xeb\x59\x0d\xa1\x64\xd8\x40\x66\xac\xe4\x7e\x7c\xb0\x8a\xdd\x2d\x96\xd7\xda\x46\x28\x5f\x40\x92\x8d\x82\x1b\x4c\x39\xa8\xc2\x5e\x5c\xa2\xcd\x16\xc6\xf3\x08\x70\xfa\xde\xdf\x5f\x46\x9e\xdb\xbb\x1b\xf4\x06\x77\xde\x87\xee\xd7\xa2\x0b\x42\x33\xcc\x22\x78\xa7\x44\x68\x97\x1a\x51\x56\xcd\x7e\x80\x79\x56\x1f\x94\x8f\x07\x98\xdb\xe8\xdb\x0f\x63\x69\x1a\x70\xca\x03\xeb\x01\xe6\x4b\x5d\xd2\x89\x25\xb3\x48\xba\xe5\xd6\xa2\x3a\x5e\xf1\xcd\xed\x0e\x3f\x77\x87\xde\xa8\xef\x7a\x9d\xee\x70\xb4\xec\x9b\x8d\x5a\x31\xed\x75\x2b\x26\x03\xa8\x26\x51\x66\x87\x95\x35\x0b\x5c\x36\x52\xf6\xb8\x64\xa4\xd3\xef\x75\x07\xa3\xdd\xae\x10\x46\x81\x9b\x4d\xae\x94\xac\x6c\x73\x25\x33\xb2\xc1\x95\xc4\x87\xf6\x0e\x37\x70\xc5\x05\x1a\xe2\x00\x6c\x14\x10\x15\x17\x90\x92\x59\x3e\xcc\x2c\xca\x27\x0a\xb7\xd2\x30\x6a\x61\x49\xbd\x54\x01\x2f\xed\x1c\x47\xaa\x36\x1b\x63\xce\x4a\x3b\x17\xd7\x0b\xb8\xe4\xee\x16\x31\xe8\x2c\x15\x44\xe9\x31\x15\xda\xac\xbb\x32\x13\x2c\x0a\xe1\x3e\x2e\x04\x2b\xe6\xc2\xb8\xc5\xc1\x66\x9a\x2f\xb1\xb1\x1c\x52\xe5\xd6\x64\x09\x4e\xc4\x98\x9b\x06\xd7\x22\x0d\x8a\xf0\x4b\xba\x64\xc1\xd7\x28\xcf\xbd\xd2\xb9\x3a\x5d\x3a\xa2\x1c\xf8\x69\xcb\x20\xe9\x9b\xdd\xa3\x2c\xc3\xb4\x95\x8e\x7b\x02\x9e\xed\xaa\xcc\x4e\xc2\xb4\x52\x9d\x75\x12\xae\x2d\xec\x9f\xd9\x76\x66\xdb\x16\xb6\x95\x46\xdf\xf6\xdc\xf6\xdb\x7e\xd7\xbb\x1b\x3a\x1d\xaf\xfd\x69\xf4\x7e\xd5\xc6\x85\x51\x11\x5c\xac\x1b\x3c\x68\xdf\x77\x5d\xa7\xdd\xe9\xee\x0e\x93\x09\x05\xe6\xaf\x09\x91\xa4\x3d\x85\x54\x9e\x06\xcd\x22\x25\xf7\x80\x71\x16\xfb\xf5\x81\x5c\x4e\x16\x54\x8b\xc6\x6f\xce\xcc\x3d\x8e\xb9\xf1\x1f\x1e\x8b\x08\xce\x13\x98\x3e\x31\x7b\x57\x26\x3f\x11\x83\x57\xe6\x79\x9e\x2c\xee\xf4\x3f\xb9\xa3\xee\xd0\xeb\xdd\x3e\x82\x5b\xf9\x7c\xd4\x3f\xdf\x1d\x7e\xff\xdd\x01\xf8\xac\xba\x87\x09\x0b\x27\x34\xb8\xc7\x72\x65\x07\x4b\x3b\x94\x05\xfe\x84\x06\xfb\x70\x3b\x1e\xe6\x15\xf9\xb2\x07\xbf\xab\x89\xb6\x7f\x71\xfd\x7a\x63\x71\xfd\xfa\x0c\xfa\xa3\x40\xbf\xf3\xd1\xde\x49\x08\x5f\x7e\x50\x77\x12\xb4\x97\x26\x78\x9e\x4c\x3f\x13\xf4\x4f\xa8\xaf\x77\x33\x33\x0f\xc4\xfa\xb0\xac\x84\x2e\x3a\x63\xed\x20\xac\xe5\xcf\xa9\x9f\x90\x69\xc5\xa3\xf1\x93\x00\x2d\xb7\xfe\x3c\x69\xb6\x93\x1d\x86\xe9\x4d\x59\xbb\x8b\x18\xf1\xd0\xb2\x77\xbb\x73\x36\xd1\xba\x7e\xc2\x2e\x5e\xdf\xec\x53\xd3\x64\xaf\x60\xd2\x43\x01\xf6\x29\x07\xad\x1d\x25\xc6\x50\x16\x7b\x6a\x8c\xbc\xab\x26\x17\x42\x32\x4d\xfa\x29\x60\x66\xa6\xbf\xaa\x97\xd6\x58\x4f\x36\x93\x4c\x21\xf6\xf9\xfd\x68\xe4\xb8\xcf\x05\x2d\xa9\xf2\x4f\x0a\x96\x5a\xaf\xa2\x4e\xc2\x97\xe5\x17\x4b\x27\xc1\xcc\xd2\x24\xcf\x93\x36\xe7\xda\xe9\xdf\x51\x3b\x25\xc1\xe8\xa5\xc1\x58\x1f\xc7\x2b\x21\x8c\x6a\xfd\xc5\xbc\xfe\x0f\xff\x91\xc4\x10\x0a\xee\xc2\x41\x5c\xc4\x01\xf0\xd5\x8f\x98\x72\x6c\x1c\xcb\xbe\xdc\xfa\x23\xd3\x2e\x37\xbb\x9b\x6f\x58\x05\x95\x10\xb0\x2c\x6d\xa8\x62\x94\x07\x1e\x70\x3c\x66\xe0\x49\xac\x74\x7c\x9a\x7c\x50\x30\x8e\x26\xfa\xaf\x38\xce\x8b\x21\x9b\x00\xf9\xec\x32\xdf\x75\xfb\x6b\x72\x7e\x82\x99\x5e\xff\x42\xc2\x19\x7e\xec\x78\x4e\x7b\x1d\x29\x5a\x53\xa1\x4d\x5c\x86\x91\x3d\x68\x91\xec\xe9\x36\x3e\x2c\x36\x1d\xa1\xa5\x0f\x3f\xf3\x83\xd1\x90\x1a\x5d\xbd\xfd\x84\x10\x0a\x35\xb7\xd1\xcb\x57\xff\xbf\xa7\xa5\x2b\x0a\xbe\x47\xa0\x97\x7b\x13\x19\xd9\xe8\xea\xf2\x32\xac\x61\x43\x03\x89\x14\x35\xf3\x8e\xe0\x06\x7e\x56\xd2\x99\x60\x89\xc7\x94\x51\x43\x61\x69\x02\xec\xfb\xd5\x06\x0b\xb9\x5f\x5d\xcf\x19\x0d\xab\xef\x76\xf2\x0b\xed\xdb\xfb\xde\xa0\xd4\x2e\x15\x9d\x51\x06\x01\xf8\x36\xaa\x04\x6a\x1d\xe8\xc5\xfb\xb2\xc2\xbc\xb8\xd1\x52\x42\x98\x8a\x38\xd8\xff\xc8\xd9\x7c\x69\x8e\xaa\x35\x3d\x5f\x05\x68\xb5\xad\x96\x99\xdd\x24\xf6\xb9\x76\x04\xa3\x64\x5e\x7c\x89\xf3\x8e\x2a\x6d\xbe\x50\x33\x7d\x2f\xb4\x19\x14\xf0\x9d\xa6\x67\x3f\x84\x7a\xa8\x4c\x99\x3c\x71\xec\xdd\x56\xda\x0e\xc3\xbb\x01\x15\x52\x9e\x7c\x5b\x76\xa7\x30\x01\x07\x14\x15\xbe\x0b\x44\x70\x5f\xdb\xe8\x3a\xbf\x09\x19\xc1\x40\x95\x3f\x41\x4b\x8a\xad\xc9\x04\x88\xb1\xd1\x40\xb8\x64\x0a\x7e\xc4\x16\x92\x24\x25\x12\x17\x3e\x58\x4a\x30\x68\x3e\x44\x63\x50\x1c\x0c\x24\x9f\xd4\x86\x38\x5e\xf3\xa6\x1b\x4c\xb2\xb8\x58\xca\x72\x94\xa4\xd2\x96\x5a\xd2\x0f\x99\x6e\xa9\x4a\x78\x3e\x6f\x6c\x8f\x81\xad\x56\xab\x7b\xbc\xdd\xf0\xa2\xef\xe3\xdc\x09\xff\x09\x00\x00\xff\xff\x32\x54\x1d\x41\x64\x2f\x00\x00")

func tmpVizier_yamlsVizierYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsVizierYaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

func tmpVizier_yamlsVizierYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsVizierYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/vizier.yaml", size: 12132, mode: os.FileMode(436), modTime: time.Unix(1570311422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/vizier_yamls/etcd.yaml": tmpVizier_yamlsEtcdYaml,
	"tmp/vizier_yamls/nats.yaml": tmpVizier_yamlsNatsYaml,
	"tmp/vizier_yamls/vizier.yaml": tmpVizier_yamlsVizierYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"vizier_yamls": &bintree{nil, map[string]*bintree{
			"etcd.yaml": &bintree{tmpVizier_yamlsEtcdYaml, map[string]*bintree{}},
			"nats.yaml": &bintree{tmpVizier_yamlsNatsYaml, map[string]*bintree{}},
			"vizier.yaml": &bintree{tmpVizier_yamlsVizierYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

