// Code generated for package cmd by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../../../../../../../tmp/vizier_yamls/etcd.yaml
// ../../../../../../../../../tmp/vizier_yamls/nats.yaml
// ../../../../../../../../../tmp/vizier_yamls/vizier.yaml
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpVizier_yamlsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x10\xb9\x04\x58\x40\x4a\x9c\xec\x61\x97\x37\xd7\x71\x8b\x02\x49\x6c\xc4\x6e\x81\x9e\x8c\x11\x35\x4e\xd8\xf0\xab\xe4\x48\x68\xf2\xeb\x0b\x9a\x92\x62\x5b\x76\x1a\x34\xe5\x49\x1a\xbc\x99\x37\x7c\xf3\x38\xe0\xe4\x57\xf4\x41\x5a\xc3\x99\x2f\x41\x14\x50\xd3\x83\xf5\xf2\x19\x48\x5a\x53\x3c\xfe\x17\x0a\x69\xcf\x9a\x51\x89\x04\xa3\xec\x51\x9a\x8a\xb3\x89\xaa\x03\xa1\xbf\xb3\x0a\x33\x8d\x04\x15\x10\xf0\x8c\x31\x05\x25\xaa\x10\xbf\x18\x03\xe7\x38\x73\x2a\xd7\xd6\x48\xb2\x5e\x9a\xfb\x8c\x31\x03\x1a\x39\x43\x12\x55\x6e\x1d\x7a\x20\xeb\x33\x5f\x2b\x0c\x3c\xcb\x19\x38\xf9\xc9\xdb\xda\x6d\x0a\xe4\x1b\x54\x11\x2b\x97\x10\xb0\x10\xd6\xa3\x0d\x85\xb0\x3a\x63\xcc\x63\xb0\xb5\x17\xb8\x85\x14\xa9\xa5\xd0\x07\x4a\x10\x8f\xb5\x7b\xf9\xf7\x18\xc8\x7a\x8c\x81\x06\x7d\xd9\xa6\x9e\xfe\x73\x3a\x64\x06\x27\xf1\x27\xa1\x89\xa2\x84\x56\x81\x21\xab\xa8\x03\x59\xdd\x05\x2b\x5c\x4b\x23\xa3\x64\x6f\x61\x38\x39\x19\xd6\x73\xb6\x4a\xdd\x06\xf4\x8d\x14\xd8\xb6\x6e\x2a\x67\xa5\xa1\xf4\xe7\xe2\xa4\x02\xa1\xa1\xc6\xaa\x5a\xa3\x50\x20\x75\x0b\x6c\x30\xa1\x7e\x7f\xbb\x8d\x2a\x7b\xec\x15\x3a\x65\x9f\xf4\x1b\x6b\x1c\xea\x3f\xa0\xf0\xb8\x9f\x7d\x8f\x94\xe5\x79\x9e\xbd\xd3\x65\x1f\xa4\xa9\xa2\x83\xde\x6f\x36\xab\xf0\x0e\xd7\x31\xab\xbb\xd2\x2b\x0d\x65\x8c\x0d\x0d\x7f\xb8\x70\xa8\xcb\xef\x28\x68\x63\xe4\x94\xb3\x48\x63\x1c\x0b\x61\x6b\x43\x7d\x5a\x85\x6b\xa8\x55\xf7\x1f\x1c\x08\x8c\xad\x0f\x54\x8a\x63\x3a\x6b\x3a\x2d\xae\xfa\xf1\xbc\x5f\x83\x7d\xe6\xe0\x50\xf0\xcd\x3c\x9d\x92\x02\x02\x67\xa3\x8c\xb1\x80\x0a\x05\x59\x9f\x8a\x6b\x20\xf1\x70\xbd\xc5\x76\x84\x8f\x50\x3b\x05\x84\x6d\xd6\x56\xab\xf1\xa8\x9d\x02\x47\x4a\xa4\x73\xb8\x71\xc6\xba\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2f\x99\x33\x61\xb5\x06\x53\xbd\x70\xe4\x07\x8a\xc4\x83\xa6\xd9\x06\x25\xbe\x9b\x6f\xab\xf9\xec\x6a\x75\x3b\xbe\x99\x2e\xe6\xe3\xc9\xb4\x07\x30\xd6\x80\xaa\xf1\xa3\xb7\x9a\x6f\x05\x19\x5b\x4b\x54\x55\xeb\xa8\x41\x7c\x0e\xf4\xc0\x7b\x15\x8a\x5e\xf6\xd7\x78\xff\x3e\x65\x0f\x93\x1a\xee\x91\xb3\x1f\x35\x3c\xc5\xd7\x96\x56\xea\xd9\x8e\x3c\xbc\x39\x2f\xfe\x2f\xfe\x7d\x75\x0c\xfb\x4e\x3d\xb6\xa8\xdb\xe7\x7c\xd1\x5a\x78\x4a\xa2\x6a\xdf\xd1\x9f\x78\xd8\xa9\x3c\x12\x1d\x75\xef\xf2\x7a\x91\x6a\x04\x02\x92\xbd\x47\x34\xea\x12\xfd\x8b\x54\x0e\xd1\x2f\x36\x9b\xaa\xbd\x56\x0c\xe4\xa4\x42\x2e\xd0\x6f\xb6\x57\x3a\x71\x09\xef\x21\x53\x68\x80\xed\x74\xd9\xc1\x0a\x25\xd1\xd0\x0e\xd6\xd9\xd6\x95\x11\x30\xed\xdc\xd7\x39\x60\xba\x9c\x5c\xad\xc6\x5f\x96\xb3\xd5\x64\x76\x33\x1f\x4f\x96\x9f\x67\xb7\xab\xbb\xe9\x72\x7a\x1b\xbf\xb2\x2d\x43\x70\x76\x32\x3a\x8f\xfb\x37\xc8\x67\xe4\xec\x32\x2d\xdc\x34\x8a\xcb\xe2\xa2\x18\x5d\x66\xbf\x02\x00\x00\xff\xff\x09\x0c\x05\x30\xd4\x07\x00\x00")

func tmpVizier_yamlsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsEtcdYaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

func tmpVizier_yamlsEtcdYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/etcd.yaml", size: 2004, mode: os.FileMode(420), modTime: time.Unix(1570662009, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmpVizier_yamlsNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsNatsYaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

func tmpVizier_yamlsNatsYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/nats.yaml", size: 2954, mode: os.FileMode(420), modTime: time.Unix(1570662009, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsVizierYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x5b\x93\xda\x38\x16\xc7\xdf\xf9\x14\xaa\x7e\x99\xaa\xad\x12\xd0\xb7\xdd\xc4\x55\xf3\xc0\xd0\x4c\x87\x9d\x6e\xc6\x85\x49\x52\x79\x72\x09\xf9\x00\x0a\xb2\xa4\x48\x32\x09\xfd\xe9\xb7\x7c\xc5\xe6\xde\xd0\x74\xb2\x3d\xf8\x09\xeb\x72\x74\x74\xf4\xd7\x4f\x07\xdb\x44\xb1\x4f\xa0\x0d\x93\xc2\x41\x7a\x48\x68\x9d\x44\x76\x22\x35\x7b\x22\x96\x49\x51\x9f\xbe\x33\x75\x26\x1b\xb3\xcb\x21\x58\x72\x59\x9b\x32\x11\x38\xa8\xcd\x23\x63\x41\xf7\x25\x87\x5a\x08\x96\x04\xc4\x12\xa7\x86\x10\x27\x43\xe0\x26\xfe\x85\x10\x51\xca\x41\x8a\xe3\x50\x0a\x66\xa5\x66\x62\x5c\x43\x48\x90\x10\x1c\x34\x63\x4f\x0c\x34\xa6\xa0\x6d\x38\xd6\x35\x1d\x71\x30\x4e\x0d\x23\xa2\xd8\xbd\x96\x91\x4a\x2c\x60\x74\x71\x51\x43\x48\x83\x91\x91\xa6\x90\x95\x29\x19\x98\xe4\x87\x01\xaa\xc1\xc6\xbf\x67\xa0\x87\x59\xed\x6f\xff\xfa\xad\x86\x31\xae\xfd\xbc\x39\xe5\x3d\x0f\x9d\x94\x9e\x31\x0a\xe9\x0d\x88\x40\x49\x26\x4e\x34\xc7\x3f\x98\x08\x62\xff\x5f\x60\xf9\x24\x87\x3e\x8c\xe2\x6e\xf9\x5c\xb7\x78\x54\x43\x68\x35\xde\x1b\x2c\x9b\x68\xf8\x15\xa8\x4d\xc2\x98\x76\xf2\xd2\x00\xb5\x28\x95\x91\xb0\x45\xbf\x00\x46\x24\xe2\xf9\xbd\x51\x84\x42\xec\xfc\xaf\x11\xa7\x85\x24\x5e\x3c\x50\x85\xe9\x17\x8f\xd4\x2c\x0f\x45\x66\xe7\x88\xf9\x13\xc5\x70\x26\xec\x95\x61\x8d\x02\x1a\xdb\x51\x52\xdb\x4c\xdf\x69\x5f\x4b\x15\x9e\x58\xab\xae\x92\x41\xe2\x6a\x07\xdd\x36\xaf\x9a\xcd\xf4\x5e\x4b\x2b\xa9\xe4\x0e\x1a\xb4\xdd\xa4\xc4\x12\x3d\x06\xeb\x56\xda\x19\xe0\x40\xad\xd4\x5b\x1c\x5d\x75\xb5\x86\x90\x9d\x2b\x28\xc2\xde\x75\x4f\x19\x9b\x5c\xe9\x47\xc6\xe5\xfd\x9e\x71\x79\x7f\x60\x5c\x16\x6e\xbe\x62\x6c\x0a\x71\x1f\x19\x9c\x9b\x3d\x83\x73\x73\x60\x70\x4a\x7e\xbe\x62\x74\x94\x96\x3f\xe6\x87\xef\x2b\x53\x0a\xd1\xcd\xcd\xf5\x3e\x01\xba\x6d\x1e\x18\xa0\xc4\xd5\x22\x3a\x3d\x19\x40\x6c\xf1\x94\xc1\xf9\x16\x81\x9e\xe3\xa1\x96\x53\x38\x7a\x6f\x5d\xef\x29\x9f\xeb\x03\xa3\xb3\xe4\xeb\x2e\x09\x11\xa5\x4c\xa3\x08\xd5\x1d\x28\x2e\xe7\x21\x08\x7b\x1c\xa0\x37\x06\x49\x83\xe2\x8c\x12\xe3\xa0\xcb\x95\xd9\x85\xc4\xd2\xc9\x43\x69\xa8\x8d\x13\x5e\x8f\x59\x08\x15\x27\x16\x32\x63\x25\xf7\xe3\x8b\x57\xec\x6e\xb1\xbc\xd6\x36\x42\xf9\x04\xe2\x8b\x4a\x61\x09\x13\xa0\x0b\x7b\x71\x76\x35\x5b\x18\xcf\x15\xe0\x3e\xf8\xff\xfd\x3c\xf0\xbd\xee\x7d\xaf\xdb\xbb\xf7\xff\xea\x7c\x29\x9a\x20\x34\x23\x3c\x82\x3f\xb5\x0c\x9d\x52\x21\xca\x12\xd1\xbf\x60\x9e\x1d\xed\xe5\x6b\x0a\x73\x07\x7d\xfd\x6e\xb1\x61\x63\xc1\xc4\x18\x4f\x61\xbe\xd4\x24\x1d\x58\x71\x4c\xd3\x25\xc7\x8b\xc4\x76\xc5\x37\xaf\xd3\xff\xd4\xe9\xfb\x83\x07\xcf\x6f\x77\xfa\x83\x65\xdf\x1c\xd4\x88\x41\x6d\x1a\x31\x15\x40\xd7\xa9\xb6\x3b\xac\xac\x99\xe0\xb2\x91\xb2\xc7\x25\x23\xed\x87\x6e\xa7\x37\xd8\xed\x0a\xe5\x0c\x84\xdd\xe4\x4a\xc9\xca\x36\x57\x32\x23\x1b\x5c\x49\x7c\x68\xed\x70\x83\x54\x5c\x60\x21\x19\x83\x83\xc6\x54\xc7\xb9\x9f\xe2\x38\x80\x19\x66\x62\xa4\x49\x23\x95\x51\x83\x28\xe6\xa7\x11\xf0\xd3\xc6\xb1\x52\x8d\xdd\xa8\x39\x9c\x36\x2e\xea\x0b\xb8\xe4\xee\x16\x1a\x74\x97\x72\x99\xf4\x9a\x48\x63\xd7\xd5\xcc\x24\x8f\x42\x78\x8c\x73\xb8\x8a\xb9\x30\x2e\x71\x89\x9d\xe4\x53\xac\x2d\x4b\xaa\x5c\x9a\x4c\xc1\x8d\x38\xf7\x52\x71\x2d\xb6\x41\x21\xbf\xa4\x49\x26\xbe\x5a\x79\xec\x95\xc6\xd5\xe1\xd2\x1e\x65\xe1\xa7\x25\xbd\xa4\x6d\x76\x3e\x61\xcb\x0d\x4e\xfb\xbd\x02\xcf\x76\x25\x55\x27\x61\x5a\x29\x45\x3a\x09\xd7\x16\xf6\xcf\x6c\x3b\xb3\x6d\x0b\xdb\x4a\xbd\xef\xba\x5e\xeb\x8f\x87\x8e\x7f\xdf\x77\xdb\x7e\xeb\xe3\xe0\xc3\xaa\x8d\x0b\xab\x23\xb8\x58\xd7\xb9\xd7\x7a\xec\x78\x6e\xab\xdd\xd9\x2d\x93\x11\x03\x1e\xac\x91\x48\x52\x9e\x42\x2a\xdf\x06\xf5\x62\x4b\x3e\x03\xc6\x99\xf6\xf7\x07\x72\x79\xb3\xa0\xbd\x68\xfc\xfe\xcc\xdc\xe3\x98\xcb\x65\x14\x60\x2a\x85\x48\x60\xfa\xca\xec\x5d\x19\xfc\x44\x0c\x5e\x19\xe7\x6d\xb2\xb8\xfd\xf0\xd1\x1b\x74\xfa\x7e\xf7\xee\x05\xdc\xca\xc7\x63\xc1\xf9\x74\xf8\xf9\xa7\x03\x88\x59\x75\x0d\x13\x16\x8e\xd8\xf8\x91\xa8\x95\x15\x2c\xad\x50\x26\xfc\x11\x1b\x3f\x87\xdb\x71\x37\xbf\xd8\x2f\xcf\xe0\x77\x75\xa3\x3d\x3f\xb9\x7e\xb7\x31\xb9\x7e\x77\x06\xfd\x51\xa0\xdf\xf9\x54\xee\x24\x84\x2f\x3f\x63\x3b\x09\xda\x4b\x03\xbc\x4d\xa6\x9f\x09\xfa\x2b\xe4\xd7\xbb\x99\x99\x0b\x71\x7f\x58\x56\xa4\x8b\xce\x58\x3b\xfc\x71\xfa\xeb\x32\xad\x78\x2c\x7e\x12\xa0\xe5\xd6\x77\xd3\x8c\xe8\x71\x45\x26\x18\x73\x66\x2c\x88\x52\xd1\xe5\xd5\x7f\xea\xcd\x7a\xb3\x7e\xe9\xdc\x5e\x57\x5a\x66\xaf\x13\xb1\x06\x23\x79\xf9\x88\x8e\x2b\x89\x52\x20\x02\x6c\x80\x68\x3a\xc1\x81\x0c\x09\x13\xa6\xd2\x22\x3e\x98\xcd\x88\x71\xf8\xbd\x01\x96\x36\x92\xdb\xe5\xbd\xf2\x95\x08\xa0\x4f\xd3\xa8\x31\x96\x38\x10\x26\x24\xe6\x9b\xa3\x81\x03\x31\x80\x2f\xeb\xcd\xfa\xed\xd2\xfc\xb3\x36\xff\xd7\xb0\xde\x89\x46\xcb\xcd\x26\x28\xed\x02\x62\xdc\xb5\xec\xdd\x6e\x24\x25\x52\xda\x9f\x47\x8b\x37\x53\xcf\x49\xd9\xb2\xb7\x4b\xe9\xa5\x81\x04\x4c\x80\x31\xae\x96\x43\x28\x07\x7b\x62\xad\xba\xaf\xb2\x03\x21\x95\x32\x6d\x02\x84\xdb\xc9\x53\xb5\x6a\x8d\xf5\x64\x31\xe9\x04\x62\x9f\x3f\x0c\x06\xae\xf7\x56\xc8\x99\x46\xfe\x55\xb9\xb9\xd7\x9b\xb6\x93\xe0\x73\xf9\xbd\xd9\x49\x28\xba\x34\xc8\x39\x35\x3c\xa7\x86\x3f\x2f\x35\x4c\xc4\xe8\xa7\x62\xdc\x1f\xc7\x2b\x12\x46\x7b\xfd\x83\xbe\xfe\x07\xff\x4f\x26\x10\x4a\xe1\xc1\x41\x5c\x24\x63\x10\xab\x9f\x57\xe5\xd8\x38\x96\x7d\xb9\xf5\x17\xa6\x5d\x6e\xf6\x90\x64\xd1\x58\xa6\x39\x13\x63\x1f\x04\x19\x72\xf0\x15\xd1\x26\xbe\x4d\xbe\x97\x18\x46\x23\xf3\x7b\xac\xf3\xa2\xcb\x26\x40\xbe\xb9\x9d\xef\x79\x0f\x6b\xf6\xfc\x88\x70\xb3\xfe\x7d\x8b\xdb\xff\xbb\xed\xbb\xad\x75\xa4\x48\x12\xe3\x38\x0d\xa3\xcf\xa0\x45\xb2\xa6\xdb\xf8\xb0\x58\x74\x84\x96\x3e\x49\xcd\x2f\xce\x42\x66\x4d\xf5\xf8\x09\x21\x94\x7a\xee\xa0\xab\xdb\x7f\x3f\xb2\x52\x8d\x86\x6f\x11\x98\xe5\xd6\x54\x45\x0e\xba\x6c\x36\xc3\x3d\x6c\x18\xa0\x91\x66\x76\xde\x96\xc2\xc2\x8f\xca\x76\xa6\x44\x91\x21\xe3\xcc\x32\x58\x1a\x80\x04\x41\xb5\x00\x23\xef\x8b\xe7\xbb\x83\x7e\xf5\xd5\x55\x5e\xd1\xba\x7b\xec\xf6\x4a\xe5\x4a\xb3\x19\xe3\x30\x86\xc0\x41\x15\xa1\xee\x03\xbd\x78\x5d\x56\x98\x17\x17\x62\x2d\xa5\xad\x04\x87\x04\x7f\x0b\x3e\x5f\x1a\xa3\x6a\xcd\xcc\x57\x01\x5a\x2d\xdb\xcb\xcc\x6e\x12\x07\xc2\xb8\x92\x33\x3a\x2f\x3e\x34\xfa\x93\x69\x63\x3f\x33\x3b\xf9\x20\x8d\xed\x15\xf0\x9d\xa4\x77\xdf\xa5\x9e\x56\x86\x4c\x1e\xa8\x76\xef\x2a\x65\x87\xe1\xdd\x82\x0e\x99\x48\xbe\x7b\xbd\xd7\x84\x82\x0b\x9a\xc9\xc0\x03\x2a\x45\x60\x1c\x74\x9d\x1f\x42\x56\x72\xd0\x49\xb3\x72\xb2\x35\x1a\x01\xb5\x0e\xea\x49\x8f\x4e\x20\x88\xf8\x22\x24\x49\x8a\x24\x64\x00\x58\x4b\x0e\xf5\x69\x34\x04\x2d\xc0\x42\xf2\xb1\x6f\x48\xe2\x39\x6f\x3a\x60\x92\xc9\xc5\xa1\x2c\xab\x24\x0d\x6d\xa9\x24\xfd\x4e\xeb\x8e\xe9\x84\xe7\xf3\xda\x76\x0d\x6c\xb5\x5a\x5d\xe3\xed\x86\x17\x6d\x5f\xe6\x24\xfc\x5f\x00\x00\x00\xff\xff\x10\x6a\x04\x63\xfe\x2f\x00\x00")

func tmpVizier_yamlsVizierYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsVizierYaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

func tmpVizier_yamlsVizierYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsVizierYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/vizier.yaml", size: 12286, mode: os.FileMode(420), modTime: time.Unix(1570662009, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/vizier_yamls/etcd.yaml":   tmpVizier_yamlsEtcdYaml,
	"tmp/vizier_yamls/nats.yaml":   tmpVizier_yamlsNatsYaml,
	"tmp/vizier_yamls/vizier.yaml": tmpVizier_yamlsVizierYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"vizier_yamls": &bintree{nil, map[string]*bintree{
			"etcd.yaml":   &bintree{tmpVizier_yamlsEtcdYaml, map[string]*bintree{}},
			"nats.yaml":   &bintree{tmpVizier_yamlsNatsYaml, map[string]*bintree{}},
			"vizier.yaml": &bintree{tmpVizier_yamlsVizierYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
