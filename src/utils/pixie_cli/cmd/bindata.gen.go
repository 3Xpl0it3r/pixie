// Package cmd Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../../../../../../../../../../tmp/vizier_yamls/etcd.yaml
// ../../../../../../../../../../tmp/vizier_yamls/nats.yaml
// ../../../../../../../../../../tmp/vizier_yamls/vizier.yaml
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpVizier_yamlsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x08\xbd\x14\x18\x60\xb7\x69\x77\xd8\x74\xcb\xd2\x6c\x18\xd0\x36\x41\x93\x0d\xd8\x29\xa0\x65\xa6\xd5\xaa\xaf\x49\xb4\xb1\xf6\xd7\x0f\x8a\x1c\xe7\xc3\x49\x57\xac\xd3\xc9\x22\x1e\xf9\xa8\xc7\x67\x82\x93\xdf\xd1\x07\x69\x0d\x67\xbe\x04\x51\x40\x4d\x0f\xd6\xcb\x67\x20\x69\x4d\xf1\xf8\x21\x14\xd2\x9e\x35\x83\x12\x09\x06\xd9\xa3\x34\x15\x67\x23\x55\x07\x42\x7f\x67\x15\x66\x1a\x09\x2a\x20\xe0\x19\x63\x0a\x4a\x54\x21\x7e\x31\x06\xce\x71\xe6\x54\xae\xad\x91\x64\xbd\x34\xf7\x19\x63\x06\x34\x72\x86\x24\xaa\xdc\x3a\xf4\x40\xd6\x67\xbe\x56\x18\x78\x96\x33\x70\xf2\x8b\xb7\xb5\x5b\x15\xc8\x57\xa8\x22\x56\x2e\x21\x60\x21\xac\x47\x1b\x0a\x61\x75\xc6\x98\xc7\x60\x6b\x2f\x70\x0b\x29\x52\x4b\xa1\x0b\x94\x20\x1e\x6b\xb7\xb9\x7b\x0c\x64\x3d\xc6\x40\x83\xbe\x6c\x53\x4f\xdf\x9d\xf6\x99\xc1\x49\xfc\x4d\x68\xa2\x28\xa1\x55\xa0\xcf\x2a\xea\x40\x56\xaf\x83\x15\x2e\xa5\x91\x51\xb2\xd7\x30\x9c\x9c\xf4\xeb\x39\x5b\xa5\x6e\x03\xfa\x46\x0a\x6c\x5b\x37\x95\xb3\xd2\x50\xba\xb9\x38\xa9\x40\x68\xa8\xb1\xaa\xd6\x28\x14\x48\xdd\x02\x1b\x4c\xa8\xbf\xbf\x6e\xa5\xca\x1e\x7b\x85\x4e\xd9\x27\xfd\xca\x1a\x87\xfa\x0f\x28\x3c\xee\x67\xdf\x23\x65\x79\x9e\x67\x6f\x74\xd9\x27\x69\xaa\xe8\xa0\xb7\x9b\xcd\x2a\xbc\xc3\x65\xcc\x5a\x3f\xe9\x85\x86\x32\xc6\xfa\x86\x3f\x5c\x38\xd4\xe5\x4f\x14\xb4\x32\x72\xca\x99\xa5\x31\x0e\x85\xb0\xb5\xa1\x2e\xad\xc2\x25\xd4\x6a\x7d\x0f\x0e\x04\xc6\xd6\x7b\x2a\x6d\x1c\xb8\x27\xcb\x55\x37\xa9\xb7\xcb\xb1\xdf\x44\x70\x28\xf8\x6a\xb4\x4e\x49\x01\x81\xb3\x41\xc6\x58\x40\x85\x82\xac\x4f\xc5\x35\x90\x78\xb8\xde\x62\x3b\xc2\x47\xa8\x9d\x02\xc2\x36\x6b\xab\xd5\x78\xd4\x4e\x81\x23\x25\xd2\x39\xdc\x38\x63\xeb\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2b\x99\x33\x61\xb5\x06\x53\x6d\x38\xf2\x03\x45\xe2\x41\xd3\x6c\x83\x12\xdf\xcd\x8f\xc5\x74\x72\xb5\xb8\x1d\xde\x8c\x67\xd3\xe1\x68\xdc\x01\x18\x6b\x40\xd5\xf8\xd9\x5b\xcd\xb7\x82\x8c\x2d\x25\xaa\xaa\x35\x57\x2f\x3e\x05\x7a\xe0\x9d\x0a\x45\x27\xfb\x4b\xbc\xff\x9f\xb2\x83\x49\x0d\xf7\xc8\xd9\xaf\x1a\x9e\xe2\x8f\x97\xb6\xeb\xd9\x8e\x3c\xbc\x39\x2f\x3e\x16\xef\x5f\x1c\x43\xcf\xb4\x47\x76\x76\x6b\xe1\x8b\xd6\xc2\x63\x12\x55\xfb\x4b\xfd\x8b\x87\x9d\xca\x23\xd1\x51\xf7\xce\xaf\x67\xa9\x46\x20\x20\xd9\x79\x44\xa3\x2e\xd1\x6f\xa4\x72\x88\x7e\xb6\x5a\x5a\xed\xb3\x62\x20\x27\x15\x72\x81\x7e\xb5\xc8\xd2\x89\xfb\x78\x0f\x99\x42\x3d\xec\x5a\x97\x1d\xac\x50\x12\x0d\xed\x60\x9d\x6d\x5d\x19\x01\xe3\xb5\xfb\xd6\x0e\x18\xcf\x47\x57\x8b\xe1\xb7\xf9\x64\x31\x9a\xdc\x4c\x87\xa3\xf9\xd7\xc9\xed\xe2\x6e\x3c\x1f\xdf\xc6\xaf\x6c\xcb\x10\x9c\x9d\x0c\xce\xe3\x2a\x0e\xf2\x19\x39\xbb\x4c\xbb\x37\x8d\xe2\xb2\xb8\x28\x06\x97\xd9\x9f\x00\x00\x00\xff\xff\x38\x53\xf1\xa2\xdf\x07\x00\x00")

func tmpVizier_yamlsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsEtcdYaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

func tmpVizier_yamlsEtcdYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/etcd.yaml", size: 2015, mode: os.FileMode(436), modTime: time.Unix(1569894351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmpVizier_yamlsNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsNatsYaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

func tmpVizier_yamlsNatsYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/nats.yaml", size: 2954, mode: os.FileMode(436), modTime: time.Unix(1569894352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsVizierYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xdf\x73\xda\x38\x10\xc7\xdf\xf9\x2b\x34\x79\xe9\xcc\xcd\x88\x24\x4d\x7a\xd3\x7a\xe6\x1e\x28\xa1\x29\x57\x42\x3d\x98\xb6\xd3\x27\x8f\x90\x17\xa3\x46\x96\x54\x49\xa6\xa5\x7f\xfd\x8d\x7f\x62\xf3\x3b\x10\xd2\xbb\x1c\x7e\xc2\xb2\xb4\x5a\x7d\xb5\xfb\xf1\x62\x9b\x28\xf6\x19\xb4\x61\x52\x38\x48\x8f\x08\x6d\x92\xd8\x4e\xa4\x66\xbf\x88\x65\x52\x34\xef\x5f\x9b\x26\x93\xe7\xd3\xcb\x11\x58\x72\xd9\xb8\x67\x22\x70\x50\x9b\xc7\xc6\x82\x1e\x48\x0e\x8d\x08\x2c\x09\x88\x25\x4e\x03\x21\x4e\x46\xc0\x4d\xf2\x0b\x21\xa2\x94\x83\x14\xc7\x91\x14\xcc\x4a\xcd\x44\xd8\x40\x48\x90\x08\x1c\x34\x65\xbf\x18\x68\x4c\x41\xdb\x28\xd4\x0d\x1d\x73\x30\x4e\x03\x23\xa2\xd8\xad\x96\xb1\x4a\x2d\x60\x74\x76\xd6\x40\x48\x83\x91\xb1\xa6\x90\xb7\x29\x19\x98\xf4\x87\x01\xaa\xc1\x26\xbf\xa7\xa0\x47\xf9\xd5\x17\x7f\xbc\x68\x60\x8c\x1b\x07\xae\xe9\x2d\x13\x41\xe2\xef\x23\x2c\x4d\x72\x18\xc0\x38\x19\x56\x2c\x6e\x83\x47\x0d\x84\x96\xf5\x5d\x63\xd9\xc4\xa3\x6f\x40\x6d\xaa\x5b\x36\xc8\x03\x3d\x65\x14\x5a\x94\xca\x58\xd8\x72\x5c\x00\x63\x12\xf3\xe2\xdc\x28\x42\x21\x71\x7e\x49\xa7\x69\x21\x44\x6e\xe7\x80\xd5\x13\xc5\xb0\xc9\xad\x2c\x4e\x6b\x14\xd0\xc4\x8e\x92\xda\xe6\xbb\x96\x8d\xb5\x54\xe1\x89\xb5\xea\x65\x3a\x49\x72\xd9\x41\xaf\x2e\x5e\x5e\x5c\x64\xe7\x5a\x5a\x49\x25\x77\xd0\xb0\xed\xa6\x2d\x96\xe8\x10\xac\x5b\xeb\x67\x80\x03\xb5\x52\x6f\x70\x74\xd9\xd5\x06\x42\x76\xa6\xa0\x54\xbd\xeb\x1e\x53\x9b\x62\xff\x0e\xd4\xe5\xcd\x8e\xba\xbc\xd9\x53\x97\xb9\x9b\x4f\xa8\x4d\x31\xf2\x50\x71\xae\x77\x14\xe7\x7a\x4f\x71\x2a\x7e\x1e\xa4\x0e\x11\x42\xda\x14\x00\xb9\x44\x94\xcb\x38\x68\x86\x52\x86\x1c\x9a\x54\x46\xe7\x5c\x92\x00\x8f\x08\x27\x82\x82\xc6\xd9\x64\x4c\x58\xd0\x82\xf0\x07\xcb\xab\xb4\xfc\x39\xdb\x3f\x31\x4d\x45\xe3\xeb\xeb\xab\x5d\x14\x7e\x75\xb1\xa7\xc2\xa9\xab\xa5\xbc\x3d\x49\x82\xb7\xb9\x08\xc7\x8c\xbf\xef\x31\xe8\x19\x1e\x69\x79\x0f\x07\x27\xe8\xd5\x8e\x31\x78\xb5\xa7\x42\x0b\xbe\x6e\x8b\x43\xf8\x69\x41\x24\x3f\xcd\xc2\x6d\xef\x06\x14\x97\xb3\x08\x84\x3d\x0c\xf8\x6b\xf5\xd2\xa0\x38\xa3\xc4\x38\xe8\x72\x69\xa1\x11\xb1\x74\xd2\xab\x4c\xb5\x76\xed\xab\xb1\x0d\x91\xe2\xc4\x42\x6e\xac\xe2\x7e\x72\xf0\x9a\xdd\x0d\x96\x57\xda\x46\xa8\x58\x40\x9a\x98\x52\x58\xc2\x04\xe8\xd2\x1e\x46\x20\xa6\x73\xe3\x45\x30\xb8\x3d\xff\xef\x2f\x43\xdf\xeb\xde\xf6\xbb\xfd\x5b\xff\x43\xe7\x6b\xd9\x05\xa1\x29\xe1\x31\xbc\xd3\x32\x72\x2a\x8d\x28\x2f\x65\x3e\xc0\x2c\xaf\x14\xaa\xc7\x3d\xcc\x1c\xf4\xed\x87\xc5\x86\x85\x82\x89\x10\xdf\xc3\x6c\xa1\x4b\x36\xb1\xe2\x98\x66\xbb\x8f\xe7\xa5\xd1\x92\x6f\x5e\x67\xf0\xb9\x33\xf0\x87\x3d\xcf\x6f\x77\x06\xc3\x45\xdf\x1c\x74\x9e\x80\xdf\x9c\x27\x90\x00\xdd\xa4\xda\x6e\xb1\xb2\x62\x81\x8b\x46\xaa\x1e\x57\x8c\xb4\x7b\xdd\x4e\x7f\xb8\xdd\x15\xca\x19\x08\xbb\xce\x95\x8a\x95\x4d\xae\xe4\x46\xd6\xb8\x92\xfa\xd0\xda\xe2\x06\xa9\xb9\xc0\x22\x12\x82\x83\x42\xaa\x93\x4a\x52\x71\x1c\xc0\x14\x33\x31\xd6\xe4\x3c\x0b\xa3\x73\xa2\x98\x9f\x29\xe0\x67\x9d\x93\x48\x35\x76\x6d\xcc\xe1\xac\x73\x79\xbd\xe4\x4c\xe1\x6e\x19\x83\xee\x42\x6d\x94\x1d\x13\x69\xec\xaa\x2b\x53\xc9\xe3\x08\xee\x92\x9a\xb0\x66\x2e\x4a\x5a\x5c\x62\x27\xc5\x12\x1b\x8b\x21\x55\x6d\x4d\x97\xe0\xc6\x9c\x7b\x59\x70\xcd\xd3\xa0\x0c\xbf\xb4\x4b\x1e\x7c\x8d\xea\xdc\x4b\x9d\xeb\xd3\x65\x23\xaa\x81\x9f\xb5\xf4\xd3\xbe\xf9\xed\x0a\x5b\x6e\x70\x36\xee\x69\xd1\xb6\xad\x5e\x3b\x0a\xde\x2a\xd5\xd7\x51\x10\x37\xb7\x7f\xc2\xdc\x09\x73\x1b\x30\x57\x19\x7d\xd3\xf5\x5a\x6f\x7b\x1d\xff\x76\xe0\xb6\xfd\xd6\xa7\xe1\xfb\x65\x1b\x67\x56\xc7\x70\xb6\x6a\x70\xbf\x75\xd7\xf1\xdc\x56\xbb\xb3\x3d\x4c\xc6\x0c\x78\xb0\x22\x44\xd2\xf6\x8c\x57\x45\x1a\x34\xcb\x94\x7c\x00\x97\xf3\xd8\xdf\x9d\xcd\xd5\x64\x41\x3b\x81\xf9\xcd\x09\xbf\x8f\x86\xdf\xe4\x1f\x11\xa6\x52\x88\x94\xab\x4f\x8c\xe1\xa5\xc9\x8f\x84\xe3\xa5\x79\x9e\x27\x96\xdb\xbd\x4f\xde\xb0\x33\xf0\xbb\x37\x8f\xe0\x56\x31\x1f\x0b\x4e\x37\x8a\xdf\x7f\xa3\x00\x31\xad\xef\x61\x8a\xc5\x31\x0b\xef\x88\x5a\xda\xc1\xca\x0e\xe5\x81\x3f\x66\xe1\x43\x10\x9e\x0c\xf3\xcb\x7c\x79\x00\xca\xeb\x89\xf6\xf0\x92\xfb\xf5\xda\x92\xfb\xf5\x89\xf9\x8f\xc5\xfc\xad\x8f\x01\x8f\x02\xfb\xea\x43\xbd\xa3\x50\xbe\x32\xc1\xf3\xc4\xfb\x09\xa6\xff\x86\xaa\x7b\x3b\x3e\x8b\x40\xdc\x9d\x9b\xb5\xd0\x45\x27\xc2\x1d\x4a\xb8\xe2\xf1\xf6\x13\xe2\xad\x7c\xa2\x7e\x14\xb6\x15\xd6\x9f\x27\xd8\xb6\x62\xc4\x72\xb3\x2e\x81\xb7\xc1\x23\x19\x5a\xf5\x6e\x7b\xfa\xa6\x5a\xef\x9e\xbb\xf3\xb7\x3e\x0f\xa9\x74\xf2\x37\x37\xd9\xa1\x81\x04\x4c\x80\x31\xae\x96\x23\xa8\x8a\x3d\xb1\x56\xdd\xd6\xf3\x0c\x21\x95\xe5\xff\x04\x08\xb7\x93\x5f\xf5\x4b\x2b\xac\xa7\x9b\x49\x27\x90\xf8\xfc\x7e\x38\x74\xbd\xe7\x42\x99\x4c\xf9\xdf\xc5\x98\x9d\x5e\x66\x1d\x05\x35\x8b\xaf\xa6\x8e\x42\x9c\x85\x49\x9e\x27\x78\x4e\x15\xd5\x7f\xa3\xa2\x4a\x83\xd1\xcf\x82\x71\x77\x32\x2f\x85\x30\xda\xe9\x3f\xe8\xd5\xff\xe9\x9f\x26\x51\x2a\xa1\x63\x01\x46\x02\x91\x14\x1e\xec\xc5\x45\x12\x82\x58\xfe\x0c\xaa\xc0\xc6\xa1\xec\x2b\xac\x3f\x32\xed\x0a\xb3\xdb\xf9\x46\x74\x58\x0b\x01\x8c\x8d\x65\x9a\x33\x11\xfa\x20\xc8\x88\x83\xaf\x88\x36\xc9\x69\xfa\x49\xc2\x28\x1e\x9b\xbf\x92\x38\x2f\x87\xac\x03\xe4\xb3\xcb\x7c\xcf\xeb\xad\xc8\xf9\x31\xe1\x66\xf5\xcb\x0b\x77\xf0\xb1\xed\xbb\xad\x55\xa4\x38\x9f\x48\x63\x93\x8a\x8c\x3e\x80\x16\xe9\x9e\x6e\xe2\xc3\x7c\xd3\x11\x5a\xf8\x02\xb2\x38\x38\x8b\x98\x35\xf5\xdb\x4f\x04\x91\xd4\x33\x07\xbd\x7c\xf5\xe7\x1d\xab\x5c\xd1\xf0\x3d\x06\xb3\xd8\x9b\xaa\xd8\x41\x97\x17\x17\xd1\x0e\x36\x0c\xd0\x58\x33\x3b\x6b\x4b\x61\xe1\x67\x2d\x9d\x29\x51\x64\xc4\x38\xb3\x0c\x16\x26\x20\x41\x50\x6f\xc0\xc8\xfb\xea\xf9\xee\x70\x50\x7f\x0f\x54\x5c\x68\xdd\xdc\x75\xfb\x95\x76\xa5\xd9\x94\x71\x08\x21\x70\x50\x2d\x50\x77\x81\x5e\xb2\x2f\x4b\xcc\x4b\x1a\xb1\x96\xd2\xd6\xc4\x21\xc1\x47\xc1\x67\x0b\x73\xd4\xad\x99\xd9\x32\x40\xeb\x6d\x3b\x99\xd9\x4e\xe2\x40\x18\x57\x72\x46\x67\xe5\xb7\x3c\xef\x98\x36\xf6\x0b\xb3\x93\xf7\xd2\xd8\x7e\x09\xdf\x49\x76\xf6\x43\xea\xfb\xda\x94\xe9\x23\xc9\xee\x4d\xad\x6d\x3f\xbc\x5b\xd0\x11\x13\xe9\xd7\x69\xb7\x9a\x50\x70\x41\x33\x19\x78\x40\xa5\x08\x8c\x83\xae\x8a\x9b\x90\x95\x1c\x74\xf5\x23\xb6\xb4\xd8\x1a\x8f\x81\x5a\x07\xf5\xa5\x47\x27\x10\xc4\x7c\x2e\x49\x5a\x22\x09\x19\x00\xd6\x92\x43\xf3\x3e\x1e\x81\x16\x60\x21\xfd\x24\x37\x22\xc9\x9a\xd7\xdd\x60\xd2\xc5\x25\x52\x56\xa3\x24\x93\xb6\xd2\x92\x7d\x0a\x75\xc3\x74\xca\xf3\x59\x63\x73\x0c\x6c\xb4\x5a\xdf\xe3\xcd\x86\xe7\x7d\x1f\xe7\x4e\xf8\x4f\x00\x00\x00\xff\xff\xa5\x44\x20\x43\x98\x2d\x00\x00")

func tmpVizier_yamlsVizierYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsVizierYaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

func tmpVizier_yamlsVizierYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsVizierYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/vizier.yaml", size: 11672, mode: os.FileMode(436), modTime: time.Unix(1569894351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/vizier_yamls/etcd.yaml":   tmpVizier_yamlsEtcdYaml,
	"tmp/vizier_yamls/nats.yaml":   tmpVizier_yamlsNatsYaml,
	"tmp/vizier_yamls/vizier.yaml": tmpVizier_yamlsVizierYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"vizier_yamls": &bintree{nil, map[string]*bintree{
			"etcd.yaml":   &bintree{tmpVizier_yamlsEtcdYaml, map[string]*bintree{}},
			"nats.yaml":   &bintree{tmpVizier_yamlsNatsYaml, map[string]*bintree{}},
			"vizier.yaml": &bintree{tmpVizier_yamlsVizierYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
