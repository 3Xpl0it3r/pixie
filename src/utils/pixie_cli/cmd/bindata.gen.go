package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _tmp_vizier_yamls_etcd_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x08\xbd\x14\x18\x60\xb7\x69\x77\xd8\x74\xcb\xd2\x6c\x18\xd0\x36\x41\x93\x0d\xd8\x29\xa0\x65\xa6\xd5\xaa\xaf\x49\xb4\xb1\xf6\xd7\x0f\x8a\x1c\xe7\xc3\x49\x57\xac\xd3\xc9\x22\x1e\xf9\xa8\xc7\x67\x82\x93\xdf\xd1\x07\x69\x0d\x67\xbe\x04\x51\x40\x4d\x0f\xd6\xcb\x67\x20\x69\x4d\xf1\xf8\x21\x14\xd2\x9e\x35\x83\x12\x09\x06\xd9\xa3\x34\x15\x67\x23\x55\x07\x42\x7f\x67\x15\x66\x1a\x09\x2a\x20\xe0\x19\x63\x0a\x4a\x54\x21\x7e\x31\x06\xce\x71\xe6\x54\xae\xad\x91\x64\xbd\x34\xf7\x19\x63\x06\x34\x72\x86\x24\xaa\xdc\x3a\xf4\x40\xd6\x67\xbe\x56\x18\x78\x96\x33\x70\xf2\x8b\xb7\xb5\x5b\x15\xc8\x57\xa8\x22\x56\x2e\x21\x60\x21\xac\x47\x1b\x0a\x61\x75\xc6\x98\xc7\x60\x6b\x2f\x70\x0b\x29\x52\x4b\xa1\x0b\x94\x20\x1e\x6b\xb7\xb9\x7b\x0c\x64\x3d\xc6\x40\x83\xbe\x6c\x53\x4f\xdf\x9d\xf6\x99\xc1\x49\xfc\x4d\x68\xa2\x28\xa1\x55\xa0\xcf\x2a\xea\x40\x56\xaf\x83\x15\x2e\xa5\x91\x51\xb2\xd7\x30\x9c\x9c\xf4\xeb\x39\x5b\xa5\x6e\x03\xfa\x46\x0a\x6c\x5b\x37\x95\xb3\xd2\x50\xba\xb9\x38\xa9\x40\x68\xa8\xb1\xaa\xd6\x28\x14\x48\xdd\x02\x1b\x4c\xa8\xbf\xbf\x6e\xa5\xca\x1e\x7b\x85\x4e\xd9\x27\xfd\xca\x1a\x87\xfa\x0f\x28\x3c\xee\x67\xdf\x23\x65\x79\x9e\x67\x6f\x74\xd9\x27\x69\xaa\xe8\xa0\xb7\x9b\xcd\x2a\xbc\xc3\x65\xcc\x5a\x3f\xe9\x85\x86\x32\xc6\xfa\x86\x3f\x5c\x38\xd4\xe5\x4f\x14\xb4\x32\x72\xca\x99\xa5\x31\x0e\x85\xb0\xb5\xa1\x2e\xad\xc2\x25\xd4\x6a\x7d\x0f\x0e\x04\xc6\xd6\x7b\x2a\x6d\x1c\xb8\x27\xcb\x55\x37\xa9\xb7\xcb\xb1\xdf\x44\x70\x28\xf8\x6a\xb4\x4e\x49\x01\x81\xb3\x41\xc6\x58\x40\x85\x82\xac\x4f\xc5\x35\x90\x78\xb8\xde\x62\x3b\xc2\x47\xa8\x9d\x02\xc2\x36\x6b\xab\xd5\x78\xd4\x4e\x81\x23\x25\xd2\x39\xdc\x38\x63\xeb\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2b\x99\x33\x61\xb5\x06\x53\x6d\x38\xf2\x03\x45\xe2\x41\xd3\x6c\x83\x12\xdf\xcd\x8f\xc5\x74\x72\xb5\xb8\x1d\xde\x8c\x67\xd3\xe1\x68\xdc\x01\x18\x6b\x40\xd5\xf8\xd9\x5b\xcd\xb7\x82\x8c\x2d\x25\xaa\xaa\x35\x57\x2f\x3e\x05\x7a\xe0\x9d\x0a\x45\x27\xfb\x4b\xbc\xff\x9f\xb2\x83\x49\x0d\xf7\xc8\xd9\xaf\x1a\x9e\xe2\x8f\x97\xb6\xeb\xd9\x8e\x3c\xbc\x39\x2f\x3e\x16\xef\x5f\x1c\x43\xcf\xb4\x47\x76\x76\x6b\xe1\x8b\xd6\xc2\x63\x12\x55\xfb\x4b\xfd\x8b\x87\x9d\xca\x23\xd1\x51\xf7\xce\xaf\x67\xa9\x46\x20\x20\xd9\x79\x44\xa3\x2e\xd1\x6f\xa4\x72\x88\x7e\xb6\x5a\x5a\xed\xb3\x62\x20\x27\x15\x72\x81\x7e\xb5\xc8\xd2\x89\xfb\x78\x0f\x99\x42\x3d\xec\x5a\x97\x1d\xac\x50\x12\x0d\xed\x60\x9d\x6d\x5d\x19\x01\xe3\xb5\xfb\xd6\x0e\x18\xcf\x47\x57\x8b\xe1\xb7\xf9\x64\x31\x9a\xdc\x4c\x87\xa3\xf9\xd7\xc9\xed\xe2\x6e\x3c\x1f\xdf\xc6\xaf\x6c\xcb\x10\x9c\x9d\x0c\xce\xe3\x2a\x0e\xf2\x19\x39\xbb\x4c\xbb\x37\x8d\xe2\xb2\xb8\x28\x06\x97\xd9\x9f\x00\x00\x00\xff\xff\x38\x53\xf1\xa2\xdf\x07\x00\x00")

func tmp_vizier_yamls_etcd_yaml() ([]byte, error) {
	return bindata_read(
		_tmp_vizier_yamls_etcd_yaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

var _tmp_vizier_yamls_nats_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmp_vizier_yamls_nats_yaml() ([]byte, error) {
	return bindata_read(
		_tmp_vizier_yamls_nats_yaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

var _tmp_vizier_yamls_vizier_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x4d\x6f\xdb\x38\x13\xc7\xef\xfe\x14\x44\x2e\x05\x1e\x40\x4e\xd2\xa4\x0f\x5a\x01\x7b\x70\x1d\x37\xf5\xd6\x71\x05\xcb\x6d\xd1\x93\x40\x53\x63\x99\x0d\x45\xb2\x24\xe5\xd6\xfd\xf4\x0b\xbd\x5a\xf2\xab\xfc\x96\x76\xb3\xd6\xc9\xa2\xc8\xe1\xf0\xcf\x99\x9f\xc6\x92\xb0\xa4\x9f\x41\x69\x2a\xb8\x8d\xd4\x08\x93\x26\x8e\xcc\x44\x28\xfa\x0b\x1b\x2a\x78\xf3\xf1\xb5\x6e\x52\x71\x39\xbd\x1e\x81\xc1\xd7\x8d\x47\xca\x7d\x1b\xb5\x59\xa4\x0d\xa8\x81\x60\xd0\x08\xc1\x60\x1f\x1b\x6c\x37\x10\x62\x78\x04\x4c\xc7\xbf\x10\xc2\x52\xda\x48\x32\x2b\x14\x9c\x1a\xa1\x28\x0f\x1a\x08\x71\x1c\x82\x8d\xa6\xf4\x17\x05\x65\x11\x50\x26\x0c\x54\x43\x45\x0c\xb4\xdd\xb0\x10\x96\xf4\x5e\x89\x48\x26\x16\x2c\x74\x71\xd1\x40\x48\x81\x16\x91\x22\x90\xb5\x49\xe1\xeb\xe4\x87\x06\xa2\xc0\xc4\xbf\xa7\xa0\x46\xd9\xd5\x17\xff\x7b\xd1\xb0\x2c\xab\xf1\xfb\xd6\x94\x8f\xdc\x77\x51\x6a\x4a\x09\xa4\x27\xc0\x7d\x29\x28\x3f\xd1\x1a\xdf\x52\xee\xc7\xfe\x1f\x61\xfb\x04\x83\x01\x8c\xe3\x61\xf9\x5a\x37\x78\xd4\x40\x68\x59\xef\x35\x96\x75\x34\xfa\x06\xc4\x24\x32\xa6\x83\xdc\x54\xa0\x16\x21\x22\xe2\xa6\x18\xe7\xc3\x18\x47\x2c\x3f\xd7\x12\x13\x88\x9d\xff\x33\x74\x9a\x87\xc4\xd1\x85\x2a\x4c\x1f\x5d\xa9\x69\x2e\x45\x66\xe7\x80\xf5\x63\x49\xad\x2c\xb0\x97\xa6\xd5\x12\x48\x6c\x47\x0a\x65\xb2\xf8\x4e\xc7\x1a\x22\xad\x89\x31\xf2\x65\x32\x49\x7c\xd9\x46\xaf\xae\x5e\x5e\x5d\xa5\xe7\x4a\x18\x41\x04\xb3\xd1\xb0\xed\x24\x2d\x06\xab\x00\x8c\x53\xe9\xa7\x81\x01\x31\x42\x6d\x70\x74\xd9\xd5\x06\x42\x66\x26\xa1\x90\xbd\xeb\x9c\x52\x9b\x3c\xd2\x0f\xd4\xe5\x4d\x4d\x5d\xde\xec\xa9\xcb\xdc\xcd\x27\xd4\xa6\x08\xee\x03\xc5\xb9\xad\x29\xce\xed\x9e\xe2\x94\xfc\x3c\x48\x1d\xcc\xb9\x30\x09\x01\x32\x89\x08\x13\x91\xdf\x0c\x84\x08\x18\x34\x89\x08\x2f\x99\xc0\xbe\x35\xc2\x0c\x73\x02\xca\x4a\x27\xa3\xdc\x80\xe2\x98\xed\x2c\xaf\x54\xe2\xe7\x6c\xff\xc4\xd4\x25\x8d\x6f\x6f\x6f\xea\x28\xfc\xea\x6a\x4f\x85\x13\x57\x0b\x79\x7b\x02\xfb\x6f\x33\x11\x4e\x19\x7f\xdf\x23\x50\x33\x6b\xa4\xc4\x23\x1c\x9c\xa0\x37\x35\x63\xf0\x66\x4f\x85\x16\x7c\xdd\x16\x87\xf0\xd3\x00\x8f\x7f\xea\x85\x1b\xdf\x1d\x48\x26\x66\x21\x70\x73\x18\xf0\xd7\xea\xa5\x40\x32\x4a\xb0\xb6\xd1\xf5\xd2\x42\x43\x6c\xc8\xa4\x57\x9a\x6a\xed\xda\x57\x63\x1b\x42\xc9\xb0\x81\xcc\x58\xc9\xfd\xf8\x60\x15\xbb\x1b\x2c\xaf\xb4\x8d\x50\xbe\x80\x24\x31\x05\x37\x98\x72\x50\x85\xbd\xb8\x5a\x9b\xce\x8d\xe7\xc1\xe0\xf4\xbc\xbf\xbf\x0c\x3d\xb7\x7b\xdf\xef\xf6\xef\xbd\x0f\x9d\xaf\x45\x17\x84\xa6\x98\x45\xf0\x4e\x89\xd0\x2e\x35\xa2\xac\xb0\xfd\x00\xb3\xac\x54\x28\x1f\x8f\x30\xb3\xd1\xb7\x1f\xc6\xd2\x34\xe0\x94\x07\xd6\x23\xcc\x16\xba\xa4\x13\x4b\x66\x91\x74\xf7\xad\x79\xa1\xbc\xe4\x9b\xdb\x19\x7c\xee\x0c\xbc\x61\xcf\xf5\xda\x9d\xc1\x70\xd1\x37\x1b\x5d\xc6\xe0\xd7\x97\x31\x24\x40\x35\x89\x32\x5b\xac\xac\x58\xe0\xa2\x91\xb2\xc7\x25\x23\xed\x5e\xb7\xd3\x1f\x6e\x77\x85\x30\x0a\xdc\xac\x73\xa5\x64\x65\x93\x2b\x99\x91\x35\xae\x24\x3e\xb4\xb6\xb8\x81\x2b\x2e\xd0\x10\x07\x60\xa3\x80\xa8\xb8\x96\x94\xcc\xf2\x61\x6a\x51\x3e\x56\xf8\x32\x0d\xa3\x4b\x2c\xa9\x97\x2a\xe0\xa5\x9d\xe3\x48\xd5\x66\x6d\xcc\x59\x69\xe7\xe2\x7a\xc1\x99\xdc\xdd\x22\x06\x9d\x85\xda\x28\x3d\x26\x42\x9b\x55\x57\xa6\x82\x45\x21\x3c\xc4\x35\x61\xc5\x5c\x18\xb7\x38\xd8\x4c\xf2\x25\x36\x16\x43\xaa\xdc\x9a\x2c\xc1\x89\x18\x73\xd3\xe0\x9a\xa7\x41\x11\x7e\x49\x97\x2c\xf8\x1a\xe5\xb9\x97\x3a\x57\xa7\x4b\x47\x94\x03\x3f\x6d\xe9\x27\x7d\xb3\xdb\x95\x65\x98\xb6\xd2\x71\x4f\x8b\xb6\x6d\xf5\xda\x49\xf0\x56\xaa\xbe\x4e\x82\xb8\xb9\xfd\x33\xe6\xce\x98\xdb\x80\xb9\xd2\xe8\xbb\xae\xdb\x7a\xdb\xeb\x78\xf7\x03\xa7\xed\xb5\x3e\x0d\xdf\x2f\xdb\xb8\x30\x2a\x82\x8b\x55\x83\xfb\xad\x87\x8e\xeb\xb4\xda\x9d\xed\x61\x32\xa6\xc0\xfc\x15\x21\x92\xb4\xa7\xbc\xca\xd3\xa0\x59\xa4\xe4\x0e\x5c\xce\x62\xbf\x3e\x9b\xcb\xc9\x82\x6a\x81\xf9\xcd\x19\xbf\x47\xc3\x6f\xfc\x8f\xc8\x22\x82\xf3\x84\xab\x4f\x8c\xe1\xa5\xc9\x4f\x84\xe3\xa5\x79\x9e\x27\x96\xdb\xbd\x4f\xee\xb0\x33\xf0\xba\x77\x47\x70\x2b\x9f\x8f\xfa\xe7\x1b\xc5\xef\xbf\x51\x00\x9f\x56\xf7\x30\xc1\xe2\x98\x06\x0f\x58\x2e\xed\x60\x69\x87\xb2\xc0\x1f\xd3\x60\x17\x84\xc7\xc3\xbc\x22\x5f\x76\x40\x79\x35\xd1\x76\x2f\xb9\x5f\xaf\x2d\xb9\x5f\x9f\x99\x7f\x2c\xe6\x6f\x7d\x0c\x78\x12\xd8\x97\x1f\xea\x9d\x84\xf2\xa5\x09\x9e\x27\xde\xcf\x30\xfd\x13\xaa\xee\xed\xf8\xcc\x03\xb1\x3e\x37\x2b\xa1\x8b\xce\x84\x3b\x94\x70\xf9\xe3\xed\x27\xc4\x5b\xf1\x44\xfd\x24\x6c\xcb\xad\x3f\x4f\xb0\x6d\xc5\x88\x61\x7a\x5d\x02\x6f\x83\x47\x3c\xb4\xec\xdd\xf6\xf4\x4d\xb4\xae\x9f\xbb\xf3\xb7\x3e\xbb\x54\x3a\xd9\x9b\x9b\xf4\x50\x80\x7d\xca\x41\x6b\x47\x89\x11\x94\xc5\x9e\x18\x23\xef\xab\x79\x86\x90\x4c\xf3\x7f\x02\x98\x99\xc9\xaf\xea\xa5\x15\xd6\x93\xcd\x24\x13\x88\x7d\x7e\x3f\x1c\x3a\xee\x73\xa1\x4c\xaa\xfc\xef\x62\x4c\xad\x97\x59\x27\x41\xcd\xe2\xab\xa9\x93\x10\x67\x61\x92\xe7\x09\x9e\x73\x45\xf5\xef\xa8\xa8\x92\x60\xf4\xd2\x60\xac\x4f\xe6\xa5\x10\x46\xb5\xfe\x83\xde\xfc\x97\xfe\x69\x62\x29\x63\x3a\xe6\x60\xc4\x10\x0a\xee\xc2\x5e\x5c\xc4\x01\xf0\xe5\xcf\xa0\x72\x6c\x1c\xca\xbe\xdc\xfa\x91\x69\x97\x9b\xdd\xce\x37\xac\x82\x4a\x08\x58\x96\x36\x54\x31\xca\x03\x0f\x38\x1e\x31\xf0\x24\x56\x3a\x3e\x4d\x3e\x49\x18\x45\x63\xfd\x57\x1c\xe7\xc5\x90\x75\x80\x7c\x76\x99\xef\xba\xbd\x15\x39\x3f\xc6\x4c\xaf\x7e\x79\xe1\x0c\x3e\xb6\x3d\xa7\xb5\x8a\x14\x97\x13\xa1\x4d\x5c\x91\x91\x1d\x68\x91\xec\xe9\x26\x3e\xcc\x37\x1d\xa1\x85\x4f\x47\xf3\x83\xd1\x90\x1a\x5d\xbd\xfd\x84\x10\x0a\x35\xb3\xd1\xcb\x57\xff\x7f\xa0\xa5\x2b\x0a\xbe\x47\xa0\x17\x7b\x13\x19\xd9\xe8\xfa\xea\x2a\xac\x61\x43\x03\x89\x14\x35\xb3\xb6\xe0\x06\x7e\x56\xd2\x99\x60\x89\x47\x94\x51\x43\x61\x61\x02\xec\xfb\xd5\x06\x0b\xb9\x5f\x5d\xcf\x19\x0e\xaa\xef\x81\xf2\x0b\xad\xbb\x87\x6e\xbf\xd4\x2e\x15\x9d\x52\x06\x01\xf8\x36\xaa\x04\x6a\x1d\xe8\xc5\xfb\xb2\xc4\xbc\xb8\xd1\x52\x42\x98\x8a\x38\xd8\xff\xc8\xd9\x6c\x61\x8e\xaa\x35\x3d\x5b\x06\x68\xb5\xad\x96\x99\xed\x24\xf6\xb9\x76\x04\xa3\x64\x56\x7c\xcb\xf3\x8e\x2a\x6d\xbe\x50\x33\x79\x2f\xb4\xe9\x17\xf0\x9d\xa4\x67\x3f\x84\x7a\xac\x4c\x99\x3c\x92\xec\xde\x55\xda\xf6\xc3\xbb\x01\x15\x52\x9e\x7c\x9d\x76\xaf\x30\x01\x07\x14\x15\xbe\x0b\x44\x70\x5f\xdb\xe8\x26\xbf\x09\x19\xc1\x40\x95\x3f\x62\x4b\x8a\xad\xf1\x18\x88\xb1\x51\x5f\xb8\x64\x02\x7e\xc4\xe6\x92\x24\x25\x12\x17\x3e\x58\x4a\x30\x68\x3e\x46\x23\x50\x1c\x0c\x24\x1f\xe5\x86\x38\x5e\xf3\xba\x1b\x4c\xb2\xb8\x58\xca\x72\x94\xa4\xd2\x96\x5a\xd2\x4f\xa1\xee\xa8\x4a\x78\x3e\x6b\x6c\x8e\x81\x8d\x56\xab\x7b\xbc\xd9\xf0\xbc\xef\x71\xee\x84\xff\x04\x00\x00\xff\xff\x87\xd7\x59\x79\xa6\x2f\x00\x00")

func tmp_vizier_yamls_vizier_yaml() ([]byte, error) {
	return bindata_read(
		_tmp_vizier_yamls_vizier_yaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"tmp/vizier_yamls/etcd.yaml": tmp_vizier_yamls_etcd_yaml,
	"tmp/vizier_yamls/nats.yaml": tmp_vizier_yamls_nats_yaml,
	"tmp/vizier_yamls/vizier.yaml": tmp_vizier_yamls_vizier_yaml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"tmp": &_bintree_t{nil, map[string]*_bintree_t{
		"vizier_yamls": &_bintree_t{nil, map[string]*_bintree_t{
			"etcd.yaml": &_bintree_t{tmp_vizier_yamls_etcd_yaml, map[string]*_bintree_t{
			}},
			"nats.yaml": &_bintree_t{tmp_vizier_yamls_nats_yaml, map[string]*_bintree_t{
			}},
			"vizier.yaml": &_bintree_t{tmp_vizier_yamls_vizier_yaml, map[string]*_bintree_t{
			}},
		}},
	}},
}}
