// Code generated by go-bindata.
// sources:
// ../../../../../../../../../../tmp/vizier_yamls/etcd.yaml
// ../../../../../../../../../../tmp/vizier_yamls/nats.yaml
// ../../../../../../../../../../tmp/vizier_yamls/vizier.yaml
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpVizier_yamlsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x08\xbd\x14\x18\x60\xb7\x69\x77\xd8\x74\xcb\xd2\x6c\x18\xd0\x36\x41\x93\x0d\xd8\x29\xa0\x65\xa6\xd5\xaa\xaf\x49\xb4\xb1\xf6\xd7\x0f\x8a\x1c\xe7\xc3\x49\x57\xac\xd3\xc9\x22\x1e\xf9\xa8\xc7\x67\x82\x93\xdf\xd1\x07\x69\x0d\x67\xbe\x04\x51\x40\x4d\x0f\xd6\xcb\x67\x20\x69\x4d\xf1\xf8\x21\x14\xd2\x9e\x35\x83\x12\x09\x06\xd9\xa3\x34\x15\x67\x23\x55\x07\x42\x7f\x67\x15\x66\x1a\x09\x2a\x20\xe0\x19\x63\x0a\x4a\x54\x21\x7e\x31\x06\xce\x71\xe6\x54\xae\xad\x91\x64\xbd\x34\xf7\x19\x63\x06\x34\x72\x86\x24\xaa\xdc\x3a\xf4\x40\xd6\x67\xbe\x56\x18\x78\x96\x33\x70\xf2\x8b\xb7\xb5\x5b\x15\xc8\x57\xa8\x22\x56\x2e\x21\x60\x21\xac\x47\x1b\x0a\x61\x75\xc6\x98\xc7\x60\x6b\x2f\x70\x0b\x29\x52\x4b\xa1\x0b\x94\x20\x1e\x6b\xb7\xb9\x7b\x0c\x64\x3d\xc6\x40\x83\xbe\x6c\x53\x4f\xdf\x9d\xf6\x99\xc1\x49\xfc\x4d\x68\xa2\x28\xa1\x55\xa0\xcf\x2a\xea\x40\x56\xaf\x83\x15\x2e\xa5\x91\x51\xb2\xd7\x30\x9c\x9c\xf4\xeb\x39\x5b\xa5\x6e\x03\xfa\x46\x0a\x6c\x5b\x37\x95\xb3\xd2\x50\xba\xb9\x38\xa9\x40\x68\xa8\xb1\xaa\xd6\x28\x14\x48\xdd\x02\x1b\x4c\xa8\xbf\xbf\x6e\xa5\xca\x1e\x7b\x85\x4e\xd9\x27\xfd\xca\x1a\x87\xfa\x0f\x28\x3c\xee\x67\xdf\x23\x65\x79\x9e\x67\x6f\x74\xd9\x27\x69\xaa\xe8\xa0\xb7\x9b\xcd\x2a\xbc\xc3\x65\xcc\x5a\x3f\xe9\x85\x86\x32\xc6\xfa\x86\x3f\x5c\x38\xd4\xe5\x4f\x14\xb4\x32\x72\xca\x99\xa5\x31\x0e\x85\xb0\xb5\xa1\x2e\xad\xc2\x25\xd4\x6a\x7d\x0f\x0e\x04\xc6\xd6\x7b\x2a\x6d\x1c\xb8\x27\xcb\x55\x37\xa9\xb7\xcb\xb1\xdf\x44\x70\x28\xf8\x6a\xb4\x4e\x49\x01\x81\xb3\x41\xc6\x58\x40\x85\x82\xac\x4f\xc5\x35\x90\x78\xb8\xde\x62\x3b\xc2\x47\xa8\x9d\x02\xc2\x36\x6b\xab\xd5\x78\xd4\x4e\x81\x23\x25\xd2\x39\xdc\x38\x63\xeb\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2b\x99\x33\x61\xb5\x06\x53\x6d\x38\xf2\x03\x45\xe2\x41\xd3\x6c\x83\x12\xdf\xcd\x8f\xc5\x74\x72\xb5\xb8\x1d\xde\x8c\x67\xd3\xe1\x68\xdc\x01\x18\x6b\x40\xd5\xf8\xd9\x5b\xcd\xb7\x82\x8c\x2d\x25\xaa\xaa\x35\x57\x2f\x3e\x05\x7a\xe0\x9d\x0a\x45\x27\xfb\x4b\xbc\xff\x9f\xb2\x83\x49\x0d\xf7\xc8\xd9\xaf\x1a\x9e\xe2\x8f\x97\xb6\xeb\xd9\x8e\x3c\xbc\x39\x2f\x3e\x16\xef\x5f\x1c\x43\xcf\xb4\x47\x76\x76\x6b\xe1\x8b\xd6\xc2\x63\x12\x55\xfb\x4b\xfd\x8b\x87\x9d\xca\x23\xd1\x51\xf7\xce\xaf\x67\xa9\x46\x20\x20\xd9\x79\x44\xa3\x2e\xd1\x6f\xa4\x72\x88\x7e\xb6\x5a\x5a\xed\xb3\x62\x20\x27\x15\x72\x81\x7e\xb5\xc8\xd2\x89\xfb\x78\x0f\x99\x42\x3d\xec\x5a\x97\x1d\xac\x50\x12\x0d\xed\x60\x9d\x6d\x5d\x19\x01\xe3\xb5\xfb\xd6\x0e\x18\xcf\x47\x57\x8b\xe1\xb7\xf9\x64\x31\x9a\xdc\x4c\x87\xa3\xf9\xd7\xc9\xed\xe2\x6e\x3c\x1f\xdf\xc6\xaf\x6c\xcb\x10\x9c\x9d\x0c\xce\xe3\x2a\x0e\xf2\x19\x39\xbb\x4c\xbb\x37\x8d\xe2\xb2\xb8\x28\x06\x97\xd9\x9f\x00\x00\x00\xff\xff\x38\x53\xf1\xa2\xdf\x07\x00\x00")

func tmpVizier_yamlsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsEtcdYaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

func tmpVizier_yamlsEtcdYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/etcd.yaml", size: 2015, mode: os.FileMode(436), modTime: time.Unix(1567200748, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmpVizier_yamlsNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsNatsYaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

func tmpVizier_yamlsNatsYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/nats.yaml", size: 2954, mode: os.FileMode(436), modTime: time.Unix(1567200748, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsVizierYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x4d\x73\xda\xbe\x13\xc7\xef\xbc\x0a\x4d\xef\x86\xa4\x69\x3a\x19\xdf\x28\xd0\x94\x7f\x29\xf5\x60\xda\x4e\x4f\x1e\x21\x6f\x40\xff\xc8\x92\x2a\xad\x69\xe9\xab\xff\x8d\x6d\x0c\xb2\x79\x4e\x42\x3b\xcd\x84\x13\xe8\xe1\xab\xd5\x7a\xf7\xb3\x42\x40\x35\xff\x0a\xc6\x72\x25\x7d\x32\xbf\x6c\xdc\x73\x19\xfb\x24\x04\x33\xe7\x0c\x1a\x09\x20\x8d\x29\x52\xbf\x41\x88\xa0\x13\x10\x36\x7b\x47\x08\xd5\xda\x27\x5a\x78\x89\x92\x1c\x95\xe1\x72\xda\x20\x44\xd2\x04\x7c\x32\xe7\xbf\x39\x18\x8f\x6a\xee\xd9\xa5\x4a\xd1\x65\x35\x65\x90\xcd\x6a\x58\x0d\x2c\xd3\xd1\xca\x60\x2e\xe8\x2d\xe7\x22\xd3\xde\xd4\x68\x96\xaf\x91\xf5\xfa\xe4\xfa\xe2\xf5\xc5\x45\xf1\xd9\x28\x54\x4c\x09\x9f\x8c\x3b\x41\xde\x82\xd4\x4c\x01\x83\xca\x38\x57\xca\x80\xc5\x9a\xd4\xe5\x91\x52\xd9\x38\x0b\x02\x18\x2a\xb3\x67\xcb\x9b\x9b\x6e\x10\x82\x0b\x0d\x3e\xe9\x88\xd4\x22\x98\x7e\xd0\xf0\x3c\xaf\x71\x26\x2f\x97\x33\x1f\xe9\xe2\x37\x47\xba\xb8\x18\x77\xba\x5f\x1c\x33\x1f\xe5\x1c\x2a\xa5\x42\x8a\x5c\xc9\xa5\x87\x98\x50\x69\xdc\x9c\x2a\x35\x15\xd0\x64\x2a\x69\x09\x45\x63\x6f\x42\x05\x95\x0c\x8c\x57\x2c\xc6\x25\x82\x91\x54\x9c\xec\x5d\x6d\xd4\xaf\xc5\xc3\xa2\x78\x86\xa8\xad\xe3\xe3\x37\x6f\xae\x8e\xf1\xf0\xf5\xc5\x03\x3d\x9c\x9b\xba\x72\xef\x40\xd1\xf8\xdd\xd2\x09\xe7\x0c\xbf\x1f\x29\x98\x85\x37\x31\xea\x1e\xcc\x23\x43\xf0\xea\xc8\x10\xbc\x7a\xa0\x83\x6a\xa6\x1e\x0a\x43\xf8\x85\x20\xb3\xb7\xb6\x35\xbf\x9c\x00\xd2\xd2\x69\x5d\xd0\x42\x2d\x12\x90\xf8\x38\x38\xee\x74\x97\x01\x2d\x38\xa3\xd6\x27\x9b\x0c\x4a\x28\xb2\xd9\xc0\x59\x6a\xe7\xde\xb7\x83\x09\x12\x2d\x28\xc2\x52\xcc\x31\x3f\x7b\x89\x8a\xee\x1e\xe5\xad\xda\x84\x94\x1b\xc8\xf3\x52\x49\xa4\x5c\x82\x59\xe9\x79\x04\xe4\x7c\x2d\x5e\xc6\x42\x30\x88\xfe\xf7\x6d\x1c\x85\xfd\xdb\x61\x7f\x78\x1b\x7d\xec\x7d\x5f\x0d\x21\x64\x4e\x45\x0a\xef\x8d\x4a\x7c\xa7\x31\xf3\x09\x33\x80\x1f\x61\x31\x82\xbb\x6a\x0f\x21\xf7\xb0\xf0\xc9\xff\x7f\xa2\x67\xf9\x54\x72\x39\xf5\xee\x61\x51\x1b\x52\x2c\xac\x85\xc7\x8a\xa7\xef\x15\x7a\x76\x9b\x6d\x61\x6f\xf4\xb5\x37\x8a\xc6\x83\x30\xea\xf4\x46\xe3\xba\x6d\x3e\x69\x31\x30\x68\x5b\x19\x23\xc0\x34\x99\xc1\x03\x2a\x5b\x36\x58\x17\x71\x2d\x76\x44\x3a\x83\x7e\x6f\x38\x3e\x6c\x0a\x13\x1c\x24\xee\x32\xc5\x51\xd9\x67\xca\x52\x64\x87\x29\xb9\x0d\xed\x03\x66\xd0\x8a\x09\x3c\xa1\x53\xf0\xc9\x94\x99\x26\x57\x2d\x2d\xbc\x18\xe6\x1e\x97\x77\x86\xb6\x8a\x30\x6a\x51\xcd\xa3\xc2\x03\x51\x31\x38\x8b\x54\x8b\x3b\x63\xce\x2b\x06\xaf\xfa\x57\x98\x29\xcd\x5d\xc5\x60\x50\x3b\x48\x14\xaf\x99\xb2\xb8\xad\x67\xeb\xc4\xcb\x9d\x13\xd7\x3d\x73\x25\xd2\x04\x3e\xa9\x54\x56\xed\x48\xb2\x96\x80\xe2\xac\xf4\x4d\xa3\x1e\x8b\x6e\x6b\xbe\xf7\x20\x15\x22\x2c\xa2\x72\x9d\x3f\xab\xb8\xcd\x87\x2c\xa3\xb6\xe1\xae\xbd\x31\xb8\xba\x5c\x31\xc3\xcd\x98\xa2\x65\x98\x8f\x5d\x96\x39\x0f\x85\xf5\x8a\x79\x7f\x96\x89\x79\x29\xf7\x98\x92\x32\x07\xde\x9f\xe5\xe3\xe6\xe2\xe7\x61\xe5\xe6\x3a\xcf\x93\x9b\x9d\xc1\x97\x70\xdc\x1b\x45\xfd\xee\x13\x98\x55\xae\xc7\xe3\x17\x92\xff\x7d\x92\x57\x4c\xf8\xfc\xa5\x1b\xb5\xbb\xdd\xd1\xe6\xe4\xf9\xef\x2c\xca\xcb\xc3\x73\x53\x0b\xd6\xb4\x73\xd6\x5c\x3e\xa9\xa6\x50\x8c\x0a\xff\xfa\xf2\xad\x43\xde\xc3\x35\x22\x4f\x9f\x68\x95\x3e\xc7\xd7\x8b\x5a\xde\x9d\x5e\x3b\x6e\x76\xd6\x8e\x9b\xfd\xb5\xe3\x66\x67\xed\xb8\x79\xf2\xda\xf1\x0c\xaa\xc0\xc1\x2f\xb4\x67\xc1\xbf\xfb\xfd\xf4\x2c\xdc\x77\x16\x78\x9e\xc0\x7f\xc1\xeb\xd3\xe3\xb5\xdb\x0f\xdb\xef\x06\xbd\xe8\x76\x14\x74\xa2\xf6\x97\xf1\x87\x4d\x8d\x57\x68\x52\x78\x75\x02\x41\xcb\x40\x3c\x1e\x9d\x95\xd0\x25\x2f\xe7\xdc\xc7\x12\xae\xbc\xa9\xf9\x83\x78\x5b\x5d\x0e\x9d\x85\x6d\xa5\xfa\x3f\x08\x36\xaa\xf5\x3e\xa8\x1d\x44\x08\x0a\xbb\x2b\x79\x0f\x81\x23\x9b\xea\x5a\x76\x38\x75\x73\x3f\x1f\x9f\xb7\xeb\xcb\xcb\x53\x0e\x3a\xcb\x0b\xc8\xe2\x65\x80\xc6\x5c\x82\xb5\x81\x51\x13\x70\x1d\x3d\x43\xd4\xb7\xd5\x1c\x23\x44\x17\xb9\x3f\x03\x2a\x70\xf6\xbb\xda\xb5\x45\x3d\x7f\x90\x6c\x06\x99\xcd\x1f\xc6\xe3\x20\x7c\x2e\x84\x29\x3c\xff\xb7\xf8\x72\xd4\x9d\xec\x59\x30\x53\xbf\x62\x3d\x0b\x6d\x6a\x8b\xfc\x83\xd0\x79\x39\x4d\x3d\x9b\xd3\x54\x1e\x8c\x51\x11\x8c\xc7\x93\x79\x23\x84\xc9\x51\x5f\x41\xaf\x1c\x76\xfe\xe3\x84\x3c\x7c\x06\xa3\x5a\x67\x74\x2c\xc1\x48\x21\x51\x32\x84\x07\x71\x91\x4e\x33\xa0\xee\x22\xe1\x63\xd9\x57\xaa\x3f\x31\xed\x4a\xd9\x87\xf3\xed\xd9\x25\x6e\x18\x0e\xb6\xa4\xec\x1d\x15\xd6\xc9\x59\x67\x5e\x30\xfa\xdc\x89\x82\xf6\xb6\x44\x6f\xcd\x94\xc5\xec\x40\xc5\x4e\x48\xf6\xfc\x91\xec\x4b\xef\xf5\x33\x23\xf9\xe1\xc9\xaa\xd4\x30\xb0\x6e\x12\x08\x9e\x70\xb4\xd5\xea\x91\x40\xa2\xcc\xc2\x27\xaf\xaf\xdf\x7e\xe2\x4e\x8f\x81\x1f\x29\xd8\xfa\x68\xa6\x53\x9f\x5c\x5e\x5c\x24\x47\x68\x58\x60\xa9\xe1\xb8\xe8\x28\x89\xf0\xab\x92\x8d\x8c\x6a\x3a\xe1\x82\x23\x87\xda\x02\x34\x8e\xab\x0d\x1e\x09\xbf\x87\x51\x30\x1e\xb5\x3b\xbd\x2d\x1d\xed\xee\xa7\xfe\xd0\x69\xd7\x86\xcf\xb9\x80\x29\xc4\x3e\xc9\x78\x7a\x12\xb3\xb2\xe7\xb2\x81\xac\xac\xd1\x33\x4a\x61\xc5\x39\x34\xfe\x2c\xc5\xa2\xb6\x46\x55\xcd\x2e\x36\xf9\x57\x6d\x3b\x4a\xe6\x30\x48\x63\x69\x03\x25\x38\x5b\xac\x7e\x52\x7e\xcf\x8d\xc5\x6f\x1c\x67\x1f\x94\xc5\xe1\x8a\x9d\xb3\xe2\xd3\x4f\x65\xee\x2b\x4b\xe6\xf7\x82\xfd\x6e\xa5\xed\x61\x74\x46\x30\x09\x97\xf9\x7f\x24\x6e\x0d\x65\x10\x80\xe1\x2a\x0e\x81\x29\x19\x5b\x9f\x5c\x95\x35\x04\x95\x00\xe3\xfe\x95\x22\x67\xc9\xdd\x1d\x30\xf4\xc9\x50\x85\x6c\x06\x71\x2a\xd6\x2e\xc9\x4f\x38\x52\xc5\xe0\x19\x25\xa0\x79\x9f\x4e\xc0\x48\x40\xb0\x59\xba\x24\x34\xdb\xf3\xae\xfa\x90\x6f\x2e\x73\xa5\x1b\x25\x85\x6b\x9d\x96\xe2\x17\xf9\x2e\x37\x39\x8e\x17\x8d\xfd\x31\xb0\x57\xb5\xfa\x8c\xf7\x0b\xaf\xc7\x3e\x4d\x21\xfb\x2f\x00\x00\xff\xff\x62\xd7\x0e\xce\x4f\x25\x00\x00")

func tmpVizier_yamlsVizierYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsVizierYaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

func tmpVizier_yamlsVizierYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsVizierYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/vizier.yaml", size: 9551, mode: os.FileMode(436), modTime: time.Unix(1567200748, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/vizier_yamls/etcd.yaml": tmpVizier_yamlsEtcdYaml,
	"tmp/vizier_yamls/nats.yaml": tmpVizier_yamlsNatsYaml,
	"tmp/vizier_yamls/vizier.yaml": tmpVizier_yamlsVizierYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"vizier_yamls": &bintree{nil, map[string]*bintree{
			"etcd.yaml": &bintree{tmpVizier_yamlsEtcdYaml, map[string]*bintree{}},
			"nats.yaml": &bintree{tmpVizier_yamlsNatsYaml, map[string]*bintree{}},
			"vizier.yaml": &bintree{tmpVizier_yamlsVizierYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

