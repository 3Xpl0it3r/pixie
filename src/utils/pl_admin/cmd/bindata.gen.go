// Package cmd Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../../../../../../../../../../tmp/vizier_yamls/etcd.yaml
// ../../../../../../../../../../tmp/vizier_yamls/nats.yaml
// ../../../../../../../../../../tmp/vizier_yamls/vizier.yaml
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpVizier_yamlsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x08\xbd\x14\x18\x60\xb7\x69\x77\xd8\x74\xcb\xd2\x6c\x18\xd0\x36\x41\x93\x0d\xd8\x29\xa0\x65\xa6\xd5\xaa\xaf\x49\xb4\xb1\xf6\xd7\x0f\x8a\x1c\xe7\xc3\x49\x57\xac\xd3\xc9\x22\x1e\xf9\xa8\xc7\x67\x82\x93\xdf\xd1\x07\x69\x0d\x67\xbe\x04\x51\x40\x4d\x0f\xd6\xcb\x67\x20\x69\x4d\xf1\xf8\x21\x14\xd2\x9e\x35\x83\x12\x09\x06\xd9\xa3\x34\x15\x67\x23\x55\x07\x42\x7f\x67\x15\x66\x1a\x09\x2a\x20\xe0\x19\x63\x0a\x4a\x54\x21\x7e\x31\x06\xce\x71\xe6\x54\xae\xad\x91\x64\xbd\x34\xf7\x19\x63\x06\x34\x72\x86\x24\xaa\xdc\x3a\xf4\x40\xd6\x67\xbe\x56\x18\x78\x96\x33\x70\xf2\x8b\xb7\xb5\x5b\x15\xc8\x57\xa8\x22\x56\x2e\x21\x60\x21\xac\x47\x1b\x0a\x61\x75\xc6\x98\xc7\x60\x6b\x2f\x70\x0b\x29\x52\x4b\xa1\x0b\x94\x20\x1e\x6b\xb7\xb9\x7b\x0c\x64\x3d\xc6\x40\x83\xbe\x6c\x53\x4f\xdf\x9d\xf6\x99\xc1\x49\xfc\x4d\x68\xa2\x28\xa1\x55\xa0\xcf\x2a\xea\x40\x56\xaf\x83\x15\x2e\xa5\x91\x51\xb2\xd7\x30\x9c\x9c\xf4\xeb\x39\x5b\xa5\x6e\x03\xfa\x46\x0a\x6c\x5b\x37\x95\xb3\xd2\x50\xba\xb9\x38\xa9\x40\x68\xa8\xb1\xaa\xd6\x28\x14\x48\xdd\x02\x1b\x4c\xa8\xbf\xbf\x6e\xa5\xca\x1e\x7b\x85\x4e\xd9\x27\xfd\xca\x1a\x87\xfa\x0f\x28\x3c\xee\x67\xdf\x23\x65\x79\x9e\x67\x6f\x74\xd9\x27\x69\xaa\xe8\xa0\xb7\x9b\xcd\x2a\xbc\xc3\x65\xcc\x5a\x3f\xe9\x85\x86\x32\xc6\xfa\x86\x3f\x5c\x38\xd4\xe5\x4f\x14\xb4\x32\x72\xca\x99\xa5\x31\x0e\x85\xb0\xb5\xa1\x2e\xad\xc2\x25\xd4\x6a\x7d\x0f\x0e\x04\xc6\xd6\x7b\x2a\x6d\x1c\xb8\x27\xcb\x55\x37\xa9\xb7\xcb\xb1\xdf\x44\x70\x28\xf8\x6a\xb4\x4e\x49\x01\x81\xb3\x41\xc6\x58\x40\x85\x82\xac\x4f\xc5\x35\x90\x78\xb8\xde\x62\x3b\xc2\x47\xa8\x9d\x02\xc2\x36\x6b\xab\xd5\x78\xd4\x4e\x81\x23\x25\xd2\x39\xdc\x38\x63\xeb\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2b\x99\x33\x61\xb5\x06\x53\x6d\x38\xf2\x03\x45\xe2\x41\xd3\x6c\x83\x12\xdf\xcd\x8f\xc5\x74\x72\xb5\xb8\x1d\xde\x8c\x67\xd3\xe1\x68\xdc\x01\x18\x6b\x40\xd5\xf8\xd9\x5b\xcd\xb7\x82\x8c\x2d\x25\xaa\xaa\x35\x57\x2f\x3e\x05\x7a\xe0\x9d\x0a\x45\x27\xfb\x4b\xbc\xff\x9f\xb2\x83\x49\x0d\xf7\xc8\xd9\xaf\x1a\x9e\xe2\x8f\x97\xb6\xeb\xd9\x8e\x3c\xbc\x39\x2f\x3e\x16\xef\x5f\x1c\x43\xcf\xb4\x47\x76\x76\x6b\xe1\x8b\xd6\xc2\x63\x12\x55\xfb\x4b\xfd\x8b\x87\x9d\xca\x23\xd1\x51\xf7\xce\xaf\x67\xa9\x46\x20\x20\xd9\x79\x44\xa3\x2e\xd1\x6f\xa4\x72\x88\x7e\xb6\x5a\x5a\xed\xb3\x62\x20\x27\x15\x72\x81\x7e\xb5\xc8\xd2\x89\xfb\x78\x0f\x99\x42\x3d\xec\x5a\x97\x1d\xac\x50\x12\x0d\xed\x60\x9d\x6d\x5d\x19\x01\xe3\xb5\xfb\xd6\x0e\x18\xcf\x47\x57\x8b\xe1\xb7\xf9\x64\x31\x9a\xdc\x4c\x87\xa3\xf9\xd7\xc9\xed\xe2\x6e\x3c\x1f\xdf\xc6\xaf\x6c\xcb\x10\x9c\x9d\x0c\xce\xe3\x2a\x0e\xf2\x19\x39\xbb\x4c\xbb\x37\x8d\xe2\xb2\xb8\x28\x06\x97\xd9\x9f\x00\x00\x00\xff\xff\x38\x53\xf1\xa2\xdf\x07\x00\x00")

func tmpVizier_yamlsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsEtcdYaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

func tmpVizier_yamlsEtcdYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/etcd.yaml", size: 2015, mode: os.FileMode(436), modTime: time.Unix(1566238393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmpVizier_yamlsNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsNatsYaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

func tmpVizier_yamlsNatsYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/nats.yaml", size: 2954, mode: os.FileMode(436), modTime: time.Unix(1566238393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsVizierYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4f\x77\xda\xba\x13\xdd\xf3\x29\x74\xba\x57\x48\x9a\xf6\xb7\xf0\x2e\x25\x34\xe5\x57\x4a\x7d\x30\xaf\x3d\x5d\xf9\x08\x79\x02\x7a\x91\x25\x55\x1a\xd3\xba\x9f\xfe\x1d\xdb\x18\x64\xf3\x3f\x29\x7d\x7d\x3d\x61\x05\xa3\xd1\xd5\xe8\x6a\xe6\x7a\x84\x99\x11\x9f\xc0\x3a\xa1\x55\x40\x16\x57\x9d\x07\xa1\x92\x80\x44\x60\x17\x82\x43\x27\x05\x64\x09\x43\x16\x74\x08\x91\x6c\x0a\xd2\x15\xdf\x08\x61\xc6\x04\xc4\x48\x9a\x6a\x25\x50\x5b\xa1\x66\x1d\x42\x14\x4b\x21\x20\x0b\xf1\x43\x80\xa5\xcc\x08\xea\x96\x28\xd5\x90\x33\x8c\x43\x31\xab\xe3\x0c\xf0\x02\xc7\x68\x8b\x25\x20\x5d\xce\x45\x6e\xe8\xcc\x1a\x5e\xae\x51\x8c\x06\xe4\xf5\xe5\xcb\xcb\xcb\xea\xb7\xd5\xa8\xb9\x96\x01\x99\xf4\xc2\xd2\x82\xcc\xce\x00\xc3\x86\x9f\x0f\x65\xc1\x61\x0b\xea\xea\x48\xa8\xc2\xcf\x81\x04\x8e\xda\xee\xd9\xf2\xe6\xa6\x3b\x84\x60\x6e\x20\x20\x3d\x99\x39\x04\x3b\x08\x3b\x94\xd2\xce\x99\x58\xae\x67\x3e\x91\xe2\x57\x47\x52\x5c\xf9\x9d\xce\x8b\x17\xe6\x93\xc8\x61\x4a\x69\x64\x28\xb4\x5a\x32\xc4\xa5\xce\x92\x8b\x99\xd6\x33\x09\x17\x5c\xa7\x5d\xa9\x59\x42\xa7\x4c\x32\xc5\xc1\xd2\x6a\x31\xa1\x10\xac\x62\xf2\x64\x76\x8d\xd5\xdf\xf3\xc7\x65\xf1\x1c\xd1\x38\x8f\xe3\x57\xaf\xae\x8f\x61\xf8\xf5\xe5\x23\x19\x2e\x43\x5d\xd1\x3b\xd4\x2c\x79\xb3\x24\xe1\x9c\xe9\xf7\x35\x03\x9b\xd3\xa9\xd5\x0f\x60\x9f\x98\x82\xd7\x47\xa6\xe0\xf5\x23\x09\x6a\x85\x7a\x28\x0d\xe1\x3b\x82\x2a\xbe\xba\xee\xe2\x6a\x0a\xc8\x6a\xd2\x6e\xc1\x48\x9d\xa7\xa0\xf0\x69\xe2\xb8\x93\x2e\x0b\x46\x0a\xce\x5c\x40\x36\x35\x28\x65\xc8\xe7\x43\x6f\xa9\x9d\x7b\xdf\x2e\x4c\x90\x1a\xc9\x10\x96\x60\x5e\xf8\xc5\x47\x36\x70\xf7\x20\x6f\xc5\x26\xa4\xde\x40\x59\x97\x5a\x21\x13\x0a\xec\x0a\x8f\x12\x50\x8b\x35\x78\x9d\x0b\xe1\x30\xfe\xff\xe7\x49\x1c\x0d\xee\x46\x83\xd1\x5d\xfc\xbe\xff\x65\xe5\x42\xc8\x82\xc9\x0c\xde\x5a\x9d\x06\x9e\xb1\xe0\x84\x5b\xc0\xf7\x90\x8f\xe1\xbe\x39\x42\xc8\x03\xe4\x01\xf9\xfb\x1b\x52\x27\x66\x4a\xa8\x19\x7d\x80\xbc\xe5\x52\x2d\x6c\x24\x65\xc6\xd0\x0a\xcb\x6d\x8b\x2b\xea\x8f\x3f\xf5\xc7\xf1\x64\x18\xc5\xbd\xfe\x78\xd2\x8e\x2b\x20\x5d\x0e\x16\x5d\xb7\xd0\x07\xb0\x17\xdc\xe2\x01\x94\x2d\x9b\x6b\x83\xf8\xd1\x7a\x20\xbd\xe1\xa0\x3f\x9a\x1c\x0e\x85\x4b\x01\x0a\x77\x85\xe2\xa1\xec\x0b\x65\x09\xb2\x23\x94\x32\x86\x9b\x03\x61\xb0\x46\x08\x22\x65\x33\x08\xc8\x8c\xdb\x0b\xa1\xbb\x46\xd2\x04\x16\x54\xa8\x7b\xcb\xba\x55\x0a\x75\x99\x11\x71\xc5\x40\x5c\x39\x17\x59\xea\x70\x67\xbe\xd1\xca\x79\x35\xbe\x92\x98\x3a\xdc\x55\xfe\x85\xad\x26\xa2\xfa\xcc\xb5\xc3\x6d\x23\x5b\x27\x5e\xed\x9c\xb8\x1e\x59\x68\x99\xa5\xf0\x41\x67\xaa\x19\x47\x5a\x58\x42\x86\xf3\x9a\x9b\x4e\x3b\x0f\x7d\x6b\x85\xe2\x95\xcc\xa6\x4b\x9d\xfd\x7e\xde\x57\x96\x51\xe9\xbb\x7c\x58\x51\x94\x8e\x56\xf3\x7e\xad\xb2\x1d\x6c\x48\xce\x22\x6f\x7e\x7f\x71\x16\x8d\xf3\x16\x78\x16\xba\x67\xa1\xdb\x21\x74\xde\xec\xdb\x41\x74\xf3\x66\xd8\x8f\xef\xc6\x61\x2f\xbe\xf9\x6b\xf2\x6e\x13\xe3\x05\xda\x0c\x5e\x9c\xa0\x92\x75\x12\x1e\x2f\x95\x8d\xb4\x25\xcf\x3a\xb5\xd9\x2f\xff\x42\x91\x5a\xb5\xe8\x67\x51\xa8\x1a\xfd\xcf\x93\xa7\x83\x62\x80\xd2\xed\x2a\xc3\x43\x12\x50\x4c\xf5\x23\x3b\x5c\x84\x25\xcf\xc7\x57\xe0\xfa\x0a\x79\x4a\xbb\xb2\xbc\x06\x56\x1f\x0b\x2c\x11\x0a\x9c\x0b\xad\x9e\x82\x4f\x74\x71\xc9\xbc\x6b\xd6\x18\x21\xa6\xaa\xe2\x39\x30\x89\xf3\x1f\xcd\xa1\x2d\xe8\xe5\x41\xf2\x39\x14\x31\xbf\x9b\x4c\xc2\xe8\xf7\xd3\x8a\x8a\xc3\x7f\x4b\x29\x8e\xba\xe3\x9e\x45\x30\xda\x57\xd6\xb3\xe8\x46\x6b\x91\x3f\x4f\x3e\x9e\xbb\x9b\xff\x46\x77\x53\x26\x62\x5c\x25\xe2\xf1\xfa\xba\x91\xbe\xe4\xa8\xeb\xe0\xb5\xa7\x80\xbf\x8d\xce\x1d\xee\x89\x98\x31\x85\xc6\xd5\xf2\xc6\x20\xd5\x2a\x82\x47\xa9\x1b\x9b\x15\xb2\xb8\x4b\xcf\x9e\xaa\x60\x35\xfa\x4f\xd6\xac\x1a\xf6\xf1\x2a\xf5\xc7\x95\x60\x14\x0d\xb7\x14\xdf\x3d\x93\xce\xab\x3e\x6f\x5e\x38\xfe\xd8\x8b\xc3\x9b\x6d\x25\xdb\x9d\x6b\x87\x45\x83\xc3\x4f\x28\xdb\xf2\x48\xf6\x15\xea\xfa\xcc\x48\xd9\xcc\x38\x9d\x59\x0e\xce\x2f\x02\x29\x52\x81\xae\xf9\x0c\x48\x21\xd5\x36\x0f\xc8\xcb\xd7\xff\xfb\x20\xbc\x11\x0b\x5f\x33\x70\x6d\x6f\x6e\xb2\x80\x5c\x5d\x5e\xa6\x47\x60\x38\xe0\x99\x15\x98\xf7\xb4\x42\xf8\xde\xa8\x46\xce\x0c\x9b\x0a\x29\x50\x40\x6b\x01\x96\x24\x4d\x03\x25\xd1\x97\x28\x0e\x27\xe3\x9b\x5e\x7f\xcb\xc0\xcd\xed\x87\xc1\xc8\xb3\x1b\x2b\x16\x42\xc2\x0c\x92\x80\x14\xca\x78\x92\xfa\x14\xe7\xb2\x21\x3e\x85\x91\x5a\xad\xb1\x41\x0e\x4b\x3e\x2a\x99\xb7\xd6\x68\xa2\xb9\x7c\x53\xc9\x9a\xb6\xa3\x60\x0e\x4b\x62\xa2\x5c\xa8\xa5\xe0\xf9\xea\x8f\xf6\xb7\xc2\x3a\xfc\x2c\x70\xfe\x4e\x3b\x1c\x41\x1d\xfa\xbc\xfa\xf5\x4d\xdb\x87\xc6\x92\xe5\xbf\x6d\x83\xdb\x86\x0d\xc1\xa6\x42\x95\xef\x80\xee\x2c\xe3\x10\x82\x15\x3a\x89\x80\x6b\x95\xb8\x80\x5c\xd7\xba\x8e\x5a\x82\xf5\x5f\x15\x95\xaa\x70\x7f\x0f\x1c\x03\x32\xd2\x11\x9f\x43\x92\xc9\xf5\xe6\xca\x8e\x43\xe9\x04\xa8\xd5\x12\x2e\x1e\xb2\x29\x58\x05\x08\xae\x48\xfc\x94\x15\xd1\xef\x52\xfa\x32\xcc\x82\x14\xff\xbc\x2b\x92\x3c\x4b\xf5\xc6\xe1\x56\xd8\x52\x58\xf3\xce\xfe\xd3\xdc\x8b\xda\x3c\xad\xfd\xc0\x6b\xdf\x9f\xf3\x48\xfa\x27\x00\x00\xff\xff\x49\x60\x37\x3b\x2f\x1e\x00\x00")

func tmpVizier_yamlsVizierYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsVizierYaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

func tmpVizier_yamlsVizierYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsVizierYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/vizier.yaml", size: 7727, mode: os.FileMode(436), modTime: time.Unix(1566238393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/vizier_yamls/etcd.yaml":   tmpVizier_yamlsEtcdYaml,
	"tmp/vizier_yamls/nats.yaml":   tmpVizier_yamlsNatsYaml,
	"tmp/vizier_yamls/vizier.yaml": tmpVizier_yamlsVizierYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"vizier_yamls": &bintree{nil, map[string]*bintree{
			"etcd.yaml":   &bintree{tmpVizier_yamlsEtcdYaml, map[string]*bintree{}},
			"nats.yaml":   &bintree{tmpVizier_yamlsNatsYaml, map[string]*bintree{}},
			"vizier.yaml": &bintree{tmpVizier_yamlsVizierYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
