syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/shared/types/typespb/types.proto";

package pl.table_store.schemapb;

option go_package = "schemapb";

// PL_CARNOT_UPDATE_FOR_NEW_TYPES.

// Boolean data column.
message BooleanColumn {
  repeated bool data = 1;
}

// Int64 column data.
message Int64Column {
  repeated int64 data = 1;
}

// Uint128 column data.
message UInt128Column {
  repeated types.UInt128 data = 1;
}

// Float64 column data.
message Float64Column {
  repeated double data = 1;
}

// Time64 column data.
message Time64NSColumn {
  repeated int64 data = 1;
}

// String data column.
message StringColumn {
  repeated bytes data = 1 [(gogoproto.customtype) = "pixielabs.ai/pixielabs/src/table_store/schemapb/types.StringData"];
}

// A single column of data.
message Column {
  oneof col_data {
    BooleanColumn boolean_data = 1;
    Int64Column int64_data = 2;
    UInt128Column uint128_data = 3;
    Time64NSColumn time64ns_data = 4;
    Float64Column float64_data = 5;
    StringColumn string_data = 6;
  }
}

// RowBatchData is a temporary data type that will remove when proper serialization
// is implemented.
message RowBatchData {
  repeated Column cols = 1;
  int64 num_rows = 2;
  bool eow = 3;
  bool eos = 4;
}

message Relation {
  message ColumnInfo {
    string column_name = 1;
    pl.types.DataType column_type = 2;
    string column_desc = 3;
    pl.types.SemanticType column_semantic_type = 4;
  }
  repeated ColumnInfo columns = 1;
  // Description of the table.
  string desc = 2;
}

// A table serialized as proto.
message Table {
  // Information about the relation in this table. All row batches *must* follow,
  // this schema.
  Relation relation = 4;
  // A row batch of data.
  repeated RowBatchData row_batches = 5;
  // The table name. Empty if the table is not associated with a name.
  string name = 6;
}

message Schema {
  map<string, Relation> relation_map = 1;
}
