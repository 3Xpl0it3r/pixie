// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/table_store/proto/schema.proto

package schemapb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "pixielabs.ai/pixielabs/src/shared/types/proto"

import strings "strings"
import reflect "reflect"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BooleanColumn struct {
	Data []bool `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *BooleanColumn) Reset()      { *m = BooleanColumn{} }
func (*BooleanColumn) ProtoMessage() {}
func (*BooleanColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{0}
}
func (m *BooleanColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BooleanColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BooleanColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BooleanColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanColumn.Merge(dst, src)
}
func (m *BooleanColumn) XXX_Size() int {
	return m.Size()
}
func (m *BooleanColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanColumn.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanColumn proto.InternalMessageInfo

func (m *BooleanColumn) GetData() []bool {
	if m != nil {
		return m.Data
	}
	return nil
}

type Int64Column struct {
	Data []int64 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Int64Column) Reset()      { *m = Int64Column{} }
func (*Int64Column) ProtoMessage() {}
func (*Int64Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{1}
}
func (m *Int64Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Int64Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Int64Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Int64Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int64Column.Merge(dst, src)
}
func (m *Int64Column) XXX_Size() int {
	return m.Size()
}
func (m *Int64Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Int64Column.DiscardUnknown(m)
}

var xxx_messageInfo_Int64Column proto.InternalMessageInfo

func (m *Int64Column) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Float64Column struct {
	Data []float64 `protobuf:"fixed64,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Float64Column) Reset()      { *m = Float64Column{} }
func (*Float64Column) ProtoMessage() {}
func (*Float64Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{2}
}
func (m *Float64Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Float64Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Float64Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Float64Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Float64Column.Merge(dst, src)
}
func (m *Float64Column) XXX_Size() int {
	return m.Size()
}
func (m *Float64Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Float64Column.DiscardUnknown(m)
}

var xxx_messageInfo_Float64Column proto.InternalMessageInfo

func (m *Float64Column) GetData() []float64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Time64NSColumn struct {
	Data []int64 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Time64NSColumn) Reset()      { *m = Time64NSColumn{} }
func (*Time64NSColumn) ProtoMessage() {}
func (*Time64NSColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{3}
}
func (m *Time64NSColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Time64NSColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Time64NSColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Time64NSColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time64NSColumn.Merge(dst, src)
}
func (m *Time64NSColumn) XXX_Size() int {
	return m.Size()
}
func (m *Time64NSColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_Time64NSColumn.DiscardUnknown(m)
}

var xxx_messageInfo_Time64NSColumn proto.InternalMessageInfo

func (m *Time64NSColumn) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type StringColumn struct {
	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *StringColumn) Reset()      { *m = StringColumn{} }
func (*StringColumn) ProtoMessage() {}
func (*StringColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{4}
}
func (m *StringColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StringColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringColumn.Merge(dst, src)
}
func (m *StringColumn) XXX_Size() int {
	return m.Size()
}
func (m *StringColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_StringColumn.DiscardUnknown(m)
}

var xxx_messageInfo_StringColumn proto.InternalMessageInfo

func (m *StringColumn) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type Column struct {
	// Types that are valid to be assigned to ColData:
	//	*Column_BooleanData
	//	*Column_Int64Data
	//	*Column_Time64NsData
	//	*Column_Float64Data
	//	*Column_StringData
	ColData isColumn_ColData `protobuf_oneof:"col_data"`
}

func (m *Column) Reset()      { *m = Column{} }
func (*Column) ProtoMessage() {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{5}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(dst, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

type isColumn_ColData interface {
	isColumn_ColData()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Column_BooleanData struct {
	BooleanData *BooleanColumn `protobuf:"bytes,1,opt,name=boolean_data,json=booleanData,proto3,oneof"`
}
type Column_Int64Data struct {
	Int64Data *Int64Column `protobuf:"bytes,2,opt,name=int64_data,json=int64Data,proto3,oneof"`
}
type Column_Time64NsData struct {
	Time64NsData *Time64NSColumn `protobuf:"bytes,3,opt,name=time64ns_data,json=time64nsData,proto3,oneof"`
}
type Column_Float64Data struct {
	Float64Data *Float64Column `protobuf:"bytes,4,opt,name=float64_data,json=float64Data,proto3,oneof"`
}
type Column_StringData struct {
	StringData *StringColumn `protobuf:"bytes,5,opt,name=string_data,json=stringData,proto3,oneof"`
}

func (*Column_BooleanData) isColumn_ColData()  {}
func (*Column_Int64Data) isColumn_ColData()    {}
func (*Column_Time64NsData) isColumn_ColData() {}
func (*Column_Float64Data) isColumn_ColData()  {}
func (*Column_StringData) isColumn_ColData()   {}

func (m *Column) GetColData() isColumn_ColData {
	if m != nil {
		return m.ColData
	}
	return nil
}

func (m *Column) GetBooleanData() *BooleanColumn {
	if x, ok := m.GetColData().(*Column_BooleanData); ok {
		return x.BooleanData
	}
	return nil
}

func (m *Column) GetInt64Data() *Int64Column {
	if x, ok := m.GetColData().(*Column_Int64Data); ok {
		return x.Int64Data
	}
	return nil
}

func (m *Column) GetTime64NsData() *Time64NSColumn {
	if x, ok := m.GetColData().(*Column_Time64NsData); ok {
		return x.Time64NsData
	}
	return nil
}

func (m *Column) GetFloat64Data() *Float64Column {
	if x, ok := m.GetColData().(*Column_Float64Data); ok {
		return x.Float64Data
	}
	return nil
}

func (m *Column) GetStringData() *StringColumn {
	if x, ok := m.GetColData().(*Column_StringData); ok {
		return x.StringData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Column) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Column_OneofMarshaler, _Column_OneofUnmarshaler, _Column_OneofSizer, []interface{}{
		(*Column_BooleanData)(nil),
		(*Column_Int64Data)(nil),
		(*Column_Time64NsData)(nil),
		(*Column_Float64Data)(nil),
		(*Column_StringData)(nil),
	}
}

func _Column_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Column)
	// col_data
	switch x := m.ColData.(type) {
	case *Column_BooleanData:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BooleanData); err != nil {
			return err
		}
	case *Column_Int64Data:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64Data); err != nil {
			return err
		}
	case *Column_Time64NsData:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time64NsData); err != nil {
			return err
		}
	case *Column_Float64Data:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Float64Data); err != nil {
			return err
		}
	case *Column_StringData:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringData); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Column.ColData has unexpected type %T", x)
	}
	return nil
}

func _Column_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Column)
	switch tag {
	case 1: // col_data.boolean_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BooleanColumn)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_BooleanData{msg}
		return true, err
	case 2: // col_data.int64_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64Column)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_Int64Data{msg}
		return true, err
	case 3: // col_data.time64ns_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time64NSColumn)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_Time64NsData{msg}
		return true, err
	case 4: // col_data.float64_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Float64Column)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_Float64Data{msg}
		return true, err
	case 5: // col_data.string_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringColumn)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_StringData{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Column_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Column)
	// col_data
	switch x := m.ColData.(type) {
	case *Column_BooleanData:
		s := proto.Size(x.BooleanData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Column_Int64Data:
		s := proto.Size(x.Int64Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Column_Time64NsData:
		s := proto.Size(x.Time64NsData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Column_Float64Data:
		s := proto.Size(x.Float64Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Column_StringData:
		s := proto.Size(x.StringData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RowBatchData struct {
	Cols []*Column `protobuf:"bytes,1,rep,name=cols,proto3" json:"cols,omitempty"`
}

func (m *RowBatchData) Reset()      { *m = RowBatchData{} }
func (*RowBatchData) ProtoMessage() {}
func (*RowBatchData) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{6}
}
func (m *RowBatchData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowBatchData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowBatchData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RowBatchData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowBatchData.Merge(dst, src)
}
func (m *RowBatchData) XXX_Size() int {
	return m.Size()
}
func (m *RowBatchData) XXX_DiscardUnknown() {
	xxx_messageInfo_RowBatchData.DiscardUnknown(m)
}

var xxx_messageInfo_RowBatchData proto.InternalMessageInfo

func (m *RowBatchData) GetCols() []*Column {
	if m != nil {
		return m.Cols
	}
	return nil
}

type Relation struct {
	Name    string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Columns []*Relation_ColumnInfo `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *Relation) Reset()      { *m = Relation{} }
func (*Relation) ProtoMessage() {}
func (*Relation) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{7}
}
func (m *Relation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Relation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation.Merge(dst, src)
}
func (m *Relation) XXX_Size() int {
	return m.Size()
}
func (m *Relation) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation.DiscardUnknown(m)
}

var xxx_messageInfo_Relation proto.InternalMessageInfo

func (m *Relation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Relation) GetColumns() []*Relation_ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

type Relation_ColumnInfo struct {
	ColumnName string          `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnType proto1.DataType `protobuf:"varint,2,opt,name=column_type,json=columnType,proto3,enum=pl.types.DataType" json:"column_type,omitempty"`
}

func (m *Relation_ColumnInfo) Reset()      { *m = Relation_ColumnInfo{} }
func (*Relation_ColumnInfo) ProtoMessage() {}
func (*Relation_ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{7, 0}
}
func (m *Relation_ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation_ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Relation_ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation_ColumnInfo.Merge(dst, src)
}
func (m *Relation_ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *Relation_ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Relation_ColumnInfo proto.InternalMessageInfo

func (m *Relation_ColumnInfo) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *Relation_ColumnInfo) GetColumnType() proto1.DataType {
	if m != nil {
		return m.ColumnType
	}
	return proto1.DATA_TYPE_UNKNOWN
}

type Table struct {
	Relation   *Relation       `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
	RowBatches []*RowBatchData `protobuf:"bytes,5,rep,name=row_batches,json=rowBatches,proto3" json:"row_batches,omitempty"`
}

func (m *Table) Reset()      { *m = Table{} }
func (*Table) ProtoMessage() {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_schema_4a4ca0d37a937ed1, []int{8}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(dst, src)
}
func (m *Table) XXX_Size() int {
	return m.Size()
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

func (m *Table) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

func (m *Table) GetRowBatches() []*RowBatchData {
	if m != nil {
		return m.RowBatches
	}
	return nil
}

func init() {
	proto.RegisterType((*BooleanColumn)(nil), "pl.table_store.schemapb.BooleanColumn")
	proto.RegisterType((*Int64Column)(nil), "pl.table_store.schemapb.Int64Column")
	proto.RegisterType((*Float64Column)(nil), "pl.table_store.schemapb.Float64Column")
	proto.RegisterType((*Time64NSColumn)(nil), "pl.table_store.schemapb.Time64NSColumn")
	proto.RegisterType((*StringColumn)(nil), "pl.table_store.schemapb.StringColumn")
	proto.RegisterType((*Column)(nil), "pl.table_store.schemapb.Column")
	proto.RegisterType((*RowBatchData)(nil), "pl.table_store.schemapb.RowBatchData")
	proto.RegisterType((*Relation)(nil), "pl.table_store.schemapb.Relation")
	proto.RegisterType((*Relation_ColumnInfo)(nil), "pl.table_store.schemapb.Relation.ColumnInfo")
	proto.RegisterType((*Table)(nil), "pl.table_store.schemapb.Table")
}
func (this *BooleanColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BooleanColumn)
	if !ok {
		that2, ok := that.(BooleanColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Int64Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Int64Column)
	if !ok {
		that2, ok := that.(Int64Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Float64Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Float64Column)
	if !ok {
		that2, ok := that.(Float64Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Time64NSColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Time64NSColumn)
	if !ok {
		that2, ok := that.(Time64NSColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *StringColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringColumn)
	if !ok {
		that2, ok := that.(StringColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column)
	if !ok {
		that2, ok := that.(Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ColData == nil {
		if this.ColData != nil {
			return false
		}
	} else if this.ColData == nil {
		return false
	} else if !this.ColData.Equal(that1.ColData) {
		return false
	}
	return true
}
func (this *Column_BooleanData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_BooleanData)
	if !ok {
		that2, ok := that.(Column_BooleanData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BooleanData.Equal(that1.BooleanData) {
		return false
	}
	return true
}
func (this *Column_Int64Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Int64Data)
	if !ok {
		that2, ok := that.(Column_Int64Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Int64Data.Equal(that1.Int64Data) {
		return false
	}
	return true
}
func (this *Column_Time64NsData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Time64NsData)
	if !ok {
		that2, ok := that.(Column_Time64NsData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time64NsData.Equal(that1.Time64NsData) {
		return false
	}
	return true
}
func (this *Column_Float64Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Float64Data)
	if !ok {
		that2, ok := that.(Column_Float64Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Float64Data.Equal(that1.Float64Data) {
		return false
	}
	return true
}
func (this *Column_StringData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_StringData)
	if !ok {
		that2, ok := that.(Column_StringData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StringData.Equal(that1.StringData) {
		return false
	}
	return true
}
func (this *RowBatchData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RowBatchData)
	if !ok {
		that2, ok := that.(RowBatchData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cols) != len(that1.Cols) {
		return false
	}
	for i := range this.Cols {
		if !this.Cols[i].Equal(that1.Cols[i]) {
			return false
		}
	}
	return true
}
func (this *Relation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relation)
	if !ok {
		that2, ok := that.(Relation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	return true
}
func (this *Relation_ColumnInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relation_ColumnInfo)
	if !ok {
		that2, ok := that.(Relation_ColumnInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ColumnName != that1.ColumnName {
		return false
	}
	if this.ColumnType != that1.ColumnType {
		return false
	}
	return true
}
func (this *Table) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table)
	if !ok {
		that2, ok := that.(Table)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Relation.Equal(that1.Relation) {
		return false
	}
	if len(this.RowBatches) != len(that1.RowBatches) {
		return false
	}
	for i := range this.RowBatches {
		if !this.RowBatches[i].Equal(that1.RowBatches[i]) {
			return false
		}
	}
	return true
}
func (this *BooleanColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schemapb.BooleanColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Int64Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schemapb.Int64Column{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Float64Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schemapb.Float64Column{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Time64NSColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schemapb.Time64NSColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schemapb.StringColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&schemapb.Column{")
	if this.ColData != nil {
		s = append(s, "ColData: "+fmt.Sprintf("%#v", this.ColData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column_BooleanData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schemapb.Column_BooleanData{` +
		`BooleanData:` + fmt.Sprintf("%#v", this.BooleanData) + `}`}, ", ")
	return s
}
func (this *Column_Int64Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schemapb.Column_Int64Data{` +
		`Int64Data:` + fmt.Sprintf("%#v", this.Int64Data) + `}`}, ", ")
	return s
}
func (this *Column_Time64NsData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schemapb.Column_Time64NsData{` +
		`Time64NsData:` + fmt.Sprintf("%#v", this.Time64NsData) + `}`}, ", ")
	return s
}
func (this *Column_Float64Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schemapb.Column_Float64Data{` +
		`Float64Data:` + fmt.Sprintf("%#v", this.Float64Data) + `}`}, ", ")
	return s
}
func (this *Column_StringData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schemapb.Column_StringData{` +
		`StringData:` + fmt.Sprintf("%#v", this.StringData) + `}`}, ", ")
	return s
}
func (this *RowBatchData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schemapb.RowBatchData{")
	if this.Cols != nil {
		s = append(s, "Cols: "+fmt.Sprintf("%#v", this.Cols)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Relation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schemapb.Relation{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Relation_ColumnInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schemapb.Relation_ColumnInfo{")
	s = append(s, "ColumnName: "+fmt.Sprintf("%#v", this.ColumnName)+",\n")
	s = append(s, "ColumnType: "+fmt.Sprintf("%#v", this.ColumnType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Table) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&schemapb.Table{")
	if this.Relation != nil {
		s = append(s, "Relation: "+fmt.Sprintf("%#v", this.Relation)+",\n")
	}
	if this.RowBatches != nil {
		s = append(s, "RowBatches: "+fmt.Sprintf("%#v", this.RowBatches)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSchema(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BooleanColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BooleanColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Data)))
		for _, b := range m.Data {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *Int64Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA2 := make([]byte, len(m.Data)*10)
		var j1 int
		for _, num1 := range m.Data {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchema(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *Float64Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Float64Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Data)*8))
		for _, num := range m.Data {
			f3 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f3))
			i += 8
		}
	}
	return i, nil
}

func (m *Time64NSColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Time64NSColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA5 := make([]byte, len(m.Data)*10)
		var j4 int
		for _, num1 := range m.Data {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchema(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func (m *StringColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ColData != nil {
		nn6, err := m.ColData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *Column_BooleanData) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BooleanData != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchema(dAtA, i, uint64(m.BooleanData.Size()))
		n7, err := m.BooleanData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Column_Int64Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Int64Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchema(dAtA, i, uint64(m.Int64Data.Size()))
		n8, err := m.Int64Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Column_Time64NsData) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Time64NsData != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchema(dAtA, i, uint64(m.Time64NsData.Size()))
		n9, err := m.Time64NsData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Column_Float64Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Float64Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchema(dAtA, i, uint64(m.Float64Data.Size()))
		n10, err := m.Float64Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Column_StringData) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StringData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSchema(dAtA, i, uint64(m.StringData.Size()))
		n11, err := m.StringData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *RowBatchData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowBatchData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cols) > 0 {
		for _, msg := range m.Cols {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSchema(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSchema(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Relation_ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation_ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchema(dAtA, i, uint64(len(m.ColumnName)))
		i += copy(dAtA[i:], m.ColumnName)
	}
	if m.ColumnType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchema(dAtA, i, uint64(m.ColumnType))
	}
	return i, nil
}

func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Relation != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSchema(dAtA, i, uint64(m.Relation.Size()))
		n12, err := m.Relation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.RowBatches) > 0 {
		for _, msg := range m.RowBatches {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSchema(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSchema(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BooleanColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		n += 1 + sovSchema(uint64(len(m.Data))) + len(m.Data)*1
	}
	return n
}

func (m *Int64Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		l = 0
		for _, e := range m.Data {
			l += sovSchema(uint64(e))
		}
		n += 1 + sovSchema(uint64(l)) + l
	}
	return n
}

func (m *Float64Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		n += 1 + sovSchema(uint64(len(m.Data)*8)) + len(m.Data)*8
	}
	return n
}

func (m *Time64NSColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		l = 0
		for _, e := range m.Data {
			l += sovSchema(uint64(e))
		}
		n += 1 + sovSchema(uint64(l)) + l
	}
	return n
}

func (m *StringColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ColData != nil {
		n += m.ColData.Size()
	}
	return n
}

func (m *Column_BooleanData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BooleanData != nil {
		l = m.BooleanData.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}
func (m *Column_Int64Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int64Data != nil {
		l = m.Int64Data.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}
func (m *Column_Time64NsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time64NsData != nil {
		l = m.Time64NsData.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}
func (m *Column_Float64Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Float64Data != nil {
		l = m.Float64Data.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}
func (m *Column_StringData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StringData != nil {
		l = m.StringData.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}
func (m *RowBatchData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cols) > 0 {
		for _, e := range m.Cols {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *Relation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *Relation_ColumnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ColumnName)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	if m.ColumnType != 0 {
		n += 1 + sovSchema(uint64(m.ColumnType))
	}
	return n
}

func (m *Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	if len(m.RowBatches) > 0 {
		for _, e := range m.RowBatches {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func sovSchema(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSchema(x uint64) (n int) {
	return sovSchema(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BooleanColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BooleanColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Int64Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Int64Column{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Float64Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Float64Column{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Time64NSColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Time64NSColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column{`,
		`ColData:` + fmt.Sprintf("%v", this.ColData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_BooleanData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_BooleanData{`,
		`BooleanData:` + strings.Replace(fmt.Sprintf("%v", this.BooleanData), "BooleanColumn", "BooleanColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Int64Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Int64Data{`,
		`Int64Data:` + strings.Replace(fmt.Sprintf("%v", this.Int64Data), "Int64Column", "Int64Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Time64NsData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Time64NsData{`,
		`Time64NsData:` + strings.Replace(fmt.Sprintf("%v", this.Time64NsData), "Time64NSColumn", "Time64NSColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Float64Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Float64Data{`,
		`Float64Data:` + strings.Replace(fmt.Sprintf("%v", this.Float64Data), "Float64Column", "Float64Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_StringData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_StringData{`,
		`StringData:` + strings.Replace(fmt.Sprintf("%v", this.StringData), "StringColumn", "StringColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RowBatchData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RowBatchData{`,
		`Cols:` + strings.Replace(fmt.Sprintf("%v", this.Cols), "Column", "Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Relation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Relation{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Columns:` + strings.Replace(fmt.Sprintf("%v", this.Columns), "Relation_ColumnInfo", "Relation_ColumnInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Relation_ColumnInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Relation_ColumnInfo{`,
		`ColumnName:` + fmt.Sprintf("%v", this.ColumnName) + `,`,
		`ColumnType:` + fmt.Sprintf("%v", this.ColumnType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Table{`,
		`Relation:` + strings.Replace(fmt.Sprintf("%v", this.Relation), "Relation", "Relation", 1) + `,`,
		`RowBatches:` + strings.Replace(fmt.Sprintf("%v", this.RowBatches), "RowBatchData", "RowBatchData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSchema(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BooleanColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BooleanColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BooleanColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchema
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchema
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchema
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchema
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Float64Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Float64Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Float64Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Data = append(m.Data, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchema
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Data = append(m.Data, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Time64NSColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time64NSColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time64NSColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchema
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchema
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BooleanData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BooleanColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_BooleanData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int64Column{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Int64Data{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time64NsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Time64NSColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Time64NsData{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Float64Column{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Float64Data{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_StringData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowBatchData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowBatchData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowBatchData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cols = append(m.Cols, &Column{})
			if err := m.Cols[len(m.Cols)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Relation_ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation_ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnType", wireType)
			}
			m.ColumnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnType |= (proto1.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowBatches = append(m.RowBatches, &RowBatchData{})
			if err := m.RowBatches[len(m.RowBatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchema(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSchema
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSchema
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSchema(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSchema = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchema   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("src/table_store/proto/schema.proto", fileDescriptor_schema_4a4ca0d37a937ed1)
}

var fileDescriptor_schema_4a4ca0d37a937ed1 = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x31, 0x6f, 0xda, 0x40,
	0x14, 0xc7, 0x7d, 0x01, 0x52, 0x78, 0x86, 0x0c, 0x5e, 0x8a, 0x32, 0x5c, 0x1a, 0x27, 0x6d, 0x33,
	0x54, 0x20, 0x41, 0x94, 0xad, 0x1d, 0x48, 0x8b, 0x88, 0x22, 0x31, 0x5c, 0x98, 0xba, 0xa0, 0xb3,
	0x73, 0x29, 0x48, 0xc6, 0x87, 0x7c, 0x57, 0x45, 0xd9, 0xfa, 0x09, 0xda, 0x7e, 0x8c, 0x7e, 0x94,
	0xaa, 0x13, 0x63, 0xc6, 0x62, 0x96, 0x8e, 0xf9, 0x08, 0x95, 0xdf, 0x1d, 0xa9, 0x91, 0x70, 0xb3,
	0x3d, 0xfb, 0xfe, 0xff, 0xdf, 0xbb, 0xf7, 0xfe, 0x18, 0xf0, 0x55, 0x12, 0xb6, 0x35, 0x0f, 0x22,
	0x31, 0x56, 0x5a, 0x26, 0xa2, 0x3d, 0x4f, 0xa4, 0x96, 0x6d, 0x15, 0x4e, 0xc4, 0x8c, 0xb7, 0xf0,
	0xc1, 0x7b, 0x3e, 0x8f, 0x5a, 0x39, 0x49, 0xcb, 0x1c, 0xce, 0x83, 0x7d, 0x34, 0xab, 0x09, 0x4f,
	0xc4, 0x75, 0x5b, 0xdf, 0xcd, 0x85, 0xb2, 0x6e, 0xac, 0x8d, 0xd9, 0x3f, 0x82, 0x46, 0x4f, 0xca,
	0x48, 0xf0, 0xf8, 0x5c, 0x46, 0x9f, 0x67, 0xb1, 0xe7, 0x41, 0xf9, 0x9a, 0x6b, 0xde, 0x24, 0x2f,
	0x4a, 0x27, 0x55, 0x86, 0xb5, 0x7f, 0x08, 0xee, 0x45, 0xac, 0xcf, 0x4e, 0xb7, 0x48, 0x4a, 0x56,
	0x72, 0x04, 0x8d, 0x7e, 0x24, 0xf9, 0x76, 0x11, 0xb1, 0xa2, 0x63, 0xd8, 0x1b, 0x4d, 0x67, 0xe2,
	0xec, 0x74, 0x78, 0xf5, 0x1f, 0x94, 0x0f, 0xf5, 0x2b, 0x9d, 0x4c, 0xe3, 0x4f, 0x5b, 0x34, 0x35,
	0xab, 0xf9, 0x56, 0x82, 0x5d, 0x7b, 0x7c, 0x09, 0xf5, 0xc0, 0x4c, 0x30, 0xb6, 0x32, 0x72, 0xe2,
	0x76, 0x5e, 0xb5, 0x0a, 0xb6, 0xd2, 0xda, 0x18, 0x77, 0xe0, 0x30, 0xd7, 0xba, 0xdf, 0x73, 0xcd,
	0xbd, 0x0f, 0x00, 0xd3, 0x6c, 0x52, 0x83, 0xda, 0x41, 0xd4, 0x71, 0x21, 0x2a, 0xb7, 0x94, 0x81,
	0xc3, 0x6a, 0xe8, 0x44, 0xcc, 0x10, 0x1a, 0x1a, 0x07, 0x8d, 0x95, 0x21, 0x95, 0x90, 0xf4, 0xba,
	0x90, 0xb4, 0xb9, 0x96, 0x81, 0xc3, 0xea, 0x6b, 0x3f, 0xf2, 0x2e, 0xa1, 0x7e, 0x63, 0xb6, 0x6b,
	0x70, 0xe5, 0x27, 0x66, 0xdc, 0x88, 0x22, 0x9b, 0xd1, 0xba, 0x11, 0x36, 0x00, 0x57, 0xe1, 0x7e,
	0x0d, 0xab, 0x82, 0xac, 0x97, 0x85, 0xac, 0x7c, 0x16, 0x03, 0x87, 0x81, 0xf1, 0x66, 0xa4, 0x1e,
	0x40, 0x35, 0x94, 0x11, 0x62, 0xfc, 0x73, 0xa8, 0x33, 0x79, 0xdb, 0xe3, 0x3a, 0x9c, 0x60, 0x97,
	0x2e, 0x94, 0x43, 0x19, 0x29, 0x4c, 0xcd, 0xed, 0x1c, 0x14, 0xe2, 0x0d, 0x98, 0xa1, 0xd8, 0xff,
	0x45, 0xa0, 0xca, 0x44, 0xc4, 0xf5, 0x54, 0x62, 0xee, 0x31, 0x9f, 0x09, 0x0c, 0xb4, 0xc6, 0xb0,
	0xf6, 0xfa, 0xf0, 0x2c, 0x44, 0x83, 0x6a, 0xee, 0x20, 0xf8, 0x4d, 0x21, 0x78, 0xcd, 0xb1, 0x1d,
	0x2e, 0xe2, 0x1b, 0xc9, 0xd6, 0xe6, 0xfd, 0x00, 0xe0, 0xdf, 0x6b, 0xef, 0x00, 0x5c, 0x73, 0x30,
	0xce, 0x35, 0x04, 0xf3, 0x6a, 0x98, 0xb5, 0xed, 0x3e, 0x0a, 0xb2, 0x6f, 0x07, 0x7f, 0x17, 0x7b,
	0x1d, 0x0f, 0x5b, 0xe3, 0xb7, 0x94, 0x4d, 0x3c, 0xba, 0x9b, 0x8b, 0xb5, 0x29, 0xab, 0xfd, 0xaf,
	0x04, 0x2a, 0xa3, 0xec, 0x66, 0xde, 0x5b, 0xa8, 0x26, 0xf6, 0x36, 0x36, 0xba, 0xc3, 0x27, 0xaf,
	0xcd, 0x1e, 0x2d, 0x5e, 0x1f, 0xdc, 0x44, 0xde, 0x8e, 0x83, 0x6c, 0xb7, 0x42, 0x35, 0x2b, 0x38,
	0x78, 0x71, 0x60, 0xf9, 0x18, 0x18, 0x24, 0xf6, 0x49, 0xa8, 0xde, 0xbb, 0xc5, 0x92, 0x3a, 0xf7,
	0x4b, 0xea, 0x3c, 0x2c, 0x29, 0xf9, 0x92, 0x52, 0xf2, 0x23, 0xa5, 0xe4, 0x67, 0x4a, 0xc9, 0x22,
	0xa5, 0xe4, 0x77, 0x4a, 0xc9, 0x9f, 0x94, 0x3a, 0x0f, 0x29, 0x25, 0xdf, 0x57, 0xd4, 0x59, 0xac,
	0xa8, 0x73, 0xbf, 0xa2, 0xce, 0xc7, 0xea, 0x1a, 0x1c, 0xec, 0xe2, 0x5f, 0x46, 0xf7, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x1a, 0x9c, 0x68, 0xef, 0x95, 0x04, 0x00, 0x00,
}
