syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/common/uuid/proto/uuid.proto";
import "src/table_store/proto/schema.proto";
import "src/carnot/queryresultspb/query_results.proto";

package pl.carnotpb;

option go_package = "carnotpb";

message TransferResultChunkRequest {
  // This field represents the address that the row batch should be sent to.
  string address = 1;
  // The ID of the remote query ID on the address that should receive this
  // RowBatch.
  uuidpb.UUID query_id = 2 [ (gogoproto.customname) = "QueryID" ];

  // Previously used for grpc_source_id and table_name before they were grouped under
  // the RowBatchResult message.
  reserved 3;
  reserved 4;

  // A RowBatch produced by the query, either an intermediate or final result.
  message ResultRowBatch {
    // The row batch data.
    // TODO(nserrino): Fix this to flat buffers/feather for better performance.
    pl.table_store.schemapb.RowBatchData row_batch = 1;

    oneof destination {
      // When the TransferResultChunkRequest is being sent to another Carnot instance, 'grpc_source_id'
      // identifies the source node within the query that should receive this RowBatch.
      uint64 grpc_source_id = 2 [ (gogoproto.customname) = "GRPCSourceID" ];
      // If this result chunk is being sent to a non-Carnot instance such as the querybroker,
      // this field denotes the name of the table that it belongs to.
      string table_name = 3;
    }
  }

  // Execution and timing info for a given query. These are sent once per agent for a batch query
  // and periodically per agent for a streaming query.
  message QueryExecutionAndTimingInfo {
    // Previously used for query timing info, which is part of QueryExecutionStats here.
    reserved 1;
    // Execution info across the entire query, sent by the top-level agent in the plan.
    pl.carnot.queryresultspb.QueryExecutionStats execution_stats = 2;
    // Agent-specific execution stats, sent by every agent in the plan.
    repeated pl.carnot.queryresultspb.AgentExecutionStats agent_execution_stats = 3;
  }

  oneof result {
    // A row batch (including its destination).
    ResultRowBatch row_batch_result = 5;
    // Execution information about the query.
    QueryExecutionAndTimingInfo execution_and_timing_info = 6;
    // The schema of the results.
    pl.table_store.schemapb.Schema schema = 7;
  }
}

message TransferResultChunkResponse {
  // This field indicates whether or not the transfer of the stream of ResultChunks
  // completed successfully.
  bool success = 1;
  // This field has any error message, if applicable.
  string message = 2;
}

message DoneRequest {
  // The ID of the remote query ID that this corresponds to.
  uuidpb.UUID query_id = 1 [ (gogoproto.customname) = "QueryID" ];
  uuidpb.UUID agent_id = 2 [ (gogoproto.customname) = "AgentID" ];
  repeated pl.carnot.queryresultspb.AgentExecutionStats agent_execution_stats = 3;
}

message DoneResponse {
  // This field indicates whether or not the RowBatch was successfully
  // transferred.
  bool success = 1;
  // This field has any error message, if applicable.
  string message = 2;
}

service ResultSinkService {
  // Transfer a result chunk (which could be eithr data or metadata) for a given query, to another
  // Carnot instance or to an external sink.
  rpc TransferResultChunk(stream TransferResultChunkRequest) returns (TransferResultChunkResponse) {}
  // Message that handles Done state for an agent's message in query.
  // TOOD(nserrino): Deprecate and remove.
  rpc Done(DoneRequest) returns (DoneResponse) {}
}
