syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/api/public/uuidpb/uuid.proto";
import "src/table_store/proto/schema.proto";
import "src/carnot/queryresultspb/query_results.proto";

package pl.carnotpb;

option go_package = "carnotpb";

message TransferResultChunkRequest {
  // This field represents the address that the row batch should be sent to.
  string address = 1;
  // The ID of the remote query ID on the address that should receive this
  // RowBatch.
  uuidpb.UUID query_id = 2 [ (gogoproto.customname) = "QueryID" ];

  // Previously used for grpc_source_id and table_name before they were grouped under
  // the RowBatchResult message.
  reserved 3;
  reserved 4;

  // QueryResultContents is used to both initiate a connection between a GRPCSink and its remote destination
  // at the beginning of the stream, also to send any result RowBatches between the sink and its
  // destination. It contains metadata so that the sink->destination connection can be tracked and
  // monitored, and the overall query context cancelled if a particular sink->destination stream
  // has been closed earlier than expected.
  message SinkResult {
    oneof result_contents {
      // The row batch data.
      // TODO(nserrino): Fix this to flat buffers/feather for better performance.
      pl.table_store.schemapb.RowBatchData row_batch = 1;
      // This case is sent by a GRPCSink as soon as it makes the remote connection to the client
      // receiving its results. It is used by the client to identify the particular connection and
      // monitor that it has not been closed during query execution. It is also used to identify
      // potential sinks that have failed to initiate a connection to their corresponding destination.
      bool initiate_result_stream = 4;
    }

    oneof destination {
      // When the TransferResultChunkRequest is being sent to another Carnot instance, 'grpc_source_id'
      // identifies the source node within the query that should receive this RowBatch.
      uint64 grpc_source_id = 2 [ (gogoproto.customname) = "GRPCSourceID" ];
      // If this result chunk is being sent to a non-Carnot instance such as the querybroker,
      // this field denotes the name of the table that it belongs to.
      string table_name = 3;
    }
  }

  // Execution and timing info for a given query. These are sent once per agent for a batch query
  // and periodically per agent for a streaming query.
  message QueryExecutionAndTimingInfo {
    // Previously used for query timing info, which is part of QueryExecutionStats here.
    reserved 1;
    // Execution info across the entire query, sent by the top-level agent in the plan.
    pl.carnot.queryresultspb.QueryExecutionStats execution_stats = 2;
    // Agent-specific execution stats, sent by every agent in the plan.
    repeated pl.carnot.queryresultspb.AgentExecutionStats agent_execution_stats = 3;
  }

  oneof result {
    // `query_result` covers query result data sent from a GRPC sink (including the request
    // to initiate the connection between the GRPC sink and its destination).
    SinkResult query_result = 5;
    // Execution information about the query.
    // This result will be sent periodically until the end of the query, so it also functions
    // as a heartbeat for persistent streaming queries.
    QueryExecutionAndTimingInfo execution_and_timing_info = 6;
  }
}

message TransferResultChunkResponse {
  // This field indicates whether or not the transfer of the stream of ResultChunks
  // completed successfully.
  bool success = 1;
  // This field has any error message, if applicable.
  string message = 2;
}

service ResultSinkService {
  // Transfer a result chunk (which could be eithr data or metadata) for a given query, to another
  // Carnot instance or to an external sink.
  rpc TransferResultChunk(stream TransferResultChunkRequest) returns (TransferResultChunkResponse) {}
}
