// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/carnotpb/carnot.proto

package carnotpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	queryresultspb "pixielabs.ai/pixielabs/src/carnot/queryresultspb"
	proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	proto2 "pixielabs.ai/pixielabs/src/table_store/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferResultChunkRequest struct {
	Address string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	QueryID *proto1.UUID `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are valid to be assigned to Destination:
	//	*TransferResultChunkRequest_GRPCSourceID
	//	*TransferResultChunkRequest_TableName
	Destination isTransferResultChunkRequest_Destination `protobuf_oneof:"destination"`
	// Types that are valid to be assigned to Result:
	//	*TransferResultChunkRequest_RowBatch
	//	*TransferResultChunkRequest_ExecutionAndTimingInfo_
	Result isTransferResultChunkRequest_Result `protobuf_oneof:"result"`
}

func (m *TransferResultChunkRequest) Reset()      { *m = TransferResultChunkRequest{} }
func (*TransferResultChunkRequest) ProtoMessage() {}
func (*TransferResultChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9054907422204f4e, []int{0}
}
func (m *TransferResultChunkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferResultChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferResultChunkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferResultChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResultChunkRequest.Merge(m, src)
}
func (m *TransferResultChunkRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferResultChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResultChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResultChunkRequest proto.InternalMessageInfo

type isTransferResultChunkRequest_Destination interface {
	isTransferResultChunkRequest_Destination()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTransferResultChunkRequest_Result interface {
	isTransferResultChunkRequest_Result()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TransferResultChunkRequest_GRPCSourceID struct {
	GRPCSourceID uint64 `protobuf:"varint,3,opt,name=grpc_source_id,json=grpcSourceId,proto3,oneof" json:"grpc_source_id,omitempty"`
}
type TransferResultChunkRequest_TableName struct {
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3,oneof" json:"table_name,omitempty"`
}
type TransferResultChunkRequest_RowBatch struct {
	RowBatch *proto2.RowBatchData `protobuf:"bytes,5,opt,name=row_batch,json=rowBatch,proto3,oneof" json:"row_batch,omitempty"`
}
type TransferResultChunkRequest_ExecutionAndTimingInfo_ struct {
	ExecutionAndTimingInfo *TransferResultChunkRequest_ExecutionAndTimingInfo `protobuf:"bytes,6,opt,name=execution_and_timing_info,json=executionAndTimingInfo,proto3,oneof" json:"execution_and_timing_info,omitempty"`
}

func (*TransferResultChunkRequest_GRPCSourceID) isTransferResultChunkRequest_Destination()       {}
func (*TransferResultChunkRequest_TableName) isTransferResultChunkRequest_Destination()          {}
func (*TransferResultChunkRequest_RowBatch) isTransferResultChunkRequest_Result()                {}
func (*TransferResultChunkRequest_ExecutionAndTimingInfo_) isTransferResultChunkRequest_Result() {}

func (m *TransferResultChunkRequest) GetDestination() isTransferResultChunkRequest_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}
func (m *TransferResultChunkRequest) GetResult() isTransferResultChunkRequest_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *TransferResultChunkRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TransferResultChunkRequest) GetQueryID() *proto1.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

func (m *TransferResultChunkRequest) GetGRPCSourceID() uint64 {
	if x, ok := m.GetDestination().(*TransferResultChunkRequest_GRPCSourceID); ok {
		return x.GRPCSourceID
	}
	return 0
}

func (m *TransferResultChunkRequest) GetTableName() string {
	if x, ok := m.GetDestination().(*TransferResultChunkRequest_TableName); ok {
		return x.TableName
	}
	return ""
}

func (m *TransferResultChunkRequest) GetRowBatch() *proto2.RowBatchData {
	if x, ok := m.GetResult().(*TransferResultChunkRequest_RowBatch); ok {
		return x.RowBatch
	}
	return nil
}

func (m *TransferResultChunkRequest) GetExecutionAndTimingInfo() *TransferResultChunkRequest_ExecutionAndTimingInfo {
	if x, ok := m.GetResult().(*TransferResultChunkRequest_ExecutionAndTimingInfo_); ok {
		return x.ExecutionAndTimingInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransferResultChunkRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransferResultChunkRequest_GRPCSourceID)(nil),
		(*TransferResultChunkRequest_TableName)(nil),
		(*TransferResultChunkRequest_RowBatch)(nil),
		(*TransferResultChunkRequest_ExecutionAndTimingInfo_)(nil),
	}
}

type TransferResultChunkRequest_ExecutionAndTimingInfo struct {
	TimingInfo          *queryresultspb.QueryTimingInfo       `protobuf:"bytes,1,opt,name=timing_info,json=timingInfo,proto3" json:"timing_info,omitempty"`
	ExecutionStats      *queryresultspb.QueryExecutionStats   `protobuf:"bytes,2,opt,name=execution_stats,json=executionStats,proto3" json:"execution_stats,omitempty"`
	AgentExecutionStats []*queryresultspb.AgentExecutionStats `protobuf:"bytes,3,rep,name=agent_execution_stats,json=agentExecutionStats,proto3" json:"agent_execution_stats,omitempty"`
}

func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) Reset() {
	*m = TransferResultChunkRequest_ExecutionAndTimingInfo{}
}
func (*TransferResultChunkRequest_ExecutionAndTimingInfo) ProtoMessage() {}
func (*TransferResultChunkRequest_ExecutionAndTimingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9054907422204f4e, []int{0, 0}
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferResultChunkRequest_ExecutionAndTimingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResultChunkRequest_ExecutionAndTimingInfo.Merge(m, src)
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResultChunkRequest_ExecutionAndTimingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResultChunkRequest_ExecutionAndTimingInfo proto.InternalMessageInfo

func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) GetTimingInfo() *queryresultspb.QueryTimingInfo {
	if m != nil {
		return m.TimingInfo
	}
	return nil
}

func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) GetExecutionStats() *queryresultspb.QueryExecutionStats {
	if m != nil {
		return m.ExecutionStats
	}
	return nil
}

func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) GetAgentExecutionStats() []*queryresultspb.AgentExecutionStats {
	if m != nil {
		return m.AgentExecutionStats
	}
	return nil
}

type TransferResultChunkResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *TransferResultChunkResponse) Reset()      { *m = TransferResultChunkResponse{} }
func (*TransferResultChunkResponse) ProtoMessage() {}
func (*TransferResultChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9054907422204f4e, []int{1}
}
func (m *TransferResultChunkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferResultChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferResultChunkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferResultChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResultChunkResponse.Merge(m, src)
}
func (m *TransferResultChunkResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferResultChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResultChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResultChunkResponse proto.InternalMessageInfo

func (m *TransferResultChunkResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TransferResultChunkResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DoneRequest struct {
	QueryID             *proto1.UUID                          `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	AgentID             *proto1.UUID                          `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentExecutionStats []*queryresultspb.AgentExecutionStats `protobuf:"bytes,3,rep,name=agent_execution_stats,json=agentExecutionStats,proto3" json:"agent_execution_stats,omitempty"`
}

func (m *DoneRequest) Reset()      { *m = DoneRequest{} }
func (*DoneRequest) ProtoMessage() {}
func (*DoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9054907422204f4e, []int{2}
}
func (m *DoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoneRequest.Merge(m, src)
}
func (m *DoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *DoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DoneRequest proto.InternalMessageInfo

func (m *DoneRequest) GetQueryID() *proto1.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

func (m *DoneRequest) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *DoneRequest) GetAgentExecutionStats() []*queryresultspb.AgentExecutionStats {
	if m != nil {
		return m.AgentExecutionStats
	}
	return nil
}

type DoneResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DoneResponse) Reset()      { *m = DoneResponse{} }
func (*DoneResponse) ProtoMessage() {}
func (*DoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9054907422204f4e, []int{3}
}
func (m *DoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoneResponse.Merge(m, src)
}
func (m *DoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *DoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DoneResponse proto.InternalMessageInfo

func (m *DoneResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DoneResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*TransferResultChunkRequest)(nil), "pl.carnotpb.TransferResultChunkRequest")
	proto.RegisterType((*TransferResultChunkRequest_ExecutionAndTimingInfo)(nil), "pl.carnotpb.TransferResultChunkRequest.ExecutionAndTimingInfo")
	proto.RegisterType((*TransferResultChunkResponse)(nil), "pl.carnotpb.TransferResultChunkResponse")
	proto.RegisterType((*DoneRequest)(nil), "pl.carnotpb.DoneRequest")
	proto.RegisterType((*DoneResponse)(nil), "pl.carnotpb.DoneResponse")
}

func init() { proto.RegisterFile("src/carnotpb/carnot.proto", fileDescriptor_9054907422204f4e) }

var fileDescriptor_9054907422204f4e = []byte{
	// 694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x18, 0xf5, 0xf4, 0x37, 0x99, 0xf4, 0xe7, 0xca, 0xd5, 0xad, 0xd2, 0x5c, 0xc9, 0x8d, 0x22, 0x5d,
	0xdd, 0xdc, 0x45, 0x1d, 0xa9, 0x2c, 0xca, 0x86, 0x4a, 0x4d, 0x83, 0x48, 0x40, 0x42, 0x74, 0xda,
	0xb2, 0x60, 0x63, 0x8d, 0xed, 0x89, 0x63, 0x11, 0xcf, 0xb8, 0x33, 0xe3, 0x16, 0xc4, 0x86, 0x47,
	0xe0, 0x0d, 0xd8, 0xf2, 0x10, 0x3c, 0x40, 0x97, 0x5d, 0x76, 0x55, 0x51, 0x77, 0xc3, 0xb2, 0x8f,
	0x80, 0x66, 0x6c, 0x93, 0xb4, 0x04, 0x0a, 0x2c, 0xd8, 0xf9, 0xcc, 0x77, 0xbe, 0xa3, 0x33, 0xe7,
	0xfb, 0xc6, 0x70, 0x4d, 0x70, 0xaf, 0xe5, 0x61, 0x4e, 0x99, 0x8c, 0xdd, 0xfc, 0xc3, 0x8e, 0x39,
	0x93, 0xcc, 0xac, 0xc4, 0x43, 0xbb, 0xa8, 0xd4, 0x36, 0x82, 0x50, 0x0e, 0x12, 0xd7, 0xf6, 0x58,
	0xd4, 0x0a, 0x58, 0xc0, 0x5a, 0x9a, 0xe3, 0x26, 0x7d, 0x8d, 0x34, 0xd0, 0x5f, 0x59, 0x6f, 0xad,
	0xae, 0x65, 0x59, 0x14, 0x31, 0xda, 0x4a, 0x92, 0xd0, 0xcf, 0xe8, 0xfa, 0x33, 0x67, 0x34, 0x14,
	0x43, 0x62, 0x77, 0x48, 0x1c, 0x21, 0x19, 0x27, 0x39, 0x43, 0x78, 0x03, 0x12, 0xe1, 0x9c, 0xb3,
	0x31, 0x32, 0xd7, 0x3a, 0x4a, 0x08, 0x7f, 0xcd, 0x89, 0x48, 0x86, 0x52, 0xc4, 0x6e, 0x06, 0x9d,
	0x1c, 0x67, 0xf4, 0xc6, 0xe9, 0x2c, 0xac, 0x1d, 0x70, 0x4c, 0x45, 0x9f, 0x70, 0xa4, 0x2b, 0xbb,
	0x83, 0x84, 0xbe, 0x44, 0xe4, 0x28, 0x21, 0x42, 0x9a, 0x55, 0x38, 0x8f, 0x7d, 0x9f, 0x13, 0x21,
	0xaa, 0xa0, 0x0e, 0x9a, 0x65, 0x54, 0x40, 0x73, 0x0b, 0x96, 0x32, 0xbd, 0xd0, 0xaf, 0x4e, 0xd5,
	0x41, 0xb3, 0xb2, 0xb9, 0x6c, 0xc7, 0x43, 0x5b, 0xb9, 0x8d, 0x5d, 0xfb, 0xf0, 0xb0, 0xd7, 0x69,
	0x57, 0xd2, 0x8b, 0xf5, 0xf9, 0x3d, 0x45, 0xea, 0x75, 0xd0, 0xbc, 0x66, 0xf7, 0x7c, 0xf3, 0x3e,
	0x5c, 0x0a, 0x78, 0xec, 0x39, 0x82, 0x25, 0xdc, 0x23, 0xaa, 0x7d, 0xba, 0x0e, 0x9a, 0x33, 0xed,
	0xbf, 0xd2, 0x8b, 0xf5, 0x85, 0x47, 0xe8, 0xd9, 0xee, 0xbe, 0x2e, 0xf4, 0x3a, 0x5d, 0x03, 0x2d,
	0x28, 0x66, 0x8e, 0x7d, 0x73, 0x1d, 0xc2, 0xec, 0xf2, 0x14, 0x47, 0xa4, 0x3a, 0xa3, 0xfc, 0x74,
	0x0d, 0x54, 0xd6, 0x67, 0x4f, 0x71, 0x44, 0xcc, 0x0e, 0x2c, 0x73, 0x76, 0xe2, 0xb8, 0x58, 0x7a,
	0x83, 0xea, 0xac, 0x36, 0xf5, 0xaf, 0x32, 0x35, 0x16, 0x99, 0x9d, 0x85, 0x15, 0xbb, 0x36, 0x62,
	0x27, 0x6d, 0x45, 0xec, 0x60, 0x89, 0xbb, 0x00, 0x95, 0x78, 0x8e, 0xcd, 0x37, 0x70, 0x8d, 0xbc,
	0x22, 0x5e, 0x22, 0x43, 0x46, 0x1d, 0x4c, 0x7d, 0x47, 0x86, 0x51, 0x48, 0x03, 0x27, 0xa4, 0x7d,
	0x56, 0x9d, 0xd3, 0xaa, 0xdb, 0xf6, 0xd8, 0x9c, 0xed, 0xef, 0xe7, 0x67, 0x3f, 0x2c, 0x84, 0x76,
	0xa8, 0x7f, 0xa0, 0x65, 0x7a, 0xb4, 0xcf, 0xba, 0x00, 0xad, 0x92, 0x89, 0x95, 0xda, 0xfb, 0x29,
	0xb8, 0x3a, 0xb9, 0xc9, 0x7c, 0x0c, 0x2b, 0xe3, 0x4e, 0x80, 0x76, 0xf2, 0xff, 0xc8, 0x89, 0x7d,
	0x73, 0xdc, 0xb6, 0x4e, 0x7e, 0xd4, 0x8f, 0xa0, 0x1c, 0x69, 0x3d, 0x87, 0xcb, 0xa3, 0x3b, 0x0a,
	0x89, 0xa5, 0xc8, 0x87, 0xb8, 0x71, 0x87, 0xde, 0x57, 0x6f, 0xfb, 0xaa, 0x09, 0x2d, 0x91, 0x1b,
	0xd8, 0xc4, 0xf0, 0x6f, 0x1c, 0x10, 0x2a, 0x9d, 0xdb, 0xea, 0xd3, 0xf5, 0xe9, 0x1f, 0xab, 0xef,
	0xa8, 0xb6, 0x5b, 0xea, 0x2b, 0xf8, 0xdb, 0xc3, 0xf6, 0x22, 0xac, 0xf8, 0x44, 0xc8, 0x90, 0x62,
	0x75, 0xd6, 0x2e, 0xc1, 0xb9, 0x4c, 0xa4, 0xb1, 0x07, 0xff, 0x99, 0x38, 0x09, 0x11, 0x33, 0x2a,
	0x88, 0x5a, 0x65, 0x91, 0x78, 0x5e, 0xb1, 0xca, 0x25, 0x54, 0x40, 0x55, 0x89, 0x88, 0x10, 0x38,
	0x20, 0x3a, 0x84, 0x32, 0x2a, 0x60, 0x23, 0x05, 0xb0, 0xd2, 0x61, 0x94, 0x14, 0xcf, 0x61, 0x7c,
	0xe9, 0xc1, 0xaf, 0x2c, 0xfd, 0x16, 0x2c, 0x65, 0xb9, 0xdc, 0xf1, 0x5a, 0x74, 0x0a, 0xaa, 0x51,
	0xb3, 0x7b, 0xfe, 0x1f, 0x08, 0xb4, 0xd1, 0x86, 0x0b, 0xd9, 0x1d, 0x7f, 0x3f, 0xa8, 0xcd, 0x8f,
	0x00, 0x2e, 0x3e, 0x21, 0xc3, 0xe3, 0x90, 0xee, 0x13, 0x7e, 0x1c, 0x7a, 0xc4, 0x1c, 0xc2, 0x95,
	0x09, 0xd3, 0x30, 0xff, 0xfb, 0xc9, 0x97, 0x53, 0x6b, 0xde, 0x4d, 0xcc, 0xfc, 0x36, 0x8c, 0x26,
	0x30, 0x1f, 0xc0, 0x19, 0x75, 0x07, 0xb3, 0x7a, 0xa3, 0x6b, 0x6c, 0x74, 0xb5, 0xb5, 0x09, 0x95,
	0x42, 0xa0, 0xbd, 0x7d, 0x76, 0x69, 0x19, 0xe7, 0x97, 0x96, 0x71, 0x7d, 0x69, 0x81, 0xb7, 0xa9,
	0x05, 0x3e, 0xa4, 0x16, 0x38, 0x4d, 0x2d, 0x70, 0x96, 0x5a, 0xe0, 0x53, 0x6a, 0x81, 0xcf, 0xa9,
	0x65, 0x5c, 0xa7, 0x16, 0x78, 0x77, 0x65, 0x19, 0x67, 0x57, 0x96, 0x71, 0x7e, 0x65, 0x19, 0x2f,
	0x4a, 0x85, 0x9c, 0x3b, 0xa7, 0x7f, 0xa6, 0xf7, 0xbe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xe9,
	0x1d, 0xeb, 0x1a, 0x06, 0x00, 0x00,
}

func (this *TransferResultChunkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferResultChunkRequest)
	if !ok {
		that2, ok := that.(TransferResultChunkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	if that1.Destination == nil {
		if this.Destination != nil {
			return false
		}
	} else if this.Destination == nil {
		return false
	} else if !this.Destination.Equal(that1.Destination) {
		return false
	}
	if that1.Result == nil {
		if this.Result != nil {
			return false
		}
	} else if this.Result == nil {
		return false
	} else if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *TransferResultChunkRequest_GRPCSourceID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferResultChunkRequest_GRPCSourceID)
	if !ok {
		that2, ok := that.(TransferResultChunkRequest_GRPCSourceID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GRPCSourceID != that1.GRPCSourceID {
		return false
	}
	return true
}
func (this *TransferResultChunkRequest_TableName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferResultChunkRequest_TableName)
	if !ok {
		that2, ok := that.(TransferResultChunkRequest_TableName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableName != that1.TableName {
		return false
	}
	return true
}
func (this *TransferResultChunkRequest_RowBatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferResultChunkRequest_RowBatch)
	if !ok {
		that2, ok := that.(TransferResultChunkRequest_RowBatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RowBatch.Equal(that1.RowBatch) {
		return false
	}
	return true
}
func (this *TransferResultChunkRequest_ExecutionAndTimingInfo_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferResultChunkRequest_ExecutionAndTimingInfo_)
	if !ok {
		that2, ok := that.(TransferResultChunkRequest_ExecutionAndTimingInfo_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecutionAndTimingInfo.Equal(that1.ExecutionAndTimingInfo) {
		return false
	}
	return true
}
func (this *TransferResultChunkRequest_ExecutionAndTimingInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferResultChunkRequest_ExecutionAndTimingInfo)
	if !ok {
		that2, ok := that.(TransferResultChunkRequest_ExecutionAndTimingInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TimingInfo.Equal(that1.TimingInfo) {
		return false
	}
	if !this.ExecutionStats.Equal(that1.ExecutionStats) {
		return false
	}
	if len(this.AgentExecutionStats) != len(that1.AgentExecutionStats) {
		return false
	}
	for i := range this.AgentExecutionStats {
		if !this.AgentExecutionStats[i].Equal(that1.AgentExecutionStats[i]) {
			return false
		}
	}
	return true
}
func (this *TransferResultChunkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferResultChunkResponse)
	if !ok {
		that2, ok := that.(TransferResultChunkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *DoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoneRequest)
	if !ok {
		that2, ok := that.(DoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if len(this.AgentExecutionStats) != len(that1.AgentExecutionStats) {
		return false
	}
	for i := range this.AgentExecutionStats {
		if !this.AgentExecutionStats[i].Equal(that1.AgentExecutionStats[i]) {
			return false
		}
	}
	return true
}
func (this *DoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoneResponse)
	if !ok {
		that2, ok := that.(DoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *TransferResultChunkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&carnotpb.TransferResultChunkRequest{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	if this.Destination != nil {
		s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	}
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferResultChunkRequest_GRPCSourceID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&carnotpb.TransferResultChunkRequest_GRPCSourceID{` +
		`GRPCSourceID:` + fmt.Sprintf("%#v", this.GRPCSourceID) + `}`}, ", ")
	return s
}
func (this *TransferResultChunkRequest_TableName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&carnotpb.TransferResultChunkRequest_TableName{` +
		`TableName:` + fmt.Sprintf("%#v", this.TableName) + `}`}, ", ")
	return s
}
func (this *TransferResultChunkRequest_RowBatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&carnotpb.TransferResultChunkRequest_RowBatch{` +
		`RowBatch:` + fmt.Sprintf("%#v", this.RowBatch) + `}`}, ", ")
	return s
}
func (this *TransferResultChunkRequest_ExecutionAndTimingInfo_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&carnotpb.TransferResultChunkRequest_ExecutionAndTimingInfo_{` +
		`ExecutionAndTimingInfo:` + fmt.Sprintf("%#v", this.ExecutionAndTimingInfo) + `}`}, ", ")
	return s
}
func (this *TransferResultChunkRequest_ExecutionAndTimingInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&carnotpb.TransferResultChunkRequest_ExecutionAndTimingInfo{")
	if this.TimingInfo != nil {
		s = append(s, "TimingInfo: "+fmt.Sprintf("%#v", this.TimingInfo)+",\n")
	}
	if this.ExecutionStats != nil {
		s = append(s, "ExecutionStats: "+fmt.Sprintf("%#v", this.ExecutionStats)+",\n")
	}
	if this.AgentExecutionStats != nil {
		s = append(s, "AgentExecutionStats: "+fmt.Sprintf("%#v", this.AgentExecutionStats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferResultChunkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&carnotpb.TransferResultChunkResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DoneRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&carnotpb.DoneRequest{")
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.AgentExecutionStats != nil {
		s = append(s, "AgentExecutionStats: "+fmt.Sprintf("%#v", this.AgentExecutionStats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DoneResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&carnotpb.DoneResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCarnot(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KelvinServiceClient is the client API for KelvinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KelvinServiceClient interface {
	TransferResultChunk(ctx context.Context, opts ...grpc.CallOption) (KelvinService_TransferResultChunkClient, error)
	Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneResponse, error)
}

type kelvinServiceClient struct {
	cc *grpc.ClientConn
}

func NewKelvinServiceClient(cc *grpc.ClientConn) KelvinServiceClient {
	return &kelvinServiceClient{cc}
}

func (c *kelvinServiceClient) TransferResultChunk(ctx context.Context, opts ...grpc.CallOption) (KelvinService_TransferResultChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KelvinService_serviceDesc.Streams[0], "/pl.carnotpb.KelvinService/TransferResultChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &kelvinServiceTransferResultChunkClient{stream}
	return x, nil
}

type KelvinService_TransferResultChunkClient interface {
	Send(*TransferResultChunkRequest) error
	CloseAndRecv() (*TransferResultChunkResponse, error)
	grpc.ClientStream
}

type kelvinServiceTransferResultChunkClient struct {
	grpc.ClientStream
}

func (x *kelvinServiceTransferResultChunkClient) Send(m *TransferResultChunkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kelvinServiceTransferResultChunkClient) CloseAndRecv() (*TransferResultChunkResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransferResultChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kelvinServiceClient) Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneResponse, error) {
	out := new(DoneResponse)
	err := c.cc.Invoke(ctx, "/pl.carnotpb.KelvinService/Done", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KelvinServiceServer is the server API for KelvinService service.
type KelvinServiceServer interface {
	TransferResultChunk(KelvinService_TransferResultChunkServer) error
	Done(context.Context, *DoneRequest) (*DoneResponse, error)
}

// UnimplementedKelvinServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKelvinServiceServer struct {
}

func (*UnimplementedKelvinServiceServer) TransferResultChunk(srv KelvinService_TransferResultChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferResultChunk not implemented")
}
func (*UnimplementedKelvinServiceServer) Done(ctx context.Context, req *DoneRequest) (*DoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Done not implemented")
}

func RegisterKelvinServiceServer(s *grpc.Server, srv KelvinServiceServer) {
	s.RegisterService(&_KelvinService_serviceDesc, srv)
}

func _KelvinService_TransferResultChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KelvinServiceServer).TransferResultChunk(&kelvinServiceTransferResultChunkServer{stream})
}

type KelvinService_TransferResultChunkServer interface {
	SendAndClose(*TransferResultChunkResponse) error
	Recv() (*TransferResultChunkRequest, error)
	grpc.ServerStream
}

type kelvinServiceTransferResultChunkServer struct {
	grpc.ServerStream
}

func (x *kelvinServiceTransferResultChunkServer) SendAndClose(m *TransferResultChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kelvinServiceTransferResultChunkServer) Recv() (*TransferResultChunkRequest, error) {
	m := new(TransferResultChunkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KelvinService_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KelvinServiceServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.carnotpb.KelvinService/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KelvinServiceServer).Done(ctx, req.(*DoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KelvinService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.carnotpb.KelvinService",
	HandlerType: (*KelvinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Done",
			Handler:    _KelvinService_Done_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransferResultChunk",
			Handler:       _KelvinService_TransferResultChunk_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "src/carnotpb/carnot.proto",
}

func (m *TransferResultChunkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferResultChunkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferResultChunkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Destination != nil {
		{
			size := m.Destination.Size()
			i -= size
			if _, err := m.Destination.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.QueryID != nil {
		{
			size, err := m.QueryID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCarnot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCarnot(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferResultChunkRequest_GRPCSourceID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferResultChunkRequest_GRPCSourceID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCarnot(dAtA, i, uint64(m.GRPCSourceID))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *TransferResultChunkRequest_TableName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferResultChunkRequest_TableName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TableName)
	copy(dAtA[i:], m.TableName)
	i = encodeVarintCarnot(dAtA, i, uint64(len(m.TableName)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *TransferResultChunkRequest_RowBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferResultChunkRequest_RowBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RowBatch != nil {
		{
			size, err := m.RowBatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCarnot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferResultChunkRequest_ExecutionAndTimingInfo_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecutionAndTimingInfo != nil {
		{
			size, err := m.ExecutionAndTimingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCarnot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AgentExecutionStats) > 0 {
		for iNdEx := len(m.AgentExecutionStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AgentExecutionStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCarnot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ExecutionStats != nil {
		{
			size, err := m.ExecutionStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCarnot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TimingInfo != nil {
		{
			size, err := m.TimingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCarnot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferResultChunkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferResultChunkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferResultChunkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCarnot(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AgentExecutionStats) > 0 {
		for iNdEx := len(m.AgentExecutionStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AgentExecutionStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCarnot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCarnot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.QueryID != nil {
		{
			size, err := m.QueryID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCarnot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCarnot(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCarnot(dAtA []byte, offset int, v uint64) int {
	offset -= sovCarnot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransferResultChunkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCarnot(uint64(l))
	}
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovCarnot(uint64(l))
	}
	if m.Destination != nil {
		n += m.Destination.Size()
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *TransferResultChunkRequest_GRPCSourceID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCarnot(uint64(m.GRPCSourceID))
	return n
}
func (m *TransferResultChunkRequest_TableName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableName)
	n += 1 + l + sovCarnot(uint64(l))
	return n
}
func (m *TransferResultChunkRequest_RowBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RowBatch != nil {
		l = m.RowBatch.Size()
		n += 1 + l + sovCarnot(uint64(l))
	}
	return n
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionAndTimingInfo != nil {
		l = m.ExecutionAndTimingInfo.Size()
		n += 1 + l + sovCarnot(uint64(l))
	}
	return n
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimingInfo != nil {
		l = m.TimingInfo.Size()
		n += 1 + l + sovCarnot(uint64(l))
	}
	if m.ExecutionStats != nil {
		l = m.ExecutionStats.Size()
		n += 1 + l + sovCarnot(uint64(l))
	}
	if len(m.AgentExecutionStats) > 0 {
		for _, e := range m.AgentExecutionStats {
			l = e.Size()
			n += 1 + l + sovCarnot(uint64(l))
		}
	}
	return n
}

func (m *TransferResultChunkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCarnot(uint64(l))
	}
	return n
}

func (m *DoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovCarnot(uint64(l))
	}
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovCarnot(uint64(l))
	}
	if len(m.AgentExecutionStats) > 0 {
		for _, e := range m.AgentExecutionStats {
			l = e.Size()
			n += 1 + l + sovCarnot(uint64(l))
		}
	}
	return n
}

func (m *DoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCarnot(uint64(l))
	}
	return n
}

func sovCarnot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCarnot(x uint64) (n int) {
	return sovCarnot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TransferResultChunkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferResultChunkRequest{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "proto1.UUID", 1) + `,`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferResultChunkRequest_GRPCSourceID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferResultChunkRequest_GRPCSourceID{`,
		`GRPCSourceID:` + fmt.Sprintf("%v", this.GRPCSourceID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferResultChunkRequest_TableName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferResultChunkRequest_TableName{`,
		`TableName:` + fmt.Sprintf("%v", this.TableName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferResultChunkRequest_RowBatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferResultChunkRequest_RowBatch{`,
		`RowBatch:` + strings.Replace(fmt.Sprintf("%v", this.RowBatch), "RowBatchData", "proto2.RowBatchData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferResultChunkRequest_ExecutionAndTimingInfo_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferResultChunkRequest_ExecutionAndTimingInfo_{`,
		`ExecutionAndTimingInfo:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionAndTimingInfo), "TransferResultChunkRequest_ExecutionAndTimingInfo", "TransferResultChunkRequest_ExecutionAndTimingInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferResultChunkRequest_ExecutionAndTimingInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAgentExecutionStats := "[]*AgentExecutionStats{"
	for _, f := range this.AgentExecutionStats {
		repeatedStringForAgentExecutionStats += strings.Replace(fmt.Sprintf("%v", f), "AgentExecutionStats", "queryresultspb.AgentExecutionStats", 1) + ","
	}
	repeatedStringForAgentExecutionStats += "}"
	s := strings.Join([]string{`&TransferResultChunkRequest_ExecutionAndTimingInfo{`,
		`TimingInfo:` + strings.Replace(fmt.Sprintf("%v", this.TimingInfo), "QueryTimingInfo", "queryresultspb.QueryTimingInfo", 1) + `,`,
		`ExecutionStats:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionStats), "QueryExecutionStats", "queryresultspb.QueryExecutionStats", 1) + `,`,
		`AgentExecutionStats:` + repeatedStringForAgentExecutionStats + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferResultChunkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferResultChunkResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoneRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAgentExecutionStats := "[]*AgentExecutionStats{"
	for _, f := range this.AgentExecutionStats {
		repeatedStringForAgentExecutionStats += strings.Replace(fmt.Sprintf("%v", f), "AgentExecutionStats", "queryresultspb.AgentExecutionStats", 1) + ","
	}
	repeatedStringForAgentExecutionStats += "}"
	s := strings.Join([]string{`&DoneRequest{`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "proto1.UUID", 1) + `,`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`AgentExecutionStats:` + repeatedStringForAgentExecutionStats + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoneResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoneResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCarnot(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TransferResultChunkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarnot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferResultChunkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferResultChunkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &proto1.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GRPCSourceID", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Destination = &TransferResultChunkRequest_GRPCSourceID{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = &TransferResultChunkRequest_TableName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &proto2.RowBatchData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &TransferResultChunkRequest_RowBatch{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionAndTimingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransferResultChunkRequest_ExecutionAndTimingInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &TransferResultChunkRequest_ExecutionAndTimingInfo_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarnot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferResultChunkRequest_ExecutionAndTimingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarnot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionAndTimingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionAndTimingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimingInfo == nil {
				m.TimingInfo = &queryresultspb.QueryTimingInfo{}
			}
			if err := m.TimingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionStats == nil {
				m.ExecutionStats = &queryresultspb.QueryExecutionStats{}
			}
			if err := m.ExecutionStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentExecutionStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentExecutionStats = append(m.AgentExecutionStats, &queryresultspb.AgentExecutionStats{})
			if err := m.AgentExecutionStats[len(m.AgentExecutionStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarnot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferResultChunkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarnot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferResultChunkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferResultChunkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarnot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarnot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &proto1.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentExecutionStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentExecutionStats = append(m.AgentExecutionStats, &queryresultspb.AgentExecutionStats{})
			if err := m.AgentExecutionStats[len(m.AgentExecutionStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarnot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCarnot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCarnot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCarnot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCarnot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCarnot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCarnot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCarnot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCarnot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCarnot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCarnot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCarnot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCarnot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCarnot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCarnot = fmt.Errorf("proto: unexpected end of group")
)
