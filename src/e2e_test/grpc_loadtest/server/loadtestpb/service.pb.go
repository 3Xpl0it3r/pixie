// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/e2e_test/grpc_loadtest/server/loadtestpb/service.proto

package loadtestpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UnaryRequest struct {
	SeqId          int64  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Payload        string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	BytesRequested int32  `protobuf:"varint,3,opt,name=bytes_requested,json=bytesRequested,proto3" json:"bytes_requested,omitempty"`
}

func (m *UnaryRequest) Reset()      { *m = UnaryRequest{} }
func (*UnaryRequest) ProtoMessage() {}
func (*UnaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b852456138b0ec, []int{0}
}
func (m *UnaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnaryRequest.Merge(m, src)
}
func (m *UnaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnaryRequest proto.InternalMessageInfo

func (m *UnaryRequest) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *UnaryRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *UnaryRequest) GetBytesRequested() int32 {
	if m != nil {
		return m.BytesRequested
	}
	return 0
}

type UnaryReply struct {
	SeqId   int64  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *UnaryReply) Reset()      { *m = UnaryReply{} }
func (*UnaryReply) ProtoMessage() {}
func (*UnaryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b852456138b0ec, []int{1}
}
func (m *UnaryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnaryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnaryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnaryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnaryReply.Merge(m, src)
}
func (m *UnaryReply) XXX_Size() int {
	return m.Size()
}
func (m *UnaryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UnaryReply.DiscardUnknown(m)
}

var xxx_messageInfo_UnaryReply proto.InternalMessageInfo

func (m *UnaryReply) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *UnaryReply) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type ClientStreamingRequest struct {
	SeqId          int64  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	StreamSeqId    int64  `protobuf:"varint,2,opt,name=stream_seq_id,json=streamSeqId,proto3" json:"stream_seq_id,omitempty"`
	Payload        string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	BytesRequested int32  `protobuf:"varint,4,opt,name=bytes_requested,json=bytesRequested,proto3" json:"bytes_requested,omitempty"`
}

func (m *ClientStreamingRequest) Reset()      { *m = ClientStreamingRequest{} }
func (*ClientStreamingRequest) ProtoMessage() {}
func (*ClientStreamingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b852456138b0ec, []int{2}
}
func (m *ClientStreamingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientStreamingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientStreamingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientStreamingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientStreamingRequest.Merge(m, src)
}
func (m *ClientStreamingRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClientStreamingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientStreamingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientStreamingRequest proto.InternalMessageInfo

func (m *ClientStreamingRequest) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *ClientStreamingRequest) GetStreamSeqId() int64 {
	if m != nil {
		return m.StreamSeqId
	}
	return 0
}

func (m *ClientStreamingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *ClientStreamingRequest) GetBytesRequested() int32 {
	if m != nil {
		return m.BytesRequested
	}
	return 0
}

type ClientStreamingReply struct {
	SeqId   int64  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ClientStreamingReply) Reset()      { *m = ClientStreamingReply{} }
func (*ClientStreamingReply) ProtoMessage() {}
func (*ClientStreamingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b852456138b0ec, []int{3}
}
func (m *ClientStreamingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientStreamingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientStreamingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientStreamingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientStreamingReply.Merge(m, src)
}
func (m *ClientStreamingReply) XXX_Size() int {
	return m.Size()
}
func (m *ClientStreamingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientStreamingReply.DiscardUnknown(m)
}

var xxx_messageInfo_ClientStreamingReply proto.InternalMessageInfo

func (m *ClientStreamingReply) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *ClientStreamingReply) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type ServerStreamingRequest struct {
	SeqId                    int64  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Payload                  string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	MessagesRequested        int32  `protobuf:"varint,3,opt,name=messages_requested,json=messagesRequested,proto3" json:"messages_requested,omitempty"`
	BytesRequestedPerMessage int32  `protobuf:"varint,4,opt,name=bytes_requested_per_message,json=bytesRequestedPerMessage,proto3" json:"bytes_requested_per_message,omitempty"`
}

func (m *ServerStreamingRequest) Reset()      { *m = ServerStreamingRequest{} }
func (*ServerStreamingRequest) ProtoMessage() {}
func (*ServerStreamingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b852456138b0ec, []int{4}
}
func (m *ServerStreamingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerStreamingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerStreamingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerStreamingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerStreamingRequest.Merge(m, src)
}
func (m *ServerStreamingRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServerStreamingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerStreamingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServerStreamingRequest proto.InternalMessageInfo

func (m *ServerStreamingRequest) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *ServerStreamingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *ServerStreamingRequest) GetMessagesRequested() int32 {
	if m != nil {
		return m.MessagesRequested
	}
	return 0
}

func (m *ServerStreamingRequest) GetBytesRequestedPerMessage() int32 {
	if m != nil {
		return m.BytesRequestedPerMessage
	}
	return 0
}

type ServerStreamingReply struct {
	SeqId       int64  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	StreamSeqId int64  `protobuf:"varint,2,opt,name=stream_seq_id,json=streamSeqId,proto3" json:"stream_seq_id,omitempty"`
	Payload     string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ServerStreamingReply) Reset()      { *m = ServerStreamingReply{} }
func (*ServerStreamingReply) ProtoMessage() {}
func (*ServerStreamingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b852456138b0ec, []int{5}
}
func (m *ServerStreamingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerStreamingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerStreamingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerStreamingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerStreamingReply.Merge(m, src)
}
func (m *ServerStreamingReply) XXX_Size() int {
	return m.Size()
}
func (m *ServerStreamingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerStreamingReply.DiscardUnknown(m)
}

var xxx_messageInfo_ServerStreamingReply proto.InternalMessageInfo

func (m *ServerStreamingReply) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *ServerStreamingReply) GetStreamSeqId() int64 {
	if m != nil {
		return m.StreamSeqId
	}
	return 0
}

func (m *ServerStreamingReply) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type BidirectionalStreamingRequest struct {
	SeqId                     int64  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	StreamSeqIdClient         int64  `protobuf:"varint,2,opt,name=stream_seq_id_client,json=streamSeqIdClient,proto3" json:"stream_seq_id_client,omitempty"`
	Payload                   string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	BytesRequestedNextMessage int32  `protobuf:"varint,4,opt,name=bytes_requested_next_message,json=bytesRequestedNextMessage,proto3" json:"bytes_requested_next_message,omitempty"`
}

func (m *BidirectionalStreamingRequest) Reset()      { *m = BidirectionalStreamingRequest{} }
func (*BidirectionalStreamingRequest) ProtoMessage() {}
func (*BidirectionalStreamingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b852456138b0ec, []int{6}
}
func (m *BidirectionalStreamingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidirectionalStreamingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidirectionalStreamingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidirectionalStreamingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidirectionalStreamingRequest.Merge(m, src)
}
func (m *BidirectionalStreamingRequest) XXX_Size() int {
	return m.Size()
}
func (m *BidirectionalStreamingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BidirectionalStreamingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BidirectionalStreamingRequest proto.InternalMessageInfo

func (m *BidirectionalStreamingRequest) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *BidirectionalStreamingRequest) GetStreamSeqIdClient() int64 {
	if m != nil {
		return m.StreamSeqIdClient
	}
	return 0
}

func (m *BidirectionalStreamingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *BidirectionalStreamingRequest) GetBytesRequestedNextMessage() int32 {
	if m != nil {
		return m.BytesRequestedNextMessage
	}
	return 0
}

type BidirectionalStreamingReply struct {
	SeqId             int64  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	StreamSeqIdServer int64  `protobuf:"varint,2,opt,name=stream_seq_id_server,json=streamSeqIdServer,proto3" json:"stream_seq_id_server,omitempty"`
	Payload           string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *BidirectionalStreamingReply) Reset()      { *m = BidirectionalStreamingReply{} }
func (*BidirectionalStreamingReply) ProtoMessage() {}
func (*BidirectionalStreamingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b852456138b0ec, []int{7}
}
func (m *BidirectionalStreamingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidirectionalStreamingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidirectionalStreamingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidirectionalStreamingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidirectionalStreamingReply.Merge(m, src)
}
func (m *BidirectionalStreamingReply) XXX_Size() int {
	return m.Size()
}
func (m *BidirectionalStreamingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BidirectionalStreamingReply.DiscardUnknown(m)
}

var xxx_messageInfo_BidirectionalStreamingReply proto.InternalMessageInfo

func (m *BidirectionalStreamingReply) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *BidirectionalStreamingReply) GetStreamSeqIdServer() int64 {
	if m != nil {
		return m.StreamSeqIdServer
	}
	return 0
}

func (m *BidirectionalStreamingReply) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*UnaryRequest)(nil), "px.e2e_test.grpc.server.UnaryRequest")
	proto.RegisterType((*UnaryReply)(nil), "px.e2e_test.grpc.server.UnaryReply")
	proto.RegisterType((*ClientStreamingRequest)(nil), "px.e2e_test.grpc.server.ClientStreamingRequest")
	proto.RegisterType((*ClientStreamingReply)(nil), "px.e2e_test.grpc.server.ClientStreamingReply")
	proto.RegisterType((*ServerStreamingRequest)(nil), "px.e2e_test.grpc.server.ServerStreamingRequest")
	proto.RegisterType((*ServerStreamingReply)(nil), "px.e2e_test.grpc.server.ServerStreamingReply")
	proto.RegisterType((*BidirectionalStreamingRequest)(nil), "px.e2e_test.grpc.server.BidirectionalStreamingRequest")
	proto.RegisterType((*BidirectionalStreamingReply)(nil), "px.e2e_test.grpc.server.BidirectionalStreamingReply")
}

func init() {
	proto.RegisterFile("src/e2e_test/grpc_loadtest/server/loadtestpb/service.proto", fileDescriptor_e4b852456138b0ec)
}

var fileDescriptor_e4b852456138b0ec = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x3d, 0x8f, 0xd3, 0x40,
	0x10, 0xf5, 0x5e, 0xc8, 0x21, 0x86, 0x8f, 0xd3, 0xad, 0x42, 0x08, 0x39, 0x58, 0x45, 0x46, 0x88,
	0x34, 0xe7, 0x9c, 0x0e, 0x44, 0x81, 0x74, 0x02, 0x1d, 0x05, 0x42, 0x02, 0x84, 0x12, 0x68, 0x68,
	0x2c, 0x27, 0x1e, 0x05, 0x8b, 0x5c, 0xec, 0xec, 0x2e, 0x28, 0xae, 0xa0, 0xa6, 0xa2, 0xe2, 0x37,
	0xf0, 0x0f, 0xe8, 0xa9, 0x28, 0x53, 0xa6, 0x24, 0x4e, 0x43, 0x79, 0x3f, 0x01, 0x79, 0x6d, 0xc3,
	0xc5, 0xb1, 0x9d, 0x1c, 0x57, 0xee, 0xcc, 0xce, 0xbe, 0x79, 0xef, 0xcd, 0xd8, 0xf0, 0x40, 0xf0,
	0x5e, 0x0b, 0xf7, 0xd1, 0x94, 0x28, 0x64, 0xab, 0xcf, 0xbd, 0x9e, 0x39, 0x70, 0x2d, 0x5b, 0x9d,
	0x04, 0xf2, 0x0f, 0xc8, 0x5b, 0xc9, 0xd9, 0xeb, 0xaa, 0x88, 0xd3, 0x43, 0xc3, 0xe3, 0xae, 0x74,
	0xe9, 0x35, 0x6f, 0x6c, 0x24, 0xa5, 0x46, 0x58, 0x6a, 0x44, 0x15, 0xfa, 0x5b, 0xb8, 0xf4, 0x7a,
	0x68, 0x71, 0xbf, 0x8d, 0xa3, 0xf7, 0x28, 0x24, 0xbd, 0x0a, 0x9b, 0x02, 0x47, 0xa6, 0x63, 0xd7,
	0x48, 0x83, 0x34, 0x4b, 0xed, 0xb2, 0xc0, 0xd1, 0x53, 0x9b, 0xd6, 0xe0, 0xbc, 0x67, 0xf9, 0xe1,
	0xf3, 0xb5, 0x8d, 0x06, 0x69, 0x5e, 0x68, 0x27, 0x47, 0x7a, 0x07, 0xb6, 0xba, 0xbe, 0x44, 0x61,
	0xf2, 0xe8, 0x05, 0xb4, 0x6b, 0xa5, 0x06, 0x69, 0x96, 0xdb, 0x57, 0x54, 0xb8, 0x9d, 0x44, 0xf5,
	0x03, 0x80, 0x18, 0xc9, 0x1b, 0xf8, 0xa7, 0xc6, 0xd1, 0xbf, 0x12, 0xa8, 0x3e, 0x1e, 0x38, 0x38,
	0x94, 0x1d, 0xc9, 0xd1, 0x3a, 0x72, 0x86, 0xfd, 0x15, 0x3d, 0xeb, 0x70, 0x59, 0xa8, 0xab, 0x66,
	0x9c, 0xdd, 0x50, 0xd9, 0x8b, 0x51, 0xb0, 0x93, 0xc6, 0x2b, 0xad, 0xe4, 0x75, 0x2e, 0x93, 0xd7,
	0x13, 0xa8, 0x2c, 0xf5, 0xf5, 0x5f, 0x0c, 0xbf, 0x13, 0xa8, 0x76, 0x94, 0x2b, 0xeb, 0x32, 0xcc,
	0x77, 0x65, 0x17, 0xe8, 0x11, 0x0a, 0x61, 0xf5, 0x33, 0x8c, 0xd9, 0x4e, 0x32, 0x7f, 0x39, 0xd0,
	0x03, 0xd8, 0x49, 0x91, 0x35, 0x3d, 0xe4, 0x66, 0x7c, 0x31, 0x26, 0x5e, 0x5b, 0x24, 0xfe, 0x12,
	0xf9, 0xf3, 0x28, 0xaf, 0xbf, 0x83, 0xca, 0x52, 0xe3, 0x05, 0x12, 0x9c, 0xc9, 0x18, 0xfd, 0x07,
	0x81, 0x9b, 0x87, 0x8e, 0xed, 0x70, 0xec, 0x49, 0xc7, 0x1d, 0x5a, 0x83, 0x75, 0xd5, 0x6a, 0x41,
	0x65, 0x01, 0xd6, 0xec, 0x29, 0xdb, 0x62, 0xf4, 0xed, 0x13, 0xe8, 0x91, 0x9f, 0x05, 0xc3, 0xf1,
	0x10, 0x6e, 0xa4, 0xf5, 0x1a, 0xe2, 0x58, 0xa6, 0x04, 0xbb, 0xbe, 0x28, 0xd8, 0x0b, 0x1c, 0xcb,
	0x44, 0xb1, 0x8f, 0xb0, 0x93, 0xc7, 0xa1, 0x40, 0xb8, 0x25, 0x06, 0xd1, 0x12, 0x67, 0x30, 0x88,
	0xec, 0xc8, 0x67, 0xb0, 0x3f, 0x2d, 0x01, 0x3c, 0x73, 0x2d, 0xfb, 0x55, 0xd8, 0x1a, 0xa7, 0x1d,
	0x28, 0xab, 0xe5, 0xa4, 0xb7, 0x8d, 0x9c, 0x2f, 0x85, 0x71, 0xf2, 0x33, 0x51, 0xbf, 0xb5, 0xea,
	0x5a, 0xc8, 0x42, 0xc0, 0x56, 0x6a, 0x33, 0x68, 0x2b, 0xb7, 0x2e, 0x7b, 0xb7, 0xeb, 0xbb, 0xeb,
	0x17, 0x78, 0x03, 0xbf, 0x49, 0x42, 0xd0, 0xd4, 0x2c, 0x16, 0x80, 0x66, 0xaf, 0x5b, 0x01, 0x68,
	0xd6, 0x98, 0xef, 0x11, 0xfa, 0x99, 0x40, 0x35, 0xdb, 0x4f, 0x7a, 0x3f, 0xf7, 0xad, 0xc2, 0x21,
	0xae, 0xdf, 0x3b, 0x75, 0x9d, 0xe2, 0xbf, 0x47, 0x0e, 0x1f, 0x4d, 0x66, 0x4c, 0x9b, 0xce, 0x98,
	0x76, 0x3c, 0x63, 0xe4, 0x53, 0xc0, 0xc8, 0xb7, 0x80, 0x91, 0x9f, 0x01, 0x23, 0x93, 0x80, 0x91,
	0x5f, 0x01, 0x23, 0xbf, 0x03, 0xa6, 0x1d, 0x07, 0x8c, 0x7c, 0x99, 0x33, 0x6d, 0x32, 0x67, 0xda,
	0x74, 0xce, 0xb4, 0x37, 0xf0, 0xef, 0xdf, 0xd1, 0xdd, 0x54, 0x3f, 0x8d, 0xbb, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x63, 0x5f, 0x6e, 0x22, 0x72, 0x06, 0x00, 0x00,
}

func (this *UnaryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnaryRequest)
	if !ok {
		that2, ok := that.(UnaryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqId != that1.SeqId {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	if this.BytesRequested != that1.BytesRequested {
		return false
	}
	return true
}
func (this *UnaryReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnaryReply)
	if !ok {
		that2, ok := that.(UnaryReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqId != that1.SeqId {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	return true
}
func (this *ClientStreamingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientStreamingRequest)
	if !ok {
		that2, ok := that.(ClientStreamingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqId != that1.SeqId {
		return false
	}
	if this.StreamSeqId != that1.StreamSeqId {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	if this.BytesRequested != that1.BytesRequested {
		return false
	}
	return true
}
func (this *ClientStreamingReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientStreamingReply)
	if !ok {
		that2, ok := that.(ClientStreamingReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqId != that1.SeqId {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	return true
}
func (this *ServerStreamingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerStreamingRequest)
	if !ok {
		that2, ok := that.(ServerStreamingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqId != that1.SeqId {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	if this.MessagesRequested != that1.MessagesRequested {
		return false
	}
	if this.BytesRequestedPerMessage != that1.BytesRequestedPerMessage {
		return false
	}
	return true
}
func (this *ServerStreamingReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerStreamingReply)
	if !ok {
		that2, ok := that.(ServerStreamingReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqId != that1.SeqId {
		return false
	}
	if this.StreamSeqId != that1.StreamSeqId {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	return true
}
func (this *BidirectionalStreamingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BidirectionalStreamingRequest)
	if !ok {
		that2, ok := that.(BidirectionalStreamingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqId != that1.SeqId {
		return false
	}
	if this.StreamSeqIdClient != that1.StreamSeqIdClient {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	if this.BytesRequestedNextMessage != that1.BytesRequestedNextMessage {
		return false
	}
	return true
}
func (this *BidirectionalStreamingReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BidirectionalStreamingReply)
	if !ok {
		that2, ok := that.(BidirectionalStreamingReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqId != that1.SeqId {
		return false
	}
	if this.StreamSeqIdServer != that1.StreamSeqIdServer {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	return true
}
func (this *UnaryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&loadtestpb.UnaryRequest{")
	s = append(s, "SeqId: "+fmt.Sprintf("%#v", this.SeqId)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "BytesRequested: "+fmt.Sprintf("%#v", this.BytesRequested)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnaryReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&loadtestpb.UnaryReply{")
	s = append(s, "SeqId: "+fmt.Sprintf("%#v", this.SeqId)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientStreamingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&loadtestpb.ClientStreamingRequest{")
	s = append(s, "SeqId: "+fmt.Sprintf("%#v", this.SeqId)+",\n")
	s = append(s, "StreamSeqId: "+fmt.Sprintf("%#v", this.StreamSeqId)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "BytesRequested: "+fmt.Sprintf("%#v", this.BytesRequested)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientStreamingReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&loadtestpb.ClientStreamingReply{")
	s = append(s, "SeqId: "+fmt.Sprintf("%#v", this.SeqId)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerStreamingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&loadtestpb.ServerStreamingRequest{")
	s = append(s, "SeqId: "+fmt.Sprintf("%#v", this.SeqId)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "MessagesRequested: "+fmt.Sprintf("%#v", this.MessagesRequested)+",\n")
	s = append(s, "BytesRequestedPerMessage: "+fmt.Sprintf("%#v", this.BytesRequestedPerMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerStreamingReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&loadtestpb.ServerStreamingReply{")
	s = append(s, "SeqId: "+fmt.Sprintf("%#v", this.SeqId)+",\n")
	s = append(s, "StreamSeqId: "+fmt.Sprintf("%#v", this.StreamSeqId)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BidirectionalStreamingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&loadtestpb.BidirectionalStreamingRequest{")
	s = append(s, "SeqId: "+fmt.Sprintf("%#v", this.SeqId)+",\n")
	s = append(s, "StreamSeqIdClient: "+fmt.Sprintf("%#v", this.StreamSeqIdClient)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "BytesRequestedNextMessage: "+fmt.Sprintf("%#v", this.BytesRequestedNextMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BidirectionalStreamingReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&loadtestpb.BidirectionalStreamingReply{")
	s = append(s, "SeqId: "+fmt.Sprintf("%#v", this.SeqId)+",\n")
	s = append(s, "StreamSeqIdServer: "+fmt.Sprintf("%#v", this.StreamSeqIdServer)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoadTesterClient is the client API for LoadTester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoadTesterClient interface {
	Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryReply, error)
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (LoadTester_ClientStreamingClient, error)
	ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (LoadTester_ServerStreamingClient, error)
	BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (LoadTester_BidirectionalStreamingClient, error)
}

type loadTesterClient struct {
	cc *grpc.ClientConn
}

func NewLoadTesterClient(cc *grpc.ClientConn) LoadTesterClient {
	return &loadTesterClient{cc}
}

func (c *loadTesterClient) Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryReply, error) {
	out := new(UnaryReply)
	err := c.cc.Invoke(ctx, "/px.e2e_test.grpc.server.LoadTester/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadTesterClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (LoadTester_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LoadTester_serviceDesc.Streams[0], "/px.e2e_test.grpc.server.LoadTester/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &loadTesterClientStreamingClient{stream}
	return x, nil
}

type LoadTester_ClientStreamingClient interface {
	Send(*ClientStreamingRequest) error
	CloseAndRecv() (*ClientStreamingReply, error)
	grpc.ClientStream
}

type loadTesterClientStreamingClient struct {
	grpc.ClientStream
}

func (x *loadTesterClientStreamingClient) Send(m *ClientStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loadTesterClientStreamingClient) CloseAndRecv() (*ClientStreamingReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loadTesterClient) ServerStreaming(ctx context.Context, in *ServerStreamingRequest, opts ...grpc.CallOption) (LoadTester_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LoadTester_serviceDesc.Streams[1], "/px.e2e_test.grpc.server.LoadTester/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &loadTesterServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LoadTester_ServerStreamingClient interface {
	Recv() (*ServerStreamingReply, error)
	grpc.ClientStream
}

type loadTesterServerStreamingClient struct {
	grpc.ClientStream
}

func (x *loadTesterServerStreamingClient) Recv() (*ServerStreamingReply, error) {
	m := new(ServerStreamingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *loadTesterClient) BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (LoadTester_BidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LoadTester_serviceDesc.Streams[2], "/px.e2e_test.grpc.server.LoadTester/BidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &loadTesterBidirectionalStreamingClient{stream}
	return x, nil
}

type LoadTester_BidirectionalStreamingClient interface {
	Send(*BidirectionalStreamingRequest) error
	Recv() (*BidirectionalStreamingReply, error)
	grpc.ClientStream
}

type loadTesterBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *loadTesterBidirectionalStreamingClient) Send(m *BidirectionalStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loadTesterBidirectionalStreamingClient) Recv() (*BidirectionalStreamingReply, error) {
	m := new(BidirectionalStreamingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoadTesterServer is the server API for LoadTester service.
type LoadTesterServer interface {
	Unary(context.Context, *UnaryRequest) (*UnaryReply, error)
	ClientStreaming(LoadTester_ClientStreamingServer) error
	ServerStreaming(*ServerStreamingRequest, LoadTester_ServerStreamingServer) error
	BidirectionalStreaming(LoadTester_BidirectionalStreamingServer) error
}

// UnimplementedLoadTesterServer can be embedded to have forward compatible implementations.
type UnimplementedLoadTesterServer struct {
}

func (*UnimplementedLoadTesterServer) Unary(ctx context.Context, req *UnaryRequest) (*UnaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (*UnimplementedLoadTesterServer) ClientStreaming(srv LoadTester_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (*UnimplementedLoadTesterServer) ServerStreaming(req *ServerStreamingRequest, srv LoadTester_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (*UnimplementedLoadTesterServer) BidirectionalStreaming(srv LoadTester_BidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreaming not implemented")
}

func RegisterLoadTesterServer(s *grpc.Server, srv LoadTesterServer) {
	s.RegisterService(&_LoadTester_serviceDesc, srv)
}

func _LoadTester_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadTesterServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.e2e_test.grpc.server.LoadTester/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadTesterServer).Unary(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadTester_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoadTesterServer).ClientStreaming(&loadTesterClientStreamingServer{stream})
}

type LoadTester_ClientStreamingServer interface {
	SendAndClose(*ClientStreamingReply) error
	Recv() (*ClientStreamingRequest, error)
	grpc.ServerStream
}

type loadTesterClientStreamingServer struct {
	grpc.ServerStream
}

func (x *loadTesterClientStreamingServer) SendAndClose(m *ClientStreamingReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loadTesterClientStreamingServer) Recv() (*ClientStreamingRequest, error) {
	m := new(ClientStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LoadTester_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoadTesterServer).ServerStreaming(m, &loadTesterServerStreamingServer{stream})
}

type LoadTester_ServerStreamingServer interface {
	Send(*ServerStreamingReply) error
	grpc.ServerStream
}

type loadTesterServerStreamingServer struct {
	grpc.ServerStream
}

func (x *loadTesterServerStreamingServer) Send(m *ServerStreamingReply) error {
	return x.ServerStream.SendMsg(m)
}

func _LoadTester_BidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoadTesterServer).BidirectionalStreaming(&loadTesterBidirectionalStreamingServer{stream})
}

type LoadTester_BidirectionalStreamingServer interface {
	Send(*BidirectionalStreamingReply) error
	Recv() (*BidirectionalStreamingRequest, error)
	grpc.ServerStream
}

type loadTesterBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *loadTesterBidirectionalStreamingServer) Send(m *BidirectionalStreamingReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loadTesterBidirectionalStreamingServer) Recv() (*BidirectionalStreamingRequest, error) {
	m := new(BidirectionalStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LoadTester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.e2e_test.grpc.server.LoadTester",
	HandlerType: (*LoadTesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _LoadTester_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreaming",
			Handler:       _LoadTester_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreaming",
			Handler:       _LoadTester_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStreaming",
			Handler:       _LoadTester_BidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/e2e_test/grpc_loadtest/server/loadtestpb/service.proto",
}

func (m *UnaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BytesRequested != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BytesRequested))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintService(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnaryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnaryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnaryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintService(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientStreamingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientStreamingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientStreamingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BytesRequested != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BytesRequested))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintService(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StreamSeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.StreamSeqId))
		i--
		dAtA[i] = 0x10
	}
	if m.SeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientStreamingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientStreamingReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientStreamingReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintService(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerStreamingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerStreamingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerStreamingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BytesRequestedPerMessage != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BytesRequestedPerMessage))
		i--
		dAtA[i] = 0x20
	}
	if m.MessagesRequested != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.MessagesRequested))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintService(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerStreamingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerStreamingReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerStreamingReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintService(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StreamSeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.StreamSeqId))
		i--
		dAtA[i] = 0x10
	}
	if m.SeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BidirectionalStreamingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidirectionalStreamingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidirectionalStreamingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BytesRequestedNextMessage != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BytesRequestedNextMessage))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintService(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StreamSeqIdClient != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.StreamSeqIdClient))
		i--
		dAtA[i] = 0x10
	}
	if m.SeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BidirectionalStreamingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidirectionalStreamingReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidirectionalStreamingReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintService(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StreamSeqIdServer != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.StreamSeqIdServer))
		i--
		dAtA[i] = 0x10
	}
	if m.SeqId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UnaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqId != 0 {
		n += 1 + sovService(uint64(m.SeqId))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.BytesRequested != 0 {
		n += 1 + sovService(uint64(m.BytesRequested))
	}
	return n
}

func (m *UnaryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqId != 0 {
		n += 1 + sovService(uint64(m.SeqId))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ClientStreamingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqId != 0 {
		n += 1 + sovService(uint64(m.SeqId))
	}
	if m.StreamSeqId != 0 {
		n += 1 + sovService(uint64(m.StreamSeqId))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.BytesRequested != 0 {
		n += 1 + sovService(uint64(m.BytesRequested))
	}
	return n
}

func (m *ClientStreamingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqId != 0 {
		n += 1 + sovService(uint64(m.SeqId))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ServerStreamingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqId != 0 {
		n += 1 + sovService(uint64(m.SeqId))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.MessagesRequested != 0 {
		n += 1 + sovService(uint64(m.MessagesRequested))
	}
	if m.BytesRequestedPerMessage != 0 {
		n += 1 + sovService(uint64(m.BytesRequestedPerMessage))
	}
	return n
}

func (m *ServerStreamingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqId != 0 {
		n += 1 + sovService(uint64(m.SeqId))
	}
	if m.StreamSeqId != 0 {
		n += 1 + sovService(uint64(m.StreamSeqId))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *BidirectionalStreamingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqId != 0 {
		n += 1 + sovService(uint64(m.SeqId))
	}
	if m.StreamSeqIdClient != 0 {
		n += 1 + sovService(uint64(m.StreamSeqIdClient))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.BytesRequestedNextMessage != 0 {
		n += 1 + sovService(uint64(m.BytesRequestedNextMessage))
	}
	return n
}

func (m *BidirectionalStreamingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqId != 0 {
		n += 1 + sovService(uint64(m.SeqId))
	}
	if m.StreamSeqIdServer != 0 {
		n += 1 + sovService(uint64(m.StreamSeqIdServer))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UnaryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnaryRequest{`,
		`SeqId:` + fmt.Sprintf("%v", this.SeqId) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`BytesRequested:` + fmt.Sprintf("%v", this.BytesRequested) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnaryReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnaryReply{`,
		`SeqId:` + fmt.Sprintf("%v", this.SeqId) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientStreamingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientStreamingRequest{`,
		`SeqId:` + fmt.Sprintf("%v", this.SeqId) + `,`,
		`StreamSeqId:` + fmt.Sprintf("%v", this.StreamSeqId) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`BytesRequested:` + fmt.Sprintf("%v", this.BytesRequested) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientStreamingReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientStreamingReply{`,
		`SeqId:` + fmt.Sprintf("%v", this.SeqId) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerStreamingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerStreamingRequest{`,
		`SeqId:` + fmt.Sprintf("%v", this.SeqId) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`MessagesRequested:` + fmt.Sprintf("%v", this.MessagesRequested) + `,`,
		`BytesRequestedPerMessage:` + fmt.Sprintf("%v", this.BytesRequestedPerMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerStreamingReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerStreamingReply{`,
		`SeqId:` + fmt.Sprintf("%v", this.SeqId) + `,`,
		`StreamSeqId:` + fmt.Sprintf("%v", this.StreamSeqId) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BidirectionalStreamingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BidirectionalStreamingRequest{`,
		`SeqId:` + fmt.Sprintf("%v", this.SeqId) + `,`,
		`StreamSeqIdClient:` + fmt.Sprintf("%v", this.StreamSeqIdClient) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`BytesRequestedNextMessage:` + fmt.Sprintf("%v", this.BytesRequestedNextMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BidirectionalStreamingReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BidirectionalStreamingReply{`,
		`SeqId:` + fmt.Sprintf("%v", this.SeqId) + `,`,
		`StreamSeqIdServer:` + fmt.Sprintf("%v", this.StreamSeqIdServer) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UnaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRequested", wireType)
			}
			m.BytesRequested = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRequested |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnaryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnaryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnaryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientStreamingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientStreamingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientStreamingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamSeqId", wireType)
			}
			m.StreamSeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamSeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRequested", wireType)
			}
			m.BytesRequested = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRequested |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientStreamingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientStreamingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientStreamingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerStreamingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerStreamingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerStreamingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesRequested", wireType)
			}
			m.MessagesRequested = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessagesRequested |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRequestedPerMessage", wireType)
			}
			m.BytesRequestedPerMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRequestedPerMessage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerStreamingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerStreamingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerStreamingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamSeqId", wireType)
			}
			m.StreamSeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamSeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidirectionalStreamingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidirectionalStreamingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidirectionalStreamingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamSeqIdClient", wireType)
			}
			m.StreamSeqIdClient = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamSeqIdClient |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRequestedNextMessage", wireType)
			}
			m.BytesRequestedNextMessage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRequestedNextMessage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidirectionalStreamingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidirectionalStreamingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidirectionalStreamingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamSeqIdServer", wireType)
			}
			m.StreamSeqIdServer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamSeqIdServer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
