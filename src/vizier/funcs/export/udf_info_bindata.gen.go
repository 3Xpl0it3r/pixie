// Code generated for package funcs by go-bindata DO NOT EDIT. (@generated)
// sources:
// bazel-out/k8-fastbuild/bin/src/vizier/funcs/data/udf.pb
package funcs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcVizierFuncsDataUdfPb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xcd\x73\xa4\xb6\x13\xad\x61\x40\x8c\x7b\x3e\xcc\xe2\xf5\xfe\xe6\xc7\x56\x2a\xc4\x55\xb9\xe6\x94\xe4\x94\x8b\x2b\x76\xf6\x92\x4d\x0e\xde\x9c\x29\x0d\xc8\x63\x55\x18\xc1\x4a\xc2\xf1\x9e\xf3\x8f\xa7\x24\x21\x90\x60\x9c\xaa\xdc\xf4\xde\xeb\x0f\xb5\xd4\x8d\x80\x0d\x44\x65\xd3\x31\x99\x2d\x16\x79\xe0\xa0\xc0\x43\xa1\x87\x22\x0f\x21\x0f\xc5\x79\x00\x00\xcb\x13\x7e\x31\x31\xec\x3a\xcc\xc3\x61\x8d\x72\x34\xac\xe3\x3c\x86\x35\x84\x27\x82\x99\xda\x42\x38\x82\xc0\x05\xa1\x0b\xe2\x3e\x16\x65\x63\x0e\xca\xc6\x1c\x6a\x6d\x73\x50\x66\x72\x24\x70\xf1\xb9\xc3\x4c\xd2\x9a\x08\xe5\x15\x4d\x98\x30\x8f\x94\xbd\xe8\x4e\x6a\x1b\x8b\x61\xdd\xc7\xd7\xeb\x3e\xbe\x5e\xc7\x79\x9c\xa6\xb0\x2b\xc8\x0b\x29\x8b\xa7\x46\x48\x86\x4f\x24\x8f\xd2\x35\x2c\x71\x55\x65\x41\x10\xe4\xc1\x08\xc2\x3c\x1c\x40\x18\xb8\xc0\x55\x50\x90\xa3\x01\xc4\xc8\x05\x2a\xdd\x15\xac\x71\xdb\xf2\xe6\xe5\xfe\x73\x87\x6b\xed\xbb\x48\x57\x10\x62\x41\x2b\x93\xec\x40\xd9\x98\xd9\x00\xe4\x00\x1b\xdf\x00\x15\x3f\x81\x55\xd9\x30\x89\x29\x13\x59\x10\x45\xf9\x22\xdd\x01\xaa\xe8\x33\xad\x48\x1f\xc8\xc5\x6a\xaf\x0e\xd6\x85\xb8\x58\xe9\x5b\x88\x88\xd9\x9e\x3a\x46\x17\x06\x1e\x0c\x7c\x35\x98\xa8\xa1\x07\x97\x4b\x0f\x86\xbe\x71\xe8\x1b\xeb\x32\x46\x88\x90\x07\xe3\x38\x5f\xa4\x1b\x08\x1f\x29\xab\xb4\x6d\xa0\xce\xf5\xc8\x09\x96\x84\x7f\x7a\xc2\xac\xdf\xcb\x94\xd4\x49\xa6\xa4\x4e\xb5\x87\xc4\x21\xef\x9d\x7a\xce\x2a\x3a\xd0\x59\xe5\xf5\x68\xba\x86\xb3\x8a\x2e\x67\x0b\x88\xb2\x67\xc2\xcd\xd8\x2a\x58\x13\x76\x94\x4f\x7a\x52\xd5\x1d\xd7\x44\x08\xa7\x36\x8f\xd1\xfb\xf1\x18\xbd\x8f\x6b\xd8\x5a\xc6\x2d\x69\x4e\x6b\xff\x39\xfd\x4a\x10\x5d\xc9\x9c\xd6\x65\xa4\x00\x75\x73\xa4\x25\xae\x6f\xd5\xdd\xe8\xfe\x99\x70\x7a\x0f\x6f\x06\xee\xb7\x46\x7f\xb7\x66\x94\xb1\xba\xe8\xa9\xdf\x79\x1f\xcc\xa7\x74\xac\x1d\xa0\x53\x53\x75\x75\x33\xb6\xfb\x80\x91\x8f\xd1\x44\x47\xc8\x1c\xee\xa9\xab\x25\x6d\xeb\x2f\x7d\x04\x9f\x51\x23\xe1\x31\x7a\x68\x7c\xc6\x8c\x0d\x62\xe4\x88\x25\x19\xae\xd0\xc2\x3e\x02\x6b\xe4\xbd\x33\x57\x3e\x13\x4c\x99\x60\x66\x13\xcc\x6d\xc2\x29\x13\xce\x6c\xc2\x99\x8d\xbe\x57\x8f\xd1\x57\xea\x31\x7d\x53\x46\x6d\xdd\x95\x7f\x6a\x97\x48\xdd\xb9\x86\xc5\x63\xdd\x60\xf9\xe3\xf7\x9a\x0e\xd5\x44\x19\x9a\x32\x4b\x06\x69\x06\x57\x6d\x53\x15\xb4\x2a\x64\x53\xb0\xa6\x22\x85\xfa\xb8\xaa\x6e\x8e\xd2\xff\x43\x3a\x6a\x6a\x35\x4a\xef\xe1\xed\x28\x09\xc2\x9f\x69\x49\x0a\x5a\x19\xf1\x2b\x78\x37\x17\x5f\xf3\x95\x98\xcb\x42\x52\x23\x22\x9b\x53\x59\xdb\xac\x93\xb0\x56\x9a\x66\xfd\x1a\xf6\xe7\xe4\x31\xef\xd4\xff\xdf\x33\x0b\x89\x65\x27\x8c\xe7\x16\x22\xde\x74\xcc\x3c\x28\x51\xfa\x0d\x64\x63\xf2\xf3\xb9\x1c\x93\xd7\xf6\xfb\x16\x36\x42\x72\xda\x16\x2d\x27\x8f\xf4\xa5\xbf\xbb\x14\x2e\x44\x77\x50\x02\x3b\x66\xcb\x28\x50\xf9\x12\x58\x89\xee\x20\x39\x2e\xe5\xd8\xf8\x0e\xd3\xb7\xad\xc3\xa0\xa9\x8d\x1d\x05\x87\x99\x79\xa1\x59\x64\x34\x8b\x83\x62\xf3\x92\x8d\x8c\x7e\x2e\x77\x10\xcb\xa6\x6e\xfe\x22\xdc\xd4\xa6\x71\xd7\xb6\x16\xaf\x21\x94\x9c\x9e\x0c\xb8\x82\x4d\xd7\x9a\x83\x53\xcf\x69\xb6\x58\xe6\x41\xfa\x0e\x2e\x2d\x59\x9e\xaa\x9a\x32\xa2\x78\xdd\x2c\x03\x6f\x5e\x4f\xc2\x0b\xe3\x14\xa5\xff\x83\xc4\x8a\xf6\xb7\xc0\x08\x7b\x78\x63\x05\x45\x8a\x16\x97\x67\x94\xb1\xdb\x97\xfa\xe4\xd7\x56\x69\xed\xae\xae\x61\x37\x70\x7d\x27\x4e\xf2\x8e\x63\xb1\x34\x13\x63\x05\xf7\xba\x27\x85\xf8\xed\xb2\xd4\x13\x3b\xe4\xe9\xaf\x5e\xd1\xd9\xdf\x0b\xd8\x7d\x20\xf2\xf6\x48\x98\x7c\xd0\xfd\xb8\x47\x37\x0d\x6c\x60\x85\x15\x55\xd0\x2a\x59\x42\xff\x57\x92\xa8\x3f\xc3\x95\x3d\x86\x24\x82\x1d\x00\x6d\x0b\x5c\x55\x9c\x08\x91\x44\x70\x09\x6b\xe3\xa5\x3a\x9b\x18\xa2\xd4\x8f\x9c\x1e\x82\x04\xc1\x35\xbc\xa9\xb1\x90\xc5\x13\xc1\x5c\x1e\x08\x96\x05\x13\x49\x9c\x3d\x00\x7c\x20\xf2\xa1\x7c\x22\x27\xac\x36\xf0\xb3\x0a\x2d\xf1\xa1\x36\x15\xf4\x91\x9a\xba\x3b\xb1\x39\x21\xbf\xb4\x3e\x51\x11\x51\x26\x51\xf6\x83\x0e\xfa\xc7\xdd\xed\xaf\x54\xc8\x3d\xba\xf9\x56\xd5\x31\x7a\x73\x22\x3b\x3e\x78\xab\x12\xf9\x51\x38\x6e\xbf\xfc\x37\xb7\x8f\xb0\xd6\x6e\x9f\xac\xdf\x4f\x8e\xdf\x06\x56\xea\xcf\xb2\x93\x0d\x4f\x22\xd8\xc2\x05\x65\x54\x16\xc6\x13\xae\xe0\xb2\xe9\x64\xdb\xc9\x82\x93\x1a\x4b\xda\xb0\x24\xca\xbe\x83\x6d\x71\x47\x0e\xdd\xf1\xe3\x9d\xba\x16\xb2\x5f\xdc\xbc\x77\xee\xe1\x12\xd6\x95\x52\xed\x49\xff\x13\x00\x00\xff\xff\x82\x66\xeb\xfc\xf9\x0b\x00\x00")

func srcVizierFuncsDataUdfPbBytes() ([]byte, error) {
	return bindataRead(
		_srcVizierFuncsDataUdfPb,
		"src/vizier/funcs/data/udf.pb",
	)
}

func srcVizierFuncsDataUdfPb() (*asset, error) {
	bytes, err := srcVizierFuncsDataUdfPbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/vizier/funcs/data/udf.pb", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/vizier/funcs/data/udf.pb": srcVizierFuncsDataUdfPb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"vizier": &bintree{nil, map[string]*bintree{
			"funcs": &bintree{nil, map[string]*bintree{
				"data": &bintree{nil, map[string]*bintree{
					"udf.pb": &bintree{srcVizierFuncsDataUdfPb, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
