// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package mock_cloud_connectorpb is a generated GoMock package.
package mock_cloud_connectorpb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	cloud_connectorpb "pixielabs.ai/pixielabs/src/vizier/services/cloud_connector/cloud_connectorpb"
	reflect "reflect"
)

// MockCloudConnectorServiceClient is a mock of CloudConnectorServiceClient interface
type MockCloudConnectorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudConnectorServiceClientMockRecorder
}

// MockCloudConnectorServiceClientMockRecorder is the mock recorder for MockCloudConnectorServiceClient
type MockCloudConnectorServiceClientMockRecorder struct {
	mock *MockCloudConnectorServiceClient
}

// NewMockCloudConnectorServiceClient creates a new mock instance
func NewMockCloudConnectorServiceClient(ctrl *gomock.Controller) *MockCloudConnectorServiceClient {
	mock := &MockCloudConnectorServiceClient{ctrl: ctrl}
	mock.recorder = &MockCloudConnectorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudConnectorServiceClient) EXPECT() *MockCloudConnectorServiceClientMockRecorder {
	return m.recorder
}

// TransferLog mocks base method
func (m *MockCloudConnectorServiceClient) TransferLog(ctx context.Context, opts ...grpc.CallOption) (cloud_connectorpb.CloudConnectorService_TransferLogClient, error) {
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransferLog", varargs...)
	ret0, _ := ret[0].(cloud_connectorpb.CloudConnectorService_TransferLogClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferLog indicates an expected call of TransferLog
func (mr *MockCloudConnectorServiceClientMockRecorder) TransferLog(ctx interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferLog", reflect.TypeOf((*MockCloudConnectorServiceClient)(nil).TransferLog), varargs...)
}

// MockCloudConnectorService_TransferLogClient is a mock of CloudConnectorService_TransferLogClient interface
type MockCloudConnectorService_TransferLogClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudConnectorService_TransferLogClientMockRecorder
}

// MockCloudConnectorService_TransferLogClientMockRecorder is the mock recorder for MockCloudConnectorService_TransferLogClient
type MockCloudConnectorService_TransferLogClientMockRecorder struct {
	mock *MockCloudConnectorService_TransferLogClient
}

// NewMockCloudConnectorService_TransferLogClient creates a new mock instance
func NewMockCloudConnectorService_TransferLogClient(ctrl *gomock.Controller) *MockCloudConnectorService_TransferLogClient {
	mock := &MockCloudConnectorService_TransferLogClient{ctrl: ctrl}
	mock.recorder = &MockCloudConnectorService_TransferLogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudConnectorService_TransferLogClient) EXPECT() *MockCloudConnectorService_TransferLogClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockCloudConnectorService_TransferLogClient) Send(arg0 *cloud_connectorpb.TransferLogRequest) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockCloudConnectorService_TransferLogClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCloudConnectorService_TransferLogClient)(nil).Send), arg0)
}

// CloseAndRecv mocks base method
func (m *MockCloudConnectorService_TransferLogClient) CloseAndRecv() (*cloud_connectorpb.TransferLogResponse, error) {
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*cloud_connectorpb.TransferLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockCloudConnectorService_TransferLogClientMockRecorder) CloseAndRecv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockCloudConnectorService_TransferLogClient)(nil).CloseAndRecv))
}

// Header mocks base method
func (m *MockCloudConnectorService_TransferLogClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockCloudConnectorService_TransferLogClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCloudConnectorService_TransferLogClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockCloudConnectorService_TransferLogClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockCloudConnectorService_TransferLogClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCloudConnectorService_TransferLogClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockCloudConnectorService_TransferLogClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockCloudConnectorService_TransferLogClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCloudConnectorService_TransferLogClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockCloudConnectorService_TransferLogClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockCloudConnectorService_TransferLogClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCloudConnectorService_TransferLogClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockCloudConnectorService_TransferLogClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockCloudConnectorService_TransferLogClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCloudConnectorService_TransferLogClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockCloudConnectorService_TransferLogClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockCloudConnectorService_TransferLogClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCloudConnectorService_TransferLogClient)(nil).RecvMsg), m)
}

// MockCloudConnectorServiceServer is a mock of CloudConnectorServiceServer interface
type MockCloudConnectorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudConnectorServiceServerMockRecorder
}

// MockCloudConnectorServiceServerMockRecorder is the mock recorder for MockCloudConnectorServiceServer
type MockCloudConnectorServiceServerMockRecorder struct {
	mock *MockCloudConnectorServiceServer
}

// NewMockCloudConnectorServiceServer creates a new mock instance
func NewMockCloudConnectorServiceServer(ctrl *gomock.Controller) *MockCloudConnectorServiceServer {
	mock := &MockCloudConnectorServiceServer{ctrl: ctrl}
	mock.recorder = &MockCloudConnectorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudConnectorServiceServer) EXPECT() *MockCloudConnectorServiceServerMockRecorder {
	return m.recorder
}

// TransferLog mocks base method
func (m *MockCloudConnectorServiceServer) TransferLog(arg0 cloud_connectorpb.CloudConnectorService_TransferLogServer) error {
	ret := m.ctrl.Call(m, "TransferLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferLog indicates an expected call of TransferLog
func (mr *MockCloudConnectorServiceServerMockRecorder) TransferLog(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferLog", reflect.TypeOf((*MockCloudConnectorServiceServer)(nil).TransferLog), arg0)
}

// MockCloudConnectorService_TransferLogServer is a mock of CloudConnectorService_TransferLogServer interface
type MockCloudConnectorService_TransferLogServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudConnectorService_TransferLogServerMockRecorder
}

// MockCloudConnectorService_TransferLogServerMockRecorder is the mock recorder for MockCloudConnectorService_TransferLogServer
type MockCloudConnectorService_TransferLogServerMockRecorder struct {
	mock *MockCloudConnectorService_TransferLogServer
}

// NewMockCloudConnectorService_TransferLogServer creates a new mock instance
func NewMockCloudConnectorService_TransferLogServer(ctrl *gomock.Controller) *MockCloudConnectorService_TransferLogServer {
	mock := &MockCloudConnectorService_TransferLogServer{ctrl: ctrl}
	mock.recorder = &MockCloudConnectorService_TransferLogServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudConnectorService_TransferLogServer) EXPECT() *MockCloudConnectorService_TransferLogServerMockRecorder {
	return m.recorder
}

// SendAndClose mocks base method
func (m *MockCloudConnectorService_TransferLogServer) SendAndClose(arg0 *cloud_connectorpb.TransferLogResponse) error {
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockCloudConnectorService_TransferLogServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockCloudConnectorService_TransferLogServer)(nil).SendAndClose), arg0)
}

// Recv mocks base method
func (m *MockCloudConnectorService_TransferLogServer) Recv() (*cloud_connectorpb.TransferLogRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*cloud_connectorpb.TransferLogRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockCloudConnectorService_TransferLogServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCloudConnectorService_TransferLogServer)(nil).Recv))
}

// SetHeader mocks base method
func (m *MockCloudConnectorService_TransferLogServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockCloudConnectorService_TransferLogServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCloudConnectorService_TransferLogServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockCloudConnectorService_TransferLogServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockCloudConnectorService_TransferLogServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCloudConnectorService_TransferLogServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockCloudConnectorService_TransferLogServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockCloudConnectorService_TransferLogServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCloudConnectorService_TransferLogServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockCloudConnectorService_TransferLogServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockCloudConnectorService_TransferLogServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCloudConnectorService_TransferLogServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockCloudConnectorService_TransferLogServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockCloudConnectorService_TransferLogServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCloudConnectorService_TransferLogServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockCloudConnectorService_TransferLogServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockCloudConnectorService_TransferLogServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCloudConnectorService_TransferLogServer)(nil).RecvMsg), m)
}
