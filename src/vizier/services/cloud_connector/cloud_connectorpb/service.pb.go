// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/services/cloud_connector/cloud_connectorpb/service.proto

package cloud_connectorpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LogMessage struct {
	Pod string `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
	Svc string `protobuf:"bytes,2,opt,name=svc,proto3" json:"svc,omitempty"`
	Log string `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *LogMessage) Reset()      { *m = LogMessage{} }
func (*LogMessage) ProtoMessage() {}
func (*LogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_43c528d3eeefdf77, []int{0}
}
func (m *LogMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessage.Merge(m, src)
}
func (m *LogMessage) XXX_Size() int {
	return m.Size()
}
func (m *LogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessage proto.InternalMessageInfo

func (m *LogMessage) GetPod() string {
	if m != nil {
		return m.Pod
	}
	return ""
}

func (m *LogMessage) GetSvc() string {
	if m != nil {
		return m.Svc
	}
	return ""
}

func (m *LogMessage) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

type TransferLogRequest struct {
	BatchedLogs []*LogMessage `protobuf:"bytes,1,rep,name=batched_logs,json=batchedLogs,proto3" json:"batched_logs,omitempty"`
}

func (m *TransferLogRequest) Reset()      { *m = TransferLogRequest{} }
func (*TransferLogRequest) ProtoMessage() {}
func (*TransferLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_43c528d3eeefdf77, []int{1}
}
func (m *TransferLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferLogRequest.Merge(m, src)
}
func (m *TransferLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferLogRequest proto.InternalMessageInfo

func (m *TransferLogRequest) GetBatchedLogs() []*LogMessage {
	if m != nil {
		return m.BatchedLogs
	}
	return nil
}

type TransferLogResponse struct {
	Ok  bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *TransferLogResponse) Reset()      { *m = TransferLogResponse{} }
func (*TransferLogResponse) ProtoMessage() {}
func (*TransferLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43c528d3eeefdf77, []int{2}
}
func (m *TransferLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferLogResponse.Merge(m, src)
}
func (m *TransferLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferLogResponse proto.InternalMessageInfo

func (m *TransferLogResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *TransferLogResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*LogMessage)(nil), "pl.vizier.services.cloud_connector.LogMessage")
	proto.RegisterType((*TransferLogRequest)(nil), "pl.vizier.services.cloud_connector.TransferLogRequest")
	proto.RegisterType((*TransferLogResponse)(nil), "pl.vizier.services.cloud_connector.TransferLogResponse")
}

func init() {
	proto.RegisterFile("src/vizier/services/cloud_connector/cloud_connectorpb/service.proto", fileDescriptor_43c528d3eeefdf77)
}

var fileDescriptor_43c528d3eeefdf77 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x3d, 0x4b, 0xc3, 0x40,
	0x18, 0xc7, 0x73, 0x2d, 0x88, 0x5e, 0x45, 0x24, 0x22, 0x04, 0x87, 0xa3, 0x64, 0xea, 0x74, 0x81,
	0x0a, 0x76, 0x70, 0x6b, 0xd7, 0x3a, 0x18, 0x9d, 0x1c, 0x2c, 0xc9, 0xf5, 0x3c, 0x43, 0xd3, 0x3c,
	0x31, 0x4f, 0x1a, 0xc4, 0x49, 0xfc, 0x04, 0x0e, 0x8e, 0x7e, 0x00, 0x3f, 0x8a, 0x63, 0xc7, 0x8e,
	0xf6, 0xba, 0x38, 0xf6, 0x23, 0x48, 0x1a, 0xe3, 0x4b, 0x3b, 0xf8, 0xb2, 0xe5, 0xf9, 0x91, 0xe7,
	0xff, 0xff, 0x1d, 0x3c, 0xb4, 0x83, 0x89, 0x70, 0xb2, 0xe0, 0x26, 0x90, 0x89, 0x83, 0x32, 0xc9,
	0x02, 0x21, 0xd1, 0x11, 0x21, 0x8c, 0xfa, 0x3d, 0x01, 0x51, 0x24, 0x45, 0x0a, 0xc9, 0xf2, 0x1c,
	0xfb, 0xe5, 0xaf, 0x3c, 0x4e, 0x20, 0x05, 0xd3, 0x8e, 0x43, 0x5e, 0x64, 0xf0, 0x32, 0x83, 0x2f,
	0xed, 0xd8, 0x6d, 0x4a, 0xbb, 0xa0, 0x8e, 0x24, 0xa2, 0xa7, 0xa4, 0xb9, 0x4d, 0xab, 0x31, 0xf4,
	0x2d, 0x52, 0x27, 0x8d, 0x0d, 0x37, 0xff, 0xcc, 0x09, 0x66, 0xc2, 0xaa, 0x14, 0x04, 0x33, 0x91,
	0x93, 0x10, 0x94, 0x55, 0x2d, 0x48, 0x08, 0xca, 0x56, 0xd4, 0x3c, 0x4d, 0xbc, 0x08, 0x2f, 0x64,
	0xd2, 0x05, 0xe5, 0xca, 0xab, 0x91, 0xc4, 0xd4, 0x3c, 0xa6, 0x9b, 0xbe, 0x97, 0x8a, 0x4b, 0xd9,
	0xef, 0x85, 0xa0, 0xd0, 0x22, 0xf5, 0x6a, 0xa3, 0xd6, 0xe4, 0xfc, 0x67, 0x29, 0xfe, 0x69, 0xe4,
	0xd6, 0xde, 0x33, 0xba, 0xa0, 0xd0, 0x6e, 0xd1, 0x9d, 0x6f, 0x45, 0x18, 0x43, 0x84, 0xd2, 0xdc,
	0xa2, 0x15, 0x18, 0x2c, 0xa4, 0xd7, 0xdd, 0x0a, 0x0c, 0x72, 0xc3, 0x21, 0xaa, 0xd2, 0x79, 0x88,
	0xaa, 0xf9, 0x48, 0xe8, 0x6e, 0x27, 0x2f, 0xe9, 0x94, 0x1d, 0x27, 0x45, 0xb7, 0x79, 0x47, 0x68,
	0xed, 0x4b, 0xa6, 0x79, 0xf0, 0x1b, 0xbf, 0xd5, 0xd7, 0xee, 0xb5, 0xfe, 0xbc, 0x57, 0xc8, 0xdb,
	0x46, 0x83, 0xb4, 0x1f, 0xc8, 0x78, 0xca, 0x8c, 0xc9, 0x94, 0x19, 0xf3, 0x29, 0x23, 0xb7, 0x9a,
	0x91, 0x27, 0xcd, 0xc8, 0xb3, 0x66, 0x64, 0xac, 0x19, 0x79, 0xd1, 0x8c, 0xbc, 0x6a, 0x66, 0xcc,
	0x35, 0x23, 0xf7, 0x33, 0x66, 0x8c, 0x67, 0xcc, 0x98, 0xcc, 0x98, 0x71, 0x76, 0x1e, 0x07, 0xd7,
	0x81, 0x0c, 0x3d, 0x1f, 0xb9, 0x17, 0x38, 0x1f, 0x83, 0xf3, 0xaf, 0xdb, 0x39, 0x5c, 0x21, 0xfe,
	0xda, 0xe2, 0x8c, 0xf6, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x57, 0x8f, 0x9f, 0x8d, 0x02,
	0x00, 0x00,
}

func (this *LogMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogMessage)
	if !ok {
		that2, ok := that.(LogMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pod != that1.Pod {
		return false
	}
	if this.Svc != that1.Svc {
		return false
	}
	if this.Log != that1.Log {
		return false
	}
	return true
}
func (this *TransferLogRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferLogRequest)
	if !ok {
		that2, ok := that.(TransferLogRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BatchedLogs) != len(that1.BatchedLogs) {
		return false
	}
	for i := range this.BatchedLogs {
		if !this.BatchedLogs[i].Equal(that1.BatchedLogs[i]) {
			return false
		}
	}
	return true
}
func (this *TransferLogResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferLogResponse)
	if !ok {
		that2, ok := that.(TransferLogResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *LogMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloud_connectorpb.LogMessage{")
	s = append(s, "Pod: "+fmt.Sprintf("%#v", this.Pod)+",\n")
	s = append(s, "Svc: "+fmt.Sprintf("%#v", this.Svc)+",\n")
	s = append(s, "Log: "+fmt.Sprintf("%#v", this.Log)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferLogRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_connectorpb.TransferLogRequest{")
	if this.BatchedLogs != nil {
		s = append(s, "BatchedLogs: "+fmt.Sprintf("%#v", this.BatchedLogs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferLogResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloud_connectorpb.TransferLogResponse{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudConnectorServiceClient is the client API for CloudConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudConnectorServiceClient interface {
	TransferLog(ctx context.Context, opts ...grpc.CallOption) (CloudConnectorService_TransferLogClient, error)
}

type cloudConnectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCloudConnectorServiceClient(cc *grpc.ClientConn) CloudConnectorServiceClient {
	return &cloudConnectorServiceClient{cc}
}

func (c *cloudConnectorServiceClient) TransferLog(ctx context.Context, opts ...grpc.CallOption) (CloudConnectorService_TransferLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CloudConnectorService_serviceDesc.Streams[0], "/pl.vizier.services.cloud_connector.CloudConnectorService/TransferLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudConnectorServiceTransferLogClient{stream}
	return x, nil
}

type CloudConnectorService_TransferLogClient interface {
	Send(*TransferLogRequest) error
	CloseAndRecv() (*TransferLogResponse, error)
	grpc.ClientStream
}

type cloudConnectorServiceTransferLogClient struct {
	grpc.ClientStream
}

func (x *cloudConnectorServiceTransferLogClient) Send(m *TransferLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudConnectorServiceTransferLogClient) CloseAndRecv() (*TransferLogResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransferLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudConnectorServiceServer is the server API for CloudConnectorService service.
type CloudConnectorServiceServer interface {
	TransferLog(CloudConnectorService_TransferLogServer) error
}

func RegisterCloudConnectorServiceServer(s *grpc.Server, srv CloudConnectorServiceServer) {
	s.RegisterService(&_CloudConnectorService_serviceDesc, srv)
}

func _CloudConnectorService_TransferLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudConnectorServiceServer).TransferLog(&cloudConnectorServiceTransferLogServer{stream})
}

type CloudConnectorService_TransferLogServer interface {
	SendAndClose(*TransferLogResponse) error
	Recv() (*TransferLogRequest, error)
	grpc.ServerStream
}

type cloudConnectorServiceTransferLogServer struct {
	grpc.ServerStream
}

func (x *cloudConnectorServiceTransferLogServer) SendAndClose(m *TransferLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudConnectorServiceTransferLogServer) Recv() (*TransferLogRequest, error) {
	m := new(TransferLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CloudConnectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.vizier.services.cloud_connector.CloudConnectorService",
	HandlerType: (*CloudConnectorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransferLog",
			Handler:       _CloudConnectorService_TransferLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "src/vizier/services/cloud_connector/cloud_connectorpb/service.proto",
}

func (m *LogMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pod) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Pod)))
		i += copy(dAtA[i:], m.Pod)
	}
	if len(m.Svc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Svc)))
		i += copy(dAtA[i:], m.Svc)
	}
	if len(m.Log) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Log)))
		i += copy(dAtA[i:], m.Log)
	}
	return i, nil
}

func (m *TransferLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferLogRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BatchedLogs) > 0 {
		for _, msg := range m.BatchedLogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TransferLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferLogResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pod)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Svc)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *TransferLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BatchedLogs) > 0 {
		for _, e := range m.BatchedLogs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *TransferLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LogMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogMessage{`,
		`Pod:` + fmt.Sprintf("%v", this.Pod) + `,`,
		`Svc:` + fmt.Sprintf("%v", this.Svc) + `,`,
		`Log:` + fmt.Sprintf("%v", this.Log) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferLogRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferLogRequest{`,
		`BatchedLogs:` + strings.Replace(fmt.Sprintf("%v", this.BatchedLogs), "LogMessage", "LogMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferLogResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferLogResponse{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LogMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Svc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchedLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchedLogs = append(m.BatchedLogs, &LogMessage{})
			if err := m.BatchedLogs[len(m.BatchedLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
