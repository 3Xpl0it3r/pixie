// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package mock_certmgr is a generated GoMock package.
package mock_certmgr

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	certmgrpb "pixielabs.ai/pixielabs/src/vizier/services/certmgr/certmgrpb"
	reflect "reflect"
)

// MockCertMgrServiceClient is a mock of CertMgrServiceClient interface
type MockCertMgrServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertMgrServiceClientMockRecorder
}

// MockCertMgrServiceClientMockRecorder is the mock recorder for MockCertMgrServiceClient
type MockCertMgrServiceClientMockRecorder struct {
	mock *MockCertMgrServiceClient
}

// NewMockCertMgrServiceClient creates a new mock instance
func NewMockCertMgrServiceClient(ctrl *gomock.Controller) *MockCertMgrServiceClient {
	mock := &MockCertMgrServiceClient{ctrl: ctrl}
	mock.recorder = &MockCertMgrServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertMgrServiceClient) EXPECT() *MockCertMgrServiceClientMockRecorder {
	return m.recorder
}

// UpdateCerts mocks base method
func (m *MockCertMgrServiceClient) UpdateCerts(ctx context.Context, in *certmgrpb.UpdateCertsRequest, opts ...grpc.CallOption) (*certmgrpb.UpdateCertsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCerts", varargs...)
	ret0, _ := ret[0].(*certmgrpb.UpdateCertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCerts indicates an expected call of UpdateCerts
func (mr *MockCertMgrServiceClientMockRecorder) UpdateCerts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCerts", reflect.TypeOf((*MockCertMgrServiceClient)(nil).UpdateCerts), varargs...)
}

// MockCertMgrServiceServer is a mock of CertMgrServiceServer interface
type MockCertMgrServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCertMgrServiceServerMockRecorder
}

// MockCertMgrServiceServerMockRecorder is the mock recorder for MockCertMgrServiceServer
type MockCertMgrServiceServerMockRecorder struct {
	mock *MockCertMgrServiceServer
}

// NewMockCertMgrServiceServer creates a new mock instance
func NewMockCertMgrServiceServer(ctrl *gomock.Controller) *MockCertMgrServiceServer {
	mock := &MockCertMgrServiceServer{ctrl: ctrl}
	mock.recorder = &MockCertMgrServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertMgrServiceServer) EXPECT() *MockCertMgrServiceServerMockRecorder {
	return m.recorder
}

// UpdateCerts mocks base method
func (m *MockCertMgrServiceServer) UpdateCerts(arg0 context.Context, arg1 *certmgrpb.UpdateCertsRequest) (*certmgrpb.UpdateCertsResponse, error) {
	ret := m.ctrl.Call(m, "UpdateCerts", arg0, arg1)
	ret0, _ := ret[0].(*certmgrpb.UpdateCertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCerts indicates an expected call of UpdateCerts
func (mr *MockCertMgrServiceServerMockRecorder) UpdateCerts(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCerts", reflect.TypeOf((*MockCertMgrServiceServer)(nil).UpdateCerts), arg0, arg1)
}
