syntax = "proto3";

package pl.vizier.services.metadata;

import "src/common/base/proto/status.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/stirling/dynamic_tracing/ir/logical.proto";
import "src/common/uuid/proto/uuid.proto";

option go_package = "pixielabs.ai/pixielabs/src/vizier/services/metadata/storepb;storepb";

// This file contains protos for data that is stored in the metadata service's datastore.
// Along with the protos in this file, the datastore also contains shared protos, such as from agentpb and metadatapb.

// Information about the status of a specific tracepoint.
message TracepointInfo {
  uuidpb.UUID tracepoint_id = 1 [ (gogoproto.customname) = "TracepointID" ];
  // The tracepoint program.
  pl.stirling.dynamic_tracing.ir.logical.Program program = 2;
  // The name of the tracepoint, not unique.
  string tracepoint_name = 3;
  // The desired state of the tracepoint, either running or terminated. The actual
  // state of the tracepoint is derived by the states of the individual agent tracepoints.
  pl.statuspb.LifeCycleState expected_state = 4;
}

// The agent's registration status for a particular tracepoint.
message AgentTracepointStatus {
  // The state of the tracepoint.
  pl.statuspb.LifeCycleState state = 1;
  // The status of the tracepoint, specified if the state of the tracepoint is not healthy.
  pl.statuspb.Status status = 2;
  uuidpb.UUID tracepoint_id = 3 [ (gogoproto.customname) = "TracepointID" ];
  uuidpb.UUID agent_id = 4 [ (gogoproto.customname) = "AgentID" ];
}
