// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/services/metadata/storepb/store.proto

package storepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	proto1 "pixielabs.ai/pixielabs/src/common/base/proto"
	proto2 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	ir "pixielabs.ai/pixielabs/src/stirling/dynamic_tracing/ir"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TracepointInfo struct {
	TracepointID string      `protobuf:"bytes,1,opt,name=tracepoint_id,json=tracepointId,proto3" json:"tracepoint_id,omitempty"`
	Program      *ir.Program `protobuf:"bytes,2,opt,name=program,proto3" json:"program,omitempty"`
}

func (m *TracepointInfo) Reset()      { *m = TracepointInfo{} }
func (*TracepointInfo) ProtoMessage() {}
func (*TracepointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{0}
}
func (m *TracepointInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracepointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracepointInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracepointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracepointInfo.Merge(m, src)
}
func (m *TracepointInfo) XXX_Size() int {
	return m.Size()
}
func (m *TracepointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TracepointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TracepointInfo proto.InternalMessageInfo

func (m *TracepointInfo) GetTracepointID() string {
	if m != nil {
		return m.TracepointID
	}
	return ""
}

func (m *TracepointInfo) GetProgram() *ir.Program {
	if m != nil {
		return m.Program
	}
	return nil
}

type AgentTracepointStatus struct {
	State        proto1.LifeCycleState `protobuf:"varint,1,opt,name=state,proto3,enum=pl.statuspb.LifeCycleState" json:"state,omitempty"`
	Status       *proto1.Status        `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	TracepointID string                `protobuf:"bytes,3,opt,name=tracepoint_id,json=tracepointId,proto3" json:"tracepoint_id,omitempty"`
	AgentID      *proto2.UUID          `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (m *AgentTracepointStatus) Reset()      { *m = AgentTracepointStatus{} }
func (*AgentTracepointStatus) ProtoMessage() {}
func (*AgentTracepointStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_27ea71ea705227d1, []int{1}
}
func (m *AgentTracepointStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentTracepointStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentTracepointStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentTracepointStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentTracepointStatus.Merge(m, src)
}
func (m *AgentTracepointStatus) XXX_Size() int {
	return m.Size()
}
func (m *AgentTracepointStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentTracepointStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AgentTracepointStatus proto.InternalMessageInfo

func (m *AgentTracepointStatus) GetState() proto1.LifeCycleState {
	if m != nil {
		return m.State
	}
	return proto1.UNKNOWN_STATE
}

func (m *AgentTracepointStatus) GetStatus() *proto1.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AgentTracepointStatus) GetTracepointID() string {
	if m != nil {
		return m.TracepointID
	}
	return ""
}

func (m *AgentTracepointStatus) GetAgentID() *proto2.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func init() {
	proto.RegisterType((*TracepointInfo)(nil), "pl.vizier.services.metadata.TracepointInfo")
	proto.RegisterType((*AgentTracepointStatus)(nil), "pl.vizier.services.metadata.AgentTracepointStatus")
}

func init() {
	proto.RegisterFile("src/vizier/services/metadata/storepb/store.proto", fileDescriptor_27ea71ea705227d1)
}

var fileDescriptor_27ea71ea705227d1 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x3f, 0x6f, 0xd4, 0x30,
	0x18, 0xc6, 0x63, 0xfe, 0xb4, 0x90, 0x96, 0x82, 0x82, 0x90, 0xaa, 0x56, 0x72, 0x4f, 0x37, 0x55,
	0x42, 0xd8, 0x50, 0x84, 0x18, 0x98, 0xb8, 0xde, 0x12, 0x89, 0x01, 0x05, 0xba, 0xb0, 0x54, 0x8e,
	0xe3, 0x0b, 0xaf, 0x94, 0xc4, 0x96, 0xed, 0x54, 0x1c, 0x13, 0x1f, 0x01, 0xf1, 0x29, 0xf8, 0x28,
	0x8c, 0x37, 0x76, 0xaa, 0x38, 0xdf, 0x00, 0x63, 0x3f, 0x02, 0x72, 0x9c, 0xb4, 0x05, 0x96, 0x4e,
	0xf6, 0x9b, 0xfc, 0x9e, 0xf7, 0x79, 0xde, 0x57, 0x8e, 0x9f, 0x1a, 0xcd, 0xe9, 0x09, 0x7c, 0x06,
	0xa1, 0xa9, 0x11, 0xfa, 0x04, 0xb8, 0x30, 0xb4, 0x16, 0x96, 0x15, 0xcc, 0x32, 0x6a, 0xac, 0xd4,
	0x42, 0xe5, 0xe1, 0x24, 0x4a, 0x4b, 0x2b, 0x93, 0x5d, 0x55, 0x91, 0x20, 0x20, 0x83, 0x80, 0x0c,
	0x82, 0x9d, 0xb1, 0x6f, 0xc7, 0x65, 0x5d, 0xcb, 0x86, 0xe6, 0xcc, 0x08, 0xda, 0x69, 0xa8, 0xb1,
	0xcc, 0xb6, 0x26, 0x34, 0xd8, 0x79, 0x52, 0x82, 0xfd, 0xd8, 0xe6, 0x84, 0xcb, 0x9a, 0x96, 0xb2,
	0x94, 0x81, 0xc9, 0xdb, 0x59, 0x57, 0x05, 0x81, 0xbf, 0x0d, 0xb8, 0x6f, 0x69, 0x2c, 0xe8, 0x0a,
	0x9a, 0x92, 0x16, 0xf3, 0x86, 0xd5, 0xc0, 0x8f, 0xad, 0x66, 0xdc, 0xd7, 0xa0, 0x69, 0x25, 0x4b,
	0xe0, 0xac, 0xea, 0xf1, 0xd1, 0x95, 0x04, 0x6d, 0x0b, 0x45, 0x9f, 0xc0, 0x5f, 0x03, 0x31, 0xfe,
	0x86, 0xe2, 0xad, 0xf7, 0x9a, 0x71, 0xa1, 0x24, 0x34, 0x36, 0x6d, 0x66, 0x32, 0x79, 0x11, 0xdf,
	0xb3, 0x17, 0x5f, 0x8e, 0xa1, 0xd8, 0x46, 0x23, 0xb4, 0x7f, 0x77, 0xf2, 0xc0, 0x9d, 0xed, 0x6d,
	0x5e, 0x41, 0xa7, 0xd9, 0xe6, 0x25, 0x96, 0x16, 0x49, 0x1a, 0xaf, 0x2b, 0x2d, 0x4b, 0xcd, 0xea,
	0xed, 0x1b, 0x23, 0xb4, 0xbf, 0x71, 0x40, 0x89, 0xaa, 0xc8, 0x90, 0x95, 0xfc, 0x93, 0x95, 0x80,
	0x26, 0x43, 0xd6, 0xb7, 0x41, 0x96, 0x0d, 0xfa, 0xf1, 0x2f, 0x14, 0x3f, 0x7a, 0x5d, 0x8a, 0xc6,
	0x5e, 0xda, 0xbd, 0xeb, 0x96, 0x96, 0x3c, 0x8b, 0x6f, 0xfb, 0xf5, 0x89, 0x2e, 0xd3, 0xd6, 0xc1,
	0x6e, 0xb0, 0xf0, 0xbf, 0x54, 0x4e, 0xde, 0xc0, 0x4c, 0x1c, 0xce, 0x79, 0x25, 0x3c, 0x2c, 0xb2,
	0x40, 0x26, 0x8f, 0xe3, 0xb5, 0x40, 0xf4, 0xb1, 0x1e, 0xfe, 0xa5, 0x09, 0x7d, 0xb3, 0x1e, 0xf9,
	0x7f, 0xf6, 0x9b, 0xd7, 0x9a, 0xfd, 0x65, 0x7c, 0x87, 0xf9, 0xbc, 0x5e, 0x71, 0xab, 0x73, 0xb9,
	0xef, 0x5d, 0xfc, 0x9e, 0x55, 0x4e, 0x8e, 0x8e, 0xd2, 0xe9, 0x64, 0xc3, 0x9d, 0xed, 0xad, 0x77,
	0x43, 0xa5, 0xd3, 0x6c, 0xbd, 0xa3, 0xd3, 0x62, 0x32, 0x5f, 0x2c, 0x71, 0x74, 0xba, 0xc4, 0xd1,
	0xf9, 0x12, 0xa3, 0x2f, 0x0e, 0xa3, 0xef, 0x0e, 0xa3, 0x1f, 0x0e, 0xa3, 0x85, 0xc3, 0xe8, 0xa7,
	0xc3, 0xe8, 0xb7, 0xc3, 0xd1, 0xb9, 0xc3, 0xe8, 0xeb, 0x0a, 0x47, 0x8b, 0x15, 0x8e, 0x4e, 0x57,
	0x38, 0xfa, 0x70, 0xa8, 0xe0, 0x13, 0x88, 0x8a, 0xe5, 0x86, 0x30, 0xa0, 0x17, 0x05, 0xbd, 0xce,
	0xf3, 0x7d, 0xd5, 0x9f, 0xf9, 0x5a, 0xf7, 0x00, 0x9e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x37,
	0xe7, 0xb5, 0x02, 0xf5, 0x02, 0x00, 0x00,
}

func (this *TracepointInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TracepointInfo)
	if !ok {
		that2, ok := that.(TracepointInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TracepointID != that1.TracepointID {
		return false
	}
	if !this.Program.Equal(that1.Program) {
		return false
	}
	return true
}
func (this *AgentTracepointStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentTracepointStatus)
	if !ok {
		that2, ok := that.(AgentTracepointStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.TracepointID != that1.TracepointID {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	return true
}
func (this *TracepointInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&storepb.TracepointInfo{")
	s = append(s, "TracepointID: "+fmt.Sprintf("%#v", this.TracepointID)+",\n")
	if this.Program != nil {
		s = append(s, "Program: "+fmt.Sprintf("%#v", this.Program)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentTracepointStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&storepb.AgentTracepointStatus{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "TracepointID: "+fmt.Sprintf("%#v", this.TracepointID)+",\n")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStore(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TracepointInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracepointInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracepointInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Program != nil {
		{
			size, err := m.Program.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TracepointID) > 0 {
		i -= len(m.TracepointID)
		copy(dAtA[i:], m.TracepointID)
		i = encodeVarintStore(dAtA, i, uint64(len(m.TracepointID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentTracepointStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentTracepointStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentTracepointStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TracepointID) > 0 {
		i -= len(m.TracepointID)
		copy(dAtA[i:], m.TracepointID)
		i = encodeVarintStore(dAtA, i, uint64(len(m.TracepointID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TracepointInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TracepointID)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.Program != nil {
		l = m.Program.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func (m *AgentTracepointStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovStore(uint64(m.State))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.TracepointID)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func sovStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TracepointInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TracepointInfo{`,
		`TracepointID:` + fmt.Sprintf("%v", this.TracepointID) + `,`,
		`Program:` + strings.Replace(fmt.Sprintf("%v", this.Program), "Program", "ir.Program", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentTracepointStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentTracepointStatus{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto1.Status", 1) + `,`,
		`TracepointID:` + fmt.Sprintf("%v", this.TracepointID) + `,`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto2.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStore(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TracepointInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracepointInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracepointInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracepointID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TracepointID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Program == nil {
				m.Program = &ir.Program{}
			}
			if err := m.Program.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentTracepointStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentTracepointStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentTracepointStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= proto1.LifeCycleState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto1.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracepointID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TracepointID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto2.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStore = fmt.Errorf("proto: unexpected end of group")
)
