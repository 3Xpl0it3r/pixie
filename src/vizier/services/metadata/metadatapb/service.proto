syntax = "proto3";

package pl.vizier.services.metadata;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/common/uuid/proto/uuid.proto";
import "src/table_store/proto/schema.proto";
import "src/carnot/planner/distributedpb/distributed_plan.proto";
import "src/vizier/services/shared/agentpb/agent.proto";

option go_package = "pixielabs.ai/pixielabs/src/vizier/services/metadata/metadatapb;metadatapb";

service MetadataService {
  /**
   * These RPC calls are used by the query broker and CLI to fetch metadata.
   */

  rpc GetSchemas(SchemaRequest) returns (SchemaResponse) {}
  rpc GetSchemaByAgent(SchemaByAgentRequest) returns (SchemaByAgentResponse) {}
  rpc GetAgentInfo(AgentInfoRequest) returns (AgentInfoResponse) {}
}

// The schema request for each agent's schema.
message SchemaByAgentRequest {
  // IDs of the agents to get schemas from. If no IDs are specified,
  // it is assumed that schemas for all agents are requested.
  repeated uuidpb.UUID agent_ids = 1;
}

// The schema response from the metadata service.
message SchemaByAgentResponse {
  message SchemaByAgent {
    uuidpb.UUID agent_id = 1 [ (gogoproto.customname) = "AgentID" ];
    pl.table_store.schemapb.Schema schema = 2;
  }
  repeated SchemaByAgent schema_by_agent = 1;
}

message SchemaRequest {}

// The schema response from the metadata service containing the schema that all
// agents serve.
message SchemaResponse { pl.table_store.schemapb.Schema schema = 2; }

message AgentInfoRequest {}

message AgentInfoResponse {
  // Contains AgentMetadata for each of the agents currently registered with
  // Vizier.
  repeated AgentMetadata info = 1;
}

message AgentMetadata {
  pl.vizier.services.shared.agent.Agent agent = 1;
  pl.vizier.services.shared.agent.AgentStatus status = 2;
  // Info that describes the carnot instance for the agent.
  pl.carnot.planner.distributedpb.CarnotInfo carnot_info = 3;
}
