// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package mock_metadatapb is a generated GoMock package.
package mock_metadatapb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadatapb "pixielabs.ai/pixielabs/src/vizier/services/metadata/metadatapb"
	reflect "reflect"
)

// MockMetadataServiceClient is a mock of MetadataServiceClient interface
type MockMetadataServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataServiceClientMockRecorder
}

// MockMetadataServiceClientMockRecorder is the mock recorder for MockMetadataServiceClient
type MockMetadataServiceClientMockRecorder struct {
	mock *MockMetadataServiceClient
}

// NewMockMetadataServiceClient creates a new mock instance
func NewMockMetadataServiceClient(ctrl *gomock.Controller) *MockMetadataServiceClient {
	mock := &MockMetadataServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetadataServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataServiceClient) EXPECT() *MockMetadataServiceClientMockRecorder {
	return m.recorder
}

// GetSchemas mocks base method
func (m *MockMetadataServiceClient) GetSchemas(ctx context.Context, in *metadatapb.SchemaRequest, opts ...grpc.CallOption) (*metadatapb.SchemaResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemas", varargs...)
	ret0, _ := ret[0].(*metadatapb.SchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemas indicates an expected call of GetSchemas
func (mr *MockMetadataServiceClientMockRecorder) GetSchemas(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemas", reflect.TypeOf((*MockMetadataServiceClient)(nil).GetSchemas), varargs...)
}

// GetSchemaByAgent mocks base method
func (m *MockMetadataServiceClient) GetSchemaByAgent(ctx context.Context, in *metadatapb.SchemaByAgentRequest, opts ...grpc.CallOption) (*metadatapb.SchemaByAgentResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaByAgent", varargs...)
	ret0, _ := ret[0].(*metadatapb.SchemaByAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaByAgent indicates an expected call of GetSchemaByAgent
func (mr *MockMetadataServiceClientMockRecorder) GetSchemaByAgent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByAgent", reflect.TypeOf((*MockMetadataServiceClient)(nil).GetSchemaByAgent), varargs...)
}

// GetAgentInfo mocks base method
func (m *MockMetadataServiceClient) GetAgentInfo(ctx context.Context, in *metadatapb.AgentInfoRequest, opts ...grpc.CallOption) (*metadatapb.AgentInfoResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentInfo", varargs...)
	ret0, _ := ret[0].(*metadatapb.AgentInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentInfo indicates an expected call of GetAgentInfo
func (mr *MockMetadataServiceClientMockRecorder) GetAgentInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockMetadataServiceClient)(nil).GetAgentInfo), varargs...)
}

// GetAgentTableMetadata mocks base method
func (m *MockMetadataServiceClient) GetAgentTableMetadata(ctx context.Context, in *metadatapb.AgentTableMetadataRequest, opts ...grpc.CallOption) (*metadatapb.AgentTableMetadataResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentTableMetadata", varargs...)
	ret0, _ := ret[0].(*metadatapb.AgentTableMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentTableMetadata indicates an expected call of GetAgentTableMetadata
func (mr *MockMetadataServiceClientMockRecorder) GetAgentTableMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentTableMetadata", reflect.TypeOf((*MockMetadataServiceClient)(nil).GetAgentTableMetadata), varargs...)
}

// RegisterProbe mocks base method
func (m *MockMetadataServiceClient) RegisterProbe(ctx context.Context, in *metadatapb.RegisterProbeRequest, opts ...grpc.CallOption) (*metadatapb.RegisterProbeResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterProbe", varargs...)
	ret0, _ := ret[0].(*metadatapb.RegisterProbeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterProbe indicates an expected call of RegisterProbe
func (mr *MockMetadataServiceClientMockRecorder) RegisterProbe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProbe", reflect.TypeOf((*MockMetadataServiceClient)(nil).RegisterProbe), varargs...)
}

// GetProbeInfo mocks base method
func (m *MockMetadataServiceClient) GetProbeInfo(ctx context.Context, in *metadatapb.GetProbeInfoRequest, opts ...grpc.CallOption) (*metadatapb.GetProbeInfoResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProbeInfo", varargs...)
	ret0, _ := ret[0].(*metadatapb.GetProbeInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProbeInfo indicates an expected call of GetProbeInfo
func (mr *MockMetadataServiceClientMockRecorder) GetProbeInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProbeInfo", reflect.TypeOf((*MockMetadataServiceClient)(nil).GetProbeInfo), varargs...)
}

// MockMetadataServiceServer is a mock of MetadataServiceServer interface
type MockMetadataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataServiceServerMockRecorder
}

// MockMetadataServiceServerMockRecorder is the mock recorder for MockMetadataServiceServer
type MockMetadataServiceServerMockRecorder struct {
	mock *MockMetadataServiceServer
}

// NewMockMetadataServiceServer creates a new mock instance
func NewMockMetadataServiceServer(ctrl *gomock.Controller) *MockMetadataServiceServer {
	mock := &MockMetadataServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetadataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataServiceServer) EXPECT() *MockMetadataServiceServerMockRecorder {
	return m.recorder
}

// GetSchemas mocks base method
func (m *MockMetadataServiceServer) GetSchemas(arg0 context.Context, arg1 *metadatapb.SchemaRequest) (*metadatapb.SchemaResponse, error) {
	ret := m.ctrl.Call(m, "GetSchemas", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.SchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemas indicates an expected call of GetSchemas
func (mr *MockMetadataServiceServerMockRecorder) GetSchemas(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemas", reflect.TypeOf((*MockMetadataServiceServer)(nil).GetSchemas), arg0, arg1)
}

// GetSchemaByAgent mocks base method
func (m *MockMetadataServiceServer) GetSchemaByAgent(arg0 context.Context, arg1 *metadatapb.SchemaByAgentRequest) (*metadatapb.SchemaByAgentResponse, error) {
	ret := m.ctrl.Call(m, "GetSchemaByAgent", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.SchemaByAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaByAgent indicates an expected call of GetSchemaByAgent
func (mr *MockMetadataServiceServerMockRecorder) GetSchemaByAgent(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByAgent", reflect.TypeOf((*MockMetadataServiceServer)(nil).GetSchemaByAgent), arg0, arg1)
}

// GetAgentInfo mocks base method
func (m *MockMetadataServiceServer) GetAgentInfo(arg0 context.Context, arg1 *metadatapb.AgentInfoRequest) (*metadatapb.AgentInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetAgentInfo", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.AgentInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentInfo indicates an expected call of GetAgentInfo
func (mr *MockMetadataServiceServerMockRecorder) GetAgentInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockMetadataServiceServer)(nil).GetAgentInfo), arg0, arg1)
}

// GetAgentTableMetadata mocks base method
func (m *MockMetadataServiceServer) GetAgentTableMetadata(arg0 context.Context, arg1 *metadatapb.AgentTableMetadataRequest) (*metadatapb.AgentTableMetadataResponse, error) {
	ret := m.ctrl.Call(m, "GetAgentTableMetadata", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.AgentTableMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentTableMetadata indicates an expected call of GetAgentTableMetadata
func (mr *MockMetadataServiceServerMockRecorder) GetAgentTableMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentTableMetadata", reflect.TypeOf((*MockMetadataServiceServer)(nil).GetAgentTableMetadata), arg0, arg1)
}

// RegisterProbe mocks base method
func (m *MockMetadataServiceServer) RegisterProbe(arg0 context.Context, arg1 *metadatapb.RegisterProbeRequest) (*metadatapb.RegisterProbeResponse, error) {
	ret := m.ctrl.Call(m, "RegisterProbe", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.RegisterProbeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterProbe indicates an expected call of RegisterProbe
func (mr *MockMetadataServiceServerMockRecorder) RegisterProbe(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProbe", reflect.TypeOf((*MockMetadataServiceServer)(nil).RegisterProbe), arg0, arg1)
}

// GetProbeInfo mocks base method
func (m *MockMetadataServiceServer) GetProbeInfo(arg0 context.Context, arg1 *metadatapb.GetProbeInfoRequest) (*metadatapb.GetProbeInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetProbeInfo", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.GetProbeInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProbeInfo indicates an expected call of GetProbeInfo
func (mr *MockMetadataServiceServerMockRecorder) GetProbeInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProbeInfo", reflect.TypeOf((*MockMetadataServiceServer)(nil).GetProbeInfo), arg0, arg1)
}
