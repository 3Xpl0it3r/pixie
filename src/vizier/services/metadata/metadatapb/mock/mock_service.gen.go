// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package mock_metadatapb is a generated GoMock package.
package mock_metadatapb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadatapb "pixielabs.ai/pixielabs/src/vizier/services/metadata/metadatapb"
	reflect "reflect"
)

// MockMetadataServiceClient is a mock of MetadataServiceClient interface
type MockMetadataServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataServiceClientMockRecorder
}

// MockMetadataServiceClientMockRecorder is the mock recorder for MockMetadataServiceClient
type MockMetadataServiceClientMockRecorder struct {
	mock *MockMetadataServiceClient
}

// NewMockMetadataServiceClient creates a new mock instance
func NewMockMetadataServiceClient(ctrl *gomock.Controller) *MockMetadataServiceClient {
	mock := &MockMetadataServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetadataServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataServiceClient) EXPECT() *MockMetadataServiceClientMockRecorder {
	return m.recorder
}

// GetSchemas mocks base method
func (m *MockMetadataServiceClient) GetSchemas(ctx context.Context, in *metadatapb.SchemaRequest, opts ...grpc.CallOption) (*metadatapb.SchemaResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemas", varargs...)
	ret0, _ := ret[0].(*metadatapb.SchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemas indicates an expected call of GetSchemas
func (mr *MockMetadataServiceClientMockRecorder) GetSchemas(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemas", reflect.TypeOf((*MockMetadataServiceClient)(nil).GetSchemas), varargs...)
}

// GetSchemaByAgent mocks base method
func (m *MockMetadataServiceClient) GetSchemaByAgent(ctx context.Context, in *metadatapb.SchemaByAgentRequest, opts ...grpc.CallOption) (*metadatapb.SchemaByAgentResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaByAgent", varargs...)
	ret0, _ := ret[0].(*metadatapb.SchemaByAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaByAgent indicates an expected call of GetSchemaByAgent
func (mr *MockMetadataServiceClientMockRecorder) GetSchemaByAgent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByAgent", reflect.TypeOf((*MockMetadataServiceClient)(nil).GetSchemaByAgent), varargs...)
}

// GetAgentInfo mocks base method
func (m *MockMetadataServiceClient) GetAgentInfo(ctx context.Context, in *metadatapb.AgentInfoRequest, opts ...grpc.CallOption) (*metadatapb.AgentInfoResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentInfo", varargs...)
	ret0, _ := ret[0].(*metadatapb.AgentInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentInfo indicates an expected call of GetAgentInfo
func (mr *MockMetadataServiceClientMockRecorder) GetAgentInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockMetadataServiceClient)(nil).GetAgentInfo), varargs...)
}

// GetAgentTableMetadata mocks base method
func (m *MockMetadataServiceClient) GetAgentTableMetadata(ctx context.Context, in *metadatapb.AgentTableMetadataRequest, opts ...grpc.CallOption) (*metadatapb.AgentTableMetadataResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentTableMetadata", varargs...)
	ret0, _ := ret[0].(*metadatapb.AgentTableMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentTableMetadata indicates an expected call of GetAgentTableMetadata
func (mr *MockMetadataServiceClientMockRecorder) GetAgentTableMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentTableMetadata", reflect.TypeOf((*MockMetadataServiceClient)(nil).GetAgentTableMetadata), varargs...)
}

// MockMetadataServiceServer is a mock of MetadataServiceServer interface
type MockMetadataServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataServiceServerMockRecorder
}

// MockMetadataServiceServerMockRecorder is the mock recorder for MockMetadataServiceServer
type MockMetadataServiceServerMockRecorder struct {
	mock *MockMetadataServiceServer
}

// NewMockMetadataServiceServer creates a new mock instance
func NewMockMetadataServiceServer(ctrl *gomock.Controller) *MockMetadataServiceServer {
	mock := &MockMetadataServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetadataServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataServiceServer) EXPECT() *MockMetadataServiceServerMockRecorder {
	return m.recorder
}

// GetSchemas mocks base method
func (m *MockMetadataServiceServer) GetSchemas(arg0 context.Context, arg1 *metadatapb.SchemaRequest) (*metadatapb.SchemaResponse, error) {
	ret := m.ctrl.Call(m, "GetSchemas", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.SchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemas indicates an expected call of GetSchemas
func (mr *MockMetadataServiceServerMockRecorder) GetSchemas(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemas", reflect.TypeOf((*MockMetadataServiceServer)(nil).GetSchemas), arg0, arg1)
}

// GetSchemaByAgent mocks base method
func (m *MockMetadataServiceServer) GetSchemaByAgent(arg0 context.Context, arg1 *metadatapb.SchemaByAgentRequest) (*metadatapb.SchemaByAgentResponse, error) {
	ret := m.ctrl.Call(m, "GetSchemaByAgent", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.SchemaByAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaByAgent indicates an expected call of GetSchemaByAgent
func (mr *MockMetadataServiceServerMockRecorder) GetSchemaByAgent(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByAgent", reflect.TypeOf((*MockMetadataServiceServer)(nil).GetSchemaByAgent), arg0, arg1)
}

// GetAgentInfo mocks base method
func (m *MockMetadataServiceServer) GetAgentInfo(arg0 context.Context, arg1 *metadatapb.AgentInfoRequest) (*metadatapb.AgentInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetAgentInfo", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.AgentInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentInfo indicates an expected call of GetAgentInfo
func (mr *MockMetadataServiceServerMockRecorder) GetAgentInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockMetadataServiceServer)(nil).GetAgentInfo), arg0, arg1)
}

// GetAgentTableMetadata mocks base method
func (m *MockMetadataServiceServer) GetAgentTableMetadata(arg0 context.Context, arg1 *metadatapb.AgentTableMetadataRequest) (*metadatapb.AgentTableMetadataResponse, error) {
	ret := m.ctrl.Call(m, "GetAgentTableMetadata", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.AgentTableMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentTableMetadata indicates an expected call of GetAgentTableMetadata
func (mr *MockMetadataServiceServerMockRecorder) GetAgentTableMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentTableMetadata", reflect.TypeOf((*MockMetadataServiceServer)(nil).GetAgentTableMetadata), arg0, arg1)
}

// MockMetadataTracepointServiceClient is a mock of MetadataTracepointServiceClient interface
type MockMetadataTracepointServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataTracepointServiceClientMockRecorder
}

// MockMetadataTracepointServiceClientMockRecorder is the mock recorder for MockMetadataTracepointServiceClient
type MockMetadataTracepointServiceClientMockRecorder struct {
	mock *MockMetadataTracepointServiceClient
}

// NewMockMetadataTracepointServiceClient creates a new mock instance
func NewMockMetadataTracepointServiceClient(ctrl *gomock.Controller) *MockMetadataTracepointServiceClient {
	mock := &MockMetadataTracepointServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetadataTracepointServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataTracepointServiceClient) EXPECT() *MockMetadataTracepointServiceClientMockRecorder {
	return m.recorder
}

// RegisterTracepoint mocks base method
func (m *MockMetadataTracepointServiceClient) RegisterTracepoint(ctx context.Context, in *metadatapb.RegisterTracepointRequest, opts ...grpc.CallOption) (*metadatapb.RegisterTracepointResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterTracepoint", varargs...)
	ret0, _ := ret[0].(*metadatapb.RegisterTracepointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTracepoint indicates an expected call of RegisterTracepoint
func (mr *MockMetadataTracepointServiceClientMockRecorder) RegisterTracepoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTracepoint", reflect.TypeOf((*MockMetadataTracepointServiceClient)(nil).RegisterTracepoint), varargs...)
}

// GetTracepointInfo mocks base method
func (m *MockMetadataTracepointServiceClient) GetTracepointInfo(ctx context.Context, in *metadatapb.GetTracepointInfoRequest, opts ...grpc.CallOption) (*metadatapb.GetTracepointInfoResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTracepointInfo", varargs...)
	ret0, _ := ret[0].(*metadatapb.GetTracepointInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepointInfo indicates an expected call of GetTracepointInfo
func (mr *MockMetadataTracepointServiceClientMockRecorder) GetTracepointInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepointInfo", reflect.TypeOf((*MockMetadataTracepointServiceClient)(nil).GetTracepointInfo), varargs...)
}

// RemoveTracepoint mocks base method
func (m *MockMetadataTracepointServiceClient) RemoveTracepoint(ctx context.Context, in *metadatapb.RemoveTracepointRequest, opts ...grpc.CallOption) (*metadatapb.RemoveTracepointResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTracepoint", varargs...)
	ret0, _ := ret[0].(*metadatapb.RemoveTracepointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTracepoint indicates an expected call of RemoveTracepoint
func (mr *MockMetadataTracepointServiceClientMockRecorder) RemoveTracepoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTracepoint", reflect.TypeOf((*MockMetadataTracepointServiceClient)(nil).RemoveTracepoint), varargs...)
}

// MockMetadataTracepointServiceServer is a mock of MetadataTracepointServiceServer interface
type MockMetadataTracepointServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataTracepointServiceServerMockRecorder
}

// MockMetadataTracepointServiceServerMockRecorder is the mock recorder for MockMetadataTracepointServiceServer
type MockMetadataTracepointServiceServerMockRecorder struct {
	mock *MockMetadataTracepointServiceServer
}

// NewMockMetadataTracepointServiceServer creates a new mock instance
func NewMockMetadataTracepointServiceServer(ctrl *gomock.Controller) *MockMetadataTracepointServiceServer {
	mock := &MockMetadataTracepointServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetadataTracepointServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataTracepointServiceServer) EXPECT() *MockMetadataTracepointServiceServerMockRecorder {
	return m.recorder
}

// RegisterTracepoint mocks base method
func (m *MockMetadataTracepointServiceServer) RegisterTracepoint(arg0 context.Context, arg1 *metadatapb.RegisterTracepointRequest) (*metadatapb.RegisterTracepointResponse, error) {
	ret := m.ctrl.Call(m, "RegisterTracepoint", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.RegisterTracepointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTracepoint indicates an expected call of RegisterTracepoint
func (mr *MockMetadataTracepointServiceServerMockRecorder) RegisterTracepoint(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTracepoint", reflect.TypeOf((*MockMetadataTracepointServiceServer)(nil).RegisterTracepoint), arg0, arg1)
}

// GetTracepointInfo mocks base method
func (m *MockMetadataTracepointServiceServer) GetTracepointInfo(arg0 context.Context, arg1 *metadatapb.GetTracepointInfoRequest) (*metadatapb.GetTracepointInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetTracepointInfo", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.GetTracepointInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepointInfo indicates an expected call of GetTracepointInfo
func (mr *MockMetadataTracepointServiceServerMockRecorder) GetTracepointInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepointInfo", reflect.TypeOf((*MockMetadataTracepointServiceServer)(nil).GetTracepointInfo), arg0, arg1)
}

// RemoveTracepoint mocks base method
func (m *MockMetadataTracepointServiceServer) RemoveTracepoint(arg0 context.Context, arg1 *metadatapb.RemoveTracepointRequest) (*metadatapb.RemoveTracepointResponse, error) {
	ret := m.ctrl.Call(m, "RemoveTracepoint", arg0, arg1)
	ret0, _ := ret[0].(*metadatapb.RemoveTracepointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTracepoint indicates an expected call of RemoveTracepoint
func (mr *MockMetadataTracepointServiceServerMockRecorder) RemoveTracepoint(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTracepoint", reflect.TypeOf((*MockMetadataTracepointServiceServer)(nil).RemoveTracepoint), arg0, arg1)
}
