// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/services/metadata/metadatapb/store.proto

package storepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	proto2 "pixielabs.ai/pixielabs/src/common/base/proto"
	proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProbeInfo struct {
	ProbeID       *proto1.UUID                 `protobuf:"bytes,1,opt,name=probe_id,json=probeId,proto3" json:"probe_id,omitempty"`
	HealthyAgents []*proto1.UUID               `protobuf:"bytes,2,rep,name=healthy_agents,json=healthyAgents,proto3" json:"healthy_agents,omitempty"`
	FailedAgents  []*ProbeInfo_FailedProbeInfo `protobuf:"bytes,3,rep,name=failed_agents,json=failedAgents,proto3" json:"failed_agents,omitempty"`
	PendingAgents []*proto1.UUID               `protobuf:"bytes,4,rep,name=pending_agents,json=pendingAgents,proto3" json:"pending_agents,omitempty"`
}

func (m *ProbeInfo) Reset()      { *m = ProbeInfo{} }
func (*ProbeInfo) ProtoMessage() {}
func (*ProbeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_06ee95d90ff4e837, []int{0}
}
func (m *ProbeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProbeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProbeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProbeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeInfo.Merge(m, src)
}
func (m *ProbeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProbeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeInfo proto.InternalMessageInfo

func (m *ProbeInfo) GetProbeID() *proto1.UUID {
	if m != nil {
		return m.ProbeID
	}
	return nil
}

func (m *ProbeInfo) GetHealthyAgents() []*proto1.UUID {
	if m != nil {
		return m.HealthyAgents
	}
	return nil
}

func (m *ProbeInfo) GetFailedAgents() []*ProbeInfo_FailedProbeInfo {
	if m != nil {
		return m.FailedAgents
	}
	return nil
}

func (m *ProbeInfo) GetPendingAgents() []*proto1.UUID {
	if m != nil {
		return m.PendingAgents
	}
	return nil
}

type ProbeInfo_FailedProbeInfo struct {
	AgentID *proto1.UUID   `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Status  *proto2.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ProbeInfo_FailedProbeInfo) Reset()      { *m = ProbeInfo_FailedProbeInfo{} }
func (*ProbeInfo_FailedProbeInfo) ProtoMessage() {}
func (*ProbeInfo_FailedProbeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_06ee95d90ff4e837, []int{0, 0}
}
func (m *ProbeInfo_FailedProbeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProbeInfo_FailedProbeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProbeInfo_FailedProbeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProbeInfo_FailedProbeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeInfo_FailedProbeInfo.Merge(m, src)
}
func (m *ProbeInfo_FailedProbeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProbeInfo_FailedProbeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeInfo_FailedProbeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeInfo_FailedProbeInfo proto.InternalMessageInfo

func (m *ProbeInfo_FailedProbeInfo) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *ProbeInfo_FailedProbeInfo) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*ProbeInfo)(nil), "pl.vizier.services.metadata.ProbeInfo")
	proto.RegisterType((*ProbeInfo_FailedProbeInfo)(nil), "pl.vizier.services.metadata.ProbeInfo.FailedProbeInfo")
}

func init() {
	proto.RegisterFile("src/vizier/services/metadata/metadatapb/store.proto", fileDescriptor_06ee95d90ff4e837)
}

var fileDescriptor_06ee95d90ff4e837 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0x5b, 0xd9, 0xd5, 0x59, 0x77, 0x17, 0xe2, 0xa5, 0x54, 0x18, 0xcb, 0x9e, 0x04,
	0x71, 0x06, 0x5c, 0xa8, 0x07, 0x4f, 0x96, 0x22, 0x04, 0x3c, 0x48, 0xa4, 0x17, 0x3d, 0x94, 0x99,
	0x64, 0x9a, 0x0e, 0x24, 0x99, 0x21, 0x33, 0xa9, 0x3f, 0x4e, 0xe2, 0xd1, 0x93, 0x7f, 0x86, 0x7f,
	0x8a, 0xc7, 0x1e, 0x7b, 0x12, 0x3b, 0xbd, 0x78, 0xec, 0x9f, 0x20, 0x99, 0x49, 0x82, 0x88, 0x3f,
	0xd8, 0x4b, 0x78, 0x2f, 0x7c, 0x3e, 0x5f, 0x1e, 0x6f, 0x1e, 0xbc, 0xd2, 0x55, 0x42, 0xd6, 0xe2,
	0xbd, 0xe0, 0x15, 0xd1, 0xbc, 0x5a, 0x8b, 0x84, 0x6b, 0x52, 0x70, 0x43, 0x53, 0x6a, 0x68, 0x5f,
	0x28, 0x46, 0xb4, 0x91, 0x15, 0xc7, 0xaa, 0x92, 0x46, 0x86, 0x77, 0x55, 0x8e, 0xbd, 0x83, 0x3b,
	0x07, 0x77, 0xe8, 0x68, 0xdc, 0x24, 0x26, 0xb2, 0x28, 0x64, 0x49, 0xea, 0x5a, 0xa4, 0xc4, 0x39,
	0xae, 0xf4, 0xfa, 0xe8, 0xf2, 0x17, 0x82, 0x51, 0xcd, 0x5b, 0x42, 0x1b, 0x6a, 0x6a, 0xdd, 0x32,
	0x0f, 0x33, 0x61, 0x56, 0x35, 0xc3, 0x89, 0x2c, 0x48, 0x26, 0x33, 0xe9, 0x19, 0x56, 0x2f, 0x5d,
	0xe7, 0x85, 0xa6, 0xf2, 0xf8, 0xe5, 0xa7, 0x01, 0xbc, 0xf5, 0xa2, 0x92, 0x8c, 0x47, 0xe5, 0x52,
	0x86, 0x8f, 0xe1, 0x4d, 0xd5, 0x34, 0x0b, 0x91, 0x0e, 0xc1, 0x18, 0xdc, 0x3f, 0x7d, 0x74, 0x81,
	0x55, 0x8e, 0x9b, 0x11, 0x14, 0xc3, 0xf3, 0x79, 0x34, 0x9b, 0x9e, 0xda, 0x6f, 0xf7, 0x4e, 0xbc,
	0x31, 0x8b, 0x4f, 0x1c, 0x1d, 0xa5, 0xe1, 0x04, 0x9e, 0xaf, 0x38, 0xcd, 0xcd, 0xea, 0xdd, 0x82,
	0x66, 0xbc, 0x34, 0x7a, 0x78, 0x34, 0x1e, 0xfc, 0x41, 0x8f, 0xcf, 0x5a, 0xec, 0xa9, 0xa3, 0xc2,
	0xd7, 0xf0, 0x6c, 0x49, 0x45, 0xce, 0xd3, 0x4e, 0x1b, 0x38, 0x6d, 0x82, 0xff, 0xb1, 0x28, 0xdc,
	0xcf, 0x8b, 0x9f, 0x39, 0xb7, 0xef, 0xe3, 0xdb, 0x3e, 0xac, 0x0d, 0x9f, 0xc0, 0x73, 0xc5, 0xcb,
	0x54, 0x94, 0x59, 0x97, 0x7e, 0xe3, 0x2f, 0x43, 0xb5, 0x98, 0xf7, 0x46, 0x6f, 0xe0, 0xc5, 0x6f,
	0xc1, 0xcd, 0x62, 0x5c, 0xc4, 0xff, 0x16, 0xe3, 0x12, 0x9a, 0xc5, 0x38, 0x3a, 0x4a, 0xc3, 0x07,
	0xf0, 0xd8, 0x3f, 0xcf, 0xf0, 0xc8, 0x69, 0x77, 0x1a, 0xcd, 0xff, 0x51, 0x0c, 0xbf, 0x74, 0x45,
	0xdc, 0x22, 0xd3, 0x8f, 0x60, 0xb3, 0x43, 0xc1, 0x76, 0x87, 0x82, 0xc3, 0x0e, 0x81, 0x0f, 0x16,
	0x81, 0x2f, 0x16, 0x81, 0xaf, 0x16, 0x81, 0x8d, 0x45, 0xe0, 0xbb, 0x45, 0xe0, 0x87, 0x45, 0xc1,
	0xc1, 0x22, 0xf0, 0x79, 0x8f, 0x82, 0xcd, 0x1e, 0x05, 0xdb, 0x3d, 0x0a, 0x5e, 0x3d, 0x57, 0xe2,
	0xad, 0xe0, 0x39, 0x65, 0x1a, 0x53, 0x41, 0xfa, 0x86, 0x5c, 0xeb, 0x42, 0x9f, 0xb8, 0xaf, 0x62,
	0xec, 0xd8, 0x1d, 0xc6, 0xd5, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0x07, 0xeb, 0xc1, 0xe1,
	0x02, 0x00, 0x00,
}

func (this *ProbeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProbeInfo)
	if !ok {
		that2, ok := that.(ProbeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProbeID.Equal(that1.ProbeID) {
		return false
	}
	if len(this.HealthyAgents) != len(that1.HealthyAgents) {
		return false
	}
	for i := range this.HealthyAgents {
		if !this.HealthyAgents[i].Equal(that1.HealthyAgents[i]) {
			return false
		}
	}
	if len(this.FailedAgents) != len(that1.FailedAgents) {
		return false
	}
	for i := range this.FailedAgents {
		if !this.FailedAgents[i].Equal(that1.FailedAgents[i]) {
			return false
		}
	}
	if len(this.PendingAgents) != len(that1.PendingAgents) {
		return false
	}
	for i := range this.PendingAgents {
		if !this.PendingAgents[i].Equal(that1.PendingAgents[i]) {
			return false
		}
	}
	return true
}
func (this *ProbeInfo_FailedProbeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProbeInfo_FailedProbeInfo)
	if !ok {
		that2, ok := that.(ProbeInfo_FailedProbeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *ProbeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&storepb.ProbeInfo{")
	if this.ProbeID != nil {
		s = append(s, "ProbeID: "+fmt.Sprintf("%#v", this.ProbeID)+",\n")
	}
	if this.HealthyAgents != nil {
		s = append(s, "HealthyAgents: "+fmt.Sprintf("%#v", this.HealthyAgents)+",\n")
	}
	if this.FailedAgents != nil {
		s = append(s, "FailedAgents: "+fmt.Sprintf("%#v", this.FailedAgents)+",\n")
	}
	if this.PendingAgents != nil {
		s = append(s, "PendingAgents: "+fmt.Sprintf("%#v", this.PendingAgents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProbeInfo_FailedProbeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&storepb.ProbeInfo_FailedProbeInfo{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStore(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProbeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProbeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProbeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingAgents) > 0 {
		for iNdEx := len(m.PendingAgents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingAgents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.FailedAgents) > 0 {
		for iNdEx := len(m.FailedAgents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FailedAgents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HealthyAgents) > 0 {
		for iNdEx := len(m.HealthyAgents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HealthyAgents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ProbeID != nil {
		{
			size, err := m.ProbeID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProbeInfo_FailedProbeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProbeInfo_FailedProbeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProbeInfo_FailedProbeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProbeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeID != nil {
		l = m.ProbeID.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if len(m.HealthyAgents) > 0 {
		for _, e := range m.HealthyAgents {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	if len(m.FailedAgents) > 0 {
		for _, e := range m.FailedAgents {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	if len(m.PendingAgents) > 0 {
		for _, e := range m.PendingAgents {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	return n
}

func (m *ProbeInfo_FailedProbeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovStore(uint64(l))
	}
	return n
}

func sovStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProbeInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHealthyAgents := "[]*UUID{"
	for _, f := range this.HealthyAgents {
		repeatedStringForHealthyAgents += strings.Replace(fmt.Sprintf("%v", f), "UUID", "proto1.UUID", 1) + ","
	}
	repeatedStringForHealthyAgents += "}"
	repeatedStringForFailedAgents := "[]*ProbeInfo_FailedProbeInfo{"
	for _, f := range this.FailedAgents {
		repeatedStringForFailedAgents += strings.Replace(fmt.Sprintf("%v", f), "ProbeInfo_FailedProbeInfo", "ProbeInfo_FailedProbeInfo", 1) + ","
	}
	repeatedStringForFailedAgents += "}"
	repeatedStringForPendingAgents := "[]*UUID{"
	for _, f := range this.PendingAgents {
		repeatedStringForPendingAgents += strings.Replace(fmt.Sprintf("%v", f), "UUID", "proto1.UUID", 1) + ","
	}
	repeatedStringForPendingAgents += "}"
	s := strings.Join([]string{`&ProbeInfo{`,
		`ProbeID:` + strings.Replace(fmt.Sprintf("%v", this.ProbeID), "UUID", "proto1.UUID", 1) + `,`,
		`HealthyAgents:` + repeatedStringForHealthyAgents + `,`,
		`FailedAgents:` + repeatedStringForFailedAgents + `,`,
		`PendingAgents:` + repeatedStringForPendingAgents + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProbeInfo_FailedProbeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProbeInfo_FailedProbeInfo{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStore(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProbeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProbeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProbeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbeID == nil {
				m.ProbeID = &proto1.UUID{}
			}
			if err := m.ProbeID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyAgents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthyAgents = append(m.HealthyAgents, &proto1.UUID{})
			if err := m.HealthyAgents[len(m.HealthyAgents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedAgents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedAgents = append(m.FailedAgents, &ProbeInfo_FailedProbeInfo{})
			if err := m.FailedAgents[len(m.FailedAgents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAgents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingAgents = append(m.PendingAgents, &proto1.UUID{})
			if err := m.PendingAgents[len(m.PendingAgents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProbeInfo_FailedProbeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailedProbeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailedProbeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStore = fmt.Errorf("proto: unexpected end of group")
)
