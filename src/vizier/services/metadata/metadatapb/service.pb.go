// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/services/metadata/metadatapb/service.proto

package metadatapb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	distributedpb "pixielabs.ai/pixielabs/src/carnot/planner/distributedpb"
	proto3 "pixielabs.ai/pixielabs/src/common/base/proto"
	proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	logical "pixielabs.ai/pixielabs/src/stirling/dynamic_tracing/ir/logical"
	proto2 "pixielabs.ai/pixielabs/src/table_store/proto"
	messagespb "pixielabs.ai/pixielabs/src/vizier/messages/messagespb"
	agentpb "pixielabs.ai/pixielabs/src/vizier/services/shared/agentpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SchemaByAgentRequest struct {
	AgentIds []*proto1.UUID `protobuf:"bytes,1,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
}

func (m *SchemaByAgentRequest) Reset()      { *m = SchemaByAgentRequest{} }
func (*SchemaByAgentRequest) ProtoMessage() {}
func (*SchemaByAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{0}
}
func (m *SchemaByAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaByAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaByAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaByAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaByAgentRequest.Merge(m, src)
}
func (m *SchemaByAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchemaByAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaByAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaByAgentRequest proto.InternalMessageInfo

func (m *SchemaByAgentRequest) GetAgentIds() []*proto1.UUID {
	if m != nil {
		return m.AgentIds
	}
	return nil
}

type SchemaByAgentResponse struct {
	SchemaByAgent []*SchemaByAgentResponse_SchemaByAgent `protobuf:"bytes,1,rep,name=schema_by_agent,json=schemaByAgent,proto3" json:"schema_by_agent,omitempty"`
}

func (m *SchemaByAgentResponse) Reset()      { *m = SchemaByAgentResponse{} }
func (*SchemaByAgentResponse) ProtoMessage() {}
func (*SchemaByAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{1}
}
func (m *SchemaByAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaByAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaByAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaByAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaByAgentResponse.Merge(m, src)
}
func (m *SchemaByAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchemaByAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaByAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaByAgentResponse proto.InternalMessageInfo

func (m *SchemaByAgentResponse) GetSchemaByAgent() []*SchemaByAgentResponse_SchemaByAgent {
	if m != nil {
		return m.SchemaByAgent
	}
	return nil
}

type SchemaByAgentResponse_SchemaByAgent struct {
	AgentID *proto1.UUID   `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Schema  *proto2.Schema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *SchemaByAgentResponse_SchemaByAgent) Reset()      { *m = SchemaByAgentResponse_SchemaByAgent{} }
func (*SchemaByAgentResponse_SchemaByAgent) ProtoMessage() {}
func (*SchemaByAgentResponse_SchemaByAgent) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{1, 0}
}
func (m *SchemaByAgentResponse_SchemaByAgent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaByAgentResponse_SchemaByAgent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaByAgentResponse_SchemaByAgent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaByAgentResponse_SchemaByAgent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaByAgentResponse_SchemaByAgent.Merge(m, src)
}
func (m *SchemaByAgentResponse_SchemaByAgent) XXX_Size() int {
	return m.Size()
}
func (m *SchemaByAgentResponse_SchemaByAgent) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaByAgentResponse_SchemaByAgent.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaByAgentResponse_SchemaByAgent proto.InternalMessageInfo

func (m *SchemaByAgentResponse_SchemaByAgent) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *SchemaByAgentResponse_SchemaByAgent) GetSchema() *proto2.Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type SchemaRequest struct {
}

func (m *SchemaRequest) Reset()      { *m = SchemaRequest{} }
func (*SchemaRequest) ProtoMessage() {}
func (*SchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{2}
}
func (m *SchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaRequest.Merge(m, src)
}
func (m *SchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaRequest proto.InternalMessageInfo

type SchemaResponse struct {
	Schema *proto2.Schema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *SchemaResponse) Reset()      { *m = SchemaResponse{} }
func (*SchemaResponse) ProtoMessage() {}
func (*SchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{3}
}
func (m *SchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaResponse.Merge(m, src)
}
func (m *SchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaResponse proto.InternalMessageInfo

func (m *SchemaResponse) GetSchema() *proto2.Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type AgentInfoRequest struct {
}

func (m *AgentInfoRequest) Reset()      { *m = AgentInfoRequest{} }
func (*AgentInfoRequest) ProtoMessage() {}
func (*AgentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{4}
}
func (m *AgentInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfoRequest.Merge(m, src)
}
func (m *AgentInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfoRequest proto.InternalMessageInfo

type AgentInfoResponse struct {
	Info []*AgentMetadata `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *AgentInfoResponse) Reset()      { *m = AgentInfoResponse{} }
func (*AgentInfoResponse) ProtoMessage() {}
func (*AgentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{5}
}
func (m *AgentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfoResponse.Merge(m, src)
}
func (m *AgentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfoResponse proto.InternalMessageInfo

func (m *AgentInfoResponse) GetInfo() []*AgentMetadata {
	if m != nil {
		return m.Info
	}
	return nil
}

type AgentMetadata struct {
	Agent      *agentpb.Agent            `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Status     *agentpb.AgentStatus      `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	CarnotInfo *distributedpb.CarnotInfo `protobuf:"bytes,3,opt,name=carnot_info,json=carnotInfo,proto3" json:"carnot_info,omitempty"`
}

func (m *AgentMetadata) Reset()      { *m = AgentMetadata{} }
func (*AgentMetadata) ProtoMessage() {}
func (*AgentMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{6}
}
func (m *AgentMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentMetadata.Merge(m, src)
}
func (m *AgentMetadata) XXX_Size() int {
	return m.Size()
}
func (m *AgentMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AgentMetadata proto.InternalMessageInfo

func (m *AgentMetadata) GetAgent() *agentpb.Agent {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *AgentMetadata) GetStatus() *agentpb.AgentStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AgentMetadata) GetCarnotInfo() *distributedpb.CarnotInfo {
	if m != nil {
		return m.CarnotInfo
	}
	return nil
}

type AgentTableMetadataRequest struct {
}

func (m *AgentTableMetadataRequest) Reset()      { *m = AgentTableMetadataRequest{} }
func (*AgentTableMetadataRequest) ProtoMessage() {}
func (*AgentTableMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{7}
}
func (m *AgentTableMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentTableMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentTableMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentTableMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentTableMetadataRequest.Merge(m, src)
}
func (m *AgentTableMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *AgentTableMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentTableMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentTableMetadataRequest proto.InternalMessageInfo

type AgentTableMetadata struct {
	AgentID  *proto1.UUID              `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Schema   *proto2.Schema            `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	DataInfo *messagespb.AgentDataInfo `protobuf:"bytes,3,opt,name=data_info,json=dataInfo,proto3" json:"data_info,omitempty"`
}

func (m *AgentTableMetadata) Reset()      { *m = AgentTableMetadata{} }
func (*AgentTableMetadata) ProtoMessage() {}
func (*AgentTableMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{8}
}
func (m *AgentTableMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentTableMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentTableMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentTableMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentTableMetadata.Merge(m, src)
}
func (m *AgentTableMetadata) XXX_Size() int {
	return m.Size()
}
func (m *AgentTableMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentTableMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AgentTableMetadata proto.InternalMessageInfo

func (m *AgentTableMetadata) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *AgentTableMetadata) GetSchema() *proto2.Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *AgentTableMetadata) GetDataInfo() *messagespb.AgentDataInfo {
	if m != nil {
		return m.DataInfo
	}
	return nil
}

type AgentTableMetadataResponse struct {
	MetadataByAgent []*AgentTableMetadata `protobuf:"bytes,1,rep,name=metadata_by_agent,json=metadataByAgent,proto3" json:"metadata_by_agent,omitempty"`
}

func (m *AgentTableMetadataResponse) Reset()      { *m = AgentTableMetadataResponse{} }
func (*AgentTableMetadataResponse) ProtoMessage() {}
func (*AgentTableMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{9}
}
func (m *AgentTableMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentTableMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentTableMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentTableMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentTableMetadataResponse.Merge(m, src)
}
func (m *AgentTableMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentTableMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentTableMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentTableMetadataResponse proto.InternalMessageInfo

func (m *AgentTableMetadataResponse) GetMetadataByAgent() []*AgentTableMetadata {
	if m != nil {
		return m.MetadataByAgent
	}
	return nil
}

type RegisterProbeRequest struct {
	Program   *logical.Program `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	ProbeName string           `protobuf:"bytes,2,opt,name=probe_name,json=probeName,proto3" json:"probe_name,omitempty"`
}

func (m *RegisterProbeRequest) Reset()      { *m = RegisterProbeRequest{} }
func (*RegisterProbeRequest) ProtoMessage() {}
func (*RegisterProbeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{10}
}
func (m *RegisterProbeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterProbeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterProbeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterProbeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterProbeRequest.Merge(m, src)
}
func (m *RegisterProbeRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterProbeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterProbeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterProbeRequest proto.InternalMessageInfo

func (m *RegisterProbeRequest) GetProgram() *logical.Program {
	if m != nil {
		return m.Program
	}
	return nil
}

func (m *RegisterProbeRequest) GetProbeName() string {
	if m != nil {
		return m.ProbeName
	}
	return ""
}

type RegisterProbeResponse struct {
	Status  *proto3.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ProbeID string         `protobuf:"bytes,2,opt,name=probe_id,json=probeId,proto3" json:"probe_id,omitempty"`
}

func (m *RegisterProbeResponse) Reset()      { *m = RegisterProbeResponse{} }
func (*RegisterProbeResponse) ProtoMessage() {}
func (*RegisterProbeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{11}
}
func (m *RegisterProbeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterProbeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterProbeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterProbeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterProbeResponse.Merge(m, src)
}
func (m *RegisterProbeResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterProbeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterProbeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterProbeResponse proto.InternalMessageInfo

func (m *RegisterProbeResponse) GetStatus() *proto3.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RegisterProbeResponse) GetProbeID() string {
	if m != nil {
		return m.ProbeID
	}
	return ""
}

type GetProbeInfoRequest struct {
	ProbeIDs []string `protobuf:"bytes,1,rep,name=probe_ids,json=probeIds,proto3" json:"probe_ids,omitempty"`
}

func (m *GetProbeInfoRequest) Reset()      { *m = GetProbeInfoRequest{} }
func (*GetProbeInfoRequest) ProtoMessage() {}
func (*GetProbeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{12}
}
func (m *GetProbeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProbeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProbeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProbeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProbeInfoRequest.Merge(m, src)
}
func (m *GetProbeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetProbeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProbeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProbeInfoRequest proto.InternalMessageInfo

func (m *GetProbeInfoRequest) GetProbeIDs() []string {
	if m != nil {
		return m.ProbeIDs
	}
	return nil
}

type GetProbeInfoResponse struct {
	Probes []*GetProbeInfoResponse_ProbeState `protobuf:"bytes,1,rep,name=probes,proto3" json:"probes,omitempty"`
}

func (m *GetProbeInfoResponse) Reset()      { *m = GetProbeInfoResponse{} }
func (*GetProbeInfoResponse) ProtoMessage() {}
func (*GetProbeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{13}
}
func (m *GetProbeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProbeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProbeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProbeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProbeInfoResponse.Merge(m, src)
}
func (m *GetProbeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetProbeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProbeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProbeInfoResponse proto.InternalMessageInfo

func (m *GetProbeInfoResponse) GetProbes() []*GetProbeInfoResponse_ProbeState {
	if m != nil {
		return m.Probes
	}
	return nil
}

type GetProbeInfoResponse_ProbeState struct {
	ProbeIDs string                `protobuf:"bytes,1,opt,name=probe_id,json=probeId,proto3" json:"probe_id,omitempty"`
	State    proto3.LifeCycleState `protobuf:"varint,2,opt,name=state,proto3,enum=pl.statuspb.LifeCycleState" json:"state,omitempty"`
	Status   *proto3.Status        `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GetProbeInfoResponse_ProbeState) Reset()      { *m = GetProbeInfoResponse_ProbeState{} }
func (*GetProbeInfoResponse_ProbeState) ProtoMessage() {}
func (*GetProbeInfoResponse_ProbeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{13, 0}
}
func (m *GetProbeInfoResponse_ProbeState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProbeInfoResponse_ProbeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProbeInfoResponse_ProbeState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProbeInfoResponse_ProbeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProbeInfoResponse_ProbeState.Merge(m, src)
}
func (m *GetProbeInfoResponse_ProbeState) XXX_Size() int {
	return m.Size()
}
func (m *GetProbeInfoResponse_ProbeState) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProbeInfoResponse_ProbeState.DiscardUnknown(m)
}

var xxx_messageInfo_GetProbeInfoResponse_ProbeState proto.InternalMessageInfo

func (m *GetProbeInfoResponse_ProbeState) GetProbeIDs() string {
	if m != nil {
		return m.ProbeIDs
	}
	return ""
}

func (m *GetProbeInfoResponse_ProbeState) GetState() proto3.LifeCycleState {
	if m != nil {
		return m.State
	}
	return proto3.UNKNOWN_STATE
}

func (m *GetProbeInfoResponse_ProbeState) GetStatus() *proto3.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type EvictProbeRequest struct {
	ProbeID string `protobuf:"bytes,1,opt,name=probe_id,json=probeId,proto3" json:"probe_id,omitempty"`
}

func (m *EvictProbeRequest) Reset()      { *m = EvictProbeRequest{} }
func (*EvictProbeRequest) ProtoMessage() {}
func (*EvictProbeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{14}
}
func (m *EvictProbeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvictProbeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvictProbeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvictProbeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictProbeRequest.Merge(m, src)
}
func (m *EvictProbeRequest) XXX_Size() int {
	return m.Size()
}
func (m *EvictProbeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictProbeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvictProbeRequest proto.InternalMessageInfo

func (m *EvictProbeRequest) GetProbeID() string {
	if m != nil {
		return m.ProbeID
	}
	return ""
}

type EvictProbeResponse struct {
	Status *proto3.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *EvictProbeResponse) Reset()      { *m = EvictProbeResponse{} }
func (*EvictProbeResponse) ProtoMessage() {}
func (*EvictProbeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe4468195647430, []int{15}
}
func (m *EvictProbeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvictProbeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvictProbeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvictProbeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictProbeResponse.Merge(m, src)
}
func (m *EvictProbeResponse) XXX_Size() int {
	return m.Size()
}
func (m *EvictProbeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictProbeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvictProbeResponse proto.InternalMessageInfo

func (m *EvictProbeResponse) GetStatus() *proto3.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*SchemaByAgentRequest)(nil), "pl.vizier.services.metadata.SchemaByAgentRequest")
	proto.RegisterType((*SchemaByAgentResponse)(nil), "pl.vizier.services.metadata.SchemaByAgentResponse")
	proto.RegisterType((*SchemaByAgentResponse_SchemaByAgent)(nil), "pl.vizier.services.metadata.SchemaByAgentResponse.SchemaByAgent")
	proto.RegisterType((*SchemaRequest)(nil), "pl.vizier.services.metadata.SchemaRequest")
	proto.RegisterType((*SchemaResponse)(nil), "pl.vizier.services.metadata.SchemaResponse")
	proto.RegisterType((*AgentInfoRequest)(nil), "pl.vizier.services.metadata.AgentInfoRequest")
	proto.RegisterType((*AgentInfoResponse)(nil), "pl.vizier.services.metadata.AgentInfoResponse")
	proto.RegisterType((*AgentMetadata)(nil), "pl.vizier.services.metadata.AgentMetadata")
	proto.RegisterType((*AgentTableMetadataRequest)(nil), "pl.vizier.services.metadata.AgentTableMetadataRequest")
	proto.RegisterType((*AgentTableMetadata)(nil), "pl.vizier.services.metadata.AgentTableMetadata")
	proto.RegisterType((*AgentTableMetadataResponse)(nil), "pl.vizier.services.metadata.AgentTableMetadataResponse")
	proto.RegisterType((*RegisterProbeRequest)(nil), "pl.vizier.services.metadata.RegisterProbeRequest")
	proto.RegisterType((*RegisterProbeResponse)(nil), "pl.vizier.services.metadata.RegisterProbeResponse")
	proto.RegisterType((*GetProbeInfoRequest)(nil), "pl.vizier.services.metadata.GetProbeInfoRequest")
	proto.RegisterType((*GetProbeInfoResponse)(nil), "pl.vizier.services.metadata.GetProbeInfoResponse")
	proto.RegisterType((*GetProbeInfoResponse_ProbeState)(nil), "pl.vizier.services.metadata.GetProbeInfoResponse.ProbeState")
	proto.RegisterType((*EvictProbeRequest)(nil), "pl.vizier.services.metadata.EvictProbeRequest")
	proto.RegisterType((*EvictProbeResponse)(nil), "pl.vizier.services.metadata.EvictProbeResponse")
}

func init() {
	proto.RegisterFile("src/vizier/services/metadata/metadatapb/service.proto", fileDescriptor_bfe4468195647430)
}

var fileDescriptor_bfe4468195647430 = []byte{
	// 1072 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcd, 0x4e, 0x1c, 0x47,
	0x10, 0xde, 0x81, 0x18, 0x76, 0x0b, 0x63, 0x4c, 0x1b, 0x24, 0xb2, 0x28, 0x03, 0x99, 0x03, 0x49,
	0x8c, 0xe9, 0x09, 0x44, 0x09, 0x07, 0x5b, 0x96, 0x8d, 0x89, 0xd0, 0x4a, 0x4e, 0x64, 0x0d, 0xf6,
	0x25, 0x39, 0xac, 0x7a, 0x66, 0x9a, 0xa5, 0xa5, 0xf9, 0xcb, 0x74, 0x2f, 0x32, 0xc9, 0x21, 0x8e,
	0x94, 0x5c, 0x72, 0xca, 0x25, 0xef, 0x90, 0x27, 0x89, 0x72, 0xe4, 0x16, 0x9f, 0xac, 0xb0, 0x5c,
	0x72, 0xf4, 0x23, 0x44, 0xd3, 0x3f, 0xc3, 0x0c, 0xac, 0x60, 0xd7, 0x87, 0x9c, 0xe8, 0xae, 0xae,
	0xfa, 0xaa, 0xea, 0xab, 0x9f, 0x61, 0xe1, 0x73, 0x9e, 0x07, 0xee, 0x11, 0xfb, 0x9e, 0xd1, 0xdc,
	0xe5, 0x34, 0x3f, 0x62, 0x01, 0xe5, 0x6e, 0x4c, 0x05, 0x09, 0x89, 0x20, 0xe5, 0x21, 0xf3, 0xcd,
	0x23, 0xce, 0xf2, 0x54, 0xa4, 0x68, 0x39, 0x8b, 0xb0, 0xb2, 0xc2, 0xc6, 0x0a, 0x1b, 0xe5, 0xf6,
	0x46, 0x8f, 0x89, 0xc3, 0xbe, 0x8f, 0x83, 0x34, 0x76, 0x7b, 0x69, 0x2f, 0x75, 0xa5, 0x8d, 0xdf,
	0x3f, 0x90, 0x37, 0x79, 0x91, 0x27, 0x85, 0xd5, 0x5e, 0x2d, 0x42, 0x08, 0xd2, 0x38, 0x4e, 0x13,
	0xb7, 0xdf, 0x67, 0xa1, 0x52, 0x97, 0x47, 0xad, 0xe1, 0x14, 0x1a, 0x82, 0xf8, 0x11, 0xed, 0x72,
	0x91, 0xe6, 0x54, 0x6b, 0xf0, 0xe0, 0x90, 0xc6, 0x44, 0xeb, 0x6c, 0x4b, 0x14, 0x92, 0x27, 0xa9,
	0x70, 0xb3, 0x88, 0x24, 0x09, 0xcd, 0xdd, 0x90, 0x71, 0x91, 0x33, 0xbf, 0x2f, 0x68, 0x98, 0xf9,
	0xd5, 0x5b, 0xb7, 0xd0, 0xd0, 0x86, 0x1b, 0x15, 0x06, 0x62, 0xca, 0x39, 0xe9, 0x49, 0x06, 0xd4,
	0x21, 0xf3, 0xcb, 0xa3, 0x56, 0xc7, 0xc3, 0x08, 0xe3, 0x87, 0x24, 0xa7, 0xa1, 0x4b, 0x7a, 0x34,
	0x11, 0x99, 0xaf, 0xfe, 0x56, 0xe1, 0xb9, 0x60, 0x79, 0xc4, 0x92, 0x9e, 0x1b, 0x1e, 0x27, 0x24,
	0x66, 0x41, 0x57, 0xe4, 0x24, 0x28, 0xee, 0x2c, 0x77, 0xa3, 0xb4, 0xc7, 0x02, 0x12, 0x55, 0x53,
	0xd5, 0x64, 0xf8, 0x84, 0x97, 0xa9, 0x0a, 0x22, 0xfa, 0x3a, 0x04, 0x67, 0x17, 0x16, 0xf6, 0x65,
	0xea, 0x3b, 0xc7, 0x8f, 0x0b, 0x4f, 0x1e, 0xfd, 0xae, 0x4f, 0xb9, 0x40, 0xf7, 0xa0, 0x25, 0x3d,
	0x77, 0x59, 0xc8, 0x97, 0xac, 0xd5, 0xc9, 0x8f, 0x67, 0xb6, 0xe6, 0x70, 0x16, 0xe1, 0x82, 0xc9,
	0xcc, 0xc7, 0x2f, 0x5e, 0x74, 0x76, 0xbd, 0xa6, 0xd4, 0xe8, 0x84, 0xdc, 0xf9, 0x65, 0x02, 0x16,
	0x2f, 0xc0, 0xf0, 0x2c, 0x4d, 0x38, 0x45, 0x87, 0x30, 0xa7, 0xa8, 0xed, 0xfa, 0xc7, 0x5d, 0xa9,
	0xaf, 0xd1, 0x1e, 0xe1, 0x2b, 0xca, 0x8e, 0x87, 0x82, 0x5d, 0x90, 0xce, 0xf2, 0xea, 0xb5, 0xfd,
	0x93, 0x05, 0xb3, 0x35, 0x05, 0xb4, 0x0d, 0x4d, 0x93, 0xc3, 0x92, 0xb5, 0x6a, 0x0d, 0x49, 0x61,
	0x67, 0x66, 0xf0, 0x66, 0x65, 0x5a, 0x6a, 0x77, 0x76, 0xbd, 0x69, 0x9d, 0x0f, 0xda, 0x86, 0x29,
	0x85, 0xbd, 0x34, 0x21, 0xcd, 0x56, 0x0a, 0xb3, 0x4a, 0xcf, 0x60, 0xf5, 0x9a, 0xf9, 0x3a, 0x22,
	0x4f, 0xab, 0x3b, 0x73, 0x26, 0x04, 0x4d, 0xa3, 0xd3, 0x81, 0x5b, 0x46, 0xa0, 0x09, 0x79, 0x67,
	0x6c, 0x04, 0xb7, 0x55, 0xa0, 0xc9, 0x41, 0x6a, 0xe0, 0xf7, 0x61, 0xbe, 0x22, 0xd3, 0x1e, 0x1e,
	0xc2, 0x7b, 0x2c, 0x39, 0x48, 0x35, 0xcf, 0x77, 0xaf, 0xe4, 0x59, 0x5a, 0x7f, 0xa5, 0x6f, 0x9e,
	0xb4, 0x73, 0x4e, 0x2d, 0x98, 0xad, 0xc9, 0xd1, 0x03, 0xb8, 0x61, 0x4a, 0x57, 0x84, 0xbc, 0x36,
	0x0c, 0x52, 0xb5, 0x2d, 0x56, 0xed, 0xaa, 0x0a, 0xa4, 0x8c, 0xd0, 0x2e, 0x4c, 0xa9, 0x96, 0xd3,
	0x19, 0xdf, 0x1b, 0xcd, 0x7c, 0x5f, 0xda, 0x78, 0xda, 0x16, 0x3d, 0x85, 0x19, 0x35, 0x91, 0x5d,
	0x99, 0xdc, 0xa4, 0x84, 0x5a, 0x2f, 0xa0, 0x94, 0x18, 0xeb, 0x41, 0xc5, 0xb5, 0x41, 0xc5, 0x4f,
	0xe4, 0xa3, 0xe4, 0x07, 0x82, 0xf2, 0xec, 0x2c, 0xc3, 0xfb, 0xd2, 0xc9, 0xf3, 0x82, 0xf8, 0x32,
	0x7f, 0xcd, 0xea, 0x9f, 0x16, 0xa0, 0xcb, 0xaf, 0xff, 0x7f, 0x3b, 0xa1, 0x87, 0xd0, 0x2a, 0x3c,
	0x57, 0x33, 0xfe, 0xb0, 0x42, 0x5e, 0xb9, 0x4d, 0xa4, 0xc7, 0x5d, 0x22, 0x88, 0xcc, 0xb3, 0x19,
	0xea, 0x93, 0x73, 0x0c, 0xed, 0x61, 0x59, 0xea, 0x3e, 0xf9, 0x16, 0xe6, 0x4d, 0x1f, 0x5c, 0x1c,
	0x4e, 0xf7, 0xfa, 0xa6, 0xa9, 0x63, 0xce, 0x99, 0x47, 0x3d, 0x7b, 0xce, 0x2b, 0x0b, 0x16, 0x3c,
	0xda, 0x63, 0x5c, 0xd0, 0xfc, 0x59, 0x9e, 0xfa, 0xd4, 0x2c, 0x96, 0x0e, 0x4c, 0x67, 0x79, 0xda,
	0xcb, 0x49, 0xac, 0x49, 0x94, 0xbe, 0xcc, 0x52, 0xc3, 0x17, 0x96, 0x1a, 0x66, 0x39, 0x36, 0x4b,
	0xed, 0x99, 0x32, 0xf3, 0x8c, 0x3d, 0xfa, 0x00, 0x20, 0x2b, 0xa0, 0xbb, 0x09, 0x89, 0xa9, 0xe4,
	0xb6, 0xe5, 0xb5, 0xa4, 0xe4, 0x6b, 0x12, 0x53, 0x27, 0x82, 0xc5, 0x0b, 0x11, 0xe8, 0xc4, 0xd7,
	0xcb, 0x86, 0x54, 0x11, 0xdc, 0x51, 0x11, 0x14, 0x92, 0xa2, 0x06, 0xf5, 0xbe, 0x5b, 0x83, 0xa6,
	0x72, 0xc2, 0x42, 0xe5, 0x42, 0x15, 0x59, 0x22, 0x16, 0x45, 0x96, 0x8f, 0x9d, 0xd0, 0x79, 0x04,
	0x77, 0xf6, 0xa8, 0x50, 0xe2, 0xf3, 0x09, 0x45, 0x9f, 0x40, 0xcb, 0x98, 0xab, 0x3d, 0xda, 0xda,
	0xb9, 0x39, 0x78, 0xb3, 0xd2, 0xd4, 0xf6, 0xdc, 0x6b, 0x6a, 0x00, 0xee, 0xfc, 0x3c, 0x01, 0x0b,
	0x75, 0x08, 0x1d, 0xef, 0x73, 0x98, 0x92, 0x4a, 0x66, 0x11, 0x3f, 0xb8, 0xb2, 0x3a, 0xc3, 0x20,
	0xb0, 0x94, 0x14, 0x99, 0x51, 0x4f, 0x63, 0xb5, 0x7f, 0xb7, 0x00, 0xce, 0xc5, 0xe8, 0xa3, 0x4a,
	0x9e, 0x96, 0xcc, 0xb3, 0x1e, 0xa7, 0x49, 0x14, 0x6d, 0xc2, 0x8d, 0x82, 0x1a, 0x45, 0xf8, 0xad,
	0xad, 0xe5, 0x1a, 0x79, 0x4f, 0xd9, 0x01, 0x7d, 0x72, 0x1c, 0x44, 0xda, 0x97, 0xd2, 0xac, 0x10,
	0x3e, 0x79, 0x2d, 0xe1, 0xce, 0x7d, 0x98, 0xff, 0xf2, 0x88, 0x05, 0xa2, 0xd6, 0x35, 0x6b, 0x97,
	0xa2, 0x1b, 0x5e, 0x85, 0xc7, 0x80, 0xaa, 0xc6, 0xef, 0x50, 0xf0, 0xad, 0xbf, 0xa7, 0x60, 0xce,
	0xf4, 0xf5, 0xbe, 0x62, 0x17, 0xf5, 0x00, 0xf6, 0xa8, 0x50, 0xd3, 0xc9, 0xd1, 0xdd, 0x11, 0x3e,
	0x5d, 0x3a, 0xf0, 0xf6, 0xfa, 0x48, 0xba, 0x2a, 0x4e, 0xa7, 0x81, 0x7e, 0x80, 0xdb, 0xa5, 0x23,
	0xf3, 0x19, 0xdb, 0x1c, 0xe7, 0x4b, 0xa9, 0xbc, 0x6e, 0x8d, 0xff, 0x71, 0x75, 0x1a, 0x28, 0x85,
	0x9b, 0x7b, 0x54, 0x94, 0x1f, 0x14, 0xb4, 0x71, 0xfd, 0x16, 0xa8, 0xb4, 0x7a, 0x1b, 0x8f, 0xaa,
	0x5e, 0x3a, 0xfc, 0xd5, 0x82, 0x45, 0xe3, 0xb1, 0xbe, 0x6b, 0xbf, 0x18, 0x77, 0x01, 0xe9, 0x18,
	0xb6, 0xc7, 0xb6, 0x2b, 0x83, 0x79, 0x09, 0xb3, 0xb5, 0x75, 0x71, 0x0d, 0xef, 0xc3, 0x96, 0xdb,
	0x35, 0xbc, 0x0f, 0xdd, 0x46, 0x4e, 0x03, 0xf5, 0x25, 0xef, 0xe5, 0xd0, 0xa2, 0x4f, 0xc7, 0x98,
	0x6f, 0xe5, 0x77, 0x73, 0xec, 0x8d, 0x20, 0xcb, 0x0d, 0xe7, 0xb3, 0x82, 0xae, 0xae, 0xde, 0xa5,
	0x89, 0x6c, 0xbb, 0x23, 0xeb, 0x1b, 0x87, 0x3b, 0x3f, 0x9e, 0x9c, 0xda, 0x8d, 0xd7, 0xa7, 0x76,
	0xe3, 0xed, 0xa9, 0x6d, 0xbd, 0x1a, 0xd8, 0xd6, 0x1f, 0x03, 0xdb, 0xfa, 0x6b, 0x60, 0x5b, 0x27,
	0x03, 0xdb, 0xfa, 0x67, 0x60, 0x5b, 0xff, 0x0e, 0xec, 0xc6, 0xdb, 0x81, 0x6d, 0xfd, 0x76, 0x66,
	0x37, 0x4e, 0xce, 0xec, 0xc6, 0xeb, 0x33, 0xbb, 0xf1, 0x4d, 0x27, 0x63, 0x2f, 0x19, 0x8d, 0x88,
	0xcf, 0x31, 0x61, 0x6e, 0x79, 0x71, 0x47, 0xfc, 0xb1, 0x71, 0xff, 0xfc, 0xe8, 0x4f, 0xc9, 0xff,
	0x79, 0x3f, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x38, 0x26, 0x1f, 0xa9, 0x0c, 0x00, 0x00,
}

func (this *SchemaByAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaByAgentRequest)
	if !ok {
		that2, ok := that.(SchemaByAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AgentIds) != len(that1.AgentIds) {
		return false
	}
	for i := range this.AgentIds {
		if !this.AgentIds[i].Equal(that1.AgentIds[i]) {
			return false
		}
	}
	return true
}
func (this *SchemaByAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaByAgentResponse)
	if !ok {
		that2, ok := that.(SchemaByAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SchemaByAgent) != len(that1.SchemaByAgent) {
		return false
	}
	for i := range this.SchemaByAgent {
		if !this.SchemaByAgent[i].Equal(that1.SchemaByAgent[i]) {
			return false
		}
	}
	return true
}
func (this *SchemaByAgentResponse_SchemaByAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaByAgentResponse_SchemaByAgent)
	if !ok {
		that2, ok := that.(SchemaByAgentResponse_SchemaByAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	return true
}
func (this *SchemaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaRequest)
	if !ok {
		that2, ok := that.(SchemaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SchemaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaResponse)
	if !ok {
		that2, ok := that.(SchemaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	return true
}
func (this *AgentInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfoRequest)
	if !ok {
		that2, ok := that.(AgentInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AgentInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfoResponse)
	if !ok {
		that2, ok := that.(AgentInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *AgentMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentMetadata)
	if !ok {
		that2, ok := that.(AgentMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Agent.Equal(that1.Agent) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.CarnotInfo.Equal(that1.CarnotInfo) {
		return false
	}
	return true
}
func (this *AgentTableMetadataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentTableMetadataRequest)
	if !ok {
		that2, ok := that.(AgentTableMetadataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AgentTableMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentTableMetadata)
	if !ok {
		that2, ok := that.(AgentTableMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	if !this.DataInfo.Equal(that1.DataInfo) {
		return false
	}
	return true
}
func (this *AgentTableMetadataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentTableMetadataResponse)
	if !ok {
		that2, ok := that.(AgentTableMetadataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MetadataByAgent) != len(that1.MetadataByAgent) {
		return false
	}
	for i := range this.MetadataByAgent {
		if !this.MetadataByAgent[i].Equal(that1.MetadataByAgent[i]) {
			return false
		}
	}
	return true
}
func (this *RegisterProbeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterProbeRequest)
	if !ok {
		that2, ok := that.(RegisterProbeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Program.Equal(that1.Program) {
		return false
	}
	if this.ProbeName != that1.ProbeName {
		return false
	}
	return true
}
func (this *RegisterProbeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterProbeResponse)
	if !ok {
		that2, ok := that.(RegisterProbeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.ProbeID != that1.ProbeID {
		return false
	}
	return true
}
func (this *GetProbeInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetProbeInfoRequest)
	if !ok {
		that2, ok := that.(GetProbeInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProbeIDs) != len(that1.ProbeIDs) {
		return false
	}
	for i := range this.ProbeIDs {
		if this.ProbeIDs[i] != that1.ProbeIDs[i] {
			return false
		}
	}
	return true
}
func (this *GetProbeInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetProbeInfoResponse)
	if !ok {
		that2, ok := that.(GetProbeInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Probes) != len(that1.Probes) {
		return false
	}
	for i := range this.Probes {
		if !this.Probes[i].Equal(that1.Probes[i]) {
			return false
		}
	}
	return true
}
func (this *GetProbeInfoResponse_ProbeState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetProbeInfoResponse_ProbeState)
	if !ok {
		that2, ok := that.(GetProbeInfoResponse_ProbeState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProbeIDs != that1.ProbeIDs {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *EvictProbeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvictProbeRequest)
	if !ok {
		that2, ok := that.(EvictProbeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProbeID != that1.ProbeID {
		return false
	}
	return true
}
func (this *EvictProbeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvictProbeResponse)
	if !ok {
		that2, ok := that.(EvictProbeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *SchemaByAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&metadatapb.SchemaByAgentRequest{")
	if this.AgentIds != nil {
		s = append(s, "AgentIds: "+fmt.Sprintf("%#v", this.AgentIds)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaByAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&metadatapb.SchemaByAgentResponse{")
	if this.SchemaByAgent != nil {
		s = append(s, "SchemaByAgent: "+fmt.Sprintf("%#v", this.SchemaByAgent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaByAgentResponse_SchemaByAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&metadatapb.SchemaByAgentResponse_SchemaByAgent{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Schema != nil {
		s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&metadatapb.SchemaRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&metadatapb.SchemaResponse{")
	if this.Schema != nil {
		s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&metadatapb.AgentInfoRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&metadatapb.AgentInfoResponse{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&metadatapb.AgentMetadata{")
	if this.Agent != nil {
		s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.CarnotInfo != nil {
		s = append(s, "CarnotInfo: "+fmt.Sprintf("%#v", this.CarnotInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentTableMetadataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&metadatapb.AgentTableMetadataRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentTableMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&metadatapb.AgentTableMetadata{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Schema != nil {
		s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	}
	if this.DataInfo != nil {
		s = append(s, "DataInfo: "+fmt.Sprintf("%#v", this.DataInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentTableMetadataResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&metadatapb.AgentTableMetadataResponse{")
	if this.MetadataByAgent != nil {
		s = append(s, "MetadataByAgent: "+fmt.Sprintf("%#v", this.MetadataByAgent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterProbeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&metadatapb.RegisterProbeRequest{")
	if this.Program != nil {
		s = append(s, "Program: "+fmt.Sprintf("%#v", this.Program)+",\n")
	}
	s = append(s, "ProbeName: "+fmt.Sprintf("%#v", this.ProbeName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterProbeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&metadatapb.RegisterProbeResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "ProbeID: "+fmt.Sprintf("%#v", this.ProbeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetProbeInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&metadatapb.GetProbeInfoRequest{")
	s = append(s, "ProbeIDs: "+fmt.Sprintf("%#v", this.ProbeIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetProbeInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&metadatapb.GetProbeInfoResponse{")
	if this.Probes != nil {
		s = append(s, "Probes: "+fmt.Sprintf("%#v", this.Probes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetProbeInfoResponse_ProbeState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&metadatapb.GetProbeInfoResponse_ProbeState{")
	s = append(s, "ProbeIDs: "+fmt.Sprintf("%#v", this.ProbeIDs)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvictProbeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&metadatapb.EvictProbeRequest{")
	s = append(s, "ProbeID: "+fmt.Sprintf("%#v", this.ProbeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvictProbeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&metadatapb.EvictProbeResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataServiceClient interface {
	GetSchemas(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResponse, error)
	GetSchemaByAgent(ctx context.Context, in *SchemaByAgentRequest, opts ...grpc.CallOption) (*SchemaByAgentResponse, error)
	GetAgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error)
	GetAgentTableMetadata(ctx context.Context, in *AgentTableMetadataRequest, opts ...grpc.CallOption) (*AgentTableMetadataResponse, error)
	RegisterProbe(ctx context.Context, in *RegisterProbeRequest, opts ...grpc.CallOption) (*RegisterProbeResponse, error)
	GetProbeInfo(ctx context.Context, in *GetProbeInfoRequest, opts ...grpc.CallOption) (*GetProbeInfoResponse, error)
	EvictProbe(ctx context.Context, in *EvictProbeRequest, opts ...grpc.CallOption) (*EvictProbeResponse, error)
}

type metadataServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetadataServiceClient(cc *grpc.ClientConn) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) GetSchemas(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResponse, error) {
	out := new(SchemaResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.metadata.MetadataService/GetSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetSchemaByAgent(ctx context.Context, in *SchemaByAgentRequest, opts ...grpc.CallOption) (*SchemaByAgentResponse, error) {
	out := new(SchemaByAgentResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.metadata.MetadataService/GetSchemaByAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetAgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error) {
	out := new(AgentInfoResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.metadata.MetadataService/GetAgentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetAgentTableMetadata(ctx context.Context, in *AgentTableMetadataRequest, opts ...grpc.CallOption) (*AgentTableMetadataResponse, error) {
	out := new(AgentTableMetadataResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.metadata.MetadataService/GetAgentTableMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterProbe(ctx context.Context, in *RegisterProbeRequest, opts ...grpc.CallOption) (*RegisterProbeResponse, error) {
	out := new(RegisterProbeResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.metadata.MetadataService/RegisterProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetProbeInfo(ctx context.Context, in *GetProbeInfoRequest, opts ...grpc.CallOption) (*GetProbeInfoResponse, error) {
	out := new(GetProbeInfoResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.metadata.MetadataService/GetProbeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) EvictProbe(ctx context.Context, in *EvictProbeRequest, opts ...grpc.CallOption) (*EvictProbeResponse, error) {
	out := new(EvictProbeResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.metadata.MetadataService/EvictProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
type MetadataServiceServer interface {
	GetSchemas(context.Context, *SchemaRequest) (*SchemaResponse, error)
	GetSchemaByAgent(context.Context, *SchemaByAgentRequest) (*SchemaByAgentResponse, error)
	GetAgentInfo(context.Context, *AgentInfoRequest) (*AgentInfoResponse, error)
	GetAgentTableMetadata(context.Context, *AgentTableMetadataRequest) (*AgentTableMetadataResponse, error)
	RegisterProbe(context.Context, *RegisterProbeRequest) (*RegisterProbeResponse, error)
	GetProbeInfo(context.Context, *GetProbeInfoRequest) (*GetProbeInfoResponse, error)
	EvictProbe(context.Context, *EvictProbeRequest) (*EvictProbeResponse, error)
}

// UnimplementedMetadataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (*UnimplementedMetadataServiceServer) GetSchemas(ctx context.Context, req *SchemaRequest) (*SchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemas not implemented")
}
func (*UnimplementedMetadataServiceServer) GetSchemaByAgent(ctx context.Context, req *SchemaByAgentRequest) (*SchemaByAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaByAgent not implemented")
}
func (*UnimplementedMetadataServiceServer) GetAgentInfo(ctx context.Context, req *AgentInfoRequest) (*AgentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentInfo not implemented")
}
func (*UnimplementedMetadataServiceServer) GetAgentTableMetadata(ctx context.Context, req *AgentTableMetadataRequest) (*AgentTableMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentTableMetadata not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterProbe(ctx context.Context, req *RegisterProbeRequest) (*RegisterProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProbe not implemented")
}
func (*UnimplementedMetadataServiceServer) GetProbeInfo(ctx context.Context, req *GetProbeInfoRequest) (*GetProbeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProbeInfo not implemented")
}
func (*UnimplementedMetadataServiceServer) EvictProbe(ctx context.Context, req *EvictProbeRequest) (*EvictProbeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictProbe not implemented")
}

func RegisterMetadataServiceServer(s *grpc.Server, srv MetadataServiceServer) {
	s.RegisterService(&_MetadataService_serviceDesc, srv)
}

func _MetadataService_GetSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.metadata.MetadataService/GetSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetSchemas(ctx, req.(*SchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetSchemaByAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaByAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetSchemaByAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.metadata.MetadataService/GetSchemaByAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetSchemaByAgent(ctx, req.(*SchemaByAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetAgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetAgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.metadata.MetadataService/GetAgentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetAgentInfo(ctx, req.(*AgentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetAgentTableMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentTableMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetAgentTableMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.metadata.MetadataService/GetAgentTableMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetAgentTableMetadata(ctx, req.(*AgentTableMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.metadata.MetadataService/RegisterProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterProbe(ctx, req.(*RegisterProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetProbeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProbeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetProbeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.metadata.MetadataService/GetProbeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetProbeInfo(ctx, req.(*GetProbeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_EvictProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).EvictProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.metadata.MetadataService/EvictProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).EvictProbe(ctx, req.(*EvictProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetadataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.vizier.services.metadata.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchemas",
			Handler:    _MetadataService_GetSchemas_Handler,
		},
		{
			MethodName: "GetSchemaByAgent",
			Handler:    _MetadataService_GetSchemaByAgent_Handler,
		},
		{
			MethodName: "GetAgentInfo",
			Handler:    _MetadataService_GetAgentInfo_Handler,
		},
		{
			MethodName: "GetAgentTableMetadata",
			Handler:    _MetadataService_GetAgentTableMetadata_Handler,
		},
		{
			MethodName: "RegisterProbe",
			Handler:    _MetadataService_RegisterProbe_Handler,
		},
		{
			MethodName: "GetProbeInfo",
			Handler:    _MetadataService_GetProbeInfo_Handler,
		},
		{
			MethodName: "EvictProbe",
			Handler:    _MetadataService_EvictProbe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/vizier/services/metadata/metadatapb/service.proto",
}

func (m *SchemaByAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaByAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaByAgentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AgentIds) > 0 {
		for iNdEx := len(m.AgentIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AgentIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchemaByAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaByAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaByAgentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaByAgent) > 0 {
		for iNdEx := len(m.SchemaByAgent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchemaByAgent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchemaByAgentResponse_SchemaByAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaByAgentResponse_SchemaByAgent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaByAgentResponse_SchemaByAgent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AgentInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AgentMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CarnotInfo != nil {
		{
			size, err := m.CarnotInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Agent != nil {
		{
			size, err := m.Agent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentTableMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentTableMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentTableMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgentTableMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentTableMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentTableMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataInfo != nil {
		{
			size, err := m.DataInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentTableMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentTableMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentTableMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetadataByAgent) > 0 {
		for iNdEx := len(m.MetadataByAgent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetadataByAgent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegisterProbeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterProbeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterProbeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProbeName) > 0 {
		i -= len(m.ProbeName)
		copy(dAtA[i:], m.ProbeName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ProbeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Program != nil {
		{
			size, err := m.Program.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterProbeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterProbeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterProbeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProbeID) > 0 {
		i -= len(m.ProbeID)
		copy(dAtA[i:], m.ProbeID)
		i = encodeVarintService(dAtA, i, uint64(len(m.ProbeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetProbeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProbeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProbeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProbeIDs) > 0 {
		for iNdEx := len(m.ProbeIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProbeIDs[iNdEx])
			copy(dAtA[i:], m.ProbeIDs[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.ProbeIDs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetProbeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProbeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProbeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Probes) > 0 {
		for iNdEx := len(m.Probes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Probes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetProbeInfoResponse_ProbeState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProbeInfoResponse_ProbeState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProbeInfoResponse_ProbeState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProbeIDs) > 0 {
		i -= len(m.ProbeIDs)
		copy(dAtA[i:], m.ProbeIDs)
		i = encodeVarintService(dAtA, i, uint64(len(m.ProbeIDs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvictProbeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvictProbeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvictProbeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProbeID) > 0 {
		i -= len(m.ProbeID)
		copy(dAtA[i:], m.ProbeID)
		i = encodeVarintService(dAtA, i, uint64(len(m.ProbeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvictProbeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvictProbeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvictProbeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SchemaByAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AgentIds) > 0 {
		for _, e := range m.AgentIds {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SchemaByAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchemaByAgent) > 0 {
		for _, e := range m.SchemaByAgent {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SchemaByAgentResponse_SchemaByAgent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *AgentMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.CarnotInfo != nil {
		l = m.CarnotInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentTableMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentTableMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.DataInfo != nil {
		l = m.DataInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentTableMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MetadataByAgent) > 0 {
		for _, e := range m.MetadataByAgent {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *RegisterProbeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Program != nil {
		l = m.Program.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ProbeName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegisterProbeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ProbeID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetProbeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProbeIDs) > 0 {
		for _, s := range m.ProbeIDs {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GetProbeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Probes) > 0 {
		for _, e := range m.Probes {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GetProbeInfoResponse_ProbeState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProbeIDs)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovService(uint64(m.State))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *EvictProbeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProbeID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *EvictProbeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SchemaByAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAgentIds := "[]*UUID{"
	for _, f := range this.AgentIds {
		repeatedStringForAgentIds += strings.Replace(fmt.Sprintf("%v", f), "UUID", "proto1.UUID", 1) + ","
	}
	repeatedStringForAgentIds += "}"
	s := strings.Join([]string{`&SchemaByAgentRequest{`,
		`AgentIds:` + repeatedStringForAgentIds + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaByAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSchemaByAgent := "[]*SchemaByAgentResponse_SchemaByAgent{"
	for _, f := range this.SchemaByAgent {
		repeatedStringForSchemaByAgent += strings.Replace(fmt.Sprintf("%v", f), "SchemaByAgentResponse_SchemaByAgent", "SchemaByAgentResponse_SchemaByAgent", 1) + ","
	}
	repeatedStringForSchemaByAgent += "}"
	s := strings.Join([]string{`&SchemaByAgentResponse{`,
		`SchemaByAgent:` + repeatedStringForSchemaByAgent + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaByAgentResponse_SchemaByAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaByAgentResponse_SchemaByAgent{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`Schema:` + strings.Replace(fmt.Sprintf("%v", this.Schema), "Schema", "proto2.Schema", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SchemaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaResponse{`,
		`Schema:` + strings.Replace(fmt.Sprintf("%v", this.Schema), "Schema", "proto2.Schema", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfoRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInfo := "[]*AgentMetadata{"
	for _, f := range this.Info {
		repeatedStringForInfo += strings.Replace(f.String(), "AgentMetadata", "AgentMetadata", 1) + ","
	}
	repeatedStringForInfo += "}"
	s := strings.Join([]string{`&AgentInfoResponse{`,
		`Info:` + repeatedStringForInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentMetadata{`,
		`Agent:` + strings.Replace(fmt.Sprintf("%v", this.Agent), "Agent", "agentpb.Agent", 1) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "AgentStatus", "agentpb.AgentStatus", 1) + `,`,
		`CarnotInfo:` + strings.Replace(fmt.Sprintf("%v", this.CarnotInfo), "CarnotInfo", "distributedpb.CarnotInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentTableMetadataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentTableMetadataRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AgentTableMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentTableMetadata{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`Schema:` + strings.Replace(fmt.Sprintf("%v", this.Schema), "Schema", "proto2.Schema", 1) + `,`,
		`DataInfo:` + strings.Replace(fmt.Sprintf("%v", this.DataInfo), "AgentDataInfo", "messagespb.AgentDataInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentTableMetadataResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetadataByAgent := "[]*AgentTableMetadata{"
	for _, f := range this.MetadataByAgent {
		repeatedStringForMetadataByAgent += strings.Replace(f.String(), "AgentTableMetadata", "AgentTableMetadata", 1) + ","
	}
	repeatedStringForMetadataByAgent += "}"
	s := strings.Join([]string{`&AgentTableMetadataResponse{`,
		`MetadataByAgent:` + repeatedStringForMetadataByAgent + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterProbeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterProbeRequest{`,
		`Program:` + strings.Replace(fmt.Sprintf("%v", this.Program), "Program", "logical.Program", 1) + `,`,
		`ProbeName:` + fmt.Sprintf("%v", this.ProbeName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterProbeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterProbeResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto3.Status", 1) + `,`,
		`ProbeID:` + fmt.Sprintf("%v", this.ProbeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetProbeInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetProbeInfoRequest{`,
		`ProbeIDs:` + fmt.Sprintf("%v", this.ProbeIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetProbeInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProbes := "[]*GetProbeInfoResponse_ProbeState{"
	for _, f := range this.Probes {
		repeatedStringForProbes += strings.Replace(fmt.Sprintf("%v", f), "GetProbeInfoResponse_ProbeState", "GetProbeInfoResponse_ProbeState", 1) + ","
	}
	repeatedStringForProbes += "}"
	s := strings.Join([]string{`&GetProbeInfoResponse{`,
		`Probes:` + repeatedStringForProbes + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetProbeInfoResponse_ProbeState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetProbeInfoResponse_ProbeState{`,
		`ProbeIDs:` + fmt.Sprintf("%v", this.ProbeIDs) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto3.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvictProbeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvictProbeRequest{`,
		`ProbeID:` + fmt.Sprintf("%v", this.ProbeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvictProbeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvictProbeResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto3.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SchemaByAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaByAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaByAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentIds = append(m.AgentIds, &proto1.UUID{})
			if err := m.AgentIds[len(m.AgentIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaByAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaByAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaByAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaByAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaByAgent = append(m.SchemaByAgent, &SchemaByAgentResponse_SchemaByAgent{})
			if err := m.SchemaByAgent[len(m.SchemaByAgent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaByAgentResponse_SchemaByAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaByAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaByAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &proto2.Schema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &proto2.Schema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &AgentMetadata{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &agentpb.Agent{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &agentpb.AgentStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarnotInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CarnotInfo == nil {
				m.CarnotInfo = &distributedpb.CarnotInfo{}
			}
			if err := m.CarnotInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentTableMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentTableMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentTableMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentTableMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentTableMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentTableMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &proto2.Schema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataInfo == nil {
				m.DataInfo = &messagespb.AgentDataInfo{}
			}
			if err := m.DataInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentTableMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentTableMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentTableMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataByAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataByAgent = append(m.MetadataByAgent, &AgentTableMetadata{})
			if err := m.MetadataByAgent[len(m.MetadataByAgent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterProbeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterProbeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterProbeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Program == nil {
				m.Program = &logical.Program{}
			}
			if err := m.Program.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterProbeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterProbeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterProbeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto3.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProbeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProbeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProbeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeIDs = append(m.ProbeIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProbeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProbeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProbeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Probes = append(m.Probes, &GetProbeInfoResponse_ProbeState{})
			if err := m.Probes[len(m.Probes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProbeInfoResponse_ProbeState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProbeState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProbeState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= proto3.LifeCycleState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto3.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvictProbeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvictProbeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvictProbeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvictProbeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvictProbeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvictProbeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto3.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
