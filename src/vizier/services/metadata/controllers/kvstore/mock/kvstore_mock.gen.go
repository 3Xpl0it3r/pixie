// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock_kvstore is a generated GoMock package.
package mock_kvstore

import (
	gomock "github.com/golang/mock/gomock"
	kvstore "pixielabs.ai/pixielabs/src/vizier/services/metadata/controllers/kvstore"
	reflect "reflect"
)

// MockKeyValueStore is a mock of KeyValueStore interface
type MockKeyValueStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStoreMockRecorder
}

// MockKeyValueStoreMockRecorder is the mock recorder for MockKeyValueStore
type MockKeyValueStoreMockRecorder struct {
	mock *MockKeyValueStore
}

// NewMockKeyValueStore creates a new mock instance
func NewMockKeyValueStore(ctrl *gomock.Controller) *MockKeyValueStore {
	mock := &MockKeyValueStore{ctrl: ctrl}
	mock.recorder = &MockKeyValueStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyValueStore) EXPECT() *MockKeyValueStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockKeyValueStore) Get(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKeyValueStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueStore)(nil).Get), arg0)
}

// SetAll mocks base method
func (m *MockKeyValueStore) SetAll(arg0 *map[string]kvstore.Entry) error {
	ret := m.ctrl.Call(m, "SetAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAll indicates an expected call of SetAll
func (mr *MockKeyValueStoreMockRecorder) SetAll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAll", reflect.TypeOf((*MockKeyValueStore)(nil).SetAll), arg0)
}

// GetWithPrefix mocks base method
func (m *MockKeyValueStore) GetWithPrefix(arg0 string) ([]string, []string, error) {
	ret := m.ctrl.Call(m, "GetWithPrefix", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithPrefix indicates an expected call of GetWithPrefix
func (mr *MockKeyValueStoreMockRecorder) GetWithPrefix(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPrefix", reflect.TypeOf((*MockKeyValueStore)(nil).GetWithPrefix), arg0)
}
