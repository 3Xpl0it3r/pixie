// Code generated by MockGen. DO NOT EDIT.
// Source: tracepoint.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	gomock "github.com/golang/mock/gomock"
	storepb "pixielabs.ai/pixielabs/src/vizier/services/metadata/storepb"
	reflect "reflect"
)

// MockTracepointStore is a mock of TracepointStore interface
type MockTracepointStore struct {
	ctrl     *gomock.Controller
	recorder *MockTracepointStoreMockRecorder
}

// MockTracepointStoreMockRecorder is the mock recorder for MockTracepointStore
type MockTracepointStoreMockRecorder struct {
	mock *MockTracepointStore
}

// NewMockTracepointStore creates a new mock instance
func NewMockTracepointStore(ctrl *gomock.Controller) *MockTracepointStore {
	mock := &MockTracepointStore{ctrl: ctrl}
	mock.recorder = &MockTracepointStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracepointStore) EXPECT() *MockTracepointStoreMockRecorder {
	return m.recorder
}

// UpsertTracepoint mocks base method
func (m *MockTracepointStore) UpsertTracepoint(arg0 string, arg1 *storepb.TracepointInfo) error {
	ret := m.ctrl.Call(m, "UpsertTracepoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTracepoint indicates an expected call of UpsertTracepoint
func (mr *MockTracepointStoreMockRecorder) UpsertTracepoint(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTracepoint", reflect.TypeOf((*MockTracepointStore)(nil).UpsertTracepoint), arg0, arg1)
}

// GetTracepoint mocks base method
func (m *MockTracepointStore) GetTracepoint(arg0 string) (*storepb.TracepointInfo, error) {
	ret := m.ctrl.Call(m, "GetTracepoint", arg0)
	ret0, _ := ret[0].(*storepb.TracepointInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepoint indicates an expected call of GetTracepoint
func (mr *MockTracepointStoreMockRecorder) GetTracepoint(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepoint", reflect.TypeOf((*MockTracepointStore)(nil).GetTracepoint), arg0)
}

// GetTracepoints mocks base method
func (m *MockTracepointStore) GetTracepoints() ([]*storepb.TracepointInfo, error) {
	ret := m.ctrl.Call(m, "GetTracepoints")
	ret0, _ := ret[0].([]*storepb.TracepointInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepoints indicates an expected call of GetTracepoints
func (mr *MockTracepointStoreMockRecorder) GetTracepoints() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepoints", reflect.TypeOf((*MockTracepointStore)(nil).GetTracepoints))
}

// UpdateTracepointState mocks base method
func (m *MockTracepointStore) UpdateTracepointState(arg0 *storepb.AgentTracepointStatus) error {
	ret := m.ctrl.Call(m, "UpdateTracepointState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTracepointState indicates an expected call of UpdateTracepointState
func (mr *MockTracepointStoreMockRecorder) UpdateTracepointState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTracepointState", reflect.TypeOf((*MockTracepointStore)(nil).UpdateTracepointState), arg0)
}

// GetTracepointStates mocks base method
func (m *MockTracepointStore) GetTracepointStates(arg0 string) ([]*storepb.AgentTracepointStatus, error) {
	ret := m.ctrl.Call(m, "GetTracepointStates", arg0)
	ret0, _ := ret[0].([]*storepb.AgentTracepointStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepointStates indicates an expected call of GetTracepointStates
func (mr *MockTracepointStoreMockRecorder) GetTracepointStates(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepointStates", reflect.TypeOf((*MockTracepointStore)(nil).GetTracepointStates), arg0)
}
