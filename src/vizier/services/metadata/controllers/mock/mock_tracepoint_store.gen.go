// Code generated by MockGen. DO NOT EDIT.
// Source: tracepoint.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
	storepb "pixielabs.ai/pixielabs/src/vizier/services/metadata/storepb"
	agentpb "pixielabs.ai/pixielabs/src/vizier/services/shared/agentpb"
	reflect "reflect"
	time "time"
)

// MockTracepointStore is a mock of TracepointStore interface
type MockTracepointStore struct {
	ctrl     *gomock.Controller
	recorder *MockTracepointStoreMockRecorder
}

// MockTracepointStoreMockRecorder is the mock recorder for MockTracepointStore
type MockTracepointStoreMockRecorder struct {
	mock *MockTracepointStore
}

// NewMockTracepointStore creates a new mock instance
func NewMockTracepointStore(ctrl *gomock.Controller) *MockTracepointStore {
	mock := &MockTracepointStore{ctrl: ctrl}
	mock.recorder = &MockTracepointStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracepointStore) EXPECT() *MockTracepointStoreMockRecorder {
	return m.recorder
}

// UpsertTracepoint mocks base method
func (m *MockTracepointStore) UpsertTracepoint(arg0 go_uuid.UUID, arg1 *storepb.TracepointInfo) error {
	ret := m.ctrl.Call(m, "UpsertTracepoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTracepoint indicates an expected call of UpsertTracepoint
func (mr *MockTracepointStoreMockRecorder) UpsertTracepoint(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTracepoint", reflect.TypeOf((*MockTracepointStore)(nil).UpsertTracepoint), arg0, arg1)
}

// GetTracepoint mocks base method
func (m *MockTracepointStore) GetTracepoint(arg0 go_uuid.UUID) (*storepb.TracepointInfo, error) {
	ret := m.ctrl.Call(m, "GetTracepoint", arg0)
	ret0, _ := ret[0].(*storepb.TracepointInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepoint indicates an expected call of GetTracepoint
func (mr *MockTracepointStoreMockRecorder) GetTracepoint(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepoint", reflect.TypeOf((*MockTracepointStore)(nil).GetTracepoint), arg0)
}

// GetTracepoints mocks base method
func (m *MockTracepointStore) GetTracepoints() ([]*storepb.TracepointInfo, error) {
	ret := m.ctrl.Call(m, "GetTracepoints")
	ret0, _ := ret[0].([]*storepb.TracepointInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepoints indicates an expected call of GetTracepoints
func (mr *MockTracepointStoreMockRecorder) GetTracepoints() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepoints", reflect.TypeOf((*MockTracepointStore)(nil).GetTracepoints))
}

// UpdateTracepointState mocks base method
func (m *MockTracepointStore) UpdateTracepointState(arg0 *storepb.AgentTracepointStatus) error {
	ret := m.ctrl.Call(m, "UpdateTracepointState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTracepointState indicates an expected call of UpdateTracepointState
func (mr *MockTracepointStoreMockRecorder) UpdateTracepointState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTracepointState", reflect.TypeOf((*MockTracepointStore)(nil).UpdateTracepointState), arg0)
}

// GetTracepointStates mocks base method
func (m *MockTracepointStore) GetTracepointStates(arg0 go_uuid.UUID) ([]*storepb.AgentTracepointStatus, error) {
	ret := m.ctrl.Call(m, "GetTracepointStates", arg0)
	ret0, _ := ret[0].([]*storepb.AgentTracepointStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepointStates indicates an expected call of GetTracepointStates
func (mr *MockTracepointStoreMockRecorder) GetTracepointStates(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepointStates", reflect.TypeOf((*MockTracepointStore)(nil).GetTracepointStates), arg0)
}

// SetTracepointWithName mocks base method
func (m *MockTracepointStore) SetTracepointWithName(arg0 string, arg1 go_uuid.UUID) error {
	ret := m.ctrl.Call(m, "SetTracepointWithName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTracepointWithName indicates an expected call of SetTracepointWithName
func (mr *MockTracepointStoreMockRecorder) SetTracepointWithName(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTracepointWithName", reflect.TypeOf((*MockTracepointStore)(nil).SetTracepointWithName), arg0, arg1)
}

// GetTracepointWithName mocks base method
func (m *MockTracepointStore) GetTracepointWithName(arg0 string) (*go_uuid.UUID, error) {
	ret := m.ctrl.Call(m, "GetTracepointWithName", arg0)
	ret0, _ := ret[0].(*go_uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepointWithName indicates an expected call of GetTracepointWithName
func (mr *MockTracepointStoreMockRecorder) GetTracepointWithName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepointWithName", reflect.TypeOf((*MockTracepointStore)(nil).GetTracepointWithName), arg0)
}

// GetTracepointsForIDs mocks base method
func (m *MockTracepointStore) GetTracepointsForIDs(arg0 []go_uuid.UUID) ([]*storepb.TracepointInfo, error) {
	ret := m.ctrl.Call(m, "GetTracepointsForIDs", arg0)
	ret0, _ := ret[0].([]*storepb.TracepointInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepointsForIDs indicates an expected call of GetTracepointsForIDs
func (mr *MockTracepointStoreMockRecorder) GetTracepointsForIDs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepointsForIDs", reflect.TypeOf((*MockTracepointStore)(nil).GetTracepointsForIDs), arg0)
}

// SetTracepointTTL mocks base method
func (m *MockTracepointStore) SetTracepointTTL(arg0 go_uuid.UUID, arg1 time.Duration) error {
	ret := m.ctrl.Call(m, "SetTracepointTTL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTracepointTTL indicates an expected call of SetTracepointTTL
func (mr *MockTracepointStoreMockRecorder) SetTracepointTTL(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTracepointTTL", reflect.TypeOf((*MockTracepointStore)(nil).SetTracepointTTL), arg0, arg1)
}

// DeleteTracepointTTL mocks base method
func (m *MockTracepointStore) DeleteTracepointTTL(arg0 go_uuid.UUID) error {
	ret := m.ctrl.Call(m, "DeleteTracepointTTL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTracepointTTL indicates an expected call of DeleteTracepointTTL
func (mr *MockTracepointStoreMockRecorder) DeleteTracepointTTL(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracepointTTL", reflect.TypeOf((*MockTracepointStore)(nil).DeleteTracepointTTL), arg0)
}

// WatchTracepointTTLs mocks base method
func (m *MockTracepointStore) WatchTracepointTTLs() (chan go_uuid.UUID, chan bool) {
	ret := m.ctrl.Call(m, "WatchTracepointTTLs")
	ret0, _ := ret[0].(chan go_uuid.UUID)
	ret1, _ := ret[1].(chan bool)
	return ret0, ret1
}

// WatchTracepointTTLs indicates an expected call of WatchTracepointTTLs
func (mr *MockTracepointStoreMockRecorder) WatchTracepointTTLs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTracepointTTLs", reflect.TypeOf((*MockTracepointStore)(nil).WatchTracepointTTLs))
}

// GetAgents mocks base method
func (m *MockTracepointStore) GetAgents() ([]*agentpb.Agent, error) {
	ret := m.ctrl.Call(m, "GetAgents")
	ret0, _ := ret[0].([]*agentpb.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgents indicates an expected call of GetAgents
func (mr *MockTracepointStoreMockRecorder) GetAgents() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgents", reflect.TypeOf((*MockTracepointStore)(nil).GetAgents))
}

// DeleteTracepoint mocks base method
func (m *MockTracepointStore) DeleteTracepoint(arg0 go_uuid.UUID) error {
	ret := m.ctrl.Call(m, "DeleteTracepoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTracepoint indicates an expected call of DeleteTracepoint
func (mr *MockTracepointStoreMockRecorder) DeleteTracepoint(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracepoint", reflect.TypeOf((*MockTracepointStore)(nil).DeleteTracepoint), arg0)
}

// GetTracepointTTLs mocks base method
func (m *MockTracepointStore) GetTracepointTTLs() ([]go_uuid.UUID, error) {
	ret := m.ctrl.Call(m, "GetTracepointTTLs")
	ret0, _ := ret[0].([]go_uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracepointTTLs indicates an expected call of GetTracepointTTLs
func (mr *MockTracepointStoreMockRecorder) GetTracepointTTLs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracepointTTLs", reflect.TypeOf((*MockTracepointStore)(nil).GetTracepointTTLs))
}
