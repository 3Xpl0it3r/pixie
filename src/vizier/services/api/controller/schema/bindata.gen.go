package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _schema_graphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x51\x8f\xdb\x36\x13\x7c\xd7\xaf\x98\xe0\x1e\xf2\x7d\x40\x4f\x28\xda\xc3\x3d\x08\x68\x01\xf7\xce\xc9\x39\xbd\xc8\xe9\xd9\x49\x50\x04\x41\x40\x49\x6b\x8b\x35\x45\x2a\x24\x65\xc7\x0d\xf2\xdf\x8b\x25\x69\x59\xb9\x43\xfb\x64\x8b\xdc\x9d\x9d\x9d\x1d\x92\x17\x58\xb7\xd2\x61\x23\x15\xa1\x21\x57\x5b\x59\x91\x83\x6f\x09\xae\x6e\xa9\x13\xd8\x58\xd3\x85\xef\xd9\x9b\x05\x1c\xd9\xbd\xac\x29\xcf\xb2\x0b\x2c\xfc\x73\x07\x6d\x3c\x64\x43\x42\xfd\x80\x6a\xf0\x38\x10\x34\x51\x03\x6f\xd0\x09\x3d\x08\xa5\x8e\xd8\x92\x26\x2b\x3c\xc1\x1f\x7b\x72\xd8\x18\x1b\xe0\xd6\xc7\x9e\x56\xb5\x95\xbd\xc7\xdb\x45\x76\x81\x43\x4b\x1a\x7e\xe4\x22\x1d\x86\xbe\x11\x9e\x9a\x3c\x32\xac\x85\x46\x45\x68\x8c\x26\x54\x47\xd8\x41\x6b\xa9\xb7\x45\x76\x01\x6c\xad\xe8\xdb\xcf\xea\x32\x32\xbe\x0c\x75\x22\xf2\xa9\xf6\xa5\x77\xa9\x9f\x3c\x05\xe3\xf2\xd2\x0c\xbe\x1f\xfc\x69\xbd\xc9\xbd\x0b\x34\x64\xdd\xe2\x20\x95\x9a\x10\x6f\x09\x29\x98\xb1\x23\x41\xdf\x0a\x1f\xe3\x2a\x42\x2f\xeb\x1d\x35\x18\x7a\xa6\xc6\xe1\x6f\x17\x79\x96\xa4\x9d\xe0\x87\x4c\x07\xd7\x9a\x41\x35\xa0\x2f\xd2\x79\x48\x1d\xd5\x16\x1d\xa1\x91\x96\x6a\x6f\xec\x11\x62\x3a\x83\x91\x33\xa7\xe7\x59\x96\x26\xf3\x35\x03\x3e\x0f\x64\x8f\x05\xfe\xe0\x9f\x0c\xe8\x06\x2f\xbc\x34\xba\xc0\xeb\xf4\x2f\xfb\x96\x05\x22\x84\x46\x78\x91\x66\x60\x36\x01\xbd\x36\x6a\xe8\xb4\xcb\x33\xd2\x43\x87\x5b\xe1\xc5\x8d\x51\xeb\x10\xc1\xd8\xbf\x2d\x97\xf7\xf3\x59\x99\x01\x8b\x72\x7d\x7d\x95\x01\xeb\xc5\xeb\xf9\xf5\x55\xb9\xca\x80\x17\xf7\xcb\x59\x5c\x5c\xad\x1f\x16\xe5\xcb\x58\xe7\x7d\x9a\xbf\xd0\x58\x68\x7f\x7d\x15\xf5\x72\x52\xd7\x84\x57\x62\x2f\xd2\xc0\x1b\x43\xd1\x3a\x5a\x78\xb9\x27\x75\x84\x1b\xfa\xde\x58\x0f\x81\xeb\xab\xcb\x4a\xfa\xec\x02\x52\x7b\xda\x92\x4d\xe3\xff\x6b\x70\x1e\xb5\xe9\x7a\xe3\xc8\x41\x7a\x54\xc2\x51\x03\xa3\xe1\x0f\x06\x3f\xff\xc4\x49\xa7\x14\x97\x67\xa1\x6e\xa4\xc0\xad\xa8\x82\x3f\x9e\x65\x40\x9b\xfe\x05\xba\x0f\xa4\x82\x48\xc1\x94\x22\x28\x80\xb5\xa8\x78\xba\x56\xd4\x3b\xa9\xb7\xd0\xa2\x23\x07\xa1\x9b\x28\x5d\x42\xe6\xc8\x10\x38\x22\x70\x95\xda\xa8\x92\xc3\x0b\x7c\x58\x79\x2b\xf5\xf6\xd9\xc7\xb8\x1a\x34\x2d\xf0\x61\x2a\xf1\xb3\x8f\x8f\x47\xc3\x78\x2e\xc7\x9d\x51\x8d\x83\x3d\x01\x73\x69\xde\x7f\x5c\x39\x54\x3c\x45\x15\x4f\x19\x71\xb3\x13\x74\xe9\x20\xf0\x6a\xb5\x2c\x41\xba\x36\x0d\x35\x70\x81\x62\x9e\x21\x04\x14\x48\x94\x99\x55\xa8\x14\x3c\x35\xb7\xd6\x58\x97\xba\xeb\x7a\xa9\xc8\x86\xa5\x02\x37\xd3\x4f\x37\x66\x7d\xbf\x1c\x12\x3b\xb7\x3d\xa1\xf3\x28\xa4\xa6\x1b\xa3\xe2\x7e\x81\x0f\xf7\x93\xef\x89\x24\x96\xdc\xa0\x3c\x3b\x55\x44\x93\xe7\x13\x56\x0f\x71\x93\xc1\x65\x53\x60\x71\xcb\xcd\x06\xfd\x26\x42\x64\x00\x45\xaa\x93\x4e\x46\x9e\xd3\xb2\xd1\x22\x52\xd3\xe8\x92\xda\x9c\x1d\x33\xa1\x9f\x6c\xb3\xd0\x1b\x63\xbb\x34\x9e\xca\xf0\xb5\xd0\x12\x5a\xe3\x3c\x3a\x51\xb7\x52\x53\x22\x7b\x67\x9c\xe7\xe0\x50\x80\xf7\xd9\x4d\xa3\x16\xff\x81\x25\xb6\xa4\x7d\x02\x99\xf1\xff\x11\xe5\xdc\x6f\x9b\xc0\x8b\xb1\x4c\xa0\x17\xce\x72\xc8\x59\x79\xbe\xbc\xbe\x9e\x7d\x40\x1b\xc1\xb2\xb9\xb0\x2e\x37\x7c\x02\x5b\xf6\xb8\x74\xd8\x69\x73\xd0\xec\x85\xd9\xcb\x79\xb9\xfe\xb4\x5a\xcf\xd6\xf3\x4f\x6f\xcb\xdf\xcb\xe5\xfb\x72\x04\x48\x89\x0e\x2d\x09\xe5\xdb\x23\x63\xb4\x24\xac\xaf\x48\x78\x07\x61\x79\x6c\x35\xc9\x7d\x3c\x98\x96\xb6\x83\x12\x36\x9c\x4a\xbb\x17\x2a\x1d\xa3\x96\x02\x60\x68\x91\xc1\x2c\xb9\xde\xe8\x86\x89\x78\x03\x4b\x9f\x07\x72\xde\x3d\xe6\x72\x37\x9f\xdd\xaf\xef\xfe\x7c\xc4\x25\xde\xd3\x86\x13\x07\x1d\x81\x9c\xdc\x87\xe6\x46\x19\xd1\x0a\xa7\x9f\x7b\x38\xfe\x2f\xce\x84\xd3\xa1\x3f\xb4\x52\x45\x46\xc6\x86\x57\x67\x8a\xc3\xef\x18\x39\x27\xb6\xfc\x70\xf1\x43\xf8\x4e\xfe\x2d\xc9\x3e\x15\xea\x61\xbe\x7a\xb3\x2c\x57\x8b\x77\xf3\x7f\x67\xd8\x48\x57\x1b\xad\xa9\xf6\xd4\x9c\x18\xbe\x7c\x78\x73\x83\xb4\xca\x16\xa8\x2c\x89\x9d\xcb\x03\x40\x6b\xfa\xa0\x76\x78\x69\xc6\x76\x02\x7e\x40\xad\x4d\x47\xa8\x44\xbd\x83\xd1\xec\xde\x20\x2f\x9f\x9b\x8e\xf8\x55\x49\x8a\x45\x1e\x8f\x19\xdf\x2e\x56\x37\xcb\xb2\x9c\xdf\xac\xe7\xb7\xd1\x88\xec\x96\x21\x3c\x0d\x4f\xcc\x97\xb6\x82\xfd\x82\xe1\x46\x4b\xb2\x0f\x95\x70\xfe\xee\x24\xea\x6b\x57\xe0\x85\x32\xc2\x9f\xaf\x1f\x2f\x23\x1f\x47\xb5\xd1\xcd\xd8\x0e\x5f\x48\xa7\xf1\xa0\x22\xd2\x10\x4a\xee\x29\xc7\x7b\xee\x4d\xa8\x83\x38\xf2\x3a\x7e\xfd\xe5\x47\xd0\x9e\x34\x0e\xd2\xb7\xa8\x95\xa9\x77\x70\x3b\x3a\x70\x47\x43\xcf\xe0\xab\x49\xc9\xd0\x6c\x31\xf1\xff\xf9\x3e\x8b\xa3\x1b\x0f\x52\x28\xce\x17\xd0\xa4\xc5\x8f\xdf\x5f\x7e\x21\x6e\x1f\xd2\x8a\x49\xfa\x18\x74\x7a\x63\x43\x1c\xe6\x5f\xa8\x1e\x3c\x85\xcc\xff\x85\x2b\x6b\xe5\xed\xe9\xb0\xff\xbf\x98\xde\x5c\xd9\xb7\xec\x9f\x00\x00\x00\xff\xff\x6f\xf7\x7d\x1e\x78\x09\x00\x00")

func schema_graphql() ([]byte, error) {
	return bindata_read(
		_schema_graphql,
		"schema.graphql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"schema.graphql": schema_graphql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"schema.graphql": &_bintree_t{schema_graphql, map[string]*_bintree_t{
	}},
}}
