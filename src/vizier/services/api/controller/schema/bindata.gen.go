// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\x51\x8f\xdb\x36\x13\x7c\xd7\xaf\x98\xc3\x3d\xe4\xfb\x80\x9e\x50\xb4\x87\x7b\x10\xd0\x02\xee\x9d\x93\x73\x7a\x91\xd3\xb3\x93\xa0\x08\x82\x80\x92\xd6\x16\x6b\x8a\x54\x48\xca\x8e\x1b\xe4\xbf\x17\x5c\xd2\x3a\xc5\x41\x9e\x6c\x91\xbb\xb3\xb3\xb3\x43\xf2\x12\xeb\x56\x3a\x6c\xa4\x22\x34\xe4\x6a\x2b\x2b\x72\xf0\x2d\xc1\xd5\x2d\x75\x02\x1b\x6b\x3a\xfe\x9e\xbd\x5e\xc0\x91\xdd\xcb\x9a\xf2\x2c\xbb\xc4\xc2\x3f\x73\xd0\xc6\x43\x36\x24\xd4\x4f\xa8\x06\x8f\x03\x41\x13\x35\xf0\x06\x9d\xd0\x83\x50\xea\x88\x2d\x69\xb2\xc2\x13\xfc\xb1\x27\x87\x8d\xb1\x0c\xb7\x3e\xf6\xb4\xaa\xad\xec\x3d\xde\x2c\xb2\x4b\x1c\x5a\xd2\xf0\x23\x17\xe9\x30\xf4\x8d\xf0\xd4\xe4\x91\x61\x2d\x34\x2a\x42\x63\x34\xa1\x3a\xc2\x0e\x5a\x4b\xbd\x2d\xb2\x4b\x60\x6b\x45\xdf\x7e\x52\x57\x91\xf1\x15\xd7\x89\xc8\xa7\xda\x57\xde\xa5\x7e\xf2\x14\x8c\xab\x2b\x33\xf8\x7e\xf0\xa7\xf5\x26\xf7\x8e\x69\xc8\xba\xc5\x41\x2a\x35\x21\xde\x12\x52\x70\xc0\x8e\x04\x7d\x2b\x7c\x8c\xab\x08\xbd\xac\x77\xd4\x60\xe8\x03\xb5\x10\xfe\x66\x91\x67\x49\xda\x09\x3e\x67\x3a\xb8\xd6\x0c\xaa\x01\x7d\x96\xce\x43\xea\xa8\xb6\xe8\x08\x8d\xb4\x54\x7b\x63\x8f\x10\xd3\x19\x8c\x9c\x43\x7a\x9e\x65\x69\x32\x5f\x32\xe0\xd3\x40\xf6\x58\xe0\xaf\xf0\x93\x01\xdd\xe0\x85\x97\x46\x17\x78\x95\xfe\x65\x5f\x33\x26\x42\x68\x84\x17\x69\x06\x66\xc3\xe8\xb5\x51\x43\xa7\x5d\x9e\x91\x1e\x3a\xdc\x09\x2f\x6e\x8d\x5a\x73\x44\xc0\xfe\x63\xb9\x7c\x98\xcf\xca\x0c\x58\x94\xeb\x9b\xeb\x0c\x58\x2f\x5e\xcd\x6f\xae\xcb\x55\x06\x3c\x7f\x58\xce\xe2\xe2\x6a\xfd\xb8\x28\x5f\xc4\x3a\xef\xd2\xfc\x85\xc6\x42\xfb\x9b\xeb\xa8\x97\x93\xba\x26\xbc\x14\x7b\x91\x06\xde\x18\x8a\xd6\xd1\xc2\xcb\x3d\xa9\x23\xdc\xd0\xf7\xc6\x7a\x08\xdc\x5c\x5f\x55\xd2\x67\x97\x90\xda\xd3\x96\x6c\x1a\xff\x3f\x83\xf3\xa8\x4d\xd7\x1b\x47\x0e\xd2\xa3\x12\x8e\x1a\x18\x0d\x7f\x30\xf8\xf5\x97\x90\x74\x4a\x71\x79\xc6\x75\x23\x85\xd0\x8a\x2a\xc2\xc7\x45\x06\xb4\xe9\x1f\xd3\x7d\x24\xc5\x22\xb1\x29\x05\x2b\x80\xb5\xa8\xc2\x74\xad\xa8\x77\x52\x6f\xa1\x45\x47\x0e\x42\x37\x51\xba\x84\x1c\x22\x39\x70\x44\x08\x55\x6a\xa3\xca\x10\x5e\xe0\xfd\xca\x5b\xa9\xb7\x17\x1f\xe2\x2a\x6b\x5a\xe0\xfd\x54\xe2\x8b\x0f\xe7\xa3\x09\x78\x2e\xc7\xbd\x51\x8d\x83\x3d\x01\x87\xd2\x61\xff\xbc\x32\x57\x3c\x45\x15\xdf\x33\x0a\xcd\x4e\xd0\xa5\x83\xc0\xcb\xd5\xb2\x04\xe9\xda\x34\xd4\xc0\x31\xc5\x3c\x03\x07\x14\x48\x94\x33\x70\xcf\xa7\xef\x40\x92\x0b\xb3\xc5\xe6\xd6\x1a\xeb\x52\xb3\x5d\x2f\x15\x59\x5e\x2a\x70\x3b\xfd\x74\x63\xd6\xb7\xcb\x9c\xd8\xb9\xed\x08\x0e\x28\xa9\xe9\xd6\xa8\xb8\x5f\xe0\xfd\xc3\xe4\x7b\xa2\x90\x25\x37\x28\x1f\x8c\x2b\xa2\xe7\xf3\x09\xab\xc7\xb8\x19\xc0\x65\x53\x60\x71\x17\x9a\x60\x39\x93\xe6\x2c\x0c\x0f\x83\x22\xdb\x49\x33\x23\xd5\x69\xe5\x68\x1a\xa9\x69\xf4\x4d\x6d\x9e\x3c\x34\xe9\x20\x19\x69\xa1\x37\xc6\x76\x69\x60\x95\x09\x17\x45\x4b\x68\x8d\xf3\xe8\x44\xdd\x4a\x4d\x89\xef\xbd\x71\x3e\x04\x73\x81\xb0\x7f\xae\xf5\x8f\xb0\xc4\x96\xb4\x4f\x20\xb3\xf0\x7f\x44\x79\x6a\xb9\x4d\xe0\xc5\x58\x86\xe9\xf1\xe9\xe6\x9c\x95\x0f\xd7\xd9\x97\x27\x67\xd0\x46\x04\xe5\x1c\xaf\xcb\x4d\x38\x93\x6d\x70\xbd\x74\xd8\x69\x73\xd0\xc1\x1d\xb3\x17\xf3\x72\xfd\x71\xb5\x9e\xad\xe7\x1f\xdf\x94\x7f\x96\xcb\x77\xe5\x08\x90\x12\x1d\x5a\x12\xca\xb7\xc7\x80\xd1\x92\xb0\xbe\x22\xe1\x1d\x84\x0d\x93\xab\x49\xee\xe3\x51\xb5\xb4\x1d\x94\xb0\x7c\x4e\xed\x5e\xa8\x74\xb0\x5a\x62\x40\x6e\x31\x80\x59\x72\xbd\xd1\x4d\x20\xe2\x0d\x2c\x7d\x1a\xc8\x79\x77\xce\xe5\x7e\x3e\x7b\x58\xdf\xff\x7d\xc6\x25\xde\xdc\x26\x24\x0e\x3a\x02\x39\xb9\xe7\xe6\x46\x19\xd1\x0a\xa7\x9f\x79\xb8\xf0\x5f\x3c\x11\x4e\xd7\xc0\xa1\x95\x2a\x32\x32\x96\xdf\xa1\x29\x4e\x78\xd9\xc8\x39\xb1\x0d\x4f\x59\x78\x1a\xdf\xca\x7f\x25\xd9\xef\x85\x7a\x9c\xaf\x5e\x2f\xcb\xd5\xe2\xed\xfc\xc7\x0c\x1b\xe9\x6a\xa3\x35\xd5\x9e\x9a\x13\xc3\x17\x8f\xaf\x6f\x91\x56\x83\x05\x2a\x4b\x62\xe7\x72\x06\x68\x4d\xcf\x6a\xf3\xdb\x33\xb6\xc3\xf8\x8c\x5a\x9b\x8e\x50\x89\x7a\x07\xa3\x83\x7b\x59\xde\x70\x74\x3a\x0a\xef\x4c\x52\x2c\xf2\x38\x67\x7c\xb7\x58\xdd\x2e\xcb\x72\x7e\xbb\x9e\xdf\x45\x23\x06\xb7\x0c\xfc\x58\x7c\x67\xbe\xb4\xc5\xf6\x63\xc3\x8d\x96\x0c\x3e\x54\xc2\xf9\xfb\x93\xa8\xaf\x5c\x81\xe7\xca\x08\xff\x74\x21\x79\x19\xf9\x38\xaa\x8d\x6e\xc6\x76\xc2\x15\x75\x1a\x0f\x2a\x22\x0d\xa1\xe4\x9e\x72\xbc\x0b\xbd\x09\x75\x10\xc7\xb0\x8e\xdf\x7f\xfb\x19\xb4\x27\x8d\x83\xf4\x2d\x6a\x65\xea\x1d\xdc\x8e\x0e\xa1\xa3\xa1\x0f\xe0\xab\x49\x49\x6e\xb6\x98\xf8\xff\x62\x3c\xf1\x71\x74\xe3\x41\xe2\xe2\xe1\x0e\x9a\xb4\xf8\xe1\xdb\xfb\x8f\xe3\xf6\x9c\x56\x4c\xd2\xc7\xa0\xd3\xab\xcb\x71\x98\x7f\xa6\x7a\xf0\xc4\x99\xff\xe3\x5b\x6b\xe5\xed\xe9\xb0\xff\xbf\x98\x5e\x5e\xd9\xd7\xec\xbf\x00\x00\x00\xff\xff\xa7\x7e\x51\x9b\x8a\x09\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 2442, mode: os.FileMode(436), modTime: time.Unix(1576618852, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
