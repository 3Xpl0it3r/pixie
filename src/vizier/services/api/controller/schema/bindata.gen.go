// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x51\x8f\xdb\x36\x13\x7c\xd7\xaf\x98\xe0\x1e\xf2\x7d\x40\x4f\x28\xda\xc3\x3d\x08\x68\x01\xf7\xce\xc9\x39\xbd\xc8\xe9\xd9\x49\x50\x04\x41\x40\x49\x6b\x8b\x35\x45\x2a\x24\x65\xc7\x0d\xf2\xdf\x8b\x25\x69\x59\xb9\x43\xfb\x64\x8b\xdc\x9d\x9d\x9d\x1d\x92\x17\x58\xb7\xd2\x61\x23\x15\xa1\x21\x57\x5b\x59\x91\x83\x6f\x09\xae\x6e\xa9\x13\xd8\x58\xd3\x85\xef\xd9\x9b\x05\x1c\xd9\xbd\xac\x29\xcf\xb2\x0b\x2c\xfc\x73\x07\x6d\x3c\x64\x43\x42\xfd\x80\x6a\xf0\x38\x10\x34\x51\x03\x6f\xd0\x09\x3d\x08\xa5\x8e\xd8\x92\x26\x2b\x3c\xc1\x1f\x7b\x72\xd8\x18\x1b\xe0\xd6\xc7\x9e\x56\xb5\x95\xbd\xc7\xdb\x45\x76\x81\x43\x4b\x1a\x7e\xe4\x22\x1d\x86\xbe\x11\x9e\x9a\x3c\x32\xac\x85\x46\x45\x68\x8c\x26\x54\x47\xd8\x41\x6b\xa9\xb7\x45\x76\x01\x6c\xad\xe8\xdb\xcf\xea\x32\x32\xbe\x0c\x75\x22\xf2\xa9\xf6\xa5\x77\xa9\x9f\x3c\x05\xe3\xf2\xd2\x0c\xbe\x1f\xfc\x69\xbd\xc9\xbd\x0b\x34\x64\xdd\xe2\x20\x95\x9a\x10\x6f\x09\x29\x98\xb1\x23\x41\xdf\x0a\x1f\xe3\x2a\x42\x2f\xeb\x1d\x35\x18\x7a\xa6\xc6\xe1\x6f\x17\x79\x96\xa4\x9d\xe0\x87\x4c\x07\xd7\x9a\x41\x35\xa0\x2f\xd2\x79\x48\x1d\xd5\x16\x1d\xa1\x91\x96\x6a\x6f\xec\x11\x62\x3a\x83\x91\x33\xa7\xe7\x59\x96\x26\xf3\x35\x03\x3e\x0f\x64\x8f\x05\xfe\xe0\x9f\x0c\xe8\x06\x2f\xbc\x34\xba\xc0\xeb\xf4\x2f\xfb\x96\x05\x22\x84\x46\x78\x91\x66\x60\x36\x01\xbd\x36\x6a\xe8\xb4\xcb\x33\xd2\x43\x87\x5b\xe1\xc5\x8d\x51\xeb\x10\xc1\xd8\xbf\x2d\x97\xf7\xf3\x59\x99\x01\x8b\x72\x7d\x7d\x95\x01\xeb\xc5\xeb\xf9\xf5\x55\xb9\xca\x80\x17\xf7\xcb\x59\x5c\x5c\xad\x1f\x16\xe5\xcb\x58\xe7\x7d\x9a\xbf\xd0\x58\x68\x7f\x7d\x15\xf5\x72\x52\xd7\x84\x57\x62\x2f\xd2\xc0\x1b\x43\xd1\x3a\x5a\x78\xb9\x27\x75\x84\x1b\xfa\xde\x58\x0f\x81\xeb\xab\xcb\x4a\xfa\xec\x02\x52\x7b\xda\x92\x4d\xe3\xff\x6b\x70\x1e\xb5\xe9\x7a\xe3\xc8\x41\x7a\x54\xc2\x51\x03\xa3\xe1\x0f\x06\x3f\xff\xc4\x49\xa7\x14\x97\x67\xa1\x6e\xa4\xc0\xad\xa8\x82\x3f\x9e\x65\x40\x9b\xfe\x05\xba\x0f\xa4\x82\x48\xc1\x94\x22\x28\x80\xb5\xa8\x78\xba\x56\xd4\x3b\xa9\xb7\xd0\xa2\x23\x07\xa1\x9b\x28\x5d\x42\xe6\xc8\x10\x38\x22\x70\x95\xda\xa8\x92\xc3\x0b\x7c\x58\x79\x2b\xf5\xf6\xd9\xc7\xb8\x1a\x34\x2d\xf0\x61\x2a\xf1\xb3\x8f\x8f\x47\xc3\x78\x2e\xc7\x9d\x51\x8d\x83\x3d\x01\x73\x69\xde\x7f\x5c\x39\x54\x3c\x45\x15\x4f\x19\x71\xb3\x13\x74\xe9\x20\xf0\x6a\xb5\x2c\x41\xba\x36\x0d\x35\x70\x81\x62\x9e\x21\x04\x14\x48\x94\x99\x55\xa8\x14\x3c\x35\xb7\xd6\x58\x97\xba\xeb\x7a\xa9\xc8\x86\xa5\x02\x37\xd3\x4f\x37\x66\x7d\xbf\x1c\x12\x3b\xb7\x3d\xa1\xf3\x28\xa4\xa6\x1b\xa3\xe2\x7e\x81\x0f\xf7\x93\xef\x89\x24\x96\xdc\xa0\x3c\x3b\x55\x44\x93\xe7\x13\x56\x0f\x71\x93\xc1\x65\x53\x60\x71\xcb\xcd\x06\xfd\x92\xc8\x41\x89\xa0\x3e\x45\xb6\x93\x66\x46\xaa\xd3\xca\xd1\x25\x52\xd3\x68\x94\xda\x9c\x4d\x33\xe9\x20\x39\x67\xa1\x37\xc6\x76\x69\x42\x95\xe1\x9b\xa1\x25\xb4\xc6\x79\x74\xa2\x6e\xa5\xa6\xc4\xf7\xce\x38\xcf\xc1\xa1\x00\xef\xb3\xa1\x46\x39\xfe\x03\x4b\x6c\x49\xfb\x04\x32\xe3\xff\x23\xca\xb9\xe5\x36\x81\x17\x63\x99\x40\x2f\x1c\xe7\x90\xb3\xf2\x7c\x7f\x7d\x3d\x5b\x81\x36\x82\x95\x73\x61\x5d\x6e\xf8\x10\xb6\x6c\x73\xe9\xb0\xd3\xe6\xa0\xd9\x0e\xb3\x97\xf3\x72\xfd\x69\xb5\x9e\xad\xe7\x9f\xde\x96\xbf\x97\xcb\xf7\xe5\x08\x90\x12\x1d\x5a\x12\xca\xb7\x47\xc6\x68\x49\x58\x5f\x91\xf0\x0e\xc2\xf2\xe4\x6a\x92\xfb\x78\x36\x2d\x6d\x07\x25\x6c\x38\x98\x76\x2f\x54\x3a\x49\x2d\x05\xc0\xd0\x22\x83\x59\x72\xbd\xd1\x0d\x13\xf1\x06\x96\x3e\x0f\xe4\xbc\x7b\xcc\xe5\x6e\x3e\xbb\x5f\xdf\xfd\xf9\x88\x4b\xbc\xaa\x0d\x27\x0e\x3a\x02\x39\xb9\x0f\xcd\x8d\x32\xa2\x15\x4e\x3f\xf7\x70\xfc\x5f\x9c\x09\xa7\x73\x7f\x68\xa5\x8a\x8c\x8c\x0d\x0f\xcf\x14\x87\x9f\x32\x72\x4e\x6c\xf9\xed\xe2\xb7\xf0\x9d\xfc\x5b\x92\x7d\x2a\xd4\xc3\x7c\xf5\x66\x59\xae\x16\xef\xe6\xff\xce\xb0\x91\xae\x36\x5a\x53\xed\xa9\x39\x31\x7c\xf9\xf0\xe6\x06\x69\x95\x2d\x50\x59\x12\x3b\x97\x07\x80\xd6\xf4\x41\xed\xf0\xd8\x8c\xed\x04\xfc\x80\x5a\x9b\x8e\x50\x89\x7a\x07\xa3\xd9\xbd\x41\x5e\x3e\x3a\x1d\xf1\xc3\x92\x14\x8b\x3c\x1e\x33\xbe\x5d\xac\x6e\x96\x65\x39\xbf\x59\xcf\x6f\xa3\x11\xd9\x2d\x43\x78\x1d\x9e\x98\x2f\x6d\x05\xfb\x05\xc3\x8d\x96\x64\x1f\x2a\xe1\xfc\xdd\x49\xd4\xd7\xae\xc0\x0b\x65\x84\x3f\xdf\x40\x5e\x46\x3e\x8e\x6a\xa3\x9b\xb1\x1d\xbe\x93\x4e\xe3\x41\x45\xa4\x21\x94\xdc\x53\x8e\xf7\xdc\x9b\x50\x07\x71\xe4\x75\xfc\xfa\xcb\x8f\xa0\x3d\x69\x1c\xa4\x6f\x51\x2b\x53\xef\xe0\x76\x74\xe0\x8e\x86\x9e\xc1\x57\x93\x92\xa1\xd9\x62\xe2\xff\xf3\x95\x16\x47\x37\x1e\xa4\x50\x9c\xef\xa0\x49\x8b\x1f\xbf\xbf\xff\x42\xdc\x3e\xa4\x15\x93\xf4\x31\xe8\xf4\xcc\x86\x38\xcc\xbf\x50\x3d\x78\x0a\x99\xff\x0b\xb7\xd6\xca\xdb\xd3\x61\xff\x7f\x31\xbd\xbc\xb2\x6f\xd9\x3f\x01\x00\x00\xff\xff\x10\x84\x1d\x4d\x7b\x09\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 2427, mode: os.FileMode(436), modTime: time.Unix(1575337474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
