// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x51\x6f\xdb\x46\x13\x7c\xe7\xaf\x98\xc0\x0f\xf9\x3e\xa0\x16\x8a\xd6\xf0\x03\x81\x16\x50\x6d\x25\x56\x9a\x48\xa9\xa5\x24\x28\x82\x20\x38\x92\x2b\xf1\xaa\xe3\x1d\x73\xb7\x94\xa2\x06\xf9\xef\xc5\x2e\x29\x5a\xb0\xd1\x3e\x89\x3a\xee\xce\xce\xce\xce\x2d\x2f\xb0\xae\x6d\xc2\xc6\x3a\x42\x45\xa9\x8c\xb6\xa0\x04\xae\x09\xa9\xac\xa9\x31\xd8\xc4\xd0\xe8\xff\xe9\xdb\x39\x12\xc5\xbd\x2d\x69\x92\x65\x17\x98\xf3\xf3\x04\x1f\x18\xb6\x22\xe3\x7e\x40\xd1\x31\x0e\x04\x4f\x54\x81\x03\x1a\xe3\x3b\xe3\xdc\x11\x5b\xf2\x14\x0d\x13\xf8\xd8\x52\xc2\x26\x44\x85\x5b\x1f\x5b\x5a\x95\xd1\xb6\x8c\x77\xf3\xec\x02\x87\x9a\x3c\x78\xe4\x62\x13\xba\xb6\x32\x4c\xd5\xa4\x67\x58\x1a\x8f\x82\x50\x05\x4f\x28\x8e\x88\x9d\xf7\xd6\x6f\xf3\xec\x02\xd8\x46\xd3\xd6\x5f\xdc\x65\xcf\xf8\x52\xeb\xf4\xc8\xa7\xda\x97\x9c\x86\x7e\x26\x43\x30\x2e\x2f\x43\xc7\x6d\xc7\xa7\xf3\x6a\xc2\x49\x69\xd8\xb2\xc6\xc1\x3a\x77\x46\xbc\x26\x0c\xc1\x82\xdd\x13\xe4\xda\x70\x1f\x57\x10\x5a\x5b\xee\xa8\x42\xd7\x0a\x35\x09\x7f\x37\x9f\x64\x83\xb4\x67\xf8\x9a\x99\x90\xea\xd0\xb9\x0a\xf4\xd5\x26\x86\xf5\xbd\xda\xa6\x21\x54\x36\x52\xc9\x21\x1e\x61\xce\x67\x30\x72\x96\xf4\x49\x96\x0d\x93\xf9\x96\x01\x5f\x3a\x8a\xc7\x1c\x7f\xc8\x4f\x06\x34\x1d\x1b\xb6\xc1\xe7\x78\x33\x3c\x65\xdf\x33\x25\x42\xa8\x0c\x9b\x61\x06\x61\xa3\xe8\x65\x70\x5d\xe3\xd3\x24\x23\xdf\x35\xb8\x35\x6c\x6e\x82\x5b\x6b\x84\x60\xff\xb6\x5c\xbe\x9e\x4d\x17\x19\x30\x5f\xac\xaf\xaf\x32\x60\x3d\x7f\x33\xbb\xbe\x5a\xac\x32\xe0\xc5\xeb\xe5\xb4\x3f\x5c\xad\xef\xe7\x8b\x97\x7d\x9d\x0f\xc3\xfc\x8d\xc7\xdc\xf3\xf5\x55\xaf\x57\xb2\xbe\x24\xbc\x32\x7b\x33\x0c\xbc\x0a\xd4\x5b\xc7\x1b\xb6\x7b\x72\x47\xa4\xae\x6d\x43\x64\x18\x5c\x5f\x5d\x16\x96\xb3\x0b\x58\xcf\xb4\xa5\x38\x8c\xff\xaf\x2e\x31\xca\xd0\xb4\x21\x51\x82\x65\x14\x26\x51\x85\xe0\xc1\x87\x80\x9f\x7f\x92\xa4\x53\x4a\x9a\x64\x5a\xb7\xa7\x20\xad\xb8\x5c\xfe\x3c\xcb\x80\x7a\x78\x52\xba\xf7\xe4\x54\x24\x35\xa5\x51\x05\xb0\x36\x85\x4c\x37\x9a\x72\x67\xfd\x16\xde\x34\x94\x60\x7c\xd5\x4b\x37\x20\x4b\xa4\x06\x8e\x08\x52\xa5\x0c\x6e\x21\xe1\x39\x3e\xae\x38\x5a\xbf\x7d\xf6\xa9\x3f\x55\x4d\x73\x7c\x3c\x97\xf8\xd9\xa7\xc7\xa3\x11\xbc\x34\xc1\x5d\x70\x55\x42\x3c\x01\x4b\x69\x79\xff\xb8\xb2\x56\x3c\x45\xe5\x4f\x19\x49\xb3\x67\xe8\x36\xc1\xe0\xd5\x6a\xb9\x00\xf9\x32\x54\x54\x21\x29\xc5\x49\x06\x0d\xc8\x31\x50\x7e\x60\x15\x29\x75\x8e\xc5\x2c\xa6\xf7\xd9\x40\x41\xcd\x76\xdf\xbf\x14\x12\xb6\xca\x31\xbf\x95\x7a\xda\xc2\x19\x97\x1e\x6b\xee\x37\x21\x36\x43\x37\x45\x90\x5b\x54\x13\xea\x90\x18\x8d\x29\x6b\xeb\x69\x00\xbe\x0b\x89\x25\x58\x51\xe5\xbd\x88\x7f\x22\xf6\x5f\x58\x66\x4b\x9e\x07\x90\xa9\x3c\x8f\x28\x0f\xdc\xea\x01\x3c\x1f\xcb\x68\xab\x6a\x7d\xcd\x59\xb1\xdc\xf5\x6f\x0f\xb2\xd1\xc6\x48\x8b\x49\xcf\xed\x46\x0c\x5b\x8b\x25\x6c\xc2\xce\x87\x83\x17\xe9\xa6\x2f\x67\x8b\xf5\xe7\xd5\x7a\xba\x9e\x7d\x7e\xb7\xf8\x7d\xb1\xfc\xb0\x18\x01\x86\xc4\x84\x9a\x8c\xe3\xfa\x28\x18\x35\x99\xc8\x05\x19\x4e\x30\x51\x24\x2e\xc9\xee\x7b\x1f\x47\xda\x76\xce\x44\x35\x71\xdc\x1b\x37\xb8\xae\x26\x05\xd4\x16\x05\x2c\x52\x6a\x83\xaf\x84\x08\x07\x44\xfa\xd2\x51\xe2\xf4\x98\xcb\xdd\x6c\xfa\x7a\x7d\xf7\xe7\x23\x2e\xfd\x5a\x0b\x92\xd8\xf9\x1e\x28\xd9\xbd\x36\x37\xca\x88\xda\x24\xff\x9c\x91\xe4\xd9\x3c\x10\x1e\xee\xc8\xa1\xb6\xae\x67\x14\xa2\x2e\xe9\x73\x1c\x59\xfb\x94\x92\xd9\xca\x9e\x97\xef\xc6\x7b\xfb\xb7\xa5\xf8\x54\xa8\xfb\xd9\xea\xed\x72\xb1\x9a\xbf\x9f\xfd\x3b\xc3\xca\xa6\x32\x78\x4f\x25\x53\x75\x62\xf8\xf2\xfe\xed\x0d\x86\x53\xb1\x40\x11\xc9\xec\xd2\x44\x01\xea\xd0\xaa\xda\xba\x98\xc7\x76\x14\x5f\x51\xcb\xd0\x10\x0a\x53\xee\x10\xbc\xb3\x9e\x54\x5e\xf1\x78\x43\xb2\x84\x07\xc5\x7a\x1e\x8f\x19\xdf\xce\x57\x37\xcb\xc5\x62\x76\xb3\x9e\xdd\xf6\x46\x14\xb7\x74\xba\x49\x9f\x98\x6f\x78\xa5\xf6\x53\xc3\x8d\x96\x14\x1f\x3a\x93\xf8\xee\x24\xea\x9b\x94\xe3\x85\x0b\x86\x1f\x6e\x2b\xdb\x9e\x4f\xa2\x32\xf8\x6a\x6c\x47\xee\xef\x69\x3c\x28\x88\x3c\x8c\xb3\x7b\x9a\xe0\x83\xf4\x66\xdc\xc1\x1c\xe5\x1c\xbf\xfe\xf2\x23\x68\x4f\x1e\x07\xcb\x35\x4a\x17\xca\x1d\xd2\x8e\x0e\xd2\x51\xd7\x0a\xf8\xea\xac\xa4\x36\x9b\x9f\xf9\x5f\xef\x84\xb6\xd2\x8f\x6e\xbc\x48\x5a\x5c\x76\xd8\x59\x8b\x9f\xc6\x60\x5d\x09\x1a\xb7\xd7\xb4\xfc\x2c\x7d\x0c\x3a\x7d\x92\x34\x0e\xb3\xaf\x54\x76\x4c\x9a\xf9\x3f\x5d\x2f\x2b\x8e\xa7\xcb\xfe\xff\xfc\x7c\xcb\x64\xdf\xb3\x7f\x02\x00\x00\xff\xff\xc3\xa7\x61\x00\xa7\x08\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 2215, mode: os.FileMode(436), modTime: time.Unix(1565049409, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

