// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/services/query_broker/querybrokerpb/service.proto

package querybrokerpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "pixielabs.ai/pixielabs/src/api/public/uuidpb"
	queryresultspb "pixielabs.ai/pixielabs/src/carnot/queryresultspb"
	proto2 "pixielabs.ai/pixielabs/src/common/base/proto"
	proto1 "pixielabs.ai/pixielabs/src/table_store/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Schema struct {
	Relations []*proto1.Relation `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (m *Schema) Reset()      { *m = Schema{} }
func (*Schema) ProtoMessage() {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{0}
}
func (m *Schema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(m, src)
}
func (m *Schema) XXX_Size() int {
	return m.Size()
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

func (m *Schema) GetRelations() []*proto1.Relation {
	if m != nil {
		return m.Relations
	}
	return nil
}

type SchemaRequest struct {
}

func (m *SchemaRequest) Reset()      { *m = SchemaRequest{} }
func (*SchemaRequest) ProtoMessage() {}
func (*SchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{1}
}
func (m *SchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaRequest.Merge(m, src)
}
func (m *SchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaRequest proto.InternalMessageInfo

type SchemaResponse struct {
	SchemaByAgent []*SchemaResponse_SchemaByAgent `protobuf:"bytes,1,rep,name=schema_by_agent,json=schemaByAgent,proto3" json:"schema_by_agent,omitempty"`
}

func (m *SchemaResponse) Reset()      { *m = SchemaResponse{} }
func (*SchemaResponse) ProtoMessage() {}
func (*SchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{2}
}
func (m *SchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaResponse.Merge(m, src)
}
func (m *SchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaResponse proto.InternalMessageInfo

func (m *SchemaResponse) GetSchemaByAgent() []*SchemaResponse_SchemaByAgent {
	if m != nil {
		return m.SchemaByAgent
	}
	return nil
}

type SchemaResponse_SchemaByAgent struct {
	AgentID *uuidpb.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Schema  *Schema      `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *SchemaResponse_SchemaByAgent) Reset()      { *m = SchemaResponse_SchemaByAgent{} }
func (*SchemaResponse_SchemaByAgent) ProtoMessage() {}
func (*SchemaResponse_SchemaByAgent) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{2, 0}
}
func (m *SchemaResponse_SchemaByAgent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaResponse_SchemaByAgent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaResponse_SchemaByAgent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaResponse_SchemaByAgent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaResponse_SchemaByAgent.Merge(m, src)
}
func (m *SchemaResponse_SchemaByAgent) XXX_Size() int {
	return m.Size()
}
func (m *SchemaResponse_SchemaByAgent) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaResponse_SchemaByAgent.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaResponse_SchemaByAgent proto.InternalMessageInfo

func (m *SchemaResponse_SchemaByAgent) GetAgentID() *uuidpb.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *SchemaResponse_SchemaByAgent) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type AgentQueryResponse struct {
	Status      *proto2.Status              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	QueryID     *uuidpb.UUID                `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryResult *queryresultspb.QueryResult `protobuf:"bytes,3,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`
}

func (m *AgentQueryResponse) Reset()      { *m = AgentQueryResponse{} }
func (*AgentQueryResponse) ProtoMessage() {}
func (*AgentQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{3}
}
func (m *AgentQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentQueryResponse.Merge(m, src)
}
func (m *AgentQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentQueryResponse proto.InternalMessageInfo

func (m *AgentQueryResponse) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AgentQueryResponse) GetQueryID() *uuidpb.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

func (m *AgentQueryResponse) GetQueryResult() *queryresultspb.QueryResult {
	if m != nil {
		return m.QueryResult
	}
	return nil
}

type AgentQueryResultRequest struct {
	AgentID *uuidpb.UUID        `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Result  *AgentQueryResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AgentQueryResultRequest) Reset()      { *m = AgentQueryResultRequest{} }
func (*AgentQueryResultRequest) ProtoMessage() {}
func (*AgentQueryResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{4}
}
func (m *AgentQueryResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentQueryResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentQueryResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentQueryResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentQueryResultRequest.Merge(m, src)
}
func (m *AgentQueryResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *AgentQueryResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentQueryResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentQueryResultRequest proto.InternalMessageInfo

func (m *AgentQueryResultRequest) GetAgentID() *uuidpb.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *AgentQueryResultRequest) GetResult() *AgentQueryResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type AgentQueryResultResponse struct {
}

func (m *AgentQueryResultResponse) Reset()      { *m = AgentQueryResultResponse{} }
func (*AgentQueryResultResponse) ProtoMessage() {}
func (*AgentQueryResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{5}
}
func (m *AgentQueryResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentQueryResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentQueryResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentQueryResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentQueryResultResponse.Merge(m, src)
}
func (m *AgentQueryResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentQueryResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentQueryResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentQueryResultResponse proto.InternalMessageInfo

type VizierQueryResponse struct {
	Status      *proto2.Status              `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	QueryID     *uuidpb.UUID                `protobuf:"bytes,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryResult *queryresultspb.QueryResult `protobuf:"bytes,4,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`
}

func (m *VizierQueryResponse) Reset()      { *m = VizierQueryResponse{} }
func (*VizierQueryResponse) ProtoMessage() {}
func (*VizierQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{6}
}
func (m *VizierQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierQueryResponse.Merge(m, src)
}
func (m *VizierQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *VizierQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VizierQueryResponse proto.InternalMessageInfo

func (m *VizierQueryResponse) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VizierQueryResponse) GetQueryID() *uuidpb.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

func (m *VizierQueryResponse) GetQueryResult() *queryresultspb.QueryResult {
	if m != nil {
		return m.QueryResult
	}
	return nil
}

func init() {
	proto.RegisterType((*Schema)(nil), "pl.vizier.services.query_broker.querybrokerpb.Schema")
	proto.RegisterType((*SchemaRequest)(nil), "pl.vizier.services.query_broker.querybrokerpb.SchemaRequest")
	proto.RegisterType((*SchemaResponse)(nil), "pl.vizier.services.query_broker.querybrokerpb.SchemaResponse")
	proto.RegisterType((*SchemaResponse_SchemaByAgent)(nil), "pl.vizier.services.query_broker.querybrokerpb.SchemaResponse.SchemaByAgent")
	proto.RegisterType((*AgentQueryResponse)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentQueryResponse")
	proto.RegisterType((*AgentQueryResultRequest)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentQueryResultRequest")
	proto.RegisterType((*AgentQueryResultResponse)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentQueryResultResponse")
	proto.RegisterType((*VizierQueryResponse)(nil), "pl.vizier.services.query_broker.querybrokerpb.VizierQueryResponse")
}

func init() {
	proto.RegisterFile("src/vizier/services/query_broker/querybrokerpb/service.proto", fileDescriptor_564387781338a684)
}

var fileDescriptor_564387781338a684 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbf, 0x6f, 0x13, 0x31,
	0x18, 0x3d, 0xa7, 0x55, 0x5a, 0x1c, 0x4a, 0xd0, 0x75, 0x20, 0xca, 0x60, 0xc2, 0x49, 0x48, 0x95,
	0x50, 0x7c, 0x52, 0x11, 0x62, 0x00, 0x09, 0x35, 0xea, 0x40, 0x40, 0x0c, 0x5c, 0x55, 0x24, 0x58,
	0xa2, 0xf3, 0xc5, 0xa4, 0x16, 0x97, 0xf8, 0x62, 0xfb, 0x2a, 0xc2, 0xc4, 0xca, 0xc6, 0xc6, 0xc8,
	0xca, 0xc2, 0x7f, 0xc1, 0x80, 0xc4, 0x92, 0xb1, 0x13, 0x22, 0x97, 0x85, 0xb1, 0x7f, 0x02, 0xf2,
	0x8f, 0xa4, 0x89, 0x0a, 0x43, 0xc2, 0x74, 0x7e, 0xd6, 0xfb, 0xde, 0x7b, 0xdf, 0xf7, 0x59, 0x07,
	0x1f, 0x4a, 0x91, 0x84, 0xa7, 0xec, 0x1d, 0xa3, 0x22, 0x94, 0x54, 0x9c, 0xb2, 0x84, 0xca, 0x70,
	0x98, 0x53, 0x31, 0xea, 0x10, 0xc1, 0xdf, 0x50, 0x61, 0x81, 0x3d, 0x67, 0x64, 0xc6, 0xc1, 0x99,
	0xe0, 0x8a, 0xfb, 0xcd, 0x2c, 0xc5, 0xb6, 0x18, 0xcf, 0x8a, 0xf1, 0x62, 0x31, 0x5e, 0x2a, 0xae,
	0x37, 0x7b, 0x4c, 0x9d, 0xe4, 0x04, 0x27, 0xbc, 0x1f, 0xf6, 0x78, 0x8f, 0x87, 0x46, 0x85, 0xe4,
	0xaf, 0x0d, 0x32, 0xc0, 0x9c, 0xac, 0x7a, 0xbd, 0xa9, 0xb3, 0x25, 0xb1, 0x18, 0x70, 0x65, 0x53,
	0x08, 0x2a, 0xf3, 0x54, 0xc9, 0x8c, 0xb8, 0x84, 0x0e, 0x3b, 0x7a, 0x43, 0xd3, 0xe3, 0x8c, 0x85,
	0x59, 0x4e, 0x52, 0x96, 0x84, 0x79, 0xce, 0xba, 0x19, 0x31, 0x1f, 0xc7, 0x08, 0x8c, 0x20, 0xef,
	0xf7, 0xf9, 0x20, 0x24, 0xb1, 0xa4, 0xd6, 0x3f, 0x94, 0x2a, 0x56, 0xb9, 0x5c, 0xe4, 0xa8, 0x98,
	0xa4, 0xb4, 0x23, 0x15, 0x17, 0x73, 0x4e, 0x72, 0x42, 0xfb, 0xb1, 0xe5, 0x04, 0x6d, 0x58, 0x3e,
	0x32, 0xd8, 0x7f, 0x04, 0xaf, 0x08, 0x9a, 0xc6, 0x8a, 0xf1, 0x81, 0xac, 0x81, 0xc6, 0xc6, 0x5e,
	0x65, 0xff, 0x16, 0xce, 0x52, 0xbc, 0x20, 0x80, 0x6d, 0x69, 0x46, 0x70, 0xe4, 0x98, 0xd1, 0x45,
	0x4d, 0x50, 0x85, 0x3b, 0x56, 0x2a, 0xa2, 0xc3, 0x9c, 0x4a, 0x15, 0x7c, 0x2e, 0xc1, 0x6b, 0xb3,
	0x1b, 0x99, 0xf1, 0x81, 0xa4, 0xbe, 0x84, 0x55, 0xab, 0xd1, 0x21, 0xa3, 0x4e, 0xdc, 0xa3, 0x03,
	0xe5, 0xac, 0x9e, 0xe2, 0x95, 0xe6, 0x8f, 0x97, 0x75, 0x1d, 0x6c, 0x8d, 0x0e, 0xb4, 0x64, 0xb4,
	0x23, 0x17, 0x61, 0xfd, 0x13, 0x98, 0x25, 0x73, 0x37, 0xfe, 0x7d, 0xb8, 0x6d, 0xcc, 0x3b, 0xac,
	0x5b, 0x03, 0x0d, 0xb0, 0x57, 0xd9, 0xaf, 0x6a, 0x7f, 0x3b, 0x66, 0x7c, 0x7c, 0xdc, 0x3e, 0x6c,
	0x55, 0x8a, 0x9f, 0x37, 0xb7, 0x0c, 0xbb, 0x7d, 0x18, 0x6d, 0x19, 0x76, 0xbb, 0xeb, 0x3f, 0x83,
	0x65, 0xab, 0x5d, 0x2b, 0x99, 0xb2, 0x7b, 0xeb, 0xc5, 0x76, 0x22, 0xc1, 0x37, 0x00, 0x7d, 0xe3,
	0xf1, 0x5c, 0xb3, 0xe6, 0x53, 0xba, 0x03, 0xcb, 0x76, 0x91, 0x2e, 0xdc, 0xae, 0x76, 0xb1, 0x37,
	0x5a, 0xc3, 0x1c, 0x22, 0x47, 0xd1, 0xbd, 0x58, 0x43, 0xd6, 0x75, 0xa1, 0xfe, 0xde, 0x8b, 0xb1,
	0xd0, 0xbd, 0x18, 0x76, 0xbb, 0xeb, 0x3f, 0x86, 0x57, 0x17, 0xdf, 0x5e, 0x6d, 0xc3, 0x14, 0xdf,
	0xd6, 0xc5, 0xf6, 0xa5, 0xe2, 0xe5, 0x97, 0x8a, 0x67, 0x21, 0xf3, 0x54, 0x45, 0x95, 0xe1, 0x05,
	0x08, 0xbe, 0x02, 0x78, 0x63, 0xa9, 0x0d, 0xcd, 0xb0, 0x8f, 0x60, 0xfd, 0x51, 0xbf, 0x84, 0x65,
	0x17, 0xcc, 0x76, 0x75, 0xb0, 0xe2, 0xa8, 0x2f, 0xcf, 0x35, 0x72, 0x82, 0x41, 0x1d, 0xd6, 0x2e,
	0xc7, 0xb5, 0x9c, 0xe0, 0x07, 0x80, 0xbb, 0x2f, 0x8c, 0xcb, 0xbf, 0x76, 0x52, 0x5a, 0x6d, 0x27,
	0x1b, 0xff, 0xb3, 0x93, 0xcd, 0x75, 0x77, 0xf2, 0x64, 0x73, 0x1b, 0x5c, 0x2f, 0xb5, 0x3e, 0x80,
	0xf1, 0x04, 0x79, 0x67, 0x13, 0xe4, 0x9d, 0x4f, 0x10, 0x78, 0x5f, 0x20, 0xf0, 0xa5, 0x40, 0xe0,
	0x7b, 0x81, 0xc0, 0xb8, 0x40, 0xe0, 0x57, 0x81, 0xc0, 0xef, 0x02, 0x79, 0xe7, 0x05, 0x02, 0x1f,
	0xa7, 0xc8, 0x1b, 0x4f, 0x91, 0x77, 0x36, 0x45, 0xde, 0xab, 0xa3, 0x8c, 0xbd, 0x65, 0x34, 0x8d,
	0x89, 0xc4, 0x31, 0x0b, 0xe7, 0x20, 0x5c, 0xed, 0x0f, 0xfb, 0x60, 0x09, 0x91, 0xb2, 0xf9, 0xe3,
	0xdc, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xed, 0x9a, 0xf8, 0xa8, 0x05, 0x00, 0x00,
}

func (this *Schema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schema)
	if !ok {
		that2, ok := that.(Schema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Relations) != len(that1.Relations) {
		return false
	}
	for i := range this.Relations {
		if !this.Relations[i].Equal(that1.Relations[i]) {
			return false
		}
	}
	return true
}
func (this *SchemaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaRequest)
	if !ok {
		that2, ok := that.(SchemaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SchemaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaResponse)
	if !ok {
		that2, ok := that.(SchemaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SchemaByAgent) != len(that1.SchemaByAgent) {
		return false
	}
	for i := range this.SchemaByAgent {
		if !this.SchemaByAgent[i].Equal(that1.SchemaByAgent[i]) {
			return false
		}
	}
	return true
}
func (this *SchemaResponse_SchemaByAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaResponse_SchemaByAgent)
	if !ok {
		that2, ok := that.(SchemaResponse_SchemaByAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	return true
}
func (this *AgentQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentQueryResponse)
	if !ok {
		that2, ok := that.(AgentQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	if !this.QueryResult.Equal(that1.QueryResult) {
		return false
	}
	return true
}
func (this *AgentQueryResultRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentQueryResultRequest)
	if !ok {
		that2, ok := that.(AgentQueryResultRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *AgentQueryResultResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentQueryResultResponse)
	if !ok {
		that2, ok := that.(AgentQueryResultResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VizierQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierQueryResponse)
	if !ok {
		that2, ok := that.(VizierQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	if !this.QueryResult.Equal(that1.QueryResult) {
		return false
	}
	return true
}
func (this *Schema) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querybrokerpb.Schema{")
	if this.Relations != nil {
		s = append(s, "Relations: "+fmt.Sprintf("%#v", this.Relations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&querybrokerpb.SchemaRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querybrokerpb.SchemaResponse{")
	if this.SchemaByAgent != nil {
		s = append(s, "SchemaByAgent: "+fmt.Sprintf("%#v", this.SchemaByAgent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaResponse_SchemaByAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querybrokerpb.SchemaResponse_SchemaByAgent{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Schema != nil {
		s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&querybrokerpb.AgentQueryResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	if this.QueryResult != nil {
		s = append(s, "QueryResult: "+fmt.Sprintf("%#v", this.QueryResult)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentQueryResultRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querybrokerpb.AgentQueryResultRequest{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentQueryResultResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&querybrokerpb.AgentQueryResultResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&querybrokerpb.VizierQueryResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	if this.QueryResult != nil {
		s = append(s, "QueryResult: "+fmt.Sprintf("%#v", this.QueryResult)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Schema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Schema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for iNdEx := len(m.Relations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaByAgent) > 0 {
		for iNdEx := len(m.SchemaByAgent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchemaByAgent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchemaResponse_SchemaByAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaResponse_SchemaByAgent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaResponse_SchemaByAgent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryResult != nil {
		{
			size, err := m.QueryResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.QueryID != nil {
		{
			size, err := m.QueryID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentQueryResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentQueryResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentQueryResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentQueryResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentQueryResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentQueryResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VizierQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryResult != nil {
		{
			size, err := m.QueryResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.QueryID != nil {
		{
			size, err := m.QueryID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Schema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchemaByAgent) > 0 {
		for _, e := range m.SchemaByAgent {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SchemaResponse_SchemaByAgent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.QueryResult != nil {
		l = m.QueryResult.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentQueryResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentQueryResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VizierQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.QueryResult != nil {
		l = m.QueryResult.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Schema) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRelations := "[]*Relation{"
	for _, f := range this.Relations {
		repeatedStringForRelations += strings.Replace(fmt.Sprintf("%v", f), "Relation", "proto1.Relation", 1) + ","
	}
	repeatedStringForRelations += "}"
	s := strings.Join([]string{`&Schema{`,
		`Relations:` + repeatedStringForRelations + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SchemaResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSchemaByAgent := "[]*SchemaResponse_SchemaByAgent{"
	for _, f := range this.SchemaByAgent {
		repeatedStringForSchemaByAgent += strings.Replace(fmt.Sprintf("%v", f), "SchemaResponse_SchemaByAgent", "SchemaResponse_SchemaByAgent", 1) + ","
	}
	repeatedStringForSchemaByAgent += "}"
	s := strings.Join([]string{`&SchemaResponse{`,
		`SchemaByAgent:` + repeatedStringForSchemaByAgent + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaResponse_SchemaByAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaResponse_SchemaByAgent{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Schema:` + strings.Replace(this.Schema.String(), "Schema", "Schema", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentQueryResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "uuidpb.UUID", 1) + `,`,
		`QueryResult:` + strings.Replace(fmt.Sprintf("%v", this.QueryResult), "QueryResult", "queryresultspb.QueryResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentQueryResultRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentQueryResultRequest{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Result:` + strings.Replace(this.Result.String(), "AgentQueryResponse", "AgentQueryResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentQueryResultResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentQueryResultResponse{`,
		`}`,
	}, "")
	return s
}
func (this *VizierQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierQueryResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "uuidpb.UUID", 1) + `,`,
		`QueryResult:` + strings.Replace(fmt.Sprintf("%v", this.QueryResult), "QueryResult", "queryresultspb.QueryResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Schema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Schema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Schema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &proto1.Relation{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaByAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaByAgent = append(m.SchemaByAgent, &SchemaResponse_SchemaByAgent{})
			if err := m.SchemaByAgent[len(m.SchemaByAgent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaResponse_SchemaByAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaByAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaByAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &uuidpb.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &Schema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &uuidpb.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryResult == nil {
				m.QueryResult = &queryresultspb.QueryResult{}
			}
			if err := m.QueryResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentQueryResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentQueryResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentQueryResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &uuidpb.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &AgentQueryResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentQueryResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentQueryResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentQueryResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &uuidpb.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryResult == nil {
				m.QueryResult = &queryresultspb.QueryResult{}
			}
			if err := m.QueryResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
