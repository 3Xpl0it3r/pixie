// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/services/query_broker/querybrokerpb/service.proto

package querybrokerpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	queryresultspb "pixielabs.ai/pixielabs/src/carnot/queryresultspb"
	proto3 "pixielabs.ai/pixielabs/src/common/base/proto"
	proto2 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	proto1 "pixielabs.ai/pixielabs/src/table_store/proto"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AgentState int32

const (
	AGENT_STATE_UNKNOWN      AgentState = 0
	AGENT_STATE_HEALTHY      AgentState = 1
	AGENT_STATE_UNRESPONSIVE AgentState = 2
	AGENT_STATE_DISCONNECTED AgentState = 3
)

var AgentState_name = map[int32]string{
	0: "AGENT_STATE_UNKNOWN",
	1: "AGENT_STATE_HEALTHY",
	2: "AGENT_STATE_UNRESPONSIVE",
	3: "AGENT_STATE_DISCONNECTED",
}

var AgentState_value = map[string]int32{
	"AGENT_STATE_UNKNOWN":      0,
	"AGENT_STATE_HEALTHY":      1,
	"AGENT_STATE_UNRESPONSIVE": 2,
	"AGENT_STATE_DISCONNECTED": 3,
}

func (AgentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{0}
}

type Schema struct {
	Relations []*proto1.Relation `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (m *Schema) Reset()      { *m = Schema{} }
func (*Schema) ProtoMessage() {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{0}
}
func (m *Schema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(m, src)
}
func (m *Schema) XXX_Size() int {
	return m.Size()
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

func (m *Schema) GetRelations() []*proto1.Relation {
	if m != nil {
		return m.Relations
	}
	return nil
}

type SchemaRequest struct {
}

func (m *SchemaRequest) Reset()      { *m = SchemaRequest{} }
func (*SchemaRequest) ProtoMessage() {}
func (*SchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{1}
}
func (m *SchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaRequest.Merge(m, src)
}
func (m *SchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaRequest proto.InternalMessageInfo

type SchemaResponse struct {
	SchemaByAgent []*SchemaResponse_SchemaByAgent `protobuf:"bytes,1,rep,name=schema_by_agent,json=schemaByAgent,proto3" json:"schema_by_agent,omitempty"`
}

func (m *SchemaResponse) Reset()      { *m = SchemaResponse{} }
func (*SchemaResponse) ProtoMessage() {}
func (*SchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{2}
}
func (m *SchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaResponse.Merge(m, src)
}
func (m *SchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaResponse proto.InternalMessageInfo

func (m *SchemaResponse) GetSchemaByAgent() []*SchemaResponse_SchemaByAgent {
	if m != nil {
		return m.SchemaByAgent
	}
	return nil
}

type SchemaResponse_SchemaByAgent struct {
	AgentID *proto2.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Schema  *Schema      `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *SchemaResponse_SchemaByAgent) Reset()      { *m = SchemaResponse_SchemaByAgent{} }
func (*SchemaResponse_SchemaByAgent) ProtoMessage() {}
func (*SchemaResponse_SchemaByAgent) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{2, 0}
}
func (m *SchemaResponse_SchemaByAgent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaResponse_SchemaByAgent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaResponse_SchemaByAgent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchemaResponse_SchemaByAgent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaResponse_SchemaByAgent.Merge(m, src)
}
func (m *SchemaResponse_SchemaByAgent) XXX_Size() int {
	return m.Size()
}
func (m *SchemaResponse_SchemaByAgent) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaResponse_SchemaByAgent.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaResponse_SchemaByAgent proto.InternalMessageInfo

func (m *SchemaResponse_SchemaByAgent) GetAgentID() *proto2.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *SchemaResponse_SchemaByAgent) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type AgentInfoRequest struct {
}

func (m *AgentInfoRequest) Reset()      { *m = AgentInfoRequest{} }
func (*AgentInfoRequest) ProtoMessage() {}
func (*AgentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{3}
}
func (m *AgentInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfoRequest.Merge(m, src)
}
func (m *AgentInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfoRequest proto.InternalMessageInfo

type AgentInfoResponse struct {
	Info []*AgentStatus `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *AgentInfoResponse) Reset()      { *m = AgentInfoResponse{} }
func (*AgentInfoResponse) ProtoMessage() {}
func (*AgentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{4}
}
func (m *AgentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfoResponse.Merge(m, src)
}
func (m *AgentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfoResponse proto.InternalMessageInfo

func (m *AgentInfoResponse) GetInfo() []*AgentStatus {
	if m != nil {
		return m.Info
	}
	return nil
}

type AgentStatus struct {
	Info            *AgentInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	LastHeartbeatNs int64      `protobuf:"varint,2,opt,name=last_heartbeat_ns,json=lastHeartbeatNs,proto3" json:"last_heartbeat_ns,omitempty"`
	CreateTimeNs    int64      `protobuf:"varint,3,opt,name=create_time_ns,json=createTimeNs,proto3" json:"create_time_ns,omitempty"`
	State           AgentState `protobuf:"varint,4,opt,name=state,proto3,enum=pl.vizier.services.query_broker.querybrokerpb.AgentState" json:"state,omitempty"`
}

func (m *AgentStatus) Reset()      { *m = AgentStatus{} }
func (*AgentStatus) ProtoMessage() {}
func (*AgentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{5}
}
func (m *AgentStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentStatus.Merge(m, src)
}
func (m *AgentStatus) XXX_Size() int {
	return m.Size()
}
func (m *AgentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AgentStatus proto.InternalMessageInfo

func (m *AgentStatus) GetInfo() *AgentInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *AgentStatus) GetLastHeartbeatNs() int64 {
	if m != nil {
		return m.LastHeartbeatNs
	}
	return 0
}

func (m *AgentStatus) GetCreateTimeNs() int64 {
	if m != nil {
		return m.CreateTimeNs
	}
	return 0
}

func (m *AgentStatus) GetState() AgentState {
	if m != nil {
		return m.State
	}
	return AGENT_STATE_UNKNOWN
}

type AgentInfo struct {
	AgentID  *proto2.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	HostInfo *HostInfo    `protobuf:"bytes,2,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
}

func (m *AgentInfo) Reset()      { *m = AgentInfo{} }
func (*AgentInfo) ProtoMessage() {}
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{6}
}
func (m *AgentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfo.Merge(m, src)
}
func (m *AgentInfo) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfo proto.InternalMessageInfo

func (m *AgentInfo) GetAgentID() *proto2.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *AgentInfo) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

type HostInfo struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *HostInfo) Reset()      { *m = HostInfo{} }
func (*HostInfo) ProtoMessage() {}
func (*HostInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{7}
}
func (m *HostInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostInfo.Merge(m, src)
}
func (m *HostInfo) XXX_Size() int {
	return m.Size()
}
func (m *HostInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HostInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HostInfo proto.InternalMessageInfo

func (m *HostInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type QueryRequest struct {
	QueryStr string `protobuf:"bytes,1,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
}

func (m *QueryRequest) Reset()      { *m = QueryRequest{} }
func (*QueryRequest) ProtoMessage() {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{8}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

type AgentQueryResponse struct {
	Status      *proto3.Status              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	QueryID     *proto2.UUID                `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryResult *queryresultspb.QueryResult `protobuf:"bytes,3,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`
}

func (m *AgentQueryResponse) Reset()      { *m = AgentQueryResponse{} }
func (*AgentQueryResponse) ProtoMessage() {}
func (*AgentQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{9}
}
func (m *AgentQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentQueryResponse.Merge(m, src)
}
func (m *AgentQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentQueryResponse proto.InternalMessageInfo

func (m *AgentQueryResponse) GetStatus() *proto3.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AgentQueryResponse) GetQueryID() *proto2.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

func (m *AgentQueryResponse) GetQueryResult() *queryresultspb.QueryResult {
	if m != nil {
		return m.QueryResult
	}
	return nil
}

type AgentQueryResultRequest struct {
	AgentID *proto2.UUID        `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Result  *AgentQueryResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AgentQueryResultRequest) Reset()      { *m = AgentQueryResultRequest{} }
func (*AgentQueryResultRequest) ProtoMessage() {}
func (*AgentQueryResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{10}
}
func (m *AgentQueryResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentQueryResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentQueryResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentQueryResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentQueryResultRequest.Merge(m, src)
}
func (m *AgentQueryResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *AgentQueryResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentQueryResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentQueryResultRequest proto.InternalMessageInfo

func (m *AgentQueryResultRequest) GetAgentID() *proto2.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *AgentQueryResultRequest) GetResult() *AgentQueryResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type AgentQueryResultResponse struct {
}

func (m *AgentQueryResultResponse) Reset()      { *m = AgentQueryResultResponse{} }
func (*AgentQueryResultResponse) ProtoMessage() {}
func (*AgentQueryResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{11}
}
func (m *AgentQueryResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentQueryResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentQueryResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentQueryResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentQueryResultResponse.Merge(m, src)
}
func (m *AgentQueryResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentQueryResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentQueryResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentQueryResultResponse proto.InternalMessageInfo

type VizierQueryResponse struct {
	Responses []*VizierQueryResponse_ResponseByAgent `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	Status    *proto3.Status                         `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	QueryID   *proto2.UUID                           `protobuf:"bytes,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *VizierQueryResponse) Reset()      { *m = VizierQueryResponse{} }
func (*VizierQueryResponse) ProtoMessage() {}
func (*VizierQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{12}
}
func (m *VizierQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierQueryResponse.Merge(m, src)
}
func (m *VizierQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *VizierQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VizierQueryResponse proto.InternalMessageInfo

func (m *VizierQueryResponse) GetResponses() []*VizierQueryResponse_ResponseByAgent {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *VizierQueryResponse) GetStatus() *proto3.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VizierQueryResponse) GetQueryID() *proto2.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

type VizierQueryResponse_ResponseByAgent struct {
	AgentID  *proto2.UUID        `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Response *AgentQueryResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *VizierQueryResponse_ResponseByAgent) Reset()      { *m = VizierQueryResponse_ResponseByAgent{} }
func (*VizierQueryResponse_ResponseByAgent) ProtoMessage() {}
func (*VizierQueryResponse_ResponseByAgent) Descriptor() ([]byte, []int) {
	return fileDescriptor_564387781338a684, []int{12, 0}
}
func (m *VizierQueryResponse_ResponseByAgent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierQueryResponse_ResponseByAgent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierQueryResponse_ResponseByAgent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierQueryResponse_ResponseByAgent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierQueryResponse_ResponseByAgent.Merge(m, src)
}
func (m *VizierQueryResponse_ResponseByAgent) XXX_Size() int {
	return m.Size()
}
func (m *VizierQueryResponse_ResponseByAgent) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierQueryResponse_ResponseByAgent.DiscardUnknown(m)
}

var xxx_messageInfo_VizierQueryResponse_ResponseByAgent proto.InternalMessageInfo

func (m *VizierQueryResponse_ResponseByAgent) GetAgentID() *proto2.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *VizierQueryResponse_ResponseByAgent) GetResponse() *AgentQueryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterEnum("pl.vizier.services.query_broker.querybrokerpb.AgentState", AgentState_name, AgentState_value)
	proto.RegisterType((*Schema)(nil), "pl.vizier.services.query_broker.querybrokerpb.Schema")
	proto.RegisterType((*SchemaRequest)(nil), "pl.vizier.services.query_broker.querybrokerpb.SchemaRequest")
	proto.RegisterType((*SchemaResponse)(nil), "pl.vizier.services.query_broker.querybrokerpb.SchemaResponse")
	proto.RegisterType((*SchemaResponse_SchemaByAgent)(nil), "pl.vizier.services.query_broker.querybrokerpb.SchemaResponse.SchemaByAgent")
	proto.RegisterType((*AgentInfoRequest)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentInfoRequest")
	proto.RegisterType((*AgentInfoResponse)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentInfoResponse")
	proto.RegisterType((*AgentStatus)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentStatus")
	proto.RegisterType((*AgentInfo)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentInfo")
	proto.RegisterType((*HostInfo)(nil), "pl.vizier.services.query_broker.querybrokerpb.HostInfo")
	proto.RegisterType((*QueryRequest)(nil), "pl.vizier.services.query_broker.querybrokerpb.QueryRequest")
	proto.RegisterType((*AgentQueryResponse)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentQueryResponse")
	proto.RegisterType((*AgentQueryResultRequest)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentQueryResultRequest")
	proto.RegisterType((*AgentQueryResultResponse)(nil), "pl.vizier.services.query_broker.querybrokerpb.AgentQueryResultResponse")
	proto.RegisterType((*VizierQueryResponse)(nil), "pl.vizier.services.query_broker.querybrokerpb.VizierQueryResponse")
	proto.RegisterType((*VizierQueryResponse_ResponseByAgent)(nil), "pl.vizier.services.query_broker.querybrokerpb.VizierQueryResponse.ResponseByAgent")
}

func init() {
	proto.RegisterFile("src/vizier/services/query_broker/querybrokerpb/service.proto", fileDescriptor_564387781338a684)
}

var fileDescriptor_564387781338a684 = []byte{
	// 1002 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xc1, 0x6f, 0xe3, 0xc4,
	0x17, 0xf6, 0x34, 0xfd, 0x65, 0x9b, 0x97, 0x6c, 0x93, 0x9d, 0x1e, 0x1a, 0xe5, 0x87, 0x4c, 0xb1,
	0x00, 0x55, 0xbb, 0xaa, 0x23, 0x05, 0xa1, 0x05, 0x76, 0xd1, 0x92, 0x6c, 0x43, 0x13, 0xed, 0xe2,
	0x82, 0x93, 0x2e, 0x5a, 0x24, 0x64, 0xd9, 0xc9, 0xb4, 0xb1, 0x48, 0x6c, 0xd7, 0x33, 0xae, 0xb6,
	0x7b, 0xe2, 0x8a, 0xb8, 0x80, 0x38, 0x20, 0xb8, 0x70, 0x05, 0x09, 0xfe, 0x0b, 0x0e, 0x1c, 0x7b,
	0xdc, 0x13, 0xa2, 0xe9, 0x85, 0xe3, 0xde, 0x91, 0x10, 0xf2, 0xcc, 0x38, 0x71, 0xca, 0x5e, 0xe2,
	0x72, 0x9b, 0xf7, 0xfc, 0xbd, 0xef, 0x7d, 0xef, 0xcd, 0xcb, 0xcb, 0xc0, 0x5d, 0x1a, 0x0e, 0xea,
	0x27, 0xee, 0x53, 0x97, 0x84, 0x75, 0x4a, 0xc2, 0x13, 0x77, 0x40, 0x68, 0xfd, 0x38, 0x22, 0xe1,
	0xa9, 0xe5, 0x84, 0xfe, 0x67, 0x24, 0x14, 0x86, 0x38, 0x07, 0x4e, 0x82, 0xd1, 0x83, 0xd0, 0x67,
	0x3e, 0xde, 0x09, 0xc6, 0xba, 0x08, 0xd6, 0x93, 0x60, 0x3d, 0x1d, 0xac, 0x2f, 0x04, 0xd7, 0x76,
	0x8e, 0x5c, 0x36, 0x8a, 0x1c, 0x7d, 0xe0, 0x4f, 0xea, 0x47, 0xfe, 0x91, 0x5f, 0xe7, 0x2c, 0x4e,
	0x74, 0xc8, 0x2d, 0x6e, 0xf0, 0x93, 0x60, 0xaf, 0xed, 0xc4, 0xda, 0x06, 0x76, 0xe8, 0xf9, 0x4c,
	0xa8, 0x08, 0x09, 0x8d, 0xc6, 0x8c, 0x06, 0x8e, 0x54, 0x28, 0x6d, 0x09, 0xdf, 0xe2, 0x70, 0x7f,
	0x32, 0xf1, 0xbd, 0x7a, 0x14, 0xb9, 0x43, 0xc1, 0xce, 0x8f, 0x12, 0xa1, 0xa5, 0x10, 0x8e, 0x4d,
	0x89, 0x44, 0x50, 0x66, 0xb3, 0x88, 0xa6, 0x31, 0xcc, 0x76, 0xc6, 0xc4, 0xa2, 0xcc, 0x0f, 0x67,
	0x98, 0xc1, 0x88, 0x4c, 0x6c, 0x81, 0xd1, 0xba, 0x90, 0xef, 0x71, 0x1b, 0xdf, 0x83, 0x42, 0x48,
	0xc6, 0x36, 0x73, 0x7d, 0x8f, 0x56, 0xd1, 0x56, 0x6e, 0xbb, 0xd8, 0x78, 0x45, 0x0f, 0xc6, 0x7a,
	0x8a, 0x40, 0x17, 0xa1, 0x81, 0xa3, 0x9b, 0x12, 0x69, 0xce, 0x63, 0xb4, 0x32, 0x5c, 0x17, 0x54,
	0x26, 0x39, 0x8e, 0x08, 0x65, 0xda, 0x0f, 0x2b, 0xb0, 0x9e, 0x78, 0x68, 0xe0, 0x7b, 0x94, 0x60,
	0x0a, 0x65, 0xc1, 0x61, 0x39, 0xa7, 0x96, 0x7d, 0x44, 0x3c, 0x26, 0x53, 0x3d, 0xd0, 0x97, 0xea,
	0xbf, 0xbe, 0xc8, 0x2b, 0xcd, 0xd6, 0x69, 0x33, 0xa6, 0x34, 0xaf, 0xd3, 0xb4, 0x59, 0xfb, 0x16,
	0x25, 0xca, 0xa4, 0x07, 0xdf, 0x86, 0x35, 0x9e, 0xdc, 0x72, 0x87, 0x55, 0xb4, 0x85, 0xb6, 0x8b,
	0x8d, 0x72, 0x9c, 0x3f, 0xee, 0x6f, 0xe0, 0xe8, 0x07, 0x07, 0xdd, 0xdd, 0x56, 0x71, 0xfa, 0xfb,
	0xcb, 0xd7, 0x38, 0xba, 0xbb, 0x6b, 0x5e, 0xe3, 0xe8, 0xee, 0x10, 0x7f, 0x00, 0x79, 0xc1, 0x5d,
	0x5d, 0xe1, 0x61, 0x6f, 0x66, 0x93, 0x2d, 0x49, 0x34, 0x0c, 0x15, 0x91, 0xc2, 0x3b, 0xf4, 0x93,
	0xae, 0x0d, 0xe0, 0x46, 0xca, 0x27, 0xfb, 0x66, 0xc0, 0xaa, 0xeb, 0x1d, 0xfa, 0xb2, 0x59, 0xef,
	0x2c, 0x99, 0x95, 0xf3, 0xf5, 0xf8, 0x68, 0x98, 0x9c, 0x47, 0xfb, 0x1b, 0x41, 0x31, 0xe5, 0xc5,
	0x0f, 0x67, 0xfc, 0x71, 0x55, 0x6f, 0x65, 0xe1, 0xe7, 0x7a, 0x39, 0x0b, 0xbe, 0x09, 0x37, 0xc6,
	0x36, 0x65, 0xd6, 0x88, 0xd8, 0x21, 0x73, 0x88, 0xcd, 0x2c, 0x8f, 0xf2, 0x86, 0xe5, 0xcc, 0x72,
	0xfc, 0xa1, 0x93, 0xf8, 0x0d, 0x8a, 0x5f, 0x85, 0xf5, 0x41, 0x48, 0x6c, 0x46, 0x2c, 0xe6, 0x4e,
	0x48, 0x0c, 0xcc, 0x71, 0x60, 0x49, 0x78, 0xfb, 0xee, 0x84, 0x18, 0x14, 0xef, 0xc3, 0xff, 0xe2,
	0xd1, 0x26, 0xd5, 0xd5, 0x2d, 0xb4, 0xbd, 0xde, 0x78, 0x3b, 0x6b, 0x03, 0x88, 0x29, 0x78, 0xb4,
	0xef, 0x11, 0x14, 0x66, 0xb2, 0xb3, 0xcf, 0x43, 0x1f, 0x0a, 0x23, 0x9f, 0x32, 0x8b, 0x37, 0x4f,
	0x8c, 0xc4, 0xed, 0x25, 0xb5, 0x75, 0x7c, 0x2a, 0x7a, 0xb7, 0x36, 0x92, 0x27, 0xed, 0x75, 0x58,
	0x4b, 0xbc, 0xb8, 0x06, 0xdc, 0xef, 0xd9, 0x13, 0xc2, 0xa5, 0x15, 0xcc, 0x99, 0xad, 0xdd, 0x82,
	0xd2, 0x47, 0x31, 0x97, 0x1c, 0x1d, 0xfc, 0x7f, 0x28, 0x88, 0x44, 0x94, 0x85, 0x09, 0x98, 0x3b,
	0x7a, 0x2c, 0xd4, 0x7e, 0x45, 0x80, 0xb9, 0x7e, 0x19, 0x22, 0x27, 0xeb, 0x16, 0xe4, 0xc5, 0xd2,
	0x90, 0x85, 0x6f, 0xc4, 0xf2, 0x85, 0x27, 0x9e, 0x57, 0x31, 0x34, 0x12, 0x12, 0xf7, 0x49, 0x24,
	0x70, 0x87, 0xb2, 0xda, 0x17, 0xf7, 0x89, 0xa7, 0x88, 0xfb, 0xc4, 0xd1, 0xdd, 0x21, 0xee, 0x40,
	0x29, 0xbd, 0xe7, 0xf8, 0x1d, 0x17, 0x1b, 0xaf, 0xc5, 0xc1, 0x62, 0x2b, 0xea, 0x8b, 0x5b, 0x51,
	0x4f, 0x44, 0x46, 0x63, 0x66, 0x16, 0x8f, 0xe7, 0x86, 0xf6, 0x0b, 0x82, 0xcd, 0x85, 0x32, 0x62,
	0x84, 0xac, 0x3f, 0xf3, 0x35, 0x3e, 0x86, 0xbc, 0x14, 0x26, 0xaa, 0x6a, 0x66, 0x99, 0xaf, 0x85,
	0xbe, 0x9a, 0x92, 0x50, 0xab, 0x41, 0xf5, 0xdf, 0x72, 0x05, 0x46, 0xfb, 0x2e, 0x07, 0x1b, 0x8f,
	0x78, 0x96, 0xc5, 0x3b, 0x09, 0xe2, 0x55, 0x2c, 0xce, 0xc9, 0x2a, 0x36, 0x97, 0x54, 0xf4, 0x02,
	0x5a, 0x3d, 0x39, 0x24, 0x6b, 0x72, 0x9e, 0x24, 0x35, 0x05, 0x2b, 0xcb, 0x4d, 0x41, 0x6e, 0x89,
	0x29, 0xa8, 0xfd, 0x84, 0xa0, 0x7c, 0x49, 0x44, 0xf6, 0x3b, 0xfb, 0x14, 0xd6, 0x12, 0xfd, 0xff,
	0xdd, 0xad, 0xcd, 0x28, 0x6f, 0x3e, 0x05, 0x98, 0x6f, 0x0d, 0xbc, 0x09, 0x1b, 0xcd, 0xbd, 0xb6,
	0xd1, 0xb7, 0x7a, 0xfd, 0x66, 0xbf, 0x6d, 0x1d, 0x18, 0x0f, 0x8c, 0xfd, 0x8f, 0x8d, 0x8a, 0x72,
	0xf9, 0x43, 0xa7, 0xdd, 0x7c, 0xd8, 0xef, 0x3c, 0xae, 0x20, 0xfc, 0x12, 0x54, 0x17, 0x23, 0xcc,
	0x76, 0xef, 0xc3, 0x7d, 0xa3, 0xd7, 0x7d, 0xd4, 0xae, 0xac, 0x5c, 0xfe, 0xba, 0xdb, 0xed, 0xdd,
	0xdf, 0x37, 0x8c, 0xf6, 0xfd, 0x7e, 0x7b, 0xb7, 0x92, 0x6b, 0xfc, 0xb5, 0x0a, 0x98, 0xeb, 0x6a,
	0x71, 0xa9, 0x3d, 0x51, 0x0b, 0xfe, 0x06, 0x41, 0x69, 0x8f, 0xb0, 0xf9, 0xda, 0xba, 0x97, 0x79,
	0x4f, 0x8b, 0x1f, 0x4c, 0xed, 0xbd, 0xec, 0x04, 0x72, 0x84, 0x15, 0xfc, 0x35, 0x82, 0x52, 0xfb,
	0x09, 0x19, 0x44, 0x8c, 0x70, 0xcd, 0xf8, 0xce, 0x92, 0xa4, 0xe9, 0x15, 0x56, 0x6b, 0x5d, 0x7d,
	0xce, 0x35, 0x05, 0x7f, 0x89, 0x00, 0xf6, 0x08, 0x13, 0xff, 0xb6, 0x14, 0xdf, 0xcd, 0xf8, 0xb8,
	0x10, 0x92, 0xde, 0xbd, 0xd2, 0xd3, 0x44, 0x53, 0xf0, 0xcf, 0x08, 0x36, 0x4d, 0x32, 0x20, 0xee,
	0x09, 0xb9, 0xbc, 0x0a, 0xf0, 0xfb, 0x57, 0x99, 0xd9, 0xf9, 0xea, 0xab, 0xed, 0x5d, 0x99, 0x27,
	0x91, 0xdb, 0xfa, 0x02, 0x9d, 0x9d, 0xab, 0xca, 0xb3, 0x73, 0x55, 0x79, 0x7e, 0xae, 0xa2, 0xcf,
	0xa7, 0x2a, 0xfa, 0x71, 0xaa, 0xa2, 0xdf, 0xa6, 0x2a, 0x3a, 0x9b, 0xaa, 0xe8, 0x8f, 0xa9, 0x8a,
	0xfe, 0x9c, 0xaa, 0xca, 0xf3, 0xa9, 0x8a, 0xbe, 0xba, 0x50, 0x95, 0xb3, 0x0b, 0x55, 0x79, 0x76,
	0xa1, 0x2a, 0x9f, 0xf4, 0x02, 0xf7, 0x89, 0x4b, 0xc6, 0xb6, 0x43, 0x75, 0xdb, 0xad, 0xcf, 0x8c,
	0xfa, 0x72, 0xaf, 0xf2, 0x3b, 0x0b, 0x96, 0x93, 0xe7, 0xaf, 0xd4, 0x37, 0xfe, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x03, 0x91, 0xa0, 0x70, 0xdc, 0x0b, 0x00, 0x00,
}

func (x AgentState) String() string {
	s, ok := AgentState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Schema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schema)
	if !ok {
		that2, ok := that.(Schema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Relations) != len(that1.Relations) {
		return false
	}
	for i := range this.Relations {
		if !this.Relations[i].Equal(that1.Relations[i]) {
			return false
		}
	}
	return true
}
func (this *SchemaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaRequest)
	if !ok {
		that2, ok := that.(SchemaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SchemaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaResponse)
	if !ok {
		that2, ok := that.(SchemaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SchemaByAgent) != len(that1.SchemaByAgent) {
		return false
	}
	for i := range this.SchemaByAgent {
		if !this.SchemaByAgent[i].Equal(that1.SchemaByAgent[i]) {
			return false
		}
	}
	return true
}
func (this *SchemaResponse_SchemaByAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaResponse_SchemaByAgent)
	if !ok {
		that2, ok := that.(SchemaResponse_SchemaByAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	return true
}
func (this *AgentInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfoRequest)
	if !ok {
		that2, ok := that.(AgentInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AgentInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfoResponse)
	if !ok {
		that2, ok := that.(AgentInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *AgentStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentStatus)
	if !ok {
		that2, ok := that.(AgentStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.LastHeartbeatNs != that1.LastHeartbeatNs {
		return false
	}
	if this.CreateTimeNs != that1.CreateTimeNs {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *AgentInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfo)
	if !ok {
		that2, ok := that.(AgentInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.HostInfo.Equal(that1.HostInfo) {
		return false
	}
	return true
}
func (this *HostInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostInfo)
	if !ok {
		that2, ok := that.(HostInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}
func (this *QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest)
	if !ok {
		that2, ok := that.(QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	return true
}
func (this *AgentQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentQueryResponse)
	if !ok {
		that2, ok := that.(AgentQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	if !this.QueryResult.Equal(that1.QueryResult) {
		return false
	}
	return true
}
func (this *AgentQueryResultRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentQueryResultRequest)
	if !ok {
		that2, ok := that.(AgentQueryResultRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *AgentQueryResultResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentQueryResultResponse)
	if !ok {
		that2, ok := that.(AgentQueryResultResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VizierQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierQueryResponse)
	if !ok {
		that2, ok := that.(VizierQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return false
		}
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	return true
}
func (this *VizierQueryResponse_ResponseByAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierQueryResponse_ResponseByAgent)
	if !ok {
		that2, ok := that.(VizierQueryResponse_ResponseByAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *Schema) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querybrokerpb.Schema{")
	if this.Relations != nil {
		s = append(s, "Relations: "+fmt.Sprintf("%#v", this.Relations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&querybrokerpb.SchemaRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querybrokerpb.SchemaResponse{")
	if this.SchemaByAgent != nil {
		s = append(s, "SchemaByAgent: "+fmt.Sprintf("%#v", this.SchemaByAgent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaResponse_SchemaByAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querybrokerpb.SchemaResponse_SchemaByAgent{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Schema != nil {
		s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&querybrokerpb.AgentInfoRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querybrokerpb.AgentInfoResponse{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&querybrokerpb.AgentStatus{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "LastHeartbeatNs: "+fmt.Sprintf("%#v", this.LastHeartbeatNs)+",\n")
	s = append(s, "CreateTimeNs: "+fmt.Sprintf("%#v", this.CreateTimeNs)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querybrokerpb.AgentInfo{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.HostInfo != nil {
		s = append(s, "HostInfo: "+fmt.Sprintf("%#v", this.HostInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querybrokerpb.HostInfo{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&querybrokerpb.QueryRequest{")
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&querybrokerpb.AgentQueryResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	if this.QueryResult != nil {
		s = append(s, "QueryResult: "+fmt.Sprintf("%#v", this.QueryResult)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentQueryResultRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querybrokerpb.AgentQueryResultRequest{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentQueryResultResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&querybrokerpb.AgentQueryResultResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&querybrokerpb.VizierQueryResponse{")
	if this.Responses != nil {
		s = append(s, "Responses: "+fmt.Sprintf("%#v", this.Responses)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierQueryResponse_ResponseByAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&querybrokerpb.VizierQueryResponse_ResponseByAgent{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryBrokerServiceClient is the client API for QueryBrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryBrokerServiceClient interface {
	GetAgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error)
	ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*VizierQueryResponse, error)
	GetSchemas(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResponse, error)
	ReceiveAgentQueryResult(ctx context.Context, in *AgentQueryResultRequest, opts ...grpc.CallOption) (*AgentQueryResultResponse, error)
}

type queryBrokerServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueryBrokerServiceClient(cc *grpc.ClientConn) QueryBrokerServiceClient {
	return &queryBrokerServiceClient{cc}
}

func (c *queryBrokerServiceClient) GetAgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error) {
	out := new(AgentInfoResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.query_broker.querybrokerpb.QueryBrokerService/GetAgentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBrokerServiceClient) ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*VizierQueryResponse, error) {
	out := new(VizierQueryResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.query_broker.querybrokerpb.QueryBrokerService/ExecuteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBrokerServiceClient) GetSchemas(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResponse, error) {
	out := new(SchemaResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.query_broker.querybrokerpb.QueryBrokerService/GetSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryBrokerServiceClient) ReceiveAgentQueryResult(ctx context.Context, in *AgentQueryResultRequest, opts ...grpc.CallOption) (*AgentQueryResultResponse, error) {
	out := new(AgentQueryResultResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.services.query_broker.querybrokerpb.QueryBrokerService/ReceiveAgentQueryResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryBrokerServiceServer is the server API for QueryBrokerService service.
type QueryBrokerServiceServer interface {
	GetAgentInfo(context.Context, *AgentInfoRequest) (*AgentInfoResponse, error)
	ExecuteQuery(context.Context, *QueryRequest) (*VizierQueryResponse, error)
	GetSchemas(context.Context, *SchemaRequest) (*SchemaResponse, error)
	ReceiveAgentQueryResult(context.Context, *AgentQueryResultRequest) (*AgentQueryResultResponse, error)
}

// UnimplementedQueryBrokerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryBrokerServiceServer struct {
}

func (*UnimplementedQueryBrokerServiceServer) GetAgentInfo(ctx context.Context, req *AgentInfoRequest) (*AgentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentInfo not implemented")
}
func (*UnimplementedQueryBrokerServiceServer) ExecuteQuery(ctx context.Context, req *QueryRequest) (*VizierQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (*UnimplementedQueryBrokerServiceServer) GetSchemas(ctx context.Context, req *SchemaRequest) (*SchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemas not implemented")
}
func (*UnimplementedQueryBrokerServiceServer) ReceiveAgentQueryResult(ctx context.Context, req *AgentQueryResultRequest) (*AgentQueryResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAgentQueryResult not implemented")
}

func RegisterQueryBrokerServiceServer(s *grpc.Server, srv QueryBrokerServiceServer) {
	s.RegisterService(&_QueryBrokerService_serviceDesc, srv)
}

func _QueryBrokerService_GetAgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBrokerServiceServer).GetAgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.query_broker.querybrokerpb.QueryBrokerService/GetAgentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBrokerServiceServer).GetAgentInfo(ctx, req.(*AgentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBrokerService_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBrokerServiceServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.query_broker.querybrokerpb.QueryBrokerService/ExecuteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBrokerServiceServer).ExecuteQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBrokerService_GetSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBrokerServiceServer).GetSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.query_broker.querybrokerpb.QueryBrokerService/GetSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBrokerServiceServer).GetSchemas(ctx, req.(*SchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryBrokerService_ReceiveAgentQueryResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentQueryResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryBrokerServiceServer).ReceiveAgentQueryResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.services.query_broker.querybrokerpb.QueryBrokerService/ReceiveAgentQueryResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryBrokerServiceServer).ReceiveAgentQueryResult(ctx, req.(*AgentQueryResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryBrokerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.vizier.services.query_broker.querybrokerpb.QueryBrokerService",
	HandlerType: (*QueryBrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentInfo",
			Handler:    _QueryBrokerService_GetAgentInfo_Handler,
		},
		{
			MethodName: "ExecuteQuery",
			Handler:    _QueryBrokerService_ExecuteQuery_Handler,
		},
		{
			MethodName: "GetSchemas",
			Handler:    _QueryBrokerService_GetSchemas_Handler,
		},
		{
			MethodName: "ReceiveAgentQueryResult",
			Handler:    _QueryBrokerService_ReceiveAgentQueryResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/vizier/services/query_broker/querybrokerpb/service.proto",
}

func (m *Schema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Schema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for iNdEx := len(m.Relations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaByAgent) > 0 {
		for iNdEx := len(m.SchemaByAgent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchemaByAgent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchemaResponse_SchemaByAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaResponse_SchemaByAgent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchemaResponse_SchemaByAgent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AgentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.CreateTimeNs != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.CreateTimeNs))
		i--
		dAtA[i] = 0x18
	}
	if m.LastHeartbeatNs != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.LastHeartbeatNs))
		i--
		dAtA[i] = 0x10
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostInfo != nil {
		{
			size, err := m.HostInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintService(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryStr) > 0 {
		i -= len(m.QueryStr)
		copy(dAtA[i:], m.QueryStr)
		i = encodeVarintService(dAtA, i, uint64(len(m.QueryStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryResult != nil {
		{
			size, err := m.QueryResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.QueryID != nil {
		{
			size, err := m.QueryID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentQueryResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentQueryResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentQueryResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentQueryResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentQueryResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentQueryResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VizierQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryID != nil {
		{
			size, err := m.QueryID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VizierQueryResponse_ResponseByAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierQueryResponse_ResponseByAgent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierQueryResponse_ResponseByAgent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Schema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchemaByAgent) > 0 {
		for _, e := range m.SchemaByAgent {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SchemaResponse_SchemaByAgent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *AgentStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.LastHeartbeatNs != 0 {
		n += 1 + sovService(uint64(m.LastHeartbeatNs))
	}
	if m.CreateTimeNs != 0 {
		n += 1 + sovService(uint64(m.CreateTimeNs))
	}
	if m.State != 0 {
		n += 1 + sovService(uint64(m.State))
	}
	return n
}

func (m *AgentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.HostInfo != nil {
		l = m.HostInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *HostInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.QueryResult != nil {
		l = m.QueryResult.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentQueryResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentQueryResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VizierQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *VizierQueryResponse_ResponseByAgent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Schema) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRelations := "[]*Relation{"
	for _, f := range this.Relations {
		repeatedStringForRelations += strings.Replace(fmt.Sprintf("%v", f), "Relation", "proto1.Relation", 1) + ","
	}
	repeatedStringForRelations += "}"
	s := strings.Join([]string{`&Schema{`,
		`Relations:` + repeatedStringForRelations + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SchemaResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSchemaByAgent := "[]*SchemaResponse_SchemaByAgent{"
	for _, f := range this.SchemaByAgent {
		repeatedStringForSchemaByAgent += strings.Replace(fmt.Sprintf("%v", f), "SchemaResponse_SchemaByAgent", "SchemaResponse_SchemaByAgent", 1) + ","
	}
	repeatedStringForSchemaByAgent += "}"
	s := strings.Join([]string{`&SchemaResponse{`,
		`SchemaByAgent:` + repeatedStringForSchemaByAgent + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaResponse_SchemaByAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaResponse_SchemaByAgent{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto2.UUID", 1) + `,`,
		`Schema:` + strings.Replace(this.Schema.String(), "Schema", "Schema", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfoRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInfo := "[]*AgentStatus{"
	for _, f := range this.Info {
		repeatedStringForInfo += strings.Replace(f.String(), "AgentStatus", "AgentStatus", 1) + ","
	}
	repeatedStringForInfo += "}"
	s := strings.Join([]string{`&AgentInfoResponse{`,
		`Info:` + repeatedStringForInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentStatus{`,
		`Info:` + strings.Replace(this.Info.String(), "AgentInfo", "AgentInfo", 1) + `,`,
		`LastHeartbeatNs:` + fmt.Sprintf("%v", this.LastHeartbeatNs) + `,`,
		`CreateTimeNs:` + fmt.Sprintf("%v", this.CreateTimeNs) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfo{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto2.UUID", 1) + `,`,
		`HostInfo:` + strings.Replace(this.HostInfo.String(), "HostInfo", "HostInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostInfo{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRequest{`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentQueryResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto3.Status", 1) + `,`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "proto2.UUID", 1) + `,`,
		`QueryResult:` + strings.Replace(fmt.Sprintf("%v", this.QueryResult), "QueryResult", "queryresultspb.QueryResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentQueryResultRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentQueryResultRequest{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto2.UUID", 1) + `,`,
		`Result:` + strings.Replace(this.Result.String(), "AgentQueryResponse", "AgentQueryResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentQueryResultResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentQueryResultResponse{`,
		`}`,
	}, "")
	return s
}
func (this *VizierQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResponses := "[]*VizierQueryResponse_ResponseByAgent{"
	for _, f := range this.Responses {
		repeatedStringForResponses += strings.Replace(fmt.Sprintf("%v", f), "VizierQueryResponse_ResponseByAgent", "VizierQueryResponse_ResponseByAgent", 1) + ","
	}
	repeatedStringForResponses += "}"
	s := strings.Join([]string{`&VizierQueryResponse{`,
		`Responses:` + repeatedStringForResponses + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto3.Status", 1) + `,`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "proto2.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierQueryResponse_ResponseByAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierQueryResponse_ResponseByAgent{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto2.UUID", 1) + `,`,
		`Response:` + strings.Replace(this.Response.String(), "AgentQueryResponse", "AgentQueryResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Schema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Schema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Schema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &proto1.Relation{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaByAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaByAgent = append(m.SchemaByAgent, &SchemaResponse_SchemaByAgent{})
			if err := m.SchemaByAgent[len(m.SchemaByAgent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaResponse_SchemaByAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaByAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaByAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto2.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &Schema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &AgentStatus{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AgentInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatNs", wireType)
			}
			m.LastHeartbeatNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimeNs", wireType)
			}
			m.CreateTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimeNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AgentState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto2.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostInfo == nil {
				m.HostInfo = &HostInfo{}
			}
			if err := m.HostInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto3.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &proto2.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryResult == nil {
				m.QueryResult = &queryresultspb.QueryResult{}
			}
			if err := m.QueryResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentQueryResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentQueryResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentQueryResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto2.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &AgentQueryResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentQueryResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentQueryResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentQueryResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &VizierQueryResponse_ResponseByAgent{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto3.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &proto2.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierQueryResponse_ResponseByAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseByAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseByAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto2.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &AgentQueryResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
