syntax = "proto3";

package pl.vizier.services.query_broker.querybrokerpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/carnot/queryresultspb/query_results.proto";
import "src/common/uuid/proto/uuid.proto";
import "src/common/base/proto/status.proto";
import "src/table_store/proto/schema.proto";
import "src/vizier/services/shared/agentpb/agent.proto";

option go_package = "pixielabs.ai/pixielabs/src/vizier/services/query_broker/querybrokerpb;querybrokerpb";

service QueryBrokerService {
  /**
   * These RPC calls are used by debug tools, etc, that connect to vizier.
   */

  // Returns information about registered agents.
  rpc GetAgentInfo(AgentInfoRequest) returns (AgentInfoResponse) {}
  // This is an incoming request to Vizier to execute queries.
  rpc ExecuteQuery(QueryRequest) returns (VizierQueryResponse) {}
  // This is an incoming request to Vizier for the schema available on each agent.
  rpc GetSchemas(SchemaRequest) returns (SchemaResponse) {}
  // This is an incoming request from the agents, containing results for a query.
  rpc ReceiveAgentQueryResult(AgentQueryResultRequest) returns (AgentQueryResultResponse) {}
}

// The schema information per agent.
message Schema {
  repeated pl.table_store.schemapb.Relation relations = 1;
}

// The schema request.
message SchemaRequest {}

// The schema response from Vizier.
message SchemaResponse {
  message SchemaByAgent {
    uuidpb.UUID agent_id      = 1 [
      (gogoproto.customname) = "AgentID"
    ];
    Schema schema = 2;
  }
  repeated SchemaByAgent schema_by_agent = 1;
}

message AgentInfoRequest {}

message AgentInfoResponse {
  // Contains AgentMetadata for each of the agents currently registered with Vizier.
  repeated AgentMetadata info = 1;
}

message AgentMetadata {
    pl.vizier.services.shared.agent.Agent agent  = 1;
    pl.vizier.services.shared.agent.AgentStatus status  = 2;
}

message QueryRequest {
  string query_str = 1;
  // TODO(zasgar): Add proto query.
}

// TODO(zasgar/michelle): We should change this after we add the compute nodes.
// For now, we plan to just return the QueryResponse from each agent on the message bus
// and have the broker merge the results together.
// AgentQueryResponse is returned for each execution of a query by the agent.
message AgentQueryResponse {
  pl.statuspb.Status status = 1;

  // The ID of the returned query.
  uuidpb.UUID query_id = 2 [
    (gogoproto.customname) = "QueryID"
  ];

  pl.carnot.queryresultspb.QueryResult query_result = 3;
}

// AgentQueryResultRequest is a request from the agent to the query broker containing the
// results from a query.
message AgentQueryResultRequest {
  uuidpb.UUID agent_id      = 1 [
    (gogoproto.customname) = "AgentID"
  ];
  AgentQueryResponse result = 2;
}

message AgentQueryResultResponse {}

// VizierQueryResponse is returned by Vizier in response to a query.
message VizierQueryResponse {
  message ResponseByAgent {
    uuidpb.UUID agent_id      = 1 [
      (gogoproto.customname) = "AgentID"
    ];

    AgentQueryResponse response = 2;
  }
  repeated ResponseByAgent responses = 1;
  // Status message carries information
  // about any potential failures, ie compiler error failures
  pl.statuspb.Status status = 2;
  // The id for the query
  uuidpb.UUID query_id = 3 [
    (gogoproto.customname) = "QueryID"
  ];
}
