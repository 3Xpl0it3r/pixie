// Code generated by MockGen. DO NOT EDIT.
// Source: pixielabs.ai/pixielabs/src/vizier/services/query_broker/controllers (interfaces: Compiler)

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	gomock "github.com/golang/mock/gomock"
	compilerpb "pixielabs.ai/pixielabs/src/carnot/compiler/compilerpb"
	proto "pixielabs.ai/pixielabs/src/table_store/proto"
	reflect "reflect"
)

// MockCompiler is a mock of Compiler interface
type MockCompiler struct {
	ctrl     *gomock.Controller
	recorder *MockCompilerMockRecorder
}

// MockCompilerMockRecorder is the mock recorder for MockCompiler
type MockCompilerMockRecorder struct {
	mock *MockCompiler
}

// NewMockCompiler creates a new mock instance
func NewMockCompiler(ctrl *gomock.Controller) *MockCompiler {
	mock := &MockCompiler{ctrl: ctrl}
	mock.recorder = &MockCompilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCompiler) EXPECT() *MockCompilerMockRecorder {
	return m.recorder
}

// Compile mocks base method
func (m *MockCompiler) Compile(arg0 *proto.Schema, arg1 string) (*compilerpb.CompilerResult, error) {
	ret := m.ctrl.Call(m, "Compile", arg0, arg1)
	ret0, _ := ret[0].(*compilerpb.CompilerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile
func (mr *MockCompilerMockRecorder) Compile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockCompiler)(nil).Compile), arg0, arg1)
}

// Free mocks base method
func (m *MockCompiler) Free() {
	m.ctrl.Call(m, "Free")
}

// Free indicates an expected call of Free
func (mr *MockCompilerMockRecorder) Free() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockCompiler)(nil).Free))
}
