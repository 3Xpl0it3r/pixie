// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
	distributedpb "pixielabs.ai/pixielabs/src/carnot/planner/distributedpb"
	plannerpb "pixielabs.ai/pixielabs/src/carnot/planner/plannerpb"
	planpb "pixielabs.ai/pixielabs/src/carnot/planpb"
	queryresultspb "pixielabs.ai/pixielabs/src/carnot/queryresultspb"
	querybrokerpb "pixielabs.ai/pixielabs/src/vizier/services/query_broker/querybrokerpb"
	reflect "reflect"
)

// MockPlanner is a mock of Planner interface
type MockPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerMockRecorder
}

// MockPlannerMockRecorder is the mock recorder for MockPlanner
type MockPlannerMockRecorder struct {
	mock *MockPlanner
}

// NewMockPlanner creates a new mock instance
func NewMockPlanner(ctrl *gomock.Controller) *MockPlanner {
	mock := &MockPlanner{ctrl: ctrl}
	mock.recorder = &MockPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlanner) EXPECT() *MockPlannerMockRecorder {
	return m.recorder
}

// Plan mocks base method
func (m *MockPlanner) Plan(planState *distributedpb.LogicalPlannerState, req *plannerpb.QueryRequest) (*distributedpb.LogicalPlannerResult, error) {
	ret := m.ctrl.Call(m, "Plan", planState, req)
	ret0, _ := ret[0].(*distributedpb.LogicalPlannerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Plan indicates an expected call of Plan
func (mr *MockPlannerMockRecorder) Plan(planState, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockPlanner)(nil).Plan), planState, req)
}

// Free mocks base method
func (m *MockPlanner) Free() {
	m.ctrl.Call(m, "Free")
}

// Free indicates an expected call of Free
func (mr *MockPlannerMockRecorder) Free() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockPlanner)(nil).Free))
}

// MockExecutor is a mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// ExecuteQuery mocks base method
func (m *MockExecutor) ExecuteQuery(planMap map[go_uuid.UUID]*planpb.Plan, analyze bool) error {
	ret := m.ctrl.Call(m, "ExecuteQuery", planMap, analyze)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteQuery indicates an expected call of ExecuteQuery
func (mr *MockExecutorMockRecorder) ExecuteQuery(planMap, analyze interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockExecutor)(nil).ExecuteQuery), planMap, analyze)
}

// AddQueryPlanToResult mocks base method
func (m *MockExecutor) AddQueryPlanToResult(arg0 *distributedpb.DistributedPlan, arg1 map[go_uuid.UUID]*planpb.Plan, arg2 *[]*queryresultspb.AgentExecutionStats) error {
	ret := m.ctrl.Call(m, "AddQueryPlanToResult", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQueryPlanToResult indicates an expected call of AddQueryPlanToResult
func (mr *MockExecutorMockRecorder) AddQueryPlanToResult(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQueryPlanToResult", reflect.TypeOf((*MockExecutor)(nil).AddQueryPlanToResult), arg0, arg1, arg2)
}

// WaitForCompletion mocks base method
func (m *MockExecutor) WaitForCompletion() (*queryresultspb.QueryResult, error) {
	ret := m.ctrl.Call(m, "WaitForCompletion")
	ret0, _ := ret[0].(*queryresultspb.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForCompletion indicates an expected call of WaitForCompletion
func (mr *MockExecutorMockRecorder) WaitForCompletion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletion", reflect.TypeOf((*MockExecutor)(nil).WaitForCompletion))
}

// AddResult mocks base method
func (m *MockExecutor) AddResult(res *querybrokerpb.AgentQueryResultRequest) {
	m.ctrl.Call(m, "AddResult", res)
}

// AddResult indicates an expected call of AddResult
func (mr *MockExecutorMockRecorder) AddResult(res interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResult", reflect.TypeOf((*MockExecutor)(nil).AddResult), res)
}

// GetQueryID mocks base method
func (m *MockExecutor) GetQueryID() go_uuid.UUID {
	ret := m.ctrl.Call(m, "GetQueryID")
	ret0, _ := ret[0].(go_uuid.UUID)
	return ret0
}

// GetQueryID indicates an expected call of GetQueryID
func (mr *MockExecutorMockRecorder) GetQueryID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryID", reflect.TypeOf((*MockExecutor)(nil).GetQueryID))
}
