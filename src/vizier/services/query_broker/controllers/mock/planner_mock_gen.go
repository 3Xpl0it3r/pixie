// Code generated by MockGen. DO NOT EDIT.
// Source: pixielabs.ai/pixielabs/src/vizier/services/query_broker/controllers (interfaces: Planner)

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	gomock "github.com/golang/mock/gomock"
	distributedpb "pixielabs.ai/pixielabs/src/carnot/compiler/distributedpb"
	reflect "reflect"
)

// MockPlanner is a mock of Planner interface
type MockPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerMockRecorder
}

// MockPlannerMockRecorder is the mock recorder for MockPlanner
type MockPlannerMockRecorder struct {
	mock *MockPlanner
}

// NewMockPlanner creates a new mock instance
func NewMockPlanner(ctrl *gomock.Controller) *MockPlanner {
	mock := &MockPlanner{ctrl: ctrl}
	mock.recorder = &MockPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlanner) EXPECT() *MockPlannerMockRecorder {
	return m.recorder
}

// Free mocks base method
func (m *MockPlanner) Free() {
	m.ctrl.Call(m, "Free")
}

// Free indicates an expected call of Free
func (mr *MockPlannerMockRecorder) Free() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockPlanner)(nil).Free))
}

// Plan mocks base method
func (m *MockPlanner) Plan(arg0 *distributedpb.LogicalPlannerState, arg1 string) (*distributedpb.LogicalPlannerResult, error) {
	ret := m.ctrl.Call(m, "Plan", arg0, arg1)
	ret0, _ := ret[0].(*distributedpb.LogicalPlannerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Plan indicates an expected call of Plan
func (mr *MockPlannerMockRecorder) Plan(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockPlanner)(nil).Plan), arg0, arg1)
}
