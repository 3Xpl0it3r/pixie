// Code generated by MockGen. DO NOT EDIT.
// Source: pixielabs.ai/pixielabs/src/vizier/proto (interfaces: VizierServiceClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	proto "pixielabs.ai/pixielabs/src/vizier/proto"
	reflect "reflect"
)

// MockVizierServiceClient is a mock of VizierServiceClient interface
type MockVizierServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVizierServiceClientMockRecorder
}

// MockVizierServiceClientMockRecorder is the mock recorder for MockVizierServiceClient
type MockVizierServiceClientMockRecorder struct {
	mock *MockVizierServiceClient
}

// NewMockVizierServiceClient creates a new mock instance
func NewMockVizierServiceClient(ctrl *gomock.Controller) *MockVizierServiceClient {
	mock := &MockVizierServiceClient{ctrl: ctrl}
	mock.recorder = &MockVizierServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierServiceClient) EXPECT() *MockVizierServiceClientMockRecorder {
	return m.recorder
}

// ExecuteQuery mocks base method
func (m *MockVizierServiceClient) ExecuteQuery(arg0 context.Context, arg1 *proto.QueryRequest, arg2 ...grpc.CallOption) (*proto.VizierQueryResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteQuery", varargs...)
	ret0, _ := ret[0].(*proto.VizierQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery
func (mr *MockVizierServiceClientMockRecorder) ExecuteQuery(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockVizierServiceClient)(nil).ExecuteQuery), varargs...)
}

// GetAgentInfo mocks base method
func (m *MockVizierServiceClient) GetAgentInfo(arg0 context.Context, arg1 *proto.AgentInfoRequest, arg2 ...grpc.CallOption) (*proto.AgentInfoResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentInfo", varargs...)
	ret0, _ := ret[0].(*proto.AgentInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentInfo indicates an expected call of GetAgentInfo
func (mr *MockVizierServiceClientMockRecorder) GetAgentInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockVizierServiceClient)(nil).GetAgentInfo), varargs...)
}

// GetSchemas mocks base method
func (m *MockVizierServiceClient) GetSchemas(arg0 context.Context, arg1 *proto.SchemaRequest, arg2 ...grpc.CallOption) (*proto.SchemaResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemas", varargs...)
	ret0, _ := ret[0].(*proto.SchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemas indicates an expected call of GetSchemas
func (mr *MockVizierServiceClientMockRecorder) GetSchemas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemas", reflect.TypeOf((*MockVizierServiceClient)(nil).GetSchemas), varargs...)
}

// ServeAgent mocks base method
func (m *MockVizierServiceClient) ServeAgent(arg0 context.Context, arg1 ...grpc.CallOption) (proto.VizierService_ServeAgentClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServeAgent", varargs...)
	ret0, _ := ret[0].(proto.VizierService_ServeAgentClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServeAgent indicates an expected call of ServeAgent
func (mr *MockVizierServiceClientMockRecorder) ServeAgent(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeAgent", reflect.TypeOf((*MockVizierServiceClient)(nil).ServeAgent), varargs...)
}
