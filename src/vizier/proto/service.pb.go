// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/proto/service.proto

package service // import "pixielabs.ai/pixielabs/src/vizier/proto"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import proto2 "pixielabs.ai/pixielabs/src/common/proto"
import proto3 "pixielabs.ai/pixielabs/src/shared/types/proto"
import proto1 "pixielabs.ai/pixielabs/src/utils/proto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AgentState int32

const (
	AGENT_STATE_UNKNOWN      AgentState = 0
	AGENT_STATE_HEALTHY      AgentState = 1
	AGENT_STATE_UNRESPONSIVE AgentState = 2
	AGENT_STATE_DISCONNECTED AgentState = 3
)

var AgentState_name = map[int32]string{
	0: "AGENT_STATE_UNKNOWN",
	1: "AGENT_STATE_HEALTHY",
	2: "AGENT_STATE_UNRESPONSIVE",
	3: "AGENT_STATE_DISCONNECTED",
}
var AgentState_value = map[string]int32{
	"AGENT_STATE_UNKNOWN":      0,
	"AGENT_STATE_HEALTHY":      1,
	"AGENT_STATE_UNRESPONSIVE": 2,
	"AGENT_STATE_DISCONNECTED": 3,
}

func (AgentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{0}
}

type Schema struct {
	Relations []*Relation `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (m *Schema) Reset()      { *m = Schema{} }
func (*Schema) ProtoMessage() {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{0}
}
func (m *Schema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(dst, src)
}
func (m *Schema) XXX_Size() int {
	return m.Size()
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

func (m *Schema) GetRelations() []*Relation {
	if m != nil {
		return m.Relations
	}
	return nil
}

type SchemaRequest struct {
}

func (m *SchemaRequest) Reset()      { *m = SchemaRequest{} }
func (*SchemaRequest) ProtoMessage() {}
func (*SchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{1}
}
func (m *SchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaRequest.Merge(dst, src)
}
func (m *SchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *SchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaRequest proto.InternalMessageInfo

type SchemaResponse struct {
	SchemaByAgent []*SchemaResponse_SchemaByAgent `protobuf:"bytes,1,rep,name=schema_by_agent,json=schemaByAgent,proto3" json:"schema_by_agent,omitempty"`
}

func (m *SchemaResponse) Reset()      { *m = SchemaResponse{} }
func (*SchemaResponse) ProtoMessage() {}
func (*SchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{2}
}
func (m *SchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaResponse.Merge(dst, src)
}
func (m *SchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *SchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaResponse proto.InternalMessageInfo

func (m *SchemaResponse) GetSchemaByAgent() []*SchemaResponse_SchemaByAgent {
	if m != nil {
		return m.SchemaByAgent
	}
	return nil
}

type SchemaResponse_SchemaByAgent struct {
	AgentID *proto1.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Schema  *Schema      `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *SchemaResponse_SchemaByAgent) Reset()      { *m = SchemaResponse_SchemaByAgent{} }
func (*SchemaResponse_SchemaByAgent) ProtoMessage() {}
func (*SchemaResponse_SchemaByAgent) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{2, 0}
}
func (m *SchemaResponse_SchemaByAgent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchemaResponse_SchemaByAgent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchemaResponse_SchemaByAgent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SchemaResponse_SchemaByAgent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaResponse_SchemaByAgent.Merge(dst, src)
}
func (m *SchemaResponse_SchemaByAgent) XXX_Size() int {
	return m.Size()
}
func (m *SchemaResponse_SchemaByAgent) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaResponse_SchemaByAgent.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaResponse_SchemaByAgent proto.InternalMessageInfo

func (m *SchemaResponse_SchemaByAgent) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *SchemaResponse_SchemaByAgent) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type AgentInfoRequest struct {
}

func (m *AgentInfoRequest) Reset()      { *m = AgentInfoRequest{} }
func (*AgentInfoRequest) ProtoMessage() {}
func (*AgentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{3}
}
func (m *AgentInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfoRequest.Merge(dst, src)
}
func (m *AgentInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfoRequest proto.InternalMessageInfo

type AgentInfoResponse struct {
	Info []*AgentStatus `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *AgentInfoResponse) Reset()      { *m = AgentInfoResponse{} }
func (*AgentInfoResponse) ProtoMessage() {}
func (*AgentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{4}
}
func (m *AgentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfoResponse.Merge(dst, src)
}
func (m *AgentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfoResponse proto.InternalMessageInfo

func (m *AgentInfoResponse) GetInfo() []*AgentStatus {
	if m != nil {
		return m.Info
	}
	return nil
}

type AgentStatus struct {
	Info            *AgentInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	LastHeartbeatNs int64      `protobuf:"varint,2,opt,name=last_heartbeat_ns,json=lastHeartbeatNs,proto3" json:"last_heartbeat_ns,omitempty"`
	State           AgentState `protobuf:"varint,3,opt,name=state,proto3,enum=pl.vizier.AgentState" json:"state,omitempty"`
}

func (m *AgentStatus) Reset()      { *m = AgentStatus{} }
func (*AgentStatus) ProtoMessage() {}
func (*AgentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{5}
}
func (m *AgentStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentStatus.Merge(dst, src)
}
func (m *AgentStatus) XXX_Size() int {
	return m.Size()
}
func (m *AgentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AgentStatus proto.InternalMessageInfo

func (m *AgentStatus) GetInfo() *AgentInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *AgentStatus) GetLastHeartbeatNs() int64 {
	if m != nil {
		return m.LastHeartbeatNs
	}
	return 0
}

func (m *AgentStatus) GetState() AgentState {
	if m != nil {
		return m.State
	}
	return AGENT_STATE_UNKNOWN
}

type AgentInfo struct {
	AgentID  *proto1.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	HostInfo *HostInfo    `protobuf:"bytes,2,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
}

func (m *AgentInfo) Reset()      { *m = AgentInfo{} }
func (*AgentInfo) ProtoMessage() {}
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{6}
}
func (m *AgentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfo.Merge(dst, src)
}
func (m *AgentInfo) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfo proto.InternalMessageInfo

func (m *AgentInfo) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *AgentInfo) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

type HostInfo struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *HostInfo) Reset()      { *m = HostInfo{} }
func (*HostInfo) ProtoMessage() {}
func (*HostInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{7}
}
func (m *HostInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HostInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostInfo.Merge(dst, src)
}
func (m *HostInfo) XXX_Size() int {
	return m.Size()
}
func (m *HostInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HostInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HostInfo proto.InternalMessageInfo

func (m *HostInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type AgentToVizierMessage struct {
	// Types that are valid to be assigned to Msg:
	//	*AgentToVizierMessage_RegisterRequest
	//	*AgentToVizierMessage_QueryResponse
	//	*AgentToVizierMessage_Heartbeat
	Msg isAgentToVizierMessage_Msg `protobuf_oneof:"msg"`
}

func (m *AgentToVizierMessage) Reset()      { *m = AgentToVizierMessage{} }
func (*AgentToVizierMessage) ProtoMessage() {}
func (*AgentToVizierMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{8}
}
func (m *AgentToVizierMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentToVizierMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentToVizierMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentToVizierMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentToVizierMessage.Merge(dst, src)
}
func (m *AgentToVizierMessage) XXX_Size() int {
	return m.Size()
}
func (m *AgentToVizierMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentToVizierMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AgentToVizierMessage proto.InternalMessageInfo

type isAgentToVizierMessage_Msg interface {
	isAgentToVizierMessage_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AgentToVizierMessage_RegisterRequest struct {
	RegisterRequest *RegisterAgentRequest `protobuf:"bytes,1,opt,name=register_request,json=registerRequest,proto3,oneof"`
}
type AgentToVizierMessage_QueryResponse struct {
	QueryResponse *AgentQueryResponse `protobuf:"bytes,2,opt,name=query_response,json=queryResponse,proto3,oneof"`
}
type AgentToVizierMessage_Heartbeat struct {
	Heartbeat *HeartBeat `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof"`
}

func (*AgentToVizierMessage_RegisterRequest) isAgentToVizierMessage_Msg() {}
func (*AgentToVizierMessage_QueryResponse) isAgentToVizierMessage_Msg()   {}
func (*AgentToVizierMessage_Heartbeat) isAgentToVizierMessage_Msg()       {}

func (m *AgentToVizierMessage) GetMsg() isAgentToVizierMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *AgentToVizierMessage) GetRegisterRequest() *RegisterAgentRequest {
	if x, ok := m.GetMsg().(*AgentToVizierMessage_RegisterRequest); ok {
		return x.RegisterRequest
	}
	return nil
}

func (m *AgentToVizierMessage) GetQueryResponse() *AgentQueryResponse {
	if x, ok := m.GetMsg().(*AgentToVizierMessage_QueryResponse); ok {
		return x.QueryResponse
	}
	return nil
}

func (m *AgentToVizierMessage) GetHeartbeat() *HeartBeat {
	if x, ok := m.GetMsg().(*AgentToVizierMessage_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AgentToVizierMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AgentToVizierMessage_OneofMarshaler, _AgentToVizierMessage_OneofUnmarshaler, _AgentToVizierMessage_OneofSizer, []interface{}{
		(*AgentToVizierMessage_RegisterRequest)(nil),
		(*AgentToVizierMessage_QueryResponse)(nil),
		(*AgentToVizierMessage_Heartbeat)(nil),
	}
}

func _AgentToVizierMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AgentToVizierMessage)
	// msg
	switch x := m.Msg.(type) {
	case *AgentToVizierMessage_RegisterRequest:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterRequest); err != nil {
			return err
		}
	case *AgentToVizierMessage_QueryResponse:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueryResponse); err != nil {
			return err
		}
	case *AgentToVizierMessage_Heartbeat:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Heartbeat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AgentToVizierMessage.Msg has unexpected type %T", x)
	}
	return nil
}

func _AgentToVizierMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AgentToVizierMessage)
	switch tag {
	case 1: // msg.register_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterAgentRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &AgentToVizierMessage_RegisterRequest{msg}
		return true, err
	case 2: // msg.query_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AgentQueryResponse)
		err := b.DecodeMessage(msg)
		m.Msg = &AgentToVizierMessage_QueryResponse{msg}
		return true, err
	case 3: // msg.heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeartBeat)
		err := b.DecodeMessage(msg)
		m.Msg = &AgentToVizierMessage_Heartbeat{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AgentToVizierMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AgentToVizierMessage)
	// msg
	switch x := m.Msg.(type) {
	case *AgentToVizierMessage_RegisterRequest:
		s := proto.Size(x.RegisterRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AgentToVizierMessage_QueryResponse:
		s := proto.Size(x.QueryResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AgentToVizierMessage_Heartbeat:
		s := proto.Size(x.Heartbeat)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VizierToAgentMessage struct {
	// Types that are valid to be assigned to Msg:
	//	*VizierToAgentMessage_AgentResponse
	//	*VizierToAgentMessage_QueryRequest
	//	*VizierToAgentMessage_HeartBeatAck
	Msg isVizierToAgentMessage_Msg `protobuf_oneof:"msg"`
}

func (m *VizierToAgentMessage) Reset()      { *m = VizierToAgentMessage{} }
func (*VizierToAgentMessage) ProtoMessage() {}
func (*VizierToAgentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{9}
}
func (m *VizierToAgentMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierToAgentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierToAgentMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VizierToAgentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierToAgentMessage.Merge(dst, src)
}
func (m *VizierToAgentMessage) XXX_Size() int {
	return m.Size()
}
func (m *VizierToAgentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierToAgentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VizierToAgentMessage proto.InternalMessageInfo

type isVizierToAgentMessage_Msg interface {
	isVizierToAgentMessage_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VizierToAgentMessage_AgentResponse struct {
	AgentResponse *RegisterAgentResponse `protobuf:"bytes,1,opt,name=agent_response,json=agentResponse,proto3,oneof"`
}
type VizierToAgentMessage_QueryRequest struct {
	QueryRequest *QueryRequest `protobuf:"bytes,2,opt,name=query_request,json=queryRequest,proto3,oneof"`
}
type VizierToAgentMessage_HeartBeatAck struct {
	HeartBeatAck *HeartBeatAck `protobuf:"bytes,3,opt,name=heart_beat_ack,json=heartBeatAck,proto3,oneof"`
}

func (*VizierToAgentMessage_AgentResponse) isVizierToAgentMessage_Msg() {}
func (*VizierToAgentMessage_QueryRequest) isVizierToAgentMessage_Msg()  {}
func (*VizierToAgentMessage_HeartBeatAck) isVizierToAgentMessage_Msg()  {}

func (m *VizierToAgentMessage) GetMsg() isVizierToAgentMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *VizierToAgentMessage) GetAgentResponse() *RegisterAgentResponse {
	if x, ok := m.GetMsg().(*VizierToAgentMessage_AgentResponse); ok {
		return x.AgentResponse
	}
	return nil
}

func (m *VizierToAgentMessage) GetQueryRequest() *QueryRequest {
	if x, ok := m.GetMsg().(*VizierToAgentMessage_QueryRequest); ok {
		return x.QueryRequest
	}
	return nil
}

func (m *VizierToAgentMessage) GetHeartBeatAck() *HeartBeatAck {
	if x, ok := m.GetMsg().(*VizierToAgentMessage_HeartBeatAck); ok {
		return x.HeartBeatAck
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VizierToAgentMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VizierToAgentMessage_OneofMarshaler, _VizierToAgentMessage_OneofUnmarshaler, _VizierToAgentMessage_OneofSizer, []interface{}{
		(*VizierToAgentMessage_AgentResponse)(nil),
		(*VizierToAgentMessage_QueryRequest)(nil),
		(*VizierToAgentMessage_HeartBeatAck)(nil),
	}
}

func _VizierToAgentMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VizierToAgentMessage)
	// msg
	switch x := m.Msg.(type) {
	case *VizierToAgentMessage_AgentResponse:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AgentResponse); err != nil {
			return err
		}
	case *VizierToAgentMessage_QueryRequest:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueryRequest); err != nil {
			return err
		}
	case *VizierToAgentMessage_HeartBeatAck:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeartBeatAck); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VizierToAgentMessage.Msg has unexpected type %T", x)
	}
	return nil
}

func _VizierToAgentMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VizierToAgentMessage)
	switch tag {
	case 1: // msg.agent_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterAgentResponse)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierToAgentMessage_AgentResponse{msg}
		return true, err
	case 2: // msg.query_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierToAgentMessage_QueryRequest{msg}
		return true, err
	case 3: // msg.heart_beat_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeartBeatAck)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierToAgentMessage_HeartBeatAck{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VizierToAgentMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VizierToAgentMessage)
	// msg
	switch x := m.Msg.(type) {
	case *VizierToAgentMessage_AgentResponse:
		s := proto.Size(x.AgentResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierToAgentMessage_QueryRequest:
		s := proto.Size(x.QueryRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierToAgentMessage_HeartBeatAck:
		s := proto.Size(x.HeartBeatAck)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HeartBeat struct {
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *HeartBeat) Reset()      { *m = HeartBeat{} }
func (*HeartBeat) ProtoMessage() {}
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{10}
}
func (m *HeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeat.Merge(dst, src)
}
func (m *HeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeat proto.InternalMessageInfo

func (m *HeartBeat) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type HeartBeatAck struct {
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *HeartBeatAck) Reset()      { *m = HeartBeatAck{} }
func (*HeartBeatAck) ProtoMessage() {}
func (*HeartBeatAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{11}
}
func (m *HeartBeatAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeatAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeatAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HeartBeatAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatAck.Merge(dst, src)
}
func (m *HeartBeatAck) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeatAck) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatAck.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatAck proto.InternalMessageInfo

func (m *HeartBeatAck) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type RegisterAgentRequest struct {
	AgentID   *proto1.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentInfo *AgentInfo   `protobuf:"bytes,2,opt,name=agent_info,json=agentInfo,proto3" json:"agent_info,omitempty"`
}

func (m *RegisterAgentRequest) Reset()      { *m = RegisterAgentRequest{} }
func (*RegisterAgentRequest) ProtoMessage() {}
func (*RegisterAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{12}
}
func (m *RegisterAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentRequest.Merge(dst, src)
}
func (m *RegisterAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentRequest proto.InternalMessageInfo

func (m *RegisterAgentRequest) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *RegisterAgentRequest) GetAgentInfo() *AgentInfo {
	if m != nil {
		return m.AgentInfo
	}
	return nil
}

type RegisterAgentResponse struct {
	Status *proto2.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *RegisterAgentResponse) Reset()      { *m = RegisterAgentResponse{} }
func (*RegisterAgentResponse) ProtoMessage() {}
func (*RegisterAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{13}
}
func (m *RegisterAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentResponse.Merge(dst, src)
}
func (m *RegisterAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentResponse proto.InternalMessageInfo

func (m *RegisterAgentResponse) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type QueryRequest struct {
	QueryID  *proto1.UUID `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryStr string       `protobuf:"bytes,2,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
}

func (m *QueryRequest) Reset()      { *m = QueryRequest{} }
func (*QueryRequest) ProtoMessage() {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{14}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(dst, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetQueryID() *proto1.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

func (m *QueryRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

type BooleanColumn struct {
	Data []bool `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *BooleanColumn) Reset()      { *m = BooleanColumn{} }
func (*BooleanColumn) ProtoMessage() {}
func (*BooleanColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{15}
}
func (m *BooleanColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BooleanColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BooleanColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BooleanColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanColumn.Merge(dst, src)
}
func (m *BooleanColumn) XXX_Size() int {
	return m.Size()
}
func (m *BooleanColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanColumn.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanColumn proto.InternalMessageInfo

func (m *BooleanColumn) GetData() []bool {
	if m != nil {
		return m.Data
	}
	return nil
}

type Int64Column struct {
	Data []int64 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Int64Column) Reset()      { *m = Int64Column{} }
func (*Int64Column) ProtoMessage() {}
func (*Int64Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{16}
}
func (m *Int64Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Int64Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Int64Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Int64Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int64Column.Merge(dst, src)
}
func (m *Int64Column) XXX_Size() int {
	return m.Size()
}
func (m *Int64Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Int64Column.DiscardUnknown(m)
}

var xxx_messageInfo_Int64Column proto.InternalMessageInfo

func (m *Int64Column) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Float64Column struct {
	Data []float64 `protobuf:"fixed64,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Float64Column) Reset()      { *m = Float64Column{} }
func (*Float64Column) ProtoMessage() {}
func (*Float64Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{17}
}
func (m *Float64Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Float64Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Float64Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Float64Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Float64Column.Merge(dst, src)
}
func (m *Float64Column) XXX_Size() int {
	return m.Size()
}
func (m *Float64Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Float64Column.DiscardUnknown(m)
}

var xxx_messageInfo_Float64Column proto.InternalMessageInfo

func (m *Float64Column) GetData() []float64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Time64NSColumn struct {
	Data []int64 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Time64NSColumn) Reset()      { *m = Time64NSColumn{} }
func (*Time64NSColumn) ProtoMessage() {}
func (*Time64NSColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{18}
}
func (m *Time64NSColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Time64NSColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Time64NSColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Time64NSColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time64NSColumn.Merge(dst, src)
}
func (m *Time64NSColumn) XXX_Size() int {
	return m.Size()
}
func (m *Time64NSColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_Time64NSColumn.DiscardUnknown(m)
}

var xxx_messageInfo_Time64NSColumn proto.InternalMessageInfo

func (m *Time64NSColumn) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type StringColumn struct {
	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *StringColumn) Reset()      { *m = StringColumn{} }
func (*StringColumn) ProtoMessage() {}
func (*StringColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{19}
}
func (m *StringColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StringColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringColumn.Merge(dst, src)
}
func (m *StringColumn) XXX_Size() int {
	return m.Size()
}
func (m *StringColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_StringColumn.DiscardUnknown(m)
}

var xxx_messageInfo_StringColumn proto.InternalMessageInfo

func (m *StringColumn) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type Column struct {
	// Types that are valid to be assigned to ColData:
	//	*Column_BooleanData
	//	*Column_Int64Data
	//	*Column_Time64NsData
	//	*Column_Float64Data
	//	*Column_StringData
	ColData isColumn_ColData `protobuf_oneof:"col_data"`
}

func (m *Column) Reset()      { *m = Column{} }
func (*Column) ProtoMessage() {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{20}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(dst, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

type isColumn_ColData interface {
	isColumn_ColData()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Column_BooleanData struct {
	BooleanData *BooleanColumn `protobuf:"bytes,1,opt,name=boolean_data,json=booleanData,proto3,oneof"`
}
type Column_Int64Data struct {
	Int64Data *Int64Column `protobuf:"bytes,2,opt,name=int64_data,json=int64Data,proto3,oneof"`
}
type Column_Time64NsData struct {
	Time64NsData *Time64NSColumn `protobuf:"bytes,3,opt,name=time64ns_data,json=time64nsData,proto3,oneof"`
}
type Column_Float64Data struct {
	Float64Data *Float64Column `protobuf:"bytes,4,opt,name=float64_data,json=float64Data,proto3,oneof"`
}
type Column_StringData struct {
	StringData *StringColumn `protobuf:"bytes,5,opt,name=string_data,json=stringData,proto3,oneof"`
}

func (*Column_BooleanData) isColumn_ColData()  {}
func (*Column_Int64Data) isColumn_ColData()    {}
func (*Column_Time64NsData) isColumn_ColData() {}
func (*Column_Float64Data) isColumn_ColData()  {}
func (*Column_StringData) isColumn_ColData()   {}

func (m *Column) GetColData() isColumn_ColData {
	if m != nil {
		return m.ColData
	}
	return nil
}

func (m *Column) GetBooleanData() *BooleanColumn {
	if x, ok := m.GetColData().(*Column_BooleanData); ok {
		return x.BooleanData
	}
	return nil
}

func (m *Column) GetInt64Data() *Int64Column {
	if x, ok := m.GetColData().(*Column_Int64Data); ok {
		return x.Int64Data
	}
	return nil
}

func (m *Column) GetTime64NsData() *Time64NSColumn {
	if x, ok := m.GetColData().(*Column_Time64NsData); ok {
		return x.Time64NsData
	}
	return nil
}

func (m *Column) GetFloat64Data() *Float64Column {
	if x, ok := m.GetColData().(*Column_Float64Data); ok {
		return x.Float64Data
	}
	return nil
}

func (m *Column) GetStringData() *StringColumn {
	if x, ok := m.GetColData().(*Column_StringData); ok {
		return x.StringData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Column) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Column_OneofMarshaler, _Column_OneofUnmarshaler, _Column_OneofSizer, []interface{}{
		(*Column_BooleanData)(nil),
		(*Column_Int64Data)(nil),
		(*Column_Time64NsData)(nil),
		(*Column_Float64Data)(nil),
		(*Column_StringData)(nil),
	}
}

func _Column_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Column)
	// col_data
	switch x := m.ColData.(type) {
	case *Column_BooleanData:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BooleanData); err != nil {
			return err
		}
	case *Column_Int64Data:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64Data); err != nil {
			return err
		}
	case *Column_Time64NsData:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time64NsData); err != nil {
			return err
		}
	case *Column_Float64Data:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Float64Data); err != nil {
			return err
		}
	case *Column_StringData:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringData); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Column.ColData has unexpected type %T", x)
	}
	return nil
}

func _Column_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Column)
	switch tag {
	case 1: // col_data.boolean_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BooleanColumn)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_BooleanData{msg}
		return true, err
	case 2: // col_data.int64_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64Column)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_Int64Data{msg}
		return true, err
	case 3: // col_data.time64ns_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time64NSColumn)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_Time64NsData{msg}
		return true, err
	case 4: // col_data.float64_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Float64Column)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_Float64Data{msg}
		return true, err
	case 5: // col_data.string_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringColumn)
		err := b.DecodeMessage(msg)
		m.ColData = &Column_StringData{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Column_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Column)
	// col_data
	switch x := m.ColData.(type) {
	case *Column_BooleanData:
		s := proto.Size(x.BooleanData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Column_Int64Data:
		s := proto.Size(x.Int64Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Column_Time64NsData:
		s := proto.Size(x.Time64NsData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Column_Float64Data:
		s := proto.Size(x.Float64Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Column_StringData:
		s := proto.Size(x.StringData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RowBatchData struct {
	Data []byte    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Cols []*Column `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty"`
}

func (m *RowBatchData) Reset()      { *m = RowBatchData{} }
func (*RowBatchData) ProtoMessage() {}
func (*RowBatchData) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{21}
}
func (m *RowBatchData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowBatchData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowBatchData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RowBatchData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowBatchData.Merge(dst, src)
}
func (m *RowBatchData) XXX_Size() int {
	return m.Size()
}
func (m *RowBatchData) XXX_DiscardUnknown() {
	xxx_messageInfo_RowBatchData.DiscardUnknown(m)
}

var xxx_messageInfo_RowBatchData proto.InternalMessageInfo

func (m *RowBatchData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RowBatchData) GetCols() []*Column {
	if m != nil {
		return m.Cols
	}
	return nil
}

type Relation struct {
	Name    string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Columns []*Relation_ColumnInfo `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *Relation) Reset()      { *m = Relation{} }
func (*Relation) ProtoMessage() {}
func (*Relation) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{22}
}
func (m *Relation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Relation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation.Merge(dst, src)
}
func (m *Relation) XXX_Size() int {
	return m.Size()
}
func (m *Relation) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation.DiscardUnknown(m)
}

var xxx_messageInfo_Relation proto.InternalMessageInfo

func (m *Relation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Relation) GetColumns() []*Relation_ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

type Relation_ColumnInfo struct {
	ColumnName string          `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnType proto3.DataType `protobuf:"varint,2,opt,name=column_type,json=columnType,proto3,enum=pl.types.DataType" json:"column_type,omitempty"`
}

func (m *Relation_ColumnInfo) Reset()      { *m = Relation_ColumnInfo{} }
func (*Relation_ColumnInfo) ProtoMessage() {}
func (*Relation_ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{22, 0}
}
func (m *Relation_ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation_ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Relation_ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation_ColumnInfo.Merge(dst, src)
}
func (m *Relation_ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *Relation_ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Relation_ColumnInfo proto.InternalMessageInfo

func (m *Relation_ColumnInfo) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *Relation_ColumnInfo) GetColumnType() proto3.DataType {
	if m != nil {
		return m.ColumnType
	}
	return proto3.DATA_TYPE_UNKNOWN
}

type Table struct {
	Relation *Relation       `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
	Data     []*RowBatchData `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *Table) Reset()      { *m = Table{} }
func (*Table) ProtoMessage() {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{23}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(dst, src)
}
func (m *Table) XXX_Size() int {
	return m.Size()
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

func (m *Table) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

func (m *Table) GetData() []*RowBatchData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryTimingInfo struct {
	ExecutionTimeNs   int64 `protobuf:"varint,1,opt,name=execution_time_ns,json=executionTimeNs,proto3" json:"execution_time_ns,omitempty"`
	CompilationTimeNs int64 `protobuf:"varint,2,opt,name=compilation_time_ns,json=compilationTimeNs,proto3" json:"compilation_time_ns,omitempty"`
}

func (m *QueryTimingInfo) Reset()      { *m = QueryTimingInfo{} }
func (*QueryTimingInfo) ProtoMessage() {}
func (*QueryTimingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{24}
}
func (m *QueryTimingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTimingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTimingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryTimingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTimingInfo.Merge(dst, src)
}
func (m *QueryTimingInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryTimingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTimingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTimingInfo proto.InternalMessageInfo

func (m *QueryTimingInfo) GetExecutionTimeNs() int64 {
	if m != nil {
		return m.ExecutionTimeNs
	}
	return 0
}

func (m *QueryTimingInfo) GetCompilationTimeNs() int64 {
	if m != nil {
		return m.CompilationTimeNs
	}
	return 0
}

type QueryExecutionStats struct {
	Timing           *QueryTimingInfo `protobuf:"bytes,1,opt,name=timing,proto3" json:"timing,omitempty"`
	BytesProcessed   int64            `protobuf:"varint,2,opt,name=bytes_processed,json=bytesProcessed,proto3" json:"bytes_processed,omitempty"`
	RecordsProcessed int64            `protobuf:"varint,3,opt,name=records_processed,json=recordsProcessed,proto3" json:"records_processed,omitempty"`
}

func (m *QueryExecutionStats) Reset()      { *m = QueryExecutionStats{} }
func (*QueryExecutionStats) ProtoMessage() {}
func (*QueryExecutionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{25}
}
func (m *QueryExecutionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutionStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryExecutionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutionStats.Merge(dst, src)
}
func (m *QueryExecutionStats) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutionStats.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutionStats proto.InternalMessageInfo

func (m *QueryExecutionStats) GetTiming() *QueryTimingInfo {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (m *QueryExecutionStats) GetBytesProcessed() int64 {
	if m != nil {
		return m.BytesProcessed
	}
	return 0
}

func (m *QueryExecutionStats) GetRecordsProcessed() int64 {
	if m != nil {
		return m.RecordsProcessed
	}
	return 0
}

type AgentQueryResponse struct {
	Status  *proto2.Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	QueryID *proto1.UUID         `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Stats   *QueryExecutionStats `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
	Tables  []*Table             `protobuf:"bytes,4,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (m *AgentQueryResponse) Reset()      { *m = AgentQueryResponse{} }
func (*AgentQueryResponse) ProtoMessage() {}
func (*AgentQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{26}
}
func (m *AgentQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentQueryResponse.Merge(dst, src)
}
func (m *AgentQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentQueryResponse proto.InternalMessageInfo

func (m *AgentQueryResponse) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AgentQueryResponse) GetQueryID() *proto1.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

func (m *AgentQueryResponse) GetStats() *QueryExecutionStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *AgentQueryResponse) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

type VizierQueryResponse struct {
	Responses []*VizierQueryResponse_ResponseByAgent `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (m *VizierQueryResponse) Reset()      { *m = VizierQueryResponse{} }
func (*VizierQueryResponse) ProtoMessage() {}
func (*VizierQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{27}
}
func (m *VizierQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VizierQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierQueryResponse.Merge(dst, src)
}
func (m *VizierQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *VizierQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VizierQueryResponse proto.InternalMessageInfo

func (m *VizierQueryResponse) GetResponses() []*VizierQueryResponse_ResponseByAgent {
	if m != nil {
		return m.Responses
	}
	return nil
}

type VizierQueryResponse_ResponseByAgent struct {
	AgentID  *proto1.UUID        `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Response *AgentQueryResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *VizierQueryResponse_ResponseByAgent) Reset()      { *m = VizierQueryResponse_ResponseByAgent{} }
func (*VizierQueryResponse_ResponseByAgent) ProtoMessage() {}
func (*VizierQueryResponse_ResponseByAgent) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_a569b0193347fe5e, []int{27, 0}
}
func (m *VizierQueryResponse_ResponseByAgent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierQueryResponse_ResponseByAgent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierQueryResponse_ResponseByAgent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VizierQueryResponse_ResponseByAgent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierQueryResponse_ResponseByAgent.Merge(dst, src)
}
func (m *VizierQueryResponse_ResponseByAgent) XXX_Size() int {
	return m.Size()
}
func (m *VizierQueryResponse_ResponseByAgent) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierQueryResponse_ResponseByAgent.DiscardUnknown(m)
}

var xxx_messageInfo_VizierQueryResponse_ResponseByAgent proto.InternalMessageInfo

func (m *VizierQueryResponse_ResponseByAgent) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *VizierQueryResponse_ResponseByAgent) GetResponse() *AgentQueryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*Schema)(nil), "pl.vizier.Schema")
	proto.RegisterType((*SchemaRequest)(nil), "pl.vizier.SchemaRequest")
	proto.RegisterType((*SchemaResponse)(nil), "pl.vizier.SchemaResponse")
	proto.RegisterType((*SchemaResponse_SchemaByAgent)(nil), "pl.vizier.SchemaResponse.SchemaByAgent")
	proto.RegisterType((*AgentInfoRequest)(nil), "pl.vizier.AgentInfoRequest")
	proto.RegisterType((*AgentInfoResponse)(nil), "pl.vizier.AgentInfoResponse")
	proto.RegisterType((*AgentStatus)(nil), "pl.vizier.AgentStatus")
	proto.RegisterType((*AgentInfo)(nil), "pl.vizier.AgentInfo")
	proto.RegisterType((*HostInfo)(nil), "pl.vizier.HostInfo")
	proto.RegisterType((*AgentToVizierMessage)(nil), "pl.vizier.AgentToVizierMessage")
	proto.RegisterType((*VizierToAgentMessage)(nil), "pl.vizier.VizierToAgentMessage")
	proto.RegisterType((*HeartBeat)(nil), "pl.vizier.HeartBeat")
	proto.RegisterType((*HeartBeatAck)(nil), "pl.vizier.HeartBeatAck")
	proto.RegisterType((*RegisterAgentRequest)(nil), "pl.vizier.RegisterAgentRequest")
	proto.RegisterType((*RegisterAgentResponse)(nil), "pl.vizier.RegisterAgentResponse")
	proto.RegisterType((*QueryRequest)(nil), "pl.vizier.QueryRequest")
	proto.RegisterType((*BooleanColumn)(nil), "pl.vizier.BooleanColumn")
	proto.RegisterType((*Int64Column)(nil), "pl.vizier.Int64Column")
	proto.RegisterType((*Float64Column)(nil), "pl.vizier.Float64Column")
	proto.RegisterType((*Time64NSColumn)(nil), "pl.vizier.Time64NSColumn")
	proto.RegisterType((*StringColumn)(nil), "pl.vizier.StringColumn")
	proto.RegisterType((*Column)(nil), "pl.vizier.Column")
	proto.RegisterType((*RowBatchData)(nil), "pl.vizier.RowBatchData")
	proto.RegisterType((*Relation)(nil), "pl.vizier.Relation")
	proto.RegisterType((*Relation_ColumnInfo)(nil), "pl.vizier.Relation.ColumnInfo")
	proto.RegisterType((*Table)(nil), "pl.vizier.Table")
	proto.RegisterType((*QueryTimingInfo)(nil), "pl.vizier.QueryTimingInfo")
	proto.RegisterType((*QueryExecutionStats)(nil), "pl.vizier.QueryExecutionStats")
	proto.RegisterType((*AgentQueryResponse)(nil), "pl.vizier.AgentQueryResponse")
	proto.RegisterType((*VizierQueryResponse)(nil), "pl.vizier.VizierQueryResponse")
	proto.RegisterType((*VizierQueryResponse_ResponseByAgent)(nil), "pl.vizier.VizierQueryResponse.ResponseByAgent")
	proto.RegisterEnum("pl.vizier.AgentState", AgentState_name, AgentState_value)
}
func (x AgentState) String() string {
	s, ok := AgentState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Schema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schema)
	if !ok {
		that2, ok := that.(Schema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Relations) != len(that1.Relations) {
		return false
	}
	for i := range this.Relations {
		if !this.Relations[i].Equal(that1.Relations[i]) {
			return false
		}
	}
	return true
}
func (this *SchemaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaRequest)
	if !ok {
		that2, ok := that.(SchemaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SchemaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaResponse)
	if !ok {
		that2, ok := that.(SchemaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SchemaByAgent) != len(that1.SchemaByAgent) {
		return false
	}
	for i := range this.SchemaByAgent {
		if !this.SchemaByAgent[i].Equal(that1.SchemaByAgent[i]) {
			return false
		}
	}
	return true
}
func (this *SchemaResponse_SchemaByAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchemaResponse_SchemaByAgent)
	if !ok {
		that2, ok := that.(SchemaResponse_SchemaByAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	return true
}
func (this *AgentInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfoRequest)
	if !ok {
		that2, ok := that.(AgentInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AgentInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfoResponse)
	if !ok {
		that2, ok := that.(AgentInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *AgentStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentStatus)
	if !ok {
		that2, ok := that.(AgentStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.LastHeartbeatNs != that1.LastHeartbeatNs {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *AgentInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfo)
	if !ok {
		that2, ok := that.(AgentInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.HostInfo.Equal(that1.HostInfo) {
		return false
	}
	return true
}
func (this *HostInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostInfo)
	if !ok {
		that2, ok := that.(HostInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}
func (this *AgentToVizierMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentToVizierMessage)
	if !ok {
		that2, ok := that.(AgentToVizierMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *AgentToVizierMessage_RegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentToVizierMessage_RegisterRequest)
	if !ok {
		that2, ok := that.(AgentToVizierMessage_RegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegisterRequest.Equal(that1.RegisterRequest) {
		return false
	}
	return true
}
func (this *AgentToVizierMessage_QueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentToVizierMessage_QueryResponse)
	if !ok {
		that2, ok := that.(AgentToVizierMessage_QueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryResponse.Equal(that1.QueryResponse) {
		return false
	}
	return true
}
func (this *AgentToVizierMessage_Heartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentToVizierMessage_Heartbeat)
	if !ok {
		that2, ok := that.(AgentToVizierMessage_Heartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Heartbeat.Equal(that1.Heartbeat) {
		return false
	}
	return true
}
func (this *VizierToAgentMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierToAgentMessage)
	if !ok {
		that2, ok := that.(VizierToAgentMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *VizierToAgentMessage_AgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierToAgentMessage_AgentResponse)
	if !ok {
		that2, ok := that.(VizierToAgentMessage_AgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentResponse.Equal(that1.AgentResponse) {
		return false
	}
	return true
}
func (this *VizierToAgentMessage_QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierToAgentMessage_QueryRequest)
	if !ok {
		that2, ok := that.(VizierToAgentMessage_QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryRequest.Equal(that1.QueryRequest) {
		return false
	}
	return true
}
func (this *VizierToAgentMessage_HeartBeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierToAgentMessage_HeartBeatAck)
	if !ok {
		that2, ok := that.(VizierToAgentMessage_HeartBeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeartBeatAck.Equal(that1.HeartBeatAck) {
		return false
	}
	return true
}
func (this *HeartBeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeartBeat)
	if !ok {
		that2, ok := that.(HeartBeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *HeartBeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeartBeatAck)
	if !ok {
		that2, ok := that.(HeartBeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *RegisterAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentRequest)
	if !ok {
		that2, ok := that.(RegisterAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.AgentInfo.Equal(that1.AgentInfo) {
		return false
	}
	return true
}
func (this *RegisterAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentResponse)
	if !ok {
		that2, ok := that.(RegisterAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest)
	if !ok {
		that2, ok := that.(QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	return true
}
func (this *BooleanColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BooleanColumn)
	if !ok {
		that2, ok := that.(BooleanColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Int64Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Int64Column)
	if !ok {
		that2, ok := that.(Int64Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Float64Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Float64Column)
	if !ok {
		that2, ok := that.(Float64Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Time64NSColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Time64NSColumn)
	if !ok {
		that2, ok := that.(Time64NSColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *StringColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringColumn)
	if !ok {
		that2, ok := that.(StringColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column)
	if !ok {
		that2, ok := that.(Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ColData == nil {
		if this.ColData != nil {
			return false
		}
	} else if this.ColData == nil {
		return false
	} else if !this.ColData.Equal(that1.ColData) {
		return false
	}
	return true
}
func (this *Column_BooleanData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_BooleanData)
	if !ok {
		that2, ok := that.(Column_BooleanData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BooleanData.Equal(that1.BooleanData) {
		return false
	}
	return true
}
func (this *Column_Int64Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Int64Data)
	if !ok {
		that2, ok := that.(Column_Int64Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Int64Data.Equal(that1.Int64Data) {
		return false
	}
	return true
}
func (this *Column_Time64NsData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Time64NsData)
	if !ok {
		that2, ok := that.(Column_Time64NsData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time64NsData.Equal(that1.Time64NsData) {
		return false
	}
	return true
}
func (this *Column_Float64Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Float64Data)
	if !ok {
		that2, ok := that.(Column_Float64Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Float64Data.Equal(that1.Float64Data) {
		return false
	}
	return true
}
func (this *Column_StringData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_StringData)
	if !ok {
		that2, ok := that.(Column_StringData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StringData.Equal(that1.StringData) {
		return false
	}
	return true
}
func (this *RowBatchData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RowBatchData)
	if !ok {
		that2, ok := that.(RowBatchData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if len(this.Cols) != len(that1.Cols) {
		return false
	}
	for i := range this.Cols {
		if !this.Cols[i].Equal(that1.Cols[i]) {
			return false
		}
	}
	return true
}
func (this *Relation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relation)
	if !ok {
		that2, ok := that.(Relation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	return true
}
func (this *Relation_ColumnInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relation_ColumnInfo)
	if !ok {
		that2, ok := that.(Relation_ColumnInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ColumnName != that1.ColumnName {
		return false
	}
	if this.ColumnType != that1.ColumnType {
		return false
	}
	return true
}
func (this *Table) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table)
	if !ok {
		that2, ok := that.(Table)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Relation.Equal(that1.Relation) {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *QueryTimingInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryTimingInfo)
	if !ok {
		that2, ok := that.(QueryTimingInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExecutionTimeNs != that1.ExecutionTimeNs {
		return false
	}
	if this.CompilationTimeNs != that1.CompilationTimeNs {
		return false
	}
	return true
}
func (this *QueryExecutionStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryExecutionStats)
	if !ok {
		that2, ok := that.(QueryExecutionStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Timing.Equal(that1.Timing) {
		return false
	}
	if this.BytesProcessed != that1.BytesProcessed {
		return false
	}
	if this.RecordsProcessed != that1.RecordsProcessed {
		return false
	}
	return true
}
func (this *AgentQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentQueryResponse)
	if !ok {
		that2, ok := that.(AgentQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	if len(this.Tables) != len(that1.Tables) {
		return false
	}
	for i := range this.Tables {
		if !this.Tables[i].Equal(that1.Tables[i]) {
			return false
		}
	}
	return true
}
func (this *VizierQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierQueryResponse)
	if !ok {
		that2, ok := that.(VizierQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return false
		}
	}
	return true
}
func (this *VizierQueryResponse_ResponseByAgent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierQueryResponse_ResponseByAgent)
	if !ok {
		that2, ok := that.(VizierQueryResponse_ResponseByAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *Schema) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.Schema{")
	if this.Relations != nil {
		s = append(s, "Relations: "+fmt.Sprintf("%#v", this.Relations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&service.SchemaRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.SchemaResponse{")
	if this.SchemaByAgent != nil {
		s = append(s, "SchemaByAgent: "+fmt.Sprintf("%#v", this.SchemaByAgent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchemaResponse_SchemaByAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.SchemaResponse_SchemaByAgent{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Schema != nil {
		s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&service.AgentInfoRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.AgentInfoResponse{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&service.AgentStatus{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "LastHeartbeatNs: "+fmt.Sprintf("%#v", this.LastHeartbeatNs)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.AgentInfo{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.HostInfo != nil {
		s = append(s, "HostInfo: "+fmt.Sprintf("%#v", this.HostInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.HostInfo{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentToVizierMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&service.AgentToVizierMessage{")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentToVizierMessage_RegisterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.AgentToVizierMessage_RegisterRequest{` +
		`RegisterRequest:` + fmt.Sprintf("%#v", this.RegisterRequest) + `}`}, ", ")
	return s
}
func (this *AgentToVizierMessage_QueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.AgentToVizierMessage_QueryResponse{` +
		`QueryResponse:` + fmt.Sprintf("%#v", this.QueryResponse) + `}`}, ", ")
	return s
}
func (this *AgentToVizierMessage_Heartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.AgentToVizierMessage_Heartbeat{` +
		`Heartbeat:` + fmt.Sprintf("%#v", this.Heartbeat) + `}`}, ", ")
	return s
}
func (this *VizierToAgentMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&service.VizierToAgentMessage{")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierToAgentMessage_AgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.VizierToAgentMessage_AgentResponse{` +
		`AgentResponse:` + fmt.Sprintf("%#v", this.AgentResponse) + `}`}, ", ")
	return s
}
func (this *VizierToAgentMessage_QueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.VizierToAgentMessage_QueryRequest{` +
		`QueryRequest:` + fmt.Sprintf("%#v", this.QueryRequest) + `}`}, ", ")
	return s
}
func (this *VizierToAgentMessage_HeartBeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.VizierToAgentMessage_HeartBeatAck{` +
		`HeartBeatAck:` + fmt.Sprintf("%#v", this.HeartBeatAck) + `}`}, ", ")
	return s
}
func (this *HeartBeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.HeartBeat{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeartBeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.HeartBeatAck{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.RegisterAgentRequest{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.AgentInfo != nil {
		s = append(s, "AgentInfo: "+fmt.Sprintf("%#v", this.AgentInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.RegisterAgentResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.QueryRequest{")
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BooleanColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.BooleanColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Int64Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.Int64Column{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Float64Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.Float64Column{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Time64NSColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.Time64NSColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.StringColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&service.Column{")
	if this.ColData != nil {
		s = append(s, "ColData: "+fmt.Sprintf("%#v", this.ColData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column_BooleanData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Column_BooleanData{` +
		`BooleanData:` + fmt.Sprintf("%#v", this.BooleanData) + `}`}, ", ")
	return s
}
func (this *Column_Int64Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Column_Int64Data{` +
		`Int64Data:` + fmt.Sprintf("%#v", this.Int64Data) + `}`}, ", ")
	return s
}
func (this *Column_Time64NsData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Column_Time64NsData{` +
		`Time64NsData:` + fmt.Sprintf("%#v", this.Time64NsData) + `}`}, ", ")
	return s
}
func (this *Column_Float64Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Column_Float64Data{` +
		`Float64Data:` + fmt.Sprintf("%#v", this.Float64Data) + `}`}, ", ")
	return s
}
func (this *Column_StringData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.Column_StringData{` +
		`StringData:` + fmt.Sprintf("%#v", this.StringData) + `}`}, ", ")
	return s
}
func (this *RowBatchData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.RowBatchData{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	if this.Cols != nil {
		s = append(s, "Cols: "+fmt.Sprintf("%#v", this.Cols)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Relation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.Relation{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Relation_ColumnInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.Relation_ColumnInfo{")
	s = append(s, "ColumnName: "+fmt.Sprintf("%#v", this.ColumnName)+",\n")
	s = append(s, "ColumnType: "+fmt.Sprintf("%#v", this.ColumnType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Table) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.Table{")
	if this.Relation != nil {
		s = append(s, "Relation: "+fmt.Sprintf("%#v", this.Relation)+",\n")
	}
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryTimingInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.QueryTimingInfo{")
	s = append(s, "ExecutionTimeNs: "+fmt.Sprintf("%#v", this.ExecutionTimeNs)+",\n")
	s = append(s, "CompilationTimeNs: "+fmt.Sprintf("%#v", this.CompilationTimeNs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryExecutionStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&service.QueryExecutionStats{")
	if this.Timing != nil {
		s = append(s, "Timing: "+fmt.Sprintf("%#v", this.Timing)+",\n")
	}
	s = append(s, "BytesProcessed: "+fmt.Sprintf("%#v", this.BytesProcessed)+",\n")
	s = append(s, "RecordsProcessed: "+fmt.Sprintf("%#v", this.RecordsProcessed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&service.AgentQueryResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	if this.Stats != nil {
		s = append(s, "Stats: "+fmt.Sprintf("%#v", this.Stats)+",\n")
	}
	if this.Tables != nil {
		s = append(s, "Tables: "+fmt.Sprintf("%#v", this.Tables)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.VizierQueryResponse{")
	if this.Responses != nil {
		s = append(s, "Responses: "+fmt.Sprintf("%#v", this.Responses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierQueryResponse_ResponseByAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.VizierQueryResponse_ResponseByAgent{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VizierServiceClient is the client API for VizierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VizierServiceClient interface {
	ServeAgent(ctx context.Context, opts ...grpc.CallOption) (VizierService_ServeAgentClient, error)
	GetAgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error)
	ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*VizierQueryResponse, error)
	GetSchemas(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResponse, error)
}

type vizierServiceClient struct {
	cc *grpc.ClientConn
}

func NewVizierServiceClient(cc *grpc.ClientConn) VizierServiceClient {
	return &vizierServiceClient{cc}
}

func (c *vizierServiceClient) ServeAgent(ctx context.Context, opts ...grpc.CallOption) (VizierService_ServeAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VizierService_serviceDesc.Streams[0], "/pl.vizier.VizierService/ServeAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &vizierServiceServeAgentClient{stream}
	return x, nil
}

type VizierService_ServeAgentClient interface {
	Send(*AgentToVizierMessage) error
	Recv() (*VizierToAgentMessage, error)
	grpc.ClientStream
}

type vizierServiceServeAgentClient struct {
	grpc.ClientStream
}

func (x *vizierServiceServeAgentClient) Send(m *AgentToVizierMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vizierServiceServeAgentClient) Recv() (*VizierToAgentMessage, error) {
	m := new(VizierToAgentMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vizierServiceClient) GetAgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error) {
	out := new(AgentInfoResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.VizierService/GetAgentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierServiceClient) ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*VizierQueryResponse, error) {
	out := new(VizierQueryResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.VizierService/ExecuteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierServiceClient) GetSchemas(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResponse, error) {
	out := new(SchemaResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.VizierService/GetSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VizierServiceServer is the server API for VizierService service.
type VizierServiceServer interface {
	ServeAgent(VizierService_ServeAgentServer) error
	GetAgentInfo(context.Context, *AgentInfoRequest) (*AgentInfoResponse, error)
	ExecuteQuery(context.Context, *QueryRequest) (*VizierQueryResponse, error)
	GetSchemas(context.Context, *SchemaRequest) (*SchemaResponse, error)
}

func RegisterVizierServiceServer(s *grpc.Server, srv VizierServiceServer) {
	s.RegisterService(&_VizierService_serviceDesc, srv)
}

func _VizierService_ServeAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VizierServiceServer).ServeAgent(&vizierServiceServeAgentServer{stream})
}

type VizierService_ServeAgentServer interface {
	Send(*VizierToAgentMessage) error
	Recv() (*AgentToVizierMessage, error)
	grpc.ServerStream
}

type vizierServiceServeAgentServer struct {
	grpc.ServerStream
}

func (x *vizierServiceServeAgentServer) Send(m *VizierToAgentMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vizierServiceServeAgentServer) Recv() (*AgentToVizierMessage, error) {
	m := new(AgentToVizierMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VizierService_GetAgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierServiceServer).GetAgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.VizierService/GetAgentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierServiceServer).GetAgentInfo(ctx, req.(*AgentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierService_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierServiceServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.VizierService/ExecuteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierServiceServer).ExecuteQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierService_GetSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierServiceServer).GetSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.VizierService/GetSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierServiceServer).GetSchemas(ctx, req.(*SchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VizierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.vizier.VizierService",
	HandlerType: (*VizierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentInfo",
			Handler:    _VizierService_GetAgentInfo_Handler,
		},
		{
			MethodName: "ExecuteQuery",
			Handler:    _VizierService_ExecuteQuery_Handler,
		},
		{
			MethodName: "GetSchemas",
			Handler:    _VizierService_GetSchemas_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServeAgent",
			Handler:       _VizierService_ServeAgent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/vizier/proto/service.proto",
}

func (m *Schema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schema) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for _, msg := range m.Relations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SchemaByAgent) > 0 {
		for _, msg := range m.SchemaByAgent {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SchemaResponse_SchemaByAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaResponse_SchemaByAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentID.Size()))
		n1, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Schema != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Schema.Size()))
		n2, err := m.Schema.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AgentInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AgentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AgentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Info.Size()))
		n3, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.LastHeartbeatNs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.LastHeartbeatNs))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *AgentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentID.Size()))
		n4, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.HostInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.HostInfo.Size()))
		n5, err := m.HostInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *HostInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	return i, nil
}

func (m *AgentToVizierMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentToVizierMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn6, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *AgentToVizierMessage_RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RegisterRequest.Size()))
		n7, err := m.RegisterRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *AgentToVizierMessage_QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QueryResponse != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.QueryResponse.Size()))
		n8, err := m.QueryResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *AgentToVizierMessage_Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Heartbeat != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Heartbeat.Size()))
		n9, err := m.Heartbeat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *VizierToAgentMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierToAgentMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn10, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	return i, nil
}

func (m *VizierToAgentMessage_AgentResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AgentResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentResponse.Size()))
		n11, err := m.AgentResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *VizierToAgentMessage_QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QueryRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.QueryRequest.Size()))
		n12, err := m.QueryRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *VizierToAgentMessage_HeartBeatAck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeartBeatAck != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.HeartBeatAck.Size()))
		n13, err := m.HeartBeatAck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *HeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *HeartBeatAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *RegisterAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentID.Size()))
		n14, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.AgentInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentInfo.Size()))
		n15, err := m.AgentInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *RegisterAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Status.Size()))
		n16, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueryID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.QueryID.Size()))
		n17, err := m.QueryID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.QueryStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.QueryStr)))
		i += copy(dAtA[i:], m.QueryStr)
	}
	return i, nil
}

func (m *BooleanColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BooleanColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Data)))
		for _, b := range m.Data {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *Int64Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA19 := make([]byte, len(m.Data)*10)
		var j18 int
		for _, num1 := range m.Data {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	return i, nil
}

func (m *Float64Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Float64Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Data)*8))
		for _, num := range m.Data {
			f20 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f20))
			i += 8
		}
	}
	return i, nil
}

func (m *Time64NSColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Time64NSColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA22 := make([]byte, len(m.Data)*10)
		var j21 int
		for _, num1 := range m.Data {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(j21))
		i += copy(dAtA[i:], dAtA22[:j21])
	}
	return i, nil
}

func (m *StringColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ColData != nil {
		nn23, err := m.ColData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn23
	}
	return i, nil
}

func (m *Column_BooleanData) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BooleanData != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.BooleanData.Size()))
		n24, err := m.BooleanData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *Column_Int64Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Int64Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Int64Data.Size()))
		n25, err := m.Int64Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *Column_Time64NsData) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Time64NsData != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Time64NsData.Size()))
		n26, err := m.Time64NsData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *Column_Float64Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Float64Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Float64Data.Size()))
		n27, err := m.Float64Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *Column_StringData) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StringData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StringData.Size()))
		n28, err := m.StringData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *RowBatchData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowBatchData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Cols) > 0 {
		for _, msg := range m.Cols {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Relation_ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation_ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ColumnName)))
		i += copy(dAtA[i:], m.ColumnName)
	}
	if m.ColumnType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ColumnType))
	}
	return i, nil
}

func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Relation != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Relation.Size()))
		n29, err := m.Relation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QueryTimingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTimingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExecutionTimeNs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ExecutionTimeNs))
	}
	if m.CompilationTimeNs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.CompilationTimeNs))
	}
	return i, nil
}

func (m *QueryExecutionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutionStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timing != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Timing.Size()))
		n30, err := m.Timing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.BytesProcessed != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.BytesProcessed))
	}
	if m.RecordsProcessed != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RecordsProcessed))
	}
	return i, nil
}

func (m *AgentQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Status.Size()))
		n31, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.QueryID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.QueryID.Size()))
		n32, err := m.QueryID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Stats != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Stats.Size()))
		n33, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if len(m.Tables) > 0 {
		for _, msg := range m.Tables {
			dAtA[i] = 0x22
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VizierQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VizierQueryResponse_ResponseByAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierQueryResponse_ResponseByAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentID.Size()))
		n34, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Response.Size()))
		n35, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Schema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchemaByAgent) > 0 {
		for _, e := range m.SchemaByAgent {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SchemaResponse_SchemaByAgent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *AgentStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.LastHeartbeatNs != 0 {
		n += 1 + sovService(uint64(m.LastHeartbeatNs))
	}
	if m.State != 0 {
		n += 1 + sovService(uint64(m.State))
	}
	return n
}

func (m *AgentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.HostInfo != nil {
		l = m.HostInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *HostInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentToVizierMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *AgentToVizierMessage_RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterRequest != nil {
		l = m.RegisterRequest.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *AgentToVizierMessage_QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryResponse != nil {
		l = m.QueryResponse.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *AgentToVizierMessage_Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Heartbeat != nil {
		l = m.Heartbeat.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *VizierToAgentMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *VizierToAgentMessage_AgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentResponse != nil {
		l = m.AgentResponse.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *VizierToAgentMessage_QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryRequest != nil {
		l = m.QueryRequest.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *VizierToAgentMessage_HeartBeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartBeatAck != nil {
		l = m.HeartBeatAck.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *HeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovService(uint64(m.Time))
	}
	return n
}

func (m *HeartBeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovService(uint64(m.Time))
	}
	return n
}

func (m *RegisterAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.AgentInfo != nil {
		l = m.AgentInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegisterAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *BooleanColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		n += 1 + sovService(uint64(len(m.Data))) + len(m.Data)*1
	}
	return n
}

func (m *Int64Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		l = 0
		for _, e := range m.Data {
			l += sovService(uint64(e))
		}
		n += 1 + sovService(uint64(l)) + l
	}
	return n
}

func (m *Float64Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		n += 1 + sovService(uint64(len(m.Data)*8)) + len(m.Data)*8
	}
	return n
}

func (m *Time64NSColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		l = 0
		for _, e := range m.Data {
			l += sovService(uint64(e))
		}
		n += 1 + sovService(uint64(l)) + l
	}
	return n
}

func (m *StringColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ColData != nil {
		n += m.ColData.Size()
	}
	return n
}

func (m *Column_BooleanData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BooleanData != nil {
		l = m.BooleanData.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *Column_Int64Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int64Data != nil {
		l = m.Int64Data.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *Column_Time64NsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time64NsData != nil {
		l = m.Time64NsData.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *Column_Float64Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Float64Data != nil {
		l = m.Float64Data.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *Column_StringData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StringData != nil {
		l = m.StringData.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *RowBatchData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Cols) > 0 {
		for _, e := range m.Cols {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *Relation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *Relation_ColumnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ColumnName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ColumnType != 0 {
		n += 1 + sovService(uint64(m.ColumnType))
	}
	return n
}

func (m *Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *QueryTimingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionTimeNs != 0 {
		n += 1 + sovService(uint64(m.ExecutionTimeNs))
	}
	if m.CompilationTimeNs != 0 {
		n += 1 + sovService(uint64(m.CompilationTimeNs))
	}
	return n
}

func (m *QueryExecutionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timing != nil {
		l = m.Timing.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.BytesProcessed != 0 {
		n += 1 + sovService(uint64(m.BytesProcessed))
	}
	if m.RecordsProcessed != 0 {
		n += 1 + sovService(uint64(m.RecordsProcessed))
	}
	return n
}

func (m *AgentQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Tables) > 0 {
		for _, e := range m.Tables {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *VizierQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *VizierQueryResponse_ResponseByAgent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Schema) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Schema{`,
		`Relations:` + strings.Replace(fmt.Sprintf("%v", this.Relations), "Relation", "Relation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SchemaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaResponse{`,
		`SchemaByAgent:` + strings.Replace(fmt.Sprintf("%v", this.SchemaByAgent), "SchemaResponse_SchemaByAgent", "SchemaResponse_SchemaByAgent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchemaResponse_SchemaByAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchemaResponse_SchemaByAgent{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`Schema:` + strings.Replace(fmt.Sprintf("%v", this.Schema), "Schema", "Schema", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfoRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfoResponse{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "AgentStatus", "AgentStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentStatus{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "AgentInfo", "AgentInfo", 1) + `,`,
		`LastHeartbeatNs:` + fmt.Sprintf("%v", this.LastHeartbeatNs) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfo{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`HostInfo:` + strings.Replace(fmt.Sprintf("%v", this.HostInfo), "HostInfo", "HostInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostInfo{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentToVizierMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentToVizierMessage{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentToVizierMessage_RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentToVizierMessage_RegisterRequest{`,
		`RegisterRequest:` + strings.Replace(fmt.Sprintf("%v", this.RegisterRequest), "RegisterAgentRequest", "RegisterAgentRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentToVizierMessage_QueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentToVizierMessage_QueryResponse{`,
		`QueryResponse:` + strings.Replace(fmt.Sprintf("%v", this.QueryResponse), "AgentQueryResponse", "AgentQueryResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentToVizierMessage_Heartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentToVizierMessage_Heartbeat{`,
		`Heartbeat:` + strings.Replace(fmt.Sprintf("%v", this.Heartbeat), "HeartBeat", "HeartBeat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierToAgentMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierToAgentMessage{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierToAgentMessage_AgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierToAgentMessage_AgentResponse{`,
		`AgentResponse:` + strings.Replace(fmt.Sprintf("%v", this.AgentResponse), "RegisterAgentResponse", "RegisterAgentResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierToAgentMessage_QueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierToAgentMessage_QueryRequest{`,
		`QueryRequest:` + strings.Replace(fmt.Sprintf("%v", this.QueryRequest), "QueryRequest", "QueryRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierToAgentMessage_HeartBeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierToAgentMessage_HeartBeatAck{`,
		`HeartBeatAck:` + strings.Replace(fmt.Sprintf("%v", this.HeartBeatAck), "HeartBeatAck", "HeartBeatAck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartBeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartBeat{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartBeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartBeatAck{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentRequest{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`AgentInfo:` + strings.Replace(fmt.Sprintf("%v", this.AgentInfo), "AgentInfo", "AgentInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRequest{`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "proto1.UUID", 1) + `,`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BooleanColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BooleanColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Int64Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Int64Column{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Float64Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Float64Column{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Time64NSColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Time64NSColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column{`,
		`ColData:` + fmt.Sprintf("%v", this.ColData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_BooleanData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_BooleanData{`,
		`BooleanData:` + strings.Replace(fmt.Sprintf("%v", this.BooleanData), "BooleanColumn", "BooleanColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Int64Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Int64Data{`,
		`Int64Data:` + strings.Replace(fmt.Sprintf("%v", this.Int64Data), "Int64Column", "Int64Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Time64NsData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Time64NsData{`,
		`Time64NsData:` + strings.Replace(fmt.Sprintf("%v", this.Time64NsData), "Time64NSColumn", "Time64NSColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Float64Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Float64Data{`,
		`Float64Data:` + strings.Replace(fmt.Sprintf("%v", this.Float64Data), "Float64Column", "Float64Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_StringData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_StringData{`,
		`StringData:` + strings.Replace(fmt.Sprintf("%v", this.StringData), "StringColumn", "StringColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RowBatchData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RowBatchData{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Cols:` + strings.Replace(fmt.Sprintf("%v", this.Cols), "Column", "Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Relation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Relation{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Columns:` + strings.Replace(fmt.Sprintf("%v", this.Columns), "Relation_ColumnInfo", "Relation_ColumnInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Relation_ColumnInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Relation_ColumnInfo{`,
		`ColumnName:` + fmt.Sprintf("%v", this.ColumnName) + `,`,
		`ColumnType:` + fmt.Sprintf("%v", this.ColumnType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Table{`,
		`Relation:` + strings.Replace(fmt.Sprintf("%v", this.Relation), "Relation", "Relation", 1) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "RowBatchData", "RowBatchData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryTimingInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryTimingInfo{`,
		`ExecutionTimeNs:` + fmt.Sprintf("%v", this.ExecutionTimeNs) + `,`,
		`CompilationTimeNs:` + fmt.Sprintf("%v", this.CompilationTimeNs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryExecutionStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryExecutionStats{`,
		`Timing:` + strings.Replace(fmt.Sprintf("%v", this.Timing), "QueryTimingInfo", "QueryTimingInfo", 1) + `,`,
		`BytesProcessed:` + fmt.Sprintf("%v", this.BytesProcessed) + `,`,
		`RecordsProcessed:` + fmt.Sprintf("%v", this.RecordsProcessed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentQueryResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "proto1.UUID", 1) + `,`,
		`Stats:` + strings.Replace(fmt.Sprintf("%v", this.Stats), "QueryExecutionStats", "QueryExecutionStats", 1) + `,`,
		`Tables:` + strings.Replace(fmt.Sprintf("%v", this.Tables), "Table", "Table", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierQueryResponse{`,
		`Responses:` + strings.Replace(fmt.Sprintf("%v", this.Responses), "VizierQueryResponse_ResponseByAgent", "VizierQueryResponse_ResponseByAgent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierQueryResponse_ResponseByAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierQueryResponse_ResponseByAgent{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`Response:` + strings.Replace(fmt.Sprintf("%v", this.Response), "AgentQueryResponse", "AgentQueryResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Schema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Schema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Schema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &Relation{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaByAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaByAgent = append(m.SchemaByAgent, &SchemaResponse_SchemaByAgent{})
			if err := m.SchemaByAgent[len(m.SchemaByAgent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchemaResponse_SchemaByAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaByAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaByAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &Schema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &AgentStatus{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AgentInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatNs", wireType)
			}
			m.LastHeartbeatNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatNs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AgentState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostInfo == nil {
				m.HostInfo = &HostInfo{}
			}
			if err := m.HostInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentToVizierMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentToVizierMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentToVizierMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterAgentRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &AgentToVizierMessage_RegisterRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AgentQueryResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &AgentToVizierMessage_QueryResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeartBeat{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &AgentToVizierMessage_Heartbeat{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierToAgentMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierToAgentMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierToAgentMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterAgentResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierToAgentMessage_AgentResponse{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierToAgentMessage_QueryRequest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartBeatAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeartBeatAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierToAgentMessage_HeartBeatAck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentInfo == nil {
				m.AgentInfo = &AgentInfo{}
			}
			if err := m.AgentInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &proto1.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BooleanColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BooleanColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BooleanColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthService
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthService
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Float64Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Float64Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Float64Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Data = append(m.Data, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthService
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Data = append(m.Data, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Time64NSColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time64NSColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time64NSColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthService
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BooleanData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BooleanColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_BooleanData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int64Column{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Int64Data{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time64NsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Time64NSColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Time64NsData{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Float64Column{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Float64Data{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_StringData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowBatchData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowBatchData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowBatchData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cols = append(m.Cols, &Column{})
			if err := m.Cols[len(m.Cols)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Relation_ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation_ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnType", wireType)
			}
			m.ColumnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnType |= (proto3.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RowBatchData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTimingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTimingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTimingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTimeNs", wireType)
			}
			m.ExecutionTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionTimeNs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompilationTimeNs", wireType)
			}
			m.CompilationTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompilationTimeNs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timing == nil {
				m.Timing = &QueryTimingInfo{}
			}
			if err := m.Timing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesProcessed", wireType)
			}
			m.BytesProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesProcessed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordsProcessed", wireType)
			}
			m.RecordsProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordsProcessed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &proto1.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &QueryExecutionStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, &Table{})
			if err := m.Tables[len(m.Tables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &VizierQueryResponse_ResponseByAgent{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierQueryResponse_ResponseByAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseByAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseByAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &AgentQueryResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("src/vizier/proto/service.proto", fileDescriptor_service_a569b0193347fe5e)
}

var fileDescriptor_service_a569b0193347fe5e = []byte{
	// 1515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x72, 0x13, 0xc7,
	0x13, 0xdf, 0xb5, 0x6c, 0x63, 0xb5, 0x3e, 0x3d, 0x86, 0x3f, 0x42, 0xc0, 0xda, 0xff, 0x25, 0x09,
	0x0e, 0xae, 0x48, 0xc4, 0xb8, 0xc8, 0x07, 0x45, 0x88, 0x65, 0x0b, 0xa4, 0x82, 0xc8, 0x64, 0x25,
	0x48, 0x25, 0x97, 0xad, 0xd5, 0x7a, 0x2c, 0x6d, 0x21, 0xed, 0xca, 0x3b, 0x2b, 0x82, 0x39, 0xa5,
	0x2a, 0x79, 0x00, 0xde, 0x20, 0xd7, 0x3c, 0x44, 0x4e, 0x39, 0x25, 0x37, 0x2e, 0xa9, 0x22, 0x97,
	0x54, 0x10, 0x97, 0x24, 0x27, 0x1e, 0x21, 0x35, 0xd3, 0xb3, 0xd2, 0x4a, 0x5e, 0xa8, 0x82, 0xdb,
	0x4c, 0xf7, 0xaf, 0x7b, 0xfa, 0xd7, 0xdd, 0x33, 0xdb, 0x0b, 0x1a, 0xf3, 0xed, 0xf2, 0x43, 0xe7,
	0xb1, 0x43, 0xfd, 0xf2, 0xc0, 0xf7, 0x02, 0xaf, 0xcc, 0xa8, 0xff, 0xd0, 0xb1, 0x69, 0x49, 0xec,
	0x48, 0x72, 0xd0, 0x2b, 0xa1, 0xba, 0xf8, 0x41, 0xc7, 0x09, 0xba, 0xc3, 0x76, 0xc9, 0xf6, 0xfa,
	0xe5, 0x8e, 0xd7, 0xf1, 0x10, 0xdf, 0x1e, 0x1e, 0x88, 0x1d, 0x1a, 0xf3, 0x15, 0x5a, 0x16, 0xcf,
	0x72, 0xcf, 0xc3, 0xc0, 0xe9, 0x31, 0xe9, 0x58, 0xac, 0xa5, 0xf2, 0x3c, 0x57, 0xda, 0x5e, 0xbf,
	0xef, 0xb9, 0xe1, 0xb1, 0x81, 0x15, 0x0c, 0x43, 0xb5, 0xce, 0xd5, 0xac, 0x6b, 0xf9, 0x74, 0xbf,
	0x1c, 0x1c, 0x0d, 0x68, 0xe8, 0x42, 0xac, 0x11, 0xa3, 0x5f, 0x83, 0xc5, 0xa6, 0xdd, 0xa5, 0x7d,
	0x8b, 0x7c, 0x08, 0x49, 0x9f, 0xf6, 0xac, 0xc0, 0xf1, 0x5c, 0x56, 0x50, 0xd7, 0x12, 0xeb, 0xa9,
	0xcd, 0x95, 0xd2, 0x38, 0xee, 0x92, 0x21, 0x75, 0xc6, 0x04, 0xa5, 0xe7, 0x20, 0x83, 0xc6, 0x06,
	0x3d, 0x1c, 0x52, 0x16, 0xe8, 0xbf, 0xab, 0x90, 0x0d, 0x25, 0x6c, 0xe0, 0xb9, 0x8c, 0x92, 0x3d,
	0xc8, 0x31, 0x21, 0x31, 0xdb, 0x47, 0xa6, 0xd5, 0xa1, 0x6e, 0x20, 0x9d, 0x5f, 0x8c, 0x38, 0x9f,
	0xb6, 0x91, 0xdb, 0xca, 0xd1, 0x36, 0x87, 0x1b, 0x19, 0x16, 0xdd, 0x16, 0xfd, 0xf0, 0x50, 0x29,
	0x20, 0x57, 0x61, 0x49, 0xf8, 0x35, 0x9d, 0xfd, 0x82, 0xba, 0xa6, 0xae, 0xa7, 0x36, 0xb3, 0xdc,
	0x35, 0x26, 0xea, 0xde, 0xbd, 0xfa, 0x6e, 0x25, 0x35, 0xfa, 0x73, 0xf5, 0x84, 0x00, 0xd7, 0x77,
	0x8d, 0x13, 0x02, 0x5c, 0xdf, 0x27, 0xef, 0xc3, 0x22, 0x7a, 0x2e, 0xcc, 0x09, 0xab, 0xe5, 0xe3,
	0x01, 0x49, 0x80, 0x4e, 0x20, 0x8f, 0xe6, 0xee, 0x81, 0x17, 0x72, 0xbd, 0x01, 0xcb, 0x11, 0x99,
	0x64, 0x7b, 0x09, 0xe6, 0x1d, 0xf7, 0xc0, 0x93, 0x14, 0xff, 0x17, 0xf1, 0x28, 0xb0, 0x4d, 0x51,
	0x1e, 0x43, 0x60, 0xf4, 0x27, 0x2a, 0xa4, 0x22, 0x52, 0xb2, 0x3e, 0xb6, 0xe5, 0xd1, 0x9c, 0x9c,
	0xb5, 0x15, 0xe7, 0x08, 0x04, 0xb9, 0x04, 0xcb, 0x3d, 0x8b, 0x05, 0x66, 0x97, 0x5a, 0x7e, 0xd0,
	0xa6, 0x56, 0x60, 0xba, 0x4c, 0x90, 0x48, 0x18, 0x39, 0xae, 0xa8, 0x85, 0xf2, 0x06, 0x23, 0x1b,
	0xb0, 0xc0, 0x9b, 0x82, 0x16, 0x12, 0x6b, 0xea, 0x7a, 0x76, 0xf3, 0x54, 0x5c, 0x48, 0xd4, 0x40,
	0x8c, 0x3e, 0x84, 0xe4, 0xf8, 0xac, 0xb7, 0xce, 0xeb, 0x65, 0x48, 0x76, 0x3d, 0x16, 0x98, 0x82,
	0x0c, 0xa6, 0x36, 0xda, 0x48, 0x35, 0x8f, 0x21, 0x97, 0xa5, 0xae, 0x5c, 0xe9, 0xef, 0xc1, 0x52,
	0x28, 0x25, 0x45, 0x10, 0x72, 0xd7, 0xea, 0x53, 0x71, 0x6a, 0xd2, 0x18, 0xef, 0xf5, 0x7f, 0x54,
	0x38, 0x29, 0x8e, 0x6b, 0x79, 0xf7, 0x85, 0xb3, 0x2f, 0x28, 0x63, 0x56, 0x87, 0x92, 0x3b, 0x90,
	0xf7, 0x69, 0xc7, 0x61, 0x01, 0xf5, 0x4d, 0x1f, 0xeb, 0x23, 0x43, 0x5e, 0x9d, 0x6a, 0x61, 0x84,
	0x60, 0x5b, 0x21, 0xac, 0xa6, 0x18, 0xb9, 0xd0, 0x54, 0x8a, 0xc8, 0x4d, 0xc8, 0x1e, 0x0e, 0xa9,
	0x7f, 0x64, 0xfa, 0xb2, 0xac, 0x92, 0xc5, 0xf9, 0xd9, 0xdc, 0x7d, 0xc9, 0x51, 0x61, 0xed, 0x6b,
	0x8a, 0x91, 0x39, 0x8c, 0x0a, 0xc8, 0x16, 0x24, 0xc7, 0x15, 0x12, 0xe9, 0x9f, 0xae, 0xaa, 0xa8,
	0x52, 0x85, 0x5a, 0x3c, 0x86, 0x09, 0xb0, 0xb2, 0x00, 0x89, 0x3e, 0xeb, 0x08, 0xae, 0x48, 0xb2,
	0xe5, 0x89, 0xc3, 0x42, 0xae, 0x75, 0xc8, 0x62, 0x59, 0xc6, 0xd1, 0x21, 0xd3, 0xb5, 0x57, 0x33,
	0x9d, 0x04, 0x68, 0x45, 0x05, 0xe4, 0x33, 0xc8, 0x84, 0x44, 0x31, 0x67, 0xc8, 0xf3, 0x74, 0xc4,
	0x93, 0xa4, 0x18, 0xe6, 0x2a, 0x7d, 0x18, 0xd9, 0x93, 0x1b, 0x90, 0x15, 0x71, 0x9b, 0xa2, 0x07,
	0x2d, 0xfb, 0x81, 0x64, 0x79, 0x3a, 0x8e, 0xe5, 0xb6, 0xfd, 0x80, 0x3b, 0xe8, 0x46, 0xf6, 0x21,
	0xd7, 0x55, 0x48, 0x8e, 0x61, 0x84, 0xc0, 0x7c, 0xe0, 0xc8, 0xe2, 0x27, 0x0c, 0xb1, 0xd6, 0x75,
	0x48, 0x47, 0xfd, 0xc4, 0x62, 0xbe, 0x57, 0xe1, 0x64, 0x5c, 0x85, 0xdf, 0xba, 0x8f, 0xaf, 0x00,
	0x48, 0xbb, 0x49, 0x23, 0xc7, 0xdf, 0xca, 0xa4, 0x15, 0x2e, 0xf5, 0x5d, 0x38, 0x15, 0x9b, 0x7c,
	0xb2, 0x01, 0x8b, 0xf8, 0x38, 0xcb, 0x18, 0xc4, 0x95, 0x40, 0xc9, 0xa0, 0x5d, 0x92, 0x0f, 0x83,
	0x84, 0xe8, 0x36, 0xa4, 0xa3, 0x89, 0xe7, 0x14, 0xb0, 0x50, 0xaf, 0xa7, 0x20, 0x6c, 0x38, 0x05,
	0x01, 0xae, 0xef, 0x93, 0xb3, 0x90, 0x44, 0x3b, 0x16, 0xf8, 0x82, 0x41, 0xd2, 0x40, 0x47, 0xcd,
	0xc0, 0xd7, 0x2f, 0x40, 0xa6, 0xe2, 0x79, 0x3d, 0x6a, 0xb9, 0x3b, 0x5e, 0x6f, 0xd8, 0x77, 0x79,
	0x56, 0xf7, 0xad, 0xc0, 0x12, 0x8f, 0xd7, 0x92, 0x21, 0xd6, 0xfa, 0xff, 0x21, 0x55, 0x77, 0x83,
	0xab, 0x5b, 0x31, 0x90, 0x84, 0x84, 0x5c, 0x80, 0xcc, 0xcd, 0x9e, 0x67, 0xc5, 0x83, 0x54, 0x09,
	0x7a, 0x07, 0xb2, 0x2d, 0xa7, 0x4f, 0xaf, 0x6e, 0x35, 0x9a, 0xaf, 0x71, 0xa5, 0x43, 0xba, 0x19,
	0xf8, 0x8e, 0xdb, 0x89, 0xc1, 0x24, 0x25, 0xe6, 0xb7, 0x39, 0x58, 0x94, 0xea, 0xeb, 0x90, 0x6e,
	0x23, 0x03, 0x53, 0xc2, 0x78, 0x6a, 0x0a, 0x91, 0x1a, 0x4d, 0x11, 0xac, 0x29, 0x46, 0x4a, 0xe2,
	0x77, 0xad, 0xc0, 0x22, 0x1f, 0x01, 0x38, 0x9c, 0x1b, 0x1a, 0x63, 0x81, 0xa3, 0x4f, 0x76, 0x84,
	0x38, 0xbf, 0xa2, 0x02, 0x2b, 0x0c, 0x3f, 0x87, 0x4c, 0x20, 0xc8, 0xb8, 0x0c, 0x6d, 0xb1, 0xed,
	0xcf, 0x44, 0x6c, 0xa7, 0xc9, 0xf2, 0xc6, 0x0f, 0x2d, 0x84, 0x87, 0xeb, 0x90, 0x3e, 0xc0, 0x9c,
	0xa1, 0x83, 0xf9, 0x63, 0x91, 0x4f, 0xa5, 0x94, 0x47, 0x2e, 0xf1, 0xc2, 0xfc, 0x53, 0x48, 0x31,
	0x91, 0x27, 0xb4, 0x5e, 0x38, 0x76, 0xeb, 0xa2, 0x59, 0xac, 0x29, 0x06, 0x20, 0x9a, 0xdb, 0x56,
	0x00, 0x96, 0x6c, 0xaf, 0x27, 0x0c, 0xf5, 0x3a, 0xa4, 0x0d, 0xef, 0xdb, 0x8a, 0x15, 0xd8, 0x5d,
	0xe1, 0x77, 0x92, 0x6f, 0x75, 0x3d, 0x8d, 0xf9, 0x26, 0xef, 0xc2, 0xbc, 0xed, 0xf5, 0xf8, 0xf7,
	0x25, 0x31, 0xf3, 0x91, 0x44, 0xf7, 0x86, 0x50, 0xeb, 0x3f, 0xab, 0xb0, 0x14, 0xce, 0x08, 0xdc,
	0x4f, 0xe4, 0x01, 0x17, 0x6b, 0xf2, 0x31, 0x9c, 0xb0, 0x85, 0x41, 0xe8, 0x4a, 0x8b, 0x99, 0x2e,
	0xa4, 0x4f, 0x71, 0xab, 0x42, 0x78, 0xb1, 0x0d, 0x30, 0x11, 0x93, 0x55, 0x48, 0xa1, 0xc2, 0x8c,
	0x1c, 0x01, 0x28, 0x6a, 0xf0, 0x83, 0xae, 0x8c, 0x01, 0x7c, 0xd0, 0x11, 0x75, 0xcd, 0x6e, 0x12,
	0x7e, 0x18, 0x0e, 0x3e, 0x9c, 0x69, 0xeb, 0x68, 0x40, 0x43, 0x23, 0xbe, 0xd6, 0x29, 0x2c, 0xb4,
	0xac, 0x76, 0x8f, 0x92, 0x32, 0x2c, 0x85, 0x03, 0x8e, 0xac, 0x4a, 0xec, 0x14, 0x34, 0x06, 0x91,
	0x0d, 0x99, 0xb3, 0x05, 0x41, 0x2a, 0x5a, 0x84, 0x68, 0x6a, 0x65, 0xf3, 0xf6, 0x21, 0x27, 0x2e,
	0x69, 0xcb, 0xe9, 0x3b, 0x6e, 0xa7, 0x2e, 0x3f, 0xe6, 0xf4, 0x11, 0xb5, 0x87, 0xdc, 0x99, 0xc9,
	0x9b, 0xc4, 0x74, 0x99, 0x7c, 0xd8, 0x72, 0x63, 0x05, 0x6f, 0xa7, 0x06, 0x23, 0x25, 0x58, 0xb1,
	0xbd, 0xfe, 0xc0, 0xc1, 0xa3, 0xc7, 0x68, 0xfc, 0xf4, 0x2f, 0x47, 0x54, 0x88, 0xd7, 0x7f, 0x54,
	0x61, 0x45, 0x9c, 0x57, 0x0d, 0x1d, 0xf1, 0x87, 0x86, 0x91, 0x4d, 0x58, 0x0c, 0x44, 0x04, 0xf2,
	0xca, 0x14, 0x67, 0x5f, 0xfc, 0x49, 0x7c, 0x86, 0x44, 0x92, 0x8b, 0x90, 0x6b, 0x1f, 0x05, 0x94,
	0x99, 0x03, 0xdf, 0xb3, 0x29, 0x63, 0x74, 0x5f, 0x9e, 0x9b, 0x15, 0xe2, 0xbb, 0xa1, 0x94, 0x6c,
	0xc0, 0xb2, 0x4f, 0x6d, 0xcf, 0xdf, 0x8f, 0x42, 0x13, 0x02, 0x9a, 0x97, 0x8a, 0x31, 0x58, 0xff,
	0x43, 0x05, 0x72, 0xfc, 0x5b, 0xfa, 0x46, 0xaf, 0xe5, 0xd4, 0xeb, 0x38, 0xf7, 0x06, 0xaf, 0xe3,
	0x16, 0x8e, 0x46, 0x4c, 0x5e, 0x5f, 0x6d, 0x36, 0x09, 0xd3, 0x49, 0xc3, 0x19, 0x89, 0x8f, 0x69,
	0x8b, 0x01, 0xef, 0x14, 0x56, 0x98, 0x17, 0x15, 0xcf, 0x47, 0x6f, 0x3d, 0x57, 0x18, 0x52, 0xaf,
	0xff, 0xab, 0xc2, 0x0a, 0x7e, 0xc2, 0xa7, 0xc9, 0xdd, 0xe1, 0x93, 0x36, 0xae, 0xc3, 0x49, 0xbb,
	0x14, 0x71, 0x12, 0x63, 0x52, 0x0a, 0x17, 0xe1, 0x4c, 0x3c, 0x71, 0x50, 0xfc, 0x41, 0x85, 0xdc,
	0x8c, 0xfa, 0xad, 0x3f, 0x79, 0x9f, 0xf0, 0xe6, 0x7f, 0x83, 0x99, 0xc7, 0x18, 0xc3, 0x2f, 0x3d,
	0x06, 0x98, 0xcc, 0x93, 0xe4, 0x34, 0xac, 0x6c, 0xdf, 0xaa, 0x36, 0x5a, 0x66, 0xb3, 0xb5, 0xdd,
	0xaa, 0x9a, 0xf7, 0x1a, 0xb7, 0x1b, 0x7b, 0x5f, 0x35, 0xf2, 0xca, 0xac, 0xa2, 0x56, 0xdd, 0xbe,
	0xd3, 0xaa, 0x7d, 0x9d, 0x57, 0xc9, 0x39, 0x28, 0x4c, 0x5b, 0x18, 0xd5, 0xe6, 0xdd, 0xbd, 0x46,
	0xb3, 0x7e, 0xbf, 0x9a, 0x9f, 0x9b, 0xd5, 0xee, 0xd6, 0x9b, 0x3b, 0x7b, 0x8d, 0x46, 0x75, 0xa7,
	0x55, 0xdd, 0xcd, 0x27, 0x36, 0x7f, 0x99, 0x83, 0x0c, 0x66, 0xad, 0x89, 0xbf, 0x5d, 0xa4, 0x05,
	0xc0, 0x97, 0x14, 0xd3, 0xb1, 0x3a, 0x4b, 0x62, 0x66, 0x7e, 0x2c, 0xae, 0x1e, 0x4b, 0xff, 0xf4,
	0xd0, 0xa5, 0x2b, 0xeb, 0xea, 0x65, 0x95, 0xdc, 0x86, 0xf4, 0x2d, 0x1a, 0x4c, 0x26, 0xe4, 0xb3,
	0xb1, 0xd3, 0x00, 0x7e, 0xb3, 0x8b, 0xe7, 0xe2, 0x95, 0x98, 0x2e, 0x5d, 0x21, 0x75, 0x48, 0x63,
	0x83, 0x51, 0x91, 0x52, 0xf2, 0xaa, 0xa9, 0xab, 0xa8, 0xbd, 0xbe, 0x37, 0x74, 0x85, 0xec, 0x00,
	0xdc, 0xa2, 0x01, 0xfe, 0xb3, 0x30, 0x52, 0x88, 0xf9, 0xb1, 0x42, 0x4f, 0x67, 0x5e, 0xf9, 0xcb,
	0xa5, 0x2b, 0x15, 0xfa, 0xf4, 0xb9, 0xa6, 0x3c, 0x7b, 0xae, 0x29, 0x2f, 0x9f, 0x6b, 0xea, 0x77,
	0x23, 0x4d, 0xfd, 0x69, 0xa4, 0xa9, 0xbf, 0x8e, 0x34, 0xf5, 0xe9, 0x48, 0x53, 0xff, 0x1a, 0x69,
	0xea, 0xdf, 0x23, 0x4d, 0x79, 0x39, 0xd2, 0xd4, 0x27, 0x2f, 0x34, 0xe5, 0xe9, 0x0b, 0x4d, 0x79,
	0xf6, 0x42, 0x53, 0xbe, 0x29, 0x0f, 0x9c, 0x47, 0x0e, 0xed, 0x59, 0x6d, 0x56, 0xb2, 0x9c, 0xc9,
	0xa6, 0x3c, 0xfb, 0x43, 0x7c, 0x4d, 0xfe, 0x10, 0xb7, 0x17, 0xc5, 0xf6, 0xca, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xe9, 0x22, 0x86, 0xa7, 0x33, 0x0f, 0x00, 0x00,
}
