// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/proto/service.proto

package service // import "pixielabs.ai/pixielabs/src/vizier/proto"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import proto2 "pixielabs.ai/pixielabs/src/common/proto"
import proto1 "pixielabs.ai/pixielabs/src/utils/proto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AgentInfoRequest struct {
}

func (m *AgentInfoRequest) Reset()      { *m = AgentInfoRequest{} }
func (*AgentInfoRequest) ProtoMessage() {}
func (*AgentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{0}
}
func (m *AgentInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfoRequest.Merge(dst, src)
}
func (m *AgentInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfoRequest proto.InternalMessageInfo

type AgentInfoResponse struct {
	Info []*AgentInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *AgentInfoResponse) Reset()      { *m = AgentInfoResponse{} }
func (*AgentInfoResponse) ProtoMessage() {}
func (*AgentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{1}
}
func (m *AgentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfoResponse.Merge(dst, src)
}
func (m *AgentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfoResponse proto.InternalMessageInfo

func (m *AgentInfoResponse) GetInfo() []*AgentInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type AgentInfo struct {
	AgentID  *proto1.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	HostInfo *HostInfo    `protobuf:"bytes,2,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
}

func (m *AgentInfo) Reset()      { *m = AgentInfo{} }
func (*AgentInfo) ProtoMessage() {}
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{2}
}
func (m *AgentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfo.Merge(dst, src)
}
func (m *AgentInfo) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfo proto.InternalMessageInfo

func (m *AgentInfo) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *AgentInfo) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

type HostInfo struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *HostInfo) Reset()      { *m = HostInfo{} }
func (*HostInfo) ProtoMessage() {}
func (*HostInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{3}
}
func (m *HostInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HostInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostInfo.Merge(dst, src)
}
func (m *HostInfo) XXX_Size() int {
	return m.Size()
}
func (m *HostInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HostInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HostInfo proto.InternalMessageInfo

func (m *HostInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type AgentToVizierMessage struct {
	// Types that are valid to be assigned to Msg:
	//	*AgentToVizierMessage_RegisterRequest
	//	*AgentToVizierMessage_QueryResponse
	Msg isAgentToVizierMessage_Msg `protobuf_oneof:"msg"`
}

func (m *AgentToVizierMessage) Reset()      { *m = AgentToVizierMessage{} }
func (*AgentToVizierMessage) ProtoMessage() {}
func (*AgentToVizierMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{4}
}
func (m *AgentToVizierMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentToVizierMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentToVizierMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentToVizierMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentToVizierMessage.Merge(dst, src)
}
func (m *AgentToVizierMessage) XXX_Size() int {
	return m.Size()
}
func (m *AgentToVizierMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentToVizierMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AgentToVizierMessage proto.InternalMessageInfo

type isAgentToVizierMessage_Msg interface {
	isAgentToVizierMessage_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AgentToVizierMessage_RegisterRequest struct {
	RegisterRequest *RegisterAgentRequest `protobuf:"bytes,1,opt,name=register_request,json=registerRequest,proto3,oneof"`
}
type AgentToVizierMessage_QueryResponse struct {
	QueryResponse *QueryResponse `protobuf:"bytes,2,opt,name=query_response,json=queryResponse,proto3,oneof"`
}

func (*AgentToVizierMessage_RegisterRequest) isAgentToVizierMessage_Msg() {}
func (*AgentToVizierMessage_QueryResponse) isAgentToVizierMessage_Msg()   {}

func (m *AgentToVizierMessage) GetMsg() isAgentToVizierMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *AgentToVizierMessage) GetRegisterRequest() *RegisterAgentRequest {
	if x, ok := m.GetMsg().(*AgentToVizierMessage_RegisterRequest); ok {
		return x.RegisterRequest
	}
	return nil
}

func (m *AgentToVizierMessage) GetQueryResponse() *QueryResponse {
	if x, ok := m.GetMsg().(*AgentToVizierMessage_QueryResponse); ok {
		return x.QueryResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AgentToVizierMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AgentToVizierMessage_OneofMarshaler, _AgentToVizierMessage_OneofUnmarshaler, _AgentToVizierMessage_OneofSizer, []interface{}{
		(*AgentToVizierMessage_RegisterRequest)(nil),
		(*AgentToVizierMessage_QueryResponse)(nil),
	}
}

func _AgentToVizierMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AgentToVizierMessage)
	// msg
	switch x := m.Msg.(type) {
	case *AgentToVizierMessage_RegisterRequest:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterRequest); err != nil {
			return err
		}
	case *AgentToVizierMessage_QueryResponse:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueryResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AgentToVizierMessage.Msg has unexpected type %T", x)
	}
	return nil
}

func _AgentToVizierMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AgentToVizierMessage)
	switch tag {
	case 1: // msg.register_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterAgentRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &AgentToVizierMessage_RegisterRequest{msg}
		return true, err
	case 2: // msg.query_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryResponse)
		err := b.DecodeMessage(msg)
		m.Msg = &AgentToVizierMessage_QueryResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AgentToVizierMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AgentToVizierMessage)
	// msg
	switch x := m.Msg.(type) {
	case *AgentToVizierMessage_RegisterRequest:
		s := proto.Size(x.RegisterRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AgentToVizierMessage_QueryResponse:
		s := proto.Size(x.QueryResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VizierToAgentMessage struct {
	// Types that are valid to be assigned to Msg:
	//	*VizierToAgentMessage_AgentResponse
	//	*VizierToAgentMessage_QueryRequest
	Msg isVizierToAgentMessage_Msg `protobuf_oneof:"msg"`
}

func (m *VizierToAgentMessage) Reset()      { *m = VizierToAgentMessage{} }
func (*VizierToAgentMessage) ProtoMessage() {}
func (*VizierToAgentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{5}
}
func (m *VizierToAgentMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierToAgentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierToAgentMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VizierToAgentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierToAgentMessage.Merge(dst, src)
}
func (m *VizierToAgentMessage) XXX_Size() int {
	return m.Size()
}
func (m *VizierToAgentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierToAgentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VizierToAgentMessage proto.InternalMessageInfo

type isVizierToAgentMessage_Msg interface {
	isVizierToAgentMessage_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VizierToAgentMessage_AgentResponse struct {
	AgentResponse *RegisterAgentResponse `protobuf:"bytes,1,opt,name=agent_response,json=agentResponse,proto3,oneof"`
}
type VizierToAgentMessage_QueryRequest struct {
	QueryRequest *QueryRequest `protobuf:"bytes,2,opt,name=query_request,json=queryRequest,proto3,oneof"`
}

func (*VizierToAgentMessage_AgentResponse) isVizierToAgentMessage_Msg() {}
func (*VizierToAgentMessage_QueryRequest) isVizierToAgentMessage_Msg()  {}

func (m *VizierToAgentMessage) GetMsg() isVizierToAgentMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *VizierToAgentMessage) GetAgentResponse() *RegisterAgentResponse {
	if x, ok := m.GetMsg().(*VizierToAgentMessage_AgentResponse); ok {
		return x.AgentResponse
	}
	return nil
}

func (m *VizierToAgentMessage) GetQueryRequest() *QueryRequest {
	if x, ok := m.GetMsg().(*VizierToAgentMessage_QueryRequest); ok {
		return x.QueryRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VizierToAgentMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VizierToAgentMessage_OneofMarshaler, _VizierToAgentMessage_OneofUnmarshaler, _VizierToAgentMessage_OneofSizer, []interface{}{
		(*VizierToAgentMessage_AgentResponse)(nil),
		(*VizierToAgentMessage_QueryRequest)(nil),
	}
}

func _VizierToAgentMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VizierToAgentMessage)
	// msg
	switch x := m.Msg.(type) {
	case *VizierToAgentMessage_AgentResponse:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AgentResponse); err != nil {
			return err
		}
	case *VizierToAgentMessage_QueryRequest:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueryRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VizierToAgentMessage.Msg has unexpected type %T", x)
	}
	return nil
}

func _VizierToAgentMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VizierToAgentMessage)
	switch tag {
	case 1: // msg.agent_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterAgentResponse)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierToAgentMessage_AgentResponse{msg}
		return true, err
	case 2: // msg.query_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierToAgentMessage_QueryRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VizierToAgentMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VizierToAgentMessage)
	// msg
	switch x := m.Msg.(type) {
	case *VizierToAgentMessage_AgentResponse:
		s := proto.Size(x.AgentResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierToAgentMessage_QueryRequest:
		s := proto.Size(x.QueryRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RegisterAgentRequest struct {
	AgentID   *proto1.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentInfo *AgentInfo   `protobuf:"bytes,2,opt,name=agent_info,json=agentInfo,proto3" json:"agent_info,omitempty"`
}

func (m *RegisterAgentRequest) Reset()      { *m = RegisterAgentRequest{} }
func (*RegisterAgentRequest) ProtoMessage() {}
func (*RegisterAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{6}
}
func (m *RegisterAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentRequest.Merge(dst, src)
}
func (m *RegisterAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentRequest proto.InternalMessageInfo

func (m *RegisterAgentRequest) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *RegisterAgentRequest) GetAgentInfo() *AgentInfo {
	if m != nil {
		return m.AgentInfo
	}
	return nil
}

type RegisterAgentResponse struct {
	Status *proto2.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *RegisterAgentResponse) Reset()      { *m = RegisterAgentResponse{} }
func (*RegisterAgentResponse) ProtoMessage() {}
func (*RegisterAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{7}
}
func (m *RegisterAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentResponse.Merge(dst, src)
}
func (m *RegisterAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentResponse proto.InternalMessageInfo

func (m *RegisterAgentResponse) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type QueryRequest struct {
	QueryID  int64  `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryStr string `protobuf:"bytes,2,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
}

func (m *QueryRequest) Reset()      { *m = QueryRequest{} }
func (*QueryRequest) ProtoMessage() {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{8}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(dst, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetQueryID() int64 {
	if m != nil {
		return m.QueryID
	}
	return 0
}

func (m *QueryRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

type QueryResponse struct {
	QueryID int64  `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryResponse) Reset()      { *m = QueryResponse{} }
func (*QueryResponse) ProtoMessage() {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_e2d71f3ee90e6c37, []int{9}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(dst, src)
}
func (m *QueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetQueryID() int64 {
	if m != nil {
		return m.QueryID
	}
	return 0
}

func (m *QueryResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*AgentInfoRequest)(nil), "pl.vizier.AgentInfoRequest")
	proto.RegisterType((*AgentInfoResponse)(nil), "pl.vizier.AgentInfoResponse")
	proto.RegisterType((*AgentInfo)(nil), "pl.vizier.AgentInfo")
	proto.RegisterType((*HostInfo)(nil), "pl.vizier.HostInfo")
	proto.RegisterType((*AgentToVizierMessage)(nil), "pl.vizier.AgentToVizierMessage")
	proto.RegisterType((*VizierToAgentMessage)(nil), "pl.vizier.VizierToAgentMessage")
	proto.RegisterType((*RegisterAgentRequest)(nil), "pl.vizier.RegisterAgentRequest")
	proto.RegisterType((*RegisterAgentResponse)(nil), "pl.vizier.RegisterAgentResponse")
	proto.RegisterType((*QueryRequest)(nil), "pl.vizier.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "pl.vizier.QueryResponse")
}
func (this *AgentInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfoRequest)
	if !ok {
		that2, ok := that.(AgentInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AgentInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfoResponse)
	if !ok {
		that2, ok := that.(AgentInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *AgentInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfo)
	if !ok {
		that2, ok := that.(AgentInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.HostInfo.Equal(that1.HostInfo) {
		return false
	}
	return true
}
func (this *HostInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostInfo)
	if !ok {
		that2, ok := that.(HostInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}
func (this *AgentToVizierMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentToVizierMessage)
	if !ok {
		that2, ok := that.(AgentToVizierMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *AgentToVizierMessage_RegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentToVizierMessage_RegisterRequest)
	if !ok {
		that2, ok := that.(AgentToVizierMessage_RegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegisterRequest.Equal(that1.RegisterRequest) {
		return false
	}
	return true
}
func (this *AgentToVizierMessage_QueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentToVizierMessage_QueryResponse)
	if !ok {
		that2, ok := that.(AgentToVizierMessage_QueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryResponse.Equal(that1.QueryResponse) {
		return false
	}
	return true
}
func (this *VizierToAgentMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierToAgentMessage)
	if !ok {
		that2, ok := that.(VizierToAgentMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *VizierToAgentMessage_AgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierToAgentMessage_AgentResponse)
	if !ok {
		that2, ok := that.(VizierToAgentMessage_AgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentResponse.Equal(that1.AgentResponse) {
		return false
	}
	return true
}
func (this *VizierToAgentMessage_QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierToAgentMessage_QueryRequest)
	if !ok {
		that2, ok := that.(VizierToAgentMessage_QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryRequest.Equal(that1.QueryRequest) {
		return false
	}
	return true
}
func (this *RegisterAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentRequest)
	if !ok {
		that2, ok := that.(RegisterAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.AgentInfo.Equal(that1.AgentInfo) {
		return false
	}
	return true
}
func (this *RegisterAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentResponse)
	if !ok {
		that2, ok := that.(RegisterAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest)
	if !ok {
		that2, ok := that.(QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryID != that1.QueryID {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	return true
}
func (this *QueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryResponse)
	if !ok {
		that2, ok := that.(QueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryID != that1.QueryID {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *AgentInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&service.AgentInfoRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.AgentInfoResponse{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.AgentInfo{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.HostInfo != nil {
		s = append(s, "HostInfo: "+fmt.Sprintf("%#v", this.HostInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.HostInfo{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentToVizierMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.AgentToVizierMessage{")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentToVizierMessage_RegisterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.AgentToVizierMessage_RegisterRequest{` +
		`RegisterRequest:` + fmt.Sprintf("%#v", this.RegisterRequest) + `}`}, ", ")
	return s
}
func (this *AgentToVizierMessage_QueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.AgentToVizierMessage_QueryResponse{` +
		`QueryResponse:` + fmt.Sprintf("%#v", this.QueryResponse) + `}`}, ", ")
	return s
}
func (this *VizierToAgentMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.VizierToAgentMessage{")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierToAgentMessage_AgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.VizierToAgentMessage_AgentResponse{` +
		`AgentResponse:` + fmt.Sprintf("%#v", this.AgentResponse) + `}`}, ", ")
	return s
}
func (this *VizierToAgentMessage_QueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&service.VizierToAgentMessage_QueryRequest{` +
		`QueryRequest:` + fmt.Sprintf("%#v", this.QueryRequest) + `}`}, ", ")
	return s
}
func (this *RegisterAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.RegisterAgentRequest{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.AgentInfo != nil {
		s = append(s, "AgentInfo: "+fmt.Sprintf("%#v", this.AgentInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&service.RegisterAgentResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.QueryRequest{")
	s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&service.QueryResponse{")
	s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VizierServiceClient is the client API for VizierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VizierServiceClient interface {
	ServeAgent(ctx context.Context, opts ...grpc.CallOption) (VizierService_ServeAgentClient, error)
	GetAgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error)
	ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type vizierServiceClient struct {
	cc *grpc.ClientConn
}

func NewVizierServiceClient(cc *grpc.ClientConn) VizierServiceClient {
	return &vizierServiceClient{cc}
}

func (c *vizierServiceClient) ServeAgent(ctx context.Context, opts ...grpc.CallOption) (VizierService_ServeAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VizierService_serviceDesc.Streams[0], "/pl.vizier.VizierService/ServeAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &vizierServiceServeAgentClient{stream}
	return x, nil
}

type VizierService_ServeAgentClient interface {
	Send(*AgentToVizierMessage) error
	Recv() (*VizierToAgentMessage, error)
	grpc.ClientStream
}

type vizierServiceServeAgentClient struct {
	grpc.ClientStream
}

func (x *vizierServiceServeAgentClient) Send(m *AgentToVizierMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vizierServiceServeAgentClient) Recv() (*VizierToAgentMessage, error) {
	m := new(VizierToAgentMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vizierServiceClient) GetAgentInfo(ctx context.Context, in *AgentInfoRequest, opts ...grpc.CallOption) (*AgentInfoResponse, error) {
	out := new(AgentInfoResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.VizierService/GetAgentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierServiceClient) ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/pl.vizier.VizierService/ExecuteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VizierServiceServer is the server API for VizierService service.
type VizierServiceServer interface {
	ServeAgent(VizierService_ServeAgentServer) error
	GetAgentInfo(context.Context, *AgentInfoRequest) (*AgentInfoResponse, error)
	ExecuteQuery(context.Context, *QueryRequest) (*QueryResponse, error)
}

func RegisterVizierServiceServer(s *grpc.Server, srv VizierServiceServer) {
	s.RegisterService(&_VizierService_serviceDesc, srv)
}

func _VizierService_ServeAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VizierServiceServer).ServeAgent(&vizierServiceServeAgentServer{stream})
}

type VizierService_ServeAgentServer interface {
	Send(*VizierToAgentMessage) error
	Recv() (*AgentToVizierMessage, error)
	grpc.ServerStream
}

type vizierServiceServeAgentServer struct {
	grpc.ServerStream
}

func (x *vizierServiceServeAgentServer) Send(m *VizierToAgentMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vizierServiceServeAgentServer) Recv() (*AgentToVizierMessage, error) {
	m := new(AgentToVizierMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VizierService_GetAgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierServiceServer).GetAgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.VizierService/GetAgentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierServiceServer).GetAgentInfo(ctx, req.(*AgentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierService_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierServiceServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.vizier.VizierService/ExecuteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierServiceServer).ExecuteQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VizierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.vizier.VizierService",
	HandlerType: (*VizierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentInfo",
			Handler:    _VizierService_GetAgentInfo_Handler,
		},
		{
			MethodName: "ExecuteQuery",
			Handler:    _VizierService_ExecuteQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServeAgent",
			Handler:       _VizierService_ServeAgent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/vizier/proto/service.proto",
}

func (m *AgentInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AgentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AgentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentID.Size()))
		n1, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.HostInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.HostInfo.Size()))
		n2, err := m.HostInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *HostInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	return i, nil
}

func (m *AgentToVizierMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentToVizierMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn3, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *AgentToVizierMessage_RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RegisterRequest.Size()))
		n4, err := m.RegisterRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *AgentToVizierMessage_QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QueryResponse != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.QueryResponse.Size()))
		n5, err := m.QueryResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *VizierToAgentMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierToAgentMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn6, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *VizierToAgentMessage_AgentResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AgentResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentResponse.Size()))
		n7, err := m.AgentResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *VizierToAgentMessage_QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QueryRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.QueryRequest.Size()))
		n8, err := m.QueryRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *RegisterAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentID.Size()))
		n9, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.AgentInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.AgentInfo.Size()))
		n10, err := m.AgentInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *RegisterAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.QueryID))
	}
	if len(m.QueryStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.QueryStr)))
		i += copy(dAtA[i:], m.QueryStr)
	}
	return i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueryID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.QueryID))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AgentInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *AgentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.HostInfo != nil {
		l = m.HostInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *HostInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *AgentToVizierMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *AgentToVizierMessage_RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterRequest != nil {
		l = m.RegisterRequest.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *AgentToVizierMessage_QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryResponse != nil {
		l = m.QueryResponse.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *VizierToAgentMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *VizierToAgentMessage_AgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentResponse != nil {
		l = m.AgentResponse.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *VizierToAgentMessage_QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryRequest != nil {
		l = m.QueryRequest.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *RegisterAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.AgentInfo != nil {
		l = m.AgentInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegisterAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryID != 0 {
		n += 1 + sovService(uint64(m.QueryID))
	}
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryID != 0 {
		n += 1 + sovService(uint64(m.QueryID))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AgentInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfoRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfoResponse{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "AgentInfo", "AgentInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfo{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`HostInfo:` + strings.Replace(fmt.Sprintf("%v", this.HostInfo), "HostInfo", "HostInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostInfo{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentToVizierMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentToVizierMessage{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentToVizierMessage_RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentToVizierMessage_RegisterRequest{`,
		`RegisterRequest:` + strings.Replace(fmt.Sprintf("%v", this.RegisterRequest), "RegisterAgentRequest", "RegisterAgentRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentToVizierMessage_QueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentToVizierMessage_QueryResponse{`,
		`QueryResponse:` + strings.Replace(fmt.Sprintf("%v", this.QueryResponse), "QueryResponse", "QueryResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierToAgentMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierToAgentMessage{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierToAgentMessage_AgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierToAgentMessage_AgentResponse{`,
		`AgentResponse:` + strings.Replace(fmt.Sprintf("%v", this.AgentResponse), "RegisterAgentResponse", "RegisterAgentResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierToAgentMessage_QueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierToAgentMessage_QueryRequest{`,
		`QueryRequest:` + strings.Replace(fmt.Sprintf("%v", this.QueryRequest), "QueryRequest", "QueryRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentRequest{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`AgentInfo:` + strings.Replace(fmt.Sprintf("%v", this.AgentInfo), "AgentInfo", "AgentInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRequest{`,
		`QueryID:` + fmt.Sprintf("%v", this.QueryID) + `,`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResponse{`,
		`QueryID:` + fmt.Sprintf("%v", this.QueryID) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AgentInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &AgentInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostInfo == nil {
				m.HostInfo = &HostInfo{}
			}
			if err := m.HostInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentToVizierMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentToVizierMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentToVizierMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterAgentRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &AgentToVizierMessage_RegisterRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &AgentToVizierMessage_QueryResponse{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierToAgentMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierToAgentMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierToAgentMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterAgentResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierToAgentMessage_AgentResponse{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierToAgentMessage_QueryRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentInfo == nil {
				m.AgentInfo = &AgentInfo{}
			}
			if err := m.AgentInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			m.QueryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			m.QueryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("src/vizier/proto/service.proto", fileDescriptor_service_e2d71f3ee90e6c37)
}

var fileDescriptor_service_e2d71f3ee90e6c37 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x4f, 0xd4, 0x4e,
	0x14, 0xef, 0x7c, 0xe1, 0x0b, 0xdb, 0xc7, 0x2e, 0xe2, 0xb8, 0x46, 0xb2, 0xe8, 0x40, 0xe6, 0x40,
	0x36, 0x31, 0xb6, 0x04, 0x12, 0x2f, 0x46, 0x13, 0x10, 0x23, 0x1b, 0xf4, 0x60, 0x17, 0x3c, 0x78,
	0xd9, 0x74, 0x77, 0x87, 0xd2, 0x84, 0xed, 0xec, 0x76, 0xa6, 0x04, 0x3d, 0x99, 0xf8, 0x0f, 0xf8,
	0x67, 0x70, 0xf2, 0xef, 0xf0, 0xc8, 0x91, 0x93, 0x91, 0x72, 0xf1, 0xc8, 0xcd, 0xab, 0xe9, 0xcc,
	0x74, 0xb7, 0x62, 0x49, 0x8c, 0xb7, 0xf7, 0xe3, 0xf3, 0xde, 0xe7, 0xf3, 0x5e, 0x5f, 0x07, 0x88,
	0x88, 0x7b, 0xee, 0x71, 0xf8, 0x21, 0x64, 0xb1, 0x3b, 0x8c, 0xb9, 0xe4, 0xae, 0x60, 0xf1, 0x71,
	0xd8, 0x63, 0x8e, 0xf2, 0xb0, 0x3d, 0x3c, 0x72, 0x74, 0xba, 0xf1, 0x28, 0x08, 0xe5, 0x61, 0xd2,
	0x75, 0x7a, 0x7c, 0xe0, 0x06, 0x3c, 0xe0, 0x1a, 0xdf, 0x4d, 0x0e, 0x94, 0xa7, 0x8b, 0x33, 0x4b,
	0x57, 0x36, 0x96, 0xb2, 0xce, 0x89, 0x0c, 0x8f, 0x84, 0x69, 0xac, 0x6c, 0x93, 0x7c, 0x90, 0x25,
	0x7b, 0x7c, 0x30, 0xe0, 0x51, 0x4e, 0x2b, 0x7d, 0x99, 0x98, 0x34, 0xc5, 0xb0, 0xb0, 0x19, 0xb0,
	0x48, 0xb6, 0xa2, 0x03, 0xee, 0xb1, 0x51, 0xc2, 0x84, 0xa4, 0x4f, 0xe1, 0x76, 0x21, 0x26, 0x86,
	0x3c, 0x12, 0x0c, 0x37, 0x61, 0x3a, 0x8c, 0x0e, 0xf8, 0x22, 0x5a, 0x99, 0x6a, 0xce, 0xad, 0xd7,
	0x9d, 0xb1, 0x5a, 0x67, 0x82, 0x55, 0x08, 0x9a, 0x80, 0x3d, 0x0e, 0xe1, 0xc7, 0x50, 0xf1, 0x33,
	0xa7, 0x13, 0xf6, 0x17, 0xd1, 0x0a, 0x6a, 0xce, 0xad, 0xcf, 0x67, 0xa5, 0x5a, 0xe1, 0xfe, 0x7e,
	0x6b, 0x7b, 0x6b, 0x2e, 0xfd, 0xb6, 0x3c, 0xab, 0x0b, 0xb6, 0xbd, 0x59, 0x05, 0x6e, 0xf5, 0xf1,
	0x1a, 0xd8, 0x87, 0x5c, 0xc8, 0x8e, 0xe2, 0xfc, 0x4f, 0x15, 0xde, 0x29, 0x70, 0xee, 0x70, 0xa1,
	0x29, 0x2b, 0x87, 0xc6, 0xa2, 0xab, 0x50, 0xc9, 0xa3, 0xb8, 0x01, 0x2a, 0x1e, 0xf9, 0x03, 0xa6,
	0x58, 0x6d, 0x6f, 0xec, 0xd3, 0x2f, 0x08, 0xea, 0x8a, 0x6e, 0x8f, 0xbf, 0x55, 0xcd, 0x5e, 0x33,
	0x21, 0xfc, 0x80, 0xe1, 0x57, 0xb0, 0x10, 0xb3, 0x20, 0x14, 0x92, 0xc5, 0x9d, 0x58, 0xaf, 0xc2,
	0x48, 0x5e, 0x2e, 0x30, 0x7b, 0x06, 0xa2, 0x5a, 0x98, 0x8d, 0xed, 0x58, 0xde, 0xad, 0xbc, 0xd4,
	0x84, 0xf0, 0x26, 0xcc, 0x8f, 0x12, 0x16, 0xbf, 0xef, 0xc4, 0x66, 0x83, 0x66, 0x8a, 0xc5, 0x42,
	0xaf, 0x37, 0x19, 0x20, 0xdf, 0xf0, 0x8e, 0xe5, 0xd5, 0x46, 0xc5, 0xc0, 0xd6, 0xff, 0x30, 0x35,
	0x10, 0x01, 0x3d, 0x45, 0x50, 0xd7, 0x4a, 0xf7, 0xb8, 0x62, 0xcd, 0x05, 0xb7, 0x60, 0x5e, 0xef,
	0x76, 0x4c, 0xa1, 0xe5, 0xae, 0xdc, 0x2c, 0x77, 0x42, 0xe5, 0x17, 0x03, 0xf8, 0x19, 0xd4, 0x72,
	0xb5, 0x7a, 0x70, 0x2d, 0xf6, 0xde, 0x9f, 0x62, 0xf3, 0x81, 0xab, 0xa3, 0x82, 0x9f, 0x4b, 0xfd,
	0x84, 0xa0, 0x5e, 0xb6, 0xa0, 0x7f, 0x3e, 0x83, 0x0d, 0x00, 0x53, 0x37, 0xb9, 0x83, 0xf2, 0xdb,
	0xb3, 0xfd, 0xdc, 0xa4, 0xdb, 0x70, 0xb7, 0x74, 0x6c, 0xfc, 0x10, 0x66, 0xf4, 0xf1, 0x1b, 0x0d,
	0xea, 0xa2, 0x74, 0x64, 0xd8, 0x75, 0xda, 0xca, 0xf0, 0x0c, 0x84, 0xb6, 0xa1, 0x5a, 0x1c, 0x19,
	0xaf, 0x42, 0x45, 0xaf, 0xc8, 0x8c, 0x30, 0xa5, 0x25, 0x2b, 0x4c, 0x26, 0x59, 0x25, 0x5b, 0x7d,
	0xbc, 0x04, 0xb6, 0xc6, 0x09, 0x19, 0x2b, 0xc5, 0xb6, 0xa7, 0x0b, 0xdb, 0x32, 0xa6, 0xbb, 0x50,
	0xfb, 0xed, 0xa3, 0xff, 0x75, 0x57, 0x0c, 0xd3, 0x7d, 0x5f, 0xfa, 0xaa, 0x61, 0xd5, 0x53, 0xf6,
	0xfa, 0x4f, 0x04, 0x35, 0x7d, 0x18, 0x6d, 0xfd, 0x92, 0xe0, 0x3d, 0x80, 0xcc, 0x64, 0x6a, 0x6c,
	0xbc, 0x7c, 0x7d, 0x51, 0xd7, 0x2e, 0xbe, 0x51, 0x04, 0x94, 0x5d, 0x18, 0xb5, 0x9a, 0x68, 0x0d,
	0xe1, 0x5d, 0xa8, 0xbe, 0x64, 0x72, 0xf2, 0x4f, 0x2f, 0x95, 0x7e, 0x00, 0xbd, 0xa6, 0xc6, 0xfd,
	0xf2, 0xa4, 0x1e, 0x97, 0x5a, 0xf8, 0x39, 0x54, 0x5f, 0x9c, 0xb0, 0x5e, 0x22, 0x99, 0x9a, 0x11,
	0xdf, 0x74, 0x62, 0x8d, 0x1b, 0x7f, 0x14, 0x6a, 0x6d, 0xb1, 0xb3, 0x0b, 0x62, 0x9d, 0x5f, 0x10,
	0xeb, 0xea, 0x82, 0xa0, 0x8f, 0x29, 0x41, 0xa7, 0x29, 0x41, 0x5f, 0x53, 0x82, 0xce, 0x52, 0x82,
	0xbe, 0xa7, 0x04, 0xfd, 0x48, 0x89, 0x75, 0x95, 0x12, 0xf4, 0xf9, 0x92, 0x58, 0x67, 0x97, 0xc4,
	0x3a, 0xbf, 0x24, 0xd6, 0x3b, 0x77, 0x18, 0x9e, 0x84, 0xec, 0xc8, 0xef, 0x0a, 0xc7, 0x0f, 0x27,
	0x8e, 0x7b, 0xfd, 0x61, 0x7e, 0x62, 0x1e, 0xe6, 0xee, 0x8c, 0x72, 0x37, 0x7e, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x1e, 0xb1, 0xcc, 0x84, 0xbb, 0x05, 0x00, 0x00,
}
