syntax = "proto3";

package pl.vizier;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/utils/proto/utils.proto";
import "src/common/proto/status.proto";

option go_package = "pixielabs.ai/pixielabs/src/vizier/proto;service";
/**
 * This is the approximate block diagram for vizier
 * at-least in the M2 timeframe.
 *
 *                          +---------------+
 *                          |  CLI          |
 *                          +---------------+
 *                                  ^
 *                                  |
 * +-------------+          +-------v-------+
 * |             |<-------->|               |
 * |   Agent     |          |    Vizier     |
 * |             |          |               |
 * +-------------+          +---------------+
 */
service VizierService {
  // ServeAgent is a Bi-directional RPC that is used to exchange data between
  // agents and Vizier.
  rpc ServeAgent(stream AgentToVizierMessage) returns (stream VizierToAgentMessage) {}

  /**
   * These RPC calls are used by debug tools, etc, that connect to vizier.
   */

  // Returns information about registered agents.
  rpc GetAgentInfo(AgentInfoRequest) returns (AgentInfoResponse) {}
  // This is an incoming request to Vizier to execute queries.
  rpc ExecuteQuery(QueryRequest) returns (QueryResponse) {}
}


message AgentInfoRequest {}

message AgentInfoResponse {
  repeated AgentInfo info = 1;
}

// AgentInfo contains information about hosts and agent running on a given machine.
message AgentInfo {
  utils.UUID agent_id      = 1 [
    (gogoproto.customname) = "AgentID"
  ];
  HostInfo host_info = 2;
}

// HostInfo contains the details for the host (OS, kernel, CPU, etc).
message HostInfo {
  string hostname = 1;
}

// AgentToVizierMessage is the base message that is sent from the agent to
// vizier for any RPC stream request.
message AgentToVizierMessage {
  oneof msg {
    RegisterAgentRequest register_request = 1;
    QueryResponse query_response          = 2;
  }
}

// VizierToAgentMessage is the base message that is sent from vizier to
// agent for any RPC stream request.
message VizierToAgentMessage {
  oneof msg {
    RegisterAgentResponse agent_response = 1;
    QueryRequest query_request           = 2;
  }
}

// RegisterAgentRequest is the first message sent from the agent to register the agent.
message RegisterAgentRequest {
  utils.UUID agent_id = 1 [
    (gogoproto.customname) = "AgentID"
  ];
  AgentInfo agent_info = 2;
}

// RegisterAgentResponse is returned for a register request.
message RegisterAgentResponse {
  pl.statuspb.Status status = 1;
}

message QueryRequest {
  // The ID of the query (will be returned in response).
  int64 query_id = 1 [
    (gogoproto.customname) = "QueryID"
  ];
  // The query string (either this or proto will be set).
  string query_str = 2;
  // TODO(zasgar): Add proto query.
}

message QueryResponse {
  // The ID of the returned query.
  int64 query_id = 1 [
    (gogoproto.customname) = "QueryID"
  ];
  // The data as a serialized flat_buffer.
  // TODO(zasgar): Make it send flat_buffer directly from grpc.
  bytes data = 2;
}
