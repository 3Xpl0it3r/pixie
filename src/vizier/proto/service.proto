syntax = "proto3";

package pl.vizier;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/utils/proto/utils.proto";
import "src/common/proto/status.proto";
import "src/common/types/types.proto";

option go_package = "pixielabs.ai/pixielabs/src/vizier/proto;service";
/**
 * This is the approximate block diagram for vizier
 * at-least in the M2 timeframe.
 *
 *                          +---------------+
 *                          |  CLI          |
 *                          +---------------+
 *                                  ^
 *                                  |
 * +-------------+          +-------v-------+
 * |             |<-------->|               |
 * |   Agent     |          |    Vizier     |
 * |             |          |               |
 * +-------------+          +---------------+
 */
service VizierService {
  // ServeAgent is a Bi-directional RPC that is used to exchange data between
  // agents and Vizier.
  rpc ServeAgent(stream AgentToVizierMessage) returns (stream VizierToAgentMessage) {}

  /**
   * These RPC calls are used by debug tools, etc, that connect to vizier.
   */

  // Returns information about registered agents.
  rpc GetAgentInfo(AgentInfoRequest) returns (AgentInfoResponse) {}
  // This is an incoming request to Vizier to execute queries.
  rpc ExecuteQuery(QueryRequest) returns (VizierQueryResponse) {}
  rpc GetSchemas(SchemaRequest) returns (SchemaResponse) {}
}

// The schema information per agent.
message Schema {
  repeated Relation relations = 1;
}

// The schema request.
message SchemaRequest {}

// The schema response from Vizier.
message SchemaResponse {
  message SchemaByAgent {
    utils.UUID agent_id      = 1 [
      (gogoproto.customname) = "AgentID"
    ];
    Schema schema = 2;
  }
  repeated SchemaByAgent schema_by_agent = 1;
}

enum AgentStatus {
  // The default state if nothing is known.
  AGENT_STATUS_UNKNOWN = 0;
  // The state is healthy if heartbeats are received on regular intervals and the
  // agent is responding to requests.
  AGENT_STATUS_HEALTHY = 1;
  // The state will go to unresponsive if the agent hasn't sent a heartbeat for a while
  // or is unresponsive to messages from Vizier.
  AGENT_STATUS_UNRESPONSIVE = 2;
  // The state will go to disconnected if the GRPC connection breaks. The hope is that the agent
  // will come back online and resume in HEALTHY state.
  AGENT_STATUS_DISCONNECTED = 3;
}

message AgentInfoRequest {}

message AgentInfoResponse {
  repeated AgentInfo info = 1;
  // Time in nanoseconds since the last heartbeat from the agent.
  int64 last_heartbeat_ns = 2;
  // The status of the Agent.
  AgentStatus status = 3;
}

// AgentInfo contains information about hosts and agent running on a given machine.
message AgentInfo {
  utils.UUID agent_id      = 1 [
    (gogoproto.customname) = "AgentID"
  ];
  HostInfo host_info = 2;
}

// HostInfo contains the details for the host (OS, kernel, CPU, etc).
message HostInfo {
  string hostname = 1;
}

// AgentToVizierMessage is the base message that is sent from the agent to
// vizier for any RPC stream request.
message AgentToVizierMessage {
  oneof msg {
    RegisterAgentRequest register_request = 1;
    AgentQueryResponse query_response     = 2;
    // This tracks the agent heart beat. Also serves as a keep alive on the connection.
    HeartBeat heartbeat                   = 3;
  }
}

// VizierToAgentMessage is the base message that is sent from vizier to
// agent for any RPC stream request.
message VizierToAgentMessage {
  oneof msg {
    RegisterAgentResponse agent_response = 1;
    QueryRequest query_request           = 2;
    HeartBeatAck  heart_beat_ack         = 3;
  }
}


// The heart beat signal.
message HeartBeat {
  // The current unix time in ns on the machine.
  int64 time = 1;
}

// Response sent for a heart beat.
message HeartBeatAck {
  // The current unix time in ns on the machine.
  int64 time = 1;
}

// RegisterAgentRequest is the first message sent from the agent to register the agent.
message RegisterAgentRequest {
  utils.UUID agent_id = 1 [
    (gogoproto.customname) = "AgentID"
  ];
  AgentInfo agent_info = 2;
}

// RegisterAgentResponse is returned for a register request.
message RegisterAgentResponse {
  pl.statuspb.Status status = 1;
}

message QueryRequest {
  // The ID of the query (will be returned in response).
  utils.UUID query_id = 1 [
    (gogoproto.customname) = "QueryID"
  ];
  // The query string (either this or proto will be set).
  string query_str = 2;
  // TODO(zasgar): Add proto query.
}

// RowBatchData is a temporary data type that will remove when proper serialization
// is implemented.
message RowBatchData {
  // The data stored as a string (on Vizier) or as a serialized arrow:RowBatch on
  // the agent.
  bytes data = 1;
}

message Relation {
  message ColumnInfo {
    string column_names = 1;
    pl.types.DataType column_types = 2;
  }
  string name = 1;
  repeated ColumnInfo columns = 2;
  // Total number of bytes processed (sum of all input tables).
  int64 table_size_bytes = 3;
  // Total number of records processed (sum of all input tables).
  int64 num_records = 4;
}

// Tracks information about query execution time.
message QueryTimingInfo {
  // The total execution time for the query in nanoseconds.
  int64 execution_time_ns = 1;
  // The time in ns spent compiling the query.
  int64 compilation_time_ns = 2;
}

// QueryExecutionStats contains information about the time/data processed by the query.
message QueryExecutionStats {
  QueryTimingInfo timing  = 1;
  // The number of input bytes.
  int64 bytes_processed = 2;
}

// AgentQueryResponse is returned for each execution of a query by the agent.
message AgentQueryResponse {
  pl.statuspb.Status status = 1;

  // The ID of the returned query.
  utils.UUID query_id = 2 [
    (gogoproto.customname) = "QueryID"
  ];

  // Stats about the query execution.
  QueryExecutionStats stats = 3;

  // Information about the output relation. We can only have one right now.
  Relation output_relation = 4;
  // The data as a serialized flat_buffer.
  // TODO(zasgar): Make it send flat_buffer directly from grpc.
  repeated RowBatchData data = 5;
}

// QueryResponse is returned by Vizier in response to a query.
message VizierQueryResponse {
  message ResponseByAgent {
    utils.UUID agent_id      = 1 [
      (gogoproto.customname) = "AgentID"
    ];

    AgentQueryResponse response = 2;
  }
  ResponseByAgent responses = 1;
}
