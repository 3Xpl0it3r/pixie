// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/messages/messagespb/messages.proto

package messages

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	planpb "pixielabs.ai/pixielabs/src/carnot/planpb"
	proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	metadatapb "pixielabs.ai/pixielabs/src/shared/k8s/metadatapb"
	agentpb "pixielabs.ai/pixielabs/src/vizier/services/shared/agentpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VizierMessage struct {
	// Types that are valid to be assigned to Msg:
	//	*VizierMessage_RegisterAgentRequest
	//	*VizierMessage_RegisterAgentResponse
	//	*VizierMessage_UpdateAgentRequest
	//	*VizierMessage_UpdateAgentResponse
	//	*VizierMessage_Heartbeat
	//	*VizierMessage_HeartbeatAck
	//	*VizierMessage_HeartbeatNack
	//	*VizierMessage_ExecuteQueryRequest
	Msg isVizierMessage_Msg `protobuf_oneof:"msg"`
}

func (m *VizierMessage) Reset()      { *m = VizierMessage{} }
func (*VizierMessage) ProtoMessage() {}
func (*VizierMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{0}
}
func (m *VizierMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierMessage.Merge(m, src)
}
func (m *VizierMessage) XXX_Size() int {
	return m.Size()
}
func (m *VizierMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VizierMessage proto.InternalMessageInfo

type isVizierMessage_Msg interface {
	isVizierMessage_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VizierMessage_RegisterAgentRequest struct {
	RegisterAgentRequest *RegisterAgentRequest `protobuf:"bytes,1,opt,name=register_agent_request,json=registerAgentRequest,proto3,oneof" json:"register_agent_request,omitempty"`
}
type VizierMessage_RegisterAgentResponse struct {
	RegisterAgentResponse *RegisterAgentResponse `protobuf:"bytes,2,opt,name=register_agent_response,json=registerAgentResponse,proto3,oneof" json:"register_agent_response,omitempty"`
}
type VizierMessage_UpdateAgentRequest struct {
	UpdateAgentRequest *UpdateAgentRequest `protobuf:"bytes,3,opt,name=update_agent_request,json=updateAgentRequest,proto3,oneof" json:"update_agent_request,omitempty"`
}
type VizierMessage_UpdateAgentResponse struct {
	UpdateAgentResponse *UpdateAgentResponse `protobuf:"bytes,4,opt,name=update_agent_response,json=updateAgentResponse,proto3,oneof" json:"update_agent_response,omitempty"`
}
type VizierMessage_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,5,opt,name=heartbeat,proto3,oneof" json:"heartbeat,omitempty"`
}
type VizierMessage_HeartbeatAck struct {
	HeartbeatAck *HeartbeatAck `protobuf:"bytes,6,opt,name=heartbeat_ack,json=heartbeatAck,proto3,oneof" json:"heartbeat_ack,omitempty"`
}
type VizierMessage_HeartbeatNack struct {
	HeartbeatNack *HeartbeatNack `protobuf:"bytes,7,opt,name=heartbeat_nack,json=heartbeatNack,proto3,oneof" json:"heartbeat_nack,omitempty"`
}
type VizierMessage_ExecuteQueryRequest struct {
	ExecuteQueryRequest *ExecuteQueryRequest `protobuf:"bytes,8,opt,name=execute_query_request,json=executeQueryRequest,proto3,oneof" json:"execute_query_request,omitempty"`
}

func (*VizierMessage_RegisterAgentRequest) isVizierMessage_Msg()  {}
func (*VizierMessage_RegisterAgentResponse) isVizierMessage_Msg() {}
func (*VizierMessage_UpdateAgentRequest) isVizierMessage_Msg()    {}
func (*VizierMessage_UpdateAgentResponse) isVizierMessage_Msg()   {}
func (*VizierMessage_Heartbeat) isVizierMessage_Msg()             {}
func (*VizierMessage_HeartbeatAck) isVizierMessage_Msg()          {}
func (*VizierMessage_HeartbeatNack) isVizierMessage_Msg()         {}
func (*VizierMessage_ExecuteQueryRequest) isVizierMessage_Msg()   {}

func (m *VizierMessage) GetMsg() isVizierMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *VizierMessage) GetRegisterAgentRequest() *RegisterAgentRequest {
	if x, ok := m.GetMsg().(*VizierMessage_RegisterAgentRequest); ok {
		return x.RegisterAgentRequest
	}
	return nil
}

func (m *VizierMessage) GetRegisterAgentResponse() *RegisterAgentResponse {
	if x, ok := m.GetMsg().(*VizierMessage_RegisterAgentResponse); ok {
		return x.RegisterAgentResponse
	}
	return nil
}

func (m *VizierMessage) GetUpdateAgentRequest() *UpdateAgentRequest {
	if x, ok := m.GetMsg().(*VizierMessage_UpdateAgentRequest); ok {
		return x.UpdateAgentRequest
	}
	return nil
}

func (m *VizierMessage) GetUpdateAgentResponse() *UpdateAgentResponse {
	if x, ok := m.GetMsg().(*VizierMessage_UpdateAgentResponse); ok {
		return x.UpdateAgentResponse
	}
	return nil
}

func (m *VizierMessage) GetHeartbeat() *Heartbeat {
	if x, ok := m.GetMsg().(*VizierMessage_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (m *VizierMessage) GetHeartbeatAck() *HeartbeatAck {
	if x, ok := m.GetMsg().(*VizierMessage_HeartbeatAck); ok {
		return x.HeartbeatAck
	}
	return nil
}

func (m *VizierMessage) GetHeartbeatNack() *HeartbeatNack {
	if x, ok := m.GetMsg().(*VizierMessage_HeartbeatNack); ok {
		return x.HeartbeatNack
	}
	return nil
}

func (m *VizierMessage) GetExecuteQueryRequest() *ExecuteQueryRequest {
	if x, ok := m.GetMsg().(*VizierMessage_ExecuteQueryRequest); ok {
		return x.ExecuteQueryRequest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VizierMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VizierMessage_RegisterAgentRequest)(nil),
		(*VizierMessage_RegisterAgentResponse)(nil),
		(*VizierMessage_UpdateAgentRequest)(nil),
		(*VizierMessage_UpdateAgentResponse)(nil),
		(*VizierMessage_Heartbeat)(nil),
		(*VizierMessage_HeartbeatAck)(nil),
		(*VizierMessage_HeartbeatNack)(nil),
		(*VizierMessage_ExecuteQueryRequest)(nil),
	}
}

type RegisterAgentRequest struct {
	Info       *agentpb.AgentInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	UpdateInfo *AgentUpdateInfo   `protobuf:"bytes,2,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (m *RegisterAgentRequest) Reset()      { *m = RegisterAgentRequest{} }
func (*RegisterAgentRequest) ProtoMessage() {}
func (*RegisterAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{1}
}
func (m *RegisterAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentRequest.Merge(m, src)
}
func (m *RegisterAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentRequest proto.InternalMessageInfo

func (m *RegisterAgentRequest) GetInfo() *agentpb.AgentInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *RegisterAgentRequest) GetUpdateInfo() *AgentUpdateInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

type RegisterAgentResponse struct {
	ASID        uint32 `protobuf:"varint,1,opt,name=asid,proto3" json:"asid,omitempty"`
	ClusterCIDR string `protobuf:"bytes,2,opt,name=cluster_cidr,json=clusterCidr,proto3" json:"cluster_cidr,omitempty"`
}

func (m *RegisterAgentResponse) Reset()      { *m = RegisterAgentResponse{} }
func (*RegisterAgentResponse) ProtoMessage() {}
func (*RegisterAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{2}
}
func (m *RegisterAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentResponse.Merge(m, src)
}
func (m *RegisterAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentResponse proto.InternalMessageInfo

func (m *RegisterAgentResponse) GetASID() uint32 {
	if m != nil {
		return m.ASID
	}
	return 0
}

func (m *RegisterAgentResponse) GetClusterCIDR() string {
	if m != nil {
		return m.ClusterCIDR
	}
	return ""
}

type UpdateAgentRequest struct {
	Info       *agentpb.AgentInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	UpdateInfo *AgentUpdateInfo   `protobuf:"bytes,2,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (m *UpdateAgentRequest) Reset()      { *m = UpdateAgentRequest{} }
func (*UpdateAgentRequest) ProtoMessage() {}
func (*UpdateAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{3}
}
func (m *UpdateAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAgentRequest.Merge(m, src)
}
func (m *UpdateAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAgentRequest proto.InternalMessageInfo

func (m *UpdateAgentRequest) GetInfo() *agentpb.AgentInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *UpdateAgentRequest) GetUpdateInfo() *AgentUpdateInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

type UpdateAgentResponse struct {
}

func (m *UpdateAgentResponse) Reset()      { *m = UpdateAgentResponse{} }
func (*UpdateAgentResponse) ProtoMessage() {}
func (*UpdateAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{4}
}
func (m *UpdateAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAgentResponse.Merge(m, src)
}
func (m *UpdateAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAgentResponse proto.InternalMessageInfo

type AgentUpdateInfo struct {
	Schema            []*metadatapb.SchemaInfo        `protobuf:"bytes,2,rep,name=schema,proto3" json:"schema,omitempty"`
	Process           []*metadatapb.ProcessInfo       `protobuf:"bytes,3,rep,name=process,proto3" json:"process,omitempty"`
	ProcessCreated    []*metadatapb.ProcessCreated    `protobuf:"bytes,4,rep,name=process_created,json=processCreated,proto3" json:"process_created,omitempty"`
	ProcessTerminated []*metadatapb.ProcessTerminated `protobuf:"bytes,5,rep,name=process_terminated,json=processTerminated,proto3" json:"process_terminated,omitempty"`
	DoesUpdateSchema  bool                            `protobuf:"varint,6,opt,name=does_update_schema,json=doesUpdateSchema,proto3" json:"does_update_schema,omitempty"`
}

func (m *AgentUpdateInfo) Reset()      { *m = AgentUpdateInfo{} }
func (*AgentUpdateInfo) ProtoMessage() {}
func (*AgentUpdateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{5}
}
func (m *AgentUpdateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentUpdateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentUpdateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentUpdateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentUpdateInfo.Merge(m, src)
}
func (m *AgentUpdateInfo) XXX_Size() int {
	return m.Size()
}
func (m *AgentUpdateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentUpdateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AgentUpdateInfo proto.InternalMessageInfo

func (m *AgentUpdateInfo) GetSchema() []*metadatapb.SchemaInfo {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *AgentUpdateInfo) GetProcess() []*metadatapb.ProcessInfo {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *AgentUpdateInfo) GetProcessCreated() []*metadatapb.ProcessCreated {
	if m != nil {
		return m.ProcessCreated
	}
	return nil
}

func (m *AgentUpdateInfo) GetProcessTerminated() []*metadatapb.ProcessTerminated {
	if m != nil {
		return m.ProcessTerminated
	}
	return nil
}

func (m *AgentUpdateInfo) GetDoesUpdateSchema() bool {
	if m != nil {
		return m.DoesUpdateSchema
	}
	return false
}

type Heartbeat struct {
	AgentID        *proto1.UUID     `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Time           int64            `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	UpdateInfo     *AgentUpdateInfo `protobuf:"bytes,3,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
	SequenceNumber int64            `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (m *Heartbeat) Reset()      { *m = Heartbeat{} }
func (*Heartbeat) ProtoMessage() {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{6}
}
func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return m.Size()
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *Heartbeat) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Heartbeat) GetUpdateInfo() *AgentUpdateInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

func (m *Heartbeat) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type MetadataUpdateInfo struct {
	Updates     []*metadatapb.ResourceUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	ServiceCIDR string                       `protobuf:"bytes,2,opt,name=service_cidr,json=serviceCidr,proto3" json:"service_cidr,omitempty"`
}

func (m *MetadataUpdateInfo) Reset()      { *m = MetadataUpdateInfo{} }
func (*MetadataUpdateInfo) ProtoMessage() {}
func (*MetadataUpdateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{7}
}
func (m *MetadataUpdateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataUpdateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataUpdateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataUpdateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataUpdateInfo.Merge(m, src)
}
func (m *MetadataUpdateInfo) XXX_Size() int {
	return m.Size()
}
func (m *MetadataUpdateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataUpdateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataUpdateInfo proto.InternalMessageInfo

func (m *MetadataUpdateInfo) GetUpdates() []*metadatapb.ResourceUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *MetadataUpdateInfo) GetServiceCIDR() string {
	if m != nil {
		return m.ServiceCIDR
	}
	return ""
}

type HeartbeatAck struct {
	Time           int64               `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SequenceNumber int64               `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	UpdateInfo     *MetadataUpdateInfo `protobuf:"bytes,3,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (m *HeartbeatAck) Reset()      { *m = HeartbeatAck{} }
func (*HeartbeatAck) ProtoMessage() {}
func (*HeartbeatAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{8}
}
func (m *HeartbeatAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatAck.Merge(m, src)
}
func (m *HeartbeatAck) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatAck) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatAck.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatAck proto.InternalMessageInfo

func (m *HeartbeatAck) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HeartbeatAck) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *HeartbeatAck) GetUpdateInfo() *MetadataUpdateInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

type HeartbeatNack struct {
}

func (m *HeartbeatNack) Reset()      { *m = HeartbeatNack{} }
func (*HeartbeatNack) ProtoMessage() {}
func (*HeartbeatNack) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{9}
}
func (m *HeartbeatNack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatNack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatNack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatNack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatNack.Merge(m, src)
}
func (m *HeartbeatNack) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatNack) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatNack.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatNack proto.InternalMessageInfo

type ExecuteQueryRequest struct {
	QueryID  *proto1.UUID `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryStr string       `protobuf:"bytes,2,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
	Plan     *planpb.Plan `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (m *ExecuteQueryRequest) Reset()      { *m = ExecuteQueryRequest{} }
func (*ExecuteQueryRequest) ProtoMessage() {}
func (*ExecuteQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0046fd1b9991f89c, []int{10}
}
func (m *ExecuteQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteQueryRequest.Merge(m, src)
}
func (m *ExecuteQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteQueryRequest proto.InternalMessageInfo

func (m *ExecuteQueryRequest) GetQueryID() *proto1.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

func (m *ExecuteQueryRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

func (m *ExecuteQueryRequest) GetPlan() *planpb.Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func init() {
	proto.RegisterType((*VizierMessage)(nil), "pl.vizier.messages.VizierMessage")
	proto.RegisterType((*RegisterAgentRequest)(nil), "pl.vizier.messages.RegisterAgentRequest")
	proto.RegisterType((*RegisterAgentResponse)(nil), "pl.vizier.messages.RegisterAgentResponse")
	proto.RegisterType((*UpdateAgentRequest)(nil), "pl.vizier.messages.UpdateAgentRequest")
	proto.RegisterType((*UpdateAgentResponse)(nil), "pl.vizier.messages.UpdateAgentResponse")
	proto.RegisterType((*AgentUpdateInfo)(nil), "pl.vizier.messages.AgentUpdateInfo")
	proto.RegisterType((*Heartbeat)(nil), "pl.vizier.messages.Heartbeat")
	proto.RegisterType((*MetadataUpdateInfo)(nil), "pl.vizier.messages.MetadataUpdateInfo")
	proto.RegisterType((*HeartbeatAck)(nil), "pl.vizier.messages.HeartbeatAck")
	proto.RegisterType((*HeartbeatNack)(nil), "pl.vizier.messages.HeartbeatNack")
	proto.RegisterType((*ExecuteQueryRequest)(nil), "pl.vizier.messages.ExecuteQueryRequest")
}

func init() {
	proto.RegisterFile("src/vizier/messages/messagespb/messages.proto", fileDescriptor_0046fd1b9991f89c)
}

var fileDescriptor_0046fd1b9991f89c = []byte{
	// 1009 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xdf, 0x8d, 0x9d, 0x38, 0x19, 0x27, 0x31, 0x4c, 0x92, 0x62, 0x95, 0xb2, 0x09, 0xe6, 0x4f,
	0x4d, 0xa1, 0x6b, 0x29, 0x1c, 0xa8, 0x04, 0x14, 0xc5, 0x31, 0xaa, 0x8d, 0xd4, 0xaa, 0x9d, 0x10,
	0x0e, 0x91, 0x90, 0x99, 0xdd, 0x9d, 0xd8, 0xab, 0xd8, 0xbb, 0xdb, 0x99, 0xdd, 0xaa, 0x70, 0xe2,
	0x03, 0x70, 0xe0, 0x80, 0x84, 0x84, 0xf8, 0x00, 0x7c, 0x13, 0x90, 0xb8, 0xe4, 0xd8, 0x53, 0x44,
	0x36, 0x17, 0x2e, 0x48, 0xfd, 0x08, 0x68, 0xde, 0x8c, 0xd7, 0x8e, 0xbd, 0x8d, 0x11, 0xa7, 0x9e,
	0xfc, 0xe6, 0xed, 0xef, 0xf7, 0x7b, 0x6f, 0xde, 0xbc, 0x37, 0x1e, 0x74, 0x5b, 0x70, 0xb7, 0xf1,
	0xc4, 0xff, 0xce, 0x67, 0xbc, 0x31, 0x64, 0x42, 0xd0, 0x1e, 0x13, 0x99, 0x11, 0x39, 0x99, 0x69,
	0x47, 0x3c, 0x8c, 0x43, 0x8c, 0xa3, 0x81, 0xad, 0xd0, 0xf6, 0xe8, 0xcb, 0xf5, 0xdb, 0x3d, 0x3f,
	0xee, 0x27, 0x8e, 0xed, 0x86, 0xc3, 0x46, 0x2f, 0xec, 0x85, 0x0d, 0x80, 0x3a, 0xc9, 0x31, 0xac,
	0x60, 0x01, 0x96, 0x92, 0xb8, 0x7e, 0x43, 0x46, 0x74, 0x29, 0x0f, 0xc2, 0xb8, 0x11, 0x0d, 0x68,
	0x10, 0x39, 0xf0, 0xa3, 0xbf, 0xee, 0xc0, 0xd7, 0x70, 0x38, 0x0c, 0x83, 0x46, 0x92, 0xf8, 0x9e,
	0x12, 0x03, 0x53, 0x23, 0xea, 0x12, 0x21, 0xfa, 0x94, 0x33, 0xaf, 0x71, 0x72, 0x47, 0x26, 0x1b,
	0x53, 0x8f, 0xc6, 0x14, 0x92, 0x55, 0xa6, 0x46, 0xda, 0x13, 0x7b, 0x13, 0x8c, 0x3f, 0xf1, 0x5d,
	0x26, 0x46, 0x4c, 0xda, 0x63, 0x41, 0x1c, 0x39, 0xea, 0x57, 0xe1, 0x6b, 0x7f, 0x2e, 0xa2, 0xb5,
	0xaf, 0x00, 0x7e, 0x5f, 0xed, 0x0d, 0x7f, 0x83, 0xae, 0x71, 0xd6, 0xf3, 0x45, 0xcc, 0x78, 0x17,
	0x90, 0x5d, 0xce, 0x1e, 0x27, 0x4c, 0xc4, 0x55, 0x73, 0xc7, 0xac, 0x97, 0x77, 0xeb, 0xf6, 0x6c,
	0x3d, 0x6c, 0xa2, 0x19, 0x7b, 0x92, 0x40, 0x14, 0xbe, 0x6d, 0x90, 0x4d, 0x9e, 0xe3, 0xc7, 0x2e,
	0x7a, 0x6d, 0x26, 0x82, 0x88, 0xc2, 0x40, 0xb0, 0xea, 0x02, 0x84, 0x78, 0xef, 0x3f, 0x84, 0x50,
	0x84, 0xb6, 0x41, 0xb6, 0x78, 0xde, 0x07, 0x7c, 0x84, 0x36, 0x93, 0xc8, 0xa3, 0x31, 0x9b, 0xda,
	0x44, 0x01, 0x22, 0xbc, 0x9b, 0x17, 0xe1, 0x10, 0xf0, 0x53, 0x5b, 0xc0, 0xc9, 0x8c, 0x17, 0x7f,
	0x8d, 0xb6, 0xa6, 0xb4, 0x75, 0xfa, 0x45, 0x10, 0xbf, 0x39, 0x57, 0x3c, 0x4b, 0x7e, 0x23, 0x99,
	0x75, 0xe3, 0x4f, 0xd1, 0x4a, 0x9f, 0x51, 0x1e, 0x3b, 0x8c, 0xc6, 0xd5, 0x45, 0x90, 0x7c, 0x23,
	0x4f, 0xb2, 0x3d, 0x02, 0xb5, 0x0d, 0x32, 0x66, 0xe0, 0x7b, 0x68, 0x2d, 0x5b, 0x74, 0xa9, 0x7b,
	0x52, 0x5d, 0x02, 0x89, 0x9d, 0x2b, 0x25, 0xf6, 0xdc, 0x93, 0xb6, 0x41, 0x56, 0xfb, 0x13, 0x6b,
	0xfc, 0x05, 0x5a, 0x1f, 0x0b, 0x05, 0x52, 0xa9, 0x04, 0x4a, 0x6f, 0x5e, 0xa9, 0xf4, 0x80, 0x82,
	0xd4, 0x38, 0x07, 0xe9, 0x90, 0x25, 0x63, 0x4f, 0x99, 0x9b, 0xc4, 0xac, 0xfb, 0x38, 0x61, 0xfc,
	0xdb, 0xec, 0x3c, 0x96, 0x5f, 0x5c, 0xb2, 0xcf, 0x15, 0xe1, 0x91, 0xc4, 0x8f, 0x0f, 0x64, 0x83,
	0xcd, 0xba, 0x9b, 0x8b, 0xa8, 0x30, 0x14, 0xbd, 0xda, 0xaf, 0x26, 0xda, 0xcc, 0x6b, 0x45, 0x7c,
	0x17, 0x15, 0xfd, 0xe0, 0x38, 0xd4, 0x2d, 0x7c, 0x6b, 0x22, 0xda, 0x68, 0x48, 0x6c, 0x35, 0x24,
	0xb6, 0x1a, 0x0e, 0x20, 0x77, 0x82, 0xe3, 0x90, 0x00, 0x0f, 0xb7, 0x50, 0x59, 0x9f, 0x38, 0xc8,
	0xa8, 0x36, 0x7d, 0x2b, 0x2f, 0x69, 0x60, 0xaa, 0xc3, 0x06, 0x3e, 0x4a, 0x32, 0xbb, 0xe6, 0xa3,
	0xad, 0xdc, 0x2e, 0xc6, 0x37, 0x50, 0x91, 0x0a, 0xdf, 0x83, 0xf4, 0xd6, 0x9a, 0xcb, 0xe9, 0xd9,
	0x76, 0x71, 0xef, 0xa0, 0xd3, 0x22, 0xe0, 0xc5, 0xbb, 0x68, 0xd5, 0x1d, 0x24, 0x30, 0x2e, 0xae,
	0xef, 0x71, 0x88, 0xbe, 0xd2, 0xac, 0xa4, 0x67, 0xdb, 0xe5, 0x7d, 0xe5, 0xdf, 0xef, 0xb4, 0x08,
	0x29, 0x6b, 0xd0, 0xbe, 0xef, 0xf1, 0xda, 0x2f, 0x26, 0xc2, 0xb3, 0xfd, 0xfc, 0x92, 0xd4, 0x61,
	0x0b, 0x6d, 0xe4, 0x8c, 0x43, 0xed, 0x9f, 0x05, 0x54, 0x99, 0xa2, 0xe1, 0x4f, 0xd0, 0x92, 0x70,
	0xfb, 0x6c, 0x48, 0xab, 0x0b, 0x3b, 0x85, 0x7a, 0x79, 0xf7, 0x6d, 0x19, 0x4b, 0xa7, 0x78, 0x72,
	0x47, 0xd8, 0xe3, 0x9b, 0xd0, 0x3e, 0x00, 0x1c, 0x04, 0xd3, 0x1c, 0xfc, 0x19, 0x2a, 0x45, 0x3c,
	0x74, 0x99, 0x10, 0xd5, 0x02, 0xd0, 0xdf, 0x79, 0x31, 0xfd, 0xa1, 0x02, 0x02, 0x7f, 0xc4, 0xc2,
	0x8f, 0x50, 0x45, 0x9b, 0x5d, 0x97, 0x33, 0x1a, 0x33, 0xaf, 0x5a, 0x04, 0xa1, 0xfa, 0x5c, 0xa1,
	0x7d, 0x85, 0x27, 0xeb, 0xd1, 0xa5, 0x35, 0x3e, 0x42, 0x78, 0x24, 0x19, 0x33, 0x3e, 0xf4, 0x03,
	0x50, 0x5d, 0x04, 0xd5, 0xf7, 0xe7, 0xaa, 0x7e, 0x99, 0x51, 0xc8, 0xab, 0xd1, 0xb4, 0x0b, 0x7f,
	0x80, 0xb0, 0x17, 0x32, 0xd1, 0xd5, 0x67, 0xa4, 0x2b, 0x27, 0xe7, 0x7f, 0x99, 0xbc, 0x22, 0xbf,
	0xa8, 0xca, 0xaa, 0x4a, 0xd5, 0x7e, 0x37, 0xd1, 0x4a, 0x36, 0xb6, 0xf8, 0x23, 0xb4, 0xac, 0x6e,
	0x33, 0xdd, 0x87, 0xe5, 0xdd, 0x8a, 0xcc, 0x46, 0xfe, 0x0b, 0x45, 0x8e, 0x7d, 0x78, 0xd8, 0x69,
	0x35, 0xcb, 0xe9, 0xd9, 0x76, 0x49, 0xb5, 0x44, 0x8b, 0x94, 0x00, 0xdd, 0xf1, 0x30, 0x46, 0xc5,
	0xd8, 0x1f, 0xaa, 0xbb, 0xbb, 0x40, 0xc0, 0x9e, 0xee, 0x93, 0xc2, 0xff, 0xea, 0x13, 0x7c, 0x13,
	0x55, 0x84, 0x6c, 0xdc, 0xc0, 0x65, 0xdd, 0x20, 0x19, 0x3a, 0x8c, 0xc3, 0x0d, 0x5b, 0x20, 0xeb,
	0x23, 0xf7, 0x03, 0xf0, 0xd6, 0x7e, 0x30, 0x11, 0xbe, 0xaf, 0x6b, 0x35, 0xd1, 0x3c, 0x4d, 0x54,
	0x52, 0x6a, 0xa2, 0x6a, 0xce, 0x3b, 0x35, 0xc2, 0x44, 0x98, 0x70, 0x97, 0x29, 0x3a, 0x19, 0x11,
	0xe5, 0xf0, 0xe9, 0xd1, 0x98, 0x19, 0xbe, 0x03, 0xe5, 0x57, 0xc3, 0xa7, 0x41, 0x30, 0x7c, 0x3f,
	0x99, 0x68, 0x75, 0xf2, 0x66, 0xcd, 0x4a, 0x64, 0x4e, 0x94, 0x28, 0x67, 0x73, 0x0b, 0x79, 0x9b,
	0xc3, 0xf7, 0xf2, 0x6a, 0x99, 0xfb, 0x07, 0x36, 0x5b, 0x82, 0x4b, 0x63, 0x57, 0x41, 0x6b, 0x97,
	0x6e, 0xe9, 0xda, 0xcf, 0x26, 0xda, 0xc8, 0xb9, 0x64, 0x65, 0x2b, 0xa8, 0x4b, 0x7a, 0x4e, 0x2b,
	0x00, 0x49, 0xb6, 0x02, 0xa0, 0x3b, 0x1e, 0x7e, 0x1d, 0xad, 0x28, 0xa2, 0x88, 0x75, 0xa5, 0x88,
	0x52, 0x3a, 0x88, 0x39, 0xbe, 0x85, 0x8a, 0xf2, 0xd1, 0xa3, 0x37, 0x70, 0x4d, 0x2a, 0xaa, 0x27,
	0x91, 0xad, 0x9e, 0x44, 0xf6, 0xc3, 0x01, 0x0d, 0x08, 0x60, 0x9a, 0xf1, 0xe9, 0xb9, 0x65, 0x3c,
	0x3b, 0xb7, 0x8c, 0xe7, 0xe7, 0x96, 0xf9, 0x7d, 0x6a, 0x99, 0xbf, 0xa5, 0x96, 0xf9, 0x47, 0x6a,
	0x99, 0xa7, 0xa9, 0x65, 0xfe, 0x95, 0x5a, 0xe6, 0xdf, 0xa9, 0x65, 0x3c, 0x4f, 0x2d, 0xf3, 0xc7,
	0x0b, 0xcb, 0x38, 0xbd, 0xb0, 0x8c, 0x67, 0x17, 0x96, 0x71, 0x74, 0x37, 0xf2, 0x9f, 0xfa, 0x6c,
	0x40, 0x1d, 0x61, 0x53, 0xbf, 0x91, 0x2d, 0x1a, 0x57, 0xbf, 0xf7, 0x3e, 0x1e, 0x99, 0xce, 0x12,
	0xbc, 0x89, 0x3e, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xd3, 0x45, 0xf9, 0x21, 0x0a, 0x00,
	0x00,
}

func (this *VizierMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage)
	if !ok {
		that2, ok := that.(VizierMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *VizierMessage_RegisterAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_RegisterAgentRequest)
	if !ok {
		that2, ok := that.(VizierMessage_RegisterAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegisterAgentRequest.Equal(that1.RegisterAgentRequest) {
		return false
	}
	return true
}
func (this *VizierMessage_RegisterAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_RegisterAgentResponse)
	if !ok {
		that2, ok := that.(VizierMessage_RegisterAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegisterAgentResponse.Equal(that1.RegisterAgentResponse) {
		return false
	}
	return true
}
func (this *VizierMessage_UpdateAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_UpdateAgentRequest)
	if !ok {
		that2, ok := that.(VizierMessage_UpdateAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateAgentRequest.Equal(that1.UpdateAgentRequest) {
		return false
	}
	return true
}
func (this *VizierMessage_UpdateAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_UpdateAgentResponse)
	if !ok {
		that2, ok := that.(VizierMessage_UpdateAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateAgentResponse.Equal(that1.UpdateAgentResponse) {
		return false
	}
	return true
}
func (this *VizierMessage_Heartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_Heartbeat)
	if !ok {
		that2, ok := that.(VizierMessage_Heartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Heartbeat.Equal(that1.Heartbeat) {
		return false
	}
	return true
}
func (this *VizierMessage_HeartbeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_HeartbeatAck)
	if !ok {
		that2, ok := that.(VizierMessage_HeartbeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeartbeatAck.Equal(that1.HeartbeatAck) {
		return false
	}
	return true
}
func (this *VizierMessage_HeartbeatNack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_HeartbeatNack)
	if !ok {
		that2, ok := that.(VizierMessage_HeartbeatNack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeartbeatNack.Equal(that1.HeartbeatNack) {
		return false
	}
	return true
}
func (this *VizierMessage_ExecuteQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_ExecuteQueryRequest)
	if !ok {
		that2, ok := that.(VizierMessage_ExecuteQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecuteQueryRequest.Equal(that1.ExecuteQueryRequest) {
		return false
	}
	return true
}
func (this *RegisterAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentRequest)
	if !ok {
		that2, ok := that.(RegisterAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.UpdateInfo.Equal(that1.UpdateInfo) {
		return false
	}
	return true
}
func (this *RegisterAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentResponse)
	if !ok {
		that2, ok := that.(RegisterAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ASID != that1.ASID {
		return false
	}
	if this.ClusterCIDR != that1.ClusterCIDR {
		return false
	}
	return true
}
func (this *UpdateAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAgentRequest)
	if !ok {
		that2, ok := that.(UpdateAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.UpdateInfo.Equal(that1.UpdateInfo) {
		return false
	}
	return true
}
func (this *UpdateAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAgentResponse)
	if !ok {
		that2, ok := that.(UpdateAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AgentUpdateInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentUpdateInfo)
	if !ok {
		that2, ok := that.(AgentUpdateInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schema) != len(that1.Schema) {
		return false
	}
	for i := range this.Schema {
		if !this.Schema[i].Equal(that1.Schema[i]) {
			return false
		}
	}
	if len(this.Process) != len(that1.Process) {
		return false
	}
	for i := range this.Process {
		if !this.Process[i].Equal(that1.Process[i]) {
			return false
		}
	}
	if len(this.ProcessCreated) != len(that1.ProcessCreated) {
		return false
	}
	for i := range this.ProcessCreated {
		if !this.ProcessCreated[i].Equal(that1.ProcessCreated[i]) {
			return false
		}
	}
	if len(this.ProcessTerminated) != len(that1.ProcessTerminated) {
		return false
	}
	for i := range this.ProcessTerminated {
		if !this.ProcessTerminated[i].Equal(that1.ProcessTerminated[i]) {
			return false
		}
	}
	if this.DoesUpdateSchema != that1.DoesUpdateSchema {
		return false
	}
	return true
}
func (this *Heartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Heartbeat)
	if !ok {
		that2, ok := that.(Heartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if !this.UpdateInfo.Equal(that1.UpdateInfo) {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	return true
}
func (this *MetadataUpdateInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataUpdateInfo)
	if !ok {
		that2, ok := that.(MetadataUpdateInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Updates) != len(that1.Updates) {
		return false
	}
	for i := range this.Updates {
		if !this.Updates[i].Equal(that1.Updates[i]) {
			return false
		}
	}
	if this.ServiceCIDR != that1.ServiceCIDR {
		return false
	}
	return true
}
func (this *HeartbeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeartbeatAck)
	if !ok {
		that2, ok := that.(HeartbeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	if !this.UpdateInfo.Equal(that1.UpdateInfo) {
		return false
	}
	return true
}
func (this *HeartbeatNack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeartbeatNack)
	if !ok {
		that2, ok := that.(HeartbeatNack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ExecuteQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteQueryRequest)
	if !ok {
		that2, ok := that.(ExecuteQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	if !this.Plan.Equal(that1.Plan) {
		return false
	}
	return true
}
func (this *VizierMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&messages.VizierMessage{")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierMessage_RegisterAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_RegisterAgentRequest{` +
		`RegisterAgentRequest:` + fmt.Sprintf("%#v", this.RegisterAgentRequest) + `}`}, ", ")
	return s
}
func (this *VizierMessage_RegisterAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_RegisterAgentResponse{` +
		`RegisterAgentResponse:` + fmt.Sprintf("%#v", this.RegisterAgentResponse) + `}`}, ", ")
	return s
}
func (this *VizierMessage_UpdateAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_UpdateAgentRequest{` +
		`UpdateAgentRequest:` + fmt.Sprintf("%#v", this.UpdateAgentRequest) + `}`}, ", ")
	return s
}
func (this *VizierMessage_UpdateAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_UpdateAgentResponse{` +
		`UpdateAgentResponse:` + fmt.Sprintf("%#v", this.UpdateAgentResponse) + `}`}, ", ")
	return s
}
func (this *VizierMessage_Heartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_Heartbeat{` +
		`Heartbeat:` + fmt.Sprintf("%#v", this.Heartbeat) + `}`}, ", ")
	return s
}
func (this *VizierMessage_HeartbeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_HeartbeatAck{` +
		`HeartbeatAck:` + fmt.Sprintf("%#v", this.HeartbeatAck) + `}`}, ", ")
	return s
}
func (this *VizierMessage_HeartbeatNack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_HeartbeatNack{` +
		`HeartbeatNack:` + fmt.Sprintf("%#v", this.HeartbeatNack) + `}`}, ", ")
	return s
}
func (this *VizierMessage_ExecuteQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_ExecuteQueryRequest{` +
		`ExecuteQueryRequest:` + fmt.Sprintf("%#v", this.ExecuteQueryRequest) + `}`}, ", ")
	return s
}
func (this *RegisterAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.RegisterAgentRequest{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.UpdateInfo != nil {
		s = append(s, "UpdateInfo: "+fmt.Sprintf("%#v", this.UpdateInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.RegisterAgentResponse{")
	s = append(s, "ASID: "+fmt.Sprintf("%#v", this.ASID)+",\n")
	s = append(s, "ClusterCIDR: "+fmt.Sprintf("%#v", this.ClusterCIDR)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.UpdateAgentRequest{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.UpdateInfo != nil {
		s = append(s, "UpdateInfo: "+fmt.Sprintf("%#v", this.UpdateInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&messages.UpdateAgentResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentUpdateInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&messages.AgentUpdateInfo{")
	if this.Schema != nil {
		s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	}
	if this.Process != nil {
		s = append(s, "Process: "+fmt.Sprintf("%#v", this.Process)+",\n")
	}
	if this.ProcessCreated != nil {
		s = append(s, "ProcessCreated: "+fmt.Sprintf("%#v", this.ProcessCreated)+",\n")
	}
	if this.ProcessTerminated != nil {
		s = append(s, "ProcessTerminated: "+fmt.Sprintf("%#v", this.ProcessTerminated)+",\n")
	}
	s = append(s, "DoesUpdateSchema: "+fmt.Sprintf("%#v", this.DoesUpdateSchema)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Heartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.Heartbeat{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	if this.UpdateInfo != nil {
		s = append(s, "UpdateInfo: "+fmt.Sprintf("%#v", this.UpdateInfo)+",\n")
	}
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetadataUpdateInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.MetadataUpdateInfo{")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	s = append(s, "ServiceCIDR: "+fmt.Sprintf("%#v", this.ServiceCIDR)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeartbeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.HeartbeatAck{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	if this.UpdateInfo != nil {
		s = append(s, "UpdateInfo: "+fmt.Sprintf("%#v", this.UpdateInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeartbeatNack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&messages.HeartbeatNack{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.ExecuteQueryRequest{")
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	if this.Plan != nil {
		s = append(s, "Plan: "+fmt.Sprintf("%#v", this.Plan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessages(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VizierMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VizierMessage_RegisterAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierMessage_RegisterAgentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisterAgentRequest != nil {
		{
			size, err := m.RegisterAgentRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *VizierMessage_RegisterAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierMessage_RegisterAgentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisterAgentResponse != nil {
		{
			size, err := m.RegisterAgentResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VizierMessage_UpdateAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierMessage_UpdateAgentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateAgentRequest != nil {
		{
			size, err := m.UpdateAgentRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *VizierMessage_UpdateAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierMessage_UpdateAgentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateAgentResponse != nil {
		{
			size, err := m.UpdateAgentResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *VizierMessage_Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierMessage_Heartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Heartbeat != nil {
		{
			size, err := m.Heartbeat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *VizierMessage_HeartbeatAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierMessage_HeartbeatAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HeartbeatAck != nil {
		{
			size, err := m.HeartbeatAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VizierMessage_HeartbeatNack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierMessage_HeartbeatNack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HeartbeatNack != nil {
		{
			size, err := m.HeartbeatNack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *VizierMessage_ExecuteQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierMessage_ExecuteQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecuteQueryRequest != nil {
		{
			size, err := m.ExecuteQueryRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *RegisterAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterAgentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateInfo != nil {
		{
			size, err := m.UpdateInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterAgentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterCIDR) > 0 {
		i -= len(m.ClusterCIDR)
		copy(dAtA[i:], m.ClusterCIDR)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ClusterCIDR)))
		i--
		dAtA[i] = 0x12
	}
	if m.ASID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.ASID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAgentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateInfo != nil {
		{
			size, err := m.UpdateInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAgentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgentUpdateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentUpdateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentUpdateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DoesUpdateSchema {
		i--
		if m.DoesUpdateSchema {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ProcessTerminated) > 0 {
		for iNdEx := len(m.ProcessTerminated) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProcessTerminated[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ProcessCreated) > 0 {
		for iNdEx := len(m.ProcessCreated) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProcessCreated[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Process) > 0 {
		for iNdEx := len(m.Process) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Process[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Schema) > 0 {
		for iNdEx := len(m.Schema) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schema[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *Heartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Heartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.UpdateInfo != nil {
		{
			size, err := m.UpdateInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Time != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.AgentID != nil {
		{
			size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataUpdateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataUpdateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataUpdateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceCIDR) > 0 {
		i -= len(m.ServiceCIDR)
		copy(dAtA[i:], m.ServiceCIDR)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ServiceCIDR)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HeartbeatAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateInfo != nil {
		{
			size, err := m.UpdateInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeartbeatNack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatNack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatNack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ExecuteQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Plan != nil {
		{
			size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QueryStr) > 0 {
		i -= len(m.QueryStr)
		copy(dAtA[i:], m.QueryStr)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.QueryStr)))
		i--
		dAtA[i] = 0x12
	}
	if m.QueryID != nil {
		{
			size, err := m.QueryID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VizierMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *VizierMessage_RegisterAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterAgentRequest != nil {
		l = m.RegisterAgentRequest.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_RegisterAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterAgentResponse != nil {
		l = m.RegisterAgentResponse.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_UpdateAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateAgentRequest != nil {
		l = m.UpdateAgentRequest.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_UpdateAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateAgentResponse != nil {
		l = m.UpdateAgentResponse.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Heartbeat != nil {
		l = m.Heartbeat.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_HeartbeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartbeatAck != nil {
		l = m.HeartbeatAck.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_HeartbeatNack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartbeatNack != nil {
		l = m.HeartbeatNack.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_ExecuteQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecuteQueryRequest != nil {
		l = m.ExecuteQueryRequest.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *RegisterAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.UpdateInfo != nil {
		l = m.UpdateInfo.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *RegisterAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ASID != 0 {
		n += 1 + sovMessages(uint64(m.ASID))
	}
	l = len(m.ClusterCIDR)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *UpdateAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.UpdateInfo != nil {
		l = m.UpdateInfo.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *UpdateAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentUpdateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schema) > 0 {
		for _, e := range m.Schema {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if len(m.Process) > 0 {
		for _, e := range m.Process {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if len(m.ProcessCreated) > 0 {
		for _, e := range m.ProcessCreated {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if len(m.ProcessTerminated) > 0 {
		for _, e := range m.ProcessTerminated {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.DoesUpdateSchema {
		n += 2
	}
	return n
}

func (m *Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovMessages(uint64(m.Time))
	}
	if m.UpdateInfo != nil {
		l = m.UpdateInfo.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovMessages(uint64(m.SequenceNumber))
	}
	return n
}

func (m *MetadataUpdateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	l = len(m.ServiceCIDR)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *HeartbeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovMessages(uint64(m.Time))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovMessages(uint64(m.SequenceNumber))
	}
	if m.UpdateInfo != nil {
		l = m.UpdateInfo.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *HeartbeatNack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExecuteQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Plan != nil {
		l = m.Plan.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VizierMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_RegisterAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_RegisterAgentRequest{`,
		`RegisterAgentRequest:` + strings.Replace(fmt.Sprintf("%v", this.RegisterAgentRequest), "RegisterAgentRequest", "RegisterAgentRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_RegisterAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_RegisterAgentResponse{`,
		`RegisterAgentResponse:` + strings.Replace(fmt.Sprintf("%v", this.RegisterAgentResponse), "RegisterAgentResponse", "RegisterAgentResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_UpdateAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_UpdateAgentRequest{`,
		`UpdateAgentRequest:` + strings.Replace(fmt.Sprintf("%v", this.UpdateAgentRequest), "UpdateAgentRequest", "UpdateAgentRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_UpdateAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_UpdateAgentResponse{`,
		`UpdateAgentResponse:` + strings.Replace(fmt.Sprintf("%v", this.UpdateAgentResponse), "UpdateAgentResponse", "UpdateAgentResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_Heartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_Heartbeat{`,
		`Heartbeat:` + strings.Replace(fmt.Sprintf("%v", this.Heartbeat), "Heartbeat", "Heartbeat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_HeartbeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_HeartbeatAck{`,
		`HeartbeatAck:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatAck), "HeartbeatAck", "HeartbeatAck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_HeartbeatNack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_HeartbeatNack{`,
		`HeartbeatNack:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatNack), "HeartbeatNack", "HeartbeatNack", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_ExecuteQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_ExecuteQueryRequest{`,
		`ExecuteQueryRequest:` + strings.Replace(fmt.Sprintf("%v", this.ExecuteQueryRequest), "ExecuteQueryRequest", "ExecuteQueryRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentRequest{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "AgentInfo", "agentpb.AgentInfo", 1) + `,`,
		`UpdateInfo:` + strings.Replace(this.UpdateInfo.String(), "AgentUpdateInfo", "AgentUpdateInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentResponse{`,
		`ASID:` + fmt.Sprintf("%v", this.ASID) + `,`,
		`ClusterCIDR:` + fmt.Sprintf("%v", this.ClusterCIDR) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAgentRequest{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "AgentInfo", "agentpb.AgentInfo", 1) + `,`,
		`UpdateInfo:` + strings.Replace(this.UpdateInfo.String(), "AgentUpdateInfo", "AgentUpdateInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAgentResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AgentUpdateInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSchema := "[]*SchemaInfo{"
	for _, f := range this.Schema {
		repeatedStringForSchema += strings.Replace(fmt.Sprintf("%v", f), "SchemaInfo", "metadatapb.SchemaInfo", 1) + ","
	}
	repeatedStringForSchema += "}"
	repeatedStringForProcess := "[]*ProcessInfo{"
	for _, f := range this.Process {
		repeatedStringForProcess += strings.Replace(fmt.Sprintf("%v", f), "ProcessInfo", "metadatapb.ProcessInfo", 1) + ","
	}
	repeatedStringForProcess += "}"
	repeatedStringForProcessCreated := "[]*ProcessCreated{"
	for _, f := range this.ProcessCreated {
		repeatedStringForProcessCreated += strings.Replace(fmt.Sprintf("%v", f), "ProcessCreated", "metadatapb.ProcessCreated", 1) + ","
	}
	repeatedStringForProcessCreated += "}"
	repeatedStringForProcessTerminated := "[]*ProcessTerminated{"
	for _, f := range this.ProcessTerminated {
		repeatedStringForProcessTerminated += strings.Replace(fmt.Sprintf("%v", f), "ProcessTerminated", "metadatapb.ProcessTerminated", 1) + ","
	}
	repeatedStringForProcessTerminated += "}"
	s := strings.Join([]string{`&AgentUpdateInfo{`,
		`Schema:` + repeatedStringForSchema + `,`,
		`Process:` + repeatedStringForProcess + `,`,
		`ProcessCreated:` + repeatedStringForProcessCreated + `,`,
		`ProcessTerminated:` + repeatedStringForProcessTerminated + `,`,
		`DoesUpdateSchema:` + fmt.Sprintf("%v", this.DoesUpdateSchema) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Heartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Heartbeat{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`UpdateInfo:` + strings.Replace(this.UpdateInfo.String(), "AgentUpdateInfo", "AgentUpdateInfo", 1) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetadataUpdateInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdates := "[]*ResourceUpdate{"
	for _, f := range this.Updates {
		repeatedStringForUpdates += strings.Replace(fmt.Sprintf("%v", f), "ResourceUpdate", "metadatapb.ResourceUpdate", 1) + ","
	}
	repeatedStringForUpdates += "}"
	s := strings.Join([]string{`&MetadataUpdateInfo{`,
		`Updates:` + repeatedStringForUpdates + `,`,
		`ServiceCIDR:` + fmt.Sprintf("%v", this.ServiceCIDR) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartbeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartbeatAck{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`UpdateInfo:` + strings.Replace(this.UpdateInfo.String(), "MetadataUpdateInfo", "MetadataUpdateInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartbeatNack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartbeatNack{`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteQueryRequest{`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "proto1.UUID", 1) + `,`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`Plan:` + strings.Replace(fmt.Sprintf("%v", this.Plan), "Plan", "planpb.Plan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VizierMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterAgentRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterAgentRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_RegisterAgentRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterAgentResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterAgentResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_RegisterAgentResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAgentRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateAgentRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_UpdateAgentRequest{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAgentResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateAgentResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_UpdateAgentResponse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Heartbeat{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_Heartbeat{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeartbeatAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_HeartbeatAck{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatNack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeartbeatNack{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_HeartbeatNack{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteQueryRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecuteQueryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_ExecuteQueryRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &agentpb.AgentInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateInfo == nil {
				m.UpdateInfo = &AgentUpdateInfo{}
			}
			if err := m.UpdateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASID", wireType)
			}
			m.ASID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ASID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &agentpb.AgentInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateInfo == nil {
				m.UpdateInfo = &AgentUpdateInfo{}
			}
			if err := m.UpdateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentUpdateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentUpdateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentUpdateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = append(m.Schema, &metadatapb.SchemaInfo{})
			if err := m.Schema[len(m.Schema)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Process = append(m.Process, &metadatapb.ProcessInfo{})
			if err := m.Process[len(m.Process)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessCreated = append(m.ProcessCreated, &metadatapb.ProcessCreated{})
			if err := m.ProcessCreated[len(m.ProcessCreated)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessTerminated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessTerminated = append(m.ProcessTerminated, &metadatapb.ProcessTerminated{})
			if err := m.ProcessTerminated[len(m.ProcessTerminated)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoesUpdateSchema", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoesUpdateSchema = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Heartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateInfo == nil {
				m.UpdateInfo = &AgentUpdateInfo{}
			}
			if err := m.UpdateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataUpdateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataUpdateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataUpdateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &metadatapb.ResourceUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateInfo == nil {
				m.UpdateInfo = &MetadataUpdateInfo{}
			}
			if err := m.UpdateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatNack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatNack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatNack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &proto1.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plan == nil {
				m.Plan = &planpb.Plan{}
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
