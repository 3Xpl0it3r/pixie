// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/messages/messagespb/messages.proto

package messages // import "pixielabs.ai/pixielabs/src/vizier/messages/messagespb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
import proto2 "pixielabs.ai/pixielabs/src/table_store/proto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VizierMessage struct {
	// Types that are valid to be assigned to Msg:
	//	*VizierMessage_RegisterAgentRequest
	//	*VizierMessage_RegisterAgentResponse
	//	*VizierMessage_UpdateAgentRequest
	//	*VizierMessage_UpdateAgentResponse
	//	*VizierMessage_Heartbeat
	//	*VizierMessage_HeartbeatAck
	//	*VizierMessage_HeartbeatNack
	//	*VizierMessage_ExecuteQueryRequest
	Msg isVizierMessage_Msg `protobuf_oneof:"msg"`
}

func (m *VizierMessage) Reset()      { *m = VizierMessage{} }
func (*VizierMessage) ProtoMessage() {}
func (*VizierMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{0}
}
func (m *VizierMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VizierMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierMessage.Merge(dst, src)
}
func (m *VizierMessage) XXX_Size() int {
	return m.Size()
}
func (m *VizierMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VizierMessage proto.InternalMessageInfo

type isVizierMessage_Msg interface {
	isVizierMessage_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VizierMessage_RegisterAgentRequest struct {
	RegisterAgentRequest *RegisterAgentRequest `protobuf:"bytes,1,opt,name=register_agent_request,json=registerAgentRequest,proto3,oneof"`
}
type VizierMessage_RegisterAgentResponse struct {
	RegisterAgentResponse *RegisterAgentResponse `protobuf:"bytes,2,opt,name=register_agent_response,json=registerAgentResponse,proto3,oneof"`
}
type VizierMessage_UpdateAgentRequest struct {
	UpdateAgentRequest *UpdateAgentRequest `protobuf:"bytes,3,opt,name=update_agent_request,json=updateAgentRequest,proto3,oneof"`
}
type VizierMessage_UpdateAgentResponse struct {
	UpdateAgentResponse *UpdateAgentResponse `protobuf:"bytes,4,opt,name=update_agent_response,json=updateAgentResponse,proto3,oneof"`
}
type VizierMessage_Heartbeat struct {
	Heartbeat *HeartBeat `protobuf:"bytes,5,opt,name=heartbeat,proto3,oneof"`
}
type VizierMessage_HeartbeatAck struct {
	HeartbeatAck *HeartBeatAck `protobuf:"bytes,6,opt,name=heartbeat_ack,json=heartbeatAck,proto3,oneof"`
}
type VizierMessage_HeartbeatNack struct {
	HeartbeatNack *HeartBeatNack `protobuf:"bytes,7,opt,name=heartbeat_nack,json=heartbeatNack,proto3,oneof"`
}
type VizierMessage_ExecuteQueryRequest struct {
	ExecuteQueryRequest *ExecuteQueryRequest `protobuf:"bytes,8,opt,name=execute_query_request,json=executeQueryRequest,proto3,oneof"`
}

func (*VizierMessage_RegisterAgentRequest) isVizierMessage_Msg()  {}
func (*VizierMessage_RegisterAgentResponse) isVizierMessage_Msg() {}
func (*VizierMessage_UpdateAgentRequest) isVizierMessage_Msg()    {}
func (*VizierMessage_UpdateAgentResponse) isVizierMessage_Msg()   {}
func (*VizierMessage_Heartbeat) isVizierMessage_Msg()             {}
func (*VizierMessage_HeartbeatAck) isVizierMessage_Msg()          {}
func (*VizierMessage_HeartbeatNack) isVizierMessage_Msg()         {}
func (*VizierMessage_ExecuteQueryRequest) isVizierMessage_Msg()   {}

func (m *VizierMessage) GetMsg() isVizierMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *VizierMessage) GetRegisterAgentRequest() *RegisterAgentRequest {
	if x, ok := m.GetMsg().(*VizierMessage_RegisterAgentRequest); ok {
		return x.RegisterAgentRequest
	}
	return nil
}

func (m *VizierMessage) GetRegisterAgentResponse() *RegisterAgentResponse {
	if x, ok := m.GetMsg().(*VizierMessage_RegisterAgentResponse); ok {
		return x.RegisterAgentResponse
	}
	return nil
}

func (m *VizierMessage) GetUpdateAgentRequest() *UpdateAgentRequest {
	if x, ok := m.GetMsg().(*VizierMessage_UpdateAgentRequest); ok {
		return x.UpdateAgentRequest
	}
	return nil
}

func (m *VizierMessage) GetUpdateAgentResponse() *UpdateAgentResponse {
	if x, ok := m.GetMsg().(*VizierMessage_UpdateAgentResponse); ok {
		return x.UpdateAgentResponse
	}
	return nil
}

func (m *VizierMessage) GetHeartbeat() *HeartBeat {
	if x, ok := m.GetMsg().(*VizierMessage_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (m *VizierMessage) GetHeartbeatAck() *HeartBeatAck {
	if x, ok := m.GetMsg().(*VizierMessage_HeartbeatAck); ok {
		return x.HeartbeatAck
	}
	return nil
}

func (m *VizierMessage) GetHeartbeatNack() *HeartBeatNack {
	if x, ok := m.GetMsg().(*VizierMessage_HeartbeatNack); ok {
		return x.HeartbeatNack
	}
	return nil
}

func (m *VizierMessage) GetExecuteQueryRequest() *ExecuteQueryRequest {
	if x, ok := m.GetMsg().(*VizierMessage_ExecuteQueryRequest); ok {
		return x.ExecuteQueryRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VizierMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VizierMessage_OneofMarshaler, _VizierMessage_OneofUnmarshaler, _VizierMessage_OneofSizer, []interface{}{
		(*VizierMessage_RegisterAgentRequest)(nil),
		(*VizierMessage_RegisterAgentResponse)(nil),
		(*VizierMessage_UpdateAgentRequest)(nil),
		(*VizierMessage_UpdateAgentResponse)(nil),
		(*VizierMessage_Heartbeat)(nil),
		(*VizierMessage_HeartbeatAck)(nil),
		(*VizierMessage_HeartbeatNack)(nil),
		(*VizierMessage_ExecuteQueryRequest)(nil),
	}
}

func _VizierMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VizierMessage)
	// msg
	switch x := m.Msg.(type) {
	case *VizierMessage_RegisterAgentRequest:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterAgentRequest); err != nil {
			return err
		}
	case *VizierMessage_RegisterAgentResponse:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterAgentResponse); err != nil {
			return err
		}
	case *VizierMessage_UpdateAgentRequest:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateAgentRequest); err != nil {
			return err
		}
	case *VizierMessage_UpdateAgentResponse:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateAgentResponse); err != nil {
			return err
		}
	case *VizierMessage_Heartbeat:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Heartbeat); err != nil {
			return err
		}
	case *VizierMessage_HeartbeatAck:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeartbeatAck); err != nil {
			return err
		}
	case *VizierMessage_HeartbeatNack:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeartbeatNack); err != nil {
			return err
		}
	case *VizierMessage_ExecuteQueryRequest:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecuteQueryRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VizierMessage.Msg has unexpected type %T", x)
	}
	return nil
}

func _VizierMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VizierMessage)
	switch tag {
	case 1: // msg.register_agent_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterAgentRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierMessage_RegisterAgentRequest{msg}
		return true, err
	case 2: // msg.register_agent_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterAgentResponse)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierMessage_RegisterAgentResponse{msg}
		return true, err
	case 3: // msg.update_agent_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateAgentRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierMessage_UpdateAgentRequest{msg}
		return true, err
	case 4: // msg.update_agent_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateAgentResponse)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierMessage_UpdateAgentResponse{msg}
		return true, err
	case 5: // msg.heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeartBeat)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierMessage_Heartbeat{msg}
		return true, err
	case 6: // msg.heartbeat_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeartBeatAck)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierMessage_HeartbeatAck{msg}
		return true, err
	case 7: // msg.heartbeat_nack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeartBeatNack)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierMessage_HeartbeatNack{msg}
		return true, err
	case 8: // msg.execute_query_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecuteQueryRequest)
		err := b.DecodeMessage(msg)
		m.Msg = &VizierMessage_ExecuteQueryRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VizierMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VizierMessage)
	// msg
	switch x := m.Msg.(type) {
	case *VizierMessage_RegisterAgentRequest:
		s := proto.Size(x.RegisterAgentRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierMessage_RegisterAgentResponse:
		s := proto.Size(x.RegisterAgentResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierMessage_UpdateAgentRequest:
		s := proto.Size(x.UpdateAgentRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierMessage_UpdateAgentResponse:
		s := proto.Size(x.UpdateAgentResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierMessage_Heartbeat:
		s := proto.Size(x.Heartbeat)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierMessage_HeartbeatAck:
		s := proto.Size(x.HeartbeatAck)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierMessage_HeartbeatNack:
		s := proto.Size(x.HeartbeatNack)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VizierMessage_ExecuteQueryRequest:
		s := proto.Size(x.ExecuteQueryRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AgentInfo struct {
	AgentID  *proto1.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	HostInfo *HostInfo    `protobuf:"bytes,2,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
}

func (m *AgentInfo) Reset()      { *m = AgentInfo{} }
func (*AgentInfo) ProtoMessage() {}
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{1}
}
func (m *AgentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfo.Merge(dst, src)
}
func (m *AgentInfo) XXX_Size() int {
	return m.Size()
}
func (m *AgentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfo proto.InternalMessageInfo

func (m *AgentInfo) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *AgentInfo) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

type HostInfo struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *HostInfo) Reset()      { *m = HostInfo{} }
func (*HostInfo) ProtoMessage() {}
func (*HostInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{2}
}
func (m *HostInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HostInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostInfo.Merge(dst, src)
}
func (m *HostInfo) XXX_Size() int {
	return m.Size()
}
func (m *HostInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HostInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HostInfo proto.InternalMessageInfo

func (m *HostInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type RegisterAgentRequest struct {
	Info       *AgentInfo       `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	UpdateInfo *AgentUpdateInfo `protobuf:"bytes,2,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (m *RegisterAgentRequest) Reset()      { *m = RegisterAgentRequest{} }
func (*RegisterAgentRequest) ProtoMessage() {}
func (*RegisterAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{3}
}
func (m *RegisterAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentRequest.Merge(dst, src)
}
func (m *RegisterAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentRequest proto.InternalMessageInfo

func (m *RegisterAgentRequest) GetInfo() *AgentInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *RegisterAgentRequest) GetUpdateInfo() *AgentUpdateInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

type RegisterAgentResponse struct {
}

func (m *RegisterAgentResponse) Reset()      { *m = RegisterAgentResponse{} }
func (*RegisterAgentResponse) ProtoMessage() {}
func (*RegisterAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{4}
}
func (m *RegisterAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegisterAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAgentResponse.Merge(dst, src)
}
func (m *RegisterAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAgentResponse proto.InternalMessageInfo

type UpdateAgentRequest struct {
	Info       *AgentInfo       `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	UpdateInfo *AgentUpdateInfo `protobuf:"bytes,2,opt,name=update_info,json=updateInfo,proto3" json:"update_info,omitempty"`
}

func (m *UpdateAgentRequest) Reset()      { *m = UpdateAgentRequest{} }
func (*UpdateAgentRequest) ProtoMessage() {}
func (*UpdateAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{5}
}
func (m *UpdateAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAgentRequest.Merge(dst, src)
}
func (m *UpdateAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAgentRequest proto.InternalMessageInfo

func (m *UpdateAgentRequest) GetInfo() *AgentInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *UpdateAgentRequest) GetUpdateInfo() *AgentUpdateInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

type UpdateAgentResponse struct {
}

func (m *UpdateAgentResponse) Reset()      { *m = UpdateAgentResponse{} }
func (*UpdateAgentResponse) ProtoMessage() {}
func (*UpdateAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{6}
}
func (m *UpdateAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAgentResponse.Merge(dst, src)
}
func (m *UpdateAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAgentResponse proto.InternalMessageInfo

type AgentUpdateInfo struct {
	ContainerToPids []*AgentUpdateInfo_ContainerPids `protobuf:"bytes,1,rep,name=container_to_pids,json=containerToPids,proto3" json:"container_to_pids,omitempty"`
	Relations       []*proto2.Relation               `protobuf:"bytes,2,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (m *AgentUpdateInfo) Reset()      { *m = AgentUpdateInfo{} }
func (*AgentUpdateInfo) ProtoMessage() {}
func (*AgentUpdateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{7}
}
func (m *AgentUpdateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentUpdateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentUpdateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentUpdateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentUpdateInfo.Merge(dst, src)
}
func (m *AgentUpdateInfo) XXX_Size() int {
	return m.Size()
}
func (m *AgentUpdateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentUpdateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AgentUpdateInfo proto.InternalMessageInfo

func (m *AgentUpdateInfo) GetContainerToPids() []*AgentUpdateInfo_ContainerPids {
	if m != nil {
		return m.ContainerToPids
	}
	return nil
}

func (m *AgentUpdateInfo) GetRelations() []*proto2.Relation {
	if m != nil {
		return m.Relations
	}
	return nil
}

type AgentUpdateInfo_ContainerPids struct {
	ContainerId string  `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Pids        []int64 `protobuf:"varint,2,rep,packed,name=pids,proto3" json:"pids,omitempty"`
}

func (m *AgentUpdateInfo_ContainerPids) Reset()      { *m = AgentUpdateInfo_ContainerPids{} }
func (*AgentUpdateInfo_ContainerPids) ProtoMessage() {}
func (*AgentUpdateInfo_ContainerPids) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{7, 0}
}
func (m *AgentUpdateInfo_ContainerPids) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentUpdateInfo_ContainerPids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentUpdateInfo_ContainerPids.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AgentUpdateInfo_ContainerPids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentUpdateInfo_ContainerPids.Merge(dst, src)
}
func (m *AgentUpdateInfo_ContainerPids) XXX_Size() int {
	return m.Size()
}
func (m *AgentUpdateInfo_ContainerPids) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentUpdateInfo_ContainerPids.DiscardUnknown(m)
}

var xxx_messageInfo_AgentUpdateInfo_ContainerPids proto.InternalMessageInfo

func (m *AgentUpdateInfo_ContainerPids) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *AgentUpdateInfo_ContainerPids) GetPids() []int64 {
	if m != nil {
		return m.Pids
	}
	return nil
}

type HeartBeat struct {
	AgentID *proto1.UUID `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Time    int64        `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *HeartBeat) Reset()      { *m = HeartBeat{} }
func (*HeartBeat) ProtoMessage() {}
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{8}
}
func (m *HeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeat.Merge(dst, src)
}
func (m *HeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeat proto.InternalMessageInfo

func (m *HeartBeat) GetAgentID() *proto1.UUID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *HeartBeat) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type HeartBeatAck struct {
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *HeartBeatAck) Reset()      { *m = HeartBeatAck{} }
func (*HeartBeatAck) ProtoMessage() {}
func (*HeartBeatAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{9}
}
func (m *HeartBeatAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeatAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeatAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HeartBeatAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatAck.Merge(dst, src)
}
func (m *HeartBeatAck) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeatAck) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatAck.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatAck proto.InternalMessageInfo

func (m *HeartBeatAck) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type HeartBeatNack struct {
}

func (m *HeartBeatNack) Reset()      { *m = HeartBeatNack{} }
func (*HeartBeatNack) ProtoMessage() {}
func (*HeartBeatNack) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{10}
}
func (m *HeartBeatNack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeatNack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeatNack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HeartBeatNack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeatNack.Merge(dst, src)
}
func (m *HeartBeatNack) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeatNack) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeatNack.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeatNack proto.InternalMessageInfo

type ExecuteQueryRequest struct {
	QueryID  *proto1.UUID `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryStr string       `protobuf:"bytes,2,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
}

func (m *ExecuteQueryRequest) Reset()      { *m = ExecuteQueryRequest{} }
func (*ExecuteQueryRequest) ProtoMessage() {}
func (*ExecuteQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_messages_7b32ec4196cf5d40, []int{11}
}
func (m *ExecuteQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExecuteQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteQueryRequest.Merge(dst, src)
}
func (m *ExecuteQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteQueryRequest proto.InternalMessageInfo

func (m *ExecuteQueryRequest) GetQueryID() *proto1.UUID {
	if m != nil {
		return m.QueryID
	}
	return nil
}

func (m *ExecuteQueryRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

func init() {
	proto.RegisterType((*VizierMessage)(nil), "pl.vizier.messages.VizierMessage")
	proto.RegisterType((*AgentInfo)(nil), "pl.vizier.messages.AgentInfo")
	proto.RegisterType((*HostInfo)(nil), "pl.vizier.messages.HostInfo")
	proto.RegisterType((*RegisterAgentRequest)(nil), "pl.vizier.messages.RegisterAgentRequest")
	proto.RegisterType((*RegisterAgentResponse)(nil), "pl.vizier.messages.RegisterAgentResponse")
	proto.RegisterType((*UpdateAgentRequest)(nil), "pl.vizier.messages.UpdateAgentRequest")
	proto.RegisterType((*UpdateAgentResponse)(nil), "pl.vizier.messages.UpdateAgentResponse")
	proto.RegisterType((*AgentUpdateInfo)(nil), "pl.vizier.messages.AgentUpdateInfo")
	proto.RegisterType((*AgentUpdateInfo_ContainerPids)(nil), "pl.vizier.messages.AgentUpdateInfo.ContainerPids")
	proto.RegisterType((*HeartBeat)(nil), "pl.vizier.messages.HeartBeat")
	proto.RegisterType((*HeartBeatAck)(nil), "pl.vizier.messages.HeartBeatAck")
	proto.RegisterType((*HeartBeatNack)(nil), "pl.vizier.messages.HeartBeatNack")
	proto.RegisterType((*ExecuteQueryRequest)(nil), "pl.vizier.messages.ExecuteQueryRequest")
}
func (this *VizierMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage)
	if !ok {
		that2, ok := that.(VizierMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *VizierMessage_RegisterAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_RegisterAgentRequest)
	if !ok {
		that2, ok := that.(VizierMessage_RegisterAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegisterAgentRequest.Equal(that1.RegisterAgentRequest) {
		return false
	}
	return true
}
func (this *VizierMessage_RegisterAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_RegisterAgentResponse)
	if !ok {
		that2, ok := that.(VizierMessage_RegisterAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegisterAgentResponse.Equal(that1.RegisterAgentResponse) {
		return false
	}
	return true
}
func (this *VizierMessage_UpdateAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_UpdateAgentRequest)
	if !ok {
		that2, ok := that.(VizierMessage_UpdateAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateAgentRequest.Equal(that1.UpdateAgentRequest) {
		return false
	}
	return true
}
func (this *VizierMessage_UpdateAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_UpdateAgentResponse)
	if !ok {
		that2, ok := that.(VizierMessage_UpdateAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateAgentResponse.Equal(that1.UpdateAgentResponse) {
		return false
	}
	return true
}
func (this *VizierMessage_Heartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_Heartbeat)
	if !ok {
		that2, ok := that.(VizierMessage_Heartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Heartbeat.Equal(that1.Heartbeat) {
		return false
	}
	return true
}
func (this *VizierMessage_HeartbeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_HeartbeatAck)
	if !ok {
		that2, ok := that.(VizierMessage_HeartbeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeartbeatAck.Equal(that1.HeartbeatAck) {
		return false
	}
	return true
}
func (this *VizierMessage_HeartbeatNack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_HeartbeatNack)
	if !ok {
		that2, ok := that.(VizierMessage_HeartbeatNack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HeartbeatNack.Equal(that1.HeartbeatNack) {
		return false
	}
	return true
}
func (this *VizierMessage_ExecuteQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierMessage_ExecuteQueryRequest)
	if !ok {
		that2, ok := that.(VizierMessage_ExecuteQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecuteQueryRequest.Equal(that1.ExecuteQueryRequest) {
		return false
	}
	return true
}
func (this *AgentInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInfo)
	if !ok {
		that2, ok := that.(AgentInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if !this.HostInfo.Equal(that1.HostInfo) {
		return false
	}
	return true
}
func (this *HostInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HostInfo)
	if !ok {
		that2, ok := that.(HostInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}
func (this *RegisterAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentRequest)
	if !ok {
		that2, ok := that.(RegisterAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.UpdateInfo.Equal(that1.UpdateInfo) {
		return false
	}
	return true
}
func (this *RegisterAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterAgentResponse)
	if !ok {
		that2, ok := that.(RegisterAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateAgentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAgentRequest)
	if !ok {
		that2, ok := that.(UpdateAgentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.UpdateInfo.Equal(that1.UpdateInfo) {
		return false
	}
	return true
}
func (this *UpdateAgentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAgentResponse)
	if !ok {
		that2, ok := that.(UpdateAgentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AgentUpdateInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentUpdateInfo)
	if !ok {
		that2, ok := that.(AgentUpdateInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ContainerToPids) != len(that1.ContainerToPids) {
		return false
	}
	for i := range this.ContainerToPids {
		if !this.ContainerToPids[i].Equal(that1.ContainerToPids[i]) {
			return false
		}
	}
	if len(this.Relations) != len(that1.Relations) {
		return false
	}
	for i := range this.Relations {
		if !this.Relations[i].Equal(that1.Relations[i]) {
			return false
		}
	}
	return true
}
func (this *AgentUpdateInfo_ContainerPids) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentUpdateInfo_ContainerPids)
	if !ok {
		that2, ok := that.(AgentUpdateInfo_ContainerPids)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContainerId != that1.ContainerId {
		return false
	}
	if len(this.Pids) != len(that1.Pids) {
		return false
	}
	for i := range this.Pids {
		if this.Pids[i] != that1.Pids[i] {
			return false
		}
	}
	return true
}
func (this *HeartBeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeartBeat)
	if !ok {
		that2, ok := that.(HeartBeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgentID.Equal(that1.AgentID) {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *HeartBeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeartBeatAck)
	if !ok {
		that2, ok := that.(HeartBeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *HeartBeatNack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeartBeatNack)
	if !ok {
		that2, ok := that.(HeartBeatNack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ExecuteQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteQueryRequest)
	if !ok {
		that2, ok := that.(ExecuteQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryID.Equal(that1.QueryID) {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	return true
}
func (this *VizierMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&messages.VizierMessage{")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierMessage_RegisterAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_RegisterAgentRequest{` +
		`RegisterAgentRequest:` + fmt.Sprintf("%#v", this.RegisterAgentRequest) + `}`}, ", ")
	return s
}
func (this *VizierMessage_RegisterAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_RegisterAgentResponse{` +
		`RegisterAgentResponse:` + fmt.Sprintf("%#v", this.RegisterAgentResponse) + `}`}, ", ")
	return s
}
func (this *VizierMessage_UpdateAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_UpdateAgentRequest{` +
		`UpdateAgentRequest:` + fmt.Sprintf("%#v", this.UpdateAgentRequest) + `}`}, ", ")
	return s
}
func (this *VizierMessage_UpdateAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_UpdateAgentResponse{` +
		`UpdateAgentResponse:` + fmt.Sprintf("%#v", this.UpdateAgentResponse) + `}`}, ", ")
	return s
}
func (this *VizierMessage_Heartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_Heartbeat{` +
		`Heartbeat:` + fmt.Sprintf("%#v", this.Heartbeat) + `}`}, ", ")
	return s
}
func (this *VizierMessage_HeartbeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_HeartbeatAck{` +
		`HeartbeatAck:` + fmt.Sprintf("%#v", this.HeartbeatAck) + `}`}, ", ")
	return s
}
func (this *VizierMessage_HeartbeatNack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_HeartbeatNack{` +
		`HeartbeatNack:` + fmt.Sprintf("%#v", this.HeartbeatNack) + `}`}, ", ")
	return s
}
func (this *VizierMessage_ExecuteQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&messages.VizierMessage_ExecuteQueryRequest{` +
		`ExecuteQueryRequest:` + fmt.Sprintf("%#v", this.ExecuteQueryRequest) + `}`}, ", ")
	return s
}
func (this *AgentInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.AgentInfo{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	if this.HostInfo != nil {
		s = append(s, "HostInfo: "+fmt.Sprintf("%#v", this.HostInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HostInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.HostInfo{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.RegisterAgentRequest{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.UpdateInfo != nil {
		s = append(s, "UpdateInfo: "+fmt.Sprintf("%#v", this.UpdateInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&messages.RegisterAgentResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAgentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.UpdateAgentRequest{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.UpdateInfo != nil {
		s = append(s, "UpdateInfo: "+fmt.Sprintf("%#v", this.UpdateInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAgentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&messages.UpdateAgentResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentUpdateInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.AgentUpdateInfo{")
	if this.ContainerToPids != nil {
		s = append(s, "ContainerToPids: "+fmt.Sprintf("%#v", this.ContainerToPids)+",\n")
	}
	if this.Relations != nil {
		s = append(s, "Relations: "+fmt.Sprintf("%#v", this.Relations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentUpdateInfo_ContainerPids) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.AgentUpdateInfo_ContainerPids{")
	s = append(s, "ContainerId: "+fmt.Sprintf("%#v", this.ContainerId)+",\n")
	s = append(s, "Pids: "+fmt.Sprintf("%#v", this.Pids)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeartBeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.HeartBeat{")
	if this.AgentID != nil {
		s = append(s, "AgentID: "+fmt.Sprintf("%#v", this.AgentID)+",\n")
	}
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeartBeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.HeartBeatAck{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HeartBeatNack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&messages.HeartBeatNack{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.ExecuteQueryRequest{")
	if this.QueryID != nil {
		s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	}
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessages(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VizierMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn1, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *VizierMessage_RegisterAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterAgentRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.RegisterAgentRequest.Size()))
		n2, err := m.RegisterAgentRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *VizierMessage_RegisterAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegisterAgentResponse != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.RegisterAgentResponse.Size()))
		n3, err := m.RegisterAgentResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *VizierMessage_UpdateAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateAgentRequest != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.UpdateAgentRequest.Size()))
		n4, err := m.UpdateAgentRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *VizierMessage_UpdateAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateAgentResponse != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.UpdateAgentResponse.Size()))
		n5, err := m.UpdateAgentResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *VizierMessage_Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Heartbeat != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Heartbeat.Size()))
		n6, err := m.Heartbeat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *VizierMessage_HeartbeatAck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeartbeatAck != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.HeartbeatAck.Size()))
		n7, err := m.HeartbeatAck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *VizierMessage_HeartbeatNack) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeartbeatNack != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.HeartbeatNack.Size()))
		n8, err := m.HeartbeatNack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *VizierMessage_ExecuteQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExecuteQueryRequest != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.ExecuteQueryRequest.Size()))
		n9, err := m.ExecuteQueryRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *AgentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.AgentID.Size()))
		n10, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.HostInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.HostInfo.Size()))
		n11, err := m.HostInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *HostInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	return i, nil
}

func (m *RegisterAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Info.Size()))
		n12, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.UpdateInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.UpdateInfo.Size()))
		n13, err := m.UpdateInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *RegisterAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Info.Size()))
		n14, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.UpdateInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.UpdateInfo.Size()))
		n15, err := m.UpdateInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *UpdateAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AgentUpdateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentUpdateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerToPids) > 0 {
		for _, msg := range m.ContainerToPids {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Relations) > 0 {
		for _, msg := range m.Relations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AgentUpdateInfo_ContainerPids) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentUpdateInfo_ContainerPids) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ContainerId)))
		i += copy(dAtA[i:], m.ContainerId)
	}
	if len(m.Pids) > 0 {
		dAtA17 := make([]byte, len(m.Pids)*10)
		var j16 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	return i, nil
}

func (m *HeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgentID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.AgentID.Size()))
		n18, err := m.AgentID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *HeartBeatAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *HeartBeatNack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeatNack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ExecuteQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueryID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.QueryID.Size()))
		n19, err := m.QueryID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.QueryStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.QueryStr)))
		i += copy(dAtA[i:], m.QueryStr)
	}
	return i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VizierMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *VizierMessage_RegisterAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterAgentRequest != nil {
		l = m.RegisterAgentRequest.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_RegisterAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterAgentResponse != nil {
		l = m.RegisterAgentResponse.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_UpdateAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateAgentRequest != nil {
		l = m.UpdateAgentRequest.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_UpdateAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateAgentResponse != nil {
		l = m.UpdateAgentResponse.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Heartbeat != nil {
		l = m.Heartbeat.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_HeartbeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartbeatAck != nil {
		l = m.HeartbeatAck.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_HeartbeatNack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeartbeatNack != nil {
		l = m.HeartbeatNack.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *VizierMessage_ExecuteQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecuteQueryRequest != nil {
		l = m.ExecuteQueryRequest.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *AgentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.HostInfo != nil {
		l = m.HostInfo.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *HostInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *RegisterAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.UpdateInfo != nil {
		l = m.UpdateInfo.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *RegisterAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.UpdateInfo != nil {
		l = m.UpdateInfo.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *UpdateAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentUpdateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContainerToPids) > 0 {
		for _, e := range m.ContainerToPids {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *AgentUpdateInfo_ContainerPids) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovMessages(uint64(e))
		}
		n += 1 + sovMessages(uint64(l)) + l
	}
	return n
}

func (m *HeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentID != nil {
		l = m.AgentID.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovMessages(uint64(m.Time))
	}
	return n
}

func (m *HeartBeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovMessages(uint64(m.Time))
	}
	return n
}

func (m *HeartBeatNack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExecuteQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryID != nil {
		l = m.QueryID.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func sovMessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VizierMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_RegisterAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_RegisterAgentRequest{`,
		`RegisterAgentRequest:` + strings.Replace(fmt.Sprintf("%v", this.RegisterAgentRequest), "RegisterAgentRequest", "RegisterAgentRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_RegisterAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_RegisterAgentResponse{`,
		`RegisterAgentResponse:` + strings.Replace(fmt.Sprintf("%v", this.RegisterAgentResponse), "RegisterAgentResponse", "RegisterAgentResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_UpdateAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_UpdateAgentRequest{`,
		`UpdateAgentRequest:` + strings.Replace(fmt.Sprintf("%v", this.UpdateAgentRequest), "UpdateAgentRequest", "UpdateAgentRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_UpdateAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_UpdateAgentResponse{`,
		`UpdateAgentResponse:` + strings.Replace(fmt.Sprintf("%v", this.UpdateAgentResponse), "UpdateAgentResponse", "UpdateAgentResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_Heartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_Heartbeat{`,
		`Heartbeat:` + strings.Replace(fmt.Sprintf("%v", this.Heartbeat), "HeartBeat", "HeartBeat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_HeartbeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_HeartbeatAck{`,
		`HeartbeatAck:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatAck), "HeartBeatAck", "HeartBeatAck", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_HeartbeatNack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_HeartbeatNack{`,
		`HeartbeatNack:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatNack), "HeartBeatNack", "HeartBeatNack", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierMessage_ExecuteQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierMessage_ExecuteQueryRequest{`,
		`ExecuteQueryRequest:` + strings.Replace(fmt.Sprintf("%v", this.ExecuteQueryRequest), "ExecuteQueryRequest", "ExecuteQueryRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInfo{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`HostInfo:` + strings.Replace(fmt.Sprintf("%v", this.HostInfo), "HostInfo", "HostInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostInfo{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentRequest{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "AgentInfo", "AgentInfo", 1) + `,`,
		`UpdateInfo:` + strings.Replace(fmt.Sprintf("%v", this.UpdateInfo), "AgentUpdateInfo", "AgentUpdateInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterAgentResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAgentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAgentRequest{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "AgentInfo", "AgentInfo", 1) + `,`,
		`UpdateInfo:` + strings.Replace(fmt.Sprintf("%v", this.UpdateInfo), "AgentUpdateInfo", "AgentUpdateInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAgentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAgentResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AgentUpdateInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentUpdateInfo{`,
		`ContainerToPids:` + strings.Replace(fmt.Sprintf("%v", this.ContainerToPids), "AgentUpdateInfo_ContainerPids", "AgentUpdateInfo_ContainerPids", 1) + `,`,
		`Relations:` + strings.Replace(fmt.Sprintf("%v", this.Relations), "Relation", "proto2.Relation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentUpdateInfo_ContainerPids) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentUpdateInfo_ContainerPids{`,
		`ContainerId:` + fmt.Sprintf("%v", this.ContainerId) + `,`,
		`Pids:` + fmt.Sprintf("%v", this.Pids) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartBeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartBeat{`,
		`AgentID:` + strings.Replace(fmt.Sprintf("%v", this.AgentID), "UUID", "proto1.UUID", 1) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartBeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartBeatAck{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartBeatNack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HeartBeatNack{`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteQueryRequest{`,
		`QueryID:` + strings.Replace(fmt.Sprintf("%v", this.QueryID), "UUID", "proto1.UUID", 1) + `,`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VizierMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterAgentRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterAgentRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_RegisterAgentRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterAgentResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterAgentResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_RegisterAgentResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAgentRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateAgentRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_UpdateAgentRequest{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAgentResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateAgentResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_UpdateAgentResponse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeartBeat{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_Heartbeat{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeartBeatAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_HeartbeatAck{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatNack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeartBeatNack{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_HeartbeatNack{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteQueryRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecuteQueryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VizierMessage_ExecuteQueryRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostInfo == nil {
				m.HostInfo = &HostInfo{}
			}
			if err := m.HostInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AgentInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateInfo == nil {
				m.UpdateInfo = &AgentUpdateInfo{}
			}
			if err := m.UpdateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AgentInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateInfo == nil {
				m.UpdateInfo = &AgentUpdateInfo{}
			}
			if err := m.UpdateInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentUpdateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentUpdateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentUpdateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerToPids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerToPids = append(m.ContainerToPids, &AgentUpdateInfo_ContainerPids{})
			if err := m.ContainerToPids[len(m.ContainerToPids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &proto2.Relation{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentUpdateInfo_ContainerPids) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerPids: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerPids: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentID == nil {
				m.AgentID = &proto1.UUID{}
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeatNack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeatNack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeatNack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryID == nil {
				m.QueryID = &proto1.UUID{}
			}
			if err := m.QueryID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("src/vizier/messages/messagespb/messages.proto", fileDescriptor_messages_7b32ec4196cf5d40)
}

var fileDescriptor_messages_7b32ec4196cf5d40 = []byte{
	// 803 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xb7, 0x37, 0xe9, 0x36, 0x7e, 0x69, 0x88, 0x98, 0x34, 0x6c, 0x14, 0xc0, 0x64, 0x8d, 0xb4,
	0x94, 0xc3, 0x3a, 0xda, 0x72, 0x40, 0x08, 0x01, 0x6a, 0x28, 0x90, 0x20, 0x81, 0x60, 0xa0, 0x08,
	0x55, 0xaa, 0x8c, 0xff, 0x4c, 0x13, 0x2b, 0xb1, 0xc7, 0xf5, 0x8c, 0x51, 0xe1, 0x02, 0x5f, 0x00,
	0xc1, 0xc7, 0xe0, 0xa3, 0x20, 0x71, 0xe9, 0xb1, 0x27, 0x44, 0xdd, 0x0b, 0xc7, 0x5e, 0xb9, 0x21,
	0xcf, 0x38, 0x4e, 0x9a, 0xb8, 0x7f, 0xc4, 0x65, 0x6f, 0x6f, 0x5e, 0x7e, 0xff, 0xc6, 0x33, 0x6f,
	0x02, 0x4f, 0x59, 0xec, 0xf6, 0xbf, 0xf7, 0x7f, 0xf4, 0x49, 0xdc, 0x0f, 0x08, 0x63, 0xf6, 0x98,
	0xb0, 0xa2, 0x88, 0x9c, 0xa2, 0x34, 0xa3, 0x98, 0x72, 0x8a, 0x50, 0x34, 0x33, 0x25, 0xda, 0x9c,
	0xff, 0xd2, 0x7d, 0x3a, 0xf6, 0xf9, 0x24, 0x71, 0x4c, 0x97, 0x06, 0xfd, 0x31, 0x1d, 0xd3, 0xbe,
	0x80, 0x3a, 0xc9, 0xb1, 0x58, 0x89, 0x85, 0xa8, 0xa4, 0x44, 0xb7, 0x97, 0x39, 0xba, 0x34, 0x08,
	0x68, 0xd8, 0x4f, 0x12, 0xdf, 0x93, 0x70, 0x51, 0xe6, 0x08, 0x23, 0x43, 0x70, 0xdb, 0x99, 0x11,
	0x8b, 0x71, 0x1a, 0x93, 0x1c, 0xc1, 0xdc, 0x09, 0x09, 0x6c, 0x89, 0x31, 0xfe, 0xdc, 0x80, 0xc6,
	0x37, 0x22, 0xc8, 0x67, 0x32, 0x07, 0xfa, 0x0e, 0x5e, 0x8a, 0xc9, 0xd8, 0x67, 0x9c, 0xc4, 0x96,
	0x3d, 0x26, 0x21, 0xb7, 0x62, 0x72, 0x92, 0x10, 0xc6, 0x3b, 0x6a, 0x4f, 0xdd, 0xa9, 0xef, 0xee,
	0x98, 0xeb, 0xd9, 0x4d, 0x9c, 0x33, 0xf6, 0x32, 0x02, 0x96, 0xf8, 0xa1, 0x82, 0xb7, 0xe3, 0x92,
	0x3e, 0x72, 0xe1, 0xd1, 0x9a, 0x03, 0x8b, 0x68, 0xc8, 0x48, 0xe7, 0x81, 0xb0, 0x78, 0xf3, 0x1e,
	0x16, 0x92, 0x30, 0x54, 0x70, 0x3b, 0x2e, 0xfb, 0x01, 0x1d, 0xc2, 0x76, 0x12, 0x79, 0x36, 0x27,
	0x2b, 0x9b, 0xa8, 0x08, 0x87, 0x27, 0x65, 0x0e, 0x07, 0x02, 0xbf, 0xb2, 0x05, 0x94, 0xac, 0x75,
	0xd1, 0x11, 0xb4, 0x57, 0xb4, 0xf3, 0xf8, 0x55, 0x21, 0xfe, 0xc6, 0x9d, 0xe2, 0x45, 0xf8, 0x56,
	0xb2, 0xde, 0x46, 0xef, 0x81, 0x36, 0x21, 0x76, 0xcc, 0x1d, 0x62, 0xf3, 0xce, 0x86, 0x90, 0x7c,
	0xb5, 0x4c, 0x72, 0x98, 0x81, 0x06, 0xc4, 0xce, 0x62, 0x2e, 0x18, 0xe8, 0x13, 0x68, 0x14, 0x0b,
	0xcb, 0x76, 0xa7, 0x9d, 0x87, 0x42, 0xa2, 0x77, 0xab, 0xc4, 0x9e, 0x3b, 0x1d, 0x2a, 0x78, 0xab,
	0x20, 0xee, 0xb9, 0x53, 0xf4, 0x29, 0xbc, 0xb0, 0x10, 0x0a, 0x33, 0xa5, 0x4d, 0xa1, 0xf4, 0xf8,
	0x56, 0xa5, 0xcf, 0x6d, 0x21, 0xb5, 0xc8, 0x90, 0x35, 0xb2, 0x4f, 0x46, 0x4e, 0x89, 0x9b, 0x70,
	0x62, 0x9d, 0x24, 0x24, 0xfe, 0xa1, 0x38, 0x8f, 0xda, 0xcd, 0x9f, 0xec, 0x23, 0x49, 0xf8, 0x32,
	0xc3, 0x2f, 0x0e, 0xa4, 0x45, 0xd6, 0xdb, 0x83, 0x0d, 0xa8, 0x04, 0x6c, 0x6c, 0xfc, 0x04, 0x9a,
	0xf8, 0x94, 0xa3, 0xf0, 0x98, 0xa2, 0xb7, 0xa1, 0x26, 0x8f, 0xc7, 0xf7, 0xf2, 0xab, 0xdb, 0xcc,
	0x5c, 0xb2, 0x01, 0x89, 0x1c, 0xf3, 0xe0, 0x60, 0xb4, 0x3f, 0xa8, 0xa7, 0x7f, 0xbd, 0xb6, 0x29,
	0x19, 0xfb, 0x78, 0x53, 0xa0, 0x47, 0x1e, 0x7a, 0x07, 0xb4, 0x09, 0x65, 0xdc, 0xf2, 0xc3, 0x63,
	0x9a, 0xdf, 0xc8, 0x57, 0x4a, 0xb7, 0x4c, 0x99, 0x70, 0xc2, 0xb5, 0x49, 0x5e, 0x19, 0x4f, 0xa0,
	0x36, 0xef, 0xa2, 0x2e, 0x88, 0x7e, 0x68, 0x07, 0x44, 0xf8, 0x6b, 0xb8, 0x58, 0x1b, 0xbf, 0xaa,
	0xb0, 0x5d, 0x36, 0x33, 0xe8, 0x19, 0x54, 0x85, 0xad, 0x7a, 0xf3, 0xb1, 0x17, 0x3b, 0xc4, 0x02,
	0x8a, 0xf6, 0xa1, 0x9e, 0xdf, 0xc6, 0xa5, 0xc0, 0xaf, 0xdf, 0xc8, 0x94, 0x17, 0x51, 0xf0, 0x21,
	0x29, 0x6a, 0xe3, 0x11, 0xb4, 0x4b, 0x27, 0xcc, 0xf8, 0x45, 0x05, 0xb4, 0x3e, 0x19, 0xcf, 0x2f,
	0x68, 0x1b, 0x5a, 0x25, 0xb3, 0x64, 0xfc, 0xab, 0x42, 0x73, 0x85, 0x86, 0x8e, 0xe0, 0x45, 0x97,
	0x86, 0xdc, 0xf6, 0x43, 0x12, 0x5b, 0x9c, 0x5a, 0x91, 0xef, 0xb1, 0x8e, 0xda, 0xab, 0xec, 0xd4,
	0x77, 0x9f, 0xdd, 0xc3, 0xd6, 0xfc, 0x70, 0x4e, 0xfe, 0xc2, 0xf7, 0x18, 0x6e, 0x16, 0x5a, 0x5f,
	0xd3, 0xac, 0x81, 0x3e, 0x00, 0x2d, 0x26, 0x33, 0x9b, 0xfb, 0x34, 0x64, 0x9d, 0x07, 0x42, 0x56,
	0x8c, 0xc6, 0xd2, 0x93, 0x6b, 0xca, 0xc7, 0x36, 0x72, 0x4c, 0x9c, 0x23, 0xf1, 0x82, 0xd3, 0xfd,
	0x18, 0x1a, 0xd7, 0x2c, 0xd0, 0x63, 0xd8, 0x5a, 0x04, 0xce, 0xaf, 0xad, 0x86, 0xeb, 0x45, 0x6f,
	0xe4, 0x21, 0x04, 0x55, 0xb1, 0x8d, 0xcc, 0xaf, 0x82, 0x45, 0x6d, 0x7c, 0x0b, 0x5a, 0x31, 0x7e,
	0xff, 0xff, 0xda, 0x23, 0xa8, 0x72, 0x3f, 0x90, 0x6f, 0x70, 0x05, 0x8b, 0xda, 0x30, 0x60, 0x6b,
	0xf9, 0x89, 0x28, 0x30, 0xea, 0x12, 0xa6, 0x09, 0x8d, 0x6b, 0xc3, 0x6f, 0x4c, 0xa1, 0x55, 0x32,
	0xba, 0x59, 0x30, 0x39, 0xfa, 0x77, 0x04, 0x13, 0xa4, 0x2c, 0x98, 0x40, 0x8f, 0x3c, 0xf4, 0x32,
	0x68, 0x92, 0xc8, 0x78, 0x2c, 0xd2, 0x69, 0x58, 0x2a, 0x7d, 0xc5, 0xe3, 0x01, 0x3f, 0xbb, 0xd0,
	0x95, 0xf3, 0x0b, 0x5d, 0xb9, 0xba, 0xd0, 0xd5, 0x9f, 0x53, 0x5d, 0xfd, 0x3d, 0xd5, 0xd5, 0x3f,
	0x52, 0x5d, 0x3d, 0x4b, 0x75, 0xf5, 0xef, 0x54, 0x57, 0xff, 0x49, 0x75, 0xe5, 0x2a, 0xd5, 0xd5,
	0xdf, 0x2e, 0x75, 0xe5, 0xec, 0x52, 0x57, 0xce, 0x2f, 0x75, 0xe5, 0xf0, 0xfd, 0xc8, 0x3f, 0xf5,
	0xc9, 0xcc, 0x76, 0x98, 0x69, 0xfb, 0xfd, 0x62, 0xd1, 0xbf, 0xfd, 0x5f, 0xfc, 0xdd, 0x79, 0xe9,
	0x3c, 0x14, 0xff, 0x9e, 0x6f, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x42, 0x4b, 0x78, 0x06, 0xf7,
	0x07, 0x00, 0x00,
}
