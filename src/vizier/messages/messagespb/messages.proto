syntax = "proto3";

package pl.vizier.messages;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/carnot/planner/distributedpb/distributed_plan.proto";
import "src/carnot/planpb/plan.proto";
import "src/common/uuid/proto/uuid.proto";
import "src/shared/k8s/metadatapb/metadata.proto";
import "src/vizier/services/shared/agentpb/agent.proto";
import "src/vizier/services/metadata/storepb/store.proto";
import "src/stirling/dynamic_tracing/ir/logicalpb/logical.proto";
import "src/common/base/proto/status.proto";

option go_package = "pixielabs.ai/pixielabs/src/vizier/messages/messagespb;messages";

// A wrapper around all messages which can be sent over the message bus.
message VizierMessage {
    oneof msg {
        RegisterAgentRequest register_agent_request = 1;
        RegisterAgentResponse register_agent_response = 2;
        UpdateAgentRequest update_agent_request = 3;
        UpdateAgentResponse update_agent_response = 4;
        Heartbeat heartbeat = 5;
        HeartbeatAck heartbeat_ack = 6;
        HeartbeatNack heartbeat_nack = 7;
        ExecuteQueryRequest execute_query_request = 8;
        TracepointMessage tracepoint_message = 10;
    }
}

// A wrapper around all tracepoint-related messages that can be sent over the message bus.
message TracepointMessage {
    oneof msg {
        TracepointInfoUpdate tracepoint_info_update = 1;
        RemoveTracepointRequest remove_tracepoint_request = 2;
        RegisterTracepointRequest register_tracepoint_request = 3;
    }
}

message RegisterAgentRequest {
    pl.vizier.services.shared.agent.AgentInfo info = 1;
    AgentUpdateInfo update_info = 2;
}

message RegisterAgentResponse {
    // ASID is the agent short ID.
    uint32 asid = 1 [
                    (gogoproto.customname) = "ASID"
                    ];
    // DEPRECATED: This was clusterCIDR has been replaced by PodCIDRs in HeartbeatAck.
    reserved 2;
}

message UpdateAgentRequest {
    pl.vizier.services.shared.agent.AgentInfo info = 1;
    AgentUpdateInfo update_info = 2;
}

message UpdateAgentResponse {}

// Struct representing the data that the agent has available to query.
// Used by the compiler to selectively run queries on applicable agents only.
message AgentDataInfo {
    pl.carnot.planner.distributedpb.MetadataInfo metadata_info = 1;
}

message AgentUpdateInfo {
    // Schema holds information about tables on the agent.
    repeated pl.vizier.services.metadata.TableInfo schema = 2;
    // TODO(zasgar/michelle): Delete this.
    repeated pl.shared.k8s.metadatapb.ProcessInfo process = 3;

    repeated pl.shared.k8s.metadatapb.ProcessCreated process_created = 4;
    repeated pl.shared.k8s.metadatapb.ProcessTerminated process_terminated = 5;
    // Whether the schema updates.
    bool does_update_schema = 6;
    AgentDataInfo data = 7;
}

// The heart beat signal.
message Heartbeat {
    uuidpb.UUID agent_id = 1 [
      (gogoproto.customname) = "AgentID"
                             ];
    // The current unix time in ns on the machine.
    int64 time = 2;
    AgentUpdateInfo update_info = 3;
    int64 sequence_number = 4;
}

message MetadataUpdateInfo {
    repeated pl.shared.k8s.metadatapb.ResourceUpdate updates = 1;
    string service_cidr = 2 [(gogoproto.customname) = "ServiceCIDR"];
    repeated string pod_cidrs = 3 [(gogoproto.customname) = "PodCIDRs"];
}

// Response sent for a successful heart beat.
message HeartbeatAck {
    // The current unix time in ns on the machine.
    int64 time = 1;

    int64 sequence_number = 2;

    MetadataUpdateInfo update_info = 3;
}

// Response sent for a failed heart beat.
message HeartbeatNack {}

message ExecuteQueryRequest {
    uuidpb.UUID query_id      = 1 [
                                  (gogoproto.customname) = "QueryID"
                                  ];
    // TODO(philkuz) DEPRECATION planned.
    string query_str = 2;
    pl.carnot.planpb.Plan plan = 3;
    bool analyze = 4;
}

// The request to register tracepoints on a PEM.
message RegisterTracepointRequest {
  pl.stirling.dynamic_tracing.ir.logical.TracepointDeployment tracepoint_deployment = 1;
  uuidpb.UUID id = 2 [ (gogoproto.customname) = "ID" ];
}

// An update message sent when a tracepoint's status changes.
message TracepointInfoUpdate {
  uuidpb.UUID id = 1 [ (gogoproto.customname) = "ID" ];
  // The state of the tracepoint.
  pl.statuspb.LifeCycleState state = 2;
  // The status of the tracepoint, specified if the state of the tracepoint is not healthy.
  pl.statuspb.Status status = 3;
  // The ID of the agent sending the update.
  uuidpb.UUID agent_id = 4 [ (gogoproto.customname) = "AgentID" ];
}

message RemoveTracepointRequest {
    uuidpb.UUID id = 1 [ (gogoproto.customname) = "ID" ];
}
