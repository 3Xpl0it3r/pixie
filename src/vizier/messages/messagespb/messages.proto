syntax = "proto3";

package pl.vizier.messages;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/carnot/planpb/plan.proto";
import "src/common/uuid/proto/uuid.proto";
import "src/shared/k8s/metadatapb/metadata.proto";

option go_package = "pixielabs.ai/pixielabs/src/vizier/messages/messagespb;messages";

// A wrapper around all messages which can be sent over the message bus.
message VizierMessage {
    oneof msg {
        RegisterAgentRequest register_agent_request = 1;
        RegisterAgentResponse register_agent_response = 2;
        UpdateAgentRequest update_agent_request = 3;
        UpdateAgentResponse update_agent_response = 4;
        Heartbeat heartbeat = 5;
        HeartbeatAck heartbeat_ack = 6;
        HeartbeatNack heartbeat_nack = 7;
        ExecuteQueryRequest execute_query_request = 8;
    }
}

// AgentInfo contains information about host and agent running on a given machine.
message AgentInfo {
    uuidpb.UUID agent_id      = 1 [
                                  (gogoproto.customname) = "AgentID"
                                  ];
    HostInfo host_info = 2;
}

// HostInfo contains the details for the host (OS, kernel, CPU, etc).
message HostInfo {
    string hostname = 1;
}

message RegisterAgentRequest {
    AgentInfo info = 1;
    AgentUpdateInfo update_info = 2;
}

message RegisterAgentResponse {
    // ASID is the agent short ID.
    uint32 asid = 1 [
                    (gogoproto.customname) = "ASID"
                    ];
    MetadataUpdateInfo update_info = 2;
}

message UpdateAgentRequest {
    AgentInfo info = 1;
    AgentUpdateInfo update_info = 2;
}

message UpdateAgentResponse {}

message AgentUpdateInfo {
    // TODO(zasgar/michelle): Delete and cleanup.
    repeated pl.shared.k8s.metadatapb.ContainerInfo containers = 1;
    repeated pl.shared.k8s.metadatapb.SchemaInfo schema = 2;
    // TODO(zasgar/michelle): Delete this.
    repeated pl.shared.k8s.metadatapb.ProcessInfo process = 3;

    repeated pl.shared.k8s.metadatapb.ProcessCreated process_created= 4;
    repeated pl.shared.k8s.metadatapb.ProcessTerminated process_terminated = 5;
}

// The heart beat signal.
message Heartbeat {
    uuidpb.UUID agent_id = 1 [
      (gogoproto.customname) = "AgentID"
                             ];
    // The current unix time in ns on the machine.
    int64 time = 2;
    AgentUpdateInfo update_info = 3;
    int64 sequence_number = 4;
}

message MetadataUpdateInfo {
    repeated pl.shared.k8s.metadatapb.ResourceUpdate updates = 1;
}

// Response sent for a successful heart beat.
message HeartbeatAck {
    // The current unix time in ns on the machine.
    int64 time = 1;

    int64 sequence_number = 2;

    MetadataUpdateInfo update_info = 3;
}

// Response sent for a failed heart beat.
message HeartbeatNack {}

message ExecuteQueryRequest {
    uuidpb.UUID query_id      = 1 [
                                  (gogoproto.customname) = "QueryID"
                                  ];
    // TODO(philkuz) DEPRECATION planned.
    string query_str = 2;
    pl.carnot.planpb.Plan logical_plan = 3;
}
