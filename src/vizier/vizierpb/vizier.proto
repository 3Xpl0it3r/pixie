/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package px.api.internal.vizierpb;

option go_package = "vizierpb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/shared/k8s/metadatapb/metadata.proto";


message DebugLogRequest {
  // The UUID of the cluster encoded as a string with dashes.
  string cluster_id = 1 [(gogoproto.customname) = "ClusterID"];
  // The Vizier pod name we want to log.
  string pod_name = 2;
  // Return the log for the previous instance instead of the current active one.
  bool previous = 3;
  // The name of the container to get logs from. If none is specified and there is only a
  // single container on the pod, then that one is chosen.
  string container = 4;
}

message DebugLogResponse {
  // A chunk of the log response data.
  string data = 2;
}

// TODO(nserrino), PP-2512: Deprecate and replace with vizierpb's version,
// VizierPodStatus represents a Vizier pod's status at a moment in time.
message VizierPodStatus {
  // The name of the pod. Ex: vizier-pem-z26d8
  string name = 1;
  // The status of the pod.
  px.shared.k8s.metadatapb.PodStatus status = 2;
}

message DebugPodsRequest {
  // The UUID of the cluster encoded as a string with dashes.
  string cluster_id = 1 [(gogoproto.customname) = "ClusterID"];
}

message DebugPodsResponse {
  // A list of the Vizier agent pods and their statuses.
  repeated VizierPodStatus data_plane_pods = 1;
  // A list of the Vizier control plane pods and their statuses.
  repeated VizierPodStatus control_plane_pods = 2;
}

// Service used to run debug commands on Vizier.
service VizierDebugService {
  // Get a debug log for a specific vizier pod.
  rpc DebugLog(DebugLogRequest) returns (stream DebugLogResponse);
  // Returns a list of Vizier pods and their statuses.
  rpc DebugPods(DebugPodsRequest) returns (stream DebugPodsResponse);
}
