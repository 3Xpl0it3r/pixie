syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/any.proto";

package pl.api.vizierpb;

// The list of data types supported by our execution engine.
enum DataType {
  DATA_TYPE_UNKNOWN = 0;
  BOOLEAN = 1;
  INT64 = 2;
  UINT128 = 3;
  FLOAT64 = 4;
  STRING = 5;
  TIME64NS = 6;
  DURATION64NS = 7;
}
message UInt128 {
  uint64 low = 1;
  uint64 high = 2;
}

// Boolean data column.
message BooleanColumn {
  repeated bool data = 1;
}

// Int64 column data.
message Int64Column {
  repeated int64 data = 1;
}

// Uint128 column data.
message UInt128Column {
  repeated UInt128 data = 1;
}

// Float64 column data.
message Float64Column {
  repeated double data = 1;
}

// Time64 column data.
message Time64NSColumn {
  repeated int64 data = 1;
}

// Duration64 column data.
message Duration64NSColumn {
  repeated int64 data = 1;
}

// String data column.
message StringColumn {
  repeated string data = 1;
}

// A single column of data.
message Column {
  oneof col_data {
    BooleanColumn boolean_data = 1;
    Int64Column int64_data = 2;
    UInt128Column uint128_data = 3;
    Time64NSColumn time64ns_data = 4;
    Float64Column float64_data = 5;
    StringColumn string_data = 6;
    Duration64NSColumn duration64ns_data = 7;
  }
}

// RowBatchData is a temporary data type that will remove when proper serialization
// is implemented.
message RowBatchData {
  string table_id = 5 [ (gogoproto.customname) = "TableID" ]; // The ID of the table which the row batch belongs to.
  repeated Column cols = 1;
  int64 num_rows = 2;
  bool eow = 3;
  bool eos = 4;
}

message Relation {
  message ColumnInfo {
    string column_name = 1;
    DataType column_type = 2;
    string column_desc = 3;
  }
  repeated ColumnInfo columns = 1;
}


message Status {
  // The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
  int32 code = 1;

  // A developer-facing error message, which should be in English. Any
  // user-facing error message should be localized and sent in the
  // [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
  string message = 2;

  // A list of messages that carry the error details.  There is a common set of
  // message types for APIs to use.
  repeated google.protobuf.Any details = 3;
}

// ScalarValues reference a single constant value.
message ScalarValue {
  // We need to store the type to handle the null case and make sure we have the
  // "correct" null value. This type takes precedence on the one of value below.
  // If they mismatch a null value will be used.
  DataType data_type = 1;
  oneof value {
    bool bool_value = 2;
    int64 int64_value = 3;
    double float64_value = 4;
    string string_value = 5;
    int64 time64_ns_value = 6;
    int64 duration64_ns_value = 8;
    UInt128 uint128_value = 7;
  }
}
message ExecuteScriptRequest {
  string query_str = 1;
  message FlagValue {
    string flag_name = 1;
    ScalarValue flag_value = 2;
  }
  repeated FlagValue flag_values = 2;

  // The UUID of the cluster encoded as a string with dashes.
  string cluster_id = 3 [ (gogoproto.customname) = "ClusterID" ];;
}
// Tracks information about query execution time.
message QueryTimingInfo {
  // The total execution time for the query in nanoseconds.
  int64 execution_time_ns = 1;
  // The time in ns spent compiling the query.
  int64 compilation_time_ns = 2;
}

// QueryExecutionStats contains information about the time/data processed by the query.
message QueryExecutionStats {
  QueryTimingInfo timing  = 1;
  // The number of input bytes.
  int64 bytes_processed = 2;
  // The number of input records.
  int64 records_processed = 3;
}

message QueryMetadata {
  Relation relation = 1;
  string name = 2;
  string id = 3 [ (gogoproto.customname) = "ID" ];
}
// The query results generated by carnot.
message QueryData {
  RowBatchData batch = 1;
  QueryExecutionStats execution_stats = 2;
}

message ExecuteScriptResponse {
  // The Status of the query. Empty status implies that execution was successful/is currently
  // running.
  Status status = 1;
  // The id for the query. UUID encoded as string.
  string query_id = 2 [ (gogoproto.customname) = "QueryID" ];

  oneof result {
    QueryData data = 3;
    QueryMetadata meta_data = 4;
  }
}

message HealthCheckRequest {
  // The UUID of the cluster encoded as a string with dashes.
  string cluster_id = 1 [ (gogoproto.customname) = "ClusterID" ];;
}

message HealthCheckResponse {
  Status status = 1;
}

service VizierService {
  // This is an incoming request to Vizier to execute queries.
  rpc ExecuteScript(ExecuteScriptRequest) returns (stream ExecuteScriptResponse) {}
  rpc HealthCheck(HealthCheckRequest) returns (stream HealthCheckResponse) {}
}
