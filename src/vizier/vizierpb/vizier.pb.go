// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/vizierpb/vizier.proto

package vizierpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	metadatapb "px.dev/pixie/src/shared/k8s/metadatapb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DebugLogRequest struct {
	ClusterID string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	PodName   string `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	Previous  bool   `protobuf:"varint,3,opt,name=previous,proto3" json:"previous,omitempty"`
	Container string `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
}

func (m *DebugLogRequest) Reset()      { *m = DebugLogRequest{} }
func (*DebugLogRequest) ProtoMessage() {}
func (*DebugLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{0}
}
func (m *DebugLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugLogRequest.Merge(m, src)
}
func (m *DebugLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *DebugLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DebugLogRequest proto.InternalMessageInfo

func (m *DebugLogRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *DebugLogRequest) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *DebugLogRequest) GetPrevious() bool {
	if m != nil {
		return m.Previous
	}
	return false
}

func (m *DebugLogRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

type DebugLogResponse struct {
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DebugLogResponse) Reset()      { *m = DebugLogResponse{} }
func (*DebugLogResponse) ProtoMessage() {}
func (*DebugLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{1}
}
func (m *DebugLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugLogResponse.Merge(m, src)
}
func (m *DebugLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *DebugLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DebugLogResponse proto.InternalMessageInfo

func (m *DebugLogResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type VizierPodStatus struct {
	Name   string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status *metadatapb.PodStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *VizierPodStatus) Reset()      { *m = VizierPodStatus{} }
func (*VizierPodStatus) ProtoMessage() {}
func (*VizierPodStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{2}
}
func (m *VizierPodStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierPodStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierPodStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierPodStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierPodStatus.Merge(m, src)
}
func (m *VizierPodStatus) XXX_Size() int {
	return m.Size()
}
func (m *VizierPodStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierPodStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VizierPodStatus proto.InternalMessageInfo

func (m *VizierPodStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VizierPodStatus) GetStatus() *metadatapb.PodStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DebugPodsRequest struct {
	ClusterID string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (m *DebugPodsRequest) Reset()      { *m = DebugPodsRequest{} }
func (*DebugPodsRequest) ProtoMessage() {}
func (*DebugPodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{3}
}
func (m *DebugPodsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugPodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugPodsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugPodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugPodsRequest.Merge(m, src)
}
func (m *DebugPodsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DebugPodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugPodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DebugPodsRequest proto.InternalMessageInfo

func (m *DebugPodsRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

type DebugPodsResponse struct {
	DataPlanePods    []*VizierPodStatus `protobuf:"bytes,1,rep,name=data_plane_pods,json=dataPlanePods,proto3" json:"data_plane_pods,omitempty"`
	ControlPlanePods []*VizierPodStatus `protobuf:"bytes,2,rep,name=control_plane_pods,json=controlPlanePods,proto3" json:"control_plane_pods,omitempty"`
}

func (m *DebugPodsResponse) Reset()      { *m = DebugPodsResponse{} }
func (*DebugPodsResponse) ProtoMessage() {}
func (*DebugPodsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{4}
}
func (m *DebugPodsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugPodsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugPodsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugPodsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugPodsResponse.Merge(m, src)
}
func (m *DebugPodsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DebugPodsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugPodsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DebugPodsResponse proto.InternalMessageInfo

func (m *DebugPodsResponse) GetDataPlanePods() []*VizierPodStatus {
	if m != nil {
		return m.DataPlanePods
	}
	return nil
}

func (m *DebugPodsResponse) GetControlPlanePods() []*VizierPodStatus {
	if m != nil {
		return m.ControlPlanePods
	}
	return nil
}

func init() {
	proto.RegisterType((*DebugLogRequest)(nil), "px.api.internal.vizierpb.DebugLogRequest")
	proto.RegisterType((*DebugLogResponse)(nil), "px.api.internal.vizierpb.DebugLogResponse")
	proto.RegisterType((*VizierPodStatus)(nil), "px.api.internal.vizierpb.VizierPodStatus")
	proto.RegisterType((*DebugPodsRequest)(nil), "px.api.internal.vizierpb.DebugPodsRequest")
	proto.RegisterType((*DebugPodsResponse)(nil), "px.api.internal.vizierpb.DebugPodsResponse")
}

func init() { proto.RegisterFile("src/vizier/vizierpb/vizier.proto", fileDescriptor_c0fc9b2b28a09000) }

var fileDescriptor_c0fc9b2b28a09000 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xc7, 0xe3, 0x6d, 0xda, 0xaf, 0xf1, 0x34, 0x75, 0x3f, 0x9f, 0x42, 0x84, 0x4c, 0x15, 0x24,
	0x54, 0xfe, 0x39, 0xa8, 0x5c, 0x26, 0x21, 0x21, 0x34, 0x76, 0x99, 0x84, 0x50, 0xc9, 0x24, 0x90,
	0xb8, 0x54, 0x4e, 0xe2, 0x65, 0xd1, 0xda, 0xd8, 0xd8, 0x4e, 0x35, 0x71, 0xe2, 0x25, 0x70, 0xe0,
	0x45, 0xf0, 0x2e, 0xb8, 0x72, 0xec, 0x71, 0x27, 0x44, 0xd3, 0x0b, 0xc7, 0xbd, 0x04, 0x64, 0x27,
	0x4d, 0xab, 0x49, 0xc0, 0xe0, 0xd4, 0xe7, 0x71, 0xbf, 0xcf, 0xe7, 0x79, 0x9e, 0xaf, 0x1d, 0xd8,
	0x53, 0x32, 0x09, 0xa7, 0xf9, 0xfb, 0x9c, 0xc9, 0xe6, 0x47, 0xc4, 0x4d, 0x40, 0x84, 0xe4, 0x9a,
	0x23, 0x4f, 0x9c, 0x13, 0x2a, 0x72, 0x92, 0x17, 0x9a, 0xc9, 0x82, 0x8e, 0xc9, 0x52, 0xe6, 0x3f,
	0xcc, 0x72, 0x7d, 0x5a, 0xc6, 0x24, 0xe1, 0x93, 0x30, 0xe3, 0x19, 0x0f, 0x6d, 0x41, 0x5c, 0x9e,
	0xd8, 0xcc, 0x26, 0x36, 0xaa, 0x41, 0x7e, 0xdf, 0xb4, 0x52, 0xa7, 0x54, 0xb2, 0x34, 0x3c, 0xdb,
	0x57, 0xe1, 0x84, 0x69, 0x9a, 0x52, 0x4d, 0x45, 0xdc, 0x86, 0xb5, 0x32, 0xf8, 0x04, 0x60, 0xf7,
	0x90, 0xc5, 0x65, 0xf6, 0x82, 0x67, 0x11, 0x7b, 0x57, 0x32, 0xa5, 0xd1, 0x03, 0x08, 0x93, 0x71,
	0xa9, 0x34, 0x93, 0xa3, 0x3c, 0xf5, 0x40, 0x0f, 0xf4, 0xdd, 0x83, 0xdd, 0xea, 0xdb, 0x2d, 0xf7,
	0x79, 0x7d, 0x7a, 0x74, 0x18, 0xb9, 0x8d, 0xe0, 0x28, 0x45, 0x37, 0x60, 0x47, 0xf0, 0x74, 0x54,
	0xd0, 0x09, 0xf3, 0x36, 0x8c, 0x36, 0xfa, 0x4f, 0xf0, 0xf4, 0x25, 0x9d, 0x30, 0xe4, 0xc3, 0x8e,
	0x90, 0x6c, 0x9a, 0xf3, 0x52, 0x79, 0x9b, 0x3d, 0xd0, 0xef, 0x44, 0x6d, 0x8e, 0x6e, 0x42, 0x37,
	0xe1, 0x85, 0xa6, 0x79, 0xc1, 0xa4, 0xb7, 0x65, 0xeb, 0x56, 0x07, 0xc1, 0x1d, 0xb8, 0xb7, 0x9a,
	0x4a, 0x09, 0x5e, 0x28, 0x86, 0x10, 0xdc, 0x32, 0x83, 0x37, 0x4d, 0x6c, 0x1c, 0xc4, 0xb0, 0xfb,
	0xda, 0x7a, 0x34, 0xe4, 0xe9, 0xb1, 0xa6, 0xba, 0x54, 0x46, 0x66, 0x67, 0x01, 0xb5, 0xcc, 0xc4,
	0xe8, 0x09, 0xdc, 0x56, 0xf6, 0x5f, 0x5b, 0xbc, 0x33, 0xb8, 0x4d, 0xc4, 0x39, 0xa9, 0xfd, 0x21,
	0x67, 0xfb, 0x8a, 0xac, 0xfc, 0x21, 0x2d, 0x28, 0x6a, 0x4a, 0x82, 0x67, 0xcd, 0x2c, 0x43, 0x9e,
	0xaa, 0x7f, 0xb2, 0x28, 0xf8, 0x02, 0xe0, 0xff, 0x6b, 0x88, 0x66, 0x9f, 0x57, 0xb0, 0x6b, 0x7a,
	0x8e, 0xc4, 0x98, 0x16, 0x6c, 0x24, 0x78, 0xaa, 0x3c, 0xd0, 0xdb, 0xec, 0xef, 0x0c, 0xee, 0x92,
	0x5f, 0xbd, 0x03, 0x72, 0x65, 0xd9, 0x68, 0xd7, 0x10, 0x86, 0x06, 0x60, 0xd0, 0xe8, 0x0d, 0x44,
	0xc6, 0x43, 0xc9, 0xc7, 0xeb, 0xd4, 0x8d, 0xbf, 0xa5, 0xee, 0x35, 0x90, 0x16, 0x3c, 0x98, 0x03,
	0x88, 0x6a, 0x95, 0xdd, 0xe3, 0x98, 0xc9, 0x69, 0x9e, 0x30, 0x94, 0xc0, 0xce, 0xf2, 0x9a, 0xd0,
	0x6f, 0xf8, 0x57, 0x1e, 0x98, 0x7f, 0xef, 0x3a, 0xd2, 0xda, 0xa5, 0x47, 0x00, 0x9d, 0x40, 0xb7,
	0x35, 0x0f, 0xfd, 0xa9, 0x74, 0xed, 0x92, 0xfc, 0xfb, 0xd7, 0xd2, 0x2e, 0xfb, 0x1c, 0x3c, 0x9d,
	0xcd, 0xb1, 0x73, 0x31, 0xc7, 0xce, 0xe5, 0x1c, 0x83, 0x0f, 0x15, 0x06, 0x9f, 0x2b, 0x0c, 0xbe,
	0x56, 0x18, 0xcc, 0x2a, 0x0c, 0xbe, 0x57, 0x18, 0xfc, 0xa8, 0xb0, 0x73, 0x59, 0x61, 0xf0, 0x71,
	0x81, 0x9d, 0xd9, 0x02, 0x3b, 0x17, 0x0b, 0xec, 0xbc, 0xed, 0x2c, 0x99, 0xf1, 0xb6, 0xfd, 0xa2,
	0x1e, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xc6, 0x1d, 0xde, 0xe8, 0x03, 0x00, 0x00,
}

func (this *DebugLogRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DebugLogRequest)
	if !ok {
		that2, ok := that.(DebugLogRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterID != that1.ClusterID {
		return false
	}
	if this.PodName != that1.PodName {
		return false
	}
	if this.Previous != that1.Previous {
		return false
	}
	if this.Container != that1.Container {
		return false
	}
	return true
}
func (this *DebugLogResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DebugLogResponse)
	if !ok {
		that2, ok := that.(DebugLogResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *VizierPodStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierPodStatus)
	if !ok {
		that2, ok := that.(VizierPodStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *DebugPodsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DebugPodsRequest)
	if !ok {
		that2, ok := that.(DebugPodsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterID != that1.ClusterID {
		return false
	}
	return true
}
func (this *DebugPodsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DebugPodsResponse)
	if !ok {
		that2, ok := that.(DebugPodsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DataPlanePods) != len(that1.DataPlanePods) {
		return false
	}
	for i := range this.DataPlanePods {
		if !this.DataPlanePods[i].Equal(that1.DataPlanePods[i]) {
			return false
		}
	}
	if len(this.ControlPlanePods) != len(that1.ControlPlanePods) {
		return false
	}
	for i := range this.ControlPlanePods {
		if !this.ControlPlanePods[i].Equal(that1.ControlPlanePods[i]) {
			return false
		}
	}
	return true
}
func (this *DebugLogRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&vizierpb.DebugLogRequest{")
	s = append(s, "ClusterID: "+fmt.Sprintf("%#v", this.ClusterID)+",\n")
	s = append(s, "PodName: "+fmt.Sprintf("%#v", this.PodName)+",\n")
	s = append(s, "Previous: "+fmt.Sprintf("%#v", this.Previous)+",\n")
	s = append(s, "Container: "+fmt.Sprintf("%#v", this.Container)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DebugLogResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vizierpb.DebugLogResponse{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierPodStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vizierpb.VizierPodStatus{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DebugPodsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vizierpb.DebugPodsRequest{")
	s = append(s, "ClusterID: "+fmt.Sprintf("%#v", this.ClusterID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DebugPodsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vizierpb.DebugPodsResponse{")
	if this.DataPlanePods != nil {
		s = append(s, "DataPlanePods: "+fmt.Sprintf("%#v", this.DataPlanePods)+",\n")
	}
	if this.ControlPlanePods != nil {
		s = append(s, "ControlPlanePods: "+fmt.Sprintf("%#v", this.ControlPlanePods)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVizier(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VizierDebugServiceClient is the client API for VizierDebugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VizierDebugServiceClient interface {
	DebugLog(ctx context.Context, in *DebugLogRequest, opts ...grpc.CallOption) (VizierDebugService_DebugLogClient, error)
	DebugPods(ctx context.Context, in *DebugPodsRequest, opts ...grpc.CallOption) (VizierDebugService_DebugPodsClient, error)
}

type vizierDebugServiceClient struct {
	cc *grpc.ClientConn
}

func NewVizierDebugServiceClient(cc *grpc.ClientConn) VizierDebugServiceClient {
	return &vizierDebugServiceClient{cc}
}

func (c *vizierDebugServiceClient) DebugLog(ctx context.Context, in *DebugLogRequest, opts ...grpc.CallOption) (VizierDebugService_DebugLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VizierDebugService_serviceDesc.Streams[0], "/px.api.internal.vizierpb.VizierDebugService/DebugLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &vizierDebugServiceDebugLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VizierDebugService_DebugLogClient interface {
	Recv() (*DebugLogResponse, error)
	grpc.ClientStream
}

type vizierDebugServiceDebugLogClient struct {
	grpc.ClientStream
}

func (x *vizierDebugServiceDebugLogClient) Recv() (*DebugLogResponse, error) {
	m := new(DebugLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vizierDebugServiceClient) DebugPods(ctx context.Context, in *DebugPodsRequest, opts ...grpc.CallOption) (VizierDebugService_DebugPodsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VizierDebugService_serviceDesc.Streams[1], "/px.api.internal.vizierpb.VizierDebugService/DebugPods", opts...)
	if err != nil {
		return nil, err
	}
	x := &vizierDebugServiceDebugPodsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VizierDebugService_DebugPodsClient interface {
	Recv() (*DebugPodsResponse, error)
	grpc.ClientStream
}

type vizierDebugServiceDebugPodsClient struct {
	grpc.ClientStream
}

func (x *vizierDebugServiceDebugPodsClient) Recv() (*DebugPodsResponse, error) {
	m := new(DebugPodsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VizierDebugServiceServer is the server API for VizierDebugService service.
type VizierDebugServiceServer interface {
	DebugLog(*DebugLogRequest, VizierDebugService_DebugLogServer) error
	DebugPods(*DebugPodsRequest, VizierDebugService_DebugPodsServer) error
}

// UnimplementedVizierDebugServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVizierDebugServiceServer struct {
}

func (*UnimplementedVizierDebugServiceServer) DebugLog(req *DebugLogRequest, srv VizierDebugService_DebugLogServer) error {
	return status.Errorf(codes.Unimplemented, "method DebugLog not implemented")
}
func (*UnimplementedVizierDebugServiceServer) DebugPods(req *DebugPodsRequest, srv VizierDebugService_DebugPodsServer) error {
	return status.Errorf(codes.Unimplemented, "method DebugPods not implemented")
}

func RegisterVizierDebugServiceServer(s *grpc.Server, srv VizierDebugServiceServer) {
	s.RegisterService(&_VizierDebugService_serviceDesc, srv)
}

func _VizierDebugService_DebugLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DebugLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VizierDebugServiceServer).DebugLog(m, &vizierDebugServiceDebugLogServer{stream})
}

type VizierDebugService_DebugLogServer interface {
	Send(*DebugLogResponse) error
	grpc.ServerStream
}

type vizierDebugServiceDebugLogServer struct {
	grpc.ServerStream
}

func (x *vizierDebugServiceDebugLogServer) Send(m *DebugLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VizierDebugService_DebugPods_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DebugPodsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VizierDebugServiceServer).DebugPods(m, &vizierDebugServiceDebugPodsServer{stream})
}

type VizierDebugService_DebugPodsServer interface {
	Send(*DebugPodsResponse) error
	grpc.ServerStream
}

type vizierDebugServiceDebugPodsServer struct {
	grpc.ServerStream
}

func (x *vizierDebugServiceDebugPodsServer) Send(m *DebugPodsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _VizierDebugService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.api.internal.vizierpb.VizierDebugService",
	HandlerType: (*VizierDebugServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DebugLog",
			Handler:       _VizierDebugService_DebugLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DebugPods",
			Handler:       _VizierDebugService_DebugPods_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/vizier/vizierpb/vizier.proto",
}

func (m *DebugLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Container) > 0 {
		i -= len(m.Container)
		copy(dAtA[i:], m.Container)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Container)))
		i--
		dAtA[i] = 0x22
	}
	if m.Previous {
		i--
		if m.Previous {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterID) > 0 {
		i -= len(m.ClusterID)
		copy(dAtA[i:], m.ClusterID)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.ClusterID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DebugLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *VizierPodStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierPodStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierPodStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DebugPodsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugPodsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugPodsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterID) > 0 {
		i -= len(m.ClusterID)
		copy(dAtA[i:], m.ClusterID)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.ClusterID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DebugPodsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugPodsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugPodsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ControlPlanePods) > 0 {
		for iNdEx := len(m.ControlPlanePods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ControlPlanePods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVizier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DataPlanePods) > 0 {
		for iNdEx := len(m.DataPlanePods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataPlanePods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVizier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVizier(dAtA []byte, offset int, v uint64) int {
	offset -= sovVizier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DebugLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterID)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	if m.Previous {
		n += 2
	}
	l = len(m.Container)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *DebugLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *VizierPodStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *DebugPodsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterID)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *DebugPodsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataPlanePods) > 0 {
		for _, e := range m.DataPlanePods {
			l = e.Size()
			n += 1 + l + sovVizier(uint64(l))
		}
	}
	if len(m.ControlPlanePods) > 0 {
		for _, e := range m.ControlPlanePods {
			l = e.Size()
			n += 1 + l + sovVizier(uint64(l))
		}
	}
	return n
}

func sovVizier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVizier(x uint64) (n int) {
	return sovVizier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DebugLogRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DebugLogRequest{`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`Previous:` + fmt.Sprintf("%v", this.Previous) + `,`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DebugLogResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DebugLogResponse{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierPodStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierPodStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "PodStatus", "metadatapb.PodStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DebugPodsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DebugPodsRequest{`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DebugPodsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDataPlanePods := "[]*VizierPodStatus{"
	for _, f := range this.DataPlanePods {
		repeatedStringForDataPlanePods += strings.Replace(f.String(), "VizierPodStatus", "VizierPodStatus", 1) + ","
	}
	repeatedStringForDataPlanePods += "}"
	repeatedStringForControlPlanePods := "[]*VizierPodStatus{"
	for _, f := range this.ControlPlanePods {
		repeatedStringForControlPlanePods += strings.Replace(f.String(), "VizierPodStatus", "VizierPodStatus", 1) + ","
	}
	repeatedStringForControlPlanePods += "}"
	s := strings.Join([]string{`&DebugPodsResponse{`,
		`DataPlanePods:` + repeatedStringForDataPlanePods + `,`,
		`ControlPlanePods:` + repeatedStringForControlPlanePods + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVizier(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DebugLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Previous = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierPodStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierPodStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierPodStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &metadatapb.PodStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugPodsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugPodsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugPodsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugPodsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugPodsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugPodsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPlanePods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPlanePods = append(m.DataPlanePods, &VizierPodStatus{})
			if err := m.DataPlanePods[len(m.DataPlanePods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlanePods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlPlanePods = append(m.ControlPlanePods, &VizierPodStatus{})
			if err := m.ControlPlanePods[len(m.ControlPlanePods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVizier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVizier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVizier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVizier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVizier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVizier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVizier = fmt.Errorf("proto: unexpected end of group")
)
