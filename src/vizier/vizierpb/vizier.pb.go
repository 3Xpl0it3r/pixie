// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/vizier/vizierpb/vizier.proto

package pl_api_vizierpb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataType int32

const (
	DATA_TYPE_UNKNOWN DataType = 0
	BOOLEAN           DataType = 1
	INT64             DataType = 2
	UINT128           DataType = 3
	FLOAT64           DataType = 4
	STRING            DataType = 5
	TIME64NS          DataType = 6
	DURATION64NS      DataType = 7
)

var DataType_name = map[int32]string{
	0: "DATA_TYPE_UNKNOWN",
	1: "BOOLEAN",
	2: "INT64",
	3: "UINT128",
	4: "FLOAT64",
	5: "STRING",
	6: "TIME64NS",
	7: "DURATION64NS",
}

var DataType_value = map[string]int32{
	"DATA_TYPE_UNKNOWN": 0,
	"BOOLEAN":           1,
	"INT64":             2,
	"UINT128":           3,
	"FLOAT64":           4,
	"STRING":            5,
	"TIME64NS":          6,
	"DURATION64NS":      7,
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{0}
}

type SemanticType int32

const (
	ST_UNSPECIFIED    SemanticType = 0
	ST_NONE           SemanticType = 1
	ST_AGENT_UID      SemanticType = 100
	ST_UPID           SemanticType = 200
	ST_SERVICE_NAME   SemanticType = 300
	ST_POD_NAME       SemanticType = 400
	ST_NODE_NAME      SemanticType = 500
	ST_CONTAINER_NAME SemanticType = 600
	ST_NAMESPACE_NAME SemanticType = 700
)

var SemanticType_name = map[int32]string{
	0:   "ST_UNSPECIFIED",
	1:   "ST_NONE",
	100: "ST_AGENT_UID",
	200: "ST_UPID",
	300: "ST_SERVICE_NAME",
	400: "ST_POD_NAME",
	500: "ST_NODE_NAME",
	600: "ST_CONTAINER_NAME",
	700: "ST_NAMESPACE_NAME",
}

var SemanticType_value = map[string]int32{
	"ST_UNSPECIFIED":    0,
	"ST_NONE":           1,
	"ST_AGENT_UID":      100,
	"ST_UPID":           200,
	"ST_SERVICE_NAME":   300,
	"ST_POD_NAME":       400,
	"ST_NODE_NAME":      500,
	"ST_CONTAINER_NAME": 600,
	"ST_NAMESPACE_NAME": 700,
}

func (SemanticType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{1}
}

type UInt128 struct {
	Low  uint64 `protobuf:"varint,1,opt,name=low,proto3" json:"low,omitempty"`
	High uint64 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (m *UInt128) Reset()      { *m = UInt128{} }
func (*UInt128) ProtoMessage() {}
func (*UInt128) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{0}
}
func (m *UInt128) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UInt128) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UInt128.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UInt128) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UInt128.Merge(m, src)
}
func (m *UInt128) XXX_Size() int {
	return m.Size()
}
func (m *UInt128) XXX_DiscardUnknown() {
	xxx_messageInfo_UInt128.DiscardUnknown(m)
}

var xxx_messageInfo_UInt128 proto.InternalMessageInfo

func (m *UInt128) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *UInt128) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

type BooleanColumn struct {
	Data []bool `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *BooleanColumn) Reset()      { *m = BooleanColumn{} }
func (*BooleanColumn) ProtoMessage() {}
func (*BooleanColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{1}
}
func (m *BooleanColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BooleanColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BooleanColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BooleanColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanColumn.Merge(m, src)
}
func (m *BooleanColumn) XXX_Size() int {
	return m.Size()
}
func (m *BooleanColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanColumn.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanColumn proto.InternalMessageInfo

func (m *BooleanColumn) GetData() []bool {
	if m != nil {
		return m.Data
	}
	return nil
}

type Int64Column struct {
	Data []int64 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Int64Column) Reset()      { *m = Int64Column{} }
func (*Int64Column) ProtoMessage() {}
func (*Int64Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{2}
}
func (m *Int64Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Int64Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Int64Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Int64Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int64Column.Merge(m, src)
}
func (m *Int64Column) XXX_Size() int {
	return m.Size()
}
func (m *Int64Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Int64Column.DiscardUnknown(m)
}

var xxx_messageInfo_Int64Column proto.InternalMessageInfo

func (m *Int64Column) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type UInt128Column struct {
	Data []*UInt128 `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *UInt128Column) Reset()      { *m = UInt128Column{} }
func (*UInt128Column) ProtoMessage() {}
func (*UInt128Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{3}
}
func (m *UInt128Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UInt128Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UInt128Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UInt128Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UInt128Column.Merge(m, src)
}
func (m *UInt128Column) XXX_Size() int {
	return m.Size()
}
func (m *UInt128Column) XXX_DiscardUnknown() {
	xxx_messageInfo_UInt128Column.DiscardUnknown(m)
}

var xxx_messageInfo_UInt128Column proto.InternalMessageInfo

func (m *UInt128Column) GetData() []*UInt128 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Float64Column struct {
	Data []float64 `protobuf:"fixed64,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Float64Column) Reset()      { *m = Float64Column{} }
func (*Float64Column) ProtoMessage() {}
func (*Float64Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{4}
}
func (m *Float64Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Float64Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Float64Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Float64Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Float64Column.Merge(m, src)
}
func (m *Float64Column) XXX_Size() int {
	return m.Size()
}
func (m *Float64Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Float64Column.DiscardUnknown(m)
}

var xxx_messageInfo_Float64Column proto.InternalMessageInfo

func (m *Float64Column) GetData() []float64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Time64NSColumn struct {
	Data []int64 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Time64NSColumn) Reset()      { *m = Time64NSColumn{} }
func (*Time64NSColumn) ProtoMessage() {}
func (*Time64NSColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{5}
}
func (m *Time64NSColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Time64NSColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Time64NSColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Time64NSColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time64NSColumn.Merge(m, src)
}
func (m *Time64NSColumn) XXX_Size() int {
	return m.Size()
}
func (m *Time64NSColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_Time64NSColumn.DiscardUnknown(m)
}

var xxx_messageInfo_Time64NSColumn proto.InternalMessageInfo

func (m *Time64NSColumn) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Duration64NSColumn struct {
	Data []int64 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (m *Duration64NSColumn) Reset()      { *m = Duration64NSColumn{} }
func (*Duration64NSColumn) ProtoMessage() {}
func (*Duration64NSColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{6}
}
func (m *Duration64NSColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Duration64NSColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Duration64NSColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Duration64NSColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Duration64NSColumn.Merge(m, src)
}
func (m *Duration64NSColumn) XXX_Size() int {
	return m.Size()
}
func (m *Duration64NSColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_Duration64NSColumn.DiscardUnknown(m)
}

var xxx_messageInfo_Duration64NSColumn proto.InternalMessageInfo

func (m *Duration64NSColumn) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type StringColumn struct {
	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *StringColumn) Reset()      { *m = StringColumn{} }
func (*StringColumn) ProtoMessage() {}
func (*StringColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{7}
}
func (m *StringColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringColumn.Merge(m, src)
}
func (m *StringColumn) XXX_Size() int {
	return m.Size()
}
func (m *StringColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_StringColumn.DiscardUnknown(m)
}

var xxx_messageInfo_StringColumn proto.InternalMessageInfo

func (m *StringColumn) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type Column struct {
	// Types that are valid to be assigned to ColData:
	//	*Column_BooleanData
	//	*Column_Int64Data
	//	*Column_Uint128Data
	//	*Column_Time64NsData
	//	*Column_Float64Data
	//	*Column_StringData
	//	*Column_Duration64NsData
	ColData isColumn_ColData `protobuf_oneof:"col_data"`
}

func (m *Column) Reset()      { *m = Column{} }
func (*Column) ProtoMessage() {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{8}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(m, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

type isColumn_ColData interface {
	isColumn_ColData()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Column_BooleanData struct {
	BooleanData *BooleanColumn `protobuf:"bytes,1,opt,name=boolean_data,json=booleanData,proto3,oneof" json:"boolean_data,omitempty"`
}
type Column_Int64Data struct {
	Int64Data *Int64Column `protobuf:"bytes,2,opt,name=int64_data,json=int64Data,proto3,oneof" json:"int64_data,omitempty"`
}
type Column_Uint128Data struct {
	Uint128Data *UInt128Column `protobuf:"bytes,3,opt,name=uint128_data,json=uint128Data,proto3,oneof" json:"uint128_data,omitempty"`
}
type Column_Time64NsData struct {
	Time64NsData *Time64NSColumn `protobuf:"bytes,4,opt,name=time64ns_data,json=time64nsData,proto3,oneof" json:"time64ns_data,omitempty"`
}
type Column_Float64Data struct {
	Float64Data *Float64Column `protobuf:"bytes,5,opt,name=float64_data,json=float64Data,proto3,oneof" json:"float64_data,omitempty"`
}
type Column_StringData struct {
	StringData *StringColumn `protobuf:"bytes,6,opt,name=string_data,json=stringData,proto3,oneof" json:"string_data,omitempty"`
}
type Column_Duration64NsData struct {
	Duration64NsData *Duration64NSColumn `protobuf:"bytes,7,opt,name=duration64ns_data,json=duration64nsData,proto3,oneof" json:"duration64ns_data,omitempty"`
}

func (*Column_BooleanData) isColumn_ColData()      {}
func (*Column_Int64Data) isColumn_ColData()        {}
func (*Column_Uint128Data) isColumn_ColData()      {}
func (*Column_Time64NsData) isColumn_ColData()     {}
func (*Column_Float64Data) isColumn_ColData()      {}
func (*Column_StringData) isColumn_ColData()       {}
func (*Column_Duration64NsData) isColumn_ColData() {}

func (m *Column) GetColData() isColumn_ColData {
	if m != nil {
		return m.ColData
	}
	return nil
}

func (m *Column) GetBooleanData() *BooleanColumn {
	if x, ok := m.GetColData().(*Column_BooleanData); ok {
		return x.BooleanData
	}
	return nil
}

func (m *Column) GetInt64Data() *Int64Column {
	if x, ok := m.GetColData().(*Column_Int64Data); ok {
		return x.Int64Data
	}
	return nil
}

func (m *Column) GetUint128Data() *UInt128Column {
	if x, ok := m.GetColData().(*Column_Uint128Data); ok {
		return x.Uint128Data
	}
	return nil
}

func (m *Column) GetTime64NsData() *Time64NSColumn {
	if x, ok := m.GetColData().(*Column_Time64NsData); ok {
		return x.Time64NsData
	}
	return nil
}

func (m *Column) GetFloat64Data() *Float64Column {
	if x, ok := m.GetColData().(*Column_Float64Data); ok {
		return x.Float64Data
	}
	return nil
}

func (m *Column) GetStringData() *StringColumn {
	if x, ok := m.GetColData().(*Column_StringData); ok {
		return x.StringData
	}
	return nil
}

func (m *Column) GetDuration64NsData() *Duration64NSColumn {
	if x, ok := m.GetColData().(*Column_Duration64NsData); ok {
		return x.Duration64NsData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Column) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Column_BooleanData)(nil),
		(*Column_Int64Data)(nil),
		(*Column_Uint128Data)(nil),
		(*Column_Time64NsData)(nil),
		(*Column_Float64Data)(nil),
		(*Column_StringData)(nil),
		(*Column_Duration64NsData)(nil),
	}
}

type RowBatchData struct {
	TableID string    `protobuf:"bytes,5,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Cols    []*Column `protobuf:"bytes,1,rep,name=cols,proto3" json:"cols,omitempty"`
	NumRows int64     `protobuf:"varint,2,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	Eow     bool      `protobuf:"varint,3,opt,name=eow,proto3" json:"eow,omitempty"`
	Eos     bool      `protobuf:"varint,4,opt,name=eos,proto3" json:"eos,omitempty"`
}

func (m *RowBatchData) Reset()      { *m = RowBatchData{} }
func (*RowBatchData) ProtoMessage() {}
func (*RowBatchData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{9}
}
func (m *RowBatchData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowBatchData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowBatchData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowBatchData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowBatchData.Merge(m, src)
}
func (m *RowBatchData) XXX_Size() int {
	return m.Size()
}
func (m *RowBatchData) XXX_DiscardUnknown() {
	xxx_messageInfo_RowBatchData.DiscardUnknown(m)
}

var xxx_messageInfo_RowBatchData proto.InternalMessageInfo

func (m *RowBatchData) GetTableID() string {
	if m != nil {
		return m.TableID
	}
	return ""
}

func (m *RowBatchData) GetCols() []*Column {
	if m != nil {
		return m.Cols
	}
	return nil
}

func (m *RowBatchData) GetNumRows() int64 {
	if m != nil {
		return m.NumRows
	}
	return 0
}

func (m *RowBatchData) GetEow() bool {
	if m != nil {
		return m.Eow
	}
	return false
}

func (m *RowBatchData) GetEos() bool {
	if m != nil {
		return m.Eos
	}
	return false
}

type Relation struct {
	Columns []*Relation_ColumnInfo `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *Relation) Reset()      { *m = Relation{} }
func (*Relation) ProtoMessage() {}
func (*Relation) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{10}
}
func (m *Relation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation.Merge(m, src)
}
func (m *Relation) XXX_Size() int {
	return m.Size()
}
func (m *Relation) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation.DiscardUnknown(m)
}

var xxx_messageInfo_Relation proto.InternalMessageInfo

func (m *Relation) GetColumns() []*Relation_ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

type Relation_ColumnInfo struct {
	ColumnName         string       `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnType         DataType     `protobuf:"varint,2,opt,name=column_type,json=columnType,proto3,enum=pl.api.vizierpb.DataType" json:"column_type,omitempty"`
	ColumnDesc         string       `protobuf:"bytes,3,opt,name=column_desc,json=columnDesc,proto3" json:"column_desc,omitempty"`
	ColumnSemanticType SemanticType `protobuf:"varint,4,opt,name=column_semantic_type,json=columnSemanticType,proto3,enum=pl.api.vizierpb.SemanticType" json:"column_semantic_type,omitempty"`
}

func (m *Relation_ColumnInfo) Reset()      { *m = Relation_ColumnInfo{} }
func (*Relation_ColumnInfo) ProtoMessage() {}
func (*Relation_ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{10, 0}
}
func (m *Relation_ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation_ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relation_ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation_ColumnInfo.Merge(m, src)
}
func (m *Relation_ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *Relation_ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Relation_ColumnInfo proto.InternalMessageInfo

func (m *Relation_ColumnInfo) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *Relation_ColumnInfo) GetColumnType() DataType {
	if m != nil {
		return m.ColumnType
	}
	return DATA_TYPE_UNKNOWN
}

func (m *Relation_ColumnInfo) GetColumnDesc() string {
	if m != nil {
		return m.ColumnDesc
	}
	return ""
}

func (m *Relation_ColumnInfo) GetColumnSemanticType() SemanticType {
	if m != nil {
		return m.ColumnSemanticType
	}
	return ST_UNSPECIFIED
}

type CompilerError struct {
	Line    uint64 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column  uint64 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CompilerError) Reset()      { *m = CompilerError{} }
func (*CompilerError) ProtoMessage() {}
func (*CompilerError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{11}
}
func (m *CompilerError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilerError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilerError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompilerError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilerError.Merge(m, src)
}
func (m *CompilerError) XXX_Size() int {
	return m.Size()
}
func (m *CompilerError) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilerError.DiscardUnknown(m)
}

var xxx_messageInfo_CompilerError proto.InternalMessageInfo

func (m *CompilerError) GetLine() uint64 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *CompilerError) GetColumn() uint64 {
	if m != nil {
		return m.Column
	}
	return 0
}

func (m *CompilerError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ErrorDetails struct {
	// Types that are valid to be assigned to Error:
	//	*ErrorDetails_CompilerError
	Error isErrorDetails_Error `protobuf_oneof:"error"`
}

func (m *ErrorDetails) Reset()      { *m = ErrorDetails{} }
func (*ErrorDetails) ProtoMessage() {}
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{12}
}
func (m *ErrorDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorDetails.Merge(m, src)
}
func (m *ErrorDetails) XXX_Size() int {
	return m.Size()
}
func (m *ErrorDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorDetails proto.InternalMessageInfo

type isErrorDetails_Error interface {
	isErrorDetails_Error()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ErrorDetails_CompilerError struct {
	CompilerError *CompilerError `protobuf:"bytes,1,opt,name=compiler_error,json=compilerError,proto3,oneof" json:"compiler_error,omitempty"`
}

func (*ErrorDetails_CompilerError) isErrorDetails_Error() {}

func (m *ErrorDetails) GetError() isErrorDetails_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ErrorDetails) GetCompilerError() *CompilerError {
	if x, ok := m.GetError().(*ErrorDetails_CompilerError); ok {
		return x.CompilerError
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ErrorDetails) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ErrorDetails_CompilerError)(nil),
	}
}

type Status struct {
	Code         int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message      string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorDetails []*ErrorDetails `protobuf:"bytes,4,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{13}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Status) GetErrorDetails() []*ErrorDetails {
	if m != nil {
		return m.ErrorDetails
	}
	return nil
}

type ScalarValue struct {
	DataType DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=pl.api.vizierpb.DataType" json:"data_type,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ScalarValue_BoolValue
	//	*ScalarValue_Int64Value
	//	*ScalarValue_Float64Value
	//	*ScalarValue_StringValue
	//	*ScalarValue_Time64NsValue
	//	*ScalarValue_Duration64NsValue
	//	*ScalarValue_Uint128Value
	Value isScalarValue_Value `protobuf_oneof:"value"`
}

func (m *ScalarValue) Reset()      { *m = ScalarValue{} }
func (*ScalarValue) ProtoMessage() {}
func (*ScalarValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{14}
}
func (m *ScalarValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScalarValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScalarValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScalarValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalarValue.Merge(m, src)
}
func (m *ScalarValue) XXX_Size() int {
	return m.Size()
}
func (m *ScalarValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalarValue.DiscardUnknown(m)
}

var xxx_messageInfo_ScalarValue proto.InternalMessageInfo

type isScalarValue_Value interface {
	isScalarValue_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ScalarValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
}
type ScalarValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3,oneof" json:"int64_value,omitempty"`
}
type ScalarValue_Float64Value struct {
	Float64Value float64 `protobuf:"fixed64,4,opt,name=float64_value,json=float64Value,proto3,oneof" json:"float64_value,omitempty"`
}
type ScalarValue_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type ScalarValue_Time64NsValue struct {
	Time64NsValue int64 `protobuf:"varint,6,opt,name=time64_ns_value,json=time64NsValue,proto3,oneof" json:"time64_ns_value,omitempty"`
}
type ScalarValue_Duration64NsValue struct {
	Duration64NsValue int64 `protobuf:"varint,8,opt,name=duration64_ns_value,json=duration64NsValue,proto3,oneof" json:"duration64_ns_value,omitempty"`
}
type ScalarValue_Uint128Value struct {
	Uint128Value *UInt128 `protobuf:"bytes,7,opt,name=uint128_value,json=uint128Value,proto3,oneof" json:"uint128_value,omitempty"`
}

func (*ScalarValue_BoolValue) isScalarValue_Value()         {}
func (*ScalarValue_Int64Value) isScalarValue_Value()        {}
func (*ScalarValue_Float64Value) isScalarValue_Value()      {}
func (*ScalarValue_StringValue) isScalarValue_Value()       {}
func (*ScalarValue_Time64NsValue) isScalarValue_Value()     {}
func (*ScalarValue_Duration64NsValue) isScalarValue_Value() {}
func (*ScalarValue_Uint128Value) isScalarValue_Value()      {}

func (m *ScalarValue) GetValue() isScalarValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ScalarValue) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DATA_TYPE_UNKNOWN
}

func (m *ScalarValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*ScalarValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *ScalarValue) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*ScalarValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *ScalarValue) GetFloat64Value() float64 {
	if x, ok := m.GetValue().(*ScalarValue_Float64Value); ok {
		return x.Float64Value
	}
	return 0
}

func (m *ScalarValue) GetStringValue() string {
	if x, ok := m.GetValue().(*ScalarValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *ScalarValue) GetTime64NsValue() int64 {
	if x, ok := m.GetValue().(*ScalarValue_Time64NsValue); ok {
		return x.Time64NsValue
	}
	return 0
}

func (m *ScalarValue) GetDuration64NsValue() int64 {
	if x, ok := m.GetValue().(*ScalarValue_Duration64NsValue); ok {
		return x.Duration64NsValue
	}
	return 0
}

func (m *ScalarValue) GetUint128Value() *UInt128 {
	if x, ok := m.GetValue().(*ScalarValue_Uint128Value); ok {
		return x.Uint128Value
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ScalarValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ScalarValue_BoolValue)(nil),
		(*ScalarValue_Int64Value)(nil),
		(*ScalarValue_Float64Value)(nil),
		(*ScalarValue_StringValue)(nil),
		(*ScalarValue_Time64NsValue)(nil),
		(*ScalarValue_Duration64NsValue)(nil),
		(*ScalarValue_Uint128Value)(nil),
	}
}

type ExecuteScriptRequest struct {
	QueryStr  string                                `protobuf:"bytes,1,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
	ClusterID string                                `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ExecFuncs []*ExecuteScriptRequest_FuncToExecute `protobuf:"bytes,4,rep,name=exec_funcs,json=execFuncs,proto3" json:"exec_funcs,omitempty"`
}

func (m *ExecuteScriptRequest) Reset()      { *m = ExecuteScriptRequest{} }
func (*ExecuteScriptRequest) ProtoMessage() {}
func (*ExecuteScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{15}
}
func (m *ExecuteScriptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteScriptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteScriptRequest.Merge(m, src)
}
func (m *ExecuteScriptRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteScriptRequest proto.InternalMessageInfo

func (m *ExecuteScriptRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

func (m *ExecuteScriptRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *ExecuteScriptRequest) GetExecFuncs() []*ExecuteScriptRequest_FuncToExecute {
	if m != nil {
		return m.ExecFuncs
	}
	return nil
}

type ExecuteScriptRequest_FuncToExecute struct {
	FuncName          string                                         `protobuf:"bytes,1,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	ArgValues         []*ExecuteScriptRequest_FuncToExecute_ArgValue `protobuf:"bytes,2,rep,name=arg_values,json=argValues,proto3" json:"arg_values,omitempty"`
	OutputTablePrefix string                                         `protobuf:"bytes,3,opt,name=output_table_prefix,json=outputTablePrefix,proto3" json:"output_table_prefix,omitempty"`
}

func (m *ExecuteScriptRequest_FuncToExecute) Reset()      { *m = ExecuteScriptRequest_FuncToExecute{} }
func (*ExecuteScriptRequest_FuncToExecute) ProtoMessage() {}
func (*ExecuteScriptRequest_FuncToExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{15, 0}
}
func (m *ExecuteScriptRequest_FuncToExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteScriptRequest_FuncToExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteScriptRequest_FuncToExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteScriptRequest_FuncToExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteScriptRequest_FuncToExecute.Merge(m, src)
}
func (m *ExecuteScriptRequest_FuncToExecute) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteScriptRequest_FuncToExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteScriptRequest_FuncToExecute.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteScriptRequest_FuncToExecute proto.InternalMessageInfo

func (m *ExecuteScriptRequest_FuncToExecute) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *ExecuteScriptRequest_FuncToExecute) GetArgValues() []*ExecuteScriptRequest_FuncToExecute_ArgValue {
	if m != nil {
		return m.ArgValues
	}
	return nil
}

func (m *ExecuteScriptRequest_FuncToExecute) GetOutputTablePrefix() string {
	if m != nil {
		return m.OutputTablePrefix
	}
	return ""
}

type ExecuteScriptRequest_FuncToExecute_ArgValue struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) Reset() {
	*m = ExecuteScriptRequest_FuncToExecute_ArgValue{}
}
func (*ExecuteScriptRequest_FuncToExecute_ArgValue) ProtoMessage() {}
func (*ExecuteScriptRequest_FuncToExecute_ArgValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{15, 0, 0}
}
func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteScriptRequest_FuncToExecute_ArgValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteScriptRequest_FuncToExecute_ArgValue.Merge(m, src)
}
func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteScriptRequest_FuncToExecute_ArgValue.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteScriptRequest_FuncToExecute_ArgValue proto.InternalMessageInfo

func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryTimingInfo struct {
	ExecutionTimeNs   int64 `protobuf:"varint,1,opt,name=execution_time_ns,json=executionTimeNs,proto3" json:"execution_time_ns,omitempty"`
	CompilationTimeNs int64 `protobuf:"varint,2,opt,name=compilation_time_ns,json=compilationTimeNs,proto3" json:"compilation_time_ns,omitempty"`
}

func (m *QueryTimingInfo) Reset()      { *m = QueryTimingInfo{} }
func (*QueryTimingInfo) ProtoMessage() {}
func (*QueryTimingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{16}
}
func (m *QueryTimingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTimingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTimingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTimingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTimingInfo.Merge(m, src)
}
func (m *QueryTimingInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryTimingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTimingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTimingInfo proto.InternalMessageInfo

func (m *QueryTimingInfo) GetExecutionTimeNs() int64 {
	if m != nil {
		return m.ExecutionTimeNs
	}
	return 0
}

func (m *QueryTimingInfo) GetCompilationTimeNs() int64 {
	if m != nil {
		return m.CompilationTimeNs
	}
	return 0
}

type QueryExecutionStats struct {
	Timing           *QueryTimingInfo `protobuf:"bytes,1,opt,name=timing,proto3" json:"timing,omitempty"`
	BytesProcessed   int64            `protobuf:"varint,2,opt,name=bytes_processed,json=bytesProcessed,proto3" json:"bytes_processed,omitempty"`
	RecordsProcessed int64            `protobuf:"varint,3,opt,name=records_processed,json=recordsProcessed,proto3" json:"records_processed,omitempty"`
}

func (m *QueryExecutionStats) Reset()      { *m = QueryExecutionStats{} }
func (*QueryExecutionStats) ProtoMessage() {}
func (*QueryExecutionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{17}
}
func (m *QueryExecutionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutionStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutionStats.Merge(m, src)
}
func (m *QueryExecutionStats) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutionStats.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutionStats proto.InternalMessageInfo

func (m *QueryExecutionStats) GetTiming() *QueryTimingInfo {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (m *QueryExecutionStats) GetBytesProcessed() int64 {
	if m != nil {
		return m.BytesProcessed
	}
	return 0
}

func (m *QueryExecutionStats) GetRecordsProcessed() int64 {
	if m != nil {
		return m.RecordsProcessed
	}
	return 0
}

type QueryMetadata struct {
	Relation *Relation `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ID       string    `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryMetadata) Reset()      { *m = QueryMetadata{} }
func (*QueryMetadata) ProtoMessage() {}
func (*QueryMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{18}
}
func (m *QueryMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetadata.Merge(m, src)
}
func (m *QueryMetadata) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetadata proto.InternalMessageInfo

func (m *QueryMetadata) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

func (m *QueryMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryMetadata) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryData struct {
	Batch          *RowBatchData        `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	ExecutionStats *QueryExecutionStats `protobuf:"bytes,2,opt,name=execution_stats,json=executionStats,proto3" json:"execution_stats,omitempty"`
}

func (m *QueryData) Reset()      { *m = QueryData{} }
func (*QueryData) ProtoMessage() {}
func (*QueryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{19}
}
func (m *QueryData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryData.Merge(m, src)
}
func (m *QueryData) XXX_Size() int {
	return m.Size()
}
func (m *QueryData) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryData.DiscardUnknown(m)
}

var xxx_messageInfo_QueryData proto.InternalMessageInfo

func (m *QueryData) GetBatch() *RowBatchData {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *QueryData) GetExecutionStats() *QueryExecutionStats {
	if m != nil {
		return m.ExecutionStats
	}
	return nil
}

type ExecuteScriptResponse struct {
	Status  *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	QueryID string  `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*ExecuteScriptResponse_Data
	//	*ExecuteScriptResponse_MetaData
	Result isExecuteScriptResponse_Result `protobuf_oneof:"result"`
}

func (m *ExecuteScriptResponse) Reset()      { *m = ExecuteScriptResponse{} }
func (*ExecuteScriptResponse) ProtoMessage() {}
func (*ExecuteScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{20}
}
func (m *ExecuteScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteScriptResponse.Merge(m, src)
}
func (m *ExecuteScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteScriptResponse proto.InternalMessageInfo

type isExecuteScriptResponse_Result interface {
	isExecuteScriptResponse_Result()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecuteScriptResponse_Data struct {
	Data *QueryData `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
}
type ExecuteScriptResponse_MetaData struct {
	MetaData *QueryMetadata `protobuf:"bytes,4,opt,name=meta_data,json=metaData,proto3,oneof" json:"meta_data,omitempty"`
}

func (*ExecuteScriptResponse_Data) isExecuteScriptResponse_Result()     {}
func (*ExecuteScriptResponse_MetaData) isExecuteScriptResponse_Result() {}

func (m *ExecuteScriptResponse) GetResult() isExecuteScriptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ExecuteScriptResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ExecuteScriptResponse) GetQueryID() string {
	if m != nil {
		return m.QueryID
	}
	return ""
}

func (m *ExecuteScriptResponse) GetData() *QueryData {
	if x, ok := m.GetResult().(*ExecuteScriptResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (m *ExecuteScriptResponse) GetMetaData() *QueryMetadata {
	if x, ok := m.GetResult().(*ExecuteScriptResponse_MetaData); ok {
		return x.MetaData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExecuteScriptResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExecuteScriptResponse_Data)(nil),
		(*ExecuteScriptResponse_MetaData)(nil),
	}
}

type HealthCheckRequest struct {
	ClusterID string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (m *HealthCheckRequest) Reset()      { *m = HealthCheckRequest{} }
func (*HealthCheckRequest) ProtoMessage() {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{21}
}
func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

func (m *HealthCheckRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

type HealthCheckResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *HealthCheckResponse) Reset()      { *m = HealthCheckResponse{} }
func (*HealthCheckResponse) ProtoMessage() {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc9b2b28a09000, []int{22}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterEnum("pl.api.vizierpb.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("pl.api.vizierpb.SemanticType", SemanticType_name, SemanticType_value)
	proto.RegisterType((*UInt128)(nil), "pl.api.vizierpb.UInt128")
	proto.RegisterType((*BooleanColumn)(nil), "pl.api.vizierpb.BooleanColumn")
	proto.RegisterType((*Int64Column)(nil), "pl.api.vizierpb.Int64Column")
	proto.RegisterType((*UInt128Column)(nil), "pl.api.vizierpb.UInt128Column")
	proto.RegisterType((*Float64Column)(nil), "pl.api.vizierpb.Float64Column")
	proto.RegisterType((*Time64NSColumn)(nil), "pl.api.vizierpb.Time64NSColumn")
	proto.RegisterType((*Duration64NSColumn)(nil), "pl.api.vizierpb.Duration64NSColumn")
	proto.RegisterType((*StringColumn)(nil), "pl.api.vizierpb.StringColumn")
	proto.RegisterType((*Column)(nil), "pl.api.vizierpb.Column")
	proto.RegisterType((*RowBatchData)(nil), "pl.api.vizierpb.RowBatchData")
	proto.RegisterType((*Relation)(nil), "pl.api.vizierpb.Relation")
	proto.RegisterType((*Relation_ColumnInfo)(nil), "pl.api.vizierpb.Relation.ColumnInfo")
	proto.RegisterType((*CompilerError)(nil), "pl.api.vizierpb.CompilerError")
	proto.RegisterType((*ErrorDetails)(nil), "pl.api.vizierpb.ErrorDetails")
	proto.RegisterType((*Status)(nil), "pl.api.vizierpb.Status")
	proto.RegisterType((*ScalarValue)(nil), "pl.api.vizierpb.ScalarValue")
	proto.RegisterType((*ExecuteScriptRequest)(nil), "pl.api.vizierpb.ExecuteScriptRequest")
	proto.RegisterType((*ExecuteScriptRequest_FuncToExecute)(nil), "pl.api.vizierpb.ExecuteScriptRequest.FuncToExecute")
	proto.RegisterType((*ExecuteScriptRequest_FuncToExecute_ArgValue)(nil), "pl.api.vizierpb.ExecuteScriptRequest.FuncToExecute.ArgValue")
	proto.RegisterType((*QueryTimingInfo)(nil), "pl.api.vizierpb.QueryTimingInfo")
	proto.RegisterType((*QueryExecutionStats)(nil), "pl.api.vizierpb.QueryExecutionStats")
	proto.RegisterType((*QueryMetadata)(nil), "pl.api.vizierpb.QueryMetadata")
	proto.RegisterType((*QueryData)(nil), "pl.api.vizierpb.QueryData")
	proto.RegisterType((*ExecuteScriptResponse)(nil), "pl.api.vizierpb.ExecuteScriptResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "pl.api.vizierpb.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "pl.api.vizierpb.HealthCheckResponse")
}

func init() { proto.RegisterFile("src/vizier/vizierpb/vizier.proto", fileDescriptor_c0fc9b2b28a09000) }

var fileDescriptor_c0fc9b2b28a09000 = []byte{
	// 1769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x4f, 0x8f, 0x1b, 0x49,
	0x15, 0x77, 0xdb, 0x1e, 0xbb, 0xfd, 0x6c, 0xcf, 0x78, 0x2a, 0xd9, 0xec, 0x64, 0x00, 0x4f, 0xb6,
	0x93, 0x5d, 0x46, 0xd9, 0xc5, 0x93, 0x9d, 0x0c, 0x51, 0x84, 0x08, 0xe0, 0x7f, 0x13, 0xf7, 0xb2,
	0x69, 0x0f, 0xe5, 0x9e, 0x20, 0x04, 0x52, 0xd3, 0x6e, 0xd7, 0xcc, 0xb4, 0xb0, 0xbb, 0xbd, 0xfd,
	0x27, 0x93, 0x70, 0x21, 0xdf, 0x80, 0xfd, 0x0c, 0x48, 0x48, 0x7b, 0x80, 0x2f, 0x80, 0xf8, 0x00,
	0x7b, 0x0c, 0xb7, 0x48, 0x48, 0x11, 0x71, 0x2e, 0x48, 0x1c, 0xd8, 0x03, 0x37, 0x2e, 0xa8, 0x5e,
	0x55, 0xcf, 0xb4, 0x63, 0x4f, 0x82, 0x72, 0x72, 0xf5, 0x7b, 0xbf, 0xf7, 0x7b, 0xaf, 0xea, 0x55,
	0xfd, 0xaa, 0x0c, 0xd7, 0xc2, 0xc0, 0xd9, 0x79, 0xe4, 0xfe, 0xd6, 0x65, 0x81, 0xfc, 0x99, 0x0e,
	0xe5, 0xa0, 0x31, 0x0d, 0xfc, 0xc8, 0x27, 0x6b, 0xd3, 0x71, 0xc3, 0x9e, 0xba, 0x8d, 0xc4, 0xbb,
	0xf9, 0xbd, 0x63, 0x37, 0x3a, 0x89, 0x87, 0x0d, 0xc7, 0x9f, 0xec, 0x1c, 0xfb, 0xc7, 0xfe, 0x0e,
	0xe2, 0x86, 0xf1, 0x11, 0x7e, 0xe1, 0x07, 0x8e, 0x44, 0xbc, 0xb6, 0x03, 0xc5, 0x43, 0xdd, 0x8b,
	0x3e, 0xdd, 0xbd, 0x4b, 0x6a, 0x90, 0x1b, 0xfb, 0xa7, 0x1b, 0xca, 0x35, 0x65, 0x3b, 0x4f, 0xf9,
	0x90, 0x10, 0xc8, 0x9f, 0xb8, 0xc7, 0x27, 0x1b, 0x59, 0x34, 0xe1, 0x58, 0xbb, 0x0e, 0xd5, 0x96,
	0xef, 0x8f, 0x99, 0xed, 0xb5, 0xfd, 0x71, 0x3c, 0xf1, 0x38, 0x68, 0x64, 0x47, 0xf6, 0x86, 0x72,
	0x2d, 0xb7, 0xad, 0x52, 0x1c, 0x6b, 0x1f, 0x40, 0x59, 0xf7, 0xa2, 0x3b, 0x7b, 0x4b, 0x20, 0x39,
	0x09, 0xb9, 0x07, 0x55, 0x99, 0x58, 0x82, 0x3e, 0x49, 0x81, 0xca, 0xbb, 0x1b, 0x8d, 0xd7, 0x26,
	0xd6, 0x90, 0x68, 0x19, 0x7e, 0x1d, 0xaa, 0xfb, 0x63, 0xdf, 0x5e, 0x9e, 0x43, 0x91, 0xa0, 0x1b,
	0xb0, 0x6a, 0xba, 0x13, 0x76, 0x67, 0xcf, 0x18, 0xbc, 0xa1, 0x92, 0x6d, 0x20, 0x9d, 0x38, 0xb0,
	0x23, 0xd7, 0xf7, 0xde, 0x82, 0xd4, 0xa0, 0x32, 0x88, 0x02, 0xd7, 0x3b, 0x5e, 0x82, 0x29, 0x49,
	0xcc, 0xd3, 0x3c, 0x14, 0xa4, 0xbb, 0x0d, 0x95, 0xa1, 0x58, 0x2a, 0x4b, 0xc2, 0x94, 0xed, 0xf2,
	0x6e, 0x7d, 0x61, 0x66, 0x73, 0xeb, 0xd9, 0xcb, 0xd0, 0xb2, 0x8c, 0xea, 0xd8, 0x91, 0x4d, 0xee,
	0x01, 0xb8, 0x7c, 0x29, 0x05, 0x45, 0x16, 0x29, 0xbe, 0xbd, 0x40, 0x91, 0x5a, 0xed, 0x5e, 0x86,
	0x96, 0x30, 0x02, 0xc3, 0xdb, 0x50, 0x89, 0x5d, 0x5c, 0x38, 0x41, 0x90, 0xbb, 0xa0, 0x86, 0xb9,
	0x5e, 0xf0, 0x1a, 0x64, 0x14, 0x92, 0xec, 0x43, 0x35, 0xc2, 0x75, 0xf4, 0x42, 0xc1, 0x92, 0x47,
	0x96, 0xad, 0x05, 0x96, 0xf9, 0xd5, 0xee, 0x65, 0x68, 0x25, 0x89, 0x4b, 0x8a, 0x39, 0x12, 0x4d,
	0x13, 0x34, 0x2b, 0x17, 0x14, 0x33, 0xd7, 0x59, 0x5e, 0x8c, 0x8c, 0x42, 0x92, 0x9f, 0x40, 0x39,
	0xc4, 0x26, 0x08, 0x8e, 0x02, 0x72, 0x7c, 0x67, 0x81, 0x23, 0xdd, 0xa8, 0x5e, 0x86, 0x82, 0x88,
	0x41, 0x06, 0x0a, 0xeb, 0xa3, 0xb3, 0x86, 0x27, 0x53, 0x2a, 0x22, 0xcf, 0xf5, 0x05, 0x9e, 0xc5,
	0xad, 0xd1, 0xcb, 0xd0, 0x5a, 0x3a, 0x9e, 0x73, 0xb6, 0x00, 0x54, 0xc7, 0x1f, 0x23, 0x95, 0xf6,
	0x07, 0x05, 0x2a, 0xd4, 0x3f, 0x6d, 0xd9, 0x91, 0x73, 0x82, 0x09, 0x3f, 0x02, 0x35, 0xb2, 0x87,
	0x63, 0x66, 0xb9, 0x23, 0x9c, 0x73, 0xa9, 0x55, 0x9e, 0xbd, 0xd8, 0x2a, 0x9a, 0xdc, 0xa6, 0x77,
	0x68, 0x11, 0x9d, 0xfa, 0x88, 0x7c, 0x0c, 0x79, 0xc7, 0x1f, 0x87, 0xf2, 0x08, 0xbc, 0xbf, 0x50,
	0x8b, 0xc8, 0x4f, 0x11, 0x44, 0xae, 0x82, 0xea, 0xc5, 0x13, 0x2b, 0xf0, 0x4f, 0x43, 0xdc, 0x16,
	0x39, 0x5a, 0xf4, 0xe2, 0x09, 0xf5, 0x4f, 0x43, 0x7e, 0x92, 0x99, 0x7f, 0x8a, 0xbd, 0x56, 0x29,
	0x1f, 0x0a, 0x4b, 0x88, 0x7d, 0x43, 0x4b, 0xa8, 0x7d, 0x95, 0x05, 0x95, 0xb2, 0x31, 0xce, 0x82,
	0xfc, 0x08, 0x8a, 0x0e, 0x72, 0x27, 0xb9, 0x6f, 0x2c, 0xe4, 0x4e, 0xb0, 0xb2, 0x08, 0xdd, 0x3b,
	0xf2, 0x69, 0x12, 0xb4, 0xf9, 0x77, 0x05, 0xe0, 0xdc, 0x4e, 0xb6, 0xa0, 0x2c, 0x3c, 0x96, 0x67,
	0x4f, 0x18, 0xee, 0xfb, 0x12, 0x05, 0x61, 0x32, 0xec, 0x09, 0x23, 0x3f, 0x38, 0x03, 0x44, 0x4f,
	0xa6, 0x0c, 0xcb, 0x5f, 0xdd, 0xbd, 0xba, 0xb8, 0xf6, 0x76, 0x64, 0x9b, 0x4f, 0xa6, 0x2c, 0x89,
	0xe5, 0xe3, 0x14, 0xf9, 0x88, 0x85, 0x0e, 0x4e, 0xf2, 0x8c, 0xbc, 0xc3, 0x42, 0x87, 0xf4, 0xe1,
	0xb2, 0x04, 0x84, 0x6c, 0x62, 0x7b, 0x91, 0xeb, 0x88, 0x2c, 0x79, 0xcc, 0xb2, 0x64, 0xa7, 0x48,
	0x14, 0x66, 0x22, 0x22, 0x34, 0x6d, 0xd3, 0x0e, 0xa1, 0xda, 0xf6, 0x27, 0x53, 0x77, 0xcc, 0x82,
	0x6e, 0x10, 0xf8, 0x01, 0x3f, 0xf7, 0x63, 0xd7, 0x63, 0x52, 0x2a, 0x71, 0x4c, 0xae, 0x40, 0x41,
	0x84, 0x4a, 0xb5, 0x94, 0x5f, 0x64, 0x03, 0x8a, 0x13, 0x16, 0x86, 0xf6, 0x31, 0x93, 0xa5, 0x26,
	0x9f, 0xda, 0xaf, 0xa1, 0x82, 0x74, 0x1d, 0x16, 0xd9, 0xee, 0x38, 0x24, 0xf7, 0x61, 0xd5, 0x91,
	0x69, 0x2c, 0xc6, 0x1d, 0x17, 0x0a, 0xc6, 0x5c, 0x35, 0xbd, 0x0c, 0xad, 0x3a, 0x69, 0x43, 0xab,
	0x08, 0x2b, 0x18, 0xaf, 0x3d, 0x55, 0xa0, 0x30, 0x88, 0xec, 0x28, 0x0e, 0x79, 0xc9, 0x8e, 0x3f,
	0x12, 0x25, 0xaf, 0x50, 0x1c, 0xa7, 0x4b, 0xcb, 0xce, 0x95, 0x46, 0x5a, 0x50, 0x45, 0x06, 0x6b,
	0x24, 0x6a, 0xdb, 0xc8, 0xe3, 0xae, 0x58, 0x5c, 0xbb, 0xf4, 0x04, 0x68, 0x85, 0xa5, 0xbe, 0x3e,
	0xcb, 0xab, 0xb9, 0x5a, 0x5e, 0xfb, 0x6f, 0x16, 0xca, 0x03, 0xc7, 0x1e, 0xdb, 0xc1, 0x43, 0x7b,
	0x1c, 0x33, 0x72, 0x07, 0x4a, 0xfc, 0x8c, 0x88, 0x8e, 0x28, 0x6f, 0xeb, 0xbb, 0x3a, 0x92, 0x23,
	0xb2, 0x05, 0xc0, 0x55, 0xd1, 0x7a, 0xc4, 0x59, 0xb0, 0x5c, 0x95, 0x0b, 0x1d, 0xb7, 0x09, 0xe2,
	0x0f, 0xa0, 0x2c, 0x74, 0x52, 0x20, 0xf8, 0x5a, 0xe7, 0xf8, 0xb9, 0x47, 0xa3, 0x80, 0x7c, 0x08,
	0xd5, 0x44, 0x7e, 0x04, 0x88, 0xef, 0x08, 0x85, 0xab, 0x94, 0x34, 0x0b, 0xd8, 0x75, 0xa8, 0x48,
	0x81, 0x11, 0x28, 0x3c, 0xb1, 0x5c, 0x85, 0x84, 0x55, 0x80, 0xb6, 0x61, 0x4d, 0x48, 0x9b, 0xe5,
	0x85, 0x12, 0x57, 0x90, 0x29, 0xa5, 0x56, 0x1a, 0xa1, 0x40, 0xde, 0x82, 0x4b, 0xe7, 0x6a, 0x71,
	0x8e, 0x56, 0x25, 0x3a, 0x25, 0x45, 0x49, 0xc4, 0x8f, 0xa1, 0x9a, 0x68, 0xb6, 0xc0, 0x0a, 0x6d,
	0xba, 0xf0, 0x4a, 0xe4, 0x33, 0x90, 0x01, 0x48, 0xc0, 0x37, 0x00, 0x06, 0x6a, 0x7f, 0xce, 0xc1,
	0xe5, 0xee, 0x63, 0xe6, 0xc4, 0x11, 0x1b, 0x38, 0x81, 0x3b, 0x8d, 0x28, 0xfb, 0x22, 0x66, 0x61,
	0x44, 0xbe, 0x05, 0xa5, 0x2f, 0x62, 0x16, 0x3c, 0xb1, 0xc2, 0x28, 0x90, 0xe7, 0x53, 0x45, 0xc3,
	0x20, 0x0a, 0xc8, 0x27, 0x00, 0xce, 0x38, 0x0e, 0x23, 0x16, 0x70, 0xc1, 0xc2, 0x5d, 0xdb, 0xaa,
	0xce, 0x5e, 0x6c, 0x95, 0xda, 0xc2, 0xaa, 0x77, 0x68, 0x49, 0x02, 0xf4, 0x11, 0xa1, 0x00, 0xec,
	0x31, 0x73, 0xac, 0xa3, 0xd8, 0x73, 0x92, 0x8d, 0x72, 0x7b, 0x71, 0xa3, 0x2c, 0xa9, 0xa2, 0xb1,
	0x1f, 0x7b, 0x8e, 0xe9, 0x4b, 0x17, 0x2d, 0x71, 0x1a, 0x6e, 0x0a, 0x37, 0xff, 0xad, 0x40, 0x75,
	0xce, 0xc9, 0x0b, 0xe6, 0x09, 0xd2, 0x82, 0xa2, 0x72, 0x03, 0xca, 0xc9, 0x2f, 0x01, 0xec, 0x40,
	0xb6, 0x8b, 0x8b, 0x21, 0x2f, 0xe1, 0x87, 0xef, 0x50, 0x42, 0xa3, 0x19, 0x88, 0xf6, 0xd2, 0x92,
	0x2d, 0x47, 0x21, 0x69, 0xc0, 0x25, 0x3f, 0x8e, 0xa6, 0x71, 0x64, 0x09, 0x0d, 0x9f, 0x06, 0xec,
	0xc8, 0x7d, 0x2c, 0x0f, 0xf3, 0xba, 0x70, 0xa1, 0x92, 0x1f, 0xa0, 0x63, 0x73, 0x0f, 0xd4, 0x84,
	0x86, 0x9f, 0xba, 0x54, 0xc1, 0x38, 0x26, 0x97, 0x65, 0x73, 0xe4, 0x99, 0x13, 0x1f, 0x9f, 0xe5,
	0xd5, 0x6c, 0x2d, 0xa7, 0x4d, 0x60, 0xed, 0x67, 0xbc, 0x0b, 0xa6, 0x3b, 0x71, 0xbd, 0x63, 0xd4,
	0xd2, 0x9b, 0xb0, 0xce, 0xb0, 0x3a, 0xd7, 0xf7, 0x2c, 0xbe, 0xb3, 0x2c, 0x14, 0x69, 0xae, 0xf7,
	0x6b, 0x67, 0x0e, 0x7e, 0xef, 0x1a, 0x58, 0xaa, 0x50, 0x02, 0x7b, 0x0e, 0x2d, 0x6e, 0x87, 0xf5,
	0x94, 0x4b, 0xe0, 0xb5, 0x3f, 0x2a, 0x70, 0x09, 0xf3, 0x75, 0x13, 0x22, 0xae, 0x16, 0x21, 0xb9,
	0x0b, 0x85, 0x08, 0x2b, 0x90, 0x0a, 0x74, 0x6d, 0x61, 0x2d, 0x5f, 0xab, 0x92, 0x4a, 0x3c, 0xf9,
	0x2e, 0xac, 0x0d, 0x9f, 0x44, 0x2c, 0xb4, 0xa6, 0x81, 0xef, 0xb0, 0x30, 0x64, 0x23, 0x99, 0x7d,
	0x15, 0xcd, 0x07, 0x89, 0x95, 0x7c, 0x0c, 0xeb, 0x01, 0x73, 0xfc, 0x60, 0x94, 0x86, 0xe2, 0xa1,
	0xa5, 0x35, 0xe9, 0x38, 0x03, 0x6b, 0x01, 0x54, 0x31, 0xe1, 0x03, 0x16, 0xd9, 0x5c, 0x11, 0xc8,
	0xf7, 0x41, 0x0d, 0xe4, 0x7d, 0x24, 0x4b, 0xbc, 0x7a, 0xe1, 0x85, 0x45, 0xcf, 0xa0, 0x67, 0xed,
	0xc8, 0xa6, 0xda, 0x71, 0x05, 0xb2, 0x67, 0x9b, 0xbc, 0x30, 0x7b, 0xb1, 0x95, 0xd5, 0x3b, 0x34,
	0xeb, 0x8e, 0xb4, 0xdf, 0x2b, 0x50, 0xc2, 0xa4, 0x78, 0x83, 0xdf, 0x86, 0x95, 0x21, 0xbf, 0xce,
	0x65, 0xb6, 0x45, 0x21, 0x4c, 0xdf, 0xf7, 0x54, 0x60, 0xc9, 0x03, 0x38, 0xef, 0x90, 0x15, 0xf2,
	0x95, 0x95, 0xef, 0xb7, 0x1b, 0xcb, 0xd7, 0x73, 0xbe, 0x0b, 0x74, 0x95, 0xcd, 0x7d, 0x6b, 0xff,
	0x52, 0xe0, 0xbd, 0xd7, 0xf6, 0x70, 0x38, 0xf5, 0xbd, 0x90, 0x91, 0x1d, 0x28, 0x84, 0x28, 0xf3,
	0xb2, 0xbc, 0xf7, 0x97, 0xbc, 0x86, 0xb8, 0x9b, 0x4a, 0x18, 0x7f, 0x90, 0x88, 0xe3, 0xef, 0x8a,
	0xfe, 0xc8, 0x07, 0x09, 0x56, 0xc1, 0x1f, 0x24, 0xe8, 0xd4, 0x47, 0xe4, 0x96, 0x7c, 0xe0, 0x8a,
	0x57, 0xe3, 0xe6, 0xf2, 0xb2, 0xf9, 0x94, 0x7b, 0x19, 0xf1, 0xfc, 0x25, 0xf7, 0xa0, 0x34, 0x61,
	0x91, 0x9d, 0x7e, 0x26, 0xd6, 0x97, 0x87, 0x25, 0xcd, 0xec, 0x65, 0xa8, 0xca, 0x43, 0xf0, 0x19,
	0xa5, 0x42, 0x21, 0x60, 0x61, 0x3c, 0x8e, 0xb4, 0x16, 0x90, 0x1e, 0xb3, 0xc7, 0xd1, 0x49, 0xfb,
	0x84, 0x39, 0xbf, 0x49, 0x74, 0x6b, 0x5e, 0x9a, 0x94, 0x37, 0x4b, 0x93, 0xb6, 0x0f, 0x97, 0xe6,
	0x38, 0xde, 0x71, 0xb9, 0x6e, 0xfe, 0x0e, 0xd4, 0xe4, 0x4a, 0x22, 0xef, 0xc1, 0x7a, 0xa7, 0x69,
	0x36, 0x2d, 0xf3, 0x17, 0x07, 0x5d, 0xeb, 0xd0, 0xf8, 0xa9, 0xd1, 0xff, 0xb9, 0x51, 0xcb, 0x90,
	0x32, 0x14, 0x5b, 0xfd, 0xfe, 0xe7, 0xdd, 0xa6, 0x51, 0x53, 0x48, 0x09, 0x56, 0x74, 0xc3, 0xbc,
	0xb3, 0x57, 0xcb, 0x72, 0xfb, 0xa1, 0x6e, 0x98, 0x9f, 0xee, 0xde, 0xad, 0xe5, 0xf8, 0xc7, 0xfe,
	0xe7, 0xfd, 0x26, 0xf7, 0xe4, 0x09, 0x40, 0x61, 0x60, 0x52, 0xdd, 0xb8, 0x5f, 0x5b, 0x21, 0x15,
	0x50, 0x4d, 0xfd, 0x41, 0x97, 0xbf, 0x31, 0x6b, 0x05, 0x52, 0x83, 0x4a, 0xe7, 0x90, 0x36, 0x4d,
	0xbd, 0x6f, 0xa0, 0xa5, 0x78, 0xf3, 0x2f, 0x0a, 0x54, 0xd2, 0x4f, 0x12, 0x42, 0x60, 0x75, 0x60,
	0x5a, 0x87, 0xc6, 0xe0, 0xa0, 0xdb, 0xd6, 0xf7, 0xf5, 0x6e, 0x47, 0x94, 0x30, 0x30, 0x2d, 0xa3,
	0x6f, 0x74, 0x6b, 0x0a, 0xe7, 0x18, 0x98, 0x56, 0xf3, 0x7e, 0xd7, 0x30, 0xad, 0x43, 0xbd, 0x53,
	0x1b, 0x91, 0x0a, 0xba, 0x0f, 0x0f, 0xf4, 0x4e, 0xed, 0x6b, 0x85, 0x5c, 0x86, 0xb5, 0x81, 0x69,
	0x0d, 0xba, 0xf4, 0xa1, 0xde, 0xee, 0x5a, 0x46, 0xf3, 0x41, 0xb7, 0xf6, 0xa7, 0x2c, 0xa9, 0x41,
	0x79, 0x60, 0x5a, 0x07, 0xfd, 0x8e, 0xb0, 0x7c, 0x99, 0x23, 0xeb, 0xc8, 0x63, 0xf4, 0x3b, 0x12,
	0xf4, 0x9f, 0x1c, 0xb9, 0x02, 0xeb, 0x03, 0xd3, 0x6a, 0xf7, 0x0d, 0xb3, 0xa9, 0x1b, 0x5d, 0x2a,
	0xec, 0xcf, 0xf3, 0xd2, 0xce, 0xbf, 0x06, 0x07, 0xcd, 0x84, 0xf4, 0xaf, 0x2b, 0xbb, 0x7f, 0x53,
	0xa0, 0xfa, 0x10, 0x57, 0x76, 0xc0, 0x82, 0x47, 0xae, 0xc3, 0xc8, 0x10, 0xaa, 0x73, 0x1b, 0x99,
	0x7c, 0xf8, 0x7f, 0x89, 0xf5, 0xe6, 0x47, 0x6f, 0x83, 0x89, 0x06, 0x6b, 0x99, 0x5b, 0x0a, 0xf9,
	0x15, 0x94, 0x53, 0xbd, 0x27, 0x8b, 0x0f, 0xfb, 0xc5, 0xdd, 0xb5, 0x79, 0xe3, 0xcd, 0xa0, 0x73,
	0xf6, 0xd6, 0xde, 0xb3, 0x97, 0xf5, 0xcc, 0xf3, 0x97, 0xf5, 0xcc, 0x37, 0x2f, 0xeb, 0xca, 0xd3,
	0x59, 0x5d, 0xf9, 0x6a, 0x56, 0x57, 0xbe, 0x9e, 0xd5, 0x95, 0x67, 0xb3, 0xba, 0xf2, 0x8f, 0x59,
	0x5d, 0xf9, 0xe7, 0xac, 0x9e, 0xf9, 0x66, 0x56, 0x57, 0xbe, 0x7c, 0x55, 0xcf, 0x3c, 0x7b, 0x55,
	0xcf, 0x3c, 0x7f, 0x55, 0xcf, 0x0c, 0x0b, 0xf8, 0x9f, 0xfb, 0xf6, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x0f, 0x10, 0xcd, 0x0e, 0xd7, 0x0f, 0x00, 0x00,
}

func (x DataType) String() string {
	s, ok := DataType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SemanticType) String() string {
	s, ok := SemanticType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UInt128) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UInt128)
	if !ok {
		that2, ok := that.(UInt128)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Low != that1.Low {
		return false
	}
	if this.High != that1.High {
		return false
	}
	return true
}
func (this *BooleanColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BooleanColumn)
	if !ok {
		that2, ok := that.(BooleanColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Int64Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Int64Column)
	if !ok {
		that2, ok := that.(Int64Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *UInt128Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UInt128Column)
	if !ok {
		that2, ok := that.(UInt128Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *Float64Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Float64Column)
	if !ok {
		that2, ok := that.(Float64Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Time64NSColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Time64NSColumn)
	if !ok {
		that2, ok := that.(Time64NSColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Duration64NSColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Duration64NSColumn)
	if !ok {
		that2, ok := that.(Duration64NSColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *StringColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringColumn)
	if !ok {
		that2, ok := that.(StringColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column)
	if !ok {
		that2, ok := that.(Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ColData == nil {
		if this.ColData != nil {
			return false
		}
	} else if this.ColData == nil {
		return false
	} else if !this.ColData.Equal(that1.ColData) {
		return false
	}
	return true
}
func (this *Column_BooleanData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_BooleanData)
	if !ok {
		that2, ok := that.(Column_BooleanData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BooleanData.Equal(that1.BooleanData) {
		return false
	}
	return true
}
func (this *Column_Int64Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Int64Data)
	if !ok {
		that2, ok := that.(Column_Int64Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Int64Data.Equal(that1.Int64Data) {
		return false
	}
	return true
}
func (this *Column_Uint128Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Uint128Data)
	if !ok {
		that2, ok := that.(Column_Uint128Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Uint128Data.Equal(that1.Uint128Data) {
		return false
	}
	return true
}
func (this *Column_Time64NsData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Time64NsData)
	if !ok {
		that2, ok := that.(Column_Time64NsData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time64NsData.Equal(that1.Time64NsData) {
		return false
	}
	return true
}
func (this *Column_Float64Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Float64Data)
	if !ok {
		that2, ok := that.(Column_Float64Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Float64Data.Equal(that1.Float64Data) {
		return false
	}
	return true
}
func (this *Column_StringData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_StringData)
	if !ok {
		that2, ok := that.(Column_StringData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StringData.Equal(that1.StringData) {
		return false
	}
	return true
}
func (this *Column_Duration64NsData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column_Duration64NsData)
	if !ok {
		that2, ok := that.(Column_Duration64NsData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Duration64NsData.Equal(that1.Duration64NsData) {
		return false
	}
	return true
}
func (this *RowBatchData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RowBatchData)
	if !ok {
		that2, ok := that.(RowBatchData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TableID != that1.TableID {
		return false
	}
	if len(this.Cols) != len(that1.Cols) {
		return false
	}
	for i := range this.Cols {
		if !this.Cols[i].Equal(that1.Cols[i]) {
			return false
		}
	}
	if this.NumRows != that1.NumRows {
		return false
	}
	if this.Eow != that1.Eow {
		return false
	}
	if this.Eos != that1.Eos {
		return false
	}
	return true
}
func (this *Relation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relation)
	if !ok {
		that2, ok := that.(Relation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	return true
}
func (this *Relation_ColumnInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relation_ColumnInfo)
	if !ok {
		that2, ok := that.(Relation_ColumnInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ColumnName != that1.ColumnName {
		return false
	}
	if this.ColumnType != that1.ColumnType {
		return false
	}
	if this.ColumnDesc != that1.ColumnDesc {
		return false
	}
	if this.ColumnSemanticType != that1.ColumnSemanticType {
		return false
	}
	return true
}
func (this *CompilerError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompilerError)
	if !ok {
		that2, ok := that.(CompilerError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Line != that1.Line {
		return false
	}
	if this.Column != that1.Column {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *ErrorDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorDetails)
	if !ok {
		that2, ok := that.(ErrorDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Error == nil {
		if this.Error != nil {
			return false
		}
	} else if this.Error == nil {
		return false
	} else if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *ErrorDetails_CompilerError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorDetails_CompilerError)
	if !ok {
		that2, ok := that.(ErrorDetails_CompilerError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CompilerError.Equal(that1.CompilerError) {
		return false
	}
	return true
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.ErrorDetails) != len(that1.ErrorDetails) {
		return false
	}
	for i := range this.ErrorDetails {
		if !this.ErrorDetails[i].Equal(that1.ErrorDetails[i]) {
			return false
		}
	}
	return true
}
func (this *ScalarValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue)
	if !ok {
		that2, ok := that.(ScalarValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DataType != that1.DataType {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *ScalarValue_BoolValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_BoolValue)
	if !ok {
		that2, ok := that.(ScalarValue_BoolValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolValue != that1.BoolValue {
		return false
	}
	return true
}
func (this *ScalarValue_Int64Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_Int64Value)
	if !ok {
		that2, ok := that.(ScalarValue_Int64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int64Value != that1.Int64Value {
		return false
	}
	return true
}
func (this *ScalarValue_Float64Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_Float64Value)
	if !ok {
		that2, ok := that.(ScalarValue_Float64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Float64Value != that1.Float64Value {
		return false
	}
	return true
}
func (this *ScalarValue_StringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_StringValue)
	if !ok {
		that2, ok := that.(ScalarValue_StringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringValue != that1.StringValue {
		return false
	}
	return true
}
func (this *ScalarValue_Time64NsValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_Time64NsValue)
	if !ok {
		that2, ok := that.(ScalarValue_Time64NsValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time64NsValue != that1.Time64NsValue {
		return false
	}
	return true
}
func (this *ScalarValue_Duration64NsValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_Duration64NsValue)
	if !ok {
		that2, ok := that.(ScalarValue_Duration64NsValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration64NsValue != that1.Duration64NsValue {
		return false
	}
	return true
}
func (this *ScalarValue_Uint128Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_Uint128Value)
	if !ok {
		that2, ok := that.(ScalarValue_Uint128Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Uint128Value.Equal(that1.Uint128Value) {
		return false
	}
	return true
}
func (this *ExecuteScriptRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteScriptRequest)
	if !ok {
		that2, ok := that.(ExecuteScriptRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	if this.ClusterID != that1.ClusterID {
		return false
	}
	if len(this.ExecFuncs) != len(that1.ExecFuncs) {
		return false
	}
	for i := range this.ExecFuncs {
		if !this.ExecFuncs[i].Equal(that1.ExecFuncs[i]) {
			return false
		}
	}
	return true
}
func (this *ExecuteScriptRequest_FuncToExecute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteScriptRequest_FuncToExecute)
	if !ok {
		that2, ok := that.(ExecuteScriptRequest_FuncToExecute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FuncName != that1.FuncName {
		return false
	}
	if len(this.ArgValues) != len(that1.ArgValues) {
		return false
	}
	for i := range this.ArgValues {
		if !this.ArgValues[i].Equal(that1.ArgValues[i]) {
			return false
		}
	}
	if this.OutputTablePrefix != that1.OutputTablePrefix {
		return false
	}
	return true
}
func (this *ExecuteScriptRequest_FuncToExecute_ArgValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteScriptRequest_FuncToExecute_ArgValue)
	if !ok {
		that2, ok := that.(ExecuteScriptRequest_FuncToExecute_ArgValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *QueryTimingInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryTimingInfo)
	if !ok {
		that2, ok := that.(QueryTimingInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExecutionTimeNs != that1.ExecutionTimeNs {
		return false
	}
	if this.CompilationTimeNs != that1.CompilationTimeNs {
		return false
	}
	return true
}
func (this *QueryExecutionStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryExecutionStats)
	if !ok {
		that2, ok := that.(QueryExecutionStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Timing.Equal(that1.Timing) {
		return false
	}
	if this.BytesProcessed != that1.BytesProcessed {
		return false
	}
	if this.RecordsProcessed != that1.RecordsProcessed {
		return false
	}
	return true
}
func (this *QueryMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryMetadata)
	if !ok {
		that2, ok := that.(QueryMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Relation.Equal(that1.Relation) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *QueryData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryData)
	if !ok {
		that2, ok := that.(QueryData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Batch.Equal(that1.Batch) {
		return false
	}
	if !this.ExecutionStats.Equal(that1.ExecutionStats) {
		return false
	}
	return true
}
func (this *ExecuteScriptResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteScriptResponse)
	if !ok {
		that2, ok := that.(ExecuteScriptResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.QueryID != that1.QueryID {
		return false
	}
	if that1.Result == nil {
		if this.Result != nil {
			return false
		}
	} else if this.Result == nil {
		return false
	} else if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ExecuteScriptResponse_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteScriptResponse_Data)
	if !ok {
		that2, ok := that.(ExecuteScriptResponse_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *ExecuteScriptResponse_MetaData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteScriptResponse_MetaData)
	if !ok {
		that2, ok := that.(ExecuteScriptResponse_MetaData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MetaData.Equal(that1.MetaData) {
		return false
	}
	return true
}
func (this *HealthCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckRequest)
	if !ok {
		that2, ok := that.(HealthCheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterID != that1.ClusterID {
		return false
	}
	return true
}
func (this *HealthCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckResponse)
	if !ok {
		that2, ok := that.(HealthCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *UInt128) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pl_api_vizierpb.UInt128{")
	s = append(s, "Low: "+fmt.Sprintf("%#v", this.Low)+",\n")
	s = append(s, "High: "+fmt.Sprintf("%#v", this.High)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BooleanColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.BooleanColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Int64Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.Int64Column{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UInt128Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.UInt128Column{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Float64Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.Float64Column{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Time64NSColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.Time64NSColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Duration64NSColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.Duration64NSColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.StringColumn{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pl_api_vizierpb.Column{")
	if this.ColData != nil {
		s = append(s, "ColData: "+fmt.Sprintf("%#v", this.ColData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column_BooleanData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.Column_BooleanData{` +
		`BooleanData:` + fmt.Sprintf("%#v", this.BooleanData) + `}`}, ", ")
	return s
}
func (this *Column_Int64Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.Column_Int64Data{` +
		`Int64Data:` + fmt.Sprintf("%#v", this.Int64Data) + `}`}, ", ")
	return s
}
func (this *Column_Uint128Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.Column_Uint128Data{` +
		`Uint128Data:` + fmt.Sprintf("%#v", this.Uint128Data) + `}`}, ", ")
	return s
}
func (this *Column_Time64NsData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.Column_Time64NsData{` +
		`Time64NsData:` + fmt.Sprintf("%#v", this.Time64NsData) + `}`}, ", ")
	return s
}
func (this *Column_Float64Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.Column_Float64Data{` +
		`Float64Data:` + fmt.Sprintf("%#v", this.Float64Data) + `}`}, ", ")
	return s
}
func (this *Column_StringData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.Column_StringData{` +
		`StringData:` + fmt.Sprintf("%#v", this.StringData) + `}`}, ", ")
	return s
}
func (this *Column_Duration64NsData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.Column_Duration64NsData{` +
		`Duration64NsData:` + fmt.Sprintf("%#v", this.Duration64NsData) + `}`}, ", ")
	return s
}
func (this *RowBatchData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pl_api_vizierpb.RowBatchData{")
	s = append(s, "TableID: "+fmt.Sprintf("%#v", this.TableID)+",\n")
	if this.Cols != nil {
		s = append(s, "Cols: "+fmt.Sprintf("%#v", this.Cols)+",\n")
	}
	s = append(s, "NumRows: "+fmt.Sprintf("%#v", this.NumRows)+",\n")
	s = append(s, "Eow: "+fmt.Sprintf("%#v", this.Eow)+",\n")
	s = append(s, "Eos: "+fmt.Sprintf("%#v", this.Eos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Relation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.Relation{")
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Relation_ColumnInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pl_api_vizierpb.Relation_ColumnInfo{")
	s = append(s, "ColumnName: "+fmt.Sprintf("%#v", this.ColumnName)+",\n")
	s = append(s, "ColumnType: "+fmt.Sprintf("%#v", this.ColumnType)+",\n")
	s = append(s, "ColumnDesc: "+fmt.Sprintf("%#v", this.ColumnDesc)+",\n")
	s = append(s, "ColumnSemanticType: "+fmt.Sprintf("%#v", this.ColumnSemanticType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompilerError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pl_api_vizierpb.CompilerError{")
	s = append(s, "Line: "+fmt.Sprintf("%#v", this.Line)+",\n")
	s = append(s, "Column: "+fmt.Sprintf("%#v", this.Column)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.ErrorDetails{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorDetails_CompilerError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ErrorDetails_CompilerError{` +
		`CompilerError:` + fmt.Sprintf("%#v", this.CompilerError) + `}`}, ", ")
	return s
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pl_api_vizierpb.Status{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.ErrorDetails != nil {
		s = append(s, "ErrorDetails: "+fmt.Sprintf("%#v", this.ErrorDetails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScalarValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pl_api_vizierpb.ScalarValue{")
	s = append(s, "DataType: "+fmt.Sprintf("%#v", this.DataType)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScalarValue_BoolValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ScalarValue_BoolValue{` +
		`BoolValue:` + fmt.Sprintf("%#v", this.BoolValue) + `}`}, ", ")
	return s
}
func (this *ScalarValue_Int64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ScalarValue_Int64Value{` +
		`Int64Value:` + fmt.Sprintf("%#v", this.Int64Value) + `}`}, ", ")
	return s
}
func (this *ScalarValue_Float64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ScalarValue_Float64Value{` +
		`Float64Value:` + fmt.Sprintf("%#v", this.Float64Value) + `}`}, ", ")
	return s
}
func (this *ScalarValue_StringValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ScalarValue_StringValue{` +
		`StringValue:` + fmt.Sprintf("%#v", this.StringValue) + `}`}, ", ")
	return s
}
func (this *ScalarValue_Time64NsValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ScalarValue_Time64NsValue{` +
		`Time64NsValue:` + fmt.Sprintf("%#v", this.Time64NsValue) + `}`}, ", ")
	return s
}
func (this *ScalarValue_Duration64NsValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ScalarValue_Duration64NsValue{` +
		`Duration64NsValue:` + fmt.Sprintf("%#v", this.Duration64NsValue) + `}`}, ", ")
	return s
}
func (this *ScalarValue_Uint128Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ScalarValue_Uint128Value{` +
		`Uint128Value:` + fmt.Sprintf("%#v", this.Uint128Value) + `}`}, ", ")
	return s
}
func (this *ExecuteScriptRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pl_api_vizierpb.ExecuteScriptRequest{")
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	s = append(s, "ClusterID: "+fmt.Sprintf("%#v", this.ClusterID)+",\n")
	if this.ExecFuncs != nil {
		s = append(s, "ExecFuncs: "+fmt.Sprintf("%#v", this.ExecFuncs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteScriptRequest_FuncToExecute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pl_api_vizierpb.ExecuteScriptRequest_FuncToExecute{")
	s = append(s, "FuncName: "+fmt.Sprintf("%#v", this.FuncName)+",\n")
	if this.ArgValues != nil {
		s = append(s, "ArgValues: "+fmt.Sprintf("%#v", this.ArgValues)+",\n")
	}
	s = append(s, "OutputTablePrefix: "+fmt.Sprintf("%#v", this.OutputTablePrefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteScriptRequest_FuncToExecute_ArgValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pl_api_vizierpb.ExecuteScriptRequest_FuncToExecute_ArgValue{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryTimingInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pl_api_vizierpb.QueryTimingInfo{")
	s = append(s, "ExecutionTimeNs: "+fmt.Sprintf("%#v", this.ExecutionTimeNs)+",\n")
	s = append(s, "CompilationTimeNs: "+fmt.Sprintf("%#v", this.CompilationTimeNs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryExecutionStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pl_api_vizierpb.QueryExecutionStats{")
	if this.Timing != nil {
		s = append(s, "Timing: "+fmt.Sprintf("%#v", this.Timing)+",\n")
	}
	s = append(s, "BytesProcessed: "+fmt.Sprintf("%#v", this.BytesProcessed)+",\n")
	s = append(s, "RecordsProcessed: "+fmt.Sprintf("%#v", this.RecordsProcessed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pl_api_vizierpb.QueryMetadata{")
	if this.Relation != nil {
		s = append(s, "Relation: "+fmt.Sprintf("%#v", this.Relation)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pl_api_vizierpb.QueryData{")
	if this.Batch != nil {
		s = append(s, "Batch: "+fmt.Sprintf("%#v", this.Batch)+",\n")
	}
	if this.ExecutionStats != nil {
		s = append(s, "ExecutionStats: "+fmt.Sprintf("%#v", this.ExecutionStats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteScriptResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pl_api_vizierpb.ExecuteScriptResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteScriptResponse_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ExecuteScriptResponse_Data{` +
		`Data:` + fmt.Sprintf("%#v", this.Data) + `}`}, ", ")
	return s
}
func (this *ExecuteScriptResponse_MetaData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_api_vizierpb.ExecuteScriptResponse_MetaData{` +
		`MetaData:` + fmt.Sprintf("%#v", this.MetaData) + `}`}, ", ")
	return s
}
func (this *HealthCheckRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.HealthCheckRequest{")
	s = append(s, "ClusterID: "+fmt.Sprintf("%#v", this.ClusterID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthCheckResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_api_vizierpb.HealthCheckResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVizier(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VizierServiceClient is the client API for VizierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VizierServiceClient interface {
	ExecuteScript(ctx context.Context, in *ExecuteScriptRequest, opts ...grpc.CallOption) (VizierService_ExecuteScriptClient, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (VizierService_HealthCheckClient, error)
}

type vizierServiceClient struct {
	cc *grpc.ClientConn
}

func NewVizierServiceClient(cc *grpc.ClientConn) VizierServiceClient {
	return &vizierServiceClient{cc}
}

func (c *vizierServiceClient) ExecuteScript(ctx context.Context, in *ExecuteScriptRequest, opts ...grpc.CallOption) (VizierService_ExecuteScriptClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VizierService_serviceDesc.Streams[0], "/pl.api.vizierpb.VizierService/ExecuteScript", opts...)
	if err != nil {
		return nil, err
	}
	x := &vizierServiceExecuteScriptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VizierService_ExecuteScriptClient interface {
	Recv() (*ExecuteScriptResponse, error)
	grpc.ClientStream
}

type vizierServiceExecuteScriptClient struct {
	grpc.ClientStream
}

func (x *vizierServiceExecuteScriptClient) Recv() (*ExecuteScriptResponse, error) {
	m := new(ExecuteScriptResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vizierServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (VizierService_HealthCheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VizierService_serviceDesc.Streams[1], "/pl.api.vizierpb.VizierService/HealthCheck", opts...)
	if err != nil {
		return nil, err
	}
	x := &vizierServiceHealthCheckClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VizierService_HealthCheckClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type vizierServiceHealthCheckClient struct {
	grpc.ClientStream
}

func (x *vizierServiceHealthCheckClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VizierServiceServer is the server API for VizierService service.
type VizierServiceServer interface {
	ExecuteScript(*ExecuteScriptRequest, VizierService_ExecuteScriptServer) error
	HealthCheck(*HealthCheckRequest, VizierService_HealthCheckServer) error
}

// UnimplementedVizierServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVizierServiceServer struct {
}

func (*UnimplementedVizierServiceServer) ExecuteScript(req *ExecuteScriptRequest, srv VizierService_ExecuteScriptServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteScript not implemented")
}
func (*UnimplementedVizierServiceServer) HealthCheck(req *HealthCheckRequest, srv VizierService_HealthCheckServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

func RegisterVizierServiceServer(s *grpc.Server, srv VizierServiceServer) {
	s.RegisterService(&_VizierService_serviceDesc, srv)
}

func _VizierService_ExecuteScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteScriptRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VizierServiceServer).ExecuteScript(m, &vizierServiceExecuteScriptServer{stream})
}

type VizierService_ExecuteScriptServer interface {
	Send(*ExecuteScriptResponse) error
	grpc.ServerStream
}

type vizierServiceExecuteScriptServer struct {
	grpc.ServerStream
}

func (x *vizierServiceExecuteScriptServer) Send(m *ExecuteScriptResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VizierService_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VizierServiceServer).HealthCheck(m, &vizierServiceHealthCheckServer{stream})
}

type VizierService_HealthCheckServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type vizierServiceHealthCheckServer struct {
	grpc.ServerStream
}

func (x *vizierServiceHealthCheckServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _VizierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.api.vizierpb.VizierService",
	HandlerType: (*VizierServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteScript",
			Handler:       _VizierService_ExecuteScript_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HealthCheck",
			Handler:       _VizierService_HealthCheck_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/vizier/vizierpb/vizier.proto",
}

func (m *UInt128) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UInt128) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UInt128) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.High != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.High))
		i--
		dAtA[i] = 0x10
	}
	if m.Low != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.Low))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BooleanColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BooleanColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BooleanColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.Data[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Int64Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Int64Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA2 := make([]byte, len(m.Data)*10)
		var j1 int
		for _, num1 := range m.Data {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintVizier(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UInt128Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UInt128Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UInt128Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVizier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Float64Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Float64Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Float64Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			f3 := math.Float64bits(float64(m.Data[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f3))
		}
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Data)*8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Time64NSColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Time64NSColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Time64NSColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA5 := make([]byte, len(m.Data)*10)
		var j4 int
		for _, num1 := range m.Data {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintVizier(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Duration64NSColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Duration64NSColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Duration64NSColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA7 := make([]byte, len(m.Data)*10)
		var j6 int
		for _, num1 := range m.Data {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintVizier(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintVizier(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColData != nil {
		{
			size := m.ColData.Size()
			i -= size
			if _, err := m.ColData.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Column_BooleanData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_BooleanData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BooleanData != nil {
		{
			size, err := m.BooleanData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Column_Int64Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_Int64Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Int64Data != nil {
		{
			size, err := m.Int64Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Column_Uint128Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_Uint128Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Uint128Data != nil {
		{
			size, err := m.Uint128Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Column_Time64NsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_Time64NsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Time64NsData != nil {
		{
			size, err := m.Time64NsData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Column_Float64Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_Float64Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Float64Data != nil {
		{
			size, err := m.Float64Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Column_StringData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_StringData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StringData != nil {
		{
			size, err := m.StringData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Column_Duration64NsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column_Duration64NsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Duration64NsData != nil {
		{
			size, err := m.Duration64NsData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RowBatchData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowBatchData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowBatchData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableID) > 0 {
		i -= len(m.TableID)
		copy(dAtA[i:], m.TableID)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.TableID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Eos {
		i--
		if m.Eos {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Eow {
		i--
		if m.Eow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NumRows != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.NumRows))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cols) > 0 {
		for iNdEx := len(m.Cols) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cols[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVizier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVizier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Relation_ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation_ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relation_ColumnInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColumnSemanticType != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.ColumnSemanticType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ColumnDesc) > 0 {
		i -= len(m.ColumnDesc)
		copy(dAtA[i:], m.ColumnDesc)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.ColumnDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ColumnType != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.ColumnType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ColumnName) > 0 {
		i -= len(m.ColumnName)
		copy(dAtA[i:], m.ColumnName)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.ColumnName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompilerError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilerError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompilerError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Column != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.Column))
		i--
		dAtA[i] = 0x10
	}
	if m.Line != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.Line))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ErrorDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size := m.Error.Size()
			i -= size
			if _, err := m.Error.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ErrorDetails_CompilerError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorDetails_CompilerError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CompilerError != nil {
		{
			size, err := m.CompilerError.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorDetails) > 0 {
		for iNdEx := len(m.ErrorDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErrorDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVizier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScalarValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScalarValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalarValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DataType != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScalarValue_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalarValue_BoolValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ScalarValue_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalarValue_Int64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintVizier(dAtA, i, uint64(m.Int64Value))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ScalarValue_Float64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalarValue_Float64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float64Value))))
	i--
	dAtA[i] = 0x21
	return len(dAtA) - i, nil
}
func (m *ScalarValue_StringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalarValue_StringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StringValue)
	copy(dAtA[i:], m.StringValue)
	i = encodeVarintVizier(dAtA, i, uint64(len(m.StringValue)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *ScalarValue_Time64NsValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalarValue_Time64NsValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintVizier(dAtA, i, uint64(m.Time64NsValue))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *ScalarValue_Uint128Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalarValue_Uint128Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Uint128Value != nil {
		{
			size, err := m.Uint128Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ScalarValue_Duration64NsValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScalarValue_Duration64NsValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintVizier(dAtA, i, uint64(m.Duration64NsValue))
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *ExecuteScriptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteScriptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteScriptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecFuncs) > 0 {
		for iNdEx := len(m.ExecFuncs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecFuncs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVizier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ClusterID) > 0 {
		i -= len(m.ClusterID)
		copy(dAtA[i:], m.ClusterID)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.ClusterID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QueryStr) > 0 {
		i -= len(m.QueryStr)
		copy(dAtA[i:], m.QueryStr)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.QueryStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteScriptRequest_FuncToExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteScriptRequest_FuncToExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteScriptRequest_FuncToExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputTablePrefix) > 0 {
		i -= len(m.OutputTablePrefix)
		copy(dAtA[i:], m.OutputTablePrefix)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.OutputTablePrefix)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArgValues) > 0 {
		for iNdEx := len(m.ArgValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ArgValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVizier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FuncName) > 0 {
		i -= len(m.FuncName)
		copy(dAtA[i:], m.FuncName)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.FuncName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTimingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTimingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTimingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompilationTimeNs != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.CompilationTimeNs))
		i--
		dAtA[i] = 0x10
	}
	if m.ExecutionTimeNs != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.ExecutionTimeNs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecutionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutionStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutionStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordsProcessed != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.RecordsProcessed))
		i--
		dAtA[i] = 0x18
	}
	if m.BytesProcessed != 0 {
		i = encodeVarintVizier(dAtA, i, uint64(m.BytesProcessed))
		i--
		dAtA[i] = 0x10
	}
	if m.Timing != nil {
		{
			size, err := m.Timing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Relation != nil {
		{
			size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionStats != nil {
		{
			size, err := m.ExecutionStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.QueryID) > 0 {
		i -= len(m.QueryID)
		copy(dAtA[i:], m.QueryID)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.QueryID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteScriptResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteScriptResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ExecuteScriptResponse_MetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteScriptResponse_MetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MetaData != nil {
		{
			size, err := m.MetaData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthCheckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterID) > 0 {
		i -= len(m.ClusterID)
		copy(dAtA[i:], m.ClusterID)
		i = encodeVarintVizier(dAtA, i, uint64(len(m.ClusterID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVizier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVizier(dAtA []byte, offset int, v uint64) int {
	offset -= sovVizier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UInt128) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Low != 0 {
		n += 1 + sovVizier(uint64(m.Low))
	}
	if m.High != 0 {
		n += 1 + sovVizier(uint64(m.High))
	}
	return n
}

func (m *BooleanColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		n += 1 + sovVizier(uint64(len(m.Data))) + len(m.Data)*1
	}
	return n
}

func (m *Int64Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		l = 0
		for _, e := range m.Data {
			l += sovVizier(uint64(e))
		}
		n += 1 + sovVizier(uint64(l)) + l
	}
	return n
}

func (m *UInt128Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovVizier(uint64(l))
		}
	}
	return n
}

func (m *Float64Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		n += 1 + sovVizier(uint64(len(m.Data)*8)) + len(m.Data)*8
	}
	return n
}

func (m *Time64NSColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		l = 0
		for _, e := range m.Data {
			l += sovVizier(uint64(e))
		}
		n += 1 + sovVizier(uint64(l)) + l
	}
	return n
}

func (m *Duration64NSColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		l = 0
		for _, e := range m.Data {
			l += sovVizier(uint64(e))
		}
		n += 1 + sovVizier(uint64(l)) + l
	}
	return n
}

func (m *StringColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovVizier(uint64(l))
		}
	}
	return n
}

func (m *Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ColData != nil {
		n += m.ColData.Size()
	}
	return n
}

func (m *Column_BooleanData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BooleanData != nil {
		l = m.BooleanData.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *Column_Int64Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int64Data != nil {
		l = m.Int64Data.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *Column_Uint128Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uint128Data != nil {
		l = m.Uint128Data.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *Column_Time64NsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time64NsData != nil {
		l = m.Time64NsData.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *Column_Float64Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Float64Data != nil {
		l = m.Float64Data.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *Column_StringData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StringData != nil {
		l = m.StringData.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *Column_Duration64NsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration64NsData != nil {
		l = m.Duration64NsData.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *RowBatchData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cols) > 0 {
		for _, e := range m.Cols {
			l = e.Size()
			n += 1 + l + sovVizier(uint64(l))
		}
	}
	if m.NumRows != 0 {
		n += 1 + sovVizier(uint64(m.NumRows))
	}
	if m.Eow {
		n += 2
	}
	if m.Eos {
		n += 2
	}
	l = len(m.TableID)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *Relation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovVizier(uint64(l))
		}
	}
	return n
}

func (m *Relation_ColumnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ColumnName)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	if m.ColumnType != 0 {
		n += 1 + sovVizier(uint64(m.ColumnType))
	}
	l = len(m.ColumnDesc)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	if m.ColumnSemanticType != 0 {
		n += 1 + sovVizier(uint64(m.ColumnSemanticType))
	}
	return n
}

func (m *CompilerError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Line != 0 {
		n += 1 + sovVizier(uint64(m.Line))
	}
	if m.Column != 0 {
		n += 1 + sovVizier(uint64(m.Column))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *ErrorDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += m.Error.Size()
	}
	return n
}

func (m *ErrorDetails_CompilerError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompilerError != nil {
		l = m.CompilerError.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVizier(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	if len(m.ErrorDetails) > 0 {
		for _, e := range m.ErrorDetails {
			l = e.Size()
			n += 1 + l + sovVizier(uint64(l))
		}
	}
	return n
}

func (m *ScalarValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovVizier(uint64(m.DataType))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *ScalarValue_BoolValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ScalarValue_Int64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovVizier(uint64(m.Int64Value))
	return n
}
func (m *ScalarValue_Float64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *ScalarValue_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovVizier(uint64(l))
	return n
}
func (m *ScalarValue_Time64NsValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovVizier(uint64(m.Time64NsValue))
	return n
}
func (m *ScalarValue_Uint128Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uint128Value != nil {
		l = m.Uint128Value.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *ScalarValue_Duration64NsValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovVizier(uint64(m.Duration64NsValue))
	return n
}
func (m *ExecuteScriptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	l = len(m.ClusterID)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	if len(m.ExecFuncs) > 0 {
		for _, e := range m.ExecFuncs {
			l = e.Size()
			n += 1 + l + sovVizier(uint64(l))
		}
	}
	return n
}

func (m *ExecuteScriptRequest_FuncToExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FuncName)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	if len(m.ArgValues) > 0 {
		for _, e := range m.ArgValues {
			l = e.Size()
			n += 1 + l + sovVizier(uint64(l))
		}
	}
	l = len(m.OutputTablePrefix)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *QueryTimingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionTimeNs != 0 {
		n += 1 + sovVizier(uint64(m.ExecutionTimeNs))
	}
	if m.CompilationTimeNs != 0 {
		n += 1 + sovVizier(uint64(m.CompilationTimeNs))
	}
	return n
}

func (m *QueryExecutionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timing != nil {
		l = m.Timing.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	if m.BytesProcessed != 0 {
		n += 1 + sovVizier(uint64(m.BytesProcessed))
	}
	if m.RecordsProcessed != 0 {
		n += 1 + sovVizier(uint64(m.RecordsProcessed))
	}
	return n
}

func (m *QueryMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *QueryData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	if m.ExecutionStats != nil {
		l = m.ExecutionStats.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *ExecuteScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	l = len(m.QueryID)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *ExecuteScriptResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *ExecuteScriptResponse_MetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetaData != nil {
		l = m.MetaData.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}
func (m *HealthCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterID)
	if l > 0 {
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovVizier(uint64(l))
	}
	return n
}

func sovVizier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVizier(x uint64) (n int) {
	return sovVizier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UInt128) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UInt128{`,
		`Low:` + fmt.Sprintf("%v", this.Low) + `,`,
		`High:` + fmt.Sprintf("%v", this.High) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BooleanColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BooleanColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Int64Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Int64Column{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UInt128Column) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*UInt128{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "UInt128", "UInt128", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&UInt128Column{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *Float64Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Float64Column{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Time64NSColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Time64NSColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Duration64NSColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Duration64NSColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringColumn{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column{`,
		`ColData:` + fmt.Sprintf("%v", this.ColData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_BooleanData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_BooleanData{`,
		`BooleanData:` + strings.Replace(fmt.Sprintf("%v", this.BooleanData), "BooleanColumn", "BooleanColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Int64Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Int64Data{`,
		`Int64Data:` + strings.Replace(fmt.Sprintf("%v", this.Int64Data), "Int64Column", "Int64Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Uint128Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Uint128Data{`,
		`Uint128Data:` + strings.Replace(fmt.Sprintf("%v", this.Uint128Data), "UInt128Column", "UInt128Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Time64NsData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Time64NsData{`,
		`Time64NsData:` + strings.Replace(fmt.Sprintf("%v", this.Time64NsData), "Time64NSColumn", "Time64NSColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Float64Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Float64Data{`,
		`Float64Data:` + strings.Replace(fmt.Sprintf("%v", this.Float64Data), "Float64Column", "Float64Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_StringData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_StringData{`,
		`StringData:` + strings.Replace(fmt.Sprintf("%v", this.StringData), "StringColumn", "StringColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column_Duration64NsData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column_Duration64NsData{`,
		`Duration64NsData:` + strings.Replace(fmt.Sprintf("%v", this.Duration64NsData), "Duration64NSColumn", "Duration64NSColumn", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RowBatchData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCols := "[]*Column{"
	for _, f := range this.Cols {
		repeatedStringForCols += strings.Replace(f.String(), "Column", "Column", 1) + ","
	}
	repeatedStringForCols += "}"
	s := strings.Join([]string{`&RowBatchData{`,
		`Cols:` + repeatedStringForCols + `,`,
		`NumRows:` + fmt.Sprintf("%v", this.NumRows) + `,`,
		`Eow:` + fmt.Sprintf("%v", this.Eow) + `,`,
		`Eos:` + fmt.Sprintf("%v", this.Eos) + `,`,
		`TableID:` + fmt.Sprintf("%v", this.TableID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Relation) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForColumns := "[]*Relation_ColumnInfo{"
	for _, f := range this.Columns {
		repeatedStringForColumns += strings.Replace(fmt.Sprintf("%v", f), "Relation_ColumnInfo", "Relation_ColumnInfo", 1) + ","
	}
	repeatedStringForColumns += "}"
	s := strings.Join([]string{`&Relation{`,
		`Columns:` + repeatedStringForColumns + `,`,
		`}`,
	}, "")
	return s
}
func (this *Relation_ColumnInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Relation_ColumnInfo{`,
		`ColumnName:` + fmt.Sprintf("%v", this.ColumnName) + `,`,
		`ColumnType:` + fmt.Sprintf("%v", this.ColumnType) + `,`,
		`ColumnDesc:` + fmt.Sprintf("%v", this.ColumnDesc) + `,`,
		`ColumnSemanticType:` + fmt.Sprintf("%v", this.ColumnSemanticType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompilerError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompilerError{`,
		`Line:` + fmt.Sprintf("%v", this.Line) + `,`,
		`Column:` + fmt.Sprintf("%v", this.Column) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrorDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorDetails{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrorDetails_CompilerError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorDetails_CompilerError{`,
		`CompilerError:` + strings.Replace(fmt.Sprintf("%v", this.CompilerError), "CompilerError", "CompilerError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForErrorDetails := "[]*ErrorDetails{"
	for _, f := range this.ErrorDetails {
		repeatedStringForErrorDetails += strings.Replace(f.String(), "ErrorDetails", "ErrorDetails", 1) + ","
	}
	repeatedStringForErrorDetails += "}"
	s := strings.Join([]string{`&Status{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`ErrorDetails:` + repeatedStringForErrorDetails + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue{`,
		`DataType:` + fmt.Sprintf("%v", this.DataType) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_BoolValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_BoolValue{`,
		`BoolValue:` + fmt.Sprintf("%v", this.BoolValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_Int64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_Int64Value{`,
		`Int64Value:` + fmt.Sprintf("%v", this.Int64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_Float64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_Float64Value{`,
		`Float64Value:` + fmt.Sprintf("%v", this.Float64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_StringValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_StringValue{`,
		`StringValue:` + fmt.Sprintf("%v", this.StringValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_Time64NsValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_Time64NsValue{`,
		`Time64NsValue:` + fmt.Sprintf("%v", this.Time64NsValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_Uint128Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_Uint128Value{`,
		`Uint128Value:` + strings.Replace(fmt.Sprintf("%v", this.Uint128Value), "UInt128", "UInt128", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_Duration64NsValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_Duration64NsValue{`,
		`Duration64NsValue:` + fmt.Sprintf("%v", this.Duration64NsValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteScriptRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecFuncs := "[]*ExecuteScriptRequest_FuncToExecute{"
	for _, f := range this.ExecFuncs {
		repeatedStringForExecFuncs += strings.Replace(fmt.Sprintf("%v", f), "ExecuteScriptRequest_FuncToExecute", "ExecuteScriptRequest_FuncToExecute", 1) + ","
	}
	repeatedStringForExecFuncs += "}"
	s := strings.Join([]string{`&ExecuteScriptRequest{`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`ExecFuncs:` + repeatedStringForExecFuncs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteScriptRequest_FuncToExecute) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgValues := "[]*ExecuteScriptRequest_FuncToExecute_ArgValue{"
	for _, f := range this.ArgValues {
		repeatedStringForArgValues += strings.Replace(fmt.Sprintf("%v", f), "ExecuteScriptRequest_FuncToExecute_ArgValue", "ExecuteScriptRequest_FuncToExecute_ArgValue", 1) + ","
	}
	repeatedStringForArgValues += "}"
	s := strings.Join([]string{`&ExecuteScriptRequest_FuncToExecute{`,
		`FuncName:` + fmt.Sprintf("%v", this.FuncName) + `,`,
		`ArgValues:` + repeatedStringForArgValues + `,`,
		`OutputTablePrefix:` + fmt.Sprintf("%v", this.OutputTablePrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteScriptRequest_FuncToExecute_ArgValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteScriptRequest_FuncToExecute_ArgValue{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryTimingInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryTimingInfo{`,
		`ExecutionTimeNs:` + fmt.Sprintf("%v", this.ExecutionTimeNs) + `,`,
		`CompilationTimeNs:` + fmt.Sprintf("%v", this.CompilationTimeNs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryExecutionStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryExecutionStats{`,
		`Timing:` + strings.Replace(this.Timing.String(), "QueryTimingInfo", "QueryTimingInfo", 1) + `,`,
		`BytesProcessed:` + fmt.Sprintf("%v", this.BytesProcessed) + `,`,
		`RecordsProcessed:` + fmt.Sprintf("%v", this.RecordsProcessed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryMetadata{`,
		`Relation:` + strings.Replace(this.Relation.String(), "Relation", "Relation", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryData{`,
		`Batch:` + strings.Replace(this.Batch.String(), "RowBatchData", "RowBatchData", 1) + `,`,
		`ExecutionStats:` + strings.Replace(this.ExecutionStats.String(), "QueryExecutionStats", "QueryExecutionStats", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteScriptResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteScriptResponse{`,
		`Status:` + strings.Replace(this.Status.String(), "Status", "Status", 1) + `,`,
		`QueryID:` + fmt.Sprintf("%v", this.QueryID) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteScriptResponse_Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteScriptResponse_Data{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "QueryData", "QueryData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteScriptResponse_MetaData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteScriptResponse_MetaData{`,
		`MetaData:` + strings.Replace(fmt.Sprintf("%v", this.MetaData), "QueryMetadata", "QueryMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HealthCheckRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckRequest{`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HealthCheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckResponse{`,
		`Status:` + strings.Replace(this.Status.String(), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVizier(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UInt128) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UInt128: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UInt128: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BooleanColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BooleanColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BooleanColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVizier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVizier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVizier
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVizier
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVizier
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVizier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVizier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVizier
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVizier
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVizier
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UInt128Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UInt128Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UInt128Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &UInt128{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Float64Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Float64Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Float64Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Data = append(m.Data, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVizier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVizier
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVizier
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Data = append(m.Data, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Time64NSColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time64NSColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time64NSColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVizier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVizier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVizier
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVizier
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVizier
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Duration64NSColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Duration64NSColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Duration64NSColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVizier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVizier
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVizier
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVizier
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVizier
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BooleanData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BooleanColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_BooleanData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int64Column{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Int64Data{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint128Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UInt128Column{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Uint128Data{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time64NsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Time64NSColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Time64NsData{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Float64Column{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Float64Data{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_StringData{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration64NsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Duration64NSColumn{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ColData = &Column_Duration64NsData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowBatchData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowBatchData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowBatchData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cols = append(m.Cols, &Column{})
			if err := m.Cols[len(m.Cols)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRows", wireType)
			}
			m.NumRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRows |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Eow = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eos", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Eos = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Relation_ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation_ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnType", wireType)
			}
			m.ColumnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnType |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnSemanticType", wireType)
			}
			m.ColumnSemanticType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnSemanticType |= SemanticType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompilerError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilerError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilerError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			m.Column = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Column |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompilerError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CompilerError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &ErrorDetails_CompilerError{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDetails = append(m.ErrorDetails, &ErrorDetails{})
			if err := m.ErrorDetails[len(m.ErrorDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScalarValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScalarValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScalarValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &ScalarValue_BoolValue{b}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &ScalarValue_Int64Value{v}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &ScalarValue_Float64Value{float64(math.Float64frombits(v))}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &ScalarValue_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time64NsValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &ScalarValue_Time64NsValue{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint128Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UInt128{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ScalarValue_Uint128Value{v}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration64NsValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &ScalarValue_Duration64NsValue{v}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteScriptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteScriptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteScriptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFuncs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecFuncs = append(m.ExecFuncs, &ExecuteScriptRequest_FuncToExecute{})
			if err := m.ExecFuncs[len(m.ExecFuncs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteScriptRequest_FuncToExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuncToExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuncToExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuncName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArgValues = append(m.ArgValues, &ExecuteScriptRequest_FuncToExecute_ArgValue{})
			if err := m.ArgValues[len(m.ArgValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTablePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputTablePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteScriptRequest_FuncToExecute_ArgValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTimingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTimingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTimingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTimeNs", wireType)
			}
			m.ExecutionTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionTimeNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompilationTimeNs", wireType)
			}
			m.CompilationTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompilationTimeNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timing == nil {
				m.Timing = &QueryTimingInfo{}
			}
			if err := m.Timing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesProcessed", wireType)
			}
			m.BytesProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesProcessed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordsProcessed", wireType)
			}
			m.RecordsProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordsProcessed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &RowBatchData{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionStats == nil {
				m.ExecutionStats = &QueryExecutionStats{}
			}
			if err := m.ExecutionStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &ExecuteScriptResponse_Data{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &ExecuteScriptResponse_MetaData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVizier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVizier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVizier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVizier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVizier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVizier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVizier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVizier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVizier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVizier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVizier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVizier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVizier = fmt.Errorf("proto: unexpected end of group")
)
