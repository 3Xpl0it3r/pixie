diff --git a/node_modules/vega-scenegraph/src/CanvasHandler.js b/node_modules/vega-scenegraph/src/CanvasHandler.js
index f1b132b..215f2b8 100644
--- a/node_modules/vega-scenegraph/src/CanvasHandler.js
+++ b/node_modules/vega-scenegraph/src/CanvasHandler.js
@@ -12,10 +12,11 @@ import {inherits} from 'vega-util';
 
 export default function CanvasHandler(loader, tooltip) {
   Handler.call(this, loader, tooltip);
-  this._down = null;
-  this._touch = null;
+  this._down = [];
+  this._touch = [];
   this._first = true;
   this._events = {};
+  this._actives = [];
 }
 
 const eventBundle = type => (
@@ -44,30 +45,39 @@ function addEventListener(handler, type) {
 
 function move(moveEvent, overEvent, outEvent) {
   return function(evt) {
-    const a = this._active,
-          p = this.pickEvent(evt);
-
-    if (p === a) {
-      // active item and picked item are the same
-      this.fire(moveEvent, evt); // fire move
-    } else {
-      // active item and picked item are different
-      if (!a || !a.exit) {
-        // fire out for prior active item
-        // suppress if active item was removed from scene
-        this.fire(outEvent, evt);
+    const a = this._actives;
+    const p = this.pickEvent(evt);
+    const intersect = a.filter(item => p.some(i => i === item));
+    const noLongerActive = a.filter(item => !p.some(i => i === item));
+    const newItems = p.filter(item => !a.some(i => i === item));
+
+    intersect.forEach((item) => {
+      // these items were picked and active.
+      this.fire(moveEvent, evt, item); // fire move.
+    });
+
+    noLongerActive.forEach((item) => {
+      // these items were active but not in picked.
+      if (!item || !item.exit) {
+        // fire out for item
+        // suppress if item was removed from scene
+        this.fire(outEvent, evt, item);
       }
-      this._active = p;          // set new active item
-      this.fire(overEvent, evt); // fire over for new active item
-      this.fire(moveEvent, evt); // fire move for new active item
-    }
+    });
+
+    newItems.forEach((item) => {
+      this.fire(overEvent, evt, item); // fire over for new item
+      this.fire(moveEvent, evt, item); // fire move for new item
+    });
+
+    this._actives = [...intersect, ...newItems];
   };
 }
 
 function inactive(type) {
   return function(evt) {
-    this.fire(type, evt);
-    this._active = null;
+    this._actives.forEach((item) => this.fire(type, evt, item));
+    this._actives = [];
   };
 }
 
@@ -97,7 +107,7 @@ inherits(CanvasHandler, Handler, {
 
   // to keep old versions of firefox happy
   DOMMouseScroll(evt) {
-    this.fire(MouseWheelEvent, evt);
+    this._actives.forEach((item) => this.fire(MouseWheelEvent, evt, item));
   },
 
   mousemove: move(MouseMoveEvent, MouseOverEvent, MouseOutEvent),
@@ -107,56 +117,57 @@ inherits(CanvasHandler, Handler, {
   dragleave: inactive(DragLeaveEvent),
 
   mousedown(evt) {
-    this._down = this._active;
-    this.fire(MouseDownEvent, evt);
+    this._down = this._actives;
+    this._actives.forEach((item) => this.fire(MouseDownEvent, evt, item));
   },
 
   click(evt) {
-    if (this._down === this._active) {
-      this.fire(ClickEvent, evt);
-      this._down = null;
-    }
+    this._actives.forEach((item) => {
+      if (this._down.some(i => i === item)) {
+        this.fire(ClickEvent, evt, item);
+      }
+    });
+    this._down = [];
   },
 
   touchstart(evt) {
     this._touch = this.pickEvent(evt.changedTouches[0]);
 
     if (this._first) {
-      this._active = this._touch;
+      this._actives = this._touch;
       this._first = false;
     }
 
-    this.fire(TouchStartEvent, evt, true);
+    this._touch.forEach(item => this.fire(TouchStartEvent, evt, item));
   },
 
   touchmove(evt) {
-    this.fire(TouchMoveEvent, evt, true);
+    this._touch.forEach(item => this.fire(TouchMoveEvent, evt, item));
   },
 
   touchend(evt) {
-    this.fire(TouchEndEvent, evt, true);
-    this._touch = null;
+    this._touch.forEach(item => this.fire(TouchEndEvent, evt, item));
+    this._touch = [];
   },
 
   // fire an event
-  fire(type, evt, touch) {
-    const a = touch ? this._touch : this._active,
-          h = this._handlers[type];
+  fire(type, evt, item) {
+    const h = this._handlers[type];
 
     // set event type relative to scenegraph items
     evt.vegaType = type;
 
     // handle hyperlinks and tooltips first
-    if (type === HrefEvent && a && a.href) {
-      this.handleHref(evt, a, a.href);
+    if (type === HrefEvent && item && item.href) {
+      this.handleHref(evt, item, item.href);
     } else if (type === TooltipShowEvent || type === TooltipHideEvent) {
-      this.handleTooltip(evt, a, type !== TooltipHideEvent);
+      this.handleTooltip(evt, item, type !== TooltipHideEvent);
     }
 
     // invoke all registered handlers
     if (h) {
       for (let i=0, len=h.length; i<len; ++i) {
-        h[i].handler.call(this._obj, evt, a);
+        h[i].handler.call(this._obj, evt, item);
       }
     }
   },
@@ -194,7 +205,8 @@ inherits(CanvasHandler, Handler, {
   pickEvent(evt) {
     const p = point(evt, this._canvas),
           o = this._origin;
-    return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
+    const picked = this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
+    return (picked && typeof picked.length !== 'undefined') ? picked : [picked];
   },
 
   // find the scenegraph item at the current mouse position
diff --git a/node_modules/vega-scenegraph/src/marks/group.js b/node_modules/vega-scenegraph/src/marks/group.js
index b59d055..2ef0528 100644
--- a/node_modules/vega-scenegraph/src/marks/group.js
+++ b/node_modules/vega-scenegraph/src/marks/group.js
@@ -168,7 +168,8 @@ function pick(context, scene, x, y, gx, gy) {
     // hit test against contained marks
     hit = pickVisit(group, mark => pickMark(mark, dx, dy)
       ? this.pick(mark, x, y, dx, dy)
-      : null
+      : null,
+      mark => mark.propEventsToOverlapped
     );
 
     // hit test against group background
diff --git a/node_modules/vega-scenegraph/src/util/visit.js b/node_modules/vega-scenegraph/src/util/visit.js
index 4cb8978..1ddf7b7 100644
--- a/node_modules/vega-scenegraph/src/util/visit.js
+++ b/node_modules/vega-scenegraph/src/util/visit.js
@@ -36,24 +36,38 @@ export function visit(scene, visitor) {
   }
 }
 
-export function pickVisit(scene, visitor) {
-  var items = scene.items, hit, i;
+export function pickVisit(scene, visitor, tee) {
+  var items = scene.items, hit, i, allhits = [];
   if (!items || !items.length) return null;
 
   const zitems = zorder(scene);
   if (zitems && zitems.length) items = zitems;
 
   for (i=items.length; --i >= 0;) {
-    if (hit = visitor(items[i])) return hit;
+    if (hit = visitor(items[i])) {
+      if (!tee || !tee(items[i])) {
+        return (allhits.length) ? [...allhits, ...((hit.length) ? hit : [hit])] : hit;
+      }
+      allhits.push(...((hit.length) ? hit : [hit]));
+    }
   }
 
   if (items === zitems) {
     for (items=scene.items, i=items.length; --i >= 0;) {
       if (!items[i].zindex) {
-        if (hit = visitor(items[i])) return hit;
+        if (hit = visitor(items[i])) {
+          if (!tee || !tee(items[i])) {
+            return (allhits.length) ? [...allhits, ...((hit.length) ? hit : [hit])] : hit;
+          }
+          allhits.push(...((hit.length) ? hit : [hit]));
+        }
       }
     }
   }
 
+  if (allhits.length) {
+    return allhits;
+  }
+
   return null;
 }
