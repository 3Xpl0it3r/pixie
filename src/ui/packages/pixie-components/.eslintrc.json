{
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "eslint:recommended",
    "airbnb-typescript/base",
    "airbnb/rules/react",
    "plugin:react-hooks/recommended"
  ],
  "settings": {
    "import/extensions": [".js", ".jsx", ".ts", ".tsx", ".mjs"]
  },
  "globals": {
    "BigInt": true,
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "rules": {
    "quotes": ["error", "single", "avoid-escape"],
    "max-len": [
      "error",
      {
        "code": 120
      }
    ]
  },
  "overrides": [
    {
      "files": ["*-test.ts", "*-test.tsx", "./*.js", "src/testing/*"],
      "env": {
        "node": true,
        "jest/globals": true
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": [
        "plugin:react/recommended",
        "plugin:@typescript-eslint/recommended"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "ecmaFeatures": {
          "jsx": true
        },
        "ecmaVersion": 2020,
        "sourceType": "module",
        "project": "./tsconfig.json"
      },
      "plugins": ["jest", "react", "@typescript-eslint"],
      "rules": {
        "import/extensions": 0,
        "no-mixed-operators": [
          "error",
          {
            "groups": [
              ["&", "|", "^", "~", "<<", ">>", ">>>"],
              ["==", "!=", "===", "!==", ">", ">=", "<", "<="],
              ["&&", "||"],
              ["in", "instanceof"]
            ]
          }
        ],
        "no-restricted-syntax": 0,
        "no-continue": 0,
        "no-plusplus": 0,
        "function-paren-newline": 0,
        "react/jsx-props-no-spreading": 0,
        "react/destructuring-assignment": 0,
        "react/no-array-index-key": 0,
        "import/prefer-default-export": 0,
        "prefer-destructuring": ["error", { "object": true, "array": false }],
        "react/jsx-filename-extension": [
          "warn",
          {
            "extensions": [".tsx"]
          }
        ],
        "react/prop-types": [
          "error",
          {
            "skipUndeclared": true
          }
        ],
        "jsx-quotes": ["error", "prefer-single"],
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-unused-vars": [
          "warn",
          {
            "ignoreRestSiblings": true
          }
        ]
      }
    }
  ]
}
