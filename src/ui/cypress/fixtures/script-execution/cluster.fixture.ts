/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/* eslint-disable max-len */

export const ExecuteScriptRequestString = ''
 + '';

export const ExecuteScriptRequestJson = {
  'queryStr': [
    '# Copyright 2018- The Pixie Authors.',
    '#',
    '# Licensed under the Apache License, Version 2.0 (the "License");',
    '# you may not use this file except in compliance with the License.',
    '# You may obtain a copy of the License at',
    '#',
    '#     http://www.apache.org/licenses/LICENSE-2.0',
    '#',
    '# Unless required by applicable law or agreed to in writing, software',
    '# distributed under the License is distributed on an "AS IS" BASIS,',
    '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.',
    '# See the License for the specific language governing permissions and',
    '# limitations under the License.',
    '#',
    '# SPDX-License-Identifier: Apache-2.0',
    '',
    "''' Cluster Overview",
    '',
    'This view lists the namespaces and the nodes that are available on the current cluster.',
    '',
    "'''",
    'import px',
    '',
    '',
    '# Flag to filter out health checks from the data.',
    'filter_health_checks = True',
    '',
    "# Whether or not to include traffic from IPs that don't resolve to a known pod/service.",
    'include_ips = True',
    '',
    '',
    '# Hack to get the time window for the script.',
    '# TODO(philkuz): Replace this with a built-in.',
    'def get_time_window(start_time: str):',
    "    ''' Converts the start_time string into a table with a single column and single row.",
    '    The approach is hacky, and will round to roughly 1 second.',
    "    '''",
    "    df = px.DataFrame('process_stats', start_time=start_time)",
    '',
    '    df = df.agg(',
    "        time_min=('time_', px.min),",
    "        time_max=('time_', px.max),",
    '    )',
    '',
    '    df.window = px.DurationNanos(df.time_max - df.time_min)',
    "    df = df[['window']]",
    '',
    '    return df',
    '',
    '',
    'def add_time_window_column(df, start_time):',
    '    tw = get_time_window(start_time)',
    "    df = df.merge(tw, how='inner', left_on=[], right_on=[])",
    '    return df',
    '',
    '',
    'def process_stats_by_entity(start_time: str, entity: str):',
    "    ''' Gets the windowed process stats (CPU, memory, etc) per node or pod.",
    '    Args:',
    '    @start_time Starting time of the data to examine.',
    '    @entity: Either pod or node_name.',
    "    '''",
    '    # Window size to use on time_ column for bucketing.',
    '    ns_per_s = 1000 * 1000 * 1000',
    '    window_ns = px.DurationNanos(10 * ns_per_s)',
    '',
    "    df = px.DataFrame(table='process_stats', start_time=start_time)",
    '    df[entity] = df.ctx[entity]',
    '    df.timestamp = px.bin(df.time_, window_ns)',
    '    # First calculate CPU usage by process (UPID) in each k8s_object',
    '    # over all windows.',
    "    df = df.groupby([entity, 'upid', 'timestamp']).agg(",
    "        rss=('rss_bytes', px.mean),",
    "        vsize=('vsize_bytes', px.mean),",
    '        # The fields below are counters, so we take the min and the max to subtract them.',
    "        cpu_utime_ns_max=('cpu_utime_ns', px.max),",
    "        cpu_utime_ns_min=('cpu_utime_ns', px.min),",
    "        cpu_ktime_ns_max=('cpu_ktime_ns', px.max),",
    "        cpu_ktime_ns_min=('cpu_ktime_ns', px.min),",
    "        read_bytes_max=('read_bytes', px.max),",
    "        read_bytes_min=('read_bytes', px.min),",
    "        write_bytes_max=('write_bytes', px.max),",
    "        write_bytes_min=('write_bytes', px.min),",
    "        rchar_bytes_max=('rchar_bytes', px.max),",
    "        rchar_bytes_min=('rchar_bytes', px.min),",
    "        wchar_bytes_max=('wchar_bytes', px.max),",
    "        wchar_bytes_min=('wchar_bytes', px.min),",
    '    )',
    '    # Next calculate cpu usage and memory stats per window.',
    '    df.cpu_utime_ns = df.cpu_utime_ns_max - df.cpu_utime_ns_min',
    '    df.cpu_ktime_ns = df.cpu_ktime_ns_max - df.cpu_ktime_ns_min',
    '    df.read_bytes = df.read_bytes_max - df.read_bytes_min',
    '    df.write_bytes = df.write_bytes_max - df.write_bytes_min',
    '    df.rchar_bytes = df.rchar_bytes_max - df.rchar_bytes_min',
    '    df.wchar_bytes = df.wchar_bytes_max - df.wchar_bytes_min',
    '    # Sum by UPID.',
    "    df = df.groupby([entity, 'timestamp']).agg(",
    "        cpu_ktime_ns=('cpu_ktime_ns', px.sum),",
    "        cpu_utime_ns=('cpu_utime_ns', px.sum),",
    "        read_bytes=('read_bytes', px.sum),",
    "        write_bytes=('write_bytes', px.sum),",
    "        rchar_bytes=('rchar_bytes', px.sum),",
    "        wchar_bytes=('wchar_bytes', px.sum),",
    "        rss=('rss', px.sum),",
    "        vsize=('vsize', px.sum),",
    '    )',
    '    df.actual_disk_read_throughput = df.read_bytes / window_ns',
    '    df.actual_disk_write_throughput = df.write_bytes / window_ns',
    '    df.total_disk_read_throughput = df.rchar_bytes / window_ns',
    '    df.total_disk_write_throughput = df.wchar_bytes / window_ns',
    '    # Now take the mean value over the various timestamps.',
    '    df = df.groupby(entity).agg(',
    "        cpu_ktime_ns=('cpu_ktime_ns', px.mean),",
    "        cpu_utime_ns=('cpu_utime_ns', px.mean),",
    "        actual_disk_read_throughput=('actual_disk_read_throughput', px.mean),",
    "        actual_disk_write_throughput=('actual_disk_write_throughput', px.mean),",
    "        total_disk_read_throughput=('total_disk_read_throughput', px.mean),",
    "        total_disk_write_throughput=('total_disk_write_throughput', px.mean),",
    "        avg_rss=('rss', px.mean),",
    "        avg_vsize=('vsize', px.mean),",
    '    )',
    '    # Finally, calculate total (kernel + user time)  percentage used over window.',
    '    df.cpu_usage = px.Percent((df.cpu_ktime_ns + df.cpu_utime_ns) / window_ns)',
    "    return df.drop(['cpu_ktime_ns', 'cpu_utime_ns'])",
    '',
    '',
    'def nodes_for_cluster(start_time: str):',
    "    ''' Gets a list of nodes in the current cluster since `start_time`.",
    '    Args:',
    '    @start_time Start time of the data to examine.',
    "    '''",
    "    df = px.DataFrame(table='process_stats', start_time=start_time)",
    "    df.node = df.ctx['node_name']",
    "    df.pod = df.ctx['pod_name']",
    "    agg = df.groupby(['node', 'pod']).agg()",
    "    nodes = agg.groupby('node').agg(pod_count=('pod', px.count))",
    "    process_stats = process_stats_by_entity(start_time, 'node')",
    "    output = process_stats.merge(nodes, how='inner', left_on='node', right_on='node',",
    "                                 suffixes=['', '_x'])",
    "    return output[['node', 'cpu_usage', 'pod_count']]",
    '',
    '',
    'def pods_for_cluster(start_time: str):',
    "    ''' A list of pods in `namespace`.",
    '    Args:',
    '    @start_time: The timestamp of data to start at.',
    '    @namespace: The name of the namespace to filter on.',
    "    '''",
    "    df = px.DataFrame(table='process_stats', start_time=start_time)",
    "    df.pod = df.ctx['pod_name']",
    "    df.node = df.ctx['node_name']",
    "    df.container = df.ctx['container_name']",
    "    df = df.groupby(['pod', 'node', 'container']).agg()",
    "    df = df.groupby(['pod', 'node']).agg(container_count=('container', px.count))",
    '    df.start_time = px.pod_name_to_start_time(df.pod)',
    '    df.status = px.pod_name_to_status(df.pod)',
    "    process_stats = process_stats_by_entity(start_time, 'pod')",
    "    output = process_stats.merge(df, how='inner', left_on='pod', right_on='pod',",
    "                                 suffixes=['', '_x'])",
    "    return output[['pod', 'cpu_usage', 'total_disk_read_throughput',",
    "                   'total_disk_write_throughput', 'container_count',",
    "                   'node', 'start_time', 'status']]",
    '',
    '',
    'def namespaces_for_cluster(start_time: str):',
    "    ''' Gets a overview of namespaces in the current cluster since `start_time`.",
    '    Args:',
    '    @start_time Start time of the data to examine.',
    "    '''",
    "    df = px.DataFrame(table='process_stats', start_time=start_time)",
    "    df.service = df.ctx['service_name']",
    "    df.pod = df.ctx['pod_name']",
    "    df.namespace = df.ctx['namespace']",
    "    agg = df.groupby(['service', 'pod', 'namespace']).agg()",
    "    pod_count = agg.groupby(['namespace', 'pod']).agg()",
    "    pod_count = pod_count.groupby('namespace').agg(pod_count=('pod', px.count))",
    "    svc_count = agg.groupby(['namespace', 'service']).agg()",
    "    svc_count = svc_count.groupby('namespace').agg(service_count=('service', px.count))",
    "    pod_and_svc_count = pod_count.merge(svc_count, how='inner',",
    "                                        left_on='namespace', right_on='namespace',",
    "                                        suffixes=['', '_x'])",
    "    process_stats = process_stats_by_entity(start_time, 'namespace')",
    "    output = process_stats.merge(pod_and_svc_count, how='inner', left_on='namespace',",
    "                                 right_on='namespace', suffixes=['', '_y'])",
    "    return output[['namespace', 'pod_count', 'service_count', 'avg_vsize', 'avg_rss']]",
    '',
    '',
    'def services_for_cluster(start_time: str):',
    "    ''' Get an overview of the services in the current cluster.",
    '    Args:',
    '    @start_time: The timestamp of data to start at.',
    "    '''",
    "    df = px.DataFrame(table='process_stats', start_time=start_time)",
    "    df.service = df.ctx['service']",
    "    df = df[df.service != '']",
    "    df.pod = df.ctx['pod']",
    "    df = df.groupby(['service', 'pod']).agg()",
    "    df = df.groupby('service').agg(pod_count=('pod', px.count))",
    '    service_let = service_let_summary(start_time)',
    "    joined = df.merge(service_let, how='left', left_on='service', right_on='service',",
    "                      suffixes=['', '_x'])",
    "    return joined.drop('service_x')",
    '',
    '',
    'def http_stats(start_time: str):',
    "    ''' Get a dataframe of HTTP events.",
    '    Certain traffic (like health checks) are auto removed, and some standard fields are added.',
    '    Args:',
    '    @start_time: The timestamp of data to start at.',
    "    '''",
    "    df = px.DataFrame(table='http_events', start_time=start_time)",
    '',
    '    # Add K8s metadata.',
    "    df.service = df.ctx['service']",
    "    df.pod = df.ctx['pod']",
    '',
    '    # Filter out non-k8s entities.',
    "    df = df[df.pod != '']",
    '',
    '    # Additional HTTP fields, pre-computed for convenience.',
    '    df.failure = df.resp_status >= 400',
    '',
    '    # Remove health checks, and anything with no remote address.',
    "    health_check_req = ((df.req_path == '/healthz' or df.req_path == '/readyz') or df.req_path == '/livez')",
    "    filter_out_conds = (health_check_req and filter_health_checks) or (df['remote_addr'] == '-')",
    '    df = df[not filter_out_conds]',
    '',
    '    return df',
    '',
    '',
    'def http_stats_by_service(start_time: str):',
    "    ''' Get a data frame of HTTP stats per service. The HTTP stats are for inbound traffic,",
    '    and includes HTTP request count, error count and latency quantiles.',
    '    Args:',
    '    @start_time: The timestamp of data to start at.',
    "    '''",
    '    df = http_stats(start_time)',
    '',
    '    # Filter only to inbound service traffic (server-side).',
    "    # Don't include traffic initiated by this service to an external location.",
    '    df = df[df.trace_role == 2]',
    '',
    '    # Compute HTTP metrics.',
    "    df = df.groupby(['service']).agg(",
    "        http_req_count_in=('latency', px.count),",
    "        http_error_count_in=('failure', px.sum),",
    "        http_latency_in=('latency', px.quantiles)",
    '    )',
    '',
    '    return df',
    '',
    '',
    'def conn_stats(start_time: str):',
    "    ''' Get a dataframe of connection stats.",
    '    For each client-server pair, the resulting data frame has the bytes sent and received.',
    '    Args:',
    '    @start_time: The timestamp of data to start at.',
    "    '''",
    "    df = px.DataFrame(table='conn_stats', start_time=start_time)",
    '',
    "    df.pod = df.ctx['pod']",
    "    df.service = df.ctx['service']",
    '',
    "    df = df[df.service != '']",
    '',
    '    # Find min/max bytes transferred over the selected time window per pod.',
    "    df = df.groupby(['upid', 'remote_addr', 'remote_port', 'pod', 'service', 'trace_role']).agg(",
    "        bytes_recv_min=('bytes_recv', px.min),",
    "        bytes_recv_max=('bytes_recv', px.max),",
    "        bytes_sent_min=('bytes_sent', px.min),",
    "        bytes_sent_max=('bytes_sent', px.max),",
    '    )',
    '',
    '    # Calculate bytes transferred over the time window',
    '    df.bytes_sent = df.bytes_sent_max - df.bytes_sent_min',
    '    df.bytes_recv = df.bytes_recv_max - df.bytes_recv_min',
    "    df = df.drop(['bytes_recv_min', 'bytes_recv_max', 'bytes_sent_min', 'bytes_sent_max'])",
    '',
    '    return df',
    '',
    '',
    'def conn_stats_by_service(start_time: str):',
    "    ''' Get a dataframe of connection stats aggregated by service.",
    '    For each service, the resulting data frame contains rx/tx stats for server-side and client-side connections.',
    '    Args:',
    '    @start_time: The timestamp of data to start at.',
    "    '''",
    '    df = conn_stats(start_time)',
    '',
    '    # Group by service and trace role.',
    '    # Do this after computing bytes sent/received by conn_stats key ({upid, remote_addr, remote_port}).',
    '    # Keeping trace_role allows us to see which traffic was part of server duties vs client duties.',
    "    df = df.groupby(['service', 'trace_role']).agg(",
    "        bytes_recv=('bytes_recv', px.sum),",
    "        bytes_sent=('bytes_sent', px.sum),",
    '    )',
    '',
    '    # Get RX/TX stats for the server side connections.',
    '    server_df = df[df.trace_role == 2]',
    '    server_df.rx_server = server_df.bytes_recv',
    '    server_df.tx_server = server_df.bytes_sent',
    "    server_df = server_df[['service', 'rx_server', 'tx_server']]",
    '',
    '    # Get RX/TX stats for the client side connections.',
    '    client_df = df[df.trace_role == 1]',
    '    client_df.rx_client = client_df.bytes_recv',
    '    client_df.tx_client = client_df.bytes_sent',
    "    client_df = client_df[['service', 'rx_client', 'tx_client']]",
    '',
    '    # Create a dataframe that contains both server-side and client-side RX/TX stats.',
    '    df = server_df.merge(client_df,',
    "                         how='left',",
    "                         left_on='service',",
    "                         right_on='service',",
    "                         suffixes=['', '_x'])",
    "    df = df['service', 'rx_server', 'tx_server', 'rx_client', 'tx_client']",
    '',
    '    return df',
    '',
    '',
    'def service_let_summary(start_time: str):',
    "    ''' Compute a summary of traffic by requesting service, for requests",
    '        on services in the current cluster..',
    '    Args:',
    '    @start_time: The timestamp of data to start at.',
    "    '''",
    '    conn_stats_df = conn_stats_by_service(start_time)',
    '    http_stats_df = http_stats_by_service(start_time)',
    '',
    '    # Merge conn_stats_df and http_stats_df.',
    '    df = conn_stats_df.merge(http_stats_df,',
    "                             how='left',",
    "                             left_on='service',",
    "                             right_on='service',",
    "                             suffixes=['', '_x'])",
    '',
    '    # Compute time window for the query and add it as a column.',
    '    df = add_time_window_column(df, start_time)',
    '',
    '    # Compute throughput values.',
    '    df.http_req_throughput_in = df.http_req_count_in / df.window',
    '    df.http_error_rate_in = px.Percent(',
    '        px.select(df.http_req_count_in != 0, df.http_error_count_in / df.http_req_count_in, 0.0))',
    '    df.inbound_conns = (df.rx_server + df.tx_server) / df.window',
    '    df.outbound_conns = (df.tx_client + df.rx_client) / df.window',
    '',
    "    return df[['service', 'http_latency_in', 'http_req_throughput_in', 'http_error_rate_in',",
    "               'inbound_conns', 'outbound_conns']]",
    '',
    '',
    'def service_let_graph(start_time: str):',
    "    ''' Compute a summary of traffic by requesting service, for requests on services",
    '        in the current cluster. Similar to `service_let_summary` but also breaks down',
    '        by pod in addition to service.',
    '    Args:',
    '    @start_time: The timestamp of data to start at.',
    "    '''",
    '    df = http_stats(start_time)',
    "    df = df.groupby(['service', 'remote_addr', 'pod', 'trace_role']).agg(",
    "        http_req_count_in=('latency', px.count),",
    "        http_error_count_in=('failure', px.sum),",
    "        latency_quantiles=('latency', px.quantiles),",
    "        inbound_bytes_total=('req_body_size', px.sum),",
    "        outbound_bytes_total=('resp_body_size', px.sum)",
    '    )',
    '',
    '    # Get the traced and remote pod/service/IP information.',
    '    df.traced_pod = df.pod',
    '    df.traced_service = df.service',
    '    df.traced_ip = px.pod_name_to_pod_ip(df.pod)',
    '    df.remote_pod = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))',
    '    df.remote_service = px.service_id_to_service_name(px.ip_to_service_id(df.remote_addr))',
    '    df.remote_ip = df.remote_addr',
    '    # If external IPs are excluded in the service graph, then we also exclude any',
    "    # traffic where we don't know the remote pod or remote service name.",
    "    df = df[include_ips or (df.remote_pod != '' or df.remote_service != '')]",
    '',
    '    # Associate it with Client/Server roles, based on the trace role.',
    '    df.is_server_side_tracing = df.trace_role == 2',
    '    df.responder_pod = px.select(df.is_server_side_tracing, df.traced_pod, df.remote_pod)',
    '    df.requestor_pod = px.select(df.is_server_side_tracing, df.remote_pod, df.traced_pod)',
    '    df.responder_service = px.select(df.is_server_side_tracing, df.traced_service, df.remote_service)',
    '    df.requestor_service = px.select(df.is_server_side_tracing, df.remote_service, df.traced_service)',
    '    df.responder_ip = px.select(df.is_server_side_tracing, df.traced_ip, df.remote_ip)',
    '    df.requestor_ip = px.select(df.is_server_side_tracing, df.remote_ip, df.traced_ip)',
    '',
    '    # Compute statistics about each edge of the service graph.',
    "    df.latency_p50 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p50')))",
    "    df.latency_p90 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p90')))",
    "    df.latency_p99 = px.DurationNanos(px.floor(px.pluck_float64(df.latency_quantiles, 'p99')))",
    '    df = add_time_window_column(df, start_time)',
    '    df.request_throughput = df.http_req_count_in / df.window',
    '    df.inbound_throughput = df.inbound_bytes_total / df.window',
    '    df.outbound_throughput = df.outbound_bytes_total / df.window',
    '    df.error_rate = px.Percent(df.http_error_count_in / df.http_req_count_in)',
    '',
    "    df = df.groupby(['responder_pod', 'requestor_pod', 'responder_service',",
    "                     'requestor_service', 'responder_ip', 'requestor_ip']).agg(",
    "        latency_p50=('latency_p50', px.mean),",
    "        latency_p90=('latency_p90', px.mean),",
    "        latency_p99=('latency_p99', px.mean),",
    "        request_throughput=('request_throughput', px.mean),",
    "        error_rate=('error_rate', px.mean),",
    "        inbound_throughput=('inbound_throughput', px.mean),",
    "        outbound_throughput=('outbound_throughput', px.mean),",
    "        throughput_total=('http_req_count_in', px.sum)",
    '    )',
    '',
    '    return df',
    '',
  ].join('\n'),
  'clusterId': 'a5a49c01-aba9-4d84-840e-b31055dc6400',
  'execFuncsList': [
    {
      'funcName': 'service_let_graph',
      'argValuesList': [
        {
          'name': 'start_time',
          'value': '-5m',
        },
      ],
      'outputTablePrefix': 'HTTP Service Map',
    },
    {
      'funcName': 'nodes_for_cluster',
      'argValuesList': [
        {
          'name': 'start_time',
          'value': '-5m',
        },
      ],
      'outputTablePrefix': 'Nodes',
    },
    {
      'funcName': 'namespaces_for_cluster',
      'argValuesList': [
        {
          'name': 'start_time',
          'value': '-5m',
        },
      ],
      'outputTablePrefix': 'Namespaces',
    },
    {
      'funcName': 'services_for_cluster',
      'argValuesList': [
        {
          'name': 'start_time',
          'value': '-5m',
        },
      ],
      'outputTablePrefix': 'Services',
    },
    {
      'funcName': 'pods_for_cluster',
      'argValuesList': [
        {
          'name': 'start_time',
          'value': '-5m',
        },
      ],
      'outputTablePrefix': 'Pods',
    },
  ],
  'mutation': false,
  'encryptionOptions': {
    'jwkKey': '{"alg":"RSA-OAEP-256","e":"AQAB","ext":true,"key_ops":["encrypt"],"kty":"RSA","n":"zXDvXr87H5n24xuH5A0T8PYczGyXYm7oHmxvXcCizZ2inaSb2JA_tVX9CEWLUyp1ayV2waOn_tpsowipE9Tb9YQRRX7ux0Kw6J0pgEI7He860EWsPRvTTUgcs2xCQ8Wgn9mXpfaht1h-Z17q3jOJg1UBe4uESeTep9HbKTuUWL93pt839mgPhn7yP2ETtKaUNJ0EJAhHIwjrdWXWvq4H60cSJ6SiXA5J83ZHijWts5D06Zun6BOx8s-kCwbfh7nqIfBND06nEoycOcv16ajaqLGJfr_2pTiPoUJA5faMycdQBUE8AnGSpv25i5wzRJUvLL6Lybmb-K_RBVK6W7kCY9CpVux7wP9CZnTLTRAN1c8EplqXrD8EE13TZURK-mmBQ8u8zFVMw2SuLc-jMqYhUwNB5inSnKg3hs9La0nn7xzVvMAvciM-ELbskGFUNUms3bE0a2xlsIt1CDbjYmtqE90LxowG-bViQ2edMI9x1vLJZyL19JD3oi7ARR9VJrFnK_3jim6aEQZqCnuTm4BwMaIFrGd9TUi2Ym51a9VwjQuVmG14F35drAgwaU6Ufpjpe32ZDZ0y5WP7vbzF2jFFiv_fvP00vaaF6nYZweQXDrw4AfU8JdRkJD1Vu763957Mvc4RpThfoEQ96nCCl7xIOinxv_4gUOdyQ-PvHVtRoXE"}',
    'keyAlg': 'RSA-OAEP-256',
    'contentAlg': 'A256GCM',
    'compressionAlg': 'DEF',
  },
  'queryId': '',
};

export const ExecuteScriptResponseString = ''
 + 'AAAAAaUSJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYSL8AgrBAgoUCg1yZXNwb25kZXJfcG9kEAUgkAMKFAoNcmVxdWVzdG9yX3BvZBAFIJADChgKEXJlc3BvbmRlcl9zZXJ2aWNlEAUgrAIKGAoRcmVxdWVzdG9yX3NlcnZpY2UQBSCsAgoSCgxyZXNwb25kZXJfaXAQBSABChIKDHJlcXVlc3Rvcl9pcBAFIAEKEgoLbGF0ZW5jeV9wNTAQBCCFBwoSCgtsYXRlbmN5X3A5MBAEIIUHChIKC2xhdGVuY3lfcDk5EAQghQcKGQoScmVxdWVzdF90aHJvdWdocHV0EAQghgcKEQoKZXJyb3JfcmF0ZRAEIIQHChkKEmluYm91bmRfdGhyb3VnaHB1dBAEIIcHChoKE291dGJvdW5kX3Rocm91Z2hwdXQQBCCHBwoWChB0aHJvdWdocHV0X3RvdGFsEAIgARIQSFRUUCBTZXJ2aWNlIE1hcBokZDhjMGQyZWItY2Y5MC00MDBhLTg4MmYtMjA4N2ZmZThjOTAxAAAAAIcSJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYSJfCjAKCwoEbm9kZRAFIPQDChAKCWNwdV91c2FnZRAEIIQHCg8KCXBvZF9jb3VudBACIAESBU5vZGVzGiQ4OThjMjEyYy0yMjE0LTQ0NWUtYmEwYi03ZDY1OGQ4ZWE5MjI=AAAAALcSJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYSKOAQpaChAKCW5hbWVzcGFjZRAFILwFCg8KCXBvZF9jb3VudBACIAEKEwoNc2VydmljZV9jb3VudBACIAEKEAoJYXZnX3ZzaXplEAQgoAYKDgoHYXZnX3JzcxAEIKAGEgpOYW1lc3BhY2VzGiQzMWExODU5OC03ZGE3LTQzNGEtODE0Mi04ZGNlODY1NjMzNDA=AAAAAQISJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYSLZAQqqAQoKCgNwb2QQBSCQAwoQCgljcHVfdXNhZ2UQBCCEBwohChp0b3RhbF9kaXNrX3JlYWRfdGhyb3VnaHB1dBAEIIcHCiIKG3RvdGFsX2Rpc2tfd3JpdGVfdGhyb3VnaHB1dBAEIIcHChUKD2NvbnRhaW5lcl9jb3VudBACIAEKCwoEbm9kZRAFIPQDChAKCnN0YXJ0X3RpbWUQBiABCg0KBnN0YXR1cxAFIJIDEgRQb2RzGiQ4NzNlY2JjNC0zY2E1LTRhMWMtOTQ3Yy00MzRlY2YzYTc4NjU=AAAAAPwSJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYSLTAQqgAQoOCgdzZXJ2aWNlEAUgrAIKDwoJcG9kX2NvdW50EAIgAQoWCg9odHRwX2xhdGVuY3lfaW4QBSDpBwodChZodHRwX3JlcV90aHJvdWdocHV0X2luEAQghgcKGQoSaHR0cF9lcnJvcl9yYXRlX2luEAQghAcKFAoNaW5ib3VuZF9jb25ucxAEIIcHChUKDm91dGJvdW5kX2Nvbm5zEAQghwcSCFNlcnZpY2VzGiQzYTM5NzczNi1mYjNmLTQzZGItOWYyNy1mOTkzZDEzNjM1Mzc=AAAABEoSJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYRqhCBqeCGV5SmhiR2NpT2lKU1UwRXRUMEZGVUMweU5UWWlMQ0psYm1NaU9pSkJNalUyUjBOTklpd2llbWx3SWpvaVJFVkdJbjAudjI3YVI4ZGxTbEdWanVkRVZnY0tGd3FLUExTUE9wSmg4LVdwWGJqRW1fQVJGNTk3SDA4WVBPYUhETnU3cjBBNW8yLTYxamJDMERSbWgxeVhwd2tlVS11Y3RwZVRPbWlDMVVuVTBFYXMwTjFGLXZPdU1WYmRteHRwdDB4Q1I3dTBYNEUtQU1FdEhDXzNQUTdWZkdhQkw4OGlhdzQ5VEZWdklZYlBsZW1vNUx2NFd3VmNCdjlIbDJadGFVMlNCM3djNnpnVjF6UDZnbFBISlNpY1N5NFU0ckNQRmhFVVVuQlB3d2U3bW1MWFpKcFJLQk01VVJkaTYyNHo4Qm15aExIeU4yRkxNeDdDRVNqeXdzN3VNUE0weGlpRmJVYUI5MEZMbm93SkxjcEdDMmcyTWQ1NUFETzA0bktiMUNmQmM4S3UxcUZYODM1a240U0Nhb0RmcUNZRTI1R1JoU3lmaG04ZGVsQXJ3ZmI0MGl4YW5rMkRxM1poM2FNaWdOUF8wbGljMTlEZ1Vnb1JZUDNfcVVLbnMwOU1MWUJSSVkxaXlOVG9sdjNHUi1KMTRBN1RKNGQ1VUpYQ0dXZTZVNnRLd05mdE1VbEVFVk15Zk1IN054UlJfNVFuaEhUNWVyUGpwV2tTVVg3MVphVHVsSVZoYUlES3VSSExlQ0w3OVNHdUx6UnNlcW9VX0YwSjc3RlJMSXIxOF9wVjlZQXlDYUpCY3NpRVlZem1pT2lwWUw0Ry1qZzZmQlhzcGE2cWstZURTdmotQWlCV3VPcFVQMUZWT0RyVF9aV3c4MzJLNnpFanpVZzg0T1M2cDhVYnE4R1AtSmJ6T1ZZSUtxNHY5cTQyd2k3V1I1b3cyWlBiZ0pYU2E4TkpRbktmZWJiYTBjY0lWNTF5eUdNYktVbVVZQkkud2VSOThOZnhMNU96QXBvMi5RM0pOU2l2OVo4S3d5YzE4eC12dHZOX1JiVTE2WHhzdGFaWGRscHN5S1p4MnFOeHZOdUZmS0VxTTBIZ1pMZF9aOUVfTGtSUXczWDJvQmxRbWRmZVJpMHBGMVpmaW1CWXFQTWpDMTdVaG80OVBaQ2VmUHJfX2tmVHdsemV3Y0tLY09vWHZlM3hyVjFiVG5lM0Y4dXl6Wkl4cWZOdjJNcDVVeHZDekJad3lqQUNPdmU4NzRNa2lueTlIRGliNng4MU11bFozOWRlc3pNMG4yWlVHUjZFSmd4OHV4ckxjbWVBV19rWlR1b3N2azB4bm9hV1hrNUFQclBYblVQU3BSanZ0U2dDR0tnLkRZS0pLM2NaR25jMU5NbnlSSGxNZ3c=AAAAFx8SJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYRr2LRrzLWV5SmhiR2NpT2lKU1UwRXRUMEZGVUMweU5UWWlMQ0psYm1NaU9pSkJNalUyUjBOTklpd2llbWx3SWpvaVJFVkdJbjAuT0puekRkOWNRR0tPbXpDWDk5QmY1MlRaVzhucEgxTHBPT2twNGtvU3BxMDZNay1uUTFPYnJCemZSM0NWWklZZml2NTFuNld5NW1yRDhTNVQ0RGtVc2QtSG1LV1hhTzlnMFBXOFI2UlhsOGpIX2k0UExZNi04XzI4YnJCN2N2TDdyZkIyOF9MYW1hdnhWOENaRGZyRExYWHY3bHVFMmhxbERXeUs4NzVLZXlVaWwwcTNQdUR5ZjBiN1dVbE95RDAzMHhBQ0JIWkxxZmJQM25kcUprZUdLWHhMa2l0dFJVQnMtV3BIR0hnRHpCM25QQWRhenlEX1pRa3hzMm5LUExPZmtLMDFjNzgza1NfT2Z3TkJkOG95MjNMWk95bEowMXhrMF9JdWROX1BQaW1QbFFibUlKYzgyMkpCZGhJdG1Zdk1rWUZBS1FhY18wWHhwczd5aEE0UFVVY0x1WDZlQmdxMUFmT0FkVHF4V1lnMWZUR0xmSzMxVFB1SUxMS3RYZHFPaHJNcFhvdzJzT2x6LUNxVmVrWDJ3SklNbms0R0Uwb1RkaExqRHJ3ODAwVWc4cTc0S1pSYVpBSG9SYkt2b2V3alRKT0J2UEtSS1pMNlVWdTNDaXN5M0FqUG1QVDdjWVJzbUVxeEwwQVF1azBibF9tTVRfZ3ZhTjVncURrTmpoRy1oX2dsbzI5Ym9ER3dwYTFGWkxUUERjbGJ6QTd6RkpvbExzN01xczJnNjN0OGdUNlNYSHhaWHZpbFpVN0VJX3BZNlg2SThXdkxnMllzWTFzS213bTRvc3NDbTRxZ0VralR2UzJDWEpXeEhqaVlKeGlGSjEteXMxdTRlZFU1OUpyYTJVN09wczdodEV0bTNMRFgyVlZXNmhwczU0R0o3YXVsdVlWWG5rVlFlT28udU1RLTdJNnl3Tk1WS0ZMSS5fMTNfNlFEcFY4OFoxdU1JaDJfSjY5YTd4dERkMktpWlRYX1JrdUplOEVrNUQ2azh2aFJhV2M5S1NNR0tkOHBKN3pVTDZkQ3dFYTczMlgwUEtQRFVvempseGlBQURjaWMzUzVHZWRLRDF5bWo1bzZkN1huNDA3V2FUVG9QbEN3eGJMRW1VdzlRaW15VERBZVhNMDJ0VXNvRHYxNVo5ZUg3N2F6WVh5NkpxdEk5allRVFRaQWM1NC13WWFPNjFxc2lXVEtQRDRKR2piQ1ZlTkFrUkRocUtnanRoRkZBaDZyWlR5U19DUm5jTE1RSVFkRkV0bGZtWFNsSnc4OWhaVDdsWllkUWxVSXNsejdlY196cTIycFBnbEE5TXFMQlRQMEhKOWV0d05sNlJUdFlNR0JMV0xZbkt0RGtjOGlQRlZmdGpKVmlfeFZhc1B5UmlBT29pT1VNN19DLThVbDV6dHhOQWpBNzJ6NTVjZk9TU2ZhVGlzRjA2Q2I3SnhTWTJEWEhnN2RYYTBvOEdISnNwamU3VDMwUEoyOF9HNU5ZTUhydHpaR0dicnpabjNDMlMyZzJ4LWhrU3diN09UdGJtV0c4a3h1QVlVakp3cXFfZUNuN2VoclNhWHBBSVZkZmFqSzRGOVBKRmRhdFFMVDA4a2xnNVhBaHp4ek5XTEZ1a01CTnZCRUhTOENpQkNYNUkyVHNrM1VTQ1FySTNsMzcwa18zOFBvYi1JWkVfYjdvYUFfRjQ0djc1RlY0WGhyVlZVWkpxVURQRkNQcExmQl9Xamhwc3pKdW5YMExUVnFBaThBdFlSMHNzWHZMQ1BGTk8xcVRBSEZ4UEotaWhIMGpwX2hRUGQxakE3cUM5ZEN5MC1XSkpYbUg1N3c0d3A1UUlWOE5GaWQ4Sms1TjBXLTZnTGtsME1NQ0FVYlVuNnZjMkx5S1BEampLcVoxWUV0N3NoTzYtNy1IZXJiTWZ0bDc3dXM1RGhYT3lOdlFodV9GcHJPS0R5bWptNmZxRlMzN3drYkNYWFBFNHRpR1UwRDgxazB6Tld4RERwUHpHMUNQck9zaWs0MDNINTV3VHBWSHEta1RsbzBFSllaRVhsY3ZoSE1PUEVDY3ZvVXBSVDJPYy15Z1NNZDlpRXhvSDJ3MGxjSXpxNEhfenBYWHUwY294UmRVUDdCUFhSTFZYSlRfeVRaa0FsNnI2bW5UTUdWVjdKVjVQb1dNbDFNZXYybW1EWHg0Z0xjSTJLVG52WlZrY29qTV9qYTlHamo2WHJ4Zi1IM0lxU3VLUWlMNlVDZ21wWWJrdW1iMnRxeEZvWGR0U0U2bFJSV0ltaTFRM1dFTkJhNW4yUVpQbkp1N0ctUUlteTJrMmpfVXNESFpMQldpMjJhNXRwTzJwUTI2bGZ0b2NGSE5xOFdMM1J0Sk5TaDhsNjN1QVlyQ0d5X25pREwwaEMzQ1hQREhrMlhTenNnSjNpRUtXaVd4ZTVRSElTMXlaQk5lRXRYQ3lrR1dtTldaVmlyOXVCR2FSNG02eUVEaG02VmVEVVBRQXRjZWhrN1FDV1BGY0ZpQmZ4Sm52TVN5Zk5qMURCSWp2bFA5YnV0d0wtWlVhbzJ2MVFDVmtDeWpRVDN6M29WdlQ4Z2dNNV9fWGRxZVNzVDJtZVRDQUNyQjlKV2ZqdmlObDZOc19WN21RT2RfV2JTakF6VFdrS0JXbW5FRVdxZTh1cXZyN2FKUzFoa1NQV3ZSMFBUTkFZcFdfdDJQcFN1Wko4dTVkaFRhTWowNW9rT0hPb24tT1hkNUlfMjZhU2ljVzNtNEVzLW9kNUppZUhCdkc1Tm5aQlEzSU05clljWEUwT19MWmRXcllKR2dnY0x0ZFdqak40RW1FdS1OZmUtLU9sckNBMzlrSVZzRHB5V2RoWDFKeV9Bc3JDa3VEVGtjb1FPSVl3SDZITXE4dFcyUk80ZHNmRXdybmVZcnFDUDJndWFtZmZiMExab1B4cTlwWTJHbTNmbVJQaGFLanVQNUxqUlo3ZG81cEdWVExtbTR3OXVBOVpQbS1jRW5ONHlyVkJSRzQ1eVowMzFUOGlvTVV0dmdOeWpySTlKdm0xQTB6UGVYYVpSNHJLcThpMFZoa2NQZkZtWFFZWVRkdG1zZ1hfckRaT1l3U0k2LVJLTGhxejVrZHluSVhQdUxQemxkY19ua2N3TnRKXzUyNjNVQ3dCZHp2Z2ZrNDN6LThmX2tnMnlsOElreEluSF9nWFZabTFDTU5ZcXNvYktnazMteE1mdW9BYlRJOWRjQ3dhOFAxR1lXSldKeEVFVURPN0ltM0Q1bVZuaFFQWXRVblZPZnpwSHlueHFDdUtLc3ZZcXE5cThsWFJUbU9GOW1ZS3hPVnZqb2xMVjJGaWp5blM2YXhzSTc2ZTVSeGR3c0ppTWlXWFRYbUtOZjd0QlQxZGEzd2pHQWVVZW9PSjE3aDNtS2lRZ00xdlFHQ3J0Z0NsU3lveUJzV3ZZT1p4d0VyMEpCZ3hBNnBfM3ZKU2Y5cW1CVTN6VE9Kal9rbTlQNzhHVkVVS01pNzRYMFR5akdhT2FFLUhsWGJjcThSQWhEd1d4NzJvQ0lQVGVEall3Z3AxekR2dVZxeDFkaWUtMmd1VW43UmtSNkJRUTF5aTZlVzJ6bFFGTUR4alZzQXNUTWo5bHp2Zks2blhPMHFZaWFUOUo1LXN3REQxZFRLcmFEaENrVDZsQi03RUgtbXZiMDhRbWFodTZ6MTNIdmN2aUxRWFFYNG1qZ2JURThhQi1UOFNyVG11bjFiLXdldkh3dnBWY1dKcWF4bUNIdWdkaXBDOFhfNXYzN2xrU1E3NGxKZk5rRVg4Y2FEal93T2RLMkVuU0E0WkwyMXU1SVcxdDFkTEUwMl9RRXJxaVlLVkpBcFJWeGNoNHNMa2tHWm10TDRSUWJPaFF5TGEwZEF2WXZzRkpOVW8zUlJSQmg2eV9YZi1kam40UmMtbjJmT2swMnRURnZKd180UmlfandMbHJtaFo1V3BGNlM1dkRUcVFXWkN6UnBuMFpyREdoT1lVRVk2Y0dtRnh3Q0YyT1ppTTM0VklPZ0VWdTNKVjZjY1dQV2dIUmcxbXFfSm9aQko0TjNtUzlmREJJZVhqdG0xU1l0QnMwdlRDYTI5a09wQmV0anVsSXRCQzcwQ3R3YWdtOTFRcS14b2FlRjA0OVZOOFNseVE1by1CWmktdHBpREU1SXRfakEtSjJDYVVtclkwdVlxRWNIVDhsRkdlN0E1dUIyZUhUX1o3SVd0RGRrN1ByMEl5OWJhVUFSYzkya09QNGhPQmd6d3g0T3haNnB0Zm1uT1poYXpNM1hoaHZZN09LODA0VjFBYnRDdjdOY0pIYklDc0NHUzhvcE96MkZidTgxdHdmWmJvUmhLS3FvTWJhYnpEQllMLWNmaGFZME0xV2FIQzBYMGVoMmtlTDA3Rm9qUnFKaHNjTmRMRHRLOURnUWo5YTJ5WXJHYXpjM3lUYXlCREV1QTBCMjIxTW1lNDhSWVZDZUFPSm1XRk95ZmJUSlo2Z0toYUpZWFBRS1Z1QzhFSEJaOFE2T3BRdkdnSnFTckpNalVhcjlBTWN1UTZLNDAzR1Q0Q0NncnUzZ29xaFdFWld6TVc0QW9LNWNFbzliS0ozc01adlNLWHdQbTMwYU1nTHdsdExuYzdodDQ3b2dJcmFwdEFYMlUzeFpxWHliaVNEeHJBS3Vmdy1kUk9qWHBvR1JkOHFSdEZnZXV2eGZTNkhCcTlRbENMX1ZaZ0h6ZXdKb1ZzQnZ4U2xoSE9KTURUbHFPM0c2UHUtQmE2RnFIc2ptMHZEQ0tFaTNReDhORGZHSTExYzRuYWdRSVJxSF9ndGd3OGlOcXBfOGxHUlNuOVlOU0RuX015TDRWSTJIMVMwRU1VZHQ3ZDN6cFBPd0daMGZtOFRLb1BNT05FdnJSNlN6cnJ1YjV1bGFWUkl3QnhIY3lTbGJjNGcxMFREUjczSUFyZmZHYWszYkZJWkYwNlVpbkxMMTNMLVhZLWJsYWUzTXk5Vl9ucWhvVTBXQzhRTjdxeFJnazVKYzFMc2YxNm1ZSGQ4TTBTR0RidXl4bVFyN2ZaeWpjdlBKbEZBRXk3aXVrQnVtRDRJcmxzRlRNdWVMUVFkY0Z2YW5SeDFJelJhdkZGZUNWbHRyNEEtdnhZbC1xZENDS2M5SlQzLXpnNjRkYUNoMG9mSzVVZlBoNHh5NGVZYm1BTjhzOVUzNXF6S3lrTVktWTg1OWcxM2ZROE9KVW05MHdjWjFyU2FsOHNZS2JWdms3M3N3dFdFby0taUJyTi11amdzTTR4RXVpa3BIRHRIVDdoVndLVEpPMDRXSGQ4MlNlWUg2N0NDdlJXbGgtRFZpQmlTNGtrN3M1RGNJRHVNa2tHRDg1VGxyc3ZOd2xVckREbjZTTTlWbDc0Uk95SFV0ZHprU1p2a285bFJySHhibE5YazdQbXFsX2lfR2FUNEpYT2hpUVZ3Wnl4SU51N3I2bllkVndxX084STN1WVJVMEZiU2c0VnZuQUFqVTlBaDQ0blNCcnFla3RoS0JvQ2JzMnlySHlQSF9EcVI1QlJabE5CeVFtYnFHZ0x0STRrU2NGUWxqZmxCZDJYV1dTa0RFcWVlXzVtN1E0Q2JBcmZIdWkwQ0htcjJWTENyMEVLaElySjNydWgyOFh0STNWTXFEYU1ZMmx2OVMtTlUxSWVHeXBNUWw2Y2EwX3pmNXdZQ281UndnTXVha0lyTzJDM3l0SEh3UTljaFkydk1DZWJTam5KWDhhUXVPdmZPR0phNTNtOWZKQ1RmSHZpTmlObGV2UzdoOFVXZ0lOdjNRV0g3cFdhV3hBZ0JqM19fM0tCc0g3amlJaEF4OHlEakw3dnZ4M2YtU2tNZXJ4bVhxQkR6blhHa1lvN1htNzlDcTRoTFpHRzRpQnBNb1pBS0c2SWk5ZUNES1lmVVR4VDlPM1B3T29MV0NHazRVMThwYkw2Ui1ldkNnTW5tVEhobEtZb3FfR1FGR0Q0N1U2aHcyRkpQeW5iVzJCeEFLTnlmb1FOeXg0dFZEZEdVdlBaWFAtZXZNTzE2WWJzZkhOSFRmeVp0VXU5Tm1MQ0tOUkxCbVo2TnppUlBIRk01THFGVWpiT2ZmRUV0UFk1S2RmY3NNY19QOHlzRG1RTlpNN0VPNUVoVE9aVUFBTkVLRXlNclkwUmlmVFY5WFIzSzdnLUg1czFydzc0VFJyX1ZDaENKNk9UVzNPVkltd0FjZmRtT1hyZ3AwVWVWMDlBbHUzVEQ0emlmX040a0U3cUpCd1MwLXpNbEkxSTFrQmpOZ2dhT3JUQXZUeFloRXNuYnhDaEhqRWdkN1poWFJQcnZXSDNJMXI2RGxIZmU0c3EtYWNPWG5zeTNJUGxpUnlXNWNVa0k5dnU5UHVZNTRyYzhUQjVtTy1TdC0yVEpEeGZlWEpwaUVUM3hTSzYxSTJCcnFuQmZxYnFsakpIUnF6d0V1R0R1WWI5SVJENU5NdnJtd2NaaWVQbnppLUNvOWVyTk5WZUhPa0MtZEo2NjhnaXdnc0Nfa0pXRTFmMUhDNWJtdktMc3hlOVJVazkxalNSZEE5SXYtX2E4WnQtWDZOdDN3eUFZbC1kNTVrRThsVml0WXZtZ2FIclJ4Z3dudGc0ejhOMjk2dHAwd2ZPS2pmQTFBR3RoRDY1MTB5ckRiVklISEZhanZmOENlU0IyM3dYc3pDaVBHbUhxZUxodDU0SzBZS2FiQlV1aUxzYWNLcTZMQmJTUExzMThuNk1ZSkVPbEFweXVMdjhNeF93RHpveHZ2a2RzbklGbFB3THBXZ2FJdUdiZ19NdzJYa2F2RzY1ekVjOUxDa0g5a3ZaQTZ5cU8xdWpqSVJhZFY0TGZCbXJlblBEd3RzVjk4ZXh3c3A0aWQ2Y3loVjdSclZNZjM4Y0hEcnd5OVdTUkRjUmo2WHNRZm9NblBYT2tRYWJBNkw5QnNzdWVMMFJaYzFXaHptUG9jVm5NSmdxVjdyZlNSeUM4MXBicGRsT1VPbjgyLW82djdpanBkekRQQjExQm5IVmpQYXdlbGVULUNtR0lUdVFwYno1dWxRQUxrZXVTSDJvU3hkWWVYdFZUbUt4ZVUtZG9jNXpuS3QwSXFreHpYdXFTbzZrUVktNEVXZUQteW5lakN3SERPUkRESFo0SE44bWQ5RHRyaUxId29OaXE4Y2c3QTNPT3ZQRFpQa0VWbnMzcGtFcEZtOUtRek9GZnhKSkluZVZQdkVURU1qcDl4OXFKRGI3Q29WNlJxNjk3eHJoLWEyU0ZMRmNueEdtV2ZKcl9YNURrWl9tVWNMNENKWWJjaWZfSlkzb1UxckFOeU9BNlY5T1lxODVHMUxEZC11aTFSMHVRazJQM1pLQmhfdEZuSWRfRkN1YjFnSXJTTk9WSTNtMlpkT1VIRno1enJtUm1GZ1Vrb0kwQmNnQlVPa2RyQ1IyT2VRZGduS1RVMmdhRkx2eXRscFF2TWo4WmlhZVk1SVRjMnRzSVdNeXNEWjZ3TjBNWWJqUjNpSEg4TFZqZ0JYRUUtUzNEeENGY0wzeFBKN0Ficy1nVm9qM0RmVUREVXlkcDdVdTYzaE4wYk9CMG1vMWJwN1BWbnpJUzhxRWNaRVN2RzJfTXhWQmItc3hvSU1UOGRrb0Znd1ZIYjc1UmlCd21HakIzcnJLTHhidDVvaVVUSFdqWEcwbmJSZ29ibW1ucGFIYklBSmpoTi1kTTJBTGowV1VlRHdRLkhRcGVOLTJiajNNdXROd1J3TXVEWEE=AAAADZISJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYRrpGhrmGmV5SmhiR2NpT2lKU1UwRXRUMEZGVUMweU5UWWlMQ0psYm1NaU9pSkJNalUyUjBOTklpd2llbWx3SWpvaVJFVkdJbjAuU2o0OWNyMmpRVjZVVDJhUU80N2dLeHVXRmNYeS1XUndtNDhOc3RlMkJzcHZpRHVCZV91THdhX2szVEV5Wm5HelV4Y3lYRlNNOExnWmhzcU04ZjJzWGpzbmNUdFJfbmttaUI4czlLc3h5TEZmYU9EV0lucEJYV09lV1kxdWRBcFZDanZkN2JicXZUd3dXTVlBLS1LYV9Eb3NLbEFjMjhxZDR6NGJqVlFocTVCSnJWRlUxX19nYUVWWGdjQS1ycDBxZmdKbHdkajA3WTRnUTU5Z05VWjJ1OURnSHFhVmo4QXljQ0wyZjlXXzF3UmtwZGlJR3VWX01oaEUzYXF2OEJRZUJ4WnltQ2lVZVpDaC1hSUpVQk1vaUFXRmNERzJkQXFOYW9RWnAwOHRiZmxMQ0JqTkFIOVRiLUZETWtMaFpGamhOZkdmakQ1T19wTWpLMDZmV2pRUWRXS3hwVTlVRGhjS0EzYnFrak44Nl9ReE1CS081WnFJenl5Ml9nVFlJankxY2c2R0dWZk5tOUtYWFNUc0FGSFVFb2oyRTNUb3pyU2pGekRSSDQxN1oxVjFEYUp2VDJzWjNSd1hWY3hJaXk0eWR1OEFfVF9hNXZqd3RPeWdMRWNEcEh2TmJhR0l5S1Y3cnVsQk9nSW1VcTlXcVlzdlk3TlJ4bV8xV19TTF9wdUdqOXdHUmdKWlp0Z0E2QVBjeUdjdGc0SHVfWHBkTUhuSzNZUm81OWtBN2Z2UmUxYnJDUGJFMEljR3VDcVhqY2sxbWpnN0d3UXh2RE5ON1BZZGFTZ2tybzNrWlhjQW9vN21qTExHNmgwcy1aM1NKWDRLM1RIN2VCMFpYSXdDXzNDYkx2UjRBVkpYRkVqX2NPNWE1ZGZ0X2ozZm8td29oTkdQdG03TnVXX2ZqUkkudVdPX0tLT0VPWi14SlRJSS4tYXVXMzNfd0t5WXB0ZnJRUWQtSkZ4eHNpQW45RWN3ZUU5YUNJZkxFZjFpRG4zWWlWWm1xQTk2WlJoQVRpY1ZzUTlFYllXSFJoUXc4MnpjQXM4ajZDRFJDVXN1b0pZc0dyQlNhekpZbVJqQVpBTmQyVmQ4UmFBdmdPcmZwSUhYY0dTMjN1eExIRXloZm1ueWhSYTQxVE43cTZTMGJoQlNWLUVaZzcyQS02RHlXZmlEZUZSZ1ZkUW1DaUhETm9ZVDRvTy16ak5xR1FXOVV6X3lJd01aZXMxTDM3cFZPM3YzUnktMkxCT3REWUVNb0FIbDByN1FGemtmRFJocHhKOEdudEtxMnVuVXQxaGFQcnYwQktmcllKUmRWbTdleHJPVjZ5Q3BOTXo0Q2JmMW0tM0ZTeVpycXdYUGRXX0QwY1BFUUNZQldMQVlubmFfZkNyQzlQT1FUT1Q1czZZNTlnVWwwU001d3ZqaTdmd2htcGJ2eFI2MjlTazdRc1pDWlRzSmdNLTNPclRwVjNXdzhvVzZ0NmV0MkhZbVMySG82OWdVdkt1c1Z4a1ZfenBmSjdZeURLVWJoN1phZUM5dkN6cEdIT2E2QUhHYnFFY0lRQkRFcEdwclZqR2J3WURQblk5ZjJoRjVITDNwbUc4Y2xYcWhzeEE1OVhya0JBXzRpZ1IwNTVkSGRrdXdkamw3Z1B4Wm42bGQ1Y3dEOEZkc0RwSUVSQWVuMHRJMm1CanpCUEdCY3NHMjBHWTdOR2o1eUNkWEFoVmRZVnlkNTlYeVRYVWUzd3hXcnRPR0NFeDBPSDE2REZTVXRYcERwWE5YS2libUttYlZ6YzJvdGljbG0wMTVCcndLZ0xXNkoweFk0OTZEOE9UU2hqOFk0OHh3dHlQSnFpc3A4RU9EYTJaa2ZXeWhpS0ZiNUZsckZZODRNdlM4ZXZnSlYxSGs2N3NaOUxXT2Utd0E1S1JNclY3MVZzVW84Vmd4WjhROGFWdUJyWUZfcjJrdzBZbG1LY1hHVW1kNF9wbjNqdzNsWHlleVU5SXhBcHcxRnloLVppMjdtRXg3TlJuVXA0WG1ycVgxZnhjeTc5UVZRRV9EU3lNd2d2SlROQWxtMW1kWXczMk5yOGJBWkJ4RWxvQWRpRklzU3dhMEpzYTVPVXdYRHlZM3J6T2hJWmF4SGhVZnFVS0tVNjV2d0ZGNWNBU0VReDdtbUNrSk10TjFrOWwxeDZpZWs5U2x4SVJKcWdTVXJkaFpfOUVGM0Vaa20yZ245MXVlQnBVWkEybUwtM3M1QVZ0NVJ0Ym5uMHhxaHpnYVhNTHJkOGFnRlZHV1RCTU5COVgyM1FMa2ZwMlFjakszTGx4QVhfTnJtWjRoN2swQmZNWEI5WUpUY3F6U25oeHEzSm10QTh1ajkzLUNOVFRzVThFYkVqVUZRbnRJNXJHR2xpelMtcFktaHF0WlNmUTUwQWY3NnZ0Qks0UV9UeURvT1Y0YkhvSVBPM2JwVWJ6X1NidXRuNi10RWMydTVKYUVReDFzN0VuUWM1VjRJaENVdVRHdV9pQXdvNzhjTWR2TnRjZlZHRHM3OHhMc0dpQ1RjU3I5R2J6YjFQTkJ5eHRhLXV6MDdWRjZGRmZ3SHdnVGZUUmRjWW01OFpDMTNZZTFEUktDY0xnZVRKRzlGLVI5QzVCQXNUUmtMYTViWmhFZk5MNVQteEVuSWNVYi1tUXkwOUthWHQ4dEd4dUNSNHh1RmZGTHVrRm5RSGIxMEMxcTZCcHBMUUNNeFByUWh0VlJqTDVJeThDZDFzYm1naFM4QnlSaTdta2pza1BGMnVObnd5MUhESVlONEFTSzV6eW9vSHNFVE1BaGhySGtYNGpza0pnd3V4ZHYwbzlkcmR5RG00RW5fNnhRNkxtVDBkajg1VGhlU24wV3NJYWtBQTNFU25ZcnlidkVEQzVhUGU0UzQtbEhYbUpwYWxhTTZ4TjVzMmNUN1JSRzh1Z01pNXBHckNWWERZeU1oQ2ZjT0ZfY2RsemlFX2RUTTd2dFQycUpZajhoTTVkcURwVmRpMWlqZU8tUHJhdl9NblI3Sm43ZjNiT01UQU1UUGthRm93NnhYSG8yTjlsMUxISGxlZlR5UkQ4MDlPTzEzcVdJNkRWcldqVEs1V0hiOXlGdVZHOFJtQ3pyekJSN1o3VHRvclAtcUpwR190bDFJMHF3TTZpV3pOMkF0dnRmRFdzQklpeGJOZG5XcjRmbU1BMWFjNV9Wb2pwX19QenFoTHZsRVBJQ19kczJqR0dGcFVoUFdEaXVjWTlGdEpaZUFXajZ5TU5KWi1kSTNhN1NweHpnNldjMWh5dkF4T0R6b19ZQW9kZmhhS01CSDhoaGJRUnF2YTBLaHlKNmJZRWFNZTFyckxFUU5uUVBZZkpsUGI4QzlFNFAtOGdhWV9sQVlGM1BzWGczOEV1OVpkUFJaUnRHeDVxM1pXMFVtZmRIQTBiV3BtUk1KOFpTVnVWaFhWaXFZSV9lVzBwQlZYTW9ZOU5id04tMkZtWVRVc1VWanlDRlduc2ZHamlycGZFX0I4OVBxTGdGLU9RQWNzMGF2TVhKR2VtQUVkclFTQ3dlSkZzOXY4bkhQOW9hMEE4cExmRXk4VUlueldiLVVzYTY1V19HYnBUdVJwTFdpSHBGd2d2aHpTeF9TREFxZHBtb2dSTC1ncE85X0h6bUhsWW1BODdpWjdPNWZKd1k0WTBrd3NSN3lVQ2RxRUVVVG9BM3ZfRTdNcWQ5NU9HUkN6WFg1RXlVVW1zNGY5dC1Oa3RFd3Q4YjhpZTRPRE9oVFFNV25STjI0a2xqQnJNU3JyNjBMOUtwRWNaOC12Sk5nM3FoLW8zM28tR3Jwb2JNeVExOE1Id0xDN09wWmJLTlpEWkw1SUtoaDJNc1pHTGNpWU5QVGJzVkh6Q2wyeHZIbUg0SXVQaHoxLU13cUhpNGpveG5PUzRSRXlhMGRNdEl0dVlfRURTcUFXUEJBd3l3bkRBUGI4WXhpV3B3cHFCWUY3VWtJaXBCYXlzdHVwSjhPX1FuQXJLMFAzc3p3ZnN3eUFhbTE1TEdEN1U5eUhFWW1yRFM3Q29CRzE3aFlBdlRuTXMzX0lDemdJWEk4ODd4bXJuS0tOd1g2V21xVHE5TkwwU01QNmR1SHpVMTBHalV6ei1FOTZXRnBqRno1QTZ4eDI4T08tWjNvLWllcUYtZ1BmeURRMmhIV2JrV2RpQjVzRkxqbkZQWS1zRFhrNmpfRWpkU3R1ZnJQazFFbDRfLWN4Sm52clZCVVBiWXE1MWo3T2N5ZWNzVllDUVJHenBtNkVBR2RaOFg4Tk16YjNwdUdubHF1Q0JjT3d3Y1hldTIyMHpkR1MtUGJ3MEdGb3k0dndiRnNUbW5ZYlhZUV92NXpYLVYzbHpJcUxWUmhGYUdsMW1KLVRGM252SC1GSzBSTHg2ck1MSFJYWURCcmJKSkx0cHNWcWhEWmYyWmFWVE1mcjE2bkpCLUlROXVxMzNOMDNRLnh2amZVeFBxYzVNRkZNcW42SWFQRHc=AAAABBcSJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYRruBxrrB2V5SmhiR2NpT2lKU1UwRXRUMEZGVUMweU5UWWlMQ0psYm1NaU9pSkJNalUyUjBOTklpd2llbWx3SWpvaVJFVkdJbjAuR0dGajFFdllFRWhwWkQ0Z1JmQ1NpWFEtODN6ZmxxOGZ1VGtFNUI3ZmxDSkVEVHZua2xTTWNIXzV4a1dweWw0SjZUbng0MTZXU3ItUFVOLWNLTkVmZXM5MlIyUmNWSEJ3Z1FsbnFjSTljaS1wNmRRZHp5YWdWekZRWTIycHZOQU9CUTRDMlNzOG1YX3pCVFMzR3JXbWNTNWw4VVJ1SlBkRTFqRmtPVlA1WWhfZ09aSnNpZk9kam44ZWFDNEppcUI1T2JfRFp5aWw1am9GYW9zRnliZWhiM2RMelh6WnFFRkFYWXFuOVpiTlVQWDZfU0xXSVFLUDVGTmNFdHFoaDJXMGpaWFNzeDNoSjZBV3Q1UFhuQWZIUENtdnEtS05aTXA5UmdEd08yYTVRdGR5ZlVZd1hkcWRXdHdpU3Q0b2NTOGpFWjYxU3BjTFY3aXp3WVpBYWxZYlBtWDdqU2h4Y2FVWFJXZG9pSHE5RV80M3JsbU4yVWVRMlg0dEdLNUl5U3MtX3hSTC10SGo3M2pHcWdqS3pyZExHQmJJTkwzLU5fQTFPZlBmNzRnYWQwWTU4WHRqeXltSHE4VUhsa0tzRHhVaWhHdGtualZXbmVNRFNLN0M1NUVQRUJaTFZzWHp6THQwc3N4b2ZFZkxVUFlaU242TkRUelFlYXgtZjRiTTg1T0M3ZG0yV2htUTNvZzhGcTFXeFR0SXNrOUhRVk5YaC1wN2tSbk1FeFJfemFsOThGTTZjWFlOenJfc0U5eUdBeGlWbGctOW10OW8tSm1YWDZrbzNfcUlLSnhHVkRha0FXYmhGSmJNQjdzb3Nhd0pjQ3c3RFJQbXpqa3Rfb3pFc0pJaWEyT2lmZlVzT0FMTlpCTlVra3VVZy12UEJTZVYtbGwteGdHQ0VuZ0tWeXcuX21GZ3lXTmVYbUg1Sy1EVi5ld1BxVDlReUFEdG1mc3ZLN3M0RkpnU3g1TzZGTW4xVHJ5dGs0SmpZT1Z6NzFzYzhBenBzLVJyb3ZDT0RnbTBpQ2t3VENmVklwYkhDUmhKY0dGUEItdUpBdlFfbGJ6SUp6VVNrdk1rTmdDOU9DMzE2NlVjeVpUemM5RmRsMU1qMWxEdkl6THhPWDhVYlYxeU5EdDNKMEZDLU4wblFkZ2xxeGR1cVEwaDFzSDZPNmtmVWtWZklfNDZlXzllTmgyS1Y2MkdGTHJiQ0xySERTamZyNHdzLlQtSElPbUVjWFZyb0Fkdklvc2RJeGc=AAAABSwSJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYRqDChqACmV5SmhiR2NpT2lKU1UwRXRUMEZGVUMweU5UWWlMQ0psYm1NaU9pSkJNalUyUjBOTklpd2llbWx3SWpvaVJFVkdJbjAua0g4YWdsaXZWcG9ZdDcxV3ljRDlIbDgySjhENHl6QTlxTHFEbkVWaU1YQU1WcWNJcmp3ZWdSOWd3QXRGNS12UUtsUUJyN3UxbkEtRGpRSU9ycmRZc1U4eUZYOThrYlFRNFpLWHI3MExoVGdHSW1Zc05uZ3VpSjQySE1QeGpSaG0yNnVCZURLTnJ5ZmZpRThlaHRGUUxpZFUwVmt4R3BWeHBkNFVhM2NaRkNjRTBfaHRkZ3VkNnRhYnRjM3lZdkFfVmg2eV82TUpfdVhibXM1VmFFeHVWUHptNGx3ZFBZWElSQzd3OGZ3Uy1TX3ZSZ1VDSUlxOExFallnRWN6dGdKX0F6QkFBTEtMa2ZVOXhuYWZ6elJndzdJNVdNNDNKXzhnTzVHTE1xb2l0Q0d6elM1bHdjWmdRd21ZT0xiSG1xTEk2SFVqOVlkcmpzcnU1WDlINzh5ejRzbDNWaUlsdHpLVmljNFdJMWYza2ZzTXNXQmlFOVBzTkpXNUUtdXJNUTFodmVIT1c3cU1tb3NFRGxOa3QyX01TVHNud1RqdUpWQjR0Z0dZNUFMeFNsVWVyTFNieFhzQ09IQUtJQS01MGR2Q2ZsN18zMmFoTzZ1OGFEZzJLY2p4NkplSnF5T283bE5ZUHg3ZUdhRXRaUWtDZUs0LXNLdnV5VmlHY2NJRnJjWlY4ZS1LZW01ZEo0bW1Ua1dNZ1lQSlVZaHRSRWVWUXp1c1hzYWVhUFhBV3ZydF83bTVlck1QWld1Mi1xUDFRZ3VobjE0ZnFoU2NqbmhkcHVCYUpFTi10MGNlb1BtVWFPbUFLY1hyOGdqWGJ0NEd0cXY3V2d6S0xBc2FSejVRQjk2ZVhtUGlBM3dkbzZ2UDBaZTZYSHVrbWYwVlJ2YVpCMXk4U3VEWk1SV1VjZGsuMm4wZmlFbFlMbnplcWRXTi5rWV9PX0VEaXNJVms1RG9tUEhGNzZVemE0RkxNT19qN1Y2VEc4WGVFSWUxZ0l3ak9VY1p3QjJtLWhSaG1ZdlRYeWd1dGgyU3UxWTFNYXo0NVhSUmlPczBDNGRYbTl5TVZJdWpQWC10b3BTWWFrUkczV2NYZXgwSmQ1aGpIQ0R2WlE2Qy1BalBhLWdSUnlpcmxnX2Y4VHNQV2JQVXJKSWl0cmduVmxSdlVrVW9HVTNtUEpRaTZZNVRqbVJDRS1vZ3FUYXYtUkxERUtveng1V1dCQnAzOHZQeW8ySkFjaDdGeEZxRW9qUGJaSHpySFQ5Y3dhX2ZYWlVOcmNIaFhHVUI0cEp6X0VuMHF1UmRsU3BhVUVyWFVXV0FIS1JmQ3gzaVF6c3k2VDRsNzd0N1hvWXFEQnNKc191MHE0b0t4SWR2TG15bUlLXzItWS00bFQwY2hlejdadVpHX3g2THJnUFZVN3pWdFZELVFJdmd5ejc2WEFGNl9wN2NZRFl6cERZZjJjUVZBbW1zc0RwTUg4eEU4RlQxNFNMODhheUxld2VKZlBRQVU1RzZUel8xVDZ3cjBOWlY0allOVk9sVDVDbFlhV1pGZkxRTEs2ajNOamQxUW5wNUVzU3NYajZIaTJuWENlYTFjNkxKYS5DY1plTDZRLXFqTThzUzJSdDA2RzZ3AAAAAEASJDlmZTEyZmMwLTQ3NTYtNDI0ZC05MzU0LWIzNGMyODUwZTdiYRoYEhYKCwiws4yuBBCu2ocbEIiOkwcYwaMNgAAAAA9ncnBjLXN0YXR1czowDQo=';

export const ExecuteScriptResponseJson = [
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'data': undefined,
    'mutationInfo': undefined,
    'metaData': {
      'relation': {
        'columnsList': [
          {
            'columnName': 'responder_pod',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 400,
          },
          {
            'columnName': 'requestor_pod',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 400,
          },
          {
            'columnName': 'responder_service',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 300,
          },
          {
            'columnName': 'requestor_service',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 300,
          },
          {
            'columnName': 'responder_ip',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 1,
          },
          {
            'columnName': 'requestor_ip',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 1,
          },
          {
            'columnName': 'latency_p50',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 901,
          },
          {
            'columnName': 'latency_p90',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 901,
          },
          {
            'columnName': 'latency_p99',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 901,
          },
          {
            'columnName': 'request_throughput',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 902,
          },
          {
            'columnName': 'error_rate',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 900,
          },
          {
            'columnName': 'inbound_throughput',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 903,
          },
          {
            'columnName': 'outbound_throughput',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 903,
          },
          {
            'columnName': 'throughput_total',
            'columnType': 2,
            'columnDesc': '',
            'columnSemanticType': 1,
          },
        ],
      },
      'name': 'HTTP Service Map',
      'id': 'd8c0d2eb-cf90-400a-882f-2087ffe8c901',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'data': undefined,
    'mutationInfo': undefined,
    'metaData': {
      'relation': {
        'columnsList': [
          {
            'columnName': 'node',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 500,
          },
          {
            'columnName': 'cpu_usage',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 900,
          },
          {
            'columnName': 'pod_count',
            'columnType': 2,
            'columnDesc': '',
            'columnSemanticType': 1,
          },
        ],
      },
      'name': 'Nodes',
      'id': '898c212c-2214-445e-ba0b-7d658d8ea922',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'data': undefined,
    'mutationInfo': undefined,
    'metaData': {
      'relation': {
        'columnsList': [
          {
            'columnName': 'namespace',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 700,
          },
          {
            'columnName': 'pod_count',
            'columnType': 2,
            'columnDesc': '',
            'columnSemanticType': 1,
          },
          {
            'columnName': 'service_count',
            'columnType': 2,
            'columnDesc': '',
            'columnSemanticType': 1,
          },
          {
            'columnName': 'avg_vsize',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 800,
          },
          {
            'columnName': 'avg_rss',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 800,
          },
        ],
      },
      'name': 'Namespaces',
      'id': '31a18598-7da7-434a-8142-8dce86563340',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'data': undefined,
    'mutationInfo': undefined,
    'metaData': {
      'relation': {
        'columnsList': [
          {
            'columnName': 'pod',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 400,
          },
          {
            'columnName': 'cpu_usage',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 900,
          },
          {
            'columnName': 'total_disk_read_throughput',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 903,
          },
          {
            'columnName': 'total_disk_write_throughput',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 903,
          },
          {
            'columnName': 'container_count',
            'columnType': 2,
            'columnDesc': '',
            'columnSemanticType': 1,
          },
          {
            'columnName': 'node',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 500,
          },
          {
            'columnName': 'start_time',
            'columnType': 6,
            'columnDesc': '',
            'columnSemanticType': 1,
          },
          {
            'columnName': 'status',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 402,
          },
        ],
      },
      'name': 'Pods',
      'id': '873ecbc4-3ca5-4a1c-947c-434ecf3a7865',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'data': undefined,
    'mutationInfo': undefined,
    'metaData': {
      'relation': {
        'columnsList': [
          {
            'columnName': 'service',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 300,
          },
          {
            'columnName': 'pod_count',
            'columnType': 2,
            'columnDesc': '',
            'columnSemanticType': 1,
          },
          {
            'columnName': 'http_latency_in',
            'columnType': 5,
            'columnDesc': '',
            'columnSemanticType': 1001,
          },
          {
            'columnName': 'http_req_throughput_in',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 902,
          },
          {
            'columnName': 'http_error_rate_in',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 900,
          },
          {
            'columnName': 'inbound_conns',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 903,
          },
          {
            'columnName': 'outbound_conns',
            'columnType': 4,
            'columnDesc': '',
            'columnSemanticType': 903,
          },
        ],
      },
      'name': 'Services',
      'id': '3a397736-fb3f-43db-9f27-f993d1363537',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'metaData': undefined,
    'mutationInfo': undefined,
    'data': {
      'executionStats': undefined,
      'batch': undefined,
      'encryptedBatch': 'ZXlKaGJHY2lPaUpTVTBFdFQwRkZVQzB5TlRZaUxDSmxibU1pT2lKQk1qVTJSME5OSWl3aWVtbHdJam9pUkVWR0luMC52MjdhUjhkbFNsR1ZqdWRFVmdjS0Z3cUtQTFNQT3BKaDgtV3BYYmpFbV9BUkY1OTdIMDhZUE9hSEROdTdyMEE1bzItNjFqYkMwRFJtaDF5WHB3a2VVLXVjdHBlVE9taUMxVW5VMEVhczBOMUYtdk91TVZiZG14dHB0MHhDUjd1MFg0RS1BTUV0SENfM1BRN1ZmR2FCTDg4aWF3NDlURlZ2SVliUGxlbW81THY0V3dWY0J2OUhsMlp0YVUyU0Izd2M2emdWMXpQNmdsUEhKU2ljU3k0VTRyQ1BGaEVVVW5CUHd3ZTdtbUxYWkpwUktCTTVVUmRpNjI0ejhCbXloTEh5TjJGTE14N0NFU2p5d3M3dU1QTTB4aWlGYlVhQjkwRkxub3dKTGNwR0MyZzJNZDU1QURPMDRuS2IxQ2ZCYzhLdTFxRlg4MzVrbjRTQ2FvRGZxQ1lFMjVHUmhTeWZobThkZWxBcndmYjQwaXhhbmsyRHEzWmgzYU1pZ05QXzBsaWMxOURnVWdvUllQM19xVUtuczA5TUxZQlJJWTFpeU5Ub2x2M0dSLUoxNEE3VEo0ZDVVSlhDR1dlNlU2dEt3TmZ0TVVsRUVWTXlmTUg3TnhSUl81UW5oSFQ1ZXJQanBXa1NVWDcxWmFUdWxJVmhhSURLdVJITGVDTDc5U0d1THpSc2Vxb1VfRjBKNzdGUkxJcjE4X3BWOVlBeUNhSkJjc2lFWVl6bWlPaXBZTDRHLWpnNmZCWHNwYTZxay1lRFN2ai1BaUJXdU9wVVAxRlZPRHJUX1pXdzgzMks2ekVqelVnODRPUzZwOFVicThHUC1KYnpPVllJS3E0djlxNDJ3aTdXUjVvdzJaUGJnSlhTYThOSlFuS2ZlYmJhMGNjSVY1MXl5R01iS1VtVVlCSS53ZVI5OE5meEw1T3pBcG8yLlEzSk5TaXY5WjhLd3ljMTh4LXZ0dk5fUmJVMTZYeHN0YVpYZGxwc3lLWngycU54dk51RmZLRXFNMEhnWkxkX1o5RV9Ma1JRdzNYMm9CbFFtZGZlUmkwcEYxWmZpbUJZcVBNakMxN1VobzQ5UFpDZWZQcl9fa2ZUd2x6ZXdjS0tjT29YdmUzeHJWMWJUbmUzRjh1eXpaSXhxZk52Mk1wNVV4dkN6Qlp3eWpBQ092ZTg3NE1raW55OUhEaWI2eDgxTXVsWjM5ZGVzek0wbjJaVUdSNkVKZ3g4dXhyTGNtZUFXX2taVHVvc3ZrMHhub2FXWGs1QVByUFhuVVBTcFJqdnRTZ0NHS2cuRFlLSkszY1pHbmMxTk1ueVJIbE1ndw==',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'metaData': undefined,
    'mutationInfo': undefined,
    'data': {
      'executionStats': undefined,
      'batch': undefined,
      'encryptedBatch': 'ZXlKaGJHY2lPaUpTVTBFdFQwRkZVQzB5TlRZaUxDSmxibU1pT2lKQk1qVTJSME5OSWl3aWVtbHdJam9pUkVWR0luMC5PSm56RGQ5Y1FHS09tekNYOTlCZjUyVFpXOG5wSDFMcE9Pa3A0a29TcHEwNk1rLW5RMU9ickJ6ZlIzQ1ZaSVlmaXY1MW42V3k1bXJEOFM1VDREa1VzZC1IbUtXWGFPOWcwUFc4UjZSWGw4akhfaTRQTFk2LThfMjhickI3Y3ZMN3JmQjI4X0xhbWF2eFY4Q1pEZnJETFhYdjdsdUUyaHFsRFd5Szg3NUtleVVpbDBxM1B1RHlmMGI3V1VsT3lEMDMweEFDQkhaTHFmYlAzbmRxSmtlR0tYeExraXR0UlVCcy1XcEhHSGdEekIzblBBZGF6eURfWlFreHMybktQTE9ma0swMWM3ODNrU19PZndOQmQ4b3kyM0xaT3lsSjAxeGswX0l1ZE5fUFBpbVBsUWJtSUpjODIySkJkaEl0bVl2TWtZRkFLUWFjXzBYeHBzN3loQTRQVVVjTHVYNmVCZ3ExQWZPQWRUcXhXWWcxZlRHTGZLMzFUUHVJTExLdFhkcU9ock1wWG93MnNPbHotQ3FWZWtYMndKSU1uazRHRTBvVGRoTGpEcnc4MDBVZzhxNzRLWlJhWkFIb1JiS3ZvZXdqVEpPQnZQS1JLWkw2VVZ1M0Npc3kzQWpQbVBUN2NZUnNtRXF4TDBBUXVrMGJsX21NVF9ndmFONWdxRGtOamhHLWhfZ2xvMjlib0RHd3BhMUZaTFRQRGNsYnpBN3pGSm9sTHM3TXFzMmc2M3Q4Z1Q2U1hIeFpYdmlsWlU3RUlfcFk2WDZJOFd2TGcyWXNZMXNLbXdtNG9zc0NtNHFnRWtqVHZTMkNYSld4SGppWUp4aUZKMS15czF1NGVkVTU5SnJhMlU3T3BzN2h0RXRtM0xEWDJWVlc2aHBzNTRHSjdhdWx1WVZYbmtWUWVPby51TVEtN0k2eXdOTVZLRkxJLl8xM182UURwVjg4WjF1TUloMl9KNjlhN3h0RGQyS2laVFhfUmt1SmU4RWs1RDZrOHZoUmFXYzlLU01HS2Q4cEo3elVMNmRDd0VhNzMyWDBQS1BEVW96amx4aUFBRGNpYzNTNUdlZEtEMXltajVvNmQ3WG40MDdXYVRUb1BsQ3d4YkxFbVV3OVFpbXlUREFlWE0wMnRVc29EdjE1WjllSDc3YXpZWHk2SnF0STlqWVFUVFpBYzU0LXdZYU82MXFzaVdUS1BENEpHamJDVmVOQWtSRGhxS2dqdGhGRkFoNnJaVHlTX0NSbmNMTVFJUWRGRXRsZm1YU2xKdzg5aFpUN2xaWWRRbFVJc2x6N2VjX3pxMjJwUGdsQTlNcUxCVFAwSEo5ZXR3Tmw2UlR0WU1HQkxXTFluS3REa2M4aVBGVmZ0akpWaV94VmFzUHlSaUFPb2lPVU03X0MtOFVsNXp0eE5BakE3Mno1NWNmT1NTZmFUaXNGMDZDYjdKeFNZMkRYSGc3ZFhhMG84R0hKc3BqZTdUMzBQSjI4X0c1TllNSHJ0elpHR2JyelpuM0MyUzJnMngtaGtTd2I3T1R0Ym1XRzhreHVBWVVqSndxcV9lQ243ZWhyU2FYcEFJVmRmYWpLNEY5UEpGZGF0UUxUMDhrbGc1WEFoenh6TldMRnVrTUJOdkJFSFM4Q2lCQ1g1STJUc2szVVNDUXJJM2wzNzBrXzM4UG9iLUlaRV9iN29hQV9GNDR2NzVGVjRYaHJWVlVaSnFVRFBGQ1BwTGZCX1dqaHBzekp1blgwTFRWcUFpOEF0WVIwc3NYdkxDUEZOTzFxVEFIRnhQSi1paEgwanBfaFFQZDFqQTdxQzlkQ3kwLVdKSlhtSDU3dzR3cDVRSVY4TkZpZDhKazVOMFctNmdMa2wwTU1DQVViVW42dmMyTHlLUERqaktxWjFZRXQ3c2hPNi03LUhlcmJNZnRsNzd1czVEaFhPeU52UWh1X0Zwck9LRHltam02ZnFGUzM3d2tiQ1hYUEU0dGlHVTBEODFrMHpOV3hERHBQekcxQ1ByT3NpazQwM0g1NXdUcFZIcS1rVGxvMEVKWVpFWGxjdmhITU9QRUNjdm9VcFJUMk9jLXlnU01kOWlFeG9IMncwbGNJenE0SF96cFhYdTBjb3hSZFVQN0JQWFJMVlhKVF95VFprQWw2cjZtblRNR1ZWN0pWNVBvV01sMU1ldjJtbURYeDRnTGNJMktUbnZaVmtjb2pNX2phOUdqajZYcnhmLUgzSXFTdUtRaUw2VUNnbXBZYmt1bWIydHF4Rm9YZHRTRTZsUlJXSW1pMVEzV0VOQmE1bjJRWlBuSnU3Ry1RSW15Mmsyal9Vc0RIWkxCV2kyMmE1dHBPMnBRMjZsZnRvY0ZITnE4V0wzUnRKTlNoOGw2M3VBWXJDR3lfbmlETDBoQzNDWFBESGsyWFN6c2dKM2lFS1dpV3hlNVFISVMxeVpCTmVFdFhDeWtHV21OV1pWaXI5dUJHYVI0bTZ5RURobTZWZURVUFFBdGNlaGs3UUNXUEZjRmlCZnhKbnZNU3lmTmoxREJJanZsUDlidXR3TC1aVWFvMnYxUUNWa0N5alFUM3ozb1Z2VDhnZ001X19YZHFlU3NUMm1lVENBQ3JCOUpXZmp2aU5sNk5zX1Y3bVFPZF9XYlNqQXpUV2tLQldtbkVFV3FlOHVxdnI3YUpTMWhrU1BXdlIwUFROQVlwV190MlBwU3VaSjh1NWRoVGFNajA1b2tPSE9vbi1PWGQ1SV8yNmFTaWNXM200RXMtb2Q1SmllSEJ2RzVOblpCUTNJTTlyWWNYRTBPX0xaZFdyWUpHZ2djTHRkV2pqTjRFbUV1LU5mZS0tT2xyQ0EzOWtJVnNEcHlXZGhYMUp5X0FzckNrdURUa2NvUU9JWXdINkhNcTh0VzJSTzRkc2ZFd3JuZVlycUNQMmd1YW1mZmIwTFpvUHhxOXBZMkdtM2ZtUlBoYUtqdVA1TGpSWjdkbzVwR1ZUTG1tNHc5dUE5WlBtLWNFbk40eXJWQlJHNDV5WjAzMVQ4aW9NVXR2Z055anJJOUp2bTFBMHpQZVhhWlI0cktxOGkwVmhrY1BmRm1YUVlZVGR0bXNnWF9yRFpPWXdTSTYtUktMaHF6NWtkeW5JWFB1TFB6bGRjX25rY3dOdEpfNTI2M1VDd0JkenZnZms0M3otOGZfa2cyeWw4SWt4SW5IX2dYVlptMUNNTllxc29iS2drMy14TWZ1b0FiVEk5ZGNDd2E4UDFHWVdKV0p4RUVVRE83SW0zRDVtVm5oUVBZdFVuVk9menBIeW54cUN1S0tzdllxcTlxOGxYUlRtT0Y5bVlLeE9WdmpvbExWMkZpanluUzZheHNJNzZlNVJ4ZHdzSmlNaVdYVFhtS05mN3RCVDFkYTN3akdBZVVlb09KMTdoM21LaVFnTTF2UUdDcnRnQ2xTeW95QnNXdllPWnh3RXIwSkJneEE2cF8zdkpTZjlxbUJVM3pUT0pqX2ttOVA3OEdWRVVLTWk3NFgwVHlqR2FPYUUtSGxYYmNxOFJBaER3V3g3Mm9DSVBUZURqWXdncDF6RHZ1VnF4MWRpZS0yZ3VVbjdSa1I2QlFRMXlpNmVXMnpsUUZNRHhqVnNBc1RNajlsenZmSzZuWE8wcVlpYVQ5SjUtc3dERDFkVEtyYURoQ2tUNmxCLTdFSC1tdmIwOFFtYWh1NnoxM0h2Y3ZpTFFYUVg0bWpnYlRFOGFCLVQ4U3JUbXVuMWItd2V2SHd2cFZjV0pxYXhtQ0h1Z2RpcEM4WF81djM3bGtTUTc0bEpmTmtFWDhjYURqX3dPZEsyRW5TQTRaTDIxdTVJVzF0MWRMRTAyX1FFcnFpWUtWSkFwUlZ4Y2g0c0xra0dabXRMNFJRYk9oUXlMYTBkQXZZdnNGSk5VbzNSUlJCaDZ5X1hmLWRqbjRSYy1uMmZPazAydFRGdkp3XzRSaV9qd0xscm1oWjVXcEY2UzV2RFRxUVdaQ3pScG4wWnJER2hPWVVFWTZjR21GeHdDRjJPWmlNMzRWSU9nRVZ1M0pWNmNjV1BXZ0hSZzFtcV9Kb1pCSjROM21TOWZEQkllWGp0bTFTWXRCczB2VENhMjlrT3BCZXRqdWxJdEJDNzBDdHdhZ205MVFxLXhvYWVGMDQ5Vk44U2x5UTVvLUJaaS10cGlERTVJdF9qQS1KMkNhVW1yWTB1WXFFY0hUOGxGR2U3QTV1QjJlSFRfWjdJV3REZGs3UHIwSXk5YmFVQVJjOTJrT1A0aE9CZ3p3eDRPeFo2cHRmbW5PWmhhek0zWGhodlk3T0s4MDRWMUFidEN2N05jSkhiSUNzQ0dTOG9wT3oyRmJ1ODF0d2ZaYm9SaEtLcW9NYmFiekRCWUwtY2ZoYVkwTTFXYUhDMFgwZWgya2VMMDdGb2pScUpoc2NOZExEdEs5RGdRajlhMnlZckdhemMzeVRheUJERXVBMEIyMjFNbWU0OFJZVkNlQU9KbVdGT3lmYlRKWjZnS2hhSllYUFFLVnVDOEVIQlo4UTZPcFF2R2dKcVNySk1qVWFyOUFNY3VRNks0MDNHVDRDQ2dydTNnb3FoV0VaV3pNVzRBb0s1Y0VvOWJLSjNzTVp2U0tYd1BtMzBhTWdMd2x0TG5jN2h0NDdvZ0lyYXB0QVgyVTN4WnFYeWJpU0R4ckFLdWZ3LWRST2pYcG9HUmQ4cVJ0RmdldXZ4ZlM2SEJxOVFsQ0xfVlpnSHpld0pvVnNCdnhTbGhIT0pNRFRscU8zRzZQdS1CYTZGcUhzam0wdkRDS0VpM1F4OE5EZkdJMTFjNG5hZ1FJUnFIX2d0Z3c4aU5xcF84bEdSU245WU5TRG5fTXlMNFZJMkgxUzBFTVVkdDdkM3pwUE93R1owZm04VEtvUE1PTkV2clI2U3pycnViNXVsYVZSSXdCeEhjeVNsYmM0ZzEwVERSNzNJQXJmZkdhazNiRklaRjA2VWluTEwxM0wtWFktYmxhZTNNeTlWX25xaG9VMFdDOFFON3F4UmdrNUpjMUxzZjE2bVlIZDhNMFNHRGJ1eXhtUXI3Zlp5amN2UEpsRkFFeTdpdWtCdW1ENElybHNGVE11ZUxRUWRjRnZhblJ4MUl6UmF2RkZlQ1ZsdHI0QS12eFlsLXFkQ0NLYzlKVDMtemc2NGRhQ2gwb2ZLNVVmUGg0eHk0ZVlibUFOOHM5VTM1cXpLeWtNWS1ZODU5ZzEzZlE4T0pVbTkwd2NaMXJTYWw4c1lLYlZ2azczc3d0V0VvLS1pQnJOLXVqZ3NNNHhFdWlrcEhEdEhUN2hWd0tUSk8wNFdIZDgyU2VZSDY3Q0N2UldsaC1EVmlCaVM0a2s3czVEY0lEdU1ra0dEODVUbHJzdk53bFVyRERuNlNNOVZsNzRST3lIVXRkemtTWnZrbzlsUnJIeGJsTlhrN1BtcWxfaV9HYVQ0SlhPaGlRVndaeXhJTnU3cjZuWWRWd3FfTzhJM3VZUlUwRmJTZzRWdm5BQWpVOUFoNDRuU0JycWVrdGhLQm9DYnMyeXJIeVBIX0RxUjVCUlpsTkJ5UW1icUdnTHRJNGtTY0ZRbGpmbEJkMlhXV1NrREVxZWVfNW03UTRDYkFyZkh1aTBDSG1yMlZMQ3IwRUtoSXJKM3J1aDI4WHRJM1ZNcURhTVkybHY5Uy1OVTFJZUd5cE1RbDZjYTBfemY1d1lDbzVSd2dNdWFrSXJPMkMzeXRISHdROWNoWTJ2TUNlYlNqbkpYOGFRdU92Zk9HSmE1M205ZkpDVGZIdmlOaU5sZXZTN2g4VVdnSU52M1FXSDdwV2FXeEFnQmozX18zS0JzSDdqaUloQXg4eURqTDd2dngzZi1Ta01lcnhtWHFCRHpuWEdrWW83WG03OUNxNGhMWkdHNGlCcE1vWkFLRzZJaTllQ0RLWWZVVHhUOU8zUHdPb0xXQ0drNFUxOHBiTDZSLWV2Q2dNbm1USGhsS1lvcV9HUUZHRDQ3VTZodzJGSlB5bmJXMkJ4QUtOeWZvUU55eDR0VkRkR1V2UFpYUC1ldk1PMTZZYnNmSE5IVGZ5WnRVdTlObUxDS05STEJtWjZOemlSUEhGTTVMcUZVamJPZmZFRXRQWTVLZGZjc01jX1A4eXNEbVFOWk03RU81RWhUT1pVQUFORUtFeU1yWTBSaWZUVjlYUjNLN2ctSDVzMXJ3NzRUUnJfVkNoQ0o2T1RXM09WSW13QWNmZG1PWHJncDBVZVYwOUFsdTNURDR6aWZfTjRrRTdxSkJ3UzAtek1sSTFJMWtCak5nZ2FPclRBdlR4WWhFc25ieENoSGpFZ2Q3WmhYUlBydldIM0kxcjZEbEhmZTRzcS1hY09YbnN5M0lQbGlSeVc1Y1VrSTl2dTlQdVk1NHJjOFRCNW1PLVN0LTJUSkR4ZmVYSnBpRVQzeFNLNjFJMkJycW5CZnFicWxqSkhScXp3RXVHRHVZYjlJUkQ1Tk12cm13Y1ppZVBuemktQ285ZXJOTlZlSE9rQy1kSjY2OGdpd2dzQ19rSldFMWYxSEM1Ym12S0xzeGU5UlVrOTFqU1JkQTlJdi1fYThadC1YNk50M3d5QVlsLWQ1NWtFOGxWaXRZdm1nYUhyUnhnd250ZzR6OE4yOTZ0cDB3Zk9LamZBMUFHdGhENjUxMHlyRGJWSUhIRmFqdmY4Q2VTQjIzd1hzekNpUEdtSHFlTGh0NTRLMFlLYWJCVXVpTHNhY0txNkxCYlNQTHMxOG42TVlKRU9sQXB5dUx2OE14X3dEem94dnZrZHNuSUZsUHdMcFdnYUl1R2JnX013MlhrYXZHNjV6RWM5TENrSDlrdlpBNnlxTzF1ampJUmFkVjRMZkJtcmVuUER3dHNWOThleHdzcDRpZDZjeWhWN1JyVk1mMzhjSERyd3k5V1NSRGNSajZYc1Fmb01uUFhPa1FhYkE2TDlCc3N1ZUwwUlpjMVdoem1Qb2NWbk1KZ3FWN3JmU1J5QzgxcGJwZGxPVU9uODItbzZ2N2lqcGR6RFBCMTFCbkhWalBhd2VsZVQtQ21HSVR1UXBiejV1bFFBTGtldVNIMm9TeGRZZVh0VlRtS3hlVS1kb2M1em5LdDBJcWt4elh1cVNvNmtRWS00RVdlRC15bmVqQ3dIRE9SRERIWjRITjhtZDlEdHJpTEh3b05pcThjZzdBM09PdlBEWlBrRVZuczNwa0VwRm05S1F6T0ZmeEpKSW5lVlB2RVRFTWpwOXg5cUpEYjdDb1Y2UnE2OTd4cmgtYTJTRkxGY254R21XZkpyX1g1RGtaX21VY0w0Q0pZYmNpZl9KWTNvVTFyQU55T0E2VjlPWXE4NUcxTERkLXVpMVIwdVFrMlAzWktCaF90Rm5JZF9GQ3ViMWdJclNOT1ZJM20yWmRPVUhGejV6cm1SbUZnVWtvSTBCY2dCVU9rZHJDUjJPZVFkZ25LVFUyZ2FGTHZ5dGxwUXZNajhaaWFlWTVJVGMydHNJV015c0RaNndOME1ZYmpSM2lISDhMVmpnQlhFRS1TM0R4Q0ZjTDN4UEo3QWJzLWdWb2ozRGZVRERVeWRwN1V1NjNoTjBiT0IwbW8xYnA3UFZueklTOHFFY1pFU3ZHMl9NeFZCYi1zeG9JTVQ4ZGtvRmd3VkhiNzVSaUJ3bUdqQjNycktMeGJ0NW9pVVRIV2pYRzBuYlJnb2JtbW5wYUhiSUFKamhOLWRNMkFMajBXVWVEd1EuSFFwZU4tMmJqM011dE53UndNdURYQQ==',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'metaData': undefined,
    'mutationInfo': undefined,
    'data': {
      'executionStats': undefined,
      'batch': undefined,
      'encryptedBatch': 'ZXlKaGJHY2lPaUpTVTBFdFQwRkZVQzB5TlRZaUxDSmxibU1pT2lKQk1qVTJSME5OSWl3aWVtbHdJam9pUkVWR0luMC5TajQ5Y3IyalFWNlVUMmFRTzQ3Z0t4dVdGY1h5LVdSd200OE5zdGUyQnNwdmlEdUJlX3VMd2FfazNURXlabkd6VXhjeVhGU004TGdaaHNxTThmMnNYanNuY1R0Ul9ua21pQjhzOUtzeHlMRmZhT0RXSW5wQlhXT2VXWTF1ZEFwVkNqdmQ3YmJxdlR3d1dNWUEtLUthX0Rvc0tsQWMyOHFkNHo0YmpWUWhxNUJKclZGVTFfX2dhRVZYZ2NBLXJwMHFmZ0psd2RqMDdZNGdRNTlnTlVaMnU5RGdIcWFWajhBeWNDTDJmOVdfMXdSa3BkaUlHdVZfTWhoRTNhcXY4QlFlQnhaeW1DaVVlWkNoLWFJSlVCTW9pQVdGY0RHMmRBcU5hb1FacDA4dGJmbExDQmpOQUg5VGItRkRNa0xoWkZqaE5mR2ZqRDVPX3BNakswNmZXalFRZFdLeHBVOVVEaGNLQTNicWtqTjg2X1F4TUJLTzVacUl6eXkyX2dUWUlqeTFjZzZHR1ZmTm05S1hYU1RzQUZIVUVvajJFM1RvenJTakZ6RFJINDE3WjFWMURhSnZUMnNaM1J3WFZjeElpeTR5ZHU4QV9UX2E1dmp3dE95Z0xFY0RwSHZOYmFHSXlLVjdydWxCT2dJbVVxOVdxWXN2WTdOUnhtXzFXX1NMX3B1R2o5d0dSZ0paWnRnQTZBUGN5R2N0ZzRIdV9YcGRNSG5LM1lSbzU5a0E3ZnZSZTFickNQYkUwSWNHdUNxWGpjazFtamc3R3dReHZETk43UFlkYVNna3JvM2taWGNBb283bWpMTEc2aDBzLVozU0pYNEszVEg3ZUIwWlhJd0NfM0NiTHZSNEFWSlhGRWpfY081YTVkZnRfajNmby13b2hOR1B0bTdOdVdfZmpSSS51V09fS0tPRU9aLXhKVElJLi1hdVczM193S3lZcHRmclFRZC1KRnh4c2lBbjlFY3dlRTlhQ0lmTEVmMWlEbjNZaVZabXFBOTZaUmhBVGljVnNROUViWVdIUmhRdzgyemNBczhqNkNEUkNVc3VvSllzR3JCU2F6SlltUmpBWkFOZDJWZDhSYUF2Z09yZnBJSFhjR1MyM3V4TEhFeWhmbW55aFJhNDFUTjdxNlMwYmhCU1YtRVpnNzJBLTZEeVdmaURlRlJnVmRRbUNpSEROb1lUNG9PLXpqTnFHUVc5VXpfeUl3TVplczFMMzdwVk8zdjNSeS0yTEJPdERZRU1vQUhsMHI3UUZ6a2ZEUmhweEo4R250S3EydW5VdDFoYVBydjBCS2ZyWUpSZFZtN2V4ck9WNnlDcE5NejRDYmYxbS0zRlN5WnJxd1hQZFdfRDBjUEVRQ1lCV0xBWW5uYV9mQ3JDOVBPUVRPVDVzNlk1OWdVbDBTTTV3dmppN2Z3aG1wYnZ4UjYyOVNrN1FzWkNaVHNKZ00tM09yVHBWM1d3OG9XNnQ2ZXQySFltUzJIbzY5Z1V2S3VzVnhrVl96cGZKN1l5REtVYmg3WmFlQzl2Q3pwR0hPYTZBSEdicUVjSVFCREVwR3ByVmpHYndZRFBuWTlmMmhGNUhMM3BtRzhjbFhxaHN4QTU5WHJrQkFfNGlnUjA1NWRIZGt1d2RqbDdnUHhabjZsZDVjd0Q4RmRzRHBJRVJBZW4wdEkybUJqekJQR0Jjc0cyMEdZN05HajV5Q2RYQWhWZFlWeWQ1OVh5VFhVZTN3eFdydE9HQ0V4ME9IMTZERlNVdFhwRHBYTlhLaWJtS21iVnpjMm90aWNsbTAxNUJyd0tnTFc2SjB4WTQ5NkQ4T1RTaGo4WTQ4eHd0eVBKcWlzcDhFT0RhMlprZld5aGlLRmI1RmxyRlk4NE12UzhldmdKVjFIazY3c1o5TFdPZS13QTVLUk1yVjcxVnNVbzhWZ3haOFE4YVZ1QnJZRl9yMmt3MFlsbUtjWEdVbWQ0X3BuM2p3M2xYeWV5VTlJeEFwdzFGeWgtWmkyN21FeDdOUm5VcDRYbXJxWDFmeGN5NzlRVlFFX0RTeU13Z3ZKVE5BbG0xbWRZdzMyTnI4YkFaQnhFbG9BZGlGSXNTd2EwSnNhNU9Vd1hEeVkzcnpPaElaYXhIaFVmcVVLS1U2NXZ3RkY1Y0FTRVF4N21tQ2tKTXROMWs5bDF4NmllazlTbHhJUkpxZ1NVcmRoWl85RUYzRVprbTJnbjkxdWVCcFVaQTJtTC0zczVBVnQ1UnRibm4weHFoemdhWE1McmQ4YWdGVkdXVEJNTkI5WDIzUUxrZnAyUWNqSzNMbHhBWF9Ocm1aNGg3azBCZk1YQjlZSlRjcXpTbmh4cTNKbXRBOHVqOTMtQ05UVHNVOEViRWpVRlFudEk1ckdHbGl6Uy1wWS1ocXRaU2ZRNTBBZjc2dnRCSzRRX1R5RG9PVjRiSG9JUE8zYnBVYnpfU2J1dG42LXRFYzJ1NUphRVF4MXM3RW5RYzVWNEloQ1V1VEd1X2lBd283OGNNZHZOdGNmVkdEczc4eExzR2lDVGNTcjlHYnpiMVBOQnl4dGEtdXowN1ZGNkZGZndId2dUZlRSZGNZbTU4WkMxM1llMURSS0NjTGdlVEpHOUYtUjlDNUJBc1RSa0xhNWJaaEVmTkw1VC14RW5JY1ViLW1ReTA5S2FYdDh0R3h1Q1I0eHVGZkZMdWtGblFIYjEwQzFxNkJwcExRQ014UHJRaHRWUmpMNUl5OENkMXNibWdoUzhCeVJpN21ranNrUEYydU5ud3kxSERJWU40QVNLNXp5b29Ic0VUTUFoaHJIa1g0anNrSmd3dXhkdjBvOWRyZHlEbTRFbl82eFE2TG1UMGRqODVUaGVTbjBXc0lha0FBM0VTbllyeWJ2RURDNWFQZTRTNC1sSFhtSnBhbGFNNnhONXMyY1Q3UlJHOHVnTWk1cEdyQ1ZYRFl5TWhDZmNPRl9jZGx6aUVfZFRNN3Z0VDJxSllqOGhNNWRxRHBWZGkxaWplTy1QcmF2X01uUjdKbjdmM2JPTVRBTVRQa2FGb3c2eFhIbzJOOWwxTEhIbGVmVHlSRDgwOU9PMTNxV0k2RFZyV2pUSzVXSGI5eUZ1Vkc4Um1DenJ6QlI3WjdUdG9yUC1xSnBHX3RsMUkwcXdNNmlXek4yQXR2dGZEV3NCSWl4Yk5kbldyNGZtTUExYWM1X1ZvanBfX1B6cWhMdmxFUElDX2RzMmpHR0ZwVWhQV0RpdWNZOUZ0SlplQVdqNnlNTkpaLWRJM2E3U3B4emc2V2MxaHl2QXhPRHpvX1lBb2RmaGFLTUJIOGhoYlFScXZhMEtoeUo2YllFYU1lMXJyTEVRTm5RUFlmSmxQYjhDOUU0UC04Z2FZX2xBWUYzUHNYZzM4RXU5WmRQUlpSdEd4NXEzWlcwVW1mZEhBMGJXcG1STUo4WlNWdVZoWFZpcVlJX2VXMHBCVlhNb1k5TmJ3Ti0yRm1ZVFVzVVZqeUNGV25zZkdqaXJwZkVfQjg5UHFMZ0YtT1FBY3MwYXZNWEpHZW1BRWRyUVNDd2VKRnM5djhuSFA5b2EwQThwTGZFeThVSW56V2ItVXNhNjVXX0dicFR1UnBMV2lIcEZ3Z3ZoelN4X1NEQXFkcG1vZ1JMLWdwTzlfSHptSGxZbUE4N2laN081Zkp3WTRZMGt3c1I3eVVDZHFFRVVUb0Ezdl9FN01xZDk1T0dSQ3pYWDVFeVVVbXM0Zjl0LU5rdEV3dDhiOGllNE9ET2hUUU1XblJOMjRrbGpCck1TcnI2MEw5S3BFY1o4LXZKTmczcWgtbzMzby1HcnBvYk15UTE4TUh3TEM3T3BaYktOWkRaTDVJS2hoMk1zWkdMY2lZTlBUYnNWSHpDbDJ4dkhtSDRJdVBoejEtTXdxSGk0am94bk9TNFJFeWEwZE10SXR1WV9FRFNxQVdQQkF3eXduREFQYjhZeGlXcHdwcUJZRjdVa0lpcEJheXN0dXBKOE9fUW5BckswUDNzendmc3d5QWFtMTVMR0Q3VTl5SEVZbXJEUzdDb0JHMTdoWUF2VG5NczNfSUN6Z0lYSTg4N3htcm5LS053WDZXbXFUcTlOTDBTTVA2ZHVIelUxMEdqVXp6LUU5NldGcGpGejVBNnh4MjhPTy1aM28taWVxRi1nUGZ5RFEyaEhXYmtXZGlCNXNGTGpuRlBZLXNEWGs2al9FamRTdHVmclBrMUVsNF8tY3hKbnZyVkJVUGJZcTUxajdPY3llY3NWWUNRUkd6cG02RUFHZFo4WDhOTXpiM3B1R25scXVDQmNPd3djWGV1MjIwemRHUy1QYncwR0ZveTR2d2JGc1RtblliWFlRX3Y1elgtVjNseklxTFZSaEZhR2wxbUotVEYzbnZILUZLMFJMeDZyTUxIUlhZREJyYkpKTHRwc1ZxaERaZjJaYVZUTWZyMTZuSkItSVE5dXEzM04wM1EueHZqZlV4UHFjNU1GRk1xbjZJYVBEdw==',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'metaData': undefined,
    'mutationInfo': undefined,
    'data': {
      'executionStats': undefined,
      'batch': undefined,
      'encryptedBatch': 'ZXlKaGJHY2lPaUpTVTBFdFQwRkZVQzB5TlRZaUxDSmxibU1pT2lKQk1qVTJSME5OSWl3aWVtbHdJam9pUkVWR0luMC5HR0ZqMUV2WUVFaHBaRDRnUmZDU2lYUS04M3pmbHE4ZnVUa0U1QjdmbENKRURUdm5rbFNNY0hfNXhrV3B5bDRKNlRueDQxNldTci1QVU4tY0tORWZlczkyUjJSY1ZIQndnUWxucWNJOWNpLXA2ZFFkenlhZ1Z6RlFZMjJwdk5BT0JRNEMyU3M4bVhfekJUUzNHcldtY1M1bDhVUnVKUGRFMWpGa09WUDVZaF9nT1pKc2lmT2RqbjhlYUM0SmlxQjVPYl9EWnlpbDVqb0Zhb3NGeWJlaGIzZEx6WHpacUVGQVhZcW45WmJOVVBYNl9TTFdJUUtQNUZOY0V0cWhoMlcwalpYU3N4M2hKNkFXdDVQWG5BZkhQQ212cS1LTlpNcDlSZ0R3TzJhNVF0ZHlmVVl3WGRxZFd0d2lTdDRvY1M4akVaNjFTcGNMVjdpendZWkFhbFliUG1YN2pTaHhjYVVYUldkb2lIcTlFXzQzcmxtTjJVZVEyWDR0R0s1SXlTcy1feFJMLXRIajczakdxZ2pLenJkTEdCYklOTDMtTl9BMU9mUGY3NGdhZDBZNThYdGp5eW1IcThVSGxrS3NEeFVpaEd0a25qVlduZU1EU0s3QzU1RVBFQlpMVnNYenpMdDBzc3hvZkVmTFVQWVpTbjZORFR6UWVheC1mNGJNODVPQzdkbTJXaG1RM29nOEZxMVd4VHRJc2s5SFFWTlhoLXA3a1JuTUV4Ul96YWw5OEZNNmNYWU56cl9zRTl5R0F4aVZsZy05bXQ5by1KbVhYNmtvM19xSUtKeEdWRGFrQVdiaEZKYk1CN3Nvc2F3SmNDdzdEUlBtemprdF9vekVzSklpYTJPaWZmVXNPQUxOWkJOVWtrdVVnLXZQQlNlVi1sbC14Z0dDRW5nS1Z5dy5fbUZneVdOZVhtSDVLLURWLmV3UHFUOVF5QUR0bWZzdks3czRGSmdTeDVPNkZNbjFUcnl0azRKallPVno3MXNjOEF6cHMtUnJvdkNPRGdtMGlDa3dUQ2ZWSXBiSENSaEpjR0ZQQi11SkF2UV9sYnpJSnpVU2t2TWtOZ0M5T0MzMTY2VWN5WlR6YzlGZGwxTWoxbER2SXpMeE9YOFViVjF5TkR0M0owRkMtTjBuUWRnbHF4ZHVxUTBoMXNINk82a2ZVa1ZmSV80NmVfOWVOaDJLVjYyR0ZMcmJDTHJIRFNqZnI0d3MuVC1ISU9tRWNYVnJvQWR2SW9zZEl4Zw==',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'metaData': undefined,
    'mutationInfo': undefined,
    'data': {
      'executionStats': undefined,
      'batch': undefined,
      'encryptedBatch': '',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'metaData': undefined,
    'mutationInfo': undefined,
    'data': {
      'executionStats': undefined,
      'batch': undefined,
      'encryptedBatch': 'ZXlKaGJHY2lPaUpTVTBFdFQwRkZVQzB5TlRZaUxDSmxibU1pT2lKQk1qVTJSME5OSWl3aWVtbHdJam9pUkVWR0luMC5rSDhhZ2xpdlZwb1l0NzFXeWNEOUhsODJKOEQ0eXpBOXFMcURuRVZpTVhBTVZxY0lyandlZ1I5Z3dBdEY1LXZRS2xRQnI3dTFuQS1EalFJT3JyZFlzVTh5Rlg5OGtiUVE0WktYcjcwTGhUZ0dJbVlzTm5ndWlKNDJITVB4alJobTI2dUJlREtOcnlmZmlFOGVodEZRTGlkVTBWa3hHcFZ4cGQ0VWEzY1pGQ2NFMF9odGRndWQ2dGFidGMzeVl2QV9WaDZ5XzZNSl91WGJtczVWYUV4dVZQem00bHdkUFlYSVJDN3c4ZndTLVNfdlJnVUNJSXE4TEVqWWdFY3p0Z0pfQXpCQUFMS0xrZlU5eG5hZnp6Umd3N0k1V000M0pfOGdPNUdMTXFvaXRDR3p6UzVsd2NaZ1F3bVlPTGJIbXFMSTZIVWo5WWRyanNydTVYOUg3OHl6NHNsM1ZpSWx0ektWaWM0V0kxZjNrZnNNc1dCaUU5UHNOSlc1RS11ck1RMWh2ZUhPVzdxTW1vc0VEbE5rdDJfTVNUc253VGp1SlZCNHRnR1k1QUx4U2xVZXJMU2J4WHNDT0hBS0lBLTUwZHZDZmw3XzMyYWhPNnU4YURnMktjang2SmVKcXlPbzdsTllQeDdlR2FFdFpRa0NlSzQtc0t2dXlWaUdjY0lGcmNaVjhlLUtlbTVkSjRtbVRrV01nWVBKVVlodFJFZVZRenVzWHNhZWFQWEFXdnJ0XzdtNWVyTVBaV3UyLXFQMVFndWhuMTRmcWhTY2puaGRwdUJhSkVOLXQwY2VvUG1VYU9tQUtjWHI4Z2pYYnQ0R3RxdjdXZ3pLTEFzYVJ6NVFCOTZlWG1QaUEzd2RvNnZQMFplNlhIdWttZjBWUnZhWkIxeThTdURaTVJXVWNkay4ybjBmaUVsWUxuemVxZFdOLmtZX09fRURpc0lWazVEb21QSEY3NlV6YTRGTE1PX2o3VjZURzhYZUVJZTFnSXdqT1VjWndCMm0taFJobVl2VFh5Z3V0aDJTdTFZMU1hejQ1WFJSaU9zMEM0ZFhtOXlNVkl1alBYLXRvcFNZYWtSRzNXY1hleDBKZDVoakhDRHZaUTZDLUFqUGEtZ1JSeWlybGdfZjhUc1BXYlBVckpJaXRyZ25WbFJ2VWtVb0dVM21QSlFpNlk1VGptUkNFLW9ncVRhdi1STERFS296eDVXV0JCcDM4dlB5bzJKQWNoN0Z4RnFFb2pQYlpIenJIVDljd2FfZlhaVU5yY0hoWEdVQjRwSnpfRW4wcXVSZGxTcGFVRXJYVVdXQUhLUmZDeDNpUXpzeTZUNGw3N3Q3WG9ZcURCc0pzX3UwcTRvS3hJZHZMbXltSUtfMi1ZLTRsVDBjaGV6N1p1WkdfeDZMcmdQVlU3elZ0VkQtUUl2Z3l6NzZYQUY2X3A3Y1lEWXpwRFlmMmNRVkFtbXNzRHBNSDh4RThGVDE0U0w4OGF5TGV3ZUpmUFFBVTVHNlR6XzFUNndyME5aVjRqWU5WT2xUNUNsWWFXWkZmTFFMSzZqM05qZDFRbnA1RXNTc1hqNkhpMm5YQ2VhMWM2TEphLkNjWmVMNlEtcWpNOHNTMlJ0MDZHNnc=',
    },
  },
  {
    'queryId': '9fe12fc0-4756-424d-9354-b34c2850e7ba',
    'status': undefined,
    'metaData': undefined,
    'mutationInfo': undefined,
    'data': {
      'batch': undefined,
      'encryptedBatch': '',
      'executionStats': {
        'timing': {
          'executionTimeNs': 1170414000,
          'compilationTimeNs': 56749358,
        },
        'bytesProcessed': 14993160,
        'recordsProcessed': 217537,
      },
    },
  },
];
