queries = [
["Sample HTTP Data",
"""
t1 = From(table='http_events', select=['time_', 'remote_addr', 'remote_port', 'http_resp_status', 'http_resp_message', 'http_resp_body', 'http_resp_latency_ns']).Range(start='-30s')
t2 = t1.Map(fn=lambda r: {'time_': r.time_,
                       'remote_addr': r.remote_addr,
                       'remote_port': r.remote_port,
                       'http_resp_status': r.http_resp_status,
                       'http_resp_message': r.http_resp_message,
                       'http_resp_body': r.http_resp_body,
                       'http_resp_latency_ms': r.http_resp_latency_ns / 1.0E6})
t3 = t2.Limit(rows=100).Result(name='resp_table')
"""],
["Filter by Service",
"""
t1 = From(table='http_events', select=['time_', 'remote_addr', 'remote_port', 'http_resp_status', 'http_resp_message', 'http_resp_body', 'http_resp_latency_ns']).Range(start='-30s')
t2 = t1.Map(fn=lambda r: {'time_': r.time_,
                       'remote_addr': r.remote_addr,
                       'remote_port': r.remote_port,
                       'http_resp_status': r.http_resp_status,
                       'http_resp_message': r.http_resp_message,
                       'http_resp_body': r.http_resp_body,
                       'http_resp_latency_ms': r.http_resp_latency_ns / 1.0E6})
t3 = t2.Filter(fn=lambda r: r.remote_addr == '::ffff:10.44.10.10').Limit(rows=100).Result(name='resp_table')
"""],
["Count by Service & User",
"""
t1 = From(table='http_events', select=['time_', 'remote_addr', 'remote_port', 'http_resp_status', 'http_resp_message', 'http_resp_body', 'http_resp_latency_ns']).Range(start='-30s')
t2 = t1.Map(fn=lambda r: {'time_': r.time_,
                       'remote_addr': r.remote_addr,
                       'remote_port': r.remote_port,
                       'http_resp_status': r.http_resp_status,
                       'http_resp_message': r.http_resp_message,
                       'http_resp_body': r.http_resp_body,
                       'http_resp_latency_ns': r.http_resp_latency_ns/1E6,
                       'user_id': pl.pluck(r.http_resp_body, 'id')})
t3 = t2.Agg(by=lambda r: [r.remote_addr, r.user_id], fn=lambda r: {'count': pl.count(r.remote_addr)})
t4 = t3.Result(name='resp_table')
"""],
["Data Exfiltration",
"""
t1 = From(table='http_events', select=['time_', 'remote_addr', 'remote_port', 'http_resp_status', 'http_resp_message', 'http_resp_body', 'http_resp_latency_ns']).Range(start='-30s')
t2 = t1.Map(fn=lambda r: {'time_': r.time_,
                       'remote_addr': r.remote_addr,
                       'remote_port': r.remote_port,
                       'http_resp_status': r.http_resp_status,
                       'http_resp_message': r.http_resp_message,
                       'http_resp_body': r.http_resp_body,
                       'http_resp_latency_ns': r.http_resp_latency_ns/1E6,
                       'Alert': r.remote_addr == '::ffff:10.44.10.10'})
t4 = t2.Result(name='resp_table')
"""],
["CPU Stats",
"""
t1 = From(table='process_stats', select=['time_', 'upid', 'major_faults', 'minor_faults', 'cpu_utime_ns', 'cpu_ktime_ns',
                                         'num_threads', 'vsize_bytes', 'rss_bytes', 'rchar_bytes', 'wchar_bytes', 'read_bytes', 'write_bytes'] ).Range(start='-30s')
t2 = t1.Limit(rows=100).Result(name='stats')
"""],
["Network Stats",
"""
t1 = From(table='network_stats', select=['time_', 'pod_id', 'rx_bytes', 'rx_packets', 'rx_errors',
                                         'rx_drops', 'tx_bytes', 'tx_packets', 'tx_errors', 'tx_drops']).Range(start='-30s')
t2 = t1.Limit(rows=100).Result(name='stats')
"""]
]
