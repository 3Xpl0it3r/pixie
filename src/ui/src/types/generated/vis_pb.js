// source: src/shared/vispb/vis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.pl.vispb.Axis', null, global);
goog.exportSymbol('proto.pl.vispb.BarChart', null, global);
goog.exportSymbol('proto.pl.vispb.BarChart.Bar', null, global);
goog.exportSymbol('proto.pl.vispb.Graph', null, global);
goog.exportSymbol('proto.pl.vispb.Graph.AdjacencyList', null, global);
goog.exportSymbol('proto.pl.vispb.Graph.InputCase', null, global);
goog.exportSymbol('proto.pl.vispb.PXType', null, global);
goog.exportSymbol('proto.pl.vispb.Table', null, global);
goog.exportSymbol('proto.pl.vispb.TimeseriesChart', null, global);
goog.exportSymbol('proto.pl.vispb.TimeseriesChart.Timeseries', null, global);
goog.exportSymbol('proto.pl.vispb.TimeseriesChart.Timeseries.Mode', null, global);
goog.exportSymbol('proto.pl.vispb.VegaChart', null, global);
goog.exportSymbol('proto.pl.vispb.Vis', null, global);
goog.exportSymbol('proto.pl.vispb.Vis.Variable', null, global);
goog.exportSymbol('proto.pl.vispb.Widget', null, global);
goog.exportSymbol('proto.pl.vispb.Widget.Func', null, global);
goog.exportSymbol('proto.pl.vispb.Widget.Func.FuncArg', null, global);
goog.exportSymbol('proto.pl.vispb.Widget.Func.FuncArg.InputCase', null, global);
goog.exportSymbol('proto.pl.vispb.Widget.Position', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Vis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pl.vispb.Vis.repeatedFields_, null);
};
goog.inherits(proto.pl.vispb.Vis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Vis.displayName = 'proto.pl.vispb.Vis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Vis.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.Vis.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Vis.Variable.displayName = 'proto.pl.vispb.Vis.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Widget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.Widget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Widget.displayName = 'proto.pl.vispb.Widget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Widget.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.Widget.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Widget.Position.displayName = 'proto.pl.vispb.Widget.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Widget.Func = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pl.vispb.Widget.Func.repeatedFields_, null);
};
goog.inherits(proto.pl.vispb.Widget.Func, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Widget.Func.displayName = 'proto.pl.vispb.Widget.Func';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Widget.Func.FuncArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pl.vispb.Widget.Func.FuncArg.oneofGroups_);
};
goog.inherits(proto.pl.vispb.Widget.Func.FuncArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Widget.Func.FuncArg.displayName = 'proto.pl.vispb.Widget.Func.FuncArg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Axis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.Axis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Axis.displayName = 'proto.pl.vispb.Axis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.BarChart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.BarChart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.BarChart.displayName = 'proto.pl.vispb.BarChart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.BarChart.Bar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.BarChart.Bar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.BarChart.Bar.displayName = 'proto.pl.vispb.BarChart.Bar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.TimeseriesChart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pl.vispb.TimeseriesChart.repeatedFields_, null);
};
goog.inherits(proto.pl.vispb.TimeseriesChart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.TimeseriesChart.displayName = 'proto.pl.vispb.TimeseriesChart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.TimeseriesChart.Timeseries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.TimeseriesChart.Timeseries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.TimeseriesChart.Timeseries.displayName = 'proto.pl.vispb.TimeseriesChart.Timeseries';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.VegaChart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.VegaChart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.VegaChart.displayName = 'proto.pl.vispb.VegaChart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Table = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.Table, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Table.displayName = 'proto.pl.vispb.Table';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.pl.vispb.Graph.oneofGroups_);
};
goog.inherits(proto.pl.vispb.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Graph.displayName = 'proto.pl.vispb.Graph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pl.vispb.Graph.AdjacencyList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pl.vispb.Graph.AdjacencyList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pl.vispb.Graph.AdjacencyList.displayName = 'proto.pl.vispb.Graph.AdjacencyList';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pl.vispb.Vis.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Vis.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Vis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Vis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Vis.toObject = function(includeInstance, msg) {
  var f, obj = {
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.pl.vispb.Vis.Variable.toObject, includeInstance),
    widgetsList: jspb.Message.toObjectList(msg.getWidgetsList(),
    proto.pl.vispb.Widget.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Vis}
 */
proto.pl.vispb.Vis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Vis;
  return proto.pl.vispb.Vis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Vis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Vis}
 */
proto.pl.vispb.Vis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pl.vispb.Vis.Variable;
      reader.readMessage(value,proto.pl.vispb.Vis.Variable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    case 2:
      var value = new proto.pl.vispb.Widget;
      reader.readMessage(value,proto.pl.vispb.Widget.deserializeBinaryFromReader);
      msg.addWidgets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Vis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Vis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Vis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Vis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pl.vispb.Vis.Variable.serializeBinaryToWriter
    );
  }
  f = message.getWidgetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pl.vispb.Widget.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Vis.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Vis.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Vis.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Vis.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    defaultValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Vis.Variable}
 */
proto.pl.vispb.Vis.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Vis.Variable;
  return proto.pl.vispb.Vis.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Vis.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Vis.Variable}
 */
proto.pl.vispb.Vis.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.pl.vispb.PXType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Vis.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Vis.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Vis.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Vis.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDefaultValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pl.vispb.Vis.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Vis.Variable} returns this
 */
proto.pl.vispb.Vis.Variable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PXType type = 2;
 * @return {!proto.pl.vispb.PXType}
 */
proto.pl.vispb.Vis.Variable.prototype.getType = function() {
  return /** @type {!proto.pl.vispb.PXType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pl.vispb.PXType} value
 * @return {!proto.pl.vispb.Vis.Variable} returns this
 */
proto.pl.vispb.Vis.Variable.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string default_value = 3;
 * @return {string}
 */
proto.pl.vispb.Vis.Variable.prototype.getDefaultValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Vis.Variable} returns this
 */
proto.pl.vispb.Vis.Variable.prototype.setDefaultValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.pl.vispb.Vis.Variable.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Vis.Variable} returns this
 */
proto.pl.vispb.Vis.Variable.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Variable variables = 1;
 * @return {!Array<!proto.pl.vispb.Vis.Variable>}
 */
proto.pl.vispb.Vis.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.pl.vispb.Vis.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pl.vispb.Vis.Variable, 1));
};


/**
 * @param {!Array<!proto.pl.vispb.Vis.Variable>} value
 * @return {!proto.pl.vispb.Vis} returns this
*/
proto.pl.vispb.Vis.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pl.vispb.Vis.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pl.vispb.Vis.Variable}
 */
proto.pl.vispb.Vis.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pl.vispb.Vis.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pl.vispb.Vis} returns this
 */
proto.pl.vispb.Vis.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};


/**
 * repeated Widget widgets = 2;
 * @return {!Array<!proto.pl.vispb.Widget>}
 */
proto.pl.vispb.Vis.prototype.getWidgetsList = function() {
  return /** @type{!Array<!proto.pl.vispb.Widget>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pl.vispb.Widget, 2));
};


/**
 * @param {!Array<!proto.pl.vispb.Widget>} value
 * @return {!proto.pl.vispb.Vis} returns this
*/
proto.pl.vispb.Vis.prototype.setWidgetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pl.vispb.Widget=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pl.vispb.Widget}
 */
proto.pl.vispb.Vis.prototype.addWidgets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pl.vispb.Widget, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pl.vispb.Vis} returns this
 */
proto.pl.vispb.Vis.prototype.clearWidgetsList = function() {
  return this.setWidgetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Widget.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Widget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Widget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Widget.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    position: (f = msg.getPosition()) && proto.pl.vispb.Widget.Position.toObject(includeInstance, f),
    func: (f = msg.getFunc()) && proto.pl.vispb.Widget.Func.toObject(includeInstance, f),
    displaySpec: (f = msg.getDisplaySpec()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Widget}
 */
proto.pl.vispb.Widget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Widget;
  return proto.pl.vispb.Widget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Widget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Widget}
 */
proto.pl.vispb.Widget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.pl.vispb.Widget.Position;
      reader.readMessage(value,proto.pl.vispb.Widget.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = new proto.pl.vispb.Widget.Func;
      reader.readMessage(value,proto.pl.vispb.Widget.Func.deserializeBinaryFromReader);
      msg.setFunc(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setDisplaySpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Widget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Widget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Widget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Widget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pl.vispb.Widget.Position.serializeBinaryToWriter
    );
  }
  f = message.getFunc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pl.vispb.Widget.Func.serializeBinaryToWriter
    );
  }
  f = message.getDisplaySpec();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Widget.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Widget.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Widget.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Widget.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    w: jspb.Message.getFieldWithDefault(msg, 3, 0),
    h: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Widget.Position}
 */
proto.pl.vispb.Widget.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Widget.Position;
  return proto.pl.vispb.Widget.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Widget.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Widget.Position}
 */
proto.pl.vispb.Widget.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setW(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setH(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Widget.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Widget.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Widget.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Widget.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getW();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getH();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.pl.vispb.Widget.Position.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pl.vispb.Widget.Position} returns this
 */
proto.pl.vispb.Widget.Position.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.pl.vispb.Widget.Position.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pl.vispb.Widget.Position} returns this
 */
proto.pl.vispb.Widget.Position.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 w = 3;
 * @return {number}
 */
proto.pl.vispb.Widget.Position.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pl.vispb.Widget.Position} returns this
 */
proto.pl.vispb.Widget.Position.prototype.setW = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 h = 4;
 * @return {number}
 */
proto.pl.vispb.Widget.Position.prototype.getH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pl.vispb.Widget.Position} returns this
 */
proto.pl.vispb.Widget.Position.prototype.setH = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pl.vispb.Widget.Func.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Widget.Func.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Widget.Func.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Widget.Func} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Widget.Func.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.pl.vispb.Widget.Func.FuncArg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Widget.Func}
 */
proto.pl.vispb.Widget.Func.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Widget.Func;
  return proto.pl.vispb.Widget.Func.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Widget.Func} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Widget.Func}
 */
proto.pl.vispb.Widget.Func.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.pl.vispb.Widget.Func.FuncArg;
      reader.readMessage(value,proto.pl.vispb.Widget.Func.FuncArg.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Widget.Func.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Widget.Func.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Widget.Func} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Widget.Func.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pl.vispb.Widget.Func.FuncArg.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pl.vispb.Widget.Func.FuncArg.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.pl.vispb.Widget.Func.FuncArg.InputCase = {
  INPUT_NOT_SET: 0,
  VALUE: 2,
  VARIABLE: 3
};

/**
 * @return {proto.pl.vispb.Widget.Func.FuncArg.InputCase}
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.getInputCase = function() {
  return /** @type {proto.pl.vispb.Widget.Func.FuncArg.InputCase} */(jspb.Message.computeOneofCase(this, proto.pl.vispb.Widget.Func.FuncArg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Widget.Func.FuncArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Widget.Func.FuncArg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Widget.Func.FuncArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    variable: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Widget.Func.FuncArg}
 */
proto.pl.vispb.Widget.Func.FuncArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Widget.Func.FuncArg;
  return proto.pl.vispb.Widget.Func.FuncArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Widget.Func.FuncArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Widget.Func.FuncArg}
 */
proto.pl.vispb.Widget.Func.FuncArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Widget.Func.FuncArg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Widget.Func.FuncArg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Widget.Func.FuncArg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Widget.Func.FuncArg} returns this
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Widget.Func.FuncArg} returns this
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.setValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.pl.vispb.Widget.Func.FuncArg.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pl.vispb.Widget.Func.FuncArg} returns this
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.clearValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.pl.vispb.Widget.Func.FuncArg.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string variable = 3;
 * @return {string}
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.getVariable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Widget.Func.FuncArg} returns this
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.setVariable = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.pl.vispb.Widget.Func.FuncArg.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pl.vispb.Widget.Func.FuncArg} returns this
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.clearVariable = function() {
  return jspb.Message.setOneofField(this, 3, proto.pl.vispb.Widget.Func.FuncArg.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.Widget.Func.FuncArg.prototype.hasVariable = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pl.vispb.Widget.Func.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Widget.Func} returns this
 */
proto.pl.vispb.Widget.Func.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated FuncArg args = 2;
 * @return {!Array<!proto.pl.vispb.Widget.Func.FuncArg>}
 */
proto.pl.vispb.Widget.Func.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.pl.vispb.Widget.Func.FuncArg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pl.vispb.Widget.Func.FuncArg, 2));
};


/**
 * @param {!Array<!proto.pl.vispb.Widget.Func.FuncArg>} value
 * @return {!proto.pl.vispb.Widget.Func} returns this
*/
proto.pl.vispb.Widget.Func.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pl.vispb.Widget.Func.FuncArg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pl.vispb.Widget.Func.FuncArg}
 */
proto.pl.vispb.Widget.Func.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pl.vispb.Widget.Func.FuncArg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pl.vispb.Widget.Func} returns this
 */
proto.pl.vispb.Widget.Func.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pl.vispb.Widget.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Widget} returns this
 */
proto.pl.vispb.Widget.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Position position = 2;
 * @return {?proto.pl.vispb.Widget.Position}
 */
proto.pl.vispb.Widget.prototype.getPosition = function() {
  return /** @type{?proto.pl.vispb.Widget.Position} */ (
    jspb.Message.getWrapperField(this, proto.pl.vispb.Widget.Position, 2));
};


/**
 * @param {?proto.pl.vispb.Widget.Position|undefined} value
 * @return {!proto.pl.vispb.Widget} returns this
*/
proto.pl.vispb.Widget.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pl.vispb.Widget} returns this
 */
proto.pl.vispb.Widget.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.Widget.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Func func = 3;
 * @return {?proto.pl.vispb.Widget.Func}
 */
proto.pl.vispb.Widget.prototype.getFunc = function() {
  return /** @type{?proto.pl.vispb.Widget.Func} */ (
    jspb.Message.getWrapperField(this, proto.pl.vispb.Widget.Func, 3));
};


/**
 * @param {?proto.pl.vispb.Widget.Func|undefined} value
 * @return {!proto.pl.vispb.Widget} returns this
*/
proto.pl.vispb.Widget.prototype.setFunc = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pl.vispb.Widget} returns this
 */
proto.pl.vispb.Widget.prototype.clearFunc = function() {
  return this.setFunc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.Widget.prototype.hasFunc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Any display_spec = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.pl.vispb.Widget.prototype.getDisplaySpec = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.pl.vispb.Widget} returns this
*/
proto.pl.vispb.Widget.prototype.setDisplaySpec = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pl.vispb.Widget} returns this
 */
proto.pl.vispb.Widget.prototype.clearDisplaySpec = function() {
  return this.setDisplaySpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.Widget.prototype.hasDisplaySpec = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Axis.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Axis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Axis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Axis.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Axis}
 */
proto.pl.vispb.Axis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Axis;
  return proto.pl.vispb.Axis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Axis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Axis}
 */
proto.pl.vispb.Axis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Axis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Axis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Axis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Axis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.pl.vispb.Axis.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Axis} returns this
 */
proto.pl.vispb.Axis.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.BarChart.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.BarChart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.BarChart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.BarChart.toObject = function(includeInstance, msg) {
  var f, obj = {
    bar: (f = msg.getBar()) && proto.pl.vispb.BarChart.Bar.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    xAxis: (f = msg.getXAxis()) && proto.pl.vispb.Axis.toObject(includeInstance, f),
    yAxis: (f = msg.getYAxis()) && proto.pl.vispb.Axis.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.BarChart}
 */
proto.pl.vispb.BarChart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.BarChart;
  return proto.pl.vispb.BarChart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.BarChart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.BarChart}
 */
proto.pl.vispb.BarChart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pl.vispb.BarChart.Bar;
      reader.readMessage(value,proto.pl.vispb.BarChart.Bar.deserializeBinaryFromReader);
      msg.setBar(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = new proto.pl.vispb.Axis;
      reader.readMessage(value,proto.pl.vispb.Axis.deserializeBinaryFromReader);
      msg.setXAxis(value);
      break;
    case 4:
      var value = new proto.pl.vispb.Axis;
      reader.readMessage(value,proto.pl.vispb.Axis.deserializeBinaryFromReader);
      msg.setYAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.BarChart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.BarChart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.BarChart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.BarChart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBar();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pl.vispb.BarChart.Bar.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getXAxis();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pl.vispb.Axis.serializeBinaryToWriter
    );
  }
  f = message.getYAxis();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pl.vispb.Axis.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.BarChart.Bar.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.BarChart.Bar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.BarChart.Bar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.BarChart.Bar.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stackBy: jspb.Message.getFieldWithDefault(msg, 3, ""),
    groupBy: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.BarChart.Bar}
 */
proto.pl.vispb.BarChart.Bar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.BarChart.Bar;
  return proto.pl.vispb.BarChart.Bar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.BarChart.Bar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.BarChart.Bar}
 */
proto.pl.vispb.BarChart.Bar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStackBy(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.BarChart.Bar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.BarChart.Bar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.BarChart.Bar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.BarChart.Bar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStackBy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroupBy();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.pl.vispb.BarChart.Bar.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.BarChart.Bar} returns this
 */
proto.pl.vispb.BarChart.Bar.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.pl.vispb.BarChart.Bar.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.BarChart.Bar} returns this
 */
proto.pl.vispb.BarChart.Bar.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string stack_by = 3;
 * @return {string}
 */
proto.pl.vispb.BarChart.Bar.prototype.getStackBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.BarChart.Bar} returns this
 */
proto.pl.vispb.BarChart.Bar.prototype.setStackBy = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string group_by = 4;
 * @return {string}
 */
proto.pl.vispb.BarChart.Bar.prototype.getGroupBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.BarChart.Bar} returns this
 */
proto.pl.vispb.BarChart.Bar.prototype.setGroupBy = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Bar bar = 1;
 * @return {?proto.pl.vispb.BarChart.Bar}
 */
proto.pl.vispb.BarChart.prototype.getBar = function() {
  return /** @type{?proto.pl.vispb.BarChart.Bar} */ (
    jspb.Message.getWrapperField(this, proto.pl.vispb.BarChart.Bar, 1));
};


/**
 * @param {?proto.pl.vispb.BarChart.Bar|undefined} value
 * @return {!proto.pl.vispb.BarChart} returns this
*/
proto.pl.vispb.BarChart.prototype.setBar = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pl.vispb.BarChart} returns this
 */
proto.pl.vispb.BarChart.prototype.clearBar = function() {
  return this.setBar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.BarChart.prototype.hasBar = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.pl.vispb.BarChart.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.BarChart} returns this
 */
proto.pl.vispb.BarChart.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Axis x_axis = 3;
 * @return {?proto.pl.vispb.Axis}
 */
proto.pl.vispb.BarChart.prototype.getXAxis = function() {
  return /** @type{?proto.pl.vispb.Axis} */ (
    jspb.Message.getWrapperField(this, proto.pl.vispb.Axis, 3));
};


/**
 * @param {?proto.pl.vispb.Axis|undefined} value
 * @return {!proto.pl.vispb.BarChart} returns this
*/
proto.pl.vispb.BarChart.prototype.setXAxis = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pl.vispb.BarChart} returns this
 */
proto.pl.vispb.BarChart.prototype.clearXAxis = function() {
  return this.setXAxis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.BarChart.prototype.hasXAxis = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Axis y_axis = 4;
 * @return {?proto.pl.vispb.Axis}
 */
proto.pl.vispb.BarChart.prototype.getYAxis = function() {
  return /** @type{?proto.pl.vispb.Axis} */ (
    jspb.Message.getWrapperField(this, proto.pl.vispb.Axis, 4));
};


/**
 * @param {?proto.pl.vispb.Axis|undefined} value
 * @return {!proto.pl.vispb.BarChart} returns this
*/
proto.pl.vispb.BarChart.prototype.setYAxis = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pl.vispb.BarChart} returns this
 */
proto.pl.vispb.BarChart.prototype.clearYAxis = function() {
  return this.setYAxis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.BarChart.prototype.hasYAxis = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pl.vispb.TimeseriesChart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.TimeseriesChart.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.TimeseriesChart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.TimeseriesChart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.TimeseriesChart.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeseriesList: jspb.Message.toObjectList(msg.getTimeseriesList(),
    proto.pl.vispb.TimeseriesChart.Timeseries.toObject, includeInstance),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    xAxis: (f = msg.getXAxis()) && proto.pl.vispb.Axis.toObject(includeInstance, f),
    yAxis: (f = msg.getYAxis()) && proto.pl.vispb.Axis.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.TimeseriesChart}
 */
proto.pl.vispb.TimeseriesChart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.TimeseriesChart;
  return proto.pl.vispb.TimeseriesChart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.TimeseriesChart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.TimeseriesChart}
 */
proto.pl.vispb.TimeseriesChart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pl.vispb.TimeseriesChart.Timeseries;
      reader.readMessage(value,proto.pl.vispb.TimeseriesChart.Timeseries.deserializeBinaryFromReader);
      msg.addTimeseries(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = new proto.pl.vispb.Axis;
      reader.readMessage(value,proto.pl.vispb.Axis.deserializeBinaryFromReader);
      msg.setXAxis(value);
      break;
    case 4:
      var value = new proto.pl.vispb.Axis;
      reader.readMessage(value,proto.pl.vispb.Axis.deserializeBinaryFromReader);
      msg.setYAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.TimeseriesChart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.TimeseriesChart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.TimeseriesChart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.TimeseriesChart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeseriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pl.vispb.TimeseriesChart.Timeseries.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getXAxis();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pl.vispb.Axis.serializeBinaryToWriter
    );
  }
  f = message.getYAxis();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pl.vispb.Axis.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.TimeseriesChart.Timeseries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.TimeseriesChart.Timeseries} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.TimeseriesChart.Timeseries.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    series: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stackBySeries: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.TimeseriesChart.Timeseries}
 */
proto.pl.vispb.TimeseriesChart.Timeseries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.TimeseriesChart.Timeseries;
  return proto.pl.vispb.TimeseriesChart.Timeseries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.TimeseriesChart.Timeseries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.TimeseriesChart.Timeseries}
 */
proto.pl.vispb.TimeseriesChart.Timeseries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeries(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStackBySeries(value);
      break;
    case 4:
      var value = /** @type {!proto.pl.vispb.TimeseriesChart.Timeseries.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.TimeseriesChart.Timeseries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.TimeseriesChart.Timeseries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.TimeseriesChart.Timeseries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeries();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStackBySeries();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pl.vispb.TimeseriesChart.Timeseries.Mode = {
  MODE_UNKNOWN: 0,
  MODE_BAR: 1,
  MODE_LINE: 2,
  MODE_POINT: 3
};

/**
 * optional string value = 1;
 * @return {string}
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.TimeseriesChart.Timeseries} returns this
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string series = 2;
 * @return {string}
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.getSeries = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.TimeseriesChart.Timeseries} returns this
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.setSeries = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool stack_by_series = 3;
 * @return {boolean}
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.getStackBySeries = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pl.vispb.TimeseriesChart.Timeseries} returns this
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.setStackBySeries = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Mode mode = 4;
 * @return {!proto.pl.vispb.TimeseriesChart.Timeseries.Mode}
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.getMode = function() {
  return /** @type {!proto.pl.vispb.TimeseriesChart.Timeseries.Mode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.pl.vispb.TimeseriesChart.Timeseries.Mode} value
 * @return {!proto.pl.vispb.TimeseriesChart.Timeseries} returns this
 */
proto.pl.vispb.TimeseriesChart.Timeseries.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated Timeseries timeseries = 1;
 * @return {!Array<!proto.pl.vispb.TimeseriesChart.Timeseries>}
 */
proto.pl.vispb.TimeseriesChart.prototype.getTimeseriesList = function() {
  return /** @type{!Array<!proto.pl.vispb.TimeseriesChart.Timeseries>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pl.vispb.TimeseriesChart.Timeseries, 1));
};


/**
 * @param {!Array<!proto.pl.vispb.TimeseriesChart.Timeseries>} value
 * @return {!proto.pl.vispb.TimeseriesChart} returns this
*/
proto.pl.vispb.TimeseriesChart.prototype.setTimeseriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pl.vispb.TimeseriesChart.Timeseries=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pl.vispb.TimeseriesChart.Timeseries}
 */
proto.pl.vispb.TimeseriesChart.prototype.addTimeseries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pl.vispb.TimeseriesChart.Timeseries, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pl.vispb.TimeseriesChart} returns this
 */
proto.pl.vispb.TimeseriesChart.prototype.clearTimeseriesList = function() {
  return this.setTimeseriesList([]);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.pl.vispb.TimeseriesChart.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.TimeseriesChart} returns this
 */
proto.pl.vispb.TimeseriesChart.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Axis x_axis = 3;
 * @return {?proto.pl.vispb.Axis}
 */
proto.pl.vispb.TimeseriesChart.prototype.getXAxis = function() {
  return /** @type{?proto.pl.vispb.Axis} */ (
    jspb.Message.getWrapperField(this, proto.pl.vispb.Axis, 3));
};


/**
 * @param {?proto.pl.vispb.Axis|undefined} value
 * @return {!proto.pl.vispb.TimeseriesChart} returns this
*/
proto.pl.vispb.TimeseriesChart.prototype.setXAxis = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pl.vispb.TimeseriesChart} returns this
 */
proto.pl.vispb.TimeseriesChart.prototype.clearXAxis = function() {
  return this.setXAxis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.TimeseriesChart.prototype.hasXAxis = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Axis y_axis = 4;
 * @return {?proto.pl.vispb.Axis}
 */
proto.pl.vispb.TimeseriesChart.prototype.getYAxis = function() {
  return /** @type{?proto.pl.vispb.Axis} */ (
    jspb.Message.getWrapperField(this, proto.pl.vispb.Axis, 4));
};


/**
 * @param {?proto.pl.vispb.Axis|undefined} value
 * @return {!proto.pl.vispb.TimeseriesChart} returns this
*/
proto.pl.vispb.TimeseriesChart.prototype.setYAxis = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pl.vispb.TimeseriesChart} returns this
 */
proto.pl.vispb.TimeseriesChart.prototype.clearYAxis = function() {
  return this.setYAxis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.TimeseriesChart.prototype.hasYAxis = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.VegaChart.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.VegaChart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.VegaChart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.VegaChart.toObject = function(includeInstance, msg) {
  var f, obj = {
    spec: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.VegaChart}
 */
proto.pl.vispb.VegaChart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.VegaChart;
  return proto.pl.vispb.VegaChart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.VegaChart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.VegaChart}
 */
proto.pl.vispb.VegaChart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.VegaChart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.VegaChart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.VegaChart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.VegaChart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string spec = 1;
 * @return {string}
 */
proto.pl.vispb.VegaChart.prototype.getSpec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.VegaChart} returns this
 */
proto.pl.vispb.VegaChart.prototype.setSpec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Table.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Table.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Table} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Table.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Table}
 */
proto.pl.vispb.Table.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Table;
  return proto.pl.vispb.Table.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Table} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Table}
 */
proto.pl.vispb.Table.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Table.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Table.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Table} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Table.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.pl.vispb.Graph.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.pl.vispb.Graph.InputCase = {
  INPUT_NOT_SET: 0,
  DOT_COLUMN: 1,
  ADJACENCY_LIST: 2
};

/**
 * @return {proto.pl.vispb.Graph.InputCase}
 */
proto.pl.vispb.Graph.prototype.getInputCase = function() {
  return /** @type {proto.pl.vispb.Graph.InputCase} */(jspb.Message.computeOneofCase(this, proto.pl.vispb.Graph.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Graph.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Graph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    dotColumn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    adjacencyList: (f = msg.getAdjacencyList()) && proto.pl.vispb.Graph.AdjacencyList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Graph}
 */
proto.pl.vispb.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Graph;
  return proto.pl.vispb.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Graph}
 */
proto.pl.vispb.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDotColumn(value);
      break;
    case 2:
      var value = new proto.pl.vispb.Graph.AdjacencyList;
      reader.readMessage(value,proto.pl.vispb.Graph.AdjacencyList.deserializeBinaryFromReader);
      msg.setAdjacencyList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Graph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Graph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAdjacencyList();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pl.vispb.Graph.AdjacencyList.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pl.vispb.Graph.AdjacencyList.prototype.toObject = function(opt_includeInstance) {
  return proto.pl.vispb.Graph.AdjacencyList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pl.vispb.Graph.AdjacencyList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Graph.AdjacencyList.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromColumn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toColumn: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pl.vispb.Graph.AdjacencyList}
 */
proto.pl.vispb.Graph.AdjacencyList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pl.vispb.Graph.AdjacencyList;
  return proto.pl.vispb.Graph.AdjacencyList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pl.vispb.Graph.AdjacencyList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pl.vispb.Graph.AdjacencyList}
 */
proto.pl.vispb.Graph.AdjacencyList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromColumn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToColumn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pl.vispb.Graph.AdjacencyList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pl.vispb.Graph.AdjacencyList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pl.vispb.Graph.AdjacencyList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pl.vispb.Graph.AdjacencyList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromColumn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToColumn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string from_column = 1;
 * @return {string}
 */
proto.pl.vispb.Graph.AdjacencyList.prototype.getFromColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Graph.AdjacencyList} returns this
 */
proto.pl.vispb.Graph.AdjacencyList.prototype.setFromColumn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to_column = 2;
 * @return {string}
 */
proto.pl.vispb.Graph.AdjacencyList.prototype.getToColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Graph.AdjacencyList} returns this
 */
proto.pl.vispb.Graph.AdjacencyList.prototype.setToColumn = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dot_column = 1;
 * @return {string}
 */
proto.pl.vispb.Graph.prototype.getDotColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pl.vispb.Graph} returns this
 */
proto.pl.vispb.Graph.prototype.setDotColumn = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.pl.vispb.Graph.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pl.vispb.Graph} returns this
 */
proto.pl.vispb.Graph.prototype.clearDotColumn = function() {
  return jspb.Message.setOneofField(this, 1, proto.pl.vispb.Graph.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.Graph.prototype.hasDotColumn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AdjacencyList adjacency_list = 2;
 * @return {?proto.pl.vispb.Graph.AdjacencyList}
 */
proto.pl.vispb.Graph.prototype.getAdjacencyList = function() {
  return /** @type{?proto.pl.vispb.Graph.AdjacencyList} */ (
    jspb.Message.getWrapperField(this, proto.pl.vispb.Graph.AdjacencyList, 2));
};


/**
 * @param {?proto.pl.vispb.Graph.AdjacencyList|undefined} value
 * @return {!proto.pl.vispb.Graph} returns this
*/
proto.pl.vispb.Graph.prototype.setAdjacencyList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.pl.vispb.Graph.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pl.vispb.Graph} returns this
 */
proto.pl.vispb.Graph.prototype.clearAdjacencyList = function() {
  return this.setAdjacencyList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pl.vispb.Graph.prototype.hasAdjacencyList = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.pl.vispb.PXType = {
  PX_UNKNOWN: 0,
  PX_BOOLEAN: 1,
  PX_INT64: 2,
  PX_FLOAT64: 3,
  PX_STRING: 4,
  PX_SERVICE: 1000
};

goog.object.extend(exports, proto.pl.vispb);
