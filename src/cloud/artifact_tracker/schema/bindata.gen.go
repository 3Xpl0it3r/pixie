// Code generated by go-bindata.
// sources:
// 000001_create_artifact_tables.down.sql
// 000001_create_artifact_tables.up.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_artifact_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2c\x2a\xc9\x4c\x4b\x4c\x2e\x89\x4f\xce\x48\xcc\x4b\x4f\xcd\xc9\x4f\x2f\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xc2\xab\x03\x43\x5d\x64\x00\x56\x83\x4b\x2a\x0b\x52\x11\x4a\x01\x01\x00\x00\xff\xff\x2a\xeb\xa5\xc9\x85\x00\x00\x00")

func _000001_create_artifact_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_artifact_tablesDownSql,
		"000001_create_artifact_tables.down.sql",
	)
}

func _000001_create_artifact_tablesDownSql() (*asset, error) {
	bytes, err := _000001_create_artifact_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_artifact_tables.down.sql", size: 133, mode: os.FileMode(436), modTime: time.Unix(1571258088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_create_artifact_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x8f\xd3\x30\x14\x84\xef\xf9\x15\xa3\xbd\x6c\x2a\xa5\x88\x43\xe1\xc2\xc9\xb4\x2e\x58\xdb\x38\xc5\x71\xd8\x56\x08\x59\xde\xc4\x34\x96\x92\xb8\x8a\x9d\x4a\xfd\xf7\xa8\x69\xa1\x2d\x08\x01\xbe\xce\x7b\xfe\xe6\xcd\xcc\x05\x25\x92\x82\x6e\x24\xe5\x39\xcb\x38\xd8\x12\x3c\x93\xa0\x1b\x96\xcb\x1c\x0f\xc3\x60\xab\xa9\xf3\x7e\xff\xf0\x2e\x8a\x2e\xc3\x72\xbb\xa6\xd0\x7d\xb0\xdf\x74\x19\x54\x38\xee\x0d\x48\x0e\xca\x8b\x34\x7e\x2c\xf8\x13\xcf\x9e\xf9\x63\x12\xe1\x6f\xef\x71\xc5\x78\xb1\x51\x24\x5d\xbc\x9d\xfd\xd3\xfc\x82\x88\x67\xc6\xff\x63\x61\x9e\x71\x49\x18\xa7\x42\xe5\x54\xaa\x5b\xdc\xe4\xe6\x1a\xf2\x7e\x75\x3d\xc7\x23\x8e\x00\x5b\xa1\x28\xd8\x02\x05\x67\x9f\x0a\x8a\x05\x5d\x92\x62\x25\x71\x0a\x43\xed\x4c\x67\x7a\x1d\x8c\x3a\xcc\xe2\xc9\xc9\xc5\x74\x7a\x0d\xa3\xd3\xad\x81\xf5\xd0\x65\x18\x74\xd3\x1c\x51\x0d\xfb\xc6\x96\x3a\x98\x2a\xc1\xcb\x10\x50\x39\xe3\xd1\xb9\x00\x6f\x4c\x8b\xce\x94\xc6\x7b\xdd\x1f\x11\x1c\xf6\x43\xd3\xc0\x06\xb8\x21\x9c\x7f\xb5\x5d\x70\xd0\x9d\x0b\xb5\xe9\x11\xf4\x4b\x63\x5e\x45\xf8\x85\xf5\x99\x88\xf9\x47\x22\xe2\x37\xaf\x47\x2f\x65\x6f\x4e\xd6\x82\x6d\x0d\x24\x4b\x69\x2e\x49\xba\x1e\x05\xd7\xb6\x36\xa8\x5a\xfb\x1a\x65\xad\xfb\x78\x76\x5e\x38\x98\xde\x5b\xd7\x29\x1f\x7a\x1c\x74\x3f\x4a\x97\xbf\xf4\x41\xdb\xe6\x44\x55\xd7\x70\xee\x5a\xff\xf2\x35\x89\x22\x60\x2d\x58\x4a\xc4\x16\x4f\x74\x1b\xdb\x2a\xb9\x37\x98\xdc\x12\x26\xd1\x1f\x73\x57\x65\xad\xbb\x9d\x69\xdc\xee\xdc\xc0\xb5\x10\x75\x29\x63\x2c\xfc\xe7\x14\x24\xdd\xc8\x11\x7f\xc7\xbf\xdd\x1a\x8f\xc0\x32\x13\x94\x7d\xe0\xbf\xab\x10\x74\x49\x05\xe5\x73\x9a\x83\xfc\x10\x62\x5b\x8d\x26\xbf\x07\x00\x00\xff\xff\x3e\x5e\x8e\x46\x17\x03\x00\x00")

func _000001_create_artifact_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_artifact_tablesUpSql,
		"000001_create_artifact_tables.up.sql",
	)
}

func _000001_create_artifact_tablesUpSql() (*asset, error) {
	bytes, err := _000001_create_artifact_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_artifact_tables.up.sql", size: 791, mode: os.FileMode(436), modTime: time.Unix(1571260959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_artifact_tables.down.sql": _000001_create_artifact_tablesDownSql,
	"000001_create_artifact_tables.up.sql": _000001_create_artifact_tablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_artifact_tables.down.sql": &bintree{_000001_create_artifact_tablesDownSql, map[string]*bintree{}},
	"000001_create_artifact_tables.up.sql": &bintree{_000001_create_artifact_tablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

