// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/site_manager/sitemanagerpb/service.proto

package sitemanagerpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SiteInfo struct {
	SiteName string       `protobuf:"bytes,1,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	OrgID    *proto1.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *SiteInfo) Reset()      { *m = SiteInfo{} }
func (*SiteInfo) ProtoMessage() {}
func (*SiteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc3521a7def8121, []int{0}
}
func (m *SiteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SiteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SiteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteInfo.Merge(m, src)
}
func (m *SiteInfo) XXX_Size() int {
	return m.Size()
}
func (m *SiteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SiteInfo proto.InternalMessageInfo

func (m *SiteInfo) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *SiteInfo) GetOrgID() *proto1.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type GetSiteByNameRequest struct {
	SiteName string `protobuf:"bytes,1,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
}

func (m *GetSiteByNameRequest) Reset()      { *m = GetSiteByNameRequest{} }
func (*GetSiteByNameRequest) ProtoMessage() {}
func (*GetSiteByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc3521a7def8121, []int{1}
}
func (m *GetSiteByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSiteByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSiteByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSiteByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSiteByNameRequest.Merge(m, src)
}
func (m *GetSiteByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSiteByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSiteByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSiteByNameRequest proto.InternalMessageInfo

func (m *GetSiteByNameRequest) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

type IsSiteAvailableRequest struct {
	SiteName string `protobuf:"bytes,1,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
}

func (m *IsSiteAvailableRequest) Reset()      { *m = IsSiteAvailableRequest{} }
func (*IsSiteAvailableRequest) ProtoMessage() {}
func (*IsSiteAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc3521a7def8121, []int{2}
}
func (m *IsSiteAvailableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsSiteAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsSiteAvailableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsSiteAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsSiteAvailableRequest.Merge(m, src)
}
func (m *IsSiteAvailableRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsSiteAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsSiteAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsSiteAvailableRequest proto.InternalMessageInfo

func (m *IsSiteAvailableRequest) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

type IsSiteAvailableResponse struct {
	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
}

func (m *IsSiteAvailableResponse) Reset()      { *m = IsSiteAvailableResponse{} }
func (*IsSiteAvailableResponse) ProtoMessage() {}
func (*IsSiteAvailableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc3521a7def8121, []int{3}
}
func (m *IsSiteAvailableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsSiteAvailableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsSiteAvailableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsSiteAvailableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsSiteAvailableResponse.Merge(m, src)
}
func (m *IsSiteAvailableResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsSiteAvailableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsSiteAvailableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsSiteAvailableResponse proto.InternalMessageInfo

func (m *IsSiteAvailableResponse) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

type RegisterSiteRequest struct {
	SiteName string       `protobuf:"bytes,1,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	OrgID    *proto1.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *RegisterSiteRequest) Reset()      { *m = RegisterSiteRequest{} }
func (*RegisterSiteRequest) ProtoMessage() {}
func (*RegisterSiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc3521a7def8121, []int{4}
}
func (m *RegisterSiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterSiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterSiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterSiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSiteRequest.Merge(m, src)
}
func (m *RegisterSiteRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterSiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSiteRequest proto.InternalMessageInfo

func (m *RegisterSiteRequest) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *RegisterSiteRequest) GetOrgID() *proto1.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type RegisterSiteResponse struct {
	SiteRegistered bool `protobuf:"varint,1,opt,name=site_registered,json=siteRegistered,proto3" json:"site_registered,omitempty"`
}

func (m *RegisterSiteResponse) Reset()      { *m = RegisterSiteResponse{} }
func (*RegisterSiteResponse) ProtoMessage() {}
func (*RegisterSiteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc3521a7def8121, []int{5}
}
func (m *RegisterSiteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterSiteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterSiteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterSiteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSiteResponse.Merge(m, src)
}
func (m *RegisterSiteResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterSiteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSiteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSiteResponse proto.InternalMessageInfo

func (m *RegisterSiteResponse) GetSiteRegistered() bool {
	if m != nil {
		return m.SiteRegistered
	}
	return false
}

func init() {
	proto.RegisterType((*SiteInfo)(nil), "pl.services.SiteInfo")
	proto.RegisterType((*GetSiteByNameRequest)(nil), "pl.services.GetSiteByNameRequest")
	proto.RegisterType((*IsSiteAvailableRequest)(nil), "pl.services.IsSiteAvailableRequest")
	proto.RegisterType((*IsSiteAvailableResponse)(nil), "pl.services.IsSiteAvailableResponse")
	proto.RegisterType((*RegisterSiteRequest)(nil), "pl.services.RegisterSiteRequest")
	proto.RegisterType((*RegisterSiteResponse)(nil), "pl.services.RegisterSiteResponse")
}

func init() {
	proto.RegisterFile("src/cloud/site_manager/sitemanagerpb/service.proto", fileDescriptor_ccc3521a7def8121)
}

var fileDescriptor_ccc3521a7def8121 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0xcf, 0x14, 0x5a, 0x76, 0xa7, 0xea, 0xc2, 0x58, 0xb5, 0x44, 0x19, 0xd7, 0x28, 0xd8, 0x8b,
	0x13, 0xdc, 0x22, 0x22, 0x1e, 0xc4, 0xa5, 0x28, 0x41, 0xb4, 0x90, 0xb2, 0x97, 0x1e, 0x2c, 0x93,
	0x64, 0x3a, 0x0e, 0x24, 0x99, 0x38, 0x93, 0x14, 0x3d, 0xe9, 0x47, 0xf0, 0x63, 0xf8, 0x51, 0x3c,
	0x2e, 0x78, 0xe9, 0x49, 0xdc, 0xec, 0xc5, 0x63, 0x3f, 0x82, 0x64, 0x92, 0x5d, 0x9b, 0xba, 0x2e,
	0x8b, 0xb7, 0xf7, 0x5e, 0x7e, 0x7f, 0x5e, 0x1e, 0xbf, 0x81, 0x03, 0xad, 0x42, 0x37, 0x8c, 0x65,
	0x11, 0xb9, 0x5a, 0xe4, 0xec, 0x28, 0xa1, 0x29, 0xe5, 0x4c, 0x99, 0xa6, 0xa9, 0xb3, 0xc0, 0xd5,
	0x4c, 0x9d, 0x88, 0x90, 0x91, 0x4c, 0xc9, 0x5c, 0xa2, 0xcd, 0x2c, 0x26, 0xcd, 0x44, 0xdb, 0x0f,
	0xb8, 0xc8, 0xdf, 0x15, 0x01, 0x09, 0x65, 0xe2, 0x72, 0xc9, 0xa5, 0x6b, 0x30, 0x41, 0x71, 0x6c,
	0x3a, 0xd3, 0x98, 0xaa, 0xe6, 0xda, 0x7d, 0xe3, 0x27, 0x93, 0x44, 0xa6, 0x6e, 0x51, 0x88, 0xa8,
	0x86, 0x9b, 0xb2, 0x46, 0x38, 0x87, 0xb0, 0x73, 0x20, 0x72, 0xe6, 0xa5, 0xc7, 0x12, 0xdd, 0x84,
	0x5d, 0xb3, 0x55, 0x4a, 0x13, 0xb6, 0x0d, 0xfa, 0x60, 0xa7, 0xeb, 0x77, 0xaa, 0xc1, 0x1b, 0x9a,
	0x30, 0xf4, 0x10, 0x6e, 0x48, 0xc5, 0x8f, 0x44, 0xb4, 0xbd, 0xd6, 0x07, 0x3b, 0x9b, 0x83, 0x1e,
	0xc9, 0x62, 0x52, 0x09, 0x65, 0x01, 0x19, 0x8d, 0xbc, 0xbd, 0x61, 0xb7, 0xfc, 0x71, 0x7b, 0x7d,
	0x5f, 0x71, 0x6f, 0xcf, 0x5f, 0x97, 0x8a, 0x7b, 0x91, 0xb3, 0x0b, 0xb7, 0x5e, 0xb2, 0xbc, 0x92,
	0x1f, 0x7e, 0xac, 0x34, 0x7c, 0xf6, 0xbe, 0x60, 0x3a, 0x5f, 0xea, 0xe3, 0x3c, 0x82, 0xd7, 0x3d,
	0x5d, 0x71, 0x9e, 0x9f, 0x50, 0x11, 0xd3, 0x20, 0x5e, 0x8d, 0xf6, 0x18, 0xde, 0xf8, 0x8b, 0xa6,
	0x33, 0x99, 0x6a, 0x86, 0x6e, 0xc1, 0x2e, 0x9d, 0x0d, 0x0d, 0xaf, 0xe3, 0xff, 0x19, 0x38, 0x0c,
	0x5e, 0xf5, 0x19, 0x17, 0x3a, 0x67, 0xaa, 0xa2, 0xaf, 0x62, 0xf6, 0x3f, 0xb7, 0x78, 0x06, 0xb7,
	0xda, 0x36, 0xcd, 0x72, 0xf7, 0x61, 0xcf, 0xf8, 0xa8, 0xe6, 0x23, 0x8b, 0x9a, 0x15, 0xaf, 0x68,
	0x03, 0x9b, 0x4d, 0x07, 0xdf, 0xd7, 0x20, 0xaa, 0x98, 0xaf, 0xeb, 0x98, 0x1c, 0xd4, 0x89, 0x40,
	0x6f, 0x61, 0xef, 0xc2, 0x7f, 0xa3, 0xbb, 0xe4, 0x5c, 0x62, 0xc8, 0xe2, 0x63, 0xda, 0xf7, 0x96,
	0x83, 0xea, 0xed, 0x1c, 0x0b, 0x8d, 0xe0, 0xa5, 0xf3, 0x7b, 0xa3, 0x7e, 0x8b, 0xb7, 0xe0, 0x72,
	0xf6, 0x9d, 0x25, 0x88, 0xb9, 0xec, 0x13, 0x78, 0xb9, 0x89, 0xc6, 0x0b, 0xa9, 0xf6, 0x15, 0x47,
	0x17, 0x4f, 0x68, 0x5f, 0x6b, 0xc9, 0xcc, 0x32, 0xea, 0x58, 0xe8, 0xd5, 0x9c, 0x5a, 0xa7, 0x0a,
	0xb5, 0x0d, 0x17, 0x25, 0xee, 0x9f, 0x62, 0xc3, 0x4f, 0xe3, 0x09, 0xb6, 0x4e, 0x27, 0xd8, 0x3a,
	0x9b, 0x60, 0xf0, 0xb9, 0xc4, 0xe0, 0x6b, 0x89, 0xc1, 0xb7, 0x12, 0x83, 0x71, 0x89, 0xc1, 0xcf,
	0x12, 0x83, 0x5f, 0x25, 0xb6, 0xce, 0x4a, 0x0c, 0xbe, 0x4c, 0xb1, 0x35, 0x9e, 0x62, 0xeb, 0x74,
	0x8a, 0xad, 0x43, 0x2f, 0x13, 0x1f, 0x04, 0x8b, 0x69, 0xa0, 0x09, 0x15, 0xee, 0xbc, 0x71, 0x57,
	0x79, 0xdd, 0x4f, 0x5b, 0x5d, 0xb0, 0x61, 0x9e, 0xe1, 0xee, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd6, 0x69, 0x25, 0xef, 0x1a, 0x04, 0x00, 0x00,
}

func (this *SiteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteInfo)
	if !ok {
		that2, ok := that.(SiteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *GetSiteByNameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSiteByNameRequest)
	if !ok {
		that2, ok := that.(GetSiteByNameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	return true
}
func (this *IsSiteAvailableRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsSiteAvailableRequest)
	if !ok {
		that2, ok := that.(IsSiteAvailableRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	return true
}
func (this *IsSiteAvailableResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsSiteAvailableResponse)
	if !ok {
		that2, ok := that.(IsSiteAvailableResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Available != that1.Available {
		return false
	}
	return true
}
func (this *RegisterSiteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterSiteRequest)
	if !ok {
		that2, ok := that.(RegisterSiteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteName != that1.SiteName {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *RegisterSiteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterSiteResponse)
	if !ok {
		that2, ok := that.(RegisterSiteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SiteRegistered != that1.SiteRegistered {
		return false
	}
	return true
}
func (this *SiteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sitemanagerpb.SiteInfo{")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSiteByNameRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sitemanagerpb.GetSiteByNameRequest{")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsSiteAvailableRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sitemanagerpb.IsSiteAvailableRequest{")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsSiteAvailableResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sitemanagerpb.IsSiteAvailableResponse{")
	s = append(s, "Available: "+fmt.Sprintf("%#v", this.Available)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterSiteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sitemanagerpb.RegisterSiteRequest{")
	s = append(s, "SiteName: "+fmt.Sprintf("%#v", this.SiteName)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterSiteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sitemanagerpb.RegisterSiteResponse{")
	s = append(s, "SiteRegistered: "+fmt.Sprintf("%#v", this.SiteRegistered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SiteManagerServiceClient is the client API for SiteManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SiteManagerServiceClient interface {
	IsSiteAvailable(ctx context.Context, in *IsSiteAvailableRequest, opts ...grpc.CallOption) (*IsSiteAvailableResponse, error)
	RegisterSite(ctx context.Context, in *RegisterSiteRequest, opts ...grpc.CallOption) (*RegisterSiteResponse, error)
	GetSiteForOrg(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*SiteInfo, error)
	GetSiteByName(ctx context.Context, in *GetSiteByNameRequest, opts ...grpc.CallOption) (*SiteInfo, error)
}

type siteManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSiteManagerServiceClient(cc *grpc.ClientConn) SiteManagerServiceClient {
	return &siteManagerServiceClient{cc}
}

func (c *siteManagerServiceClient) IsSiteAvailable(ctx context.Context, in *IsSiteAvailableRequest, opts ...grpc.CallOption) (*IsSiteAvailableResponse, error) {
	out := new(IsSiteAvailableResponse)
	err := c.cc.Invoke(ctx, "/pl.services.SiteManagerService/IsSiteAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteManagerServiceClient) RegisterSite(ctx context.Context, in *RegisterSiteRequest, opts ...grpc.CallOption) (*RegisterSiteResponse, error) {
	out := new(RegisterSiteResponse)
	err := c.cc.Invoke(ctx, "/pl.services.SiteManagerService/RegisterSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteManagerServiceClient) GetSiteForOrg(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*SiteInfo, error) {
	out := new(SiteInfo)
	err := c.cc.Invoke(ctx, "/pl.services.SiteManagerService/GetSiteForOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteManagerServiceClient) GetSiteByName(ctx context.Context, in *GetSiteByNameRequest, opts ...grpc.CallOption) (*SiteInfo, error) {
	out := new(SiteInfo)
	err := c.cc.Invoke(ctx, "/pl.services.SiteManagerService/GetSiteByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteManagerServiceServer is the server API for SiteManagerService service.
type SiteManagerServiceServer interface {
	IsSiteAvailable(context.Context, *IsSiteAvailableRequest) (*IsSiteAvailableResponse, error)
	RegisterSite(context.Context, *RegisterSiteRequest) (*RegisterSiteResponse, error)
	GetSiteForOrg(context.Context, *proto1.UUID) (*SiteInfo, error)
	GetSiteByName(context.Context, *GetSiteByNameRequest) (*SiteInfo, error)
}

// UnimplementedSiteManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSiteManagerServiceServer struct {
}

func (*UnimplementedSiteManagerServiceServer) IsSiteAvailable(ctx context.Context, req *IsSiteAvailableRequest) (*IsSiteAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSiteAvailable not implemented")
}
func (*UnimplementedSiteManagerServiceServer) RegisterSite(ctx context.Context, req *RegisterSiteRequest) (*RegisterSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSite not implemented")
}
func (*UnimplementedSiteManagerServiceServer) GetSiteForOrg(ctx context.Context, req *proto1.UUID) (*SiteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiteForOrg not implemented")
}
func (*UnimplementedSiteManagerServiceServer) GetSiteByName(ctx context.Context, req *GetSiteByNameRequest) (*SiteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiteByName not implemented")
}

func RegisterSiteManagerServiceServer(s *grpc.Server, srv SiteManagerServiceServer) {
	s.RegisterService(&_SiteManagerService_serviceDesc, srv)
}

func _SiteManagerService_IsSiteAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSiteAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteManagerServiceServer).IsSiteAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.SiteManagerService/IsSiteAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteManagerServiceServer).IsSiteAvailable(ctx, req.(*IsSiteAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteManagerService_RegisterSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteManagerServiceServer).RegisterSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.SiteManagerService/RegisterSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteManagerServiceServer).RegisterSite(ctx, req.(*RegisterSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteManagerService_GetSiteForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteManagerServiceServer).GetSiteForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.SiteManagerService/GetSiteForOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteManagerServiceServer).GetSiteForOrg(ctx, req.(*proto1.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteManagerService_GetSiteByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteManagerServiceServer).GetSiteByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.SiteManagerService/GetSiteByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteManagerServiceServer).GetSiteByName(ctx, req.(*GetSiteByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SiteManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.services.SiteManagerService",
	HandlerType: (*SiteManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsSiteAvailable",
			Handler:    _SiteManagerService_IsSiteAvailable_Handler,
		},
		{
			MethodName: "RegisterSite",
			Handler:    _SiteManagerService_RegisterSite_Handler,
		},
		{
			MethodName: "GetSiteForOrg",
			Handler:    _SiteManagerService_GetSiteForOrg_Handler,
		},
		{
			MethodName: "GetSiteByName",
			Handler:    _SiteManagerService_GetSiteByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/site_manager/sitemanagerpb/service.proto",
}

func (m *SiteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SiteName) > 0 {
		i -= len(m.SiteName)
		copy(dAtA[i:], m.SiteName)
		i = encodeVarintService(dAtA, i, uint64(len(m.SiteName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSiteByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSiteByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSiteByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SiteName) > 0 {
		i -= len(m.SiteName)
		copy(dAtA[i:], m.SiteName)
		i = encodeVarintService(dAtA, i, uint64(len(m.SiteName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsSiteAvailableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsSiteAvailableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsSiteAvailableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SiteName) > 0 {
		i -= len(m.SiteName)
		copy(dAtA[i:], m.SiteName)
		i = encodeVarintService(dAtA, i, uint64(len(m.SiteName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsSiteAvailableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsSiteAvailableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsSiteAvailableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Available {
		i--
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterSiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterSiteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterSiteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SiteName) > 0 {
		i -= len(m.SiteName)
		copy(dAtA[i:], m.SiteName)
		i = encodeVarintService(dAtA, i, uint64(len(m.SiteName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterSiteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterSiteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterSiteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SiteRegistered {
		i--
		if m.SiteRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SiteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetSiteByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *IsSiteAvailableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *IsSiteAvailableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Available {
		n += 2
	}
	return n
}

func (m *RegisterSiteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SiteName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegisterSiteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteRegistered {
		n += 2
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SiteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteInfo{`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "proto1.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSiteByNameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSiteByNameRequest{`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsSiteAvailableRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsSiteAvailableRequest{`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsSiteAvailableResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsSiteAvailableResponse{`,
		`Available:` + fmt.Sprintf("%v", this.Available) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterSiteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterSiteRequest{`,
		`SiteName:` + fmt.Sprintf("%v", this.SiteName) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "proto1.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterSiteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterSiteResponse{`,
		`SiteRegistered:` + fmt.Sprintf("%v", this.SiteRegistered) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SiteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &proto1.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSiteByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSiteByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSiteByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsSiteAvailableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsSiteAvailableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsSiteAvailableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsSiteAvailableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsSiteAvailableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsSiteAvailableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterSiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterSiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterSiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &proto1.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterSiteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterSiteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterSiteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SiteRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
