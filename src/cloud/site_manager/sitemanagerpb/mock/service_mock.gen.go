// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package mock_sitemanagerpb is a generated GoMock package.
package mock_sitemanagerpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	sitemanagerpb "pixielabs.ai/pixielabs/src/cloud/site_manager/sitemanagerpb"
)

// MockSiteManagerServiceClient is a mock of SiteManagerServiceClient interface
type MockSiteManagerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSiteManagerServiceClientMockRecorder
}

// MockSiteManagerServiceClientMockRecorder is the mock recorder for MockSiteManagerServiceClient
type MockSiteManagerServiceClientMockRecorder struct {
	mock *MockSiteManagerServiceClient
}

// NewMockSiteManagerServiceClient creates a new mock instance
func NewMockSiteManagerServiceClient(ctrl *gomock.Controller) *MockSiteManagerServiceClient {
	mock := &MockSiteManagerServiceClient{ctrl: ctrl}
	mock.recorder = &MockSiteManagerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSiteManagerServiceClient) EXPECT() *MockSiteManagerServiceClientMockRecorder {
	return m.recorder
}

// IsSiteAvailable mocks base method
func (m *MockSiteManagerServiceClient) IsSiteAvailable(ctx context.Context, in *sitemanagerpb.IsSiteAvailableRequest, opts ...grpc.CallOption) (*sitemanagerpb.IsSiteAvailableResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsSiteAvailable", varargs...)
	ret0, _ := ret[0].(*sitemanagerpb.IsSiteAvailableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSiteAvailable indicates an expected call of IsSiteAvailable
func (mr *MockSiteManagerServiceClientMockRecorder) IsSiteAvailable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSiteAvailable", reflect.TypeOf((*MockSiteManagerServiceClient)(nil).IsSiteAvailable), varargs...)
}

// RegisterSite mocks base method
func (m *MockSiteManagerServiceClient) RegisterSite(ctx context.Context, in *sitemanagerpb.RegisterSiteRequest, opts ...grpc.CallOption) (*sitemanagerpb.RegisterSiteResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterSite", varargs...)
	ret0, _ := ret[0].(*sitemanagerpb.RegisterSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSite indicates an expected call of RegisterSite
func (mr *MockSiteManagerServiceClientMockRecorder) RegisterSite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSite", reflect.TypeOf((*MockSiteManagerServiceClient)(nil).RegisterSite), varargs...)
}

// MockSiteManagerServiceServer is a mock of SiteManagerServiceServer interface
type MockSiteManagerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSiteManagerServiceServerMockRecorder
}

// MockSiteManagerServiceServerMockRecorder is the mock recorder for MockSiteManagerServiceServer
type MockSiteManagerServiceServerMockRecorder struct {
	mock *MockSiteManagerServiceServer
}

// NewMockSiteManagerServiceServer creates a new mock instance
func NewMockSiteManagerServiceServer(ctrl *gomock.Controller) *MockSiteManagerServiceServer {
	mock := &MockSiteManagerServiceServer{ctrl: ctrl}
	mock.recorder = &MockSiteManagerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSiteManagerServiceServer) EXPECT() *MockSiteManagerServiceServerMockRecorder {
	return m.recorder
}

// IsSiteAvailable mocks base method
func (m *MockSiteManagerServiceServer) IsSiteAvailable(arg0 context.Context, arg1 *sitemanagerpb.IsSiteAvailableRequest) (*sitemanagerpb.IsSiteAvailableResponse, error) {
	ret := m.ctrl.Call(m, "IsSiteAvailable", arg0, arg1)
	ret0, _ := ret[0].(*sitemanagerpb.IsSiteAvailableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSiteAvailable indicates an expected call of IsSiteAvailable
func (mr *MockSiteManagerServiceServerMockRecorder) IsSiteAvailable(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSiteAvailable", reflect.TypeOf((*MockSiteManagerServiceServer)(nil).IsSiteAvailable), arg0, arg1)
}

// RegisterSite mocks base method
func (m *MockSiteManagerServiceServer) RegisterSite(arg0 context.Context, arg1 *sitemanagerpb.RegisterSiteRequest) (*sitemanagerpb.RegisterSiteResponse, error) {
	ret := m.ctrl.Call(m, "RegisterSite", arg0, arg1)
	ret0, _ := ret[0].(*sitemanagerpb.RegisterSiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSite indicates an expected call of RegisterSite
func (mr *MockSiteManagerServiceServerMockRecorder) RegisterSite(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSite", reflect.TypeOf((*MockSiteManagerServiceServer)(nil).RegisterSite), arg0, arg1)
}
