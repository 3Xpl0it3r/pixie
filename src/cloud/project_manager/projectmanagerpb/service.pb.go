// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/project_manager/projectmanagerpb/service.proto

package projectmanagerpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "pixielabs.ai/pixielabs/src/api/public/uuidpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProjectInfo struct {
	ProjectName string       `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	OrgID       *uuidpb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *ProjectInfo) Reset()      { *m = ProjectInfo{} }
func (*ProjectInfo) ProtoMessage() {}
func (*ProjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c9d981df0c32c1d, []int{0}
}
func (m *ProjectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectInfo.Merge(m, src)
}
func (m *ProjectInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectInfo proto.InternalMessageInfo

func (m *ProjectInfo) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *ProjectInfo) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type GetProjectByNameRequest struct {
	ProjectName string       `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	OrgID       *uuidpb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *GetProjectByNameRequest) Reset()      { *m = GetProjectByNameRequest{} }
func (*GetProjectByNameRequest) ProtoMessage() {}
func (*GetProjectByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c9d981df0c32c1d, []int{1}
}
func (m *GetProjectByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProjectByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProjectByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProjectByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectByNameRequest.Merge(m, src)
}
func (m *GetProjectByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetProjectByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectByNameRequest proto.InternalMessageInfo

func (m *GetProjectByNameRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *GetProjectByNameRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type IsProjectAvailableRequest struct {
	ProjectName string       `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	OrgID       *uuidpb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *IsProjectAvailableRequest) Reset()      { *m = IsProjectAvailableRequest{} }
func (*IsProjectAvailableRequest) ProtoMessage() {}
func (*IsProjectAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c9d981df0c32c1d, []int{2}
}
func (m *IsProjectAvailableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsProjectAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsProjectAvailableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsProjectAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsProjectAvailableRequest.Merge(m, src)
}
func (m *IsProjectAvailableRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsProjectAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsProjectAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsProjectAvailableRequest proto.InternalMessageInfo

func (m *IsProjectAvailableRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *IsProjectAvailableRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type IsProjectAvailableResponse struct {
	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
}

func (m *IsProjectAvailableResponse) Reset()      { *m = IsProjectAvailableResponse{} }
func (*IsProjectAvailableResponse) ProtoMessage() {}
func (*IsProjectAvailableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c9d981df0c32c1d, []int{3}
}
func (m *IsProjectAvailableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsProjectAvailableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsProjectAvailableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsProjectAvailableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsProjectAvailableResponse.Merge(m, src)
}
func (m *IsProjectAvailableResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsProjectAvailableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsProjectAvailableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsProjectAvailableResponse proto.InternalMessageInfo

func (m *IsProjectAvailableResponse) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

type RegisterProjectRequest struct {
	ProjectName string       `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	OrgID       *uuidpb.UUID `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *RegisterProjectRequest) Reset()      { *m = RegisterProjectRequest{} }
func (*RegisterProjectRequest) ProtoMessage() {}
func (*RegisterProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c9d981df0c32c1d, []int{4}
}
func (m *RegisterProjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterProjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterProjectRequest.Merge(m, src)
}
func (m *RegisterProjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterProjectRequest proto.InternalMessageInfo

func (m *RegisterProjectRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *RegisterProjectRequest) GetOrgID() *uuidpb.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type RegisterProjectResponse struct {
	ProjectRegistered bool `protobuf:"varint,1,opt,name=project_registered,json=projectRegistered,proto3" json:"project_registered,omitempty"`
}

func (m *RegisterProjectResponse) Reset()      { *m = RegisterProjectResponse{} }
func (*RegisterProjectResponse) ProtoMessage() {}
func (*RegisterProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c9d981df0c32c1d, []int{5}
}
func (m *RegisterProjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterProjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterProjectResponse.Merge(m, src)
}
func (m *RegisterProjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterProjectResponse proto.InternalMessageInfo

func (m *RegisterProjectResponse) GetProjectRegistered() bool {
	if m != nil {
		return m.ProjectRegistered
	}
	return false
}

func init() {
	proto.RegisterType((*ProjectInfo)(nil), "pl.services.ProjectInfo")
	proto.RegisterType((*GetProjectByNameRequest)(nil), "pl.services.GetProjectByNameRequest")
	proto.RegisterType((*IsProjectAvailableRequest)(nil), "pl.services.IsProjectAvailableRequest")
	proto.RegisterType((*IsProjectAvailableResponse)(nil), "pl.services.IsProjectAvailableResponse")
	proto.RegisterType((*RegisterProjectRequest)(nil), "pl.services.RegisterProjectRequest")
	proto.RegisterType((*RegisterProjectResponse)(nil), "pl.services.RegisterProjectResponse")
}

func init() {
	proto.RegisterFile("src/cloud/project_manager/projectmanagerpb/service.proto", fileDescriptor_2c9d981df0c32c1d)
}

var fileDescriptor_2c9d981df0c32c1d = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xbf, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0xe3, 0x4a, 0xad, 0x38, 0x1f, 0x52, 0xc1, 0x12, 0xf4, 0x88, 0x90, 0x39, 0x0e, 0x04,
	0x5d, 0x6a, 0x8b, 0xb2, 0x20, 0x18, 0x10, 0xa7, 0x0a, 0xc8, 0x00, 0x45, 0x81, 0x2e, 0x0c, 0x54,
	0x4e, 0xe2, 0x1a, 0xa3, 0x5c, 0xec, 0xda, 0x49, 0x05, 0x1b, 0x23, 0x23, 0x7f, 0x06, 0x7f, 0x0a,
	0xe3, 0x8d, 0x9d, 0x10, 0x97, 0x5b, 0x18, 0xbb, 0xb1, 0xa2, 0x26, 0x4e, 0x7b, 0x77, 0xfd, 0x41,
	0x97, 0x9b, 0x92, 0xf7, 0xf2, 0xf5, 0xf7, 0xf3, 0xf2, 0xfc, 0x6c, 0xf8, 0xc8, 0x9a, 0x98, 0xc6,
	0xa9, 0x2a, 0x12, 0xaa, 0x8d, 0xfa, 0xc4, 0xe3, 0x7c, 0x7b, 0xc0, 0x32, 0x26, 0xb8, 0x69, 0x62,
	0x17, 0xea, 0x88, 0x5a, 0x6e, 0xf6, 0x64, 0xcc, 0x89, 0x36, 0x2a, 0x57, 0xa8, 0xad, 0x53, 0xe2,
	0x32, 0xd6, 0x5f, 0x13, 0x32, 0xff, 0x58, 0x44, 0x24, 0x56, 0x03, 0x2a, 0x94, 0x50, 0xb4, 0xd2,
	0x44, 0xc5, 0x4e, 0x15, 0x55, 0x41, 0xf5, 0x56, 0xaf, 0xf5, 0xbb, 0x87, 0x54, 0xa6, 0x25, 0xd5,
	0x45, 0x94, 0xca, 0x98, 0x16, 0x85, 0x4c, 0x74, 0x54, 0x3d, 0x6a, 0x45, 0x2f, 0x86, 0xed, 0x37,
	0x35, 0x3f, 0xc8, 0x76, 0x14, 0xba, 0x0d, 0x2f, 0x37, 0xe5, 0x65, 0x6c, 0xc0, 0x3b, 0xa0, 0x0b,
	0x56, 0x5b, 0x61, 0xdb, 0xe5, 0x5e, 0xb3, 0x01, 0x47, 0x0f, 0xe0, 0x92, 0x32, 0x62, 0x5b, 0x26,
	0x9d, 0x85, 0x2e, 0x58, 0x6d, 0xaf, 0x2f, 0x13, 0x9d, 0x92, 0xda, 0x98, 0x6c, 0x6d, 0x05, 0x1b,
	0xfd, 0x56, 0xf9, 0xeb, 0xd6, 0xe2, 0xa6, 0x11, 0xc1, 0x46, 0xb8, 0xa8, 0x8c, 0x08, 0x92, 0x9e,
	0x82, 0x2b, 0x2f, 0x78, 0xee, 0x38, 0xfd, 0x2f, 0x87, 0x36, 0x21, 0xdf, 0x2d, 0xb8, 0xcd, 0xe7,
	0x04, 0xdc, 0x85, 0x37, 0x02, 0xeb, 0x78, 0xcf, 0xf6, 0x98, 0x4c, 0x59, 0x94, 0xce, 0x19, 0xf9,
	0x18, 0xfa, 0xa7, 0x21, 0xad, 0x56, 0x99, 0xe5, 0xe8, 0x26, 0x6c, 0xb1, 0x26, 0x59, 0x01, 0x2f,
	0x85, 0xc7, 0x89, 0x5e, 0x06, 0xaf, 0x87, 0x5c, 0x48, 0x9b, 0x73, 0xe3, 0x1c, 0xe6, 0x5b, 0xeb,
	0x4b, 0xb8, 0x72, 0x82, 0xe7, 0x0a, 0x5d, 0x83, 0xa8, 0x01, 0x1a, 0x27, 0xe1, 0x89, 0xab, 0xf8,
	0xaa, 0x6e, 0xc4, 0xcd, 0x87, 0xf5, 0xbf, 0x0b, 0xf0, 0x9a, 0xb3, 0x78, 0x55, 0xcf, 0xef, 0xdb,
	0x7a, 0x54, 0x91, 0x80, 0xe8, 0x64, 0x3f, 0xd0, 0x3d, 0x32, 0x31, 0xcd, 0xe4, 0xcc, 0x3d, 0xf2,
	0xef, 0xff, 0x57, 0x57, 0xd7, 0xdb, 0xf3, 0xd0, 0x07, 0xb8, 0x3c, 0xf3, 0x33, 0xe8, 0xce, 0xd4,
	0xea, 0xd3, 0x5b, 0xeb, 0xdf, 0x3d, 0x5f, 0x74, 0xe4, 0xff, 0x14, 0x5e, 0x39, 0x1e, 0xde, 0xe7,
	0xca, 0x6c, 0x1a, 0x81, 0x66, 0x7b, 0xec, 0x77, 0xa6, 0xcc, 0x26, 0x4e, 0x54, 0xcf, 0x43, 0xef,
	0x26, 0x0d, 0xea, 0xe9, 0x47, 0xd3, 0xf0, 0x33, 0x0e, 0xc7, 0x79, 0xae, 0xfd, 0x6f, 0x60, 0x38,
	0xc2, 0xde, 0xfe, 0x08, 0x7b, 0x07, 0x23, 0x0c, 0xbe, 0x96, 0x18, 0xfc, 0x28, 0x31, 0xf8, 0x59,
	0x62, 0x30, 0x2c, 0x31, 0xf8, 0x5d, 0x62, 0xf0, 0xa7, 0xc4, 0xde, 0x41, 0x89, 0xc1, 0xf7, 0x31,
	0xf6, 0x86, 0x63, 0xec, 0xed, 0x8f, 0xb1, 0xf7, 0x3e, 0xd4, 0xf2, 0xb3, 0xe4, 0x29, 0x8b, 0x2c,
	0x61, 0x92, 0x1e, 0x05, 0xf4, 0xe2, 0xd7, 0xd3, 0x93, 0xd9, 0x44, 0xb4, 0x54, 0x5d, 0x25, 0x0f,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xcd, 0xfb, 0x39, 0xe4, 0x04, 0x00, 0x00,
}

func (this *ProjectInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProjectInfo)
	if !ok {
		that2, ok := that.(ProjectInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProjectName != that1.ProjectName {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *GetProjectByNameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetProjectByNameRequest)
	if !ok {
		that2, ok := that.(GetProjectByNameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProjectName != that1.ProjectName {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *IsProjectAvailableRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsProjectAvailableRequest)
	if !ok {
		that2, ok := that.(IsProjectAvailableRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProjectName != that1.ProjectName {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *IsProjectAvailableResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsProjectAvailableResponse)
	if !ok {
		that2, ok := that.(IsProjectAvailableResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Available != that1.Available {
		return false
	}
	return true
}
func (this *RegisterProjectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterProjectRequest)
	if !ok {
		that2, ok := that.(RegisterProjectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProjectName != that1.ProjectName {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *RegisterProjectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterProjectResponse)
	if !ok {
		that2, ok := that.(RegisterProjectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProjectRegistered != that1.ProjectRegistered {
		return false
	}
	return true
}
func (this *ProjectInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&projectmanagerpb.ProjectInfo{")
	s = append(s, "ProjectName: "+fmt.Sprintf("%#v", this.ProjectName)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetProjectByNameRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&projectmanagerpb.GetProjectByNameRequest{")
	s = append(s, "ProjectName: "+fmt.Sprintf("%#v", this.ProjectName)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsProjectAvailableRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&projectmanagerpb.IsProjectAvailableRequest{")
	s = append(s, "ProjectName: "+fmt.Sprintf("%#v", this.ProjectName)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsProjectAvailableResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&projectmanagerpb.IsProjectAvailableResponse{")
	s = append(s, "Available: "+fmt.Sprintf("%#v", this.Available)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterProjectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&projectmanagerpb.RegisterProjectRequest{")
	s = append(s, "ProjectName: "+fmt.Sprintf("%#v", this.ProjectName)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterProjectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&projectmanagerpb.RegisterProjectResponse{")
	s = append(s, "ProjectRegistered: "+fmt.Sprintf("%#v", this.ProjectRegistered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProjectManagerServiceClient is the client API for ProjectManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectManagerServiceClient interface {
	IsProjectAvailable(ctx context.Context, in *IsProjectAvailableRequest, opts ...grpc.CallOption) (*IsProjectAvailableResponse, error)
	RegisterProject(ctx context.Context, in *RegisterProjectRequest, opts ...grpc.CallOption) (*RegisterProjectResponse, error)
	GetProjectForOrg(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*ProjectInfo, error)
	GetProjectByName(ctx context.Context, in *GetProjectByNameRequest, opts ...grpc.CallOption) (*ProjectInfo, error)
}

type projectManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectManagerServiceClient(cc *grpc.ClientConn) ProjectManagerServiceClient {
	return &projectManagerServiceClient{cc}
}

func (c *projectManagerServiceClient) IsProjectAvailable(ctx context.Context, in *IsProjectAvailableRequest, opts ...grpc.CallOption) (*IsProjectAvailableResponse, error) {
	out := new(IsProjectAvailableResponse)
	err := c.cc.Invoke(ctx, "/pl.services.ProjectManagerService/IsProjectAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManagerServiceClient) RegisterProject(ctx context.Context, in *RegisterProjectRequest, opts ...grpc.CallOption) (*RegisterProjectResponse, error) {
	out := new(RegisterProjectResponse)
	err := c.cc.Invoke(ctx, "/pl.services.ProjectManagerService/RegisterProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManagerServiceClient) GetProjectForOrg(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*ProjectInfo, error) {
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, "/pl.services.ProjectManagerService/GetProjectForOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManagerServiceClient) GetProjectByName(ctx context.Context, in *GetProjectByNameRequest, opts ...grpc.CallOption) (*ProjectInfo, error) {
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, "/pl.services.ProjectManagerService/GetProjectByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectManagerServiceServer is the server API for ProjectManagerService service.
type ProjectManagerServiceServer interface {
	IsProjectAvailable(context.Context, *IsProjectAvailableRequest) (*IsProjectAvailableResponse, error)
	RegisterProject(context.Context, *RegisterProjectRequest) (*RegisterProjectResponse, error)
	GetProjectForOrg(context.Context, *uuidpb.UUID) (*ProjectInfo, error)
	GetProjectByName(context.Context, *GetProjectByNameRequest) (*ProjectInfo, error)
}

// UnimplementedProjectManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProjectManagerServiceServer struct {
}

func (*UnimplementedProjectManagerServiceServer) IsProjectAvailable(ctx context.Context, req *IsProjectAvailableRequest) (*IsProjectAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsProjectAvailable not implemented")
}
func (*UnimplementedProjectManagerServiceServer) RegisterProject(ctx context.Context, req *RegisterProjectRequest) (*RegisterProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProject not implemented")
}
func (*UnimplementedProjectManagerServiceServer) GetProjectForOrg(ctx context.Context, req *uuidpb.UUID) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectForOrg not implemented")
}
func (*UnimplementedProjectManagerServiceServer) GetProjectByName(ctx context.Context, req *GetProjectByNameRequest) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByName not implemented")
}

func RegisterProjectManagerServiceServer(s *grpc.Server, srv ProjectManagerServiceServer) {
	s.RegisterService(&_ProjectManagerService_serviceDesc, srv)
}

func _ProjectManagerService_IsProjectAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsProjectAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManagerServiceServer).IsProjectAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.ProjectManagerService/IsProjectAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManagerServiceServer).IsProjectAvailable(ctx, req.(*IsProjectAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManagerService_RegisterProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManagerServiceServer).RegisterProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.ProjectManagerService/RegisterProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManagerServiceServer).RegisterProject(ctx, req.(*RegisterProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManagerService_GetProjectForOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uuidpb.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManagerServiceServer).GetProjectForOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.ProjectManagerService/GetProjectForOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManagerServiceServer).GetProjectForOrg(ctx, req.(*uuidpb.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManagerService_GetProjectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManagerServiceServer).GetProjectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.ProjectManagerService/GetProjectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManagerServiceServer).GetProjectByName(ctx, req.(*GetProjectByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.services.ProjectManagerService",
	HandlerType: (*ProjectManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsProjectAvailable",
			Handler:    _ProjectManagerService_IsProjectAvailable_Handler,
		},
		{
			MethodName: "RegisterProject",
			Handler:    _ProjectManagerService_RegisterProject_Handler,
		},
		{
			MethodName: "GetProjectForOrg",
			Handler:    _ProjectManagerService_GetProjectForOrg_Handler,
		},
		{
			MethodName: "GetProjectByName",
			Handler:    _ProjectManagerService_GetProjectByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/project_manager/projectmanagerpb/service.proto",
}

func (m *ProjectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetProjectByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProjectByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProjectByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsProjectAvailableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsProjectAvailableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsProjectAvailableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsProjectAvailableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsProjectAvailableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsProjectAvailableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Available {
		i--
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterProjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintService(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterProjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectRegistered {
		i--
		if m.ProjectRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProjectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetProjectByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *IsProjectAvailableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *IsProjectAvailableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Available {
		n += 2
	}
	return n
}

func (m *RegisterProjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegisterProjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectRegistered {
		n += 2
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProjectInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProjectInfo{`,
		`ProjectName:` + fmt.Sprintf("%v", this.ProjectName) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetProjectByNameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetProjectByNameRequest{`,
		`ProjectName:` + fmt.Sprintf("%v", this.ProjectName) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsProjectAvailableRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsProjectAvailableRequest{`,
		`ProjectName:` + fmt.Sprintf("%v", this.ProjectName) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsProjectAvailableResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsProjectAvailableResponse{`,
		`Available:` + fmt.Sprintf("%v", this.Available) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterProjectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterProjectRequest{`,
		`ProjectName:` + fmt.Sprintf("%v", this.ProjectName) + `,`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterProjectResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterProjectResponse{`,
		`ProjectRegistered:` + fmt.Sprintf("%v", this.ProjectRegistered) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProjectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProjectByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProjectByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProjectByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsProjectAvailableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsProjectAvailableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsProjectAvailableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsProjectAvailableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsProjectAvailableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsProjectAvailableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &uuidpb.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProjectRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
