// Code generated by MockGen. DO NOT EDIT.
// Source: pixielabs.ai/pixielabs/src/cloud/vzconn/vzconnpb (interfaces: VZConnServiceServer,VZConnServiceClient,VZConnService_CloudConnectServer)

// Package mock_vzconnpb is a generated GoMock package.
package mock_vzconnpb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	vzconnpb "pixielabs.ai/pixielabs/src/cloud/vzconn/vzconnpb"
	reflect "reflect"
)

// MockVZConnServiceServer is a mock of VZConnServiceServer interface
type MockVZConnServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVZConnServiceServerMockRecorder
}

// MockVZConnServiceServerMockRecorder is the mock recorder for MockVZConnServiceServer
type MockVZConnServiceServerMockRecorder struct {
	mock *MockVZConnServiceServer
}

// NewMockVZConnServiceServer creates a new mock instance
func NewMockVZConnServiceServer(ctrl *gomock.Controller) *MockVZConnServiceServer {
	mock := &MockVZConnServiceServer{ctrl: ctrl}
	mock.recorder = &MockVZConnServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVZConnServiceServer) EXPECT() *MockVZConnServiceServerMockRecorder {
	return m.recorder
}

// CloudConnect mocks base method
func (m *MockVZConnServiceServer) CloudConnect(arg0 vzconnpb.VZConnService_CloudConnectServer) error {
	ret := m.ctrl.Call(m, "CloudConnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloudConnect indicates an expected call of CloudConnect
func (mr *MockVZConnServiceServerMockRecorder) CloudConnect(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudConnect", reflect.TypeOf((*MockVZConnServiceServer)(nil).CloudConnect), arg0)
}

// MockVZConnServiceClient is a mock of VZConnServiceClient interface
type MockVZConnServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVZConnServiceClientMockRecorder
}

// MockVZConnServiceClientMockRecorder is the mock recorder for MockVZConnServiceClient
type MockVZConnServiceClientMockRecorder struct {
	mock *MockVZConnServiceClient
}

// NewMockVZConnServiceClient creates a new mock instance
func NewMockVZConnServiceClient(ctrl *gomock.Controller) *MockVZConnServiceClient {
	mock := &MockVZConnServiceClient{ctrl: ctrl}
	mock.recorder = &MockVZConnServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVZConnServiceClient) EXPECT() *MockVZConnServiceClientMockRecorder {
	return m.recorder
}

// CloudConnect mocks base method
func (m *MockVZConnServiceClient) CloudConnect(arg0 context.Context, arg1 ...grpc.CallOption) (vzconnpb.VZConnService_CloudConnectClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloudConnect", varargs...)
	ret0, _ := ret[0].(vzconnpb.VZConnService_CloudConnectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudConnect indicates an expected call of CloudConnect
func (mr *MockVZConnServiceClientMockRecorder) CloudConnect(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudConnect", reflect.TypeOf((*MockVZConnServiceClient)(nil).CloudConnect), varargs...)
}

// MockVZConnService_CloudConnectServer is a mock of VZConnService_CloudConnectServer interface
type MockVZConnService_CloudConnectServer struct {
	ctrl     *gomock.Controller
	recorder *MockVZConnService_CloudConnectServerMockRecorder
}

// MockVZConnService_CloudConnectServerMockRecorder is the mock recorder for MockVZConnService_CloudConnectServer
type MockVZConnService_CloudConnectServerMockRecorder struct {
	mock *MockVZConnService_CloudConnectServer
}

// NewMockVZConnService_CloudConnectServer creates a new mock instance
func NewMockVZConnService_CloudConnectServer(ctrl *gomock.Controller) *MockVZConnService_CloudConnectServer {
	mock := &MockVZConnService_CloudConnectServer{ctrl: ctrl}
	mock.recorder = &MockVZConnService_CloudConnectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVZConnService_CloudConnectServer) EXPECT() *MockVZConnService_CloudConnectServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockVZConnService_CloudConnectServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockVZConnService_CloudConnectServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVZConnService_CloudConnectServer)(nil).Context))
}

// Recv mocks base method
func (m *MockVZConnService_CloudConnectServer) Recv() (*vzconnpb.CloudConnectRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*vzconnpb.CloudConnectRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockVZConnService_CloudConnectServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockVZConnService_CloudConnectServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockVZConnService_CloudConnectServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockVZConnService_CloudConnectServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVZConnService_CloudConnectServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockVZConnService_CloudConnectServer) Send(arg0 *vzconnpb.CloudConnectResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockVZConnService_CloudConnectServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockVZConnService_CloudConnectServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockVZConnService_CloudConnectServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockVZConnService_CloudConnectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockVZConnService_CloudConnectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockVZConnService_CloudConnectServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockVZConnService_CloudConnectServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVZConnService_CloudConnectServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockVZConnService_CloudConnectServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockVZConnService_CloudConnectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockVZConnService_CloudConnectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockVZConnService_CloudConnectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockVZConnService_CloudConnectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockVZConnService_CloudConnectServer)(nil).SetTrailer), arg0)
}
