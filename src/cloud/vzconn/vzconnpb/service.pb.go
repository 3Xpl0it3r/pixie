// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/vzconn/vzconnpb/service.proto

package vzconnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type V2CBridgeMessage struct {
	Topic     string     `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	SessionId int64      `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Msg       *types.Any `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *V2CBridgeMessage) Reset()      { *m = V2CBridgeMessage{} }
func (*V2CBridgeMessage) ProtoMessage() {}
func (*V2CBridgeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{0}
}
func (m *V2CBridgeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2CBridgeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2CBridgeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2CBridgeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2CBridgeMessage.Merge(m, src)
}
func (m *V2CBridgeMessage) XXX_Size() int {
	return m.Size()
}
func (m *V2CBridgeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_V2CBridgeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_V2CBridgeMessage proto.InternalMessageInfo

func (m *V2CBridgeMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *V2CBridgeMessage) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *V2CBridgeMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type C2VBridgeMessage struct {
	Topic string     `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Msg   *types.Any `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *C2VBridgeMessage) Reset()      { *m = C2VBridgeMessage{} }
func (*C2VBridgeMessage) ProtoMessage() {}
func (*C2VBridgeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{1}
}
func (m *C2VBridgeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2VBridgeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2VBridgeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2VBridgeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2VBridgeMessage.Merge(m, src)
}
func (m *C2VBridgeMessage) XXX_Size() int {
	return m.Size()
}
func (m *C2VBridgeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_C2VBridgeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_C2VBridgeMessage proto.InternalMessageInfo

func (m *C2VBridgeMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *C2VBridgeMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*V2CBridgeMessage)(nil), "pl.services.V2CBridgeMessage")
	proto.RegisterType((*C2VBridgeMessage)(nil), "pl.services.C2VBridgeMessage")
}

func init() {
	proto.RegisterFile("src/cloud/vzconn/vzconnpb/service.proto", fileDescriptor_935788a74a5b0e3d)
}

var fileDescriptor_935788a74a5b0e3d = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0x4e, 0x3a, 0x41,
	0x10, 0xc7, 0x6f, 0x21, 0xbf, 0x5f, 0xc2, 0x12, 0x13, 0x72, 0xa1, 0x40, 0x12, 0x36, 0x84, 0x42,
	0xaf, 0x71, 0xd7, 0x9c, 0x95, 0xb1, 0x02, 0x2a, 0x0b, 0x0d, 0x01, 0x43, 0x41, 0x63, 0xee, 0xcf,
	0xba, 0x6e, 0x72, 0xec, 0x5c, 0x6e, 0x81, 0x88, 0x95, 0x8f, 0xe0, 0x63, 0xf8, 0x28, 0x96, 0x94,
	0x94, 0xb2, 0x34, 0x96, 0x3c, 0x82, 0xf1, 0xee, 0xf0, 0x0f, 0x89, 0xd1, 0x6a, 0xe7, 0x3b, 0xf3,
	0xdd, 0xf9, 0xec, 0xcc, 0xe2, 0x43, 0x9d, 0x04, 0x2c, 0x88, 0x60, 0x1a, 0xb2, 0xd9, 0x7d, 0x00,
	0x4a, 0xe5, 0x47, 0xec, 0x33, 0xcd, 0x93, 0x99, 0x0c, 0x38, 0x8d, 0x13, 0x98, 0x80, 0x5d, 0x8e,
	0x23, 0x9a, 0x67, 0x74, 0xfd, 0x48, 0xc8, 0xc9, 0xed, 0xd4, 0xa7, 0x01, 0x8c, 0x99, 0x00, 0x01,
	0x2c, 0xf5, 0xf8, 0xd3, 0x9b, 0x54, 0xa5, 0x22, 0x8d, 0xb2, 0xbb, 0xf5, 0x7d, 0x01, 0x20, 0x22,
	0xfe, 0xe9, 0xf2, 0xd4, 0x3c, 0x2b, 0xb5, 0x00, 0x57, 0x86, 0x6e, 0xb7, 0x93, 0xc8, 0x50, 0xf0,
	0x0b, 0xae, 0xb5, 0x27, 0xb8, 0x5d, 0xc5, 0xff, 0x26, 0x10, 0xcb, 0xa0, 0x86, 0x9a, 0xc8, 0x29,
	0xf5, 0x33, 0x61, 0x37, 0x30, 0xd6, 0x5c, 0x6b, 0x09, 0xea, 0x5a, 0x86, 0xb5, 0x42, 0x13, 0x39,
	0xc5, 0x7e, 0x29, 0xcf, 0x9c, 0x87, 0xf6, 0x01, 0x2e, 0x8e, 0xb5, 0xa8, 0x15, 0x9b, 0xc8, 0x29,
	0xbb, 0x55, 0x9a, 0x11, 0xe9, 0x96, 0x48, 0xdb, 0x6a, 0xde, 0x7f, 0x37, 0xb4, 0x7a, 0xb8, 0xd2,
	0x75, 0x87, 0x7f, 0x01, 0xe6, 0x1d, 0x0b, 0xbf, 0x74, 0x74, 0x3d, 0xbc, 0x37, 0x1c, 0x75, 0x41,
	0xa9, 0x41, 0xb6, 0x1e, 0xbb, 0x87, 0xf1, 0x65, 0xfb, 0x6a, 0x90, 0x31, 0xec, 0x06, 0xfd, 0xb2,
	0x39, 0xba, 0x3b, 0x6c, 0xfd, 0x7b, 0x79, 0xf7, 0x69, 0x2d, 0xcb, 0x41, 0xc7, 0xa8, 0x03, 0x8b,
	0x15, 0xb1, 0x96, 0x2b, 0x62, 0x6d, 0x56, 0x04, 0x3d, 0x18, 0x82, 0x9e, 0x0c, 0x41, 0xcf, 0x86,
	0xa0, 0x85, 0x21, 0xe8, 0xc5, 0x10, 0xf4, 0x6a, 0x88, 0xb5, 0x31, 0x04, 0x3d, 0xae, 0x89, 0xb5,
	0x58, 0x13, 0x6b, 0xb9, 0x26, 0xd6, 0xe8, 0x34, 0x96, 0x77, 0x92, 0x47, 0x9e, 0xaf, 0xa9, 0x27,
	0xd9, 0x87, 0x60, 0x3f, 0x7e, 0xf9, 0xd9, 0x36, 0xf0, 0xff, 0xa7, 0x63, 0x9e, 0xbc, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0xb7, 0x44, 0x5c, 0x1f, 0x02, 0x00, 0x00,
}

func (this *V2CBridgeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CBridgeMessage)
	if !ok {
		that2, ok := that.(V2CBridgeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *C2VBridgeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VBridgeMessage)
	if !ok {
		that2, ok := that.(C2VBridgeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *V2CBridgeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vzconnpb.V2CBridgeMessage{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2VBridgeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vzconnpb.C2VBridgeMessage{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VZConnServiceClient is the client API for VZConnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VZConnServiceClient interface {
	NATSBridge(ctx context.Context, opts ...grpc.CallOption) (VZConnService_NATSBridgeClient, error)
}

type vZConnServiceClient struct {
	cc *grpc.ClientConn
}

func NewVZConnServiceClient(cc *grpc.ClientConn) VZConnServiceClient {
	return &vZConnServiceClient{cc}
}

func (c *vZConnServiceClient) NATSBridge(ctx context.Context, opts ...grpc.CallOption) (VZConnService_NATSBridgeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VZConnService_serviceDesc.Streams[0], "/pl.services.VZConnService/NATSBridge", opts...)
	if err != nil {
		return nil, err
	}
	x := &vZConnServiceNATSBridgeClient{stream}
	return x, nil
}

type VZConnService_NATSBridgeClient interface {
	Send(*V2CBridgeMessage) error
	Recv() (*C2VBridgeMessage, error)
	grpc.ClientStream
}

type vZConnServiceNATSBridgeClient struct {
	grpc.ClientStream
}

func (x *vZConnServiceNATSBridgeClient) Send(m *V2CBridgeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vZConnServiceNATSBridgeClient) Recv() (*C2VBridgeMessage, error) {
	m := new(C2VBridgeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VZConnServiceServer is the server API for VZConnService service.
type VZConnServiceServer interface {
	NATSBridge(VZConnService_NATSBridgeServer) error
}

// UnimplementedVZConnServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVZConnServiceServer struct {
}

func (*UnimplementedVZConnServiceServer) NATSBridge(srv VZConnService_NATSBridgeServer) error {
	return status.Errorf(codes.Unimplemented, "method NATSBridge not implemented")
}

func RegisterVZConnServiceServer(s *grpc.Server, srv VZConnServiceServer) {
	s.RegisterService(&_VZConnService_serviceDesc, srv)
}

func _VZConnService_NATSBridge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VZConnServiceServer).NATSBridge(&vZConnServiceNATSBridgeServer{stream})
}

type VZConnService_NATSBridgeServer interface {
	Send(*C2VBridgeMessage) error
	Recv() (*V2CBridgeMessage, error)
	grpc.ServerStream
}

type vZConnServiceNATSBridgeServer struct {
	grpc.ServerStream
}

func (x *vZConnServiceNATSBridgeServer) Send(m *C2VBridgeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vZConnServiceNATSBridgeServer) Recv() (*V2CBridgeMessage, error) {
	m := new(V2CBridgeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VZConnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.services.VZConnService",
	HandlerType: (*VZConnServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NATSBridge",
			Handler:       _VZConnService_NATSBridge_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/cloud/vzconn/vzconnpb/service.proto",
}

func (m *V2CBridgeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2CBridgeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CBridgeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintService(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2VBridgeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2VBridgeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VBridgeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintService(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *V2CBridgeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovService(uint64(m.SessionId))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *C2VBridgeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *V2CBridgeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CBridgeMessage{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VBridgeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VBridgeMessage{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *V2CBridgeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: V2CBridgeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: V2CBridgeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2VBridgeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2VBridgeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2VBridgeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
