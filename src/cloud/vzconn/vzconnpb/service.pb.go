// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/vzconn/vzconnpb/service.proto

package vzconnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RegisterVizierAck_RegistrationStatus int32

const (
	ST_UNKNOWN          RegisterVizierAck_RegistrationStatus = 0
	ST_OK               RegisterVizierAck_RegistrationStatus = 1
	ST_FAILED_NOT_FOUND RegisterVizierAck_RegistrationStatus = 2
)

var RegisterVizierAck_RegistrationStatus_name = map[int32]string{
	0: "ST_UNKNOWN",
	1: "ST_OK",
	2: "ST_FAILED_NOT_FOUND",
}

var RegisterVizierAck_RegistrationStatus_value = map[string]int32{
	"ST_UNKNOWN":          0,
	"ST_OK":               1,
	"ST_FAILED_NOT_FOUND": 2,
}

func (RegisterVizierAck_RegistrationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{3, 0}
}

type VizierHeartbeatAck_HeartbeatStatus int32

const (
	HB_UNKNOWN VizierHeartbeatAck_HeartbeatStatus = 0
	HB_OK      VizierHeartbeatAck_HeartbeatStatus = 1
	HB_ERROR   VizierHeartbeatAck_HeartbeatStatus = 2
)

var VizierHeartbeatAck_HeartbeatStatus_name = map[int32]string{
	0: "HB_UNKNOWN",
	1: "HB_OK",
	2: "HB_ERROR",
}

var VizierHeartbeatAck_HeartbeatStatus_value = map[string]int32{
	"HB_UNKNOWN": 0,
	"HB_OK":      1,
	"HB_ERROR":   2,
}

func (VizierHeartbeatAck_HeartbeatStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{5, 0}
}

type CloudConnectRequest struct {
	Topic string     `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Msg   *types.Any `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *CloudConnectRequest) Reset()      { *m = CloudConnectRequest{} }
func (*CloudConnectRequest) ProtoMessage() {}
func (*CloudConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{0}
}
func (m *CloudConnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudConnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudConnectRequest.Merge(m, src)
}
func (m *CloudConnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *CloudConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloudConnectRequest proto.InternalMessageInfo

func (m *CloudConnectRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *CloudConnectRequest) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type CloudConnectResponse struct {
	Topic string     `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Msg   *types.Any `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *CloudConnectResponse) Reset()      { *m = CloudConnectResponse{} }
func (*CloudConnectResponse) ProtoMessage() {}
func (*CloudConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{1}
}
func (m *CloudConnectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudConnectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudConnectResponse.Merge(m, src)
}
func (m *CloudConnectResponse) XXX_Size() int {
	return m.Size()
}
func (m *CloudConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloudConnectResponse proto.InternalMessageInfo

func (m *CloudConnectResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *CloudConnectResponse) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type RegisterVizierRequest struct {
	VizierID *proto1.UUID `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	JwtKey   string       `protobuf:"bytes,2,opt,name=jwt_key,json=jwtKey,proto3" json:"jwt_key,omitempty"`
}

func (m *RegisterVizierRequest) Reset()      { *m = RegisterVizierRequest{} }
func (*RegisterVizierRequest) ProtoMessage() {}
func (*RegisterVizierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{2}
}
func (m *RegisterVizierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterVizierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterVizierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterVizierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterVizierRequest.Merge(m, src)
}
func (m *RegisterVizierRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterVizierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterVizierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterVizierRequest proto.InternalMessageInfo

func (m *RegisterVizierRequest) GetVizierID() *proto1.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *RegisterVizierRequest) GetJwtKey() string {
	if m != nil {
		return m.JwtKey
	}
	return ""
}

type RegisterVizierAck struct {
	Status RegisterVizierAck_RegistrationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pl.services.RegisterVizierAck_RegistrationStatus" json:"status,omitempty"`
}

func (m *RegisterVizierAck) Reset()      { *m = RegisterVizierAck{} }
func (*RegisterVizierAck) ProtoMessage() {}
func (*RegisterVizierAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{3}
}
func (m *RegisterVizierAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterVizierAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterVizierAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterVizierAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterVizierAck.Merge(m, src)
}
func (m *RegisterVizierAck) XXX_Size() int {
	return m.Size()
}
func (m *RegisterVizierAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterVizierAck.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterVizierAck proto.InternalMessageInfo

func (m *RegisterVizierAck) GetStatus() RegisterVizierAck_RegistrationStatus {
	if m != nil {
		return m.Status
	}
	return ST_UNKNOWN
}

type VizierHeartbeat struct {
	Time           int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SequenceNumber int64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (m *VizierHeartbeat) Reset()      { *m = VizierHeartbeat{} }
func (*VizierHeartbeat) ProtoMessage() {}
func (*VizierHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{4}
}
func (m *VizierHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierHeartbeat.Merge(m, src)
}
func (m *VizierHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *VizierHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_VizierHeartbeat proto.InternalMessageInfo

func (m *VizierHeartbeat) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *VizierHeartbeat) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type VizierHeartbeatAck struct {
	Status         VizierHeartbeatAck_HeartbeatStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pl.services.VizierHeartbeatAck_HeartbeatStatus" json:"status,omitempty"`
	Time           int64                              `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	SequenceNumber int64                              `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ErrorMessage   string                             `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *VizierHeartbeatAck) Reset()      { *m = VizierHeartbeatAck{} }
func (*VizierHeartbeatAck) ProtoMessage() {}
func (*VizierHeartbeatAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_935788a74a5b0e3d, []int{5}
}
func (m *VizierHeartbeatAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierHeartbeatAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierHeartbeatAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierHeartbeatAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierHeartbeatAck.Merge(m, src)
}
func (m *VizierHeartbeatAck) XXX_Size() int {
	return m.Size()
}
func (m *VizierHeartbeatAck) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierHeartbeatAck.DiscardUnknown(m)
}

var xxx_messageInfo_VizierHeartbeatAck proto.InternalMessageInfo

func (m *VizierHeartbeatAck) GetStatus() VizierHeartbeatAck_HeartbeatStatus {
	if m != nil {
		return m.Status
	}
	return HB_UNKNOWN
}

func (m *VizierHeartbeatAck) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *VizierHeartbeatAck) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *VizierHeartbeatAck) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("pl.services.RegisterVizierAck_RegistrationStatus", RegisterVizierAck_RegistrationStatus_name, RegisterVizierAck_RegistrationStatus_value)
	proto.RegisterEnum("pl.services.VizierHeartbeatAck_HeartbeatStatus", VizierHeartbeatAck_HeartbeatStatus_name, VizierHeartbeatAck_HeartbeatStatus_value)
	proto.RegisterType((*CloudConnectRequest)(nil), "pl.services.CloudConnectRequest")
	proto.RegisterType((*CloudConnectResponse)(nil), "pl.services.CloudConnectResponse")
	proto.RegisterType((*RegisterVizierRequest)(nil), "pl.services.RegisterVizierRequest")
	proto.RegisterType((*RegisterVizierAck)(nil), "pl.services.RegisterVizierAck")
	proto.RegisterType((*VizierHeartbeat)(nil), "pl.services.VizierHeartbeat")
	proto.RegisterType((*VizierHeartbeatAck)(nil), "pl.services.VizierHeartbeatAck")
}

func init() {
	proto.RegisterFile("src/cloud/vzconn/vzconnpb/service.proto", fileDescriptor_935788a74a5b0e3d)
}

var fileDescriptor_935788a74a5b0e3d = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x53, 0xd3, 0x40,
	0x14, 0xce, 0xb6, 0x80, 0x74, 0x29, 0xb4, 0x2e, 0x38, 0x20, 0x87, 0x58, 0xe3, 0x8c, 0x70, 0x71,
	0xa3, 0xf5, 0x24, 0x9e, 0x28, 0x05, 0xdb, 0x41, 0xd3, 0x99, 0xb4, 0xc5, 0x91, 0x4b, 0x26, 0x49,
	0xd7, 0xb8, 0xd0, 0x64, 0x63, 0x76, 0x03, 0x96, 0x93, 0x3f, 0xc1, 0x9f, 0xc1, 0x4f, 0xf1, 0xc8,
	0x91, 0x93, 0x23, 0xe1, 0xe2, 0x91, 0xbb, 0x17, 0x27, 0x9b, 0x16, 0x29, 0x20, 0x17, 0x4f, 0x7d,
	0xef, 0xe5, 0x7b, 0xdf, 0xfb, 0xbe, 0xb7, 0xbb, 0x85, 0x2b, 0x3c, 0x72, 0x75, 0xb7, 0xcf, 0xe2,
	0x9e, 0x7e, 0x70, 0xe4, 0xb2, 0x20, 0x18, 0xfe, 0x84, 0x8e, 0xce, 0x49, 0x74, 0x40, 0x5d, 0x82,
	0xc3, 0x88, 0x09, 0x86, 0x66, 0xc2, 0x3e, 0x1e, 0x56, 0xf8, 0xf2, 0x33, 0x8f, 0x8a, 0x4f, 0xb1,
	0x83, 0x5d, 0xe6, 0xeb, 0x1e, 0xf3, 0x98, 0x2e, 0x31, 0x4e, 0xfc, 0x51, 0x66, 0x32, 0x91, 0x51,
	0xd6, 0xbb, 0x5c, 0x91, 0x43, 0x98, 0xef, 0xb3, 0x40, 0x8f, 0x63, 0xda, 0xcb, 0xe0, 0x32, 0x1c,
	0x22, 0x1e, 0x7a, 0x8c, 0x79, 0x7d, 0xf2, 0x97, 0xc7, 0x0e, 0x06, 0xd9, 0x27, 0xad, 0x0d, 0xe7,
	0x37, 0x52, 0x7d, 0x1b, 0x2c, 0x08, 0x88, 0x2b, 0x4c, 0xf2, 0x39, 0x26, 0x5c, 0xa0, 0x05, 0x38,
	0x29, 0x58, 0x48, 0xdd, 0x25, 0x50, 0x01, 0xab, 0x05, 0x33, 0x4b, 0xd0, 0x53, 0x98, 0xf7, 0xb9,
	0xb7, 0x94, 0xab, 0x80, 0xd5, 0x99, 0xea, 0x02, 0xce, 0x58, 0xf1, 0x88, 0x15, 0xaf, 0x07, 0x03,
	0x33, 0x05, 0x68, 0x1d, 0xb8, 0x30, 0x4e, 0xca, 0x43, 0x16, 0x70, 0xf2, 0x9f, 0xac, 0x7d, 0xf8,
	0xc0, 0x24, 0x1e, 0xe5, 0x82, 0x44, 0x3b, 0xf4, 0x88, 0x92, 0x68, 0x24, 0x76, 0x0d, 0x16, 0x0e,
	0x64, 0xc1, 0xa2, 0x3d, 0x49, 0x3d, 0x53, 0x2d, 0xe1, 0xb0, 0x8f, 0xd3, 0x0d, 0x84, 0x0e, 0xee,
	0x76, 0x9b, 0xf5, 0x5a, 0x31, 0xf9, 0xf1, 0x68, 0x3a, 0x6b, 0x6b, 0xd6, 0xcd, 0xe9, 0x0c, 0xdf,
	0xec, 0xa1, 0x45, 0x78, 0x6f, 0xef, 0x50, 0x58, 0xfb, 0x64, 0x20, 0x05, 0x14, 0xcc, 0xa9, 0xbd,
	0x43, 0xb1, 0x4d, 0x06, 0xda, 0x31, 0x80, 0xf7, 0xc7, 0xc7, 0xad, 0xbb, 0xfb, 0xa8, 0x09, 0xa7,
	0xb8, 0xb0, 0x45, 0xcc, 0xe5, 0x9c, 0xb9, 0xea, 0x0b, 0x7c, 0xe5, 0xe0, 0xf0, 0x0d, 0xfc, 0xb0,
	0x12, 0xd9, 0x82, 0xb2, 0xa0, 0x2d, 0x1b, 0xcd, 0x21, 0x81, 0xd6, 0x80, 0xe8, 0xe6, 0x57, 0x34,
	0x07, 0x61, 0xbb, 0x63, 0x75, 0x8d, 0x6d, 0xa3, 0xf5, 0xde, 0x28, 0x2b, 0xa8, 0x00, 0x27, 0xdb,
	0x1d, 0xab, 0xb5, 0x5d, 0x06, 0x68, 0x11, 0xce, 0xb7, 0x3b, 0xd6, 0xd6, 0x7a, 0xf3, 0xed, 0x66,
	0xdd, 0x32, 0x5a, 0x1d, 0x6b, 0xab, 0xd5, 0x35, 0xea, 0xe5, 0x9c, 0x66, 0xc0, 0x52, 0x36, 0xb1,
	0x41, 0xec, 0x48, 0x38, 0xc4, 0x16, 0x08, 0xc1, 0x09, 0x41, 0x7d, 0x22, 0x55, 0xe6, 0x4d, 0x19,
	0xa3, 0x15, 0x58, 0xe2, 0xe9, 0xc6, 0x02, 0x97, 0x58, 0x41, 0xec, 0x3b, 0x24, 0x92, 0x96, 0xf3,
	0xe6, 0xdc, 0xa8, 0x6c, 0xc8, 0xaa, 0xf6, 0x1b, 0x40, 0x74, 0x8d, 0x30, 0xf5, 0xfe, 0xe6, 0x9a,
	0x77, 0x7d, 0xcc, 0xfb, 0xcd, 0x06, 0x7c, 0x99, 0x8c, 0x3b, 0xbf, 0x14, 0x97, 0xbb, 0x5b, 0x5c,
	0xfe, 0x36, 0x71, 0xe8, 0x09, 0x9c, 0x25, 0x51, 0xc4, 0x22, 0xcb, 0x27, 0x9c, 0xdb, 0x1e, 0x59,
	0x9a, 0x90, 0xc7, 0x56, 0x94, 0xc5, 0x77, 0x59, 0x4d, 0x5b, 0x83, 0xa5, 0x6b, 0xc3, 0xd3, 0xc5,
	0x36, 0x6a, 0xe3, 0x8b, 0x6d, 0xd4, 0xb2, 0xc5, 0x16, 0xe1, 0x74, 0xa3, 0x66, 0x6d, 0x9a, 0x66,
	0xcb, 0x2c, 0xe7, 0xaa, 0x7b, 0x70, 0x76, 0x67, 0x37, 0xbd, 0xb9, 0xed, 0xcc, 0x1a, 0xfa, 0x00,
	0x8b, 0x57, 0x6f, 0x33, 0xaa, 0x8c, 0xf9, 0xbe, 0xe5, 0xf5, 0x2c, 0x3f, 0xbe, 0x03, 0x91, 0x3d,
	0x05, 0x4d, 0x59, 0x05, 0xcf, 0x41, 0x8d, 0x9d, 0x9c, 0xa9, 0xca, 0xe9, 0x99, 0xaa, 0x5c, 0x9c,
	0xa9, 0xe0, 0x6b, 0xa2, 0x82, 0xe3, 0x44, 0x05, 0xdf, 0x13, 0x15, 0x9c, 0x24, 0x2a, 0xf8, 0x99,
	0xa8, 0xe0, 0x57, 0xa2, 0x2a, 0x17, 0x89, 0x0a, 0xbe, 0x9d, 0xab, 0xca, 0xc9, 0xb9, 0xaa, 0x9c,
	0x9e, 0xab, 0xca, 0xee, 0xab, 0x90, 0x7e, 0xa1, 0xa4, 0x6f, 0x3b, 0x1c, 0xdb, 0x54, 0xbf, 0x4c,
	0xf4, 0x7f, 0xfe, 0xd9, 0xbc, 0x1e, 0x05, 0xce, 0x94, 0x7c, 0x56, 0x2f, 0xff, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xe9, 0x6a, 0x91, 0x75, 0x99, 0x04, 0x00, 0x00,
}

func (x RegisterVizierAck_RegistrationStatus) String() string {
	s, ok := RegisterVizierAck_RegistrationStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VizierHeartbeatAck_HeartbeatStatus) String() string {
	s, ok := VizierHeartbeatAck_HeartbeatStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CloudConnectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudConnectRequest)
	if !ok {
		that2, ok := that.(CloudConnectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *CloudConnectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudConnectResponse)
	if !ok {
		that2, ok := that.(CloudConnectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *RegisterVizierRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterVizierRequest)
	if !ok {
		that2, ok := that.(RegisterVizierRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if this.JwtKey != that1.JwtKey {
		return false
	}
	return true
}
func (this *RegisterVizierAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterVizierAck)
	if !ok {
		that2, ok := that.(RegisterVizierAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *VizierHeartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierHeartbeat)
	if !ok {
		that2, ok := that.(VizierHeartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	return true
}
func (this *VizierHeartbeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierHeartbeatAck)
	if !ok {
		that2, ok := that.(VizierHeartbeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *CloudConnectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vzconnpb.CloudConnectRequest{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloudConnectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vzconnpb.CloudConnectResponse{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterVizierRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vzconnpb.RegisterVizierRequest{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	s = append(s, "JwtKey: "+fmt.Sprintf("%#v", this.JwtKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterVizierAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vzconnpb.RegisterVizierAck{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierHeartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vzconnpb.VizierHeartbeat{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierHeartbeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&vzconnpb.VizierHeartbeatAck{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VZConnServiceClient is the client API for VZConnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VZConnServiceClient interface {
	CloudConnect(ctx context.Context, opts ...grpc.CallOption) (VZConnService_CloudConnectClient, error)
}

type vZConnServiceClient struct {
	cc *grpc.ClientConn
}

func NewVZConnServiceClient(cc *grpc.ClientConn) VZConnServiceClient {
	return &vZConnServiceClient{cc}
}

func (c *vZConnServiceClient) CloudConnect(ctx context.Context, opts ...grpc.CallOption) (VZConnService_CloudConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VZConnService_serviceDesc.Streams[0], "/pl.services.VZConnService/CloudConnect", opts...)
	if err != nil {
		return nil, err
	}
	x := &vZConnServiceCloudConnectClient{stream}
	return x, nil
}

type VZConnService_CloudConnectClient interface {
	Send(*CloudConnectRequest) error
	Recv() (*CloudConnectResponse, error)
	grpc.ClientStream
}

type vZConnServiceCloudConnectClient struct {
	grpc.ClientStream
}

func (x *vZConnServiceCloudConnectClient) Send(m *CloudConnectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vZConnServiceCloudConnectClient) Recv() (*CloudConnectResponse, error) {
	m := new(CloudConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VZConnServiceServer is the server API for VZConnService service.
type VZConnServiceServer interface {
	CloudConnect(VZConnService_CloudConnectServer) error
}

func RegisterVZConnServiceServer(s *grpc.Server, srv VZConnServiceServer) {
	s.RegisterService(&_VZConnService_serviceDesc, srv)
}

func _VZConnService_CloudConnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VZConnServiceServer).CloudConnect(&vZConnServiceCloudConnectServer{stream})
}

type VZConnService_CloudConnectServer interface {
	Send(*CloudConnectResponse) error
	Recv() (*CloudConnectRequest, error)
	grpc.ServerStream
}

type vZConnServiceCloudConnectServer struct {
	grpc.ServerStream
}

func (x *vZConnServiceCloudConnectServer) Send(m *CloudConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vZConnServiceCloudConnectServer) Recv() (*CloudConnectRequest, error) {
	m := new(CloudConnectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VZConnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.services.VZConnService",
	HandlerType: (*VZConnServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CloudConnect",
			Handler:       _VZConnService_CloudConnect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/cloud/vzconn/vzconnpb/service.proto",
}

func (m *CloudConnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudConnectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Msg.Size()))
		n1, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CloudConnectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudConnectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Msg.Size()))
		n2, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RegisterVizierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterVizierRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VizierID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.VizierID.Size()))
		n3, err := m.VizierID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.JwtKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.JwtKey)))
		i += copy(dAtA[i:], m.JwtKey)
	}
	return i, nil
}

func (m *RegisterVizierAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterVizierAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *VizierHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Time))
	}
	if m.SequenceNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.SequenceNumber))
	}
	return i, nil
}

func (m *VizierHeartbeatAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierHeartbeatAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Status))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Time))
	}
	if m.SequenceNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.SequenceNumber))
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudConnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CloudConnectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegisterVizierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.JwtKey)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RegisterVizierAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovService(uint64(m.Status))
	}
	return n
}

func (m *VizierHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovService(uint64(m.Time))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovService(uint64(m.SequenceNumber))
	}
	return n
}

func (m *VizierHeartbeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovService(uint64(m.Status))
	}
	if m.Time != 0 {
		n += 1 + sovService(uint64(m.Time))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovService(uint64(m.SequenceNumber))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CloudConnectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudConnectRequest{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloudConnectResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudConnectResponse{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterVizierRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterVizierRequest{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "proto1.UUID", 1) + `,`,
		`JwtKey:` + fmt.Sprintf("%v", this.JwtKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterVizierAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterVizierAck{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierHeartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierHeartbeat{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierHeartbeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierHeartbeatAck{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CloudConnectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudConnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudConnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudConnectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudConnectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudConnectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterVizierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterVizierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterVizierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &proto1.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterVizierAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterVizierAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterVizierAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RegisterVizierAck_RegistrationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierHeartbeatAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierHeartbeatAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierHeartbeatAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VizierHeartbeatAck_HeartbeatStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
