// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	gomock "github.com/golang/mock/gomock"
	vzconnpb "pixielabs.ai/pixielabs/src/cloud/vzconn/vzconnpb"
	reflect "reflect"
)

// MockmessageProcessor is a mock of messageProcessor interface
type MockmessageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockmessageProcessorMockRecorder
}

// MockmessageProcessorMockRecorder is the mock recorder for MockmessageProcessor
type MockmessageProcessorMockRecorder struct {
	mock *MockmessageProcessor
}

// NewMockmessageProcessor creates a new mock instance
func NewMockmessageProcessor(ctrl *gomock.Controller) *MockmessageProcessor {
	mock := &MockmessageProcessor{ctrl: ctrl}
	mock.recorder = &MockmessageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmessageProcessor) EXPECT() *MockmessageProcessorMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockmessageProcessor) Run() error {
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockmessageProcessorMockRecorder) Run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockmessageProcessor)(nil).Run))
}

// Stop mocks base method
func (m *MockmessageProcessor) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockmessageProcessorMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockmessageProcessor)(nil).Stop))
}

// ProcessMessage mocks base method
func (m *MockmessageProcessor) ProcessMessage(arg0 *vzconnpb.CloudConnectRequest) error {
	ret := m.ctrl.Call(m, "ProcessMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage
func (mr *MockmessageProcessorMockRecorder) ProcessMessage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockmessageProcessor)(nil).ProcessMessage), arg0)
}

// GetOutgoingMessage mocks base method
func (m *MockmessageProcessor) GetOutgoingMessage() (*vzconnpb.CloudConnectResponse, error) {
	ret := m.ctrl.Call(m, "GetOutgoingMessage")
	ret0, _ := ret[0].(*vzconnpb.CloudConnectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutgoingMessage indicates an expected call of GetOutgoingMessage
func (mr *MockmessageProcessorMockRecorder) GetOutgoingMessage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutgoingMessage", reflect.TypeOf((*MockmessageProcessor)(nil).GetOutgoingMessage))
}
