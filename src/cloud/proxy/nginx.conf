# File borrowed from openresty config.

# Environment variable need to be specified here (and below).
env PL_AUTH0_DOMAIN;
env PL_AUTH0_CLIENT_ID;
env PL_LD_CLIENT_ID;
env PL_DOMAIN_NAME;
env PL_API_SERVICE_HTTP;
env PL_SEGMENT_UI_WRITE_KEY;
env ANALYTICS_ENABLED;
env ANNOUNCEMENT_ENABLED;
env ANNOUNCE_WIDGET_URL;

worker_processes  auto;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;

    resolver kube-dns.kube-system.svc.cluster.local valid=5s;

    # Tune nginx keepalives to work with the GCP HTTP(S) Load Balancer:
    keepalive_timeout 650;
    keepalive_requests 10000;

    proxy_cache_path   /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=100m inactive=1d;
    proxy_temp_path    /var/cache/nginx/tmp;

    ssl_buffer_size 4k;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1h;
    ssl_protocols TLSv1.2 TLSv1.3;

    upstream httpapisvc {
         # The nginx parser does not seem to understand that the $api_service
         # variable contains the port. Just referring to it as api-service since this
         # works in a service agnosistic way.
         server api-service:51200;
         keepalive 128;
    }

    upstream grpcapisvc {
         # The nginx parser does not seem to understand that the $api_service
         # variable contains the port. Just referring to it as api-service since this
         # works in a service agnosistic way.
         server api-service:51200;
         keepalive 128;
    }

    # This is the default fallback server if none of the subdomains match.
    # It is only used to serve up the main page and API.
    server {
        listen [::]:56000 ssl http2 default_server;
        listen 56000 ssl http2;
        server_name _;

        ssl_certificate /certs/tls.crt;
        ssl_certificate_key /certs/tls.key;

        include /usr/local/openresty/nginx/conf/pixie_compression.conf;
        include /usr/local/openresty/nginx/conf/pixie_vars.conf;
        include /usr/local/openresty/nginx/conf/pixie_server_defaults.conf;
        include /usr/local/openresty/nginx/conf/pixie_health_check.conf;
        include /usr/local/openresty/nginx/conf/pixie_api.conf;

        if ($http_x_forwarded_proto = "http") {
            return 307 https://$host$request_uri;
        }

        location /install.sh {
          root /installer;
          try_files "/install.sh" =404;
        }

        location / {
          return 307 https://work.$domain_name$request_uri;
        }
    }

    # This is the server that we use for all the locations that don't have a subdomain.
    # This just serves the minimal pages necessary to authenticate and get into a subdomain specfic site.
    server {
        listen [::]:56000 ssl http2;
        listen 56000 ssl http2;
        server_name work.withpixie.ai
                    work.dev.withpixie.dev
                    work.testing.withpixie.dev
                    work.staging.withpixie.dev
                    work.nightly.withpixie.dev;

        error_page 404 = @error404;
        include /usr/local/openresty/nginx/conf/pixie_compression.conf;
        include /usr/local/openresty/nginx/conf/pixie_vars.conf;
        include /usr/local/openresty/nginx/conf/pixie_server_defaults.conf;
        include /usr/local/openresty/nginx/conf/pixie_health_check.conf;
        include /usr/local/openresty/nginx/conf/pixie_api.conf;

        # HSTS config.
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

        if ($http_x_forwarded_proto = "http") {
            return 307 https://$host$request_uri;
        }

        # Disable caching by default.
        add_header Cache-Control "no-store";

        location /install.sh {
          root /installer;
          try_files "/install.sh" =404;
        }

        location / {
            gzip_static off;
            root   /assets;
            try_files $uri "/index.html";
        }

        # Cache all contents hosted under /static. This is actually the same as the contents hosted under '/'
        # but nginx knows to cache these and webpack puts all the hashed assets in here.
        location ~ ^/static(/.*)$ {
            gzip_static off;
            root   /assets;
            include /usr/local/openresty/nginx/conf/pixie_cache.conf;
            include /usr/local/openresty/nginx/conf/pixie_filter.conf;
            try_files $1 "/index.html";
        }

        location /auth-complete {
            root   /assets;
            include /usr/local/openresty/nginx/conf/pixie_filter.conf;
            try_files $uri "/index.html";
        }

        location ~ ^/docs(?:/(.*))?$ {
            error_page 401 @auth_err;
            return 307 https://docs.pixielabs.ai/$1;
        }

        location @auth_err {
          return 307 https://work.$domain_name/login?location=$uri;
        }

        location @error404 {
          return 307 https://$domain_name?not_found=$uri;
        }
    }

    # This is the proxy server for segment.
    server {
        listen [::]:56000 ssl http2;
        listen 56000 ssl http2;
        server_name segment.withpixie.ai
                    segment.dev.withpixie.dev
                    segment.staging.withpixie.dev;

        include /usr/local/openresty/nginx/conf/pixie_compression.conf;

        location /v1/projects {
            proxy_pass https://cdn.segment.com/v1/projects;
            proxy_cache my_cache;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        }

        location /analytics.js/v1 {
            proxy_pass https://cdn.segment.com/analytics.js/v1;
            proxy_cache my_cache;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        }

        location / {
            proxy_pass https://api.segment.io;
            proxy_cache my_cache;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        }
    }

    # This is the proxy server for slackin.
    server {
        listen [::]:56000 ssl http2;
        listen 56000 ssl http2;
        server_name slackin.withpixie.ai
                    slackin.staging.withpixie.dev;

        include /usr/local/openresty/nginx/conf/pixie_compression.conf;

        location / {
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            set $slackin "slackin.slackin.svc.cluster.local:58000";
            proxy_pass http://$slackin;
        }
    }

    # This is the redirect to the netlify hosted site for docs.
    server {
        listen [::]:56000 ssl http2;
        listen 56000 ssl http2;
        server_name docs.withpixie.ai
                    docs.staging.withpixie.dev
                    docs.dev.withpixie.dev;

        location / {
          return 307 https://docs.pixielabs.ai$request_uri;
        }
    }
}
