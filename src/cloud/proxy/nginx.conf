# File borrowed from openresty config.

# Environment variable need to be specified here (and below).
env PL_AUTH0_DOMAIN;
env PL_AUTH0_CLIENT_ID;
env PL_DOMAIN_NAME;
env PL_API_SERVICE_HTTP;
env PL_DOCS_SERVICE_HTTP;

worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;

    resolver kube-dns.kube-system.svc.cluster.local valid=5s;

    gzip  on;
    # Compress proxied traffic.
    gzip_proxied any;
    gzip_vary on;

    # Tune nginx keepalives to work with the GCP HTTP(S) Load Balancer:
    keepalive_timeout 650;
    keepalive_requests 10000;

    # This is the default fallback server if none of the subdomains match.
    # It is only used to serve up the main page and API.
    server {
        listen [::]:56000 ssl default_server;
        listen 56000 ssl;
        server_name _;

        ssl_certificate /certs/tls.crt;
        ssl_certificate_key /certs/tls.key;

        include /usr/local/openresty/nginx/conf/pixie_vars.conf;
        include /usr/local/openresty/nginx/conf/pixie_server_defaults.conf;
        include /usr/local/openresty/nginx/conf/pixie_api.conf;

        location / {
          return 301 https://$domain_name;
        }

    }

    # This is the server that we use for all the locations that don't have a subdomain.
    # This just serves the minimal pages necessary to authenticate and get into a subdomain specfic site.
    server {
        listen [::]:56000 ssl;
        listen 56000 ssl;
        server_name withpixie.ai
                    dev.withpixie.dev
                    testing.withpixie.dev
                    staging.withpixie.dev
                    nightly.withpixie.dev;

        error_page 404 = @error404;

        include /usr/local/openresty/nginx/conf/pixie_vars.conf;
        include /usr/local/openresty/nginx/conf/pixie_server_defaults.conf;
        include /usr/local/openresty/nginx/conf/pixie_health_check.conf;
        include /usr/local/openresty/nginx/conf/pixie_api.conf;

        location / {
            root   /assets;
            include /usr/local/openresty/nginx/conf/pixie_cache.conf;
            include /usr/local/openresty/nginx/conf/pixie_filter.conf;
            try_files $uri "/index.html";
        }

        location ~ ^/docs/? {
            return 404;
        }

        location @error404 {
          return 301 https://$domain_name?not_found=$uri;
        }
    }

    # This serves the id page so that users can login to Pixie.
    server {
        listen [::]:56000 ssl;
        listen 56000 ssl;
        server_name id.withpixie.ai
                    id.dev.withpixie.dev
                    id.testing.withpixie.dev
                    id.staging.withpixie.dev
                    id.nightly.withpixie.dev;

        error_page 404 = @error404;

        include /usr/local/openresty/nginx/conf/pixie_vars.conf;
        include /usr/local/openresty/nginx/conf/pixie_server_defaults.conf;
        include /usr/local/openresty/nginx/conf/pixie_health_check.conf;
        include /usr/local/openresty/nginx/conf/pixie_api.conf;

        location / {
            root   /assets;
            include /usr/local/openresty/nginx/conf/pixie_cache.conf;
            include /usr/local/openresty/nginx/conf/pixie_filter.conf;
            try_files $uri "/subdomain-index.html";
        }

        location ~ ^/docs/? {
            return 404;
        }

        location @error404 {
          return 301 https://$domain_name/?not_found=$uri;
        }
    }

    # This serves a specific subdomain site, ex: subdomain>.withpixie.ai.
    server {
        listen [::]:56000 ssl;
        listen 56000 ssl;
        server_name
                  "~^(?<subdomain>[a-zA-Z0-9\-]+)\.withpixie\.ai"
                  "~^(?<subdomain>[a-zA-Z0-9\-]+)\.dev\.withpixie\.dev"
                  "~^(?<subdomain>[a-zA-Z0-9\-]+)\.testing\.withpixie\.dev"
                  "~^(?<subdomain>[a-zA-Z0-9\-]+)\.staging\.withpixie\.dev"
                  "~^(?<subdomain>[a-zA-Z0-9\-]+)\.nightly\.withpixie\.dev";
        ssl_certificate /certs/tls.crt;
        ssl_certificate_key /certs/tls.key;

        error_page 404 = @error404;
        error_page 401 = @error401;

        include /usr/local/openresty/nginx/conf/pixie_vars.conf;
        include /usr/local/openresty/nginx/conf/pixie_server_defaults.conf;
        include /usr/local/openresty/nginx/conf/pixie_health_check.conf;
        include /usr/local/openresty/nginx/conf/pixie_api.conf;

        if ($http_x_forwarded_proto = "http") {
            return 301 https://$host$request_uri;
        }

        # Block access the the subdomain if it does not exist and redirect toe registration page.
        access_by_lua_block {
            local cjson = require "cjson"

            -- Make request to check site to make sure it's available.
            local req = "/api/site/check?domain_name=" .. ngx.var.subdomain
            local res = ngx.location.capture(req)
            local failed_redirect = ngx.var.scheme
                                    .."://"
                                    ..ngx.var.domain_name
                                    .."/missing_site?domain_name="
                                    ..ngx.var.subdomain
            if res.status ~= ngx.HTTP_OK then
                ngx.redirect(failed_redirect)
            end

            local res_decoded = cjson.decode(res.body)
            if res_decoded.available then
                ngx.redirect(failed_redirect)

            end

            ngx.exit(ngx.OK)
        }

        location / {
            root   /assets;
            include /usr/local/openresty/nginx/conf/pixie_cache.conf;
            include /usr/local/openresty/nginx/conf/pixie_filter.conf;
            try_files $uri "/subdomain-index.html";
        }

        # Treat trailing slashes as optional.
        location ~ ^/docs(?:/(.*))?$ {
            auth_request /api/authorized;
            proxy_pass https://$docs_service/docs/$1;
        }

        # Treat trailing slashes as optional.
        location ~ ^/assets/downloads(?:/(.*))?$ {
            auth_request /api/authorized;
            root /assets/downloads/;
            try_files /$1 =404;
        }

        location /robots.txt {
            return 200 "User-agent: *\nDisallow: /\n";
        }

        location @error401 {
          return 301 https://id.$domain_name/login?redirect=$uri&domain_name=$subdomain;
        }

        location @error404 {
          return 301 https://$subdomain.$domain_name?not_found=$uri;
        }
    }
}
