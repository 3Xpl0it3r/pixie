// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x31\x0a\x02\x31\x10\x45\xfb\x39\xc5\x4f\xa7\x57\x48\x67\x23\x58\x28\x88\xa5\x58\x0c\xeb\xec\x1a\xd8\x24\x4b\x66\x14\x17\xd9\xbb\x0b\x81\x88\x62\x37\xbc\x79\xbc\x2f\x4f\x93\x74\x85\xcd\x93\xe0\x78\x97\x32\xe3\x45\x00\x17\x0b\x3d\x77\xa6\xab\x76\x1d\x38\x8a\xc7\xc9\x4a\x48\x83\x5b\x7b\x6c\x9a\xb1\x4b\x7d\x76\xb4\x10\xd5\xc4\x0f\xae\xa9\x60\x12\xd5\xe3\xdc\x3e\xee\xf2\x6f\x57\xf1\x21\x45\x43\x4e\x9f\x11\x02\xba\x1b\xa7\x41\xc6\x3c\x7c\x43\x0b\x51\xd4\x38\x4e\x7b\xf5\xd8\x8e\x99\xcd\xd1\xf2\x0e\x00\x00\xff\xff\xc2\xab\x64\xad\xc7\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 199, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x5d\x6f\xdb\x38\xd6\xbe\xf7\xaf\x38\x9d\x5e\x34\x01\x82\x62\xf0\xe2\x9d\xc1\xc2\x57\xab\xb1\xdd\xa9\x36\x89\xe3\x8d\x9d\x76\x07\x8b\xa2\xa0\xc5\x63\x8b\x88\x44\x6a\x48\xca\x89\x77\xd1\xff\xbe\x38\x24\x25\x91\xb6\x32\xdd\x0c\xf6\xce\xe2\xc7\x73\x9e\xf3\xc9\x43\x1a\x9f\x2d\x4a\x0e\xf6\xd8\x20\xfc\xbd\x45\x7d\x84\x7f\x4f\x00\x5a\x83\x7a\x0a\x0f\x06\x75\x2e\x77\xea\xcd\x04\x40\xe9\xfd\x14\xee\xf4\xbe\xfb\xa6\x15\x6b\xb4\x56\xc8\xbd\xf1\x2b\xbb\xaf\x6e\x36\xb3\x56\x8b\x6d\x6b\x31\xcc\x0f\xdf\x01\x8f\x06\xcd\x14\xfe\xd9\x8b\xf9\x42\x13\x45\xd5\x1a\x8b\xfa\x42\xf0\x29\xe4\xf3\x37\x97\x53\x98\xf9\x91\x4e\x72\x58\xf0\xcb\x71\xc9\x6a\xbc\x90\xac\xc6\x29\xac\xad\x16\x72\xff\xf2\x62\x12\x13\xcf\xc4\x92\x66\x4a\x4a\x2c\xac\x50\xf2\x5c\xe6\x30\x37\x00\x8a\x4c\x5b\xb1\x63\x85\xbd\x60\xe1\xc7\xe6\xd8\xe0\x14\xb2\xe8\xcb\x41\xdc\xe4\xdd\x10\x6d\x64\xad\x55\x85\xaa\x9b\x0a\x2d\x5e\x08\xd9\xb4\xb6\xa3\x7d\x05\x45\xab\x8d\xd2\x2b\x65\xa6\x90\x4b\x7b\x05\xcc\x89\x9c\x42\x16\xed\xc9\xdc\x18\x81\x5f\x75\xcc\x1f\xf2\x79\x87\x71\x99\x2e\xbe\x47\xd3\x56\x67\x62\x3f\x08\xac\xf8\xa9\xec\x1d\x0d\x06\x0d\xa2\xb5\x0b\x69\x85\x3d\x5e\x0b\xc9\xaf\x26\x00\x00\x1a\x7f\x6f\x85\x46\x9e\xe9\x3d\x2d\x26\x83\x8e\x2f\xff\xf2\x02\xbd\x64\xf9\xba\xdd\xef\xd1\x90\x42\x5f\x26\x13\x80\xb7\xb0\x2e\xb4\x68\x6c\xbd\xd7\x80\x92\x37\x4a\x48\x6b\xae\x40\xe3\x0e\x35\x58\x05\x5c\x15\x06\x84\x84\xa2\x52\x2d\x67\x8d\x78\xdf\x68\x65\xd5\x04\xa0\x12\x07\xfc\x24\xf0\x89\xe8\xdc\x84\xdf\xb7\x68\x19\x67\x96\x79\x27\x77\x2b\x66\x4a\x5a\x94\xd6\x44\x3e\xbe\x39\x99\xa2\xe5\xc6\xf1\x20\x38\xcf\x28\x05\xf3\xb3\x23\x50\xeb\x64\xe2\x8d\xd7\x69\x8e\x4d\xa5\x8e\xf0\x88\x47\x33\x01\xe0\xee\xab\x46\x69\xaf\xf1\x48\x02\xe6\xf1\x80\xc7\x4f\xd6\x44\xf0\xe9\x52\x8f\x9e\xad\xf2\x0e\x9a\x35\x22\x60\x66\xab\xbc\x07\xf3\xa3\x11\x4a\x98\x9c\x7c\x9b\x4c\xe2\xac\xbf\x6d\x2d\x23\x4f\xb8\xc4\x9f\x69\x64\x16\x43\xf4\x27\xd9\x04\x7f\xe5\xd8\x68\x2c\x98\x45\x7e\xa1\x91\x19\x0a\xd0\x1f\xc2\x02\x03\x4c\x23\x48\xf5\x04\x85\x03\xe0\x70\x10\x0c\x9a\xe7\xa0\xd1\x0f\x97\x13\x80\x87\x86\x33\x8b\x9f\xc4\xbf\x84\xcb\xab\x9d\xd8\x5f\x84\x40\xa1\x38\xc9\xe7\x6f\xae\xe0\x10\x4d\x4e\x61\xc1\x85\x65\xdb\x2a\xd9\x32\x92\xe2\x9e\x72\x62\xa2\x33\x8b\x01\xcc\x91\xe2\x6e\xfe\x82\x81\x7f\x51\xaa\x42\x26\x07\x38\x6f\xab\xc1\x66\x1d\x80\xff\x1e\xdf\xe9\x15\x8c\x4b\xe1\x85\xe9\x2b\x64\xa7\x4c\x52\x29\x2f\xcf\x2b\xe7\x1a\x6d\x5a\x2c\x2f\x58\x54\x47\x63\x94\xa8\x9e\x5e\x8e\x55\xd8\x5c\x1e\x84\xa7\x73\x81\x35\x13\x55\x5f\x25\x29\xe7\xb5\xb1\xcb\xb8\x72\x5e\x41\xc5\x4e\x86\x2e\xbb\x03\x80\x60\x52\xfd\x56\xa8\x6b\x61\x8c\x50\xd2\x5c\x50\xa9\xef\x1d\xd8\xa6\x93\x29\xe1\x68\x62\x00\xf7\x3e\xf4\xd0\x77\x7a\xdf\x5b\x4e\xe9\x7d\x8f\xaa\x86\xf1\x01\x31\x5a\x4c\x68\xfd\xd1\xf4\x6d\x32\x71\x61\xdd\xc1\xbb\xb0\x0e\xfe\x9a\x00\x24\xe7\xc5\x04\x20\x35\xcd\x04\xa0\x11\x85\x6d\x75\xb2\x46\xe9\xfd\xf2\x64\x5b\xa0\x37\x0c\x08\x93\x35\x8d\x56\x07\xe4\x51\x4c\x74\x5c\x02\xb9\xef\x51\x91\xa4\x97\x87\x61\x95\x19\xc1\x89\x83\xc5\x81\x31\xc9\xaa\xa3\x15\x85\xb9\x6b\xac\xa2\xaa\x1e\x85\x63\x27\x28\xde\x3c\x44\x88\xdb\x6e\x55\xab\xd7\x88\xf2\xa5\x7d\xee\xa8\x78\x21\xe8\xc6\x01\xc6\x77\xfd\x57\x9c\x7b\xa2\x3e\xc7\x4e\x8c\xf5\x48\xd9\x38\xd8\x2a\x94\x99\xcc\xde\x9a\x29\x7c\xa8\x14\xb3\xbe\x7e\x9a\x62\x58\xd5\xe1\x25\x49\xff\x3f\x81\x45\xd9\xd6\x23\xa7\xe5\xda\x32\x8b\x4e\x40\xb6\x58\x7f\x7d\x58\x5e\x2f\xef\x3e\x2f\xc3\xd7\x6a\xb1\x9c\xe7\xcb\x5f\xc3\xd7\xfd\xc3\x72\x39\x7c\x7d\xc8\xf2\x9b\xc5\x3c\x7c\x6c\x16\xf7\xb7\xf9\x32\xdb\x2c\xe6\xa3\x92\x86\x36\xc0\x0b\xca\x36\x91\xa0\xb7\x90\x49\x40\x2e\x6c\xe8\x20\x40\x15\xd4\x5a\x80\xd8\x01\x73\xb9\x09\x25\x33\x50\x2b\x2e\x76\x02\x39\xd8\x12\xc1\x3b\xcb\xe2\xb3\x85\xed\x11\x84\x34\xa8\xc9\x55\xa0\x34\x70\xaa\x78\xf4\xbb\x28\x99\x66\x05\x95\xf9\xf7\x4e\xc8\xa6\x14\x74\x1c\x17\x55\xcb\xd1\xd0\x21\xe2\x36\x48\x87\xf7\x88\xc7\xad\x62\x9a\x03\x93\x1c\x1a\x66\x3c\x80\xaa\x6b\x26\xb9\xdb\x4e\x8c\x17\xf3\x7c\xe3\xe9\x82\xc1\x0a\x8b\x81\xaf\xac\x8e\xe3\xa4\x8b\x52\x19\x94\xc0\x64\xd2\xd1\x80\xe9\x1b\x89\xf7\x1d\x2d\x2e\xe8\x8c\x32\xe0\x1a\x84\xb7\x8e\x54\xb2\xc5\x96\xcc\x82\xb0\x60\x4a\xd5\x56\x1c\x6a\x75\x40\xb7\x88\x44\xbd\x33\xa1\x17\xa3\xae\x83\x06\x25\x19\x86\x51\x4a\x36\x5a\x90\x77\x2d\xdb\x76\x5a\xac\x17\x37\x8b\xd9\xe6\x0f\xe2\x81\xda\xa1\x10\x0e\xd7\x49\x38\x5c\x7f\x5d\xdd\xcd\xc3\xaf\xf5\xa7\x59\xf7\x6b\x76\x9f\xaf\x36\xe1\x63\x99\xdd\x2e\xd6\xab\x6c\xb6\x18\xd2\x62\xb4\x7f\x72\xf8\x8f\x42\xf2\x97\xda\xb7\x93\x42\x13\xc2\x99\xda\x15\xd7\x62\xf6\xa3\x35\xb3\x45\x89\x3c\x97\x1c\x9f\x5d\x7b\x97\x4b\xfb\x85\x7a\x1e\x0a\xea\x31\x70\x17\xed\x3d\xbb\x0d\xdb\x9e\x90\xa2\x38\xa1\xf8\xe2\xf8\x0c\x6a\xe7\xac\x69\xd9\xd6\x9b\xdf\x96\x68\x62\xe7\xf9\xfe\x61\xa7\x34\xd9\xd6\xb2\xad\x63\xe1\x9a\x61\x07\xf4\xb9\x44\x5b\xa2\x0e\xc1\x42\x11\xc5\xa2\xcd\xb4\x0f\x2c\x39\x9f\xf0\xbd\xc0\x27\x51\x55\x50\xb3\x47\xef\xda\x10\x7f\x80\xcf\x58\xb4\xae\x2a\x91\x9c\xe1\x2b\xdb\x59\x2a\x52\x04\x3e\x94\x23\x88\xf9\xfd\x41\xff\x3a\xe6\x1f\xdf\x7f\x47\x66\xd8\x29\x5d\x33\x4b\x8d\x91\x4f\x38\x22\xdb\x67\x9f\x09\xad\xf8\x53\x29\x8a\xd2\x45\xfb\x16\x51\x42\xc3\xb4\x41\x4e\x69\x79\x1e\xc3\xaa\x0f\x74\x1f\xe4\x6c\xbb\xb6\xaa\x81\x46\x19\xe1\xf8\x92\x7e\xbd\xcc\x3c\xee\xf8\x13\x83\x9e\x72\x20\x5e\x0c\x0e\xac\x12\xfc\x2a\xb2\x4f\x67\xc0\xf7\xee\xa0\x5b\xf4\xe3\xb1\xb1\xde\x42\x56\x55\x89\x4b\xc9\x2d\xc8\x8a\x32\xf2\x3e\x91\x34\xc1\xc7\xeb\xc4\xba\x49\xfc\x0c\x46\xa5\x96\x9a\x09\x89\x9a\xa2\xad\xf5\x07\xc8\xe9\xb9\x39\x5e\xb4\x43\xdc\x0e\xcb\x6a\x34\x86\xed\x93\xa1\xae\x8d\x8d\x47\x8c\x65\xda\xce\x54\x2b\xad\x8b\xbf\xe1\x18\xb9\xfe\x8b\x59\x1c\x50\x7a\xaf\x8e\x80\xb9\xa6\x6a\x23\x6a\x4c\x68\x50\x5b\x75\x32\xd8\x01\xae\x14\xff\x53\x5a\xb5\xe6\xd5\x6a\x15\x9d\x19\xdd\x45\x38\xb5\xa9\xbf\x2d\x20\xa9\x46\xb3\x9d\x9a\x7e\x78\xdc\x1e\xae\xde\x85\x36\x3c\x52\xc1\x87\x3a\xc7\x1d\xa3\xe0\x77\x0e\xa0\x2a\x2e\x95\x2d\x43\x6c\x3d\x4a\xf5\x24\xc9\xff\xb3\x75\x72\x6c\xd1\xbe\xb0\xde\x40\x89\xac\xb2\xe5\x91\xb6\x96\xc8\xb4\xdd\x22\xb3\xbe\x40\x68\x2c\x50\x1c\x90\xd3\x61\xa3\x71\xdf\x56\x4c\x83\x90\x16\x35\xf5\x4b\xee\xc4\xb1\xa5\x4f\x88\x70\xb3\x20\x38\x8d\xa6\x51\x92\x13\x03\xab\xdc\x3d\x16\x8d\x35\x81\xc4\xc7\x45\x76\xb3\xf9\xf8\xdb\x39\x89\x56\x46\x34\x5c\x0d\x19\x10\x0b\xff\x2a\x40\x27\xa8\x82\x95\x78\x16\x08\x33\xba\x99\x3a\x06\xc2\x00\x35\x70\x82\x77\xb9\x36\xe8\x70\x05\x5b\x97\xfa\xf2\x9d\x85\xdf\x5b\xd4\x47\x97\x5b\x94\x26\x46\xd5\x18\xdc\x16\xce\x31\x8d\x06\xeb\x6d\x85\x06\x3e\x6e\x36\xab\x77\x06\x7e\xfa\xf1\xc7\xe0\xfd\xde\x7e\xe3\xe4\x5d\xe9\xdb\x2b\x77\x6f\x16\x66\xe0\x1a\xf4\xf8\xf5\x7e\x35\xeb\x34\xa0\xe2\xb9\xd5\xc8\x1e\xcd\x7b\x07\x50\xaa\x06\x7d\x69\x62\xb6\x3f\x3c\x3b\xc5\x1d\x6e\x41\x44\xb7\xac\x78\xa4\xa3\x5a\x48\x74\x2a\x6b\x34\x6d\x4d\x85\x04\x02\x23\xcf\x24\xf0\x9c\xe7\xeb\xd9\xdd\x72\xb9\x98\x6d\x5c\x8f\x73\x6a\x67\xea\xfc\xc9\x37\x4f\x25\xca\x53\x43\x0b\x3f\xd2\x68\x55\xa0\x31\x54\x47\xba\xe5\x9d\x0d\x56\xf3\x6c\xe3\x1b\x29\x8f\xeb\x6f\x90\xbe\x63\xe8\x34\xf7\x66\xa7\x21\xa9\x2c\x18\x4a\x61\x26\x8f\xa0\x5c\x05\xdc\xb5\xda\x1f\x2d\x3e\x8c\x1d\x3e\x1a\x60\x5b\xd5\x7a\x13\x3c\x85\x52\x29\x6c\x1c\x9b\x4a\x9f\x52\x39\xd7\x31\x70\x79\x62\x06\xac\x3e\x86\xf8\xf3\x02\x3c\xa5\x1d\x13\x15\xf6\x51\x43\xb7\x67\x21\x81\xc1\x96\xf1\xc4\x80\x4e\xc9\x45\xd7\x25\x76\xd5\x23\xbe\x15\xbb\xec\x6b\x98\x31\xb6\xd4\xaa\xdd\x97\x0b\x77\x93\x18\xbb\x89\xc4\x17\xfa\xb4\x13\xee\x2a\x4b\x92\xd6\x5d\x05\xfb\xd8\xc5\x70\x52\x8c\xd2\xeb\x7a\x72\x4d\xef\x67\x3f\xa1\x36\xe2\xa4\x18\x79\x09\x2f\xcf\x9c\x5e\xb6\x1a\x8d\xd6\x1e\x67\xe3\x93\xe7\x8f\x4d\x5d\xc1\xd3\xaa\x5a\x55\x4c\x62\x5f\x67\x5d\x5b\xd3\x7f\xf9\x02\xd7\xe7\xf9\x9c\x59\xf6\xfd\xe5\xb2\xad\x97\x8a\xa3\x09\xb5\xd0\x0d\xe4\xd2\x58\xdd\xd2\xfd\x02\x79\x3a\xe9\x6d\x7a\x7b\x5e\xa1\x1b\x8d\x07\xa1\x5a\xb3\x1e\x33\xfa\xd9\x7c\x72\x7e\x9c\xba\x32\x7d\xa2\xf4\x4e\x6d\x32\xce\x35\x9a\xe4\x9c\xb0\xea\x11\xe5\xf9\xe5\x68\xb8\xe2\xbb\xad\x67\xd7\x61\xe1\xe6\x6e\x84\x7c\x4c\xf6\xbe\x85\xfb\xef\x3c\xce\x39\xf4\xd3\x37\xb9\xef\xdc\x80\xcf\x2e\x5a\xaf\x14\xd3\x3d\xc0\x85\x23\xda\xcb\x9c\x9e\xb1\x70\x1e\x78\xae\xba\xd5\x31\x83\x83\x30\x7f\x5b\xdf\x2d\xff\x0c\x89\xf4\xc1\xf0\x55\x9a\x02\x55\xa7\x8e\x65\x9a\xb5\xaf\x12\xfe\x82\xfe\x27\x4f\x99\x21\x3d\x52\xd5\xfb\x5b\x4c\xf4\x8a\xed\x60\x00\x92\x2b\xa6\xfb\xbc\xc9\x97\x0f\xff\xf8\x9a\xdd\xce\x7f\xfe\xff\x6e\x68\x9e\xdd\x7f\xce\x97\xe9\xd8\xec\x6e\xb9\xc9\xf2\xe5\xe2\xfe\xeb\x7a\xb1\xf9\xfa\x5b\x76\x7b\xb3\x1e\x9f\x1a\xc1\x4b\x17\x6c\x16\xb7\xab\x1b\x2a\x82\x1e\xa4\x4f\x81\xe1\x89\xdd\xff\x6d\xa1\x93\xd8\x35\x25\xfb\xbf\x9f\x7e\x4e\x74\x4c\xdf\x26\x5e\x53\x43\xc7\x5f\x36\xa2\x37\x2d\xef\xf1\xf3\x67\xa0\xf3\x8d\xd1\xd3\x95\x4f\xba\x17\x1e\x7e\x26\xdf\xfe\x13\x00\x00\xff\xff\x8d\xfe\x2e\x10\x9e\x19\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 6558, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
