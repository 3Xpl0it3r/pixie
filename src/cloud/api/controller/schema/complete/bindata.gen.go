// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x31\x0a\x02\x31\x10\x45\xfb\x39\xc5\x4f\xa7\x57\x48\x67\x23\x58\x28\x88\xa5\x58\x0c\xeb\xec\x1a\xd8\x24\x4b\x66\x14\x17\xd9\xbb\x0b\x81\x88\x62\x37\xbc\x79\xbc\x2f\x4f\x93\x74\x85\xcd\x93\xe0\x78\x97\x32\xe3\x45\x00\x17\x0b\x3d\x77\xa6\xab\x76\x1d\x38\x8a\xc7\xc9\x4a\x48\x83\x5b\x7b\x6c\x9a\xb1\x4b\x7d\x76\xb4\x10\xd5\xc4\x0f\xae\xa9\x60\x12\xd5\xe3\xdc\x3e\xee\xf2\x6f\x57\xf1\x21\x45\x43\x4e\x9f\x11\x02\xba\x1b\xa7\x41\xc6\x3c\x7c\x43\x0b\x51\xd4\x38\x4e\x7b\xf5\xd8\x8e\x99\xcd\xd1\xf2\x0e\x00\x00\xff\xff\xc2\xab\x64\xad\xc7\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 199, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6f\xdb\x38\x12\x7f\xf7\x5f\x31\xd9\x3e\x34\x05\x82\x62\x71\xb8\x5d\x1c\xfc\x74\x5a\x5b\xdd\xea\xe2\x38\xbe\xd8\x69\x6f\xb1\x28\x0a\x5a\x1c\x5b\x44\x24\x52\x4b\x52\x49\x7c\x87\xfe\xef\x87\x21\xa9\x0f\xca\x4a\x8b\x2e\xf6\x4d\xe2\xc7\x6f\x7e\x33\x9c\x2f\x12\x9f\x2d\x4a\x0e\xf6\x54\x23\xfc\xbb\x41\x7d\x82\xff\xcd\x00\x1a\x83\x7a\x0e\xf7\x06\x75\x26\x0f\xea\x62\x06\xa0\xf4\x71\x0e\xb7\xfa\xd8\xfe\xd3\x8a\x2d\x5a\x2b\xe4\xd1\x5c\x3e\xe0\xc9\xcc\xe1\xf7\xad\xd5\x42\x1e\x2f\x3e\x5d\xbc\x99\xc3\xef\xf7\xfd\x82\x8b\x4f\xed\x8e\xc4\x5a\x2d\xf6\x8d\x45\xe3\xd1\xfb\xff\x20\x83\x06\x4d\xd8\xed\x44\xb9\xad\x79\xd9\x18\x8b\xfa\x52\xf0\x39\x64\x4b\x82\x5f\xf8\x91\x96\x4d\x58\xf0\xcb\x69\xcd\x2a\xbc\x94\xac\xc2\x39\x04\x36\x2f\x2e\x26\x31\xc3\x99\xa1\xa4\x85\x92\x12\x73\x2b\x94\x3c\x97\xd9\xcf\xf5\x80\x22\xd1\x56\x1c\x58\x6e\x2f\x59\xf8\xd8\x9d\x6a\x9c\x43\x32\xf8\x73\x10\xab\xac\x1d\xa2\x8d\xac\xb1\x2a\x57\x55\x5d\xa2\xc5\x4b\x21\xeb\xc6\xb6\xb4\xaf\x20\x6f\xb4\x51\x7a\xa3\xcc\x1c\x32\x69\xaf\x80\x39\x91\x73\x48\x06\x7b\x12\x37\x46\xe0\x57\x2d\xf3\xfb\x6c\xd9\x62\xbc\x89\x17\xdf\xa1\x69\xca\x33\xb1\xef\x04\x96\x7c\x2c\xfb\x40\x83\x41\x83\xc1\xda\x54\x5a\x61\x4f\xd7\x42\xf2\xab\x19\x00\x80\xc6\x3f\x1a\xa1\x91\x27\xfa\x48\x8b\xc9\xa0\xd3\xcb\x3f\xbd\x40\x2f\x5a\xbe\x6d\x8e\x47\x34\xa4\xd0\xa7\xd9\x0c\xe0\x15\x6c\x73\x2d\x6a\x5b\x1d\x35\xa0\xe4\xb5\x12\xd2\x9a\x2b\xd0\x78\x40\x0d\x56\x01\x57\xb9\x01\x21\x21\x2f\x55\xc3\x59\x2d\xde\xd6\x5a\x59\x35\x03\x28\xc5\x23\x7e\x10\xf8\x44\x74\x56\xe1\xfb\x06\x2d\xe3\xcc\x32\x7f\xc8\xed\x8a\x85\x92\x16\xa5\x35\x83\x33\x5e\x8d\xa6\x68\xb9\x71\x3c\x9c\x83\xbb\xaf\x18\xcc\xcf\x4e\x40\x6d\xa3\x89\x0b\xaf\xd3\x12\xeb\x52\x9d\x80\x02\x66\x06\xc0\xdd\x5f\x85\xd2\x5e\xfb\x08\x5a\x0e\x07\x3c\x7e\xb4\x66\x00\x1f\x2f\xf5\xe8\xc9\x26\x6b\xa1\x59\x2d\x02\x66\xb2\xc9\x3a\x30\x3f\x3a\x40\x09\x93\xb3\x2f\xb3\xd9\x30\x13\xdc\x34\x96\xd1\x49\xb8\x64\xb0\xd0\xc8\x2c\x06\xef\x8f\xa2\x09\xfe\xc9\xb1\xd6\x98\x33\x8b\xfc\x52\x23\x33\xe4\xa0\x3f\x84\x05\x06\x98\x46\x90\xea\x09\x72\x07\xc0\xe1\x51\x30\xa8\x9f\x83\x46\x3f\xbc\x99\x01\xdc\xd7\x9c\x59\xfc\x20\xfe\x2b\x5c\x5c\x1d\xc4\xf1\x32\x38\x0a\xf9\x49\xb6\xbc\xb8\x82\xc7\xc1\xe4\x1c\x52\x2e\x2c\xdb\x97\xd1\x96\x89\x10\xf7\x94\x23\x13\x9d\x59\x0c\x60\x89\xe4\x77\xcb\x17\x0c\xfc\x8b\x52\x25\x32\xd9\xc3\x79\x5b\xf5\x36\x6b\x01\xfc\xff\xf4\x4e\xaf\xe0\xfd\xd7\x92\xe5\x15\x3c\xb2\xb2\xc1\x6f\x27\xd0\x2d\xda\x38\x67\x5e\xb2\x41\x3a\x6d\x2d\x33\x4a\xab\x6f\xa6\x12\x6d\x26\x1f\x85\x67\x75\x89\x15\x13\x65\x97\x2c\x29\xf4\xb5\xb1\xeb\x61\x02\xbd\x82\x92\x8d\x86\xde\xb4\xb5\x81\x60\x62\x35\x37\xa8\x2b\x61\x8c\x50\xd2\x5c\x52\xc6\xef\xce\xb1\x89\x27\x63\xc2\x83\x89\x1e\xdc\x1f\xa5\x87\xbe\xd5\xc7\xce\x80\x4a\x1f\x3b\x54\xd5\x8f\xf7\x88\x83\xc5\x84\xd6\x55\xad\x2f\xb3\x99\xf3\xee\x16\xde\x79\x77\x38\xb6\x19\x40\x54\x36\x66\x00\xb1\x69\x66\x00\xb5\xc8\x6d\xa3\xa3\x35\x4a\x1f\xd7\xa3\x6d\x81\x5e\x3f\x20\x4c\x52\xd7\x5a\x3d\x22\x1f\xb8\x46\xcb\x25\x90\xfb\x16\x15\x49\x7a\x79\x18\x56\x9a\x09\x9c\x81\xb7\x38\xac\x07\xf2\xd4\x1e\xc0\xb9\x58\x3f\x30\xdc\xd5\xbb\x86\xdb\x68\x55\xa3\xb7\x88\x32\x96\xe1\x0a\xc4\x0b\x3e\x36\xbd\xad\x93\xe1\xc3\x63\xa4\xe0\x88\x5e\xc8\x10\x89\xbd\x31\x73\x78\x57\x2a\x66\x7d\xea\x33\xf9\x39\xe7\x28\x5e\xff\x12\x58\x94\x4d\x35\x51\xe8\xb6\x96\x59\x74\x02\x92\x74\xfb\xf9\x7e\x7d\xbd\xbe\xfd\xb8\x0e\x7f\x9b\x74\xbd\xcc\xd6\xbf\x86\xbf\xbb\xfb\xf5\xba\xff\x7b\x97\x64\xab\x74\x19\x7e\x76\xe9\xdd\x4d\xb6\x4e\x76\xe9\x72\x52\x52\x5f\xc1\xbd\xa0\x64\x37\x10\xf4\x0a\x12\x09\xc8\x85\x0d\xc5\x1f\x54\x4e\x5d\x01\x88\x03\x30\x17\x4f\x50\x30\x03\x95\xe2\xe2\x20\x90\x83\x2d\x10\xfc\x39\x59\x7c\xb6\xb0\x3f\x81\x90\x06\xb5\x73\x09\xa5\x81\x53\xb2\xa2\xef\xbc\x60\x9a\xe5\x94\xa1\xdf\x3a\x21\xbb\x42\x50\x25\xcd\xcb\x86\xa3\xa1\xfc\xef\x36\x48\x87\xf7\x80\xa7\xbd\x62\x9a\x03\x93\x1c\x6a\x66\x3c\x80\xaa\x2a\x26\xb9\xdb\x4e\x8c\xd3\x65\xb6\xf3\x74\xc1\x60\x89\x79\xcf\x57\x96\xa7\x69\xd2\x79\xa1\x0c\x4a\x60\x32\x6a\x46\xc0\x74\x3d\xc0\xdb\x96\x16\x17\x54\x5e\x0c\xb8\xda\xfe\xca\x91\x8a\xb6\xd8\x82\x59\x10\x16\x4c\xa1\x9a\x92\x43\xa5\x1e\xd1\x2d\x22\x51\xaf\x4d\x68\xa3\xa8\x61\xa0\x41\x49\x86\x61\x14\x46\xb5\x16\x74\xba\x96\xed\x5b\x2d\xb6\xe9\x2a\x5d\xec\xbe\xe2\x0f\xd4\xc9\x04\x77\xb8\x8e\xdc\xe1\xfa\xf3\xe6\x76\x19\xbe\xb6\x1f\x16\xed\xd7\xe2\x2e\xdb\xec\xc2\xcf\x3a\xb9\x49\xb7\x9b\x64\x91\xf6\x61\x31\xd9\xfa\xf8\xd8\x15\x92\xbf\xd4\x79\x8d\x92\x43\x70\x67\xea\x34\x5c\x77\xd8\x8d\x56\xcc\xe6\x05\xf2\x4c\x72\x7c\x76\xb5\x25\x93\xf6\x13\xb5\x2b\xe4\xd4\x53\xe0\xce\xdb\x3b\x76\x3b\xb6\x1f\x91\x22\x3f\x21\xff\xe2\xf8\x0c\xea\xe0\xac\x69\xd9\xde\x9b\xdf\x16\x68\x86\x87\xe7\x4b\xff\x41\x69\xb2\xad\x65\x7b\xc7\xc2\xf5\xb1\x0e\xe8\x63\x81\xb6\x40\x1d\x9c\x85\x3c\x8a\x0d\x36\xd3\x3e\xb0\x74\xf8\x84\xef\x05\x3e\x89\xb2\x84\x8a\x3d\xf8\xa3\x0d\xfe\x07\xf8\x8c\x79\xe3\x12\x12\xc9\xe9\xff\x92\x83\xa5\x64\x48\xe0\x7d\x3a\x82\x21\xbf\xaf\xb4\x9e\x53\xe7\xe3\x5b\xe7\x81\x19\x0e\x4a\x57\xcc\x52\x4f\xe3\x03\x8e\xc8\x76\xd1\x67\x42\x17\xfd\x54\x88\xbc\x70\xde\xbe\x47\x94\x50\x33\x6d\x90\x53\x58\x9e\xfb\xb0\xea\x1c\xdd\x3b\x39\xdb\x6f\xad\xaa\xa1\x56\x46\x38\xbe\xa4\x5f\x27\x33\x1b\x36\xeb\x91\x41\xc7\x1c\x88\x17\xa3\xdc\x2f\xf8\xd5\xc0\x3e\xad\x01\xdf\xba\xe2\x94\x76\xe3\x43\x63\xbd\x82\xa4\x2c\xa3\x23\xa5\x63\x41\x96\x17\x83\xd3\x27\x92\x26\x9c\xf1\x36\xb2\x6e\xe4\x3f\xbd\x51\xa9\x1b\x66\x42\xa2\x26\x6f\x6b\x7c\xe5\x18\xd7\xba\xe9\xa4\x1d\xfc\xb6\x5f\x56\xa1\x31\xec\x18\x0d\xb5\x1d\xe8\xb8\x62\x5c\xff\xc3\xa4\x8f\x28\xfd\x01\x4e\xec\x73\x3d\xcf\x4e\x54\x18\x49\xa4\xae\x67\x34\xd8\x02\x6e\x14\xff\x53\x0a\x34\xe6\x3b\x35\x00\xc8\x5b\x8b\xb9\xeb\x6a\x6c\x3e\xdf\x16\x22\xa9\x46\xb3\xad\x9a\x34\xdc\x66\xb1\xd0\x17\x0f\xd8\x7a\x07\xe6\x78\x60\xe4\xd2\xce\xac\x94\x9b\xa5\xb2\x45\xf0\x98\x07\xa9\x9e\x24\x9d\xea\x62\x1b\x15\x23\xda\x17\xd6\x1b\x28\x90\x95\xb6\x38\xd1\xd6\x02\x99\xb6\x7b\x64\xd6\x87\xbd\xc6\x1c\xc5\x23\x72\x2a\x21\x1a\x8f\x4d\xc9\x34\x08\x69\x51\x53\xe7\xe2\xea\x88\x2d\xbc\x9b\x87\x56\x9f\xe0\x34\x9a\x5a\x49\x4e\x0c\xac\x72\x17\x4b\x34\xd6\x04\x12\xef\xd3\x64\xb5\x7b\xff\xdb\x39\x89\x46\x0e\x68\xb8\xcc\xd0\x23\xe6\xfe\x9a\x4e\x75\x51\xc1\x46\x3c\x0b\x84\x05\x5d\x15\x1d\x03\x61\x80\x5a\x29\xc1\xdb\x08\xea\x75\xb8\x82\xbd\x0b\x68\xf9\xda\xc2\x1f\x0d\xea\x93\x8b\x18\x72\x7e\xa3\x2a\x0c\x27\x14\xaa\x93\x46\x83\xd5\xbe\x44\x03\xef\x77\xbb\xcd\x6b\x03\x3f\xfd\xf8\x63\x38\xe8\xce\x7e\xd3\xe4\x5d\x42\x3b\x2a\x77\x91\x15\xa6\xe7\x1a\xf4\xf8\xf5\x6e\xb3\x68\x35\xa0\x94\xb8\xd7\xc8\x1e\xcc\x5b\x07\x50\xa8\x1a\x7d\xc2\x61\xb6\x2b\x89\xad\xe2\x0e\x37\x27\xa2\x7b\x96\x3f\x50\x01\x16\x12\x9d\xca\x1a\x4d\x53\x51\x7a\x80\xc0\xc8\x33\x09\x3c\x97\xd9\x76\x71\xbb\x5e\xa7\x8b\x9d\xeb\x5c\xc6\x76\xa6\x1e\x9c\xce\xe6\xa9\x40\x39\x36\xb4\xf0\x23\xb5\x56\x39\x1a\x43\xd9\xa1\x5d\xde\xda\x60\xb3\x4c\x76\xbe\x3d\xf2\xb8\xfe\x4a\xe7\xfb\x80\x56\x73\x6f\x76\x1a\x92\xca\x82\xa1\x68\x65\xf2\x04\xca\xe5\xb5\x43\xa3\x7d\xc1\xf0\x6e\xec\xf0\xd1\x00\xdb\xab\xc6\x9b\xe0\x29\x24\x40\x61\x87\xbe\xa9\xf4\x98\xca\xb9\x8e\x81\xcb\x13\x33\x60\xf5\x29\xf8\x9f\x17\xe0\x29\x1d\x98\x28\xb1\xf3\x1a\xba\xce\x0a\x09\x0c\xf6\x8c\x47\x06\x74\x4a\xa6\x6d\xef\xd7\x26\x8a\xe1\x35\xd5\x45\x5f\xcd\x8c\xb1\x85\x56\xcd\xb1\x48\x5d\x4f\x3f\x75\x27\x18\xde\xb0\xe3\xfe\xb6\x4d\x22\x51\x58\xb7\xc9\xea\x7d\xeb\xc3\x51\xde\x89\xef\xcf\xd1\xbd\xb9\x9b\xfd\x80\xda\x88\x51\xde\xf1\x12\x5e\x9e\x19\x5f\x7b\x6a\x8d\xd6\x9e\x16\xd3\x93\xe7\xaf\x3f\x6d\x6e\xd3\xaa\xdc\x94\x4c\x62\x97\x52\x5d\xb3\xd2\xfd\xf9\x14\x27\x9b\x6a\xad\x38\xfa\xa7\xb0\x30\x90\x49\x63\x75\x43\xd7\x00\xe4\xc3\xc9\x91\x11\xe3\xd7\x3a\x6f\xce\x3a\xe1\x5c\xa3\x89\x92\xb1\x55\x0f\x38\x51\x3a\xfa\x6b\xae\xdb\x7a\x76\x25\x14\x6e\x6e\x25\xe4\x43\xb4\xf7\x15\xdc\x7d\xe3\x9d\xca\xa1\x8f\x9f\xa7\xbe\x71\x0b\x3c\xbb\xb8\x7c\xa7\x98\xf6\x2d\x2a\xd4\x41\x2f\x73\x7e\xc6\xc2\x9d\xe6\x73\xd9\xae\x8e\xae\x91\xc2\xfc\x6b\x7b\xbb\xfe\x33\x24\xe2\xb7\xb3\xef\xd2\x14\x28\x2f\xb4\x2c\xe3\x78\xf9\x2e\xe1\x2f\xe8\x3f\x7a\xd5\x0b\x8e\x19\xab\xde\xdd\x0a\x06\x0f\xba\x0e\x06\x20\xba\xb2\xb9\xdf\x55\xb6\xbe\xff\xcf\xe7\xe4\x66\xf9\xf3\xdf\xdb\xa1\x65\x72\xf7\x31\x5b\xc7\x63\x8b\xdb\xf5\x2e\xc9\xd6\xe9\xdd\xe7\x6d\xba\xfb\xfc\x5b\x72\xb3\xda\x4e\x4f\x4d\xe0\xc5\x0b\x76\xe9\xcd\x66\x45\xe9\xc7\x83\x74\x21\xd0\xbf\x36\xfb\x57\x7d\x1d\xf9\xae\x29\xd8\xdf\x7e\xfa\x39\xd2\x31\xbe\xe6\x7f\x4f\xf6\x9a\x7e\x24\x18\xbc\xeb\xf8\x13\x3f\x7f\x0a\x39\xdf\x38\x78\xbe\xf1\x41\xf7\xc2\xe3\xc7\xec\xcb\xff\x03\x00\x00\xff\xff\xf8\x7f\x4b\xc2\xbd\x18\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 6333, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
