// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x57\x5f\x6f\xdb\xba\x15\x7f\xd7\xa7\x38\x45\x1e\x6e\x03\x24\x06\x76\x71\x57\x0c\x7a\xd3\xb5\x95\x56\x68\x22\x7b\x91\x9c\xae\x2b\x8a\x80\x26\x8f\x25\x22\x12\xa9\x92\x94\x13\x6f\xe8\x77\x1f\x48\x4a\x32\xe5\xa4\xbb\x4f\xa6\x0e\xcf\x9f\x1f\xcf\x7f\x5f\x40\x59\x73\x0d\x7b\xde\x20\x30\xd4\x54\xf1\x1d\x6a\x30\x35\x82\xa6\x35\xb6\x04\xf6\x4a\xb6\xee\x3b\xd9\x64\xa0\x51\x1d\x38\xc5\x45\x74\x11\x5d\x40\x66\x7e\xd3\x20\xa4\x01\xce\x90\x34\x57\xb0\xeb\x0d\x3c\x23\x08\x44\x06\x46\x42\x4b\x44\x4f\x9a\xe6\x08\x15\x0a\x54\xc4\x20\x98\x63\x87\x1a\xf6\x52\x39\x7d\xe5\xb1\xc3\x82\x2a\xde\x19\xd8\x66\xd1\x05\x3c\xd7\x28\xc0\x4c\x60\xb8\x86\xbe\x63\xc4\x20\x5b\x78\x88\x94\x08\xd8\x21\x30\x29\x10\x76\x47\x50\xbd\x10\x5c\x54\x71\x74\x01\x50\x29\xd2\xd5\x3f\x9a\x6b\x0f\xf9\xda\xd9\xf1\x9a\x47\xdb\xd7\x46\x0f\x0f\x5a\x0c\xcc\x70\x7d\x2d\x7b\xd3\xf5\x66\xa4\xb3\x85\xd1\x0e\x06\xa7\x35\x3c\xf3\xa6\x09\x80\xd7\x08\x03\xb3\xd5\xed\x01\x9a\x9a\x18\xcf\xb7\x43\xe8\x38\x7d\x42\x06\x7d\x67\xa1\x59\xf6\x6d\xb6\x88\x06\xdf\x06\xfa\x9d\xa4\x06\x5d\xcb\xbe\x61\x80\x2f\x5c\x1b\xe0\xc2\xbb\x9b\xb4\x08\x8c\x2b\xa4\x46\xaa\x23\x90\x30\x08\x13\x66\x2b\xbe\x88\xa2\x21\x34\xff\x8d\x00\x7e\xf4\xa8\x8e\x31\xfc\xd3\xfe\x44\x00\x6d\x6f\x88\xe1\x52\xc4\x70\x37\x9c\xa2\x9f\x51\xe4\x40\x6f\x35\xaa\x4c\xec\xa5\x13\xe3\x2c\x86\x6c\xf5\x2e\x02\x10\xa4\xc5\x18\x0a\xa3\xb8\xa8\xec\x37\xb6\x84\x37\x21\xa1\xe3\xd4\xf4\x6a\xc6\x23\x55\x95\xcf\xc4\x7e\x46\x11\x8a\xbe\x85\x44\x19\xbe\x27\xd4\xd8\xd8\x3a\x3b\x00\x49\xf9\xb8\xcd\x3f\xe7\xeb\x2f\xf9\xf8\x79\x9b\xe5\xdb\x7f\x3d\x26\x77\xab\x0f\x7f\x8c\xa4\x55\x72\xff\x25\xcb\xe7\xb4\xe5\x3a\x2f\x93\x2c\x4f\xef\x1f\x8b\xb4\x7c\xfc\x9a\xdc\xdd\x16\x6f\x5f\x85\xfa\x26\x20\xbd\x91\x54\xb6\x5d\x83\x06\x13\x6a\xfd\x30\x41\x4a\x66\x88\x2e\x20\x11\x80\x8c\x1b\x20\x8e\x0d\x24\xa5\xbd\xd2\xc0\xf7\x40\xa0\xd7\xa8\xa0\x26\x1a\x5a\xc9\xf8\x9e\xdb\xbc\xae\x11\xb8\x70\x89\x80\x2f\xc6\x06\x9b\x0b\x8d\xca\x70\x51\x81\x54\xc0\xb0\x41\x77\xa6\x35\x51\x84\x1a\x54\x7a\xe1\x8c\xb8\x44\xe0\x82\x36\x3d\xb3\xe5\x75\xec\x9c\x80\x8f\xfc\x13\x1e\x77\x92\x28\x06\x44\x30\xe8\x88\xf6\x0a\x64\xdb\x12\xc1\x9c\xb8\x45\x9c\xae\xb2\xd2\xc3\x05\x8d\x0d\xd2\x13\x5e\xd1\x1c\xdf\x06\x4d\x6b\xa9\x51\x00\x11\x40\x02\x6f\x80\xee\xab\x0a\xb5\x95\x5d\x8c\xb0\x18\xa7\xc4\x58\x5c\xd2\x99\xb0\xa0\x66\x22\x2e\xd5\xb9\x19\xf3\xb6\x95\x07\x5f\x13\xd6\xd4\x6f\x1a\xac\x6d\x5b\xd4\xd2\x11\x85\x75\x0c\xe9\x3a\x25\x3b\xc5\x5d\xf5\x90\xdd\xf8\x8a\x22\xbd\x4d\x97\xe5\x9b\x51\x4a\x85\xe1\xe6\xf8\x99\x0b\xe6\xa3\x94\x7e\x0e\xa2\x64\xbf\x36\xeb\xd5\x70\x2a\x1e\x96\xe3\x69\x79\x9f\x6d\xca\xe1\x23\x4f\xee\xd2\x62\x93\x2c\xd3\x29\xe5\x5d\x55\x38\x75\x16\x69\x3c\x95\x80\xcd\x61\xda\xf4\xda\x58\xe2\xd2\x1f\xce\xe8\x4b\x29\x04\x52\x5f\x4a\xcb\x73\xd2\x89\x97\x8f\x19\xff\x9e\x04\xa9\x1f\xcf\x0a\xe1\x32\x86\xe5\x6d\x36\x52\xac\xdc\xc8\xab\x27\xa9\xb0\x9c\x2e\x4f\xe2\x7a\xb4\x84\x2f\xc6\xe6\xd3\x03\xd7\x37\xbd\xa0\x8e\xfc\xde\xb7\xb8\xa9\x08\xaf\x60\xdf\x0b\x6a\x15\xe9\x18\xbe\x0d\xc4\xef\x97\x31\x84\x42\xce\x7a\xe0\xf5\xf7\x2e\x99\x47\x1d\x57\x43\x28\x37\x52\xc7\x90\x09\x73\x35\x24\x59\xfc\x8b\x7a\xba\x9c\x5f\xdc\xa3\xee\x1b\xf3\x6e\x72\xff\xeb\x3b\x17\x0b\x5b\x0d\x68\xc7\x40\x4b\x8c\x41\x36\xd4\x13\xd7\x41\x71\xe9\x01\x8e\x6f\xc6\x36\x99\x77\x88\x02\x3a\xa2\x34\xb2\xb1\xc5\xce\x53\x54\x4e\x79\xec\x73\x98\xec\x0a\x23\x3b\xe8\xa4\xe6\x16\xae\x2b\xa4\xc9\x66\x16\xbe\xda\xf1\x7f\xa9\xd1\xd4\xa8\x5e\x61\xb0\xb8\x08\x1c\x48\xc3\xd9\x15\xe0\x0b\xd2\xde\x90\x5d\x83\x63\x7d\x5a\xad\x5c\xa7\x13\x3d\x86\x3f\xa5\x6c\x90\x08\x5f\xab\x4d\x13\x94\x9b\x1f\x7d\x48\x68\x0d\x72\xef\x0c\x0d\x20\x1d\x36\x7b\x3e\xb1\xc6\xf0\xad\x0c\x09\xdf\x27\xa7\xce\xc8\x81\x3f\xb9\x60\xf8\x12\x28\xf6\x45\x6b\x6a\xd4\x38\xc3\x40\x94\xf3\xfd\x60\x32\xb3\x52\x2e\xd6\x33\x2f\xf8\x16\x63\x9f\x4f\x02\xe1\x61\x74\xdb\x48\x91\xdd\x60\xd0\x0d\xc0\x96\x3c\xf9\x86\x30\x78\x25\x70\xd4\xc2\x25\xef\xf8\x95\xec\x0d\xaa\xc2\x29\x0f\x3d\xa5\x67\x0f\x0f\xd3\xe6\x2d\x0f\xbc\x7d\xef\x5c\xf1\xc4\x05\x8b\x7f\xd1\x56\xce\x66\x5d\x04\xc3\xbe\xd3\xf9\x0c\x1f\xa8\x63\x6b\x1a\x6a\xbe\x30\xc4\xf4\x3a\x70\x33\xc3\x3d\xb1\x89\xac\x8d\x6d\x6d\x7c\x6f\x17\xa0\x7a\xc8\x93\x27\x21\x9f\x85\x7d\xf0\xc3\xbf\x1f\x8b\xf9\x90\xb1\xa2\x83\x88\x86\x1a\x49\x63\xea\xa3\x95\xae\x91\x28\xb3\x43\x62\x7c\x60\x14\x52\xe4\x07\x64\x76\x34\x28\xac\xfa\x86\x28\xe0\xc2\xa0\x3a\x90\x46\xbb\xf9\x60\x6a\x9f\xdf\x43\x9b\xb2\xea\x14\xea\x4e\x0a\x66\x41\x18\x09\x0a\x7f\xf4\xa8\x8d\x3e\xe1\xf8\x94\x26\xb7\xe5\xa7\xaf\x67\x38\xfc\x86\x23\xad\x08\xe3\x9a\xfa\xde\x66\xab\xd1\x67\xd0\xc7\xfb\xcd\x12\xe8\xd4\xf1\x60\xa7\x90\x3c\xe9\x85\x53\x50\xcb\x0e\x7d\xbd\x12\x33\x0d\x8c\x11\x90\xd3\x4b\x65\x8b\xb0\x23\xf4\xc9\x8e\x27\x2e\xd0\x41\x57\xa8\xfb\xd6\x26\x2a\x0c\x88\x3c\x92\x13\xd0\x55\x56\x2c\xd7\x79\x9e\x2e\xcb\x74\x35\x45\xfb\x81\xff\x87\xbb\xde\xbb\xe7\x95\x8b\x43\x47\xb4\x36\xb5\x92\x7d\x55\xa7\xc2\x26\x15\x3b\xa5\xd2\x28\x14\xf4\xf4\xb3\x75\x47\xbb\x80\xc6\xf3\xf8\xda\x8b\x86\x68\xf3\x69\x8c\xc6\x9d\x8e\xe1\xa6\x91\xc4\x75\xeb\x43\x80\x20\x9e\xe1\x79\x77\x6e\x70\x3e\x22\xbc\xe9\x2e\x61\x4c\xa1\xd6\xe1\x02\x65\xe4\x13\x8a\xd9\xfa\xe4\xb4\x8c\x3b\x9b\x13\x5c\x2a\x24\x06\x97\x6f\x8c\xa9\x08\x60\xeb\x56\xe3\x10\xcb\xfb\x21\x00\xd9\xca\x3d\xf5\xea\xff\xf9\xe9\x72\x3a\x05\x2f\x38\x8d\xa8\x61\x73\xeb\xd5\x6c\x0f\x04\xd0\x35\xf9\xfd\xef\x1f\x5e\xc3\x9e\x4d\x2b\xff\x68\x83\xad\x2b\xe5\xe1\xe6\xfb\x2b\x5e\xc7\x76\x40\xa5\x83\xe2\x73\x23\xb5\x26\xa2\xc2\x46\x56\x33\x77\xf1\x16\xb5\x21\x6d\x17\xc4\x65\x54\xb8\x92\xd4\x33\xde\x91\x2e\x15\x66\x98\xf7\xe3\x28\x0c\xb5\xb0\x91\xf3\xf5\x0b\x1e\xb8\x2e\x3a\xa4\x03\xa8\x8a\xd8\x8f\x5f\x72\xfd\xa5\xa1\x83\xe7\x8b\x47\x01\xab\xc0\x77\x95\x15\x31\x64\x5a\x44\x57\x49\x99\x3c\x96\x5f\x37\x69\xd0\x29\xfe\x5c\xaf\x6f\xd3\xc4\x9e\xb2\xbc\x74\xbb\xf0\x36\xcb\xcb\xbf\xfd\xfe\x8f\x08\xe0\xe6\x76\x9d\x78\x5a\x51\xde\x67\xf9\xc7\x08\xa0\xcc\xee\xd2\x0f\x7f\xe4\x76\x31\x5e\x6d\xef\x93\x32\x5b\xe7\xee\x73\xec\x62\x05\xb6\x44\x18\x4e\x27\x9b\xae\x2d\x15\x9b\x74\x99\xdd\x64\xe9\xca\x13\xf2\x75\x9e\xfa\x53\xf2\x31\xcd\xcb\xc7\x6d\x36\x5c\x6c\x37\xe3\xa9\x48\xef\x1f\xb2\x65\xea\x56\xac\xc9\x1d\x37\x22\x51\x95\x7b\x60\xa2\x7c\x69\x9e\xff\x97\x60\xc3\x73\xe3\xe9\xe1\xae\x04\x03\x50\xf1\x0c\xa2\x93\xf1\x0d\xf6\x81\x34\x3d\xbe\x0e\xc1\xc9\xa6\x33\x48\x54\x65\xd3\x6c\x86\xe4\xdd\xf7\x73\xf6\xbf\x0c\xd8\xde\xb2\xf9\x90\x9d\x54\xcd\xe2\x3e\x2d\x50\x4e\x07\x0b\x72\x2e\x86\x6f\xaf\x52\xd0\x42\x98\xd2\xc0\xf3\x9c\xe5\x8e\xe7\xd8\x8f\xf0\xa6\x37\x84\xf7\x3f\xa3\xff\x05\x00\x00\xff\xff\xe0\x05\xc2\x6b\x9d\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3997, mode: os.FileMode(436), modTime: time.Unix(1586827020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
