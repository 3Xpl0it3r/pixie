// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5d\x6f\xeb\xb8\xd1\xbe\xf7\xaf\x98\x6c\x2e\x36\x01\x92\x5c\xbc\x78\xbb\x28\x7c\x55\xd5\xf6\xd9\xa3\x26\x71\xdc\xd8\xc9\xe9\xf6\x20\x08\x68\x71\x6c\x11\x96\x48\x1d\x92\x72\xe2\x2e\xf6\xbf\x17\x43\x52\x32\x69\x3b\xbb\x38\x0b\xf4\xca\x22\x39\x1f\x0f\xe7\x8b\x33\x3e\x87\x45\x29\x0c\xac\x44\x85\xc0\xd1\x14\x5a\x2c\xd1\x80\x2d\x11\x4c\x51\x62\xcd\x60\xa5\x55\xed\xd6\xd9\x2c\x07\x83\x7a\x2b\x0a\xbc\x19\x9c\x0f\xce\x21\xb7\x3f\x1a\x90\xca\x82\xe0\xc8\xaa\x2b\x58\xb6\x16\xde\x10\x24\x22\x07\xab\xa0\x66\xb2\x65\x55\xb5\x83\x35\x4a\xd4\xcc\x22\xd8\x5d\x83\x06\x56\x4a\x3b\x79\x8b\x5d\x83\xf3\x42\x8b\xc6\xc2\x53\x3e\x38\x87\xb7\x12\x25\xd8\x1e\x8c\x30\xd0\x36\x9c\x59\xe4\x37\x1e\x62\xc1\x24\x2c\x11\xb8\x92\x08\xcb\x1d\xe8\x56\x4a\x21\xd7\xc3\xc1\x39\xc0\x5a\xb3\xa6\xfc\x56\x5d\x7b\xc8\xd7\x4e\x8f\x97\xdc\xe9\xbe\xb6\x26\x5c\xe8\x26\x10\xc3\xf5\xb5\x6a\x6d\xd3\xda\x6e\x9f\xdf\x58\xe3\x60\x88\xa2\x84\x37\x51\x55\x11\xf0\x12\x21\x10\x93\x6c\x0f\xd0\x96\xcc\x7a\xba\x25\x42\x23\x8a\x0d\x72\x68\x1b\x82\x46\xe4\x4f\xf9\xcd\x20\xd8\x36\x92\xef\x38\x0d\x98\x52\xb5\x15\x07\x7c\x17\xc6\x82\x90\xde\xdc\xac\x46\xe0\x42\x63\x61\x95\xde\x01\x8b\x9d\xd0\x63\x26\xf6\x9b\xc1\x20\xb8\xe6\xd7\x01\xc0\xb7\x16\xf5\x6e\x08\xff\xa4\x9f\x01\x40\xdd\x5a\x66\x85\x92\x43\xb8\x0f\x5f\x83\xdf\x06\x03\x07\xfa\xc9\xa0\xce\xe5\x4a\x39\x36\xc1\x87\x90\x8f\xcf\x06\x00\x92\xd5\x38\x84\xb9\xd5\x42\xae\x69\x8d\x35\x13\x55\xbc\xd1\x88\xc2\xb6\x3a\xa1\x51\x7a\x3d\x4d\xd8\x62\x1d\x73\xb4\x56\xc8\xb5\x53\xb3\xc1\x5d\xcc\xb7\x65\x55\x9b\x72\xa1\x6c\x6b\xc8\xb4\x15\x2b\x56\x58\x8a\x08\xc7\x06\x90\x2d\x5e\x9f\xa6\xb7\xd3\x87\x2f\xd3\x6e\x79\x97\x4f\x9f\xfe\xf5\x9a\xdd\x8f\x7f\xfa\xff\x6e\x6b\x9c\x3d\x7e\xc9\xa7\xe9\xde\xe8\x61\xba\xc8\xf2\xe9\xe4\xf1\x75\x3e\x59\xbc\xfe\x92\xdd\xdf\xcd\x4f\x1f\xc5\xf2\x7a\x20\xad\x55\x85\xaa\x9b\x0a\x2d\x4e\xa4\x15\x76\x37\xb7\xe4\x7f\xc2\x94\x4d\xe6\x11\x24\x5a\xcd\x26\xd3\x71\x3e\xfd\x39\xac\x1e\x9f\xa6\xd3\xfd\xea\x53\x96\xdf\x4d\xc6\x61\xb1\x98\x3c\xde\xe7\xd3\x6c\x31\x19\x9f\xd4\x94\x15\xe4\xa7\xfe\xf2\x59\x72\xf7\x73\xc8\x24\x20\x17\x16\x98\x23\x03\x55\x14\xad\x36\x20\x56\xc0\xa0\x35\xa8\xa1\x64\x06\x6a\xc5\xc5\x4a\x50\xde\x95\x08\x42\xba\x40\xc5\x77\x4b\xc1\x28\xa4\x41\xed\x1c\xa2\x34\x70\xac\xd0\x7d\x17\x25\xd3\xac\xb0\xa8\xcd\x8d\x53\xe2\x02\x55\xc8\xa2\x6a\x39\xa5\xff\xae\x71\x0c\x3e\x32\x37\xb8\x5b\x2a\xa6\x39\x30\xc9\xa1\x61\xc6\x0b\x50\x75\xcd\x24\x77\xec\x84\x78\x32\xce\x17\x1e\x2e\x18\xac\xb0\xd8\xe3\x95\xd5\xee\x34\xe8\xa2\x54\x06\x25\x30\x09\x2c\xb2\x06\x98\x76\xbd\x46\x43\xbc\x37\x1d\x2c\x2e\x0a\x66\x09\x97\x72\x2a\x08\x54\xc2\xe2\x52\x51\xd8\x2e\xaf\x6a\xb5\xf5\x39\x4b\xaa\x7e\x34\x40\xba\xa9\xe8\x28\xb7\x29\xc9\x30\xac\x69\xb4\x6a\xb4\x70\xd9\xcd\x96\xdd\x2d\xe6\x93\xbb\xc9\x68\xf1\x3b\xf1\x70\x2b\x24\x0f\xe1\x70\x9b\x84\xc3\xed\xeb\xec\x61\x1c\xbe\xe6\xcf\xa3\xee\x6b\xf4\x98\xcf\x16\x61\x31\xcd\xee\x27\xf3\x59\x36\x9a\xf4\xe9\x32\xc6\xa6\x52\xbb\x1a\xa5\xbd\xc5\xdd\x41\x5e\x1e\xa4\x4e\xa1\x91\x6a\x61\x66\xef\xcd\x10\x3e\x55\x8a\x59\xda\xa5\x8a\x7d\x9c\x85\xae\x18\x38\x71\x64\x80\x61\x9f\xf9\x67\x61\x27\x64\xa8\xb9\xd8\xe0\xce\x0c\xe1\xab\xe7\x7f\x39\xbb\x1c\xc2\xd7\x28\x83\x5f\xce\x7c\x68\x3c\x8c\x1f\x2e\x28\x88\xb4\x90\xea\x72\x08\xf7\x6c\x83\x90\x8f\x41\xe3\xb7\x56\x68\xe4\xa0\x64\x41\xf5\xce\x99\xdd\x80\xda\xa2\x33\x75\xdd\x56\x56\x5c\x17\x55\x6b\x2c\x6a\x30\x6d\xd3\x28\x6d\xc9\xce\x61\xeb\xc2\x5f\xf5\x72\x08\x23\xbf\xd1\x21\x0c\xe7\x04\x2c\x3e\xf9\xdf\xa2\x19\x29\x29\xd1\x05\xec\x11\xae\xfd\xd1\x1e\xa1\xe8\x4a\xd6\x05\x8b\x6a\xd7\x30\xa9\x64\x24\xe1\x2e\xef\x76\x88\xaf\xa3\x35\x3d\x57\x5c\x45\x2f\xf7\xec\xa6\xd3\x14\x47\xf9\x85\xcb\xeb\x8e\xfa\x2a\x44\xf5\x4c\x99\x21\xe4\xd2\x5e\x85\x7c\x1b\x7e\x50\x5a\xae\xba\x9b\x3e\xe5\xe3\x58\x63\x44\xfc\x88\xa6\xad\xec\xa1\xda\x4f\x02\x2b\x7e\xa8\x7b\x45\x9b\xe1\xca\x27\x73\xe4\xca\x15\xdd\xce\x29\x99\x5e\x13\x31\xb9\xf4\x34\xf9\xcb\x69\x78\x09\xf5\xbc\xaf\x0b\x2f\x03\x17\x0a\xbe\x79\xa8\xd7\x1a\x50\xf2\x46\x09\x69\xcd\x15\x68\x5c\x79\x8f\x73\x55\x50\xe9\x80\xa2\x52\x2d\x67\x8d\xb8\x69\xb4\x72\xf5\xa3\x12\x5b\x7c\x16\xf8\x46\x68\xee\xc2\xf7\x3d\x5a\xc6\x99\x65\x3e\xca\x3a\x8a\x91\x92\x16\xa5\x35\x21\x24\x28\x3f\xee\x0e\x8e\x88\xdc\xb7\x1a\x2e\x91\xdc\x57\x2a\xcc\x9f\x9e\x10\x35\x4f\x0e\xce\xfc\x9d\x7c\x45\xa0\xe4\x37\x2e\xbd\xa3\xfa\x40\x0a\x92\x82\xe1\xe5\x27\x34\x91\xf8\x94\xb4\xaf\x0d\xc7\x0e\x77\x85\x82\x5e\x00\xa4\xd6\xac\x66\xd6\x22\x0f\x6f\x88\x30\xd1\x83\x62\x82\xef\x7d\x83\x44\x05\x7c\x89\x28\xa1\x61\xda\x20\xef\xda\x9e\xb4\x2c\xab\xbe\x76\xfb\xba\xcd\x96\x73\xab\x1a\x68\x94\x11\xe4\x47\xf7\x78\xf4\x3a\xf3\x38\xc4\x1c\xfd\x97\x12\x6d\x89\xfa\x08\x03\xe1\x62\xd4\x4c\x08\x7e\x05\xf8\x8e\x45\x6b\xd9\xb2\xc2\xee\x4d\x22\xa9\xc2\x4c\xfa\xfd\x21\xfc\x5d\xa9\x0a\x99\xf4\xef\x53\x55\x45\x4f\x8c\x6f\x47\x91\x15\x25\xa8\x95\x53\x14\x40\x3a\x6c\xf4\xbd\x27\x1d\xc2\xd7\x45\xbc\xf1\xd2\x1b\x35\xd9\x8e\xec\x29\x24\xc7\xf7\x48\xb0\x7f\xa8\x6c\x89\x06\x13\x0c\x4c\x3b\xdb\x07\x95\x39\x71\xb9\xa4\x4e\xac\xe0\x9f\x55\xba\x3e\x8b\x98\x43\x3b\x4d\x9e\x62\xcb\xa0\xd0\x35\xa5\x35\x15\x46\xd2\x1b\xac\x12\x19\x8a\xf4\xec\x57\xd9\xca\x52\xc9\x27\xe1\xb1\xa5\x4c\x72\xf1\x8f\x12\xf1\x54\x58\x1d\x98\x62\x23\x24\xff\xa8\x4c\x1c\xf4\x9f\xe1\x45\xa3\xbc\x70\xa5\xac\xdf\xad\x99\x2d\x4a\x0a\x11\x8e\xef\xae\x8c\xe4\xd2\xbe\x10\x48\x6a\xcf\x4e\x09\x77\x7d\x5b\xff\x8e\x87\x4a\x4e\x9b\xad\x89\xfc\xc3\x71\xc5\x28\x03\x9c\x18\xea\x4e\xa4\xb2\x65\x08\xb0\x8d\x54\x6f\x92\x2c\xf5\xfc\xef\xd7\x79\xda\x91\x11\x6b\x60\x31\x50\x22\xab\x6c\xb9\x23\xee\x12\x99\xb6\x4b\x64\xd6\x7b\x54\x63\x81\x62\xeb\x9e\x24\xd0\xb8\x6e\x2b\xa6\x41\x48\x8b\x7a\xcb\x2a\xe3\x9a\x29\x5b\xfa\xc4\xe8\xde\x25\x61\x40\xa3\x69\x94\xe4\x04\xc2\x2a\x57\x40\xd1\x58\xb3\xc7\xf1\x79\x92\xdd\x2d\x3e\xff\x72\x80\xc3\x8f\x2b\xca\xd5\x3d\x61\x0a\xff\x62\x51\x1a\xfb\xd0\xfb\xf9\x71\x36\x82\xa2\x7f\xc7\x60\xa9\x91\x6d\xcc\x8d\x13\x50\xaa\x06\x7d\xa2\x33\xdb\x77\x57\x1d\x20\x27\xb7\x50\x35\xc2\x92\x15\x1b\xea\xe5\x84\x44\x07\x5d\xa3\x69\x6b\x8a\x70\x08\x88\x3c\x92\x3d\xd0\x71\x3e\x1f\x3d\x4c\xa7\x93\xd1\xc2\xf5\xc1\x07\x56\x73\xa3\x1d\x5d\x32\x4c\x7d\x18\xdb\x20\x4c\x44\x8d\x56\x05\x1a\x43\xf9\xd3\x91\x47\xfe\x98\x8d\xb3\x85\xef\xb7\xbd\xe8\xad\xf8\x8f\xe8\x1a\xcb\xee\xfe\x7e\x26\xa5\x2d\x1a\x53\x0d\x4a\x0b\x4c\xee\x40\xb9\x7c\x5a\xb5\xda\xe7\x95\x8f\x0a\x3f\x6c\x1a\x60\x4b\xd5\x7a\x43\xbc\x85\xc4\x13\x36\xf6\xb3\xd2\x27\xd0\x1c\xdf\x34\xc0\x79\xa3\x39\x4e\xef\x82\x3b\xbd\x0e\x8f\x6a\xc5\x44\x85\xbe\xa7\x16\x84\xef\x8d\xae\xcd\x60\xc9\xf8\xa1\x25\xdd\x55\x27\xdd\x48\xd1\x65\xdc\xb3\x53\x30\x52\x72\x25\xfc\xac\xd5\x30\x63\x6c\xa9\x55\xbb\x2e\x27\x92\x12\x9b\xef\xd3\xb9\x63\xa2\xd7\x86\x09\x99\xa4\xc2\xe1\x00\x78\xba\xd3\x0c\x99\xb6\x27\xab\xd1\x18\xb6\x8e\x53\x57\x23\x33\x51\xd6\x76\x3a\x6f\xff\x6a\x26\x5b\x32\xfd\xaf\x27\xb9\x56\x42\x1b\xbb\x10\x35\x26\xea\x2a\x76\xb4\xd9\xc9\x9b\x29\xfe\xa7\xd0\xb7\xe6\xbb\xe0\x03\x85\x91\x37\x96\x6b\x45\x53\xcb\xf9\xb7\x17\xe9\x5e\x74\xda\xdd\x91\xb6\x7b\x5b\xef\x9b\xd7\x83\xd6\xbe\x43\x93\x94\xa5\xee\xd6\x9f\xbb\x22\x92\x5c\x60\x1b\x79\x7b\x98\xf8\x7e\x7f\xfa\x8c\xda\xa4\x65\x33\xe4\xd4\x87\x07\xd3\xb4\xf6\x36\x1a\xad\xdd\x8d\x4e\x9e\x1d\xb7\x67\xc1\x42\x5a\x55\xb3\x8a\x49\xec\xdd\xe2\xea\x73\xbf\xf2\x86\x92\x6d\x3d\x55\x1c\x7d\xab\x1a\x36\x72\x69\xac\x6e\xa9\x41\x41\x1e\x1f\x1e\xd8\x2f\x6d\xbf\xbd\x25\x9b\x8c\x73\x8d\x26\x71\xa8\x55\x1b\x94\xc7\xb3\x50\xf7\x37\x88\x63\x1c\xb9\xe0\x08\x82\x93\xc1\x03\xfe\xc6\xb1\xd1\x48\xad\x0a\xbf\xe8\x22\xe1\x87\x40\xe0\xcb\x39\xa5\x68\x88\x2e\xd8\x0a\x06\xcd\x7b\xe8\xbd\x7e\xb8\x1c\x00\x3c\xb9\xd4\x8e\x1d\x73\x11\x4c\x46\x16\xcb\xc7\x67\x57\xbf\x97\xa0\x97\xfd\xd7\x59\x0f\x33\x69\xe0\x8e\xfa\x39\x80\x31\xcd\xf2\x29\x55\xd4\xfe\x45\xe2\x3c\xb4\xa7\x0f\x07\xbf\xb3\x97\xb3\x2b\xff\xd7\x4c\xb2\x17\x0b\xe9\x7d\xb2\x1f\x68\xc2\x1f\x35\xad\x4e\xfe\x2c\x02\x30\x25\xfb\xbf\xbf\xfc\x74\xec\x88\x64\xb6\xf1\x6e\xb4\x58\xbb\xde\x22\x9c\xbc\x1c\xd1\x3a\xb2\x6d\x1a\xbd\x2e\xc9\x4b\x26\xd7\x58\xa9\x75\x12\x00\xa2\x46\x63\x59\xdd\xa4\x35\xe3\x1c\x1e\xff\x60\x24\x70\x2a\x0f\x27\x81\x3f\xf8\x97\xec\x68\xf0\xfe\x4e\x35\x5d\xdb\x1f\x8a\xa2\xd7\x39\x3c\x42\xe1\xfe\x7f\x7b\xaf\x3a\xea\xe4\xbf\x34\x61\xfe\x31\x7f\x98\xfe\x19\x10\xe9\x98\xf2\x5d\x37\x05\x7a\x4d\x3b\x94\x69\x80\x7c\x97\xf2\x0f\xee\x7f\x30\x40\x85\x12\x93\x5e\xfd\xb7\xc1\x7f\x03\x00\x00\xff\xff\x17\x42\xfb\x6e\xb4\x16\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 5812, mode: os.FileMode(436), modTime: time.Unix(1605922334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
