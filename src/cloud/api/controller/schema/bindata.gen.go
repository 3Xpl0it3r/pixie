// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5d\x6f\xeb\xb8\xd1\xbe\xf7\xaf\x98\x6c\x2e\x36\x01\x12\x5f\xbc\x78\xbb\x28\x7c\x55\xd5\xf6\xd9\xa3\x26\x71\xdc\xd8\xc9\xe9\x76\x11\x04\xb4\x38\xb6\x88\x48\xa4\x0e\x49\x39\x71\x17\xe7\xbf\x17\xc3\x0f\x59\xb4\x9d\x5d\x9c\x05\x7a\x65\x91\x1c\xce\x3c\x9c\x99\x67\x38\xf4\x39\x2c\x4b\x61\x60\x2d\x2a\x04\x8e\xa6\xd0\x62\x85\x06\x6c\x89\x60\x8a\x12\x6b\x06\x6b\xad\x6a\x37\xce\xe6\x39\x18\xd4\x5b\x51\xe0\x70\x70\x3e\x38\x87\xdc\xfe\x68\x40\x2a\x0b\x82\x23\xab\xae\x60\xd5\x5a\x78\x43\x90\x88\x1c\xac\x82\x9a\xc9\x96\x55\xd5\x0e\x36\x28\x51\x33\x8b\x60\x77\x0d\x1a\x58\x2b\xed\xf4\x2d\x77\x0d\x2e\x0a\x2d\x1a\x0b\x8f\xf9\xe0\x1c\xde\x4a\x94\x60\x3b\x30\xc2\x40\xdb\x70\x66\x91\x0f\x3d\xc4\x82\x49\x58\x21\x70\x25\x11\x56\x3b\xd0\xad\x94\x42\x6e\x46\x83\x73\x80\x8d\x66\x4d\xf9\xb5\xba\xf6\x90\xaf\x9d\x1d\xaf\x39\xda\xbe\xb6\x26\x1c\x68\x18\x84\xe1\xfa\x5a\xb5\xb6\x69\x6d\x9c\xe7\x43\x6b\x1c\x0c\x51\x94\xf0\x26\xaa\xaa\x07\xbc\x44\x08\xc2\xa4\xdb\x03\xb4\x25\xb3\x5e\x6e\x85\xd0\x88\xe2\x15\x39\xb4\x0d\x41\x23\xf1\xc7\x7c\x38\x08\xbe\xed\xe9\x77\x3b\x0d\x98\x52\xb5\x15\x07\x7c\x17\xc6\x82\x90\xde\xdd\xac\x46\xe0\x42\x63\x61\x95\xde\x01\xeb\x07\xa1\xc3\x4c\xdb\x87\x83\x41\x08\xcd\x6f\x03\x80\xaf\x2d\xea\xdd\x08\xfe\x49\x3f\x03\x80\xba\xb5\xcc\x0a\x25\x47\x70\x17\xbe\x06\xdf\x06\x03\x07\xfa\xd1\xa0\xce\xe5\x5a\xb9\x6d\x82\x8f\x20\x9f\x9c\x0d\x00\x24\xab\x71\x04\x0b\xab\x85\xdc\xd0\x18\x6b\x26\xaa\xfe\x44\x23\x0a\xdb\xea\x44\x46\xe9\xcd\x2c\xd9\xf6\x6d\x30\x40\xd9\xd6\x90\x69\x2b\xd6\xac\xb0\x14\x5b\x67\x07\x20\x5b\xbe\x3c\xce\x6e\x66\xf7\x5f\x66\x71\x78\x9b\xcf\x1e\xff\xf5\x92\xdd\x4d\x7e\xfa\xff\x38\x35\xc9\x1e\xbe\xe4\xb3\x74\x6e\x7c\x3f\x5b\x66\xf9\x6c\xfa\xf0\xb2\x98\x2e\x5f\x7e\xc9\xee\x6e\x17\xa7\x97\xfa\xfa\x3a\x20\xad\x55\x85\xaa\x9b\x0a\x2d\x4e\xa5\x15\x76\xb7\xb0\x14\x49\xc2\x94\x4d\x17\x3d\x48\x34\x9a\x4f\x67\x93\x7c\xf6\x73\x18\x3d\x3c\xce\x66\xfb\xd1\xa7\x2c\xbf\x9d\x4e\xc2\x60\x39\x7d\xb8\xcb\x67\xd9\x72\x3a\x39\x69\x29\x2b\xc8\xe3\xdd\xe1\xb3\xe4\xec\xe7\x90\x49\x40\x2e\x2c\x30\x27\x06\xaa\x28\x5a\x6d\x40\xac\x81\x41\x6b\x50\x43\xc9\x0c\xd4\x8a\x8b\xb5\x20\x06\x95\x08\x42\xba\x94\xc3\x77\x4b\x69\x25\xa4\x41\x6d\x85\xdc\x80\xd2\xc0\xb1\x42\xf7\x5d\x94\x4c\xb3\xc2\xa2\x36\x43\x67\xc4\xa5\x9c\x90\x45\xd5\x72\x22\xf2\xae\x71\x1b\x7c\x8e\xbd\xe2\x6e\xa5\x98\xe6\xc0\x24\x87\x86\x19\xaf\x40\xd5\x35\x93\xdc\x6d\x27\xc4\xd3\x49\xbe\xf4\x70\xc1\x60\x85\xc5\x1e\xaf\xac\x76\xa7\x41\x17\xa5\x32\x28\x81\x49\x60\x3d\x6f\x80\x69\x37\x1b\x34\xb4\x77\x18\x61\x71\x51\x30\x4b\xb8\x94\x33\x41\xa0\x92\x2d\x8e\x54\xc2\x46\x86\xd4\x6a\xeb\xd9\x47\xa6\x7e\x34\x40\xb6\xa9\x7c\x28\x37\x29\xc9\x31\xac\x69\xb4\x6a\xb4\x70\x3c\x65\xab\x78\x8a\xc5\xf4\x76\x3a\x5e\xfe\x4e\x3e\xdc\x08\xc9\x43\x3a\xdc\x24\xe9\x70\xf3\x32\xbf\x9f\x84\xaf\xc5\xd3\x38\x7e\x8d\x1f\xf2\xf9\x32\x0c\x66\xd9\xdd\x74\x31\xcf\xc6\xd3\x8e\x5c\x13\x6c\x2a\xb5\xab\x51\xda\x1b\xdc\x1d\x30\xec\x15\x77\x7d\xf2\x14\x1a\xa9\xaa\x65\xf6\xce\x8c\xe0\x53\xa5\x98\xa5\x59\xaa\xbd\x09\x9f\x9c\x5a\x47\x6b\xa7\x8e\x1c\x30\xea\x38\x7c\xe6\x43\x7d\x3f\xb9\xbf\xa0\xa4\xd0\x42\xaa\xcb\x11\xdc\xb1\x57\x84\x7c\x02\x1a\xbf\xb6\x42\x23\x07\x25\x0b\xaa\x44\xce\x8d\x06\xd4\x16\x9d\xeb\xea\xb6\xb2\xe2\xba\xa8\x5a\x63\x51\x83\x69\x9b\x46\x69\x4b\x7e\x0b\x53\x17\x1e\xfa\xe5\x08\xc6\x7e\x22\x5a\x0c\xeb\x66\x04\xbf\xf6\x57\x9e\xff\xa7\x68\xc6\x4a\x4a\x74\x09\x78\x84\x6b\xbf\xb4\x47\x28\x62\x09\xba\x60\xbd\x5a\x34\x4a\x2a\x13\x69\xb8\xcd\xe3\x0c\xed\x8b\xb2\xa6\xdb\xd5\xaf\x6f\x97\xfb\xed\x26\x5a\xea\x67\xed\x85\xe3\x69\x94\xbe\x0a\x59\x3a\x57\x66\x04\xb9\xb4\x57\x81\x3f\xa3\x0f\x4a\xc5\x55\x3c\xe9\x63\x3e\xe9\x5b\xec\x09\x3f\xa0\x69\x2b\x7b\x68\xf6\x93\xc0\x8a\x1f\xda\x5e\xd3\x64\x38\xf2\xc9\x9c\xbf\x72\x45\x34\x06\x25\xd3\x1b\x12\xa6\x90\x9e\x16\x7f\x3e\x0d\x2f\x91\x5e\x74\x3c\x7f\x1e\xb8\x54\xf0\xd7\x7a\xbd\xd1\x80\x92\x37\x4a\x48\x6b\xae\x40\xe3\xda\x47\x9c\xab\x82\x4a\x01\x14\x95\x6a\x39\x6b\xc4\xb0\xd1\xca\xd5\x83\x4a\x6c\xf1\x49\xe0\x1b\xa1\xb9\x0d\xdf\x77\x68\x19\x67\x96\xf9\x2c\x8b\x12\x63\x25\x2d\x4a\x6b\x42\x4a\x9c\x5d\x8e\xe0\xf6\x60\x89\xc4\x7d\x13\x40\xea\x3c\xa2\x54\x99\x5f\x3d\xa1\x6a\x91\x2c\x9c\xf9\x33\x79\x86\x13\x99\x8d\xa3\x6b\x8f\xef\x64\x20\x29\x00\x5e\x7f\x22\xd3\x53\x9f\x8a\x76\x5c\x3f\x0e\xb8\x23\x3e\x55\x74\xa4\xa6\xa9\x66\xd6\x22\x0f\x77\x82\x30\xbd\x0b\xc2\x84\xd8\xfb\xd6\x85\x0a\xf2\x0a\x51\x42\xc3\xb4\x41\x1e\x1b\x92\xb4\xcc\xaa\xae\x16\xfb\x3a\xcc\x56\x0b\xab\x1a\x68\x94\x11\x14\x47\x77\x19\x74\x36\xf3\x7e\x8a\x39\xf9\x2f\x25\xda\x12\xf5\x11\x06\xc2\xc5\x60\xcb\x2a\xc1\xaf\x00\xdf\xb1\x68\x2d\x5b\x55\x18\xef\x18\xd2\x2a\xcc\xb4\x9b\x1f\xc1\xdf\x95\xaa\x90\x49\x7f\xdf\x54\x55\xef\xca\xf0\x8d\x22\xb2\xa2\x04\xb5\x76\x86\x02\x48\x87\x8d\xbe\xf7\xa2\x23\xf8\x75\xd9\x9f\x78\xee\x9c\x9a\x4c\xf7\xfc\x29\x24\xc7\xf7\x9e\x62\x7f\xf1\xd8\x12\x0d\x26\x18\x98\x76\xbe\x0f\x26\x73\xda\xe5\x48\x9d\x78\xc1\x5f\x93\x74\x7c\xd6\xdb\x1c\x1a\x5d\x8a\x14\x5b\x05\x83\xae\x5d\xac\xa9\x30\x92\xdd\xe0\x95\x9e\xa3\xc8\xce\x7e\x94\xad\x2d\xea\x85\x53\xde\xf7\x94\x49\x0e\xfe\x11\x11\x4f\xa5\xd5\x81\x2b\x5e\x85\xe4\x1f\x95\x89\x83\xce\x30\xdc\x50\xc4\x0b\x57\xca\xba\xd9\x9a\xd9\xa2\xa4\x14\xe1\xf8\xee\xca\x48\x2e\xed\x33\x81\xa4\x76\xeb\x94\x72\xd7\x87\x75\xf7\x72\xa8\xe4\x34\xd9\x9a\x5e\x7c\x38\xae\x19\x31\xc0\xa9\xa1\x6e\x43\x2a\x5b\x86\x04\x7b\x95\xea\x4d\x92\xa7\x9e\xfe\xfd\xb2\x48\x3b\x2c\xda\x1a\xb6\x18\x28\x91\x55\xb6\xdc\xd1\xee\x12\x99\xb6\x2b\x64\xd6\x47\x54\x63\x81\x62\xeb\xae\x24\xd0\xb8\x69\x2b\xa6\x41\x48\x8b\x7a\xcb\x2a\xe3\x9a\x23\x5b\x7a\x62\xc4\x7b\x49\x18\xd0\x68\x1a\x25\x39\x81\xb0\xca\x15\x50\x34\xd6\xec\x71\x7c\x9e\x66\xb7\xcb\xcf\xbf\x1c\xe0\xf0\x0f\x09\xe5\xea\x9e\x30\x85\xbf\xb1\x88\xc6\x3e\xf5\x7e\x7e\x98\x8f\xa1\xe8\xee\x31\x58\x69\x64\xaf\x66\xe8\x14\x94\xaa\x41\x4f\x74\x66\xbb\x6e\x29\x02\x72\x7a\x0b\x55\x23\xac\x58\xf1\x4a\xbd\x99\x90\xe8\xa0\x6b\x34\x6d\x4d\x19\x0e\x01\x91\x47\xb2\x07\x3a\xc9\x17\xe3\xfb\xd9\x6c\x3a\x5e\xba\xbe\xf6\xc0\x6b\xee\xd1\x45\x87\x0c\xef\x31\xec\xfb\x20\xbc\x55\x1a\xad\x0a\x34\x86\xf8\x13\xc5\x7b\xf1\x98\x4f\xb2\xa5\xef\x9f\xbd\xea\xad\xf8\x8f\x88\x8d\x62\x3c\xbf\x7f\x2d\xd2\x14\x3d\x20\x0d\x4a\x0b\x4c\xee\x40\x39\x3e\xad\x5b\xed\x79\xe5\xb3\xc2\x3f\x03\x0d\xb0\x95\x6a\xbd\x23\xde\x02\xf1\x84\xed\xc7\x59\xe9\x13\x68\x8e\x4f\x1a\xe0\xbc\xd1\x0b\x4b\xef\x42\x38\xbd\x0d\x8f\x6a\xcd\x44\x85\xbe\x47\x16\x84\xef\x8d\x8e\xcd\x60\xc5\xf8\xa1\x27\xdd\x51\xa7\xf1\x89\x10\x19\xf7\xe4\x0c\x8c\x95\x5c\x8b\x8d\x4b\xe9\x86\x19\x63\x4b\xad\xda\x4d\x39\x95\x44\x6c\xbe\xa7\x73\xdc\x44\xb7\x0d\x13\x32\xa1\xc2\xe1\xd3\xec\x74\xe7\x18\x98\xb6\x17\xab\xd1\x18\xb6\xe9\x53\x57\x23\x33\x3d\xd6\x46\x9b\x37\x7f\x35\xd3\x2d\xb9\xfe\xb7\x93\xbb\xd6\x42\x1b\xbb\x14\x35\x26\xe6\x2a\x76\x34\x19\xf5\xcd\x15\xff\x53\xe8\x5b\xf3\x5d\xf0\x81\xd2\xc8\x3b\xcb\xb5\xa2\xa9\xe7\xfc\xdd\x8b\x74\x2e\x5a\x8d\x67\xa4\xe9\xce\xd7\xfb\xe6\xf5\xa0\x55\x8f\x68\x92\xb2\x14\x4f\xfd\x39\x16\x91\xe4\x00\xdb\x5e\xb4\x47\x49\xec\xf7\xab\x4f\xa8\x4d\x5a\x36\x03\xa7\x3e\x5c\x98\xa5\xb5\xb7\xd1\x68\xed\x6e\x7c\x72\xed\xb8\x3d\x0b\x1e\xd2\xaa\x9a\x57\x4c\x62\x17\x16\x57\x9f\xbb\x91\x77\x94\x6c\xeb\x99\xe2\xe8\x5b\xd5\x30\x91\x4b\x63\x75\x4b\x0d\x0a\xf2\xfe\xe2\x81\xff\xd2\xf6\xdb\x7b\xb2\xc9\x38\xd7\x68\x92\x80\x5a\xf5\x8a\xf2\xf8\x6d\x13\xff\xa0\x70\x1b\xc7\x2e\x39\x82\xe2\xe4\xe1\x01\x7f\xe3\xd8\x68\xa4\x56\x85\x5f\xc4\x4c\xf8\x21\x08\xf8\x72\x4e\x14\x0d\xd9\x05\x5b\xc1\xa0\x79\x0f\xbd\xd7\x0f\x97\x03\x80\x47\x47\xed\x7e\x60\x2e\x82\xcb\xc8\x63\xf9\xe4\xec\xea\xf7\x08\x7a\xd9\x7d\x9d\x75\x30\x93\x06\xee\xa8\x9f\x03\x98\xd0\xdb\x3c\x95\xea\xb5\x7f\x9d\xba\xce\x9d\xfb\xb7\x48\xf8\xcf\xa4\xd5\xc9\x3f\x30\x00\xa6\x64\xff\xf7\x97\x9f\x8e\x7d\x98\x3c\x4b\x7c\x04\x2c\xd6\xae\x2d\x08\x2b\xcf\x47\xb2\x4e\x6c\x9b\x26\x9e\xe3\x67\xc9\xe4\x06\x2b\xb5\x49\x62\x27\x6a\x34\x96\xd5\x4d\x4a\xf7\x73\x78\xf8\x83\x6e\xde\x99\x3c\x6c\xe2\xff\xe0\xaf\xa7\xa3\x37\xf0\x77\x9a\x89\x1d\x7b\xa8\x67\xde\xe6\xe8\x08\x85\xfb\x53\xeb\xbd\x8a\xd2\x7d\x04\x5b\x61\xfe\xb1\xb8\x9f\xfd\x19\x10\xe9\x0b\xe3\xbb\x4e\x0a\x74\x11\x46\x94\x69\x82\x7c\x97\xf1\x0f\xce\x7f\xf0\xf6\x09\xd5\x21\x3d\xfa\xb7\xc1\x7f\x03\x00\x00\xff\xff\xfc\x7a\xa8\xbd\x09\x16\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 5641, mode: os.FileMode(436), modTime: time.Unix(1602617622, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
