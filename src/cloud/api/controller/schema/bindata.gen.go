// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x4b\x6f\xe3\xc8\xf1\xbf\xf3\x53\x94\xe1\xc3\x8e\x01\x5b\x87\x3f\xfe\xd9\x03\x6f\x8c\xa4\xd9\x61\xc6\x96\x1d\x4b\xf6\x64\xb3\x30\x8c\x12\xbb\x24\x36\x4c\x76\x73\xba\x8b\xb2\x95\x60\xbe\x7b\xd0\x0f\x52\xa4\x2c\x67\x31\x39\x89\xaa\xae\xc7\xaf\x9e\x5d\x7d\x0e\xab\x52\x5a\xd8\xc8\x8a\x40\x90\x2d\x8c\x5c\x93\x05\x2e\x09\x6c\x51\x52\x8d\xb0\x31\xba\xf6\xff\xb3\xbb\x1c\x2c\x99\x9d\x2c\x68\x92\x9c\x27\xe7\x90\xf3\x2f\x16\x94\x66\x90\x82\xb0\xba\x84\x75\xcb\xf0\x4a\xa0\x88\x04\xb0\x86\x1a\x55\x8b\x55\xb5\x87\x2d\x29\x32\xc8\x04\xbc\x6f\xc8\xc2\x46\x1b\xaf\x6f\xb5\x6f\x68\x59\x18\xd9\x30\x3c\xe4\xc9\x39\xbc\x96\xa4\x80\x7b\x30\xd2\x42\xdb\x08\x64\x12\x93\x00\xb1\x40\x05\x6b\x02\xa1\x15\xc1\x7a\x0f\xa6\x55\x4a\xaa\x6d\x9a\x9c\x03\x6c\x0d\x36\xe5\xf7\xea\x2a\x40\xbe\xf2\x76\x82\xe6\xce\xf6\x15\xdb\xe8\xd0\x24\x32\xc3\xd5\x95\x6e\xb9\x69\xb9\xa3\x8b\x09\x5b\x0f\x43\x16\x25\xbc\xca\xaa\x1a\x00\x2f\x09\x22\xb3\xd3\x1d\x00\x72\x89\x1c\xf8\xd6\x04\x8d\x2c\x5e\x48\x40\xdb\x38\x68\x8e\xfd\x21\x9f\x24\x31\xb6\x03\xfd\x5e\xd2\x82\x2d\x75\x5b\x09\xa0\x37\x69\x19\xa4\x0a\xe1\xc6\x9a\x40\x48\x43\x05\x6b\xb3\x07\x1c\x26\xa1\xc7\xec\xc4\x27\x49\x12\x53\xf3\xef\x04\xe0\x7b\x4b\x66\x9f\xc2\xdf\xdd\x4f\x02\x50\xb7\x8c\x2c\xb5\x4a\xe1\x26\x7e\x25\x3f\x92\xc4\x83\x7e\xb0\x64\x72\xb5\xd1\x5e\x4c\x8a\x14\xf2\xd9\x59\x02\xa0\xb0\xa6\x14\x96\x6c\xa4\xda\xba\xff\x54\xa3\xac\x86\x84\x46\x16\xdc\x9a\x11\x8f\x36\xdb\xc5\x48\xec\x47\x92\x90\x6a\x6b\xc8\x0c\xcb\x0d\x16\xec\x72\xeb\xed\x00\x64\xab\xe7\x87\xc5\xd7\xc5\xed\xb7\x45\xf7\xf7\x3a\x5f\x3c\xfc\xe3\x39\xbb\x99\xfd\xfa\xff\x1d\x69\x96\xdd\x7f\xcb\x17\x63\xda\xf4\x76\xb1\xca\xf2\xc5\xfc\xfe\x79\x39\x5f\x3d\xff\x9e\xdd\x5c\x2f\x4f\x1f\x0d\xf5\xf5\x40\x5a\xd6\x85\xae\x9b\x8a\x98\xb2\xc2\xc5\xa1\x87\x94\x8d\x10\x9d\x43\xa6\x80\x84\x64\x40\xcf\x06\xba\x28\x5a\x63\x41\x6e\x00\xa1\xb5\x64\xa0\x44\x0b\xb5\x16\x72\x23\x5d\x5d\x97\x04\x52\xf9\x42\xa0\x37\x76\xc9\x96\xca\x92\x61\xa9\xb6\xa0\x0d\x08\xaa\xc8\x7f\x17\x25\x1a\x2c\x98\x8c\x9d\x78\x23\xbe\x10\xa4\x2a\xaa\x56\xb8\xf6\xda\x37\x5e\x20\x64\xfe\x85\xf6\x6b\x8d\x46\x00\x2a\x01\x0d\xda\xa0\x40\xd7\x35\x2a\xe1\xc5\x1d\xe2\xf9\x2c\x5f\x05\xb8\x60\xa9\xa2\xe2\x80\x57\x55\xfb\xd3\xa0\x8b\x52\x5b\x52\x80\x0a\x70\x10\x0d\xb0\xed\x76\x4b\xd6\xc9\x4e\x3a\x58\x42\x16\xc8\x0e\x97\xf6\x26\x1c\xa8\x91\x88\x2f\x75\xc9\x5d\xdd\xd6\x7a\x17\x7a\xc2\x99\xfa\xc5\x82\xb3\xed\x9a\x5a\x7b\xa2\x72\x81\xc1\xa6\x31\xba\x31\xd2\x77\x0f\xae\x3b\x2f\x96\xf3\xeb\xf9\x74\x75\x32\x4b\x73\xc5\x92\xf7\x5f\xa5\x12\x21\x4b\xf3\xaf\x83\x2c\xb9\x7f\x77\xb7\xb3\xf8\xb5\x7c\x9c\x76\x5f\xd3\xfb\xfc\x6e\x15\xff\x2c\xb2\x9b\xf9\xf2\x2e\x9b\xce\xfb\x92\xf7\x5d\xe1\xd5\x39\xa4\x69\xdf\x02\xae\x86\x8b\xaa\xb5\xec\x88\xd3\xf0\x71\x44\x9f\x6a\xa5\xa8\x08\xad\x34\x3d\x26\x1d\x78\x65\x57\xf1\x9f\x70\x50\xfa\xe9\xa8\x11\x2e\x52\x98\x5e\xe7\x1d\xc5\xc9\x75\xbc\xb6\x97\x1a\xb6\xd3\xc5\x41\xdc\x76\x96\x86\xe9\xf8\xe4\x0b\xb0\xe3\xbe\x8c\xe1\xbf\xd3\x36\x85\x5c\xf1\x65\x2c\x8c\xf4\x83\x1e\xb8\x18\x1f\xdc\x93\x6d\x2b\x3e\x36\xf1\x59\x52\x25\x8e\xed\x6c\x1c\x31\xba\x77\x32\x71\x97\x60\xe8\x7b\x2b\x0d\x89\xcc\x6c\x1d\xa3\x4d\xe1\x8f\xd3\xac\x4f\x17\xe9\xe8\x64\xd9\x17\xe5\x53\xe2\x6b\x30\xdc\x0c\xf5\xd6\x00\x29\xd1\x68\xa9\xd8\x3a\xf5\x1b\xf2\x75\x26\x74\xe1\xea\x16\x8a\x4a\xb7\x02\x1b\x39\x69\x8c\xf6\xc5\x5b\xc9\x1d\x3d\x4a\x7a\x75\x96\xaf\xe3\xf7\x0d\x31\x0a\x64\x3c\x7b\x3a\x1b\x70\x4c\xb5\x62\x52\x6c\x3f\xc5\x51\x78\x91\xc2\xf5\xd1\x91\x63\x0f\xf7\x88\x53\x17\x10\x8d\x95\x85\xd3\x13\xaa\x96\xa3\x83\xb3\xbe\x22\xdf\x87\xde\x97\xa7\x1b\x10\xe4\x6e\xc6\x1a\x99\x49\xc4\x11\x23\xed\x60\xde\xd8\x98\x85\x70\x3f\xb9\xfe\x5e\x13\x29\x68\xd0\x58\x12\xdd\xad\x33\xee\x5a\xdd\xb7\x76\x68\x6b\x5c\x2f\x59\x37\xd0\x68\x2b\x5d\xa4\xfd\x6c\xe9\x6d\xe6\xc3\x64\x7b\xfe\x6f\x25\x71\x49\xe6\x1d\x06\x87\x0b\x61\x87\x95\x14\x97\x40\x6f\x54\xb4\x8c\xeb\x8a\xba\x91\xe5\xb4\x4a\x3b\xef\xe9\x29\xfc\x55\xeb\x8a\x50\x85\xf1\x55\x55\x83\x09\x14\xb6\x01\xc2\xa2\x04\xbd\xf1\x86\x22\x48\x8f\xcd\x7d\x1f\x58\x53\xf8\x63\x35\x24\x3c\xf5\x41\x1d\x91\x07\xf1\x94\x4a\xd0\xdb\x40\x71\x98\x63\x5c\x92\xa5\x11\x06\x34\x3e\xf6\xd1\x64\xee\xa4\x7c\x2b\x8d\xa2\x10\xa6\xae\x73\x1f\x07\xc2\x71\x9b\x71\x99\xc2\x75\x34\xe8\x77\x82\x1a\x5f\xc2\x8c\x8c\x51\x19\x04\xca\xd9\x39\xfc\xcb\x36\x4c\x66\xe9\x95\x0f\x23\x65\x47\x8e\x7f\xd4\x2a\xa7\xca\xea\x28\x14\x2f\x52\x89\x8f\x1a\xf6\xe8\xfa\x4f\x20\xae\x80\x4d\x18\x20\x3d\xb5\x46\x2e\x4a\x57\x22\x82\xde\x7c\x53\xe7\x8a\x9f\xfa\x29\x1e\xc7\xe3\x92\x91\x5b\x3b\x08\xbf\xa0\x0d\xba\x02\xb7\xec\x6e\x01\xb9\x71\xbb\x62\x19\xeb\xe7\x45\xe9\x57\xe5\x02\xf1\xf8\xcf\xe7\xe5\xf8\x3e\x76\xa2\x51\xc4\x42\x49\x58\x71\xb9\x77\xd2\x25\xa1\xe1\x35\x21\x87\x84\x19\x2a\x48\xee\x48\xb8\x5b\xd4\xd0\xb6\xad\xd0\x80\x54\x4c\x66\x87\x95\xf5\x57\x29\x97\xa1\xee\xe3\x44\x77\xea\x0c\xd9\x46\x2b\xe1\x40\xb0\xf6\xd3\x8a\x2c\xdb\x03\x8e\x2f\xf3\xec\x7a\xf5\xe5\xf7\x23\x1c\x61\x19\xd4\x7e\xf0\x48\x5b\x84\x6b\xc0\x75\x69\xa8\xac\xdf\xee\xef\xa6\x50\xf4\x97\x03\xac\x0d\xe1\x8b\x9d\x78\x05\xa5\x6e\x28\xf4\x31\x72\x7f\xb7\x76\x80\xbc\xde\x42\xd7\x04\x6b\x2c\x5e\xdc\x4d\x2e\x15\x79\xe8\x86\x6c\x5b\xbb\x02\x86\x88\x28\x20\x39\x00\x9d\xe5\xcb\xe9\xed\x62\x31\x9f\xae\xe6\xb3\xf7\x51\xf3\x8b\xb3\x73\x32\xee\xd4\x34\x8c\x41\xdc\x37\x1b\xa3\x0b\xb2\xd6\xb5\x47\xc7\x3e\xc8\xc7\xdd\x2c\x5b\xe5\x8b\xdf\x7a\xd5\x3b\xf9\x2f\xd9\xad\x15\x9d\xff\x61\xe3\x77\x24\xf7\x08\xb0\xa4\x18\x50\xed\x41\xfb\x76\xd9\xb4\x26\xb4\x4d\xa8\x8a\xb0\xca\x5b\xc0\xb5\x6e\x43\x20\x5e\x63\x5f\x49\x1e\xe6\x59\x9b\x13\x68\xde\x7b\x1a\xe1\xbc\xba\x2d\xd9\xec\x63\x3a\x83\x8d\x80\x6a\x83\xb2\xa2\xb0\x51\x49\x87\xef\xd5\xb9\x8d\xb0\x46\x71\x1c\x49\xef\xea\xfc\xf9\x73\x96\x5f\xcf\x67\x7d\x43\x3d\x7a\x03\x53\xad\x36\x72\xeb\x4b\xba\x41\x6b\xb9\x34\xba\xdd\x96\x73\xe5\xfa\x56\x1c\xba\xb5\x13\x1a\x6c\x12\x47\x4b\x76\x88\x42\x3a\x6e\x15\x7f\x1b\xa1\xe5\x2f\x5d\x61\xdf\xd8\x14\x3e\x57\x1a\xfd\x75\xbc\x1b\x20\x48\x47\x78\x0e\xa7\x8f\x64\xec\xb8\x53\x63\x9e\x3f\x3c\x58\x8c\xdb\x3d\x52\x1f\xf2\x59\x4f\x3c\x72\x66\xbc\xf4\x04\xb7\x9a\x4c\x08\x43\xd6\x0e\x9f\x04\xac\x5f\x48\x8d\x1e\x04\x5e\x4b\xf7\x0a\xf1\x82\x53\x43\xc8\x34\x3d\xb1\x78\x25\x00\x0f\x3e\x7b\x43\x3f\x3f\x45\x74\x0e\x5c\x3e\x3b\xbb\xfc\x6f\x39\xb8\xe8\xbf\x0e\xb6\x07\x4b\x57\x7c\x8b\xb4\x66\xf4\xb2\x01\xb0\x25\xfe\xdf\x5f\x7e\x7d\x0f\x7b\xb4\x7f\x05\xa7\x99\x6a\x3f\x89\xe3\xc9\xd3\x3b\x5e\xcf\xb6\x1b\x07\xde\x2f\x89\x25\xaa\x2d\x55\x7a\x3b\x0a\x97\xac\xc9\x32\xd6\xcd\x20\xe7\x3f\x92\xe4\x1c\xee\xff\x64\xc5\xf1\x26\x8f\x37\x9b\x3f\x79\xd2\xb9\xa1\x3e\xf2\xf1\x27\xcd\x74\x6b\x8c\x37\x53\x47\x9b\xe9\x3b\x14\xfe\xb1\xf8\x56\x75\xdc\x43\x04\x3b\x69\xff\xb6\xbc\x5d\xfc\x2f\x20\xc6\x6b\xd7\x4f\x79\x0a\x6e\x38\x75\x28\xc7\x05\xf2\x53\xc6\x3f\xf0\xff\x68\x21\x74\xa9\x7e\xe7\xfa\x8f\xe4\x3f\x01\x00\x00\xff\xff\x9f\x8b\x5d\xbb\x61\x11\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4449, mode: os.FileMode(436), modTime: time.Unix(1589312769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
