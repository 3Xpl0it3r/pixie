// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x41\x6f\xe3\x36\x10\x85\xef\xfc\x15\x6f\xe1\x43\x5b\xa0\xf6\x0f\xd0\x2d\x70\xd2\xc6\x68\xd7\xbb\xad\x9d\x16\xed\x65\x41\x91\x63\x8b\x30\x45\x2a\x9c\x61\x52\xa3\xc8\x7f\x2f\x48\xc9\x8e\xe2\x9e\x24\x51\xf3\xde\x7c\x9c\x79\x0b\xec\x3b\xc7\x38\x38\x4f\xb0\xc4\x26\xb9\x96\x18\xd2\x11\xd8\x74\xd4\x6b\x1c\x52\xec\xeb\xf7\xdd\xd7\x0d\x98\xd2\x8b\x33\xb4\x52\x0b\xb5\xc0\x46\xbe\x63\x84\x28\x70\x96\xb4\xff\x11\x6d\x16\xbc\x12\x02\x91\x85\x44\xf4\x3a\x64\xed\xfd\x19\x47\x0a\x94\xb4\x10\xe4\x3c\x10\xe3\x10\x53\xf5\xdb\x9f\x07\xda\x99\xe4\x06\xc1\xd3\x46\x2d\xf0\xda\x51\x80\x5c\x61\x1c\x23\x0f\x56\x0b\xd9\xd5\x88\x68\x74\x40\x4b\xb0\x31\x10\xda\x33\x52\x0e\xc1\x85\x63\xa3\x16\xc0\x31\xe9\xa1\x7b\xf6\xcb\x11\x79\x59\xfb\x8c\xce\x97\xde\x4b\xe1\xe9\x42\xab\xa9\x18\xcb\x65\xcc\x32\x64\xb9\x9c\xdb\x95\x70\xc5\x70\xa6\xc3\xab\xf3\x7e\x06\xde\x11\xa6\xe2\xe2\x3d\x02\x4a\xa7\x65\xac\x6b\x09\x83\x33\x27\xb2\xc8\x43\x41\x2b\xe5\x4f\x9b\x95\x9a\x66\x3b\xf3\xaf\x4a\x06\x77\x31\x7b\x0b\xfa\xc7\xb1\xc0\x85\x71\xdc\xba\x27\x58\x97\xc8\x48\x4c\x67\xe8\xf9\x12\xae\xcc\x45\xbe\x52\x6a\x5a\xcd\xbf\x0a\x78\xce\x94\xce\x0d\x7e\x2b\x0f\x05\xf4\x59\xb4\xb8\x18\x1a\x7c\x9e\xde\xd4\x9b\x52\x15\xfa\x89\x29\x6d\xc2\x21\x56\x99\xb3\x0d\x36\xf7\x9f\x14\x10\x74\x4f\x0d\x76\x92\x5c\x38\x96\x6f\xea\xb5\xf3\xf3\x83\xc1\x19\xc9\x69\x56\x73\x31\xac\x3d\xab\x5b\x66\x4a\xcd\xb5\x41\x11\x19\x9f\x59\xca\xe1\x7a\x7c\xb9\x39\x5f\xc7\x10\xc8\x8c\xa0\xeb\xdb\xa3\xb1\xf6\x4d\x29\x0a\xb9\xbf\xfc\xde\x89\x96\xcc\xb5\x5b\x19\x6b\x09\xeb\x41\x67\x2f\x60\x29\x1b\x72\x87\x92\xc4\xce\x85\x63\x09\xce\x29\xc4\xd7\xb0\x52\xc0\x1f\x7f\x7f\xdb\xed\xbf\x3d\x6d\x7f\xd9\x7e\xf9\x73\x7b\x95\x4e\x12\x46\x47\xda\x4b\x77\x2e\xea\x8e\x74\x92\x96\xb4\x30\x74\x22\x24\x32\xe4\x5e\xc8\x22\x06\x24\x3a\x66\xaf\x13\x5c\x10\x4a\x2f\xda\x33\x74\xb0\x65\x3b\xd5\x70\xba\x51\xb1\x4b\xc4\x43\x0c\xb6\x40\x48\x44\xa2\xe7\x4c\x2c\xfc\xce\xf1\xf8\x70\xf7\xeb\xfe\xf1\xaf\x1b\x8e\x31\x6a\xb1\x48\xac\x63\x33\x8e\x81\x6c\x81\x2a\x09\xf8\xf9\xf7\xaf\x6b\x98\xeb\x70\xd0\x26\xd2\x27\x5e\x55\x83\x2e\x0e\xf5\x1e\x25\x8a\xd5\xb5\x08\x2e\x40\xd5\xd7\xc4\x9e\xd0\x6a\x73\x42\x0c\xde\x05\xaa\xe8\x89\x38\xf7\x54\x82\x37\x11\x8d\x24\xef\xa0\xf7\x9b\xdd\xfa\xcb\x76\xfb\xb0\xde\x3f\xdc\x5f\xd7\x3d\xdb\xe4\x4d\x84\xb8\xee\xa6\xf9\xb8\xaa\xf2\xc3\x6b\x96\xc7\xcb\x60\x3f\x73\x83\x9f\x7c\xd4\xf2\xe9\xd6\xf2\xe3\xea\x47\xf3\xe1\xce\xda\x44\xcc\xf3\x24\x4a\x3c\x51\xf8\x7f\x0e\x2f\x49\xaf\xc2\x75\x22\x2d\x34\x19\x7f\x6f\x63\xaf\x5d\xd8\xce\x22\xfe\xc3\x87\x48\xaa\x37\xf5\x5f\x00\x00\x00\xff\xff\x76\x76\x1a\x8e\x01\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 1281, mode: os.FileMode(436), modTime: time.Unix(1566841560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

