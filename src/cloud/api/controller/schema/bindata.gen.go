// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\xcf\x8e\xd5\x20\x14\xc6\xd7\xf2\x14\x9f\xe9\x42\x4d\x6c\x1f\xa0\x3b\x33\x6e\xba\xd0\x68\x66\xee\x03\xd0\x72\xee\xe5\x44\x0a\x0c\x1c\xbc\x36\x66\xde\xdd\x94\xb6\xd7\xae\x5a\xe0\xfb\xf3\x83\xd3\xe0\xc5\x72\xc6\x95\x1d\xc1\x50\x9e\x12\x8f\x94\x21\x96\x90\x27\x4b\xb3\xc6\x35\x85\xb9\xae\xbf\xfc\x18\x90\x29\xfd\xe6\x89\x3a\xd5\xa8\x06\x83\x7c\xc8\xf0\x41\xc0\x86\xb4\xfb\x8c\xb1\x08\xee\x04\x4f\x64\x20\x01\xb3\xf6\x45\x3b\xb7\xe0\x46\x9e\x92\x16\x82\x2c\x91\x32\xae\x21\xd5\xbc\x97\x25\xd2\xf3\x94\x38\x0a\x2e\x83\x6a\x70\xb7\xe4\x21\x0f\x18\xce\x28\xd1\x68\x21\xd3\x6d\x88\x93\xf6\x18\x09\x26\x78\xc2\xb8\x20\x15\xef\xd9\xdf\x7a\xd5\x00\xb7\xa4\xa3\x7d\x75\xed\x86\xdc\xd6\x9e\x2d\xf9\xe8\x6e\x25\xef\x17\xea\x76\x31\xda\x36\x14\x89\x45\x8e\x7d\xd3\x49\xae\x18\x3c\x59\xdc\xd9\xb9\x13\xb8\x25\xec\xe2\x35\x7b\x03\x14\xab\x65\xd3\x8d\x84\xc8\xd3\x2f\x32\x28\x71\x45\x5b\xe5\x97\xa1\x53\xfb\xdb\x9e\xf2\xab\x33\x23\xdb\x50\x9c\x01\xfd\xe1\x2c\x60\xbf\x3d\xb7\x9e\x09\x86\x13\x4d\x12\xd2\x02\x7d\x1e\xc2\x83\x79\xb5\x77\x4a\xed\xa3\xf9\xab\x80\xd7\x42\x69\xe9\xf1\x73\xfd\x28\x60\x2e\xa2\x85\x83\xef\xf1\x6d\xff\x53\x6f\x4a\x55\xe8\x4b\xa6\x34\xf8\x6b\xa8\x36\x36\x3d\x86\xaf\xef\x15\xe0\xf5\x4c\x3d\x9e\x25\xb1\xbf\xad\x6b\x9a\x35\xbb\xf3\x46\xe4\x49\x4a\x3a\x69\x8e\xc0\xda\x59\xd3\x4a\xa6\xd4\x3f\x0a\xfe\x2b\x9e\x5c\xc9\xf2\x68\x7d\x77\x94\x1e\xc7\x07\xe2\x7a\xf6\x94\x48\x0b\xed\x86\x8f\x26\xcc\x9a\xfd\xf7\x13\xda\xa7\xfe\x9c\xa6\xde\xfe\x05\x00\x00\xff\xff\xa9\x1c\xea\xb6\xb8\x02\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 696, mode: os.FileMode(436), modTime: time.Unix(1566594166, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

