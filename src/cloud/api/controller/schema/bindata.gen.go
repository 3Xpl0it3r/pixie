// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xdd\x8e\xdb\x36\x13\xbd\xd7\x53\x4c\xb0\x17\x5f\x16\xc8\x1a\xf8\x82\x34\x28\x74\xa7\xc8\xda\x44\xe8\x5a\xde\xae\x64\xa7\x69\x10\x18\x34\x35\x96\x88\x95\x48\x85\x3f\xde\xb8\x45\xde\xbd\x20\x29\xc9\x92\x37\x6d\xae\x4c\x0d\x67\x0e\xcf\xcc\x99\x19\x5f\x41\x51\x33\x05\x07\xd6\x20\x94\xa8\xa8\x64\x7b\x54\xa0\x6b\x04\x45\x6b\x6c\x09\x1c\xa4\x68\xdd\x77\x74\x9f\x82\x42\x79\x64\x14\x17\xc1\x55\x70\x05\xa9\xfe\x9f\x02\x2e\x34\xb0\x12\x49\xf3\x0a\xf6\x46\xc3\x13\x02\x47\x2c\x41\x0b\x68\x09\x37\xa4\x69\x4e\x50\x21\x47\x49\x34\x82\x3e\x75\xa8\xe0\x20\xa4\xc3\x2b\x4e\x1d\xe6\x54\xb2\x4e\xc3\x26\x0d\xae\xe0\xa9\x46\x0e\x7a\x24\xc3\x14\x98\xae\x24\x1a\xcb\x85\xa7\x48\x09\x87\x3d\x42\x29\x38\xc2\xfe\x04\xd2\x70\xce\x78\x15\x06\x57\x00\x95\x24\x5d\xfd\xb5\xb9\xf1\x94\x6f\xdc\x3b\x1e\x79\x78\xfb\x46\xab\x3e\xa1\x45\xef\x0c\x37\x37\xc2\xe8\xce\xe8\xc1\x5e\x2e\xb4\x72\x34\x18\xad\xe1\x89\x35\xcd\x84\x78\x8d\xd0\x3b\x5b\x6c\x4f\x50\xd7\x44\x7b\xbf\x3d\x42\xc7\xe8\x23\x96\x60\x3a\x4b\xcd\xba\x6f\xd2\x45\xd0\xd7\x76\x82\xef\x22\x15\xa8\x5a\x98\xa6\x04\xfc\xc6\x94\x06\xc6\x7d\xb9\x49\x8b\x50\x32\x89\x54\x0b\x79\x02\x32\x15\x61\xe4\x6c\xc3\x17\x41\xd0\x4b\xf3\x77\x00\xf0\xd5\xa0\x3c\x85\xf0\xbb\xfd\x09\x00\x5a\xa3\x89\x66\x82\x87\xb0\xea\x4f\xc1\xf7\x20\x70\xa4\x37\x0a\x65\xca\x0f\xc2\x85\xb1\x32\x84\x74\xf9\x22\x00\xe0\xa4\xc5\x10\x72\x2d\x19\xaf\xec\x37\xb6\x84\x35\x53\x43\xc7\xa8\x36\x72\xe2\xf3\x3d\x08\x90\x9b\x16\x22\xa9\xd9\x81\x50\x6d\x85\x74\xa0\x00\x51\xb1\xdb\x64\xbf\x65\xeb\x8f\xd9\xf0\x79\x97\x66\x9b\x3f\x76\xd1\x6a\xf9\xf6\xcd\x60\x5a\x46\x0f\x1f\xd3\x6c\x6e\x8b\xd7\x59\x11\xa5\x59\xf2\xb0\xcb\x93\x62\xf7\x29\x5a\xdd\xe5\x3f\xbe\x9a\xe2\x0d\x99\xb9\xe4\x1d\x03\xa3\x50\x86\x63\xa6\x96\x3d\x6d\x8c\xd2\xd6\x18\xfb\xc3\x85\x3d\x16\x9c\x23\xf5\x15\x8b\x2f\x4d\x67\x5f\x36\xe4\xfa\x92\x4c\x92\x0e\x67\x25\xb8\x0e\x21\xbe\x4b\x07\x8b\x8d\x1b\x7c\xd5\x18\x95\x4d\x8a\x7d\x7d\x0e\x57\xc3\x4b\xf8\x4d\x4b\x42\xf5\x96\xa9\x5b\xc3\xa9\x33\xbf\xf4\x9d\x3c\x96\xff\x15\x1c\x0c\xa7\x16\x48\x85\xf0\xb9\x37\x7e\xb9\x0e\x61\x1a\x74\x16\xa9\x4f\x2a\xd7\x44\x1b\xe5\x6a\x64\xbb\xd2\xce\xfa\x81\x98\x46\x83\xd2\xb6\xc1\xd9\xc1\x0e\x72\xcd\x78\x65\xe7\xee\x91\x8b\x27\xbe\x08\x00\xb6\x7f\xee\xf2\xa9\xa2\x3e\xb4\x0f\x51\x50\x23\x69\x74\x7d\xb2\xd1\x35\x12\xa9\xf7\x48\xb4\x02\x22\x11\x24\x52\x64\x47\x2c\x41\x70\x90\x58\x99\x86\x48\x60\x5c\xa3\x3c\x92\x46\x01\xe1\xa5\x6d\x6e\x07\xd8\xeb\x60\xe1\x24\xaa\x4e\xf0\xd2\x92\xd0\x02\x24\x7e\x35\xa8\xb4\x3a\xf3\xf8\x90\x44\x77\xc5\x87\x4f\x17\x3c\xfc\xa4\x0a\x1b\x52\x32\x45\xbd\x78\x58\x5a\x52\x76\x80\xde\x3f\xdc\xc7\x40\x47\x49\x61\x2f\x91\x3c\xaa\x85\x03\xa8\x45\xe7\xf2\xb0\x93\xec\x50\x6d\xc0\x40\xc8\xe1\x52\xd1\x22\xec\x09\x7d\x04\xc1\x1b\xc6\xd1\x51\x97\xa8\x4c\x8b\x76\x6e\x7b\x46\x9e\xc9\x99\xe8\x32\xcd\xe3\x75\x96\x25\x71\x91\x2c\xc7\x26\xdd\xb2\xbf\x98\x6b\xae\x03\xab\x9c\x0e\x1d\x51\x4a\xd7\x52\x98\xaa\x4e\x38\xd9\x37\x58\x86\xf0\x4e\x88\x06\xc9\x79\x66\x27\x4d\x7b\x31\xb6\xca\x09\x1a\xce\xf5\xb5\x17\x0d\x51\xfa\xc3\xa0\xc6\x4a\x85\x70\xdb\x08\xe2\xda\xf1\x38\x61\x10\xce\xf8\xbc\xb8\x7c\x70\x3e\x03\xfe\xe9\x2e\x2a\x4b\x89\x4a\x4d\x77\x83\x16\x8f\xc8\x67\x9b\xc1\xa1\x0c\xbb\xc7\x05\xc6\x12\x89\xc6\xf8\x07\x73\x18\x00\x6c\xdc\x8a\x9f\x72\x79\xd9\x0b\x90\x2e\x5d\xaa\xaf\xfe\xab\x4e\xd7\xe3\x69\x92\xc1\x79\x06\xfb\xa5\x64\xe4\x6c\x9f\x01\xa8\x9a\xbc\xfe\xe5\xed\x73\xda\xb3\x71\xf4\x49\x6b\x6c\xed\x98\x0d\x37\x5f\x9e\xf9\x3a\xb7\x23\x4a\xe5\x56\xc8\xf9\x15\x5a\x13\x5e\x61\x23\xaa\x59\xb9\x58\x8b\x4a\x93\xb6\x9b\xe8\x32\x00\x2e\x05\xf5\x8e\x2b\xd2\x25\x5c\xf7\x0b\x6d\x98\xf5\x29\x4a\x39\x78\x3e\xcf\x60\xcb\x54\xde\x21\xed\x49\x55\xc4\x7e\xfc\xab\xd7\x4f\x1f\x3a\x7a\xbf\x70\x08\xb0\x00\x7e\xab\x2c\x89\x26\xe3\xda\x5f\x46\x45\xb4\x2b\x3e\xdd\x27\x93\x4d\xf1\x6e\xbd\xbe\x4b\x22\x7b\x4a\xb3\xc2\xad\xf9\x4d\x9a\x15\xff\x7f\xfd\x6b\x00\x70\x7b\xb7\x8e\xbc\x2d\x2f\x1e\xd2\xec\x7d\x00\x50\xa4\xab\xe4\xed\x9b\xcc\xee\xfc\xe5\xe6\x21\x2a\xd2\x75\xe6\x3e\x87\x2d\x96\x63\x4b\xb8\x66\x74\x7c\xd3\xad\xa5\xfc\x3e\x89\xd3\xdb\x34\x59\x7a\x43\xb6\xce\x12\x7f\x8a\xde\x27\x59\xb1\xdb\xa4\xfd\xc5\xe6\x7e\x38\xe5\xc9\xc3\x36\x8d\x93\x5d\x16\xad\x92\xb1\x1c\xb7\x3c\x92\x95\x4b\x30\x92\x7e\x34\x2f\xff\x13\xcb\x3e\xdd\x70\x4c\xdc\x8d\xe0\x84\x54\x38\xa3\xe8\x62\xfc\x82\xdd\x92\xc6\xe0\x73\x09\xce\x6f\xba\x07\x89\xac\x6c\x9b\xcd\x98\xbc\xf8\x72\xe9\xfe\x53\xc1\x0e\xd6\xcd\x4b\x76\x86\x9a\xe9\x3e\xfe\x43\x38\x8c\x72\xd2\x73\x21\x7c\x7e\xd6\x82\x96\xc2\xd8\x06\xde\xe7\xa2\x77\xbc\xc7\x61\xa0\x37\xe6\x30\xbd\xff\x1e\xfc\x13\x00\x00\xff\xff\x55\x57\xd0\x9c\x65\x0a\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 2661, mode: os.FileMode(420), modTime: time.Unix(1585182381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
