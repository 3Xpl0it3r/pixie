// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x45\x1e\xd6\x00\x8d\x81\x15\x5d\x31\xe8\x4d\x95\x95\x56\x58\x2c\x67\x91\x9c\xae\x2b\x0a\x83\xa6\xce\x12\x11\x89\x54\xf9\xc3\xa9\x3b\xe4\x7f\x1f\x48\x4a\xb2\xe4\x74\xeb\x93\xa9\xe3\xdd\xc7\xef\xee\xbb\x3b\x5f\x40\x51\x33\x05\x7b\xd6\x20\x94\xa8\xa8\x64\x3b\x54\xa0\x6b\x04\x45\x6b\x6c\x09\xec\xa5\x68\xdd\x77\x74\x9b\x82\x42\x79\x60\x14\x17\xc1\x45\x70\x01\xa9\xfe\x45\x01\x17\x1a\x58\x89\xa4\x79\x05\x3b\xa3\xe1\x11\x81\x23\x96\xa0\x05\xb4\x84\x1b\xd2\x34\x47\xa8\x90\xa3\x24\x1a\x41\x1f\x3b\x54\xb0\x17\xd2\xe1\x15\xc7\x0e\x73\x2a\x59\xa7\x61\x93\x06\x17\xf0\x58\x23\x07\x3d\x92\x61\x0a\x4c\x57\x12\x8d\xe5\xc2\x53\xa4\x84\xc3\x0e\xa1\x14\x1c\x61\x77\x04\x69\x38\x67\xbc\x0a\x83\x0b\x80\x4a\x92\xae\xfe\xda\x5c\x79\xca\x57\xee\x1d\x8f\x3c\xbc\x7d\xa5\x55\x9f\xd0\xa2\x77\x86\xab\x2b\x61\x74\x67\xf4\x60\x2f\x17\x5a\x39\x1a\x8c\xd6\xf0\xc8\x9a\x66\x42\xbc\x46\xe8\x9d\x2d\xb6\x27\xa8\x6b\xa2\xbd\xdf\x0e\xa1\x63\xf4\x01\x4b\x30\x9d\xa5\x66\xdd\x37\xe9\x22\xe8\x6b\x3b\xc1\x77\x91\x0a\x54\x2d\x4c\x53\x02\x7e\x63\x4a\x03\xe3\xbe\xdc\xa4\x45\x28\x99\x44\xaa\x85\x3c\x02\x99\x8a\x30\x72\xb6\xe1\x8b\x20\xe8\xa5\xf9\x27\x00\xf8\x6a\x50\x1e\x43\xf8\xd3\xfe\x04\x00\xad\xd1\x44\x33\xc1\x43\x58\xf5\xa7\xe0\x29\x08\x1c\xe9\x8d\x42\x99\xf2\xbd\x70\x61\xac\x0c\x21\x5d\xbe\x08\x00\x38\x69\x31\x84\x5c\x4b\xc6\x2b\xfb\x8d\x2d\x61\xcd\xd4\xd0\x31\xaa\x8d\x9c\xf8\x3c\x05\x01\x72\xd3\x42\x24\x35\xdb\x13\xaa\xad\x90\x0e\x14\x20\x2a\xb6\x9b\xec\x8f\x6c\xfd\x31\x1b\x3e\x6f\xd2\x6c\xf3\xd7\x36\x5a\x2d\xdf\xbe\x19\x4c\xcb\xe8\xee\x63\x9a\xcd\x6d\xf1\x3a\x2b\xa2\x34\x4b\xee\xb6\x79\x52\x6c\x3f\x45\xab\x9b\xfc\xc7\x57\x53\xbc\x21\x33\x97\xbc\x63\x60\x14\xca\x70\xcc\xd4\xb2\xa7\x8d\x51\xda\x1a\x63\x7f\x38\xb3\xc7\x82\x73\xa4\xbe\x62\xf1\xb9\xe9\xe4\xcb\x86\x5c\x5f\x92\x49\xd2\xe1\xac\x04\x97\x21\xc4\x37\xe9\x60\xb1\x71\x83\xaf\x1a\xa3\xb2\x49\xb1\x2f\x4f\xe1\x6a\x78\x09\xbf\x69\x49\xa8\xbe\x67\xdf\xaf\x0d\xa7\xce\xfc\xd2\x77\xf2\x58\xfe\x57\xb0\x37\x9c\x5a\x20\x15\xc2\xe7\xde\xf8\xe5\x32\x84\x69\xd0\x49\xa4\x3e\xa9\x5c\x13\x6d\x94\xab\x91\xed\x4a\x3b\xeb\x7b\x62\x1a\x0d\x4a\xdb\x06\x67\x7b\x3b\xc8\x35\xe3\x95\x9d\xbb\x07\x2e\x1e\xf9\x22\x00\xb8\xff\x7b\x9b\x4f\x15\xf5\xa1\x7d\x88\x82\x1a\x49\xa3\xeb\xa3\x8d\xae\x91\x48\xbd\x43\xa2\x15\x10\x89\x20\x91\x22\x3b\x60\x09\x82\x83\xc4\xca\x34\x44\x02\xe3\x1a\xe5\x81\x34\x0a\x08\x2f\x6d\x73\x3b\xc0\x5e\x07\x0b\x27\x51\x75\x82\x97\x96\x84\x16\x20\xf1\xab\x41\xa5\xd5\x89\xc7\x87\x24\xba\x29\x3e\x7c\x3a\xe3\xe1\x27\x55\xd8\x90\x92\x29\xea\xc5\xc3\xd2\x92\xb2\x03\xf4\xfe\xee\x36\x06\x3a\x4a\x0a\x3b\x89\xe4\x41\x2d\x1c\x40\x2d\x3a\x97\x87\x9d\x64\x87\x6a\x03\x06\x42\x0e\x97\x8a\x16\x61\x47\xe8\x03\x08\xde\x30\x8e\x8e\xba\x44\x65\x5a\xb4\x73\xdb\x33\xf2\x4c\x4e\x44\x97\x69\x1e\xaf\xb3\x2c\x89\x8b\x64\x39\x36\xe9\x3d\xfb\xce\x5c\x73\xed\x59\xe5\x74\xe8\x88\x52\xba\x96\xc2\x54\x75\xc2\xc9\xae\xc1\x32\x84\x77\x42\x34\x48\x4e\x33\x3b\x69\xda\xb3\xb1\x55\x4e\xd0\x70\xae\xaf\xbd\x68\x88\xd2\x1f\x06\x35\x56\x2a\x84\xeb\x46\x10\xd7\x8e\x87\x09\x83\x70\xc6\xe7\xc5\xf9\x83\xf3\x19\xf0\x4f\x77\x51\x59\x4a\x54\x6a\xba\x1b\xb4\x78\x40\x3e\xdb\x0c\x0e\x65\xd8\x3d\x2e\x30\x96\x48\x34\xc6\x3f\x98\xc3\x00\x60\xe3\x56\xfc\x94\xcb\xcb\x5e\x80\x74\xe9\x52\x7d\xf5\x7f\x75\xba\x1c\x4f\x93\x0c\x4e\x33\xd8\x2f\x25\x23\x67\xfb\x0c\x40\xd5\xe4\xf5\x6f\x6f\x9f\xd3\x9e\x8d\xa3\x4f\x5a\x63\x6b\xc7\x6c\xb8\xf9\xf2\xcc\xd7\xb9\x1d\x50\x2a\xb7\x42\x4e\xaf\xd0\x9a\xf0\x0a\x1b\x51\xcd\xca\xc5\x5a\x54\x9a\xb4\xdd\x44\x97\x01\x70\x29\xa8\x77\x5c\x91\x2e\xe1\xba\x5f\x68\xc3\xac\x4f\x51\xca\xc1\xf3\x79\x06\xf7\xec\x7b\xde\x21\xed\x49\x55\xc4\x7e\xfc\xa7\xd7\x4f\x1f\x3a\x78\xbf\x70\x08\xb0\x00\x7e\xab\x2c\x89\x26\xe3\xda\x5f\x46\x45\xb4\x2d\x3e\xdd\x26\x93\x4d\xf1\x6e\xbd\xbe\x49\x22\x7b\x4a\xb3\xc2\xad\xf9\x4d\x9a\x15\xbf\xbe\xfe\x3d\x00\xb8\xbe\x59\x47\xde\x96\x17\x77\x69\xf6\x3e\x00\x28\xd2\x55\xf2\xf6\x4d\x66\x77\xfe\x72\x73\x17\x15\xe9\x3a\x73\x9f\xc3\x16\xcb\xb1\x25\x5c\x33\x3a\xbe\xe9\xd6\x52\x7e\x9b\xc4\xe9\x75\x9a\x2c\xbd\x21\x5b\x67\x89\x3f\x45\xef\x93\xac\xd8\x6e\xd2\xfe\x62\x73\x3b\x9c\xf2\xe4\xee\x3e\x8d\x93\x6d\x16\xad\x92\xb1\x1c\xd7\x3c\x92\x95\xb2\x09\x46\xd2\x8f\xe6\xf9\x7f\x62\xd9\xa7\x1b\x8e\x89\xbb\x11\x9c\x90\x0a\x67\x14\x5d\x8c\x5f\xb0\xf7\xa4\x31\xf8\x5c\x82\xd3\x9b\xee\x41\x22\x2b\xdb\x66\x33\x26\x2f\xbe\x9c\xbb\xff\x54\xb0\xbd\x75\xf3\x92\x9d\xa0\x66\xba\x8f\xff\x10\x0e\xa3\x9c\xf4\x5c\x08\x9f\x9f\xb5\xa0\xa5\x30\xb6\x81\xf7\x39\xeb\x1d\xef\xb1\x1f\xe8\x8d\x39\x4c\xef\x9f\x82\x7f\x03\x00\x00\xff\xff\x43\x03\x35\x01\x65\x0a\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 2661, mode: os.FileMode(420), modTime: time.Unix(1584575993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
