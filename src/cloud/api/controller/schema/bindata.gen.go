// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\x31\xb9\x3c\x5c\x02\x24\x79\x28\xda\x43\xe1\xa7\xaa\xb6\xf7\x56\x4d\xe2\xb8\xb1\xb3\xdb\xeb\x22\x08\x68\x71\x6c\x11\x96\x48\x2d\x49\x39\x71\x0f\xf7\xbf\x17\xc3\x0f\x59\xb4\x9d\x3d\xec\xa1\x7d\xb2\x48\xce\xc7\x8f\xf3\xc5\x19\x9f\xc3\xa2\x14\x06\x56\xa2\x42\xe0\x68\x0a\x2d\x96\x68\xc0\x96\x08\xa6\x28\xb1\x66\xb0\xd2\xaa\x76\xeb\x6c\x96\x83\x41\xbd\x15\x05\xde\x0c\xce\x07\xe7\x90\xdb\x1f\x0d\x48\x65\x41\x70\x64\xd5\x15\x2c\x5b\x0b\xaf\x08\x12\x91\x83\x55\x50\x33\xd9\xb2\xaa\xda\xc1\x1a\x25\x6a\x66\x11\xec\xae\x41\x03\x2b\xa5\x9d\xbc\xc5\xae\xc1\x79\xa1\x45\x63\xe1\x29\x1f\x9c\xc3\x6b\x89\x12\x6c\x07\x46\x18\x68\x1b\xce\x2c\xf2\x1b\x0f\xb1\x60\x12\x96\x08\x5c\x49\x84\xe5\x0e\x74\x2b\xa5\x90\xeb\xe1\xe0\x1c\x60\xad\x59\x53\x7e\xad\xae\x3d\xe4\x6b\xa7\xc7\x4b\x8e\xba\xaf\xad\x09\x17\xba\x09\xc4\x70\x7d\xad\x5a\xdb\xb4\x36\xee\xf3\x1b\x6b\x1c\x0c\x51\x94\xf0\x2a\xaa\xaa\x07\xbc\x44\x08\xc4\x24\xdb\x03\xb4\x25\xb3\x9e\x6e\x89\xd0\x88\x62\x83\x1c\xda\x86\xa0\x11\xf9\x53\x7e\x33\x08\xb6\xed\xc9\x77\x9c\x06\x4c\xa9\xda\x8a\x03\xbe\x09\x63\x41\x48\x6f\x6e\x56\x23\x70\xa1\xb1\xb0\x4a\xef\x80\xf5\x9d\xd0\x61\x26\xf6\x9b\xc1\x20\xb8\xe6\xd7\x01\xc0\xd7\x16\xf5\x6e\x08\xff\xa4\x9f\x01\x40\xdd\x5a\x66\x85\x92\x43\xb8\x0f\x5f\x83\xdf\x06\x03\x07\xfa\xc9\xa0\xce\xe5\x4a\x39\x36\xc1\x87\x90\x8f\xcf\x06\x00\x92\xd5\x38\x84\xb9\xd5\x42\xae\x69\x8d\x35\x13\x55\x7f\xa3\x11\x85\x6d\x75\x42\xa3\xf4\x7a\x9a\xb0\xf5\x75\xcc\xd1\x5a\x21\xd7\x4e\xcd\x06\x77\x7d\xbe\x2d\xab\xda\x94\x0b\x65\x5b\x43\xa6\xad\x58\xb1\xc2\x52\x44\x38\x36\x80\x6c\xf1\xf2\x34\xbd\x9d\x3e\x7c\x9e\xc6\xe5\x5d\x3e\x7d\xfa\xd7\x4b\x76\x3f\xfe\xe9\xcf\x71\x6b\x9c\x3d\x7e\xce\xa7\xe9\xde\xe8\x61\xba\xc8\xf2\xe9\xe4\xf1\x65\x3e\x59\xbc\xfc\x92\xdd\xdf\xcd\x4f\x1f\xf5\xe5\x75\x40\x5a\xab\x0a\x55\x37\x15\x5a\x9c\x48\x2b\xec\x6e\x6e\xc9\xff\x84\x29\x9b\xcc\x7b\x90\x68\x35\x9b\x4c\xc7\xf9\xf4\xe7\xb0\x7a\x7c\x9a\x4e\xf7\xab\x0f\x59\x7e\x37\x19\x87\xc5\x62\xf2\x78\x9f\x4f\xb3\xc5\x64\x7c\x52\x53\x56\x90\x9f\xba\xcb\x67\xc9\xdd\xcf\x21\x93\x80\x5c\x58\x60\x8e\x0c\x54\x51\xb4\xda\x80\x58\x01\x83\xd6\xa0\x86\x92\x19\xa8\x15\x17\x2b\x41\x79\x57\x22\x08\xe9\x02\x15\xdf\x2c\x05\xa3\x90\x06\xb5\x73\x88\xd2\xc0\xb1\x42\xf7\x5d\x94\x4c\xb3\xc2\xa2\x36\x37\x4e\x89\x0b\x54\x21\x8b\xaa\xe5\x94\xfe\xbb\xc6\x31\xf8\xc8\xdc\xe0\x6e\xa9\x98\xe6\xc0\x24\x87\x86\x19\x2f\x40\xd5\x35\x93\xdc\xb1\x13\xe2\xc9\x38\x5f\x78\xb8\x60\xb0\xc2\x62\x8f\x57\x56\xbb\xd3\xa0\x8b\x52\x19\x94\xc0\x24\xb0\x9e\x35\xc0\xb4\xeb\x35\x1a\xe2\xbd\x89\xb0\xb8\x28\x98\x25\x5c\xca\xa9\x20\x50\x09\x8b\x4b\x45\x61\x63\x5e\xd5\x6a\xeb\x73\x96\x54\xfd\x68\x80\x74\x53\xd1\x51\x6e\x53\x92\x61\x58\xd3\x68\xd5\x68\xe1\xb2\x9b\x2d\xe3\x2d\xe6\x93\xbb\xc9\x68\xf1\x8d\x78\xb8\x15\x92\x87\x70\xb8\x4d\xc2\xe1\xf6\x65\xf6\x30\x0e\x5f\xf3\x4f\xa3\xf8\x35\x7a\xcc\x67\x8b\xb0\x98\x66\xf7\x93\xf9\x2c\x1b\x4d\xba\x74\x19\x63\x53\xa9\x5d\x8d\xd2\xde\xe2\xee\x20\x2f\x0f\x52\xa7\xd0\x48\xb5\x30\xb3\xf7\x66\x08\x1f\x2a\xc5\x2c\xed\x52\xc5\x3e\xce\xc2\x6c\x96\xff\x4f\xe5\xb9\xe2\xe2\xc4\x91\x41\x87\x5d\x25\x39\x0b\x3b\x21\xe3\xcd\xc5\x06\x77\x66\x08\x5f\x3c\xff\xf3\xd9\xe5\x10\xbe\xf4\x2a\xc2\xf3\x99\x0f\xb5\x87\xf1\xc3\x05\x05\xa5\x16\x52\x5d\x0e\xe1\x9e\x6d\x10\xf2\x31\x68\xfc\xda\x0a\x8d\x1c\x94\x2c\xa8\x7e\x3a\x37\x1a\x50\x5b\x74\xae\xab\xdb\xca\x8a\xeb\xa2\x6a\x8d\x45\x0d\xa6\x6d\x1a\xa5\x2d\xf9\x2d\x6c\x5d\xf8\xab\x5e\x0e\x61\xe4\x37\x22\xc2\x70\x4e\xc0\xfa\x27\xff\x5f\x34\x23\x25\x25\xba\x04\x38\xc2\xb5\x3f\xda\x23\x14\xb1\x04\x5e\xb0\x5e\x2d\x1c\x26\x95\x91\x24\xdc\xe5\x71\x87\xf8\x22\xad\xe9\xb8\xfa\x55\xf9\x72\xcf\x6e\xa2\xa6\x7e\xd6\x5c\xb8\x3a\x11\xa9\xaf\x42\x96\xcc\x94\x19\x42\x2e\xed\x55\xc8\xdf\xe1\x3b\xa5\xea\x2a\xde\xf4\x29\x1f\xf7\x35\xf6\x88\x1f\xd1\xb4\x95\x3d\x54\xfb\x41\x60\xc5\x0f\x75\xaf\x68\x33\x5c\xf9\x64\xce\x5d\xb9\x22\x1e\x9d\x92\xe9\x35\x11\x93\x4b\x4f\x93\x3f\x9f\x86\x97\x50\xcf\xbb\x3a\xf3\x3c\x70\xa1\xe0\x9b\x91\x7a\xad\x01\x25\x6f\x94\x90\xd6\x5c\x81\xc6\x95\xf7\x38\x57\x05\x95\x22\x28\x2a\xd5\x72\xd6\x88\x9b\x46\x2b\x57\x8f\x2a\xb1\xc5\x4f\x02\x5f\x09\xcd\x5d\xf8\xbe\x47\xcb\x38\xb3\xcc\x47\x59\xa4\x18\x29\x69\x51\x5a\x13\x42\x82\xf2\xe3\xee\xe0\x88\xc8\x7d\xeb\xe2\x12\xc9\x7d\xa5\xc2\xfc\xe9\x09\x51\xf3\xe4\xe0\xcc\xdf\xc9\x57\x18\x4a\x7e\xe3\xd2\xbb\x57\x6f\x48\x41\x52\x80\xbc\xfc\x84\xa6\x27\x3e\x25\xf5\xd2\xa9\x25\x0c\xa2\x59\x23\x82\x4c\x5f\x7d\xbc\x30\xbf\xdb\x93\x12\x0e\xf7\xa5\xea\x28\x5e\x5c\x9d\xa1\x07\x09\xa9\x53\xac\x99\xb5\xc8\xc3\x93\x26\x4c\xef\x7d\x33\x21\x74\x7c\xbf\x46\xef\xc9\x12\x51\x42\xc3\xb4\x41\x1e\xbb\xb0\xf4\x95\x50\xdd\x53\xe2\x9f\x11\xb6\x9c\x5b\xd5\x40\xa3\x8c\xa0\x30\x70\x6f\x59\xa7\x33\xef\x47\xa8\xa3\xff\x5c\xa2\x2d\x51\x1f\x61\x20\x5c\x8c\x7a\x1b\xc1\xaf\x00\xdf\xb0\x68\x2d\x5b\x56\x18\x9f\x48\x92\x2a\xcc\xa4\xdb\x1f\xc2\xdf\x95\xaa\x90\x49\x6f\xc2\xaa\xea\xbd\x78\xbe\x3b\x46\x56\x94\xa0\x56\x4e\x51\x00\xe9\xb0\xd1\xf7\x9e\x74\x08\x5f\x16\xfd\x8d\xe7\xce\xa8\xc9\x76\xcf\x9e\x42\x72\x7c\xeb\x09\xf6\xef\xa6\x2d\xd1\x60\x82\x81\x69\x67\xfb\xa0\x32\x27\x2e\x57\x13\x12\x2b\xf8\x57\x9e\xae\xcf\x7a\xcc\xa1\xbb\x27\x4f\xb1\x65\x50\xe8\x7a\xe4\x9a\xea\x2a\xe9\x0d\x56\xe9\x19\x8a\xf4\xec\x57\xd9\xca\xd2\x8b\x41\xc2\xfb\x96\x32\xc9\xc5\xdf\xcb\xe3\x53\x61\x75\x60\x8a\x8d\x90\xfc\xbd\x2a\x73\xd0\x0e\x87\x07\x91\xd2\xca\x55\xc2\x6e\xb7\x66\xb6\x28\x29\x44\x38\xbe\xb9\x2a\x94\x4b\xfb\x4c\x20\xa9\x5b\x3c\x25\xdc\xb5\x91\x5d\x5b\x11\x1e\x02\xda\x6c\x4d\xcf\x3f\x1c\x57\x8c\x32\xc0\x89\xa1\x66\x49\x2a\x5b\x86\x00\xdb\x48\xf5\x2a\xc9\x52\x9f\xfe\xfd\x32\x4f\x1b\x44\x62\x0d\x2c\x06\x4a\x64\x95\x2d\x77\xc4\x5d\x22\xd3\x76\x89\xcc\x7a\x8f\x6a\x2c\x50\x6c\xdd\x8b\x06\x1a\xd7\x6d\xc5\x34\x08\x69\x51\x6f\x59\x65\x5c\x6f\x67\x4b\x9f\x18\xf1\x59\x13\x06\x34\x9a\x46\x49\x4e\x20\xac\x72\xf5\x17\x8d\x35\x7b\x1c\x1f\x27\xd9\xdd\xe2\xe3\x2f\x07\x38\xfc\xf4\xa4\x5c\xd9\x14\xa6\xf0\x0f\x1e\xa5\xb1\x0f\xbd\x9f\x1f\x67\x23\x28\xba\x67\x10\x96\x1a\xd9\xc6\xdc\x38\x01\xa5\x6a\xd0\x27\x3a\xb3\x5d\xb3\x17\x01\x39\xb9\x85\xaa\x11\x96\xac\xd8\x50\x6b\x29\x24\x3a\xe8\x1a\x4d\x5b\x53\x84\x43\x40\xe4\x91\xec\x81\x8e\xf3\xf9\xe8\x61\x3a\x9d\x8c\x16\xae\x2d\x3f\xb0\x9a\x9b\x34\xe9\x92\x61\x08\xc5\xbe\x0d\xc2\x80\xd6\x68\x55\xa0\x31\x94\x3f\x91\xbc\xe7\x8f\xd9\x38\x5b\xf8\xf6\xdf\x8b\xde\x8a\xff\x88\xd8\xe7\xc6\xfb\xfb\x11\x99\xb6\x68\x6a\x36\x28\x2d\x30\xb9\x03\xe5\xf2\x69\xd5\x6a\x9f\x57\x3e\x2a\xfc\xec\x6b\x80\x2d\x55\xeb\x0d\xf1\x1a\x12\x4f\xd8\xbe\x9f\x95\x3e\x81\xe6\xf8\xa6\x01\xce\x2b\x8d\x95\x7a\x17\xdc\xe9\x75\x78\x54\x2b\x26\x2a\xf4\x2d\xbe\x20\x7c\xaf\x74\x6d\x06\x4b\xc6\x0f\x2d\xe9\xae\x3a\x89\x13\x4e\xcc\xb8\x4f\x4e\xc1\x48\xc9\x95\xf0\xa3\x5f\xc3\x8c\xb1\xa5\x56\xed\xba\x9c\x48\x4a\x6c\xbe\x4f\xe7\xc8\x44\x8f\x15\x13\x32\x49\x85\xc3\x79\xf4\x74\xa3\x1a\x32\x6d\x4f\x56\xa3\x31\x6c\xdd\x4f\x5d\x8d\xcc\xf4\xb2\x36\xea\xbc\xfd\xab\x99\x6c\xc9\xf4\xbf\x9e\xe4\x5a\x09\x6d\xec\x42\xd4\x98\xa8\xab\xd8\xd1\x66\x94\x37\x53\xfc\x0f\xa1\x6f\xcd\x77\xc1\x07\x0a\x23\x6f\x2c\xd7\xc9\xa6\x96\xf3\xaf\x2d\xd2\xbd\xe8\x34\xde\x91\xb6\x3b\x5b\xef\x7b\xdf\x83\xc9\x20\xa2\x49\xca\x52\xbc\xf5\xc7\x58\x44\x92\x0b\x6c\x7b\xde\x1e\x26\xbe\xdf\x9f\x7e\x42\x6d\xd2\xb2\x19\x72\xea\xdd\x83\x69\x5a\x7b\x1b\x8d\xd6\xee\x46\x27\xcf\x8e\xbb\xbb\x60\x21\xad\xaa\x59\xc5\x24\x76\x6e\x71\xf5\xb9\x5b\x79\x43\xc9\xb6\x9e\x2a\x8e\xbe\xd3\x0d\x1b\xb9\x34\x56\xb7\xd4\xdf\x20\xef\x1f\x1e\xd8\x2f\xed\xde\xbd\x25\x9b\x8c\x73\x8d\x26\x71\xa8\x55\x1b\x94\xc7\xa3\x54\xfc\x57\xc6\x31\x8e\x5c\x70\x04\xc1\xc9\xdc\x02\x7f\xe3\xd8\x68\xa4\x56\x85\x5f\xc4\x48\xf8\x21\x10\xf8\x72\x4e\x29\x1a\xa2\x0b\xb6\x82\x41\xf3\x16\x5a\xb7\x1f\x2e\x07\x00\x4f\x2e\xb5\xfb\x8e\xb9\x08\x26\x23\x8b\xe5\xe3\xb3\xab\x6f\x25\xe8\x65\xf7\x75\xd6\xc1\x4c\xfa\xbf\xa3\x76\x10\x60\x8c\xf4\xdc\x8d\xdf\xe9\x1e\x8f\xc4\xf9\x46\x70\xdf\x10\x46\x01\x7e\x7d\x9a\xd3\x5f\xea\xe9\x1b\x13\xe7\x95\xff\x8b\xe9\x60\x08\xed\x44\x74\xbe\xdc\xcf\x51\xe1\xff\xa6\x56\x27\xff\x79\x01\x98\x92\xfd\xe9\x2f\x3f\x9d\x98\xad\xfb\x23\x95\x77\xbf\xc5\xda\xf5\x24\xe1\xe4\xf9\x88\xd6\x91\x6d\xd3\xa8\x77\xc5\xa1\x64\x72\x8d\x95\x5a\x27\x81\x23\x6a\x34\x96\xd5\x4d\x5a\x6b\xce\xe1\xf1\x77\x26\x11\xa7\xf2\x70\x00\xf9\x9d\x3f\xfb\x8e\xe6\xfd\xef\x54\x13\xa7\x8d\x50\x4c\xbd\xce\xe1\x11\x0a\xf7\x37\xe2\x5b\x15\xa9\x93\xbf\x04\x85\xf9\xc7\xfc\x61\xfa\x47\x40\xa4\xd3\xd1\x77\xdd\x14\xe8\x15\x8e\x28\xd3\x00\xf9\x2e\xe5\xef\xdc\xff\x60\x6e\x0b\xa5\x29\xbd\xfa\x6f\x83\xff\x06\x00\x00\xff\xff\xea\x4f\x21\xb2\x7b\x17\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6011, mode: os.FileMode(436), modTime: time.Unix(1608059017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
