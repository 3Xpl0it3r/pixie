// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xcd\x6f\xe3\xba\x11\xbf\xeb\xaf\x98\x20\x87\xb7\x01\x12\x1f\x8a\xf6\x1d\x74\x73\x6d\xf7\xad\xba\x89\x93\xc6\xce\x6e\x5f\x1f\x16\xc1\x58\x1c\x5b\x44\x24\x52\x4b\x8e\x9c\xb8\x45\xfe\xf7\x82\x1f\x92\x29\x27\xdb\xc5\xf6\x64\x8a\x9c\x8f\xdf\x7c\x8f\xcf\x61\x5d\x49\x0b\x5b\x59\x13\x08\xb2\xa5\x91\x1b\xb2\xc0\x15\x81\x2d\x2b\x6a\x10\xb6\x46\x37\xfe\x7b\x7a\x57\x80\x25\xb3\x97\x25\x4d\xb2\xf3\xec\x1c\x0a\xfe\xc5\x82\xd2\x0c\x52\x10\xd6\x97\xb0\xe9\x18\x9e\x09\x14\x91\x00\xd6\xd0\xa0\xea\xb0\xae\x0f\xb0\x23\x45\x06\x99\x80\x0f\x2d\x59\xd8\x6a\xe3\xe5\xad\x0f\x2d\xad\x4a\x23\x5b\x86\x87\x22\x3b\x87\xe7\x8a\x14\xf0\x00\x46\x5a\xe8\x5a\x81\x4c\x62\x12\x20\x96\xa8\x60\x43\x20\xb4\x22\xd8\x1c\xc0\x74\x4a\x49\xb5\xcb\xb3\x73\x80\x9d\xc1\xb6\xfa\x56\x5f\x05\xc8\x57\x5e\x4f\x90\xdc\xeb\xbe\x62\x1b\x0d\x9a\x44\x62\xb8\xba\xd2\x1d\xb7\x1d\xf7\xf7\x62\xc2\xd6\xc3\x90\x65\x05\xcf\xb2\xae\x13\xe0\x15\x41\x24\x76\xb2\x03\x40\xae\x90\x03\xdd\x86\xa0\x95\xe5\x13\x09\xe8\x5a\x07\xcd\x91\x3f\x14\x93\x2c\xfa\x36\x91\xef\x39\x2d\xd8\x4a\x77\xb5\x00\x7a\x91\x96\x41\xaa\xe0\x6e\x6c\x08\x84\x34\x54\xb2\x36\x07\xc0\x34\x08\x03\x66\xc7\x3e\xc9\xb2\x18\x9a\xff\x64\x00\xdf\x3a\x32\x87\x1c\xfe\xe1\x7e\x32\x80\xa6\x63\x64\xa9\x55\x0e\x37\xf1\x94\xbd\x66\x99\x07\xfd\x60\xc9\x14\x6a\xab\x3d\x9b\x14\x39\x14\xf3\xb3\x0c\x40\x61\x43\x39\xac\xd8\x48\xb5\x73\xdf\xd4\xa0\xac\xd3\x8b\x56\x96\xdc\x99\x11\x8d\x36\xbb\xe5\x88\xed\x35\xcb\x48\x75\x0d\x4c\x0d\xcb\x2d\x96\xec\x62\xeb\xf5\x00\x4c\xd7\x8f\x0f\xcb\x4f\xcb\xdb\x2f\xcb\xfe\xf3\xba\x58\x3e\xfc\xf3\x71\x7a\x33\xff\xf5\xcf\xfd\xd5\x7c\x7a\xff\xa5\x58\x8e\xef\x66\xb7\xcb\xf5\xb4\x58\x2e\xee\x1f\x57\x8b\xf5\xe3\xef\xd3\x9b\xeb\xd5\xfb\x4f\xa9\xbc\x01\x48\xc7\xba\xd4\x4d\x5b\x13\xd3\xb4\x74\x7e\x18\x20\x4d\x47\x88\xce\x61\xaa\x80\x84\x64\x40\x4f\x06\xba\x2c\x3b\x63\x41\x6e\x01\xa1\xb3\x64\xa0\x42\x0b\x8d\x16\x72\x2b\x5d\x5e\x57\x04\x52\xf9\x44\xa0\x17\x76\xc1\x96\xca\x92\x61\xa9\x76\xa0\x0d\x08\xaa\xc9\x9f\xcb\x0a\x0d\x96\x4c\xc6\x4e\xbc\x12\x9f\x08\x52\x95\x75\x27\x5c\x79\x1d\x5a\xcf\x10\x22\xff\x44\x87\x8d\x46\x23\x00\x95\x80\x16\x6d\x10\xa0\x9b\x06\x95\xf0\xec\x0e\xf1\x62\x5e\xac\x03\x5c\xb0\x54\x53\x79\xc4\xab\xea\xc3\xfb\xa0\xcb\x4a\x5b\x52\x80\x0a\x30\xf1\x06\xd8\x6e\xb7\x23\xeb\x78\x27\x3d\x2c\x21\x4b\x64\x87\x4b\x7b\x15\x0e\xd4\x88\xc5\xa7\xba\xe4\x3e\x6f\x1b\xbd\x0f\x35\xe1\x54\xfd\x62\xc1\xe9\x76\x45\xad\xfd\xa5\x72\x8e\xc1\xb6\x35\xba\x35\xd2\x57\x0f\x6e\x7a\x2b\x56\x8b\xeb\xc5\x6c\xfd\x6e\x94\x16\x8a\x25\x1f\x3e\x49\x25\x42\x94\x16\x9f\x92\x28\xb9\xaf\xbb\xdb\x79\x3c\xad\x3e\xcf\xfa\xd3\xec\xbe\xb8\x5b\xc7\x8f\xe5\xf4\x66\xb1\xba\x9b\xce\x16\x43\xca\xfb\xaa\xf0\xe2\x1c\xd2\x7c\x28\x01\x97\xc3\x65\xdd\x59\x76\x97\xb3\x70\x38\xb9\x9f\x69\xa5\xa8\x0c\xa5\x34\x3b\xbd\x3a\xd2\xca\x3e\xe3\x3f\x60\x92\xfa\xf9\xa8\x10\x2e\x72\x98\x5d\x17\xfd\x8d\xe3\xeb\x69\xed\xc0\x95\x96\xd3\xc5\x91\xdd\xf6\x9a\xd2\x70\x7c\xf0\x09\xd8\x53\x5f\x46\xf7\xdf\x69\x9b\x43\xa1\xf8\x32\x26\x46\xfe\x9d\x1a\xb8\x18\x3f\xdc\x93\xed\x6a\x3e\xcb\x7c\xe0\x43\x3b\x6e\x76\x06\x48\x89\x56\x4b\xc5\xf6\x12\x0c\x6d\xc9\x07\x57\xe8\xd2\x25\x0b\x94\xb5\xee\x04\xb6\x72\xd2\x1a\xed\x33\xa6\x96\x7b\xfa\x2c\xe9\xd9\xe6\xf0\xc7\x75\x3c\xdf\x10\xa3\x40\xc6\xb3\xaf\x67\x09\xc5\x4c\x2b\x26\xc5\xf6\x43\xec\x3f\x17\x39\x5c\x9f\x3c\x39\xf2\xd0\xbc\x9d\xb8\x80\x68\x2c\x2c\xbc\xbe\x23\x6a\x35\x7a\x38\x1b\xd2\xe0\xad\xbd\x3e\x27\x5c\x55\x92\x1b\x47\x0d\x32\x93\x88\x75\x2d\x6d\x52\xe4\x36\xba\x38\x0c\x05\x57\x54\x1b\x22\x05\x2d\x1a\x4b\xa2\x6f\xf5\xe3\x52\xd1\x43\x3d\x85\x5a\xc2\xcd\x8a\x75\x0b\xad\xb6\xd2\x85\xc0\x17\xf4\xa0\xb3\x48\x23\xe9\xe9\xbf\x54\xc4\x15\x99\x37\x18\x1c\x2e\x84\x3d\xd6\x52\x5c\x02\xbd\x50\xd9\x31\x6e\x6a\xea\xfb\x84\x93\x2a\xed\x62\xb8\xcf\xe1\xaf\x5a\xd7\x84\x2a\xf4\x8c\xba\x4e\xca\x3e\x8c\x60\xc2\xb2\x02\xbd\xf5\x8a\x22\x48\x8f\xcd\x9d\x8f\xa4\x39\xfc\xb1\x4e\x2f\xbe\x0e\x4e\x1d\x5d\x27\xfe\x94\x4a\xd0\x4b\x22\x38\x34\x0f\xae\xc8\xd2\x08\x03\x1a\xef\xfb\xa8\xb2\x70\x5c\x3e\x7f\x47\x5e\x08\xad\xce\x99\x8f\x09\x73\x5c\x21\x5c\xa4\x70\x13\x15\xfa\x41\xdc\xe0\x53\x68\x4c\xd1\x2b\x89\xa3\x9c\x9e\xe3\xd7\x74\xcb\x64\x56\x5e\x78\xea\x29\x3b\x32\x3c\x4d\x9b\xf7\x3c\xf0\xfe\xbb\x77\xc5\x93\x54\x22\xff\x4e\x7b\x3b\x99\xb9\x19\xc4\xbd\xab\x0d\x55\x1b\x6f\xfb\x16\x19\x7b\xcf\x8a\x91\x3b\x9b\xb8\x59\xd0\x16\x5d\x22\x5b\x76\x2d\x56\x6e\xdd\x22\x56\xc5\x3c\x79\x52\xfa\x59\x39\x83\x3f\xff\xeb\x71\x35\x1e\x76\x8e\x35\xb2\x58\xa8\x08\x6b\xae\x0e\x8e\xbb\x22\x34\xbc\x21\xe4\x10\x18\x43\x25\xc9\x3d\x09\x37\xa2\x0c\xed\xba\x1a\x0d\x48\xc5\x64\xf6\x58\x5b\x3f\xa7\xb8\x0a\xf9\x1d\xdb\xa5\x13\x67\xc8\xb6\x5a\x09\x07\x82\x35\x18\xfa\xd6\x91\x65\x7b\xc4\xf1\x71\x31\xbd\x5e\x7f\xfc\xfd\x04\x47\xd8\xb4\xb4\x6f\x30\xd2\x96\xa1\xc7\xba\x6a\x0c\x19\xf4\xdb\xfd\xdd\x0c\xca\xa1\xf3\xc2\xc6\x10\x3e\xd9\x89\x17\x50\xe9\x96\x42\xbd\x22\x0f\x83\xab\x07\xe4\xe5\x96\xba\x21\xd8\x60\xf9\xe4\xc6\xa4\x54\xe4\xa1\x1b\xb2\x5d\xe3\x12\x15\x22\xa2\x80\xe4\x08\x74\x5e\xac\x66\xb7\xcb\xe5\x62\xb6\x5e\xcc\xdf\x7a\xcd\x6f\xa5\xce\xc8\xb8\xb0\x52\xea\x83\xb8\xcc\xb5\x46\x97\x64\xad\x2b\x83\x9e\x3c\x89\xc7\xdd\x7c\xba\x2e\x96\xbf\x0d\xa2\xf7\xf2\xdf\xb2\x9f\xd9\xbd\xfd\x61\x9d\x76\x57\x6e\xc3\xb6\xa4\x18\x50\x1d\x40\xfb\xb2\xd8\x76\x26\x94\x47\xc8\x8a\xb0\x27\x5b\xc0\x8d\xee\x82\x23\x9e\x63\xfd\x48\x4e\xe3\xac\xcd\x3b\x68\x8e\x96\xf6\x79\xfd\xd9\xc3\x99\x69\xb5\x95\x3b\x9f\x71\x2d\x5a\xcb\x95\xd1\xdd\xae\x5a\x28\x57\x3e\xe2\x58\x34\x3d\x53\x32\x45\x4f\x16\xcc\x00\x32\x1f\x67\xb2\x1f\x0a\x68\xf9\x63\x9f\x77\x37\x36\x87\xbf\xd5\x1a\xfd\x7c\xdc\x27\x08\xf2\x11\x9e\xb3\x53\x85\xe3\xa1\x1c\x54\xb7\x53\x21\x0c\x59\x9b\xae\xac\xac\x9f\x48\x8d\x16\x56\x2f\xa5\xdf\x92\x3d\xe3\xcc\x10\x32\xcd\xde\x59\x0c\x32\x80\x07\xef\xe4\x14\xcb\x87\x18\xf7\x62\xee\x4d\xbd\xfc\x5f\x7e\xba\x18\x4e\x89\x05\xc7\xa5\x20\xee\xca\x9d\x19\x6d\xde\x00\xb6\xc2\x3f\xfd\xe5\xd7\xb7\xb0\x47\xfb\x41\x30\x9a\xa9\xf1\x4d\x2b\xbe\x7c\x7d\x43\xeb\xc9\xf6\x64\x6c\xd2\x66\xfc\x12\x53\xa1\xda\x51\xad\x77\x23\x77\xc9\x86\x2c\x63\xd3\x26\x71\x79\xcd\xb2\x73\xb8\xff\xc1\x36\xe0\x55\x9e\x2e\x01\x3f\xf8\xcb\xe1\xfa\xdf\xc8\xc6\x9f\x54\xd3\x4f\x7c\xaf\xa6\x89\x3a\xf3\x37\x28\xfc\x9f\x99\x97\xba\xa7\x4e\x11\xec\xa5\xfd\xfb\xea\x76\xf9\xff\x80\x18\x6f\x28\x3f\x65\x29\xb8\xfa\xee\x51\x8e\x13\xe4\xa7\x94\x7f\xc7\xfe\x93\xdd\xc9\x85\xfa\x8d\xe9\xaf\xd9\x7f\x03\x00\x00\xff\xff\x54\x52\x30\xe9\x01\x10\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4097, mode: os.FileMode(436), modTime: time.Unix(1588051344, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
