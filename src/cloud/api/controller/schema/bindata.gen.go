// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x6f\x23\xb7\x11\x7f\xd7\xa7\x18\xc7\x0f\xe7\x03\x54\x35\x28\x9a\xa0\xd0\x53\x36\xd2\x26\xb7\xb5\x2d\xab\x96\x7c\x69\x70\x30\x2e\xd4\x72\xa4\x25\xbc\x4b\x6e\x48\xae\x6c\x35\xb8\xef\x5e\x0c\xc9\xfd\x43\x49\xbe\xeb\x05\x7d\x92\x96\x1c\xce\x3f\xce\xfc\x66\x86\x97\xb0\x2e\x84\x81\xad\x28\x11\x38\x9a\x5c\x8b\x0d\x1a\xb0\x05\x82\xc9\x0b\xac\x18\x6c\xb5\xaa\xdc\x77\xb2\xcc\xc0\xa0\xde\x8b\x1c\x27\xa3\xcb\xd1\x25\x64\xf6\x8d\x01\xa9\x2c\x08\x8e\xac\x1c\xc3\xa6\xb1\xf0\x8c\x20\x11\x39\x58\x05\x15\x93\x0d\x2b\xcb\x03\xec\x50\xa2\x66\x16\xc1\x1e\x6a\x34\xb0\x55\xda\xf1\x5b\x1f\x6a\x5c\xe5\x5a\xd4\x16\x1e\xb2\xd1\x25\x3c\x17\x28\xc1\x76\xca\x08\x03\x4d\xcd\x99\x45\x3e\xf1\x2a\xe6\x4c\xc2\x06\x81\x2b\x89\xb0\x39\x80\x6e\xa4\x14\x72\x07\xbf\x79\xaa\x89\x29\x7e\x03\x11\x18\x70\xa1\x31\xb7\x4a\x1f\x26\xa3\x60\x5f\xab\x83\x09\x66\x4d\xf8\xc4\x9a\x53\xfa\x31\x30\xc9\x21\x57\xb5\x40\x03\xc2\x92\x19\xa4\xea\x0f\xb5\x78\x11\xf8\x97\x92\x6d\xcc\x5f\x59\x2d\xa0\x66\xf9\x13\xdb\xa1\x33\xa5\x31\x4e\x9d\xde\x9a\xc9\x68\x14\x5c\xf7\xc7\x08\xe0\xf7\x06\xf5\x61\x0a\xff\xa2\x9f\x11\x40\xd5\x58\x66\x85\x92\x53\xb8\x0d\xff\x46\x9f\x46\x23\x72\x0c\x3c\x18\xd4\x99\xdc\x2a\x77\x4c\xf0\x29\x64\xf3\x8b\x11\x80\x64\x15\x4e\x61\x65\xb5\x90\x3b\xfa\xc6\x8a\x89\x72\xb8\x50\x8b\xdc\x36\x3a\xa2\x51\x7a\xb7\x38\x3a\xa6\xf4\x2e\x9b\x0f\x17\x84\x49\xea\x5a\xab\x3d\xf2\x29\xfc\xa8\x54\x89\x4c\x5e\x74\xba\xdc\xe9\xdd\xff\xa2\x8a\x64\x9b\x12\x3d\x1b\x56\x9a\x33\x7c\xc8\xa6\x15\x5a\x4b\x17\x45\xbc\x9e\xf0\x30\x64\xb0\x67\x65\x33\xe0\xf8\x69\x34\x42\xd9\x54\x90\x68\x2b\xb6\x2c\xb7\xe4\x53\x77\x0c\x20\x59\x7f\x7c\x58\x5c\x2f\xee\x7e\x59\xb4\x9f\x37\xd9\xe2\xe1\xdf\x1f\x93\xdb\xf9\xf7\x7f\x6f\x97\xe6\xc9\xfd\x2f\xd9\x22\x5e\x9b\xdd\x2d\xd6\x49\xb6\x48\xef\x3f\xae\xd2\xf5\xc7\x5f\x93\xdb\x9b\xd5\xf9\xad\x33\xfc\x62\x82\x75\x7a\xbb\xbc\x49\xd6\x69\x60\xd2\x29\xdb\x58\x95\xab\xaa\x2e\xd1\x62\x2a\xad\xb0\x87\x95\xa5\x60\x27\xbd\x93\x74\x35\x50\x9b\xbe\x96\xe9\x62\x9e\x2d\x7e\x0e\x5f\xf7\x0f\x8b\x45\xff\xf5\x53\x92\xdd\xa4\xf3\xf0\xb1\x4e\xef\x6f\xb3\x45\xb2\x4e\xe7\x67\x25\x25\x39\xc5\x4e\xe7\xa0\x24\xf2\xcf\x25\x24\x12\x90\x0b\x0b\xcc\x91\x81\xca\xf3\x46\x1b\x10\x5b\x60\x14\xaf\x1a\x0a\x66\xa0\x52\x5c\x6c\x05\xe5\x6a\x81\x20\x64\xdd\x58\xb0\xf8\x62\x29\x98\x85\x34\xa8\xdd\xa5\x29\x0d\x1c\x4b\x74\xff\xf3\x82\x69\x96\x5b\xd4\x66\xe2\x84\xb8\xc4\x12\x32\x2f\x1b\x4e\x90\x71\xa8\xdd\x01\xe9\xf8\x3d\xe1\x61\xa3\x98\xe6\x2e\x9f\x6a\x66\x3c\x03\x55\x55\x4c\x72\x77\x9c\x34\x4e\xe7\xd9\xda\xab\x0b\x06\x4b\xcc\x7b\x7d\x65\x79\x38\xaf\x74\x5e\x28\x83\x12\x98\x04\x36\xf0\x06\x98\x66\xb7\x43\x43\x67\x27\xad\x5a\x5c\xe4\x2e\xdf\xad\x72\x22\x48\xa9\xe8\x88\x2d\x98\xa5\x14\x37\x85\x6a\x4a\x0e\x95\xda\xa3\x23\x22\x51\x6f\x0c\x90\x6c\x02\x2a\x0f\x00\x92\x1c\xc3\x28\xd0\x6b\x2d\x1c\x94\xb1\x4d\x6b\xc5\x2a\xbd\x49\x67\xeb\xcf\xc4\xc3\xb5\x90\x3c\x84\xc3\x75\x14\x0e\xd7\x1f\x97\x77\xf3\xf0\x6f\xf5\x7e\xd6\xfe\x9b\xdd\x67\xcb\x75\xf8\x58\x24\xb7\xe9\x6a\x99\xcc\xd2\x2e\xa5\xe6\x58\x97\xea\x50\xa1\xb4\xd7\x78\x38\x4a\xd0\xa3\xf4\xca\x35\x12\x7e\x26\xf6\xd6\x4c\xe1\xa7\x52\x31\x4b\xab\x84\xf2\x51\xce\x39\xb6\xc9\x32\xfb\xbf\xf2\x73\x80\xe7\xd8\x91\x43\xa7\x1d\xba\x05\x2c\x9a\xb6\x10\x73\x11\x28\x02\x4a\x98\xab\x27\x3c\x98\x29\x7c\x08\xfc\x1e\x2f\xde\x4e\xe1\xc3\x00\x46\x2e\x1e\x03\x07\x5a\x33\x61\xcf\x31\x72\x1b\x79\xd9\x18\x8b\xfa\x2a\xd8\xf0\x76\x0a\x33\xbf\xd2\xca\x0a\x04\x3f\x1e\x08\x20\xaf\x22\x44\x7b\x95\x98\xc4\x0c\x77\x86\x92\x66\x4a\x4a\x74\x51\x7b\x2a\xb3\xdf\xeb\x19\x8a\x16\xdc\xae\xd8\x00\xe5\xa6\x11\xe6\x39\x16\x37\x59\xbb\x44\x07\x5b\x62\xd3\x1d\x5b\x1c\xa9\xde\x52\x9b\x56\xd6\x30\xda\xaf\x5c\x7e\xb7\xe4\xe3\x10\xdd\x4b\x65\xa6\x90\x49\x3b\x0e\x79\x37\x7d\x05\x62\xc6\xad\xb1\x0f\x7d\x09\x79\x1b\x13\xdf\xa3\x69\x4a\x7b\x2c\xf6\x27\x81\x25\x3f\x96\xbd\xa5\xc5\x60\xf4\xd9\x5c\x19\x3b\xfc\xd5\xf8\x7b\x23\x34\xf2\x44\xef\x88\x98\xee\xe0\x3c\xf9\xe3\x2b\xea\x45\xe4\xab\x0e\x20\x1e\x47\x0e\x0f\x7c\xad\xae\x76\x1a\x50\xf2\x5a\x09\x69\xcd\x18\x34\x6e\xd1\xe5\x3c\x57\xb9\xeb\x0e\xf2\x52\x35\x9c\xd5\x62\x52\x6b\xe5\x80\xa4\x14\x7b\x7c\x2f\xf0\x99\xd4\xb9\x09\xff\x6f\xd1\x32\xce\x2c\xf3\x71\xd1\x52\xcc\x94\xb4\x28\xad\x19\x84\xc5\xcd\xd1\x16\x91\x1b\xa7\x87\x8b\x78\xf7\x2f\x66\xe6\x77\xcf\xb0\x5a\x45\x1b\x17\xde\x26\x0f\x0d\x94\xb5\xc6\xe5\xe5\x00\x28\x48\x40\x84\x1c\x9e\x7f\x44\x33\x60\x1f\x93\x7a\xee\xd4\xff\x05\xd6\xac\x16\x81\xa7\x87\x0d\xcf\xcc\xaf\x0e\xb8\x84\xcd\x1e\x63\x4e\x02\xc6\x01\x04\x55\x12\xd7\x4b\x55\xcc\x5a\xe4\xa1\x16\x09\x33\x28\x4c\x26\xc4\xce\x73\x21\xf2\xc2\x15\x82\x0d\xa2\x84\x9a\x69\x83\x9c\x2a\xd6\x29\xbc\xab\xae\x06\x78\xfc\x67\x9b\x95\x55\x35\xd4\xca\x08\x0a\x03\x57\x84\x3a\x99\xd9\x30\x44\x1d\xfd\x2f\x05\xda\x02\xf5\x89\x0e\xa4\x17\xa3\xc6\x45\xf0\x31\xe0\x0b\xe6\x8d\xa5\x26\xa8\xad\x6d\x13\xd7\x59\xa5\xdd\x7a\xd7\x13\x79\x17\x96\xe5\xa0\x54\xf9\x56\x18\x59\x5e\x80\xda\x3a\x41\x41\x49\xa7\x1b\xfd\xef\x49\xa7\xf0\x61\x3d\x5c\x78\xec\x9c\x1a\x2d\x0f\xfc\x29\x24\xc7\x97\x01\x63\x5f\xf0\x6c\x81\x06\x23\x1d\x98\x76\xbe\x0f\x22\x33\x3a\xe5\x40\x21\xf2\x82\x2f\xcf\x64\x3e\x1b\x1c\x0e\xad\x3c\xdd\x14\xdb\x04\x81\xcf\xa2\x2c\xa1\x62\x4f\xbe\x98\x06\xaf\x0c\x1c\x45\x72\xfa\xaf\x64\x6b\x09\xd9\x89\xf9\xd0\x53\x26\x32\xfc\xb5\x3c\x3e\x17\x56\x47\xae\x78\x12\x92\xbf\x06\x33\x47\x0d\x6d\xa8\x64\x94\x56\x0e\x0a\xbb\xd5\x8a\xd9\xbc\xa0\x10\xe1\xf8\xe2\x60\x28\x93\xf6\x91\x94\xa4\x36\xef\x1c\x73\xd7\xff\x75\xfd\x40\xa8\x05\xb4\xd8\x98\xc1\xfd\x70\xdc\x32\xca\x00\xc7\x86\xba\x1c\xa9\x6c\x11\x02\xec\x49\xaa\x67\x49\x9e\x9a\xad\xa2\xb6\x8e\xce\x05\x7a\x03\x05\xb2\xd2\x16\x07\x3a\x5a\x20\xd3\x76\x83\xcc\xfa\xeb\xd4\x98\xa3\xd8\x23\xa7\x66\x4c\xe3\xae\x29\x99\x06\x21\x2d\x6a\xea\xd2\x5d\x47\x66\x0b\x9f\x15\x01\x38\x89\x9d\x46\x53\x2b\xc9\x49\x03\xab\x1c\xfa\xa2\xb1\x26\x28\xf1\x2e\x4d\x6e\xd6\xef\x7e\x3d\x55\xa2\x91\x03\x35\xdc\x8d\xf7\x1c\x73\x5f\xfe\xfc\x34\xb8\xa4\x09\x0a\x66\x84\xa7\x4e\x03\x61\x80\xc6\x06\xc1\xdb\x84\xeb\x6d\xf0\x93\xa4\x30\xf2\x8d\xf5\xe3\x93\x4b\x30\x8a\x35\xa3\x2a\xb2\x8e\x99\xae\xcf\xd3\x68\xb0\xda\x94\x68\xe0\xdd\x7a\xbd\x7c\x63\xe0\xbb\x6f\xbf\x75\xda\x35\xa6\xf3\xdf\x79\xe5\x5d\xa0\xee\x94\x43\x7b\x61\x7a\x5d\x83\x1d\x3f\xdf\x2f\x67\xad\x05\x14\x4d\x1b\x8d\xec\xc9\x4c\x1c\x83\x42\xd5\xe8\xf1\x89\xd9\xae\xb9\x6c\x0d\x77\x7c\x73\x52\x74\xc3\xf2\x27\x6a\x65\x85\x44\x67\xb2\x46\xd3\x54\x94\x98\x10\x34\xf2\x9a\x04\x3d\xe7\xd9\x6a\x76\xb7\x58\xa4\xb3\xb5\x9b\x01\x8e\xfd\x4c\x43\x2e\xdd\x4d\x98\x92\x23\x47\x0b\xbf\x52\x6b\x95\xa3\x31\x94\xf3\x2d\x79\xeb\x83\xe5\x3c\x59\xfb\x41\xc3\xf3\xdd\x8b\xff\x88\xb6\xa3\x6e\x2d\xf7\x6e\xa7\x25\x9a\xe9\x0d\x4a\x0b\x4c\x1e\x40\x39\x00\xd8\x36\xda\x03\x81\x0f\x63\x3f\x73\x1b\x60\x1b\xd5\x78\x17\x3c\x07\xa4\x10\x76\x18\x9b\x34\x1f\xc7\xaa\x9c\xda\x18\x74\x79\x66\x06\xac\x3e\x84\xf8\xf3\x02\xbc\x4a\x5b\x26\x4a\xec\xa2\x46\xaa\x67\x32\x98\xc1\x86\xf1\xc8\x81\xce\xc8\xb4\x9d\xa2\x5a\x70\x78\xef\xb8\xcf\x94\xdc\x0a\x3f\x82\xd6\xcc\x18\x5b\x68\xd5\xec\x8a\xd4\xcd\xaf\xe7\xe6\x5f\x2a\xac\x4c\xc8\x28\x6d\x8f\xa7\xdf\xf3\xdd\x70\x40\x85\x9e\xac\x42\x63\xd8\x2e\x5a\xf2\x11\x7c\xda\x33\x5f\xff\xc3\xa4\x7b\xf2\xfb\x1f\xe7\xcf\x6d\x85\x36\x76\x2d\x2a\x8c\x24\x96\xec\x64\xb1\x65\xb8\x54\xfc\x4f\x19\xd0\x98\xaf\xb4\x00\x28\x8c\xbc\xc7\x5c\xb3\x1c\xbb\xcf\xb7\x07\x48\xa6\xd1\x6e\x6b\x26\x2d\x77\x0e\xef\xdb\xeb\xa3\x19\xa4\xd5\x27\xc2\xd1\xd6\xee\x77\x2d\x68\x44\x26\xec\x07\x77\x3e\x8d\x22\xa0\xdf\x7d\x8f\xda\x88\x23\x13\xbc\x84\xd7\x77\x8e\xdf\x54\x6a\x8d\xd6\x1e\x66\xe7\x37\x4f\x7b\xd2\xd6\x4d\x5a\x95\xcb\x92\x49\xec\x6e\xc7\x55\x95\xee\xcb\x7b\x4b\x36\xd5\x42\x71\xf4\x0d\x7a\x58\xc8\xa4\xb1\xba\xa1\xae\x0c\xf9\x70\xf3\xc8\x89\xf1\xd8\xe1\xdd\x59\x27\x9c\x6b\x34\xd1\xbd\x5a\xf5\x84\x67\xa2\xd0\x0f\x54\x7b\x11\xde\x30\x4e\xde\x9b\x84\xdb\xbb\x11\xf2\xe9\xf4\x6c\xfb\xa8\xe5\x4e\xce\x5c\x7c\x05\xa5\xa2\xd9\x0a\x7e\xe0\x58\x6b\xa4\xe6\x8c\x5f\xb5\xb1\xf4\x4d\x20\xf0\x35\x8c\xd2\x3c\x04\x28\xec\x05\x83\xfa\x25\x34\xab\xdf\xbc\x1d\x01\x3c\x38\x78\x18\xde\xec\x55\xf0\x37\xb9\x3b\x9b\x5f\x8c\x3f\x9b\xe7\x6f\x07\x29\xdf\xea\x19\xb5\xbc\x27\x1d\x30\xc0\x1c\xa9\xc2\xcf\x5f\x69\x98\x4f\xd8\xf9\xde\xb7\xef\x81\x5b\x06\xfe\xfb\xfc\x49\x6f\xd5\xc3\xe7\xa6\xe1\xb1\x7f\x33\xfb\xf2\x84\xec\x6f\x90\x96\xaf\xe2\x1b\x1c\x7b\x18\x89\xc2\x75\xec\x92\xe9\x78\xa2\xec\x03\x21\x56\x6e\x89\xba\x12\x86\x72\xc4\x5c\xd1\xe8\xde\xb9\xbc\x89\x37\xa7\x90\x72\xe1\xda\xbc\xa3\x53\x3d\x73\x3f\xa9\x7a\xd6\x77\x7a\xd7\x99\x1d\x5e\x2b\x1d\x57\xd5\xaf\xf7\x1c\x07\xc4\xc4\xad\x7b\x4c\xf8\x34\x1a\xf9\x6e\xfd\x15\xd1\x3e\x1b\x4e\x9f\x3e\x4f\x0f\x0e\x24\xf8\x3c\x78\xe5\xb1\xb3\xcf\xbe\x7e\x62\xf7\xef\x1e\x3a\x4a\x1b\x53\xb0\xbf\x7d\xf7\xfd\x99\x87\x97\xe1\xdc\xee\xd5\xb3\x58\xb9\xbe\xb7\x9d\xff\x1f\x4f\xa9\x1d\xe1\xfe\x0c\x52\x15\x4c\xee\xb0\x54\xbb\x28\xd1\x45\x85\xc6\xb2\xaa\x8e\x4b\xc4\x25\xdc\x7f\x61\xde\x75\x22\x8f\xc7\xdc\x2f\x3c\x0a\x9f\x3c\x07\x7d\xa5\x98\x76\xa6\x0d\x45\xd0\xcb\x9c\x9e\x68\xe1\xf0\xf7\xa5\x6c\xa9\xa3\x57\x65\x61\xfe\xb9\xba\x5b\xfc\x19\x25\xe2\x19\xfc\xab\x2c\x05\x6a\x9d\x5a\x2d\xe3\x96\xe2\xab\x84\xbf\x62\xff\xd1\xeb\x40\x28\x25\xb1\xe9\x9f\x46\xff\x0d\x00\x00\xff\xff\x46\x63\x65\x80\xce\x19\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6606, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
