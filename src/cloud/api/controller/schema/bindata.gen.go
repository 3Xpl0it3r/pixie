// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x41\x6f\xe3\x36\x10\x85\xcf\xe5\xaf\x78\x85\x0f\x6d\x81\x5a\x3f\x40\xb7\xc0\x49\x1b\xa3\x8d\x93\xd6\x76\x8b\xdd\x4b\x40\x89\x63\x8b\x30\x45\x2a\x9c\x61\xbc\xc6\x22\xff\x7d\x41\x4a\x76\x9c\x9c\x2c\x8d\xe7\xbd\xf9\x34\xf3\x66\xd8\x74\x96\xb1\xb3\x8e\x60\x88\xdb\x68\x1b\x62\x48\x47\xe0\xb6\xa3\x5e\x63\x17\x43\x5f\xde\x6f\x9e\x96\x60\x8a\xaf\xb6\xa5\x4a\xcd\xd4\x0c\x4b\xf9\x85\xe1\x83\xc0\x1a\xd2\xee\x77\x34\x49\x70\x24\x78\x22\x03\x09\xe8\xb5\x4f\xda\xb9\x13\xf6\xe4\x29\x6a\x21\xc8\x69\x20\xc6\x2e\xc4\xe2\xb7\x39\x0d\xb4\x6e\xa3\x1d\x04\xdb\xa5\x9a\xe1\xd8\x91\x87\x5c\x60\x2c\x23\x0d\x46\x0b\x99\x6a\x44\x6c\xb5\x47\x43\x30\xc1\x13\x9a\x13\x62\xf2\xde\xfa\x7d\xad\x66\xc0\x3e\xea\xa1\x7b\x71\xf3\x11\x79\x5e\xe6\x8c\xce\xe7\xd9\x73\xe1\xe9\x83\xaa\xa9\x19\xf3\x79\x48\x32\x24\x39\xd7\x4d\x25\x5c\x30\x6c\xdb\xe1\x68\x9d\xbb\x02\xef\x08\x53\x73\xf6\x1e\x01\xa5\xd3\x32\xf6\x35\x84\xc1\xb6\x07\x32\x48\x43\x46\xcb\xed\xdb\x65\xa5\xa6\xdd\x5e\xf9\x17\x25\x83\xbb\x90\x9c\x01\x7d\xb3\x2c\xb0\x7e\x5c\xb7\xee\x09\xc6\x46\x6a\x25\xc4\x13\xf4\xf5\x11\x2e\xcc\x59\x5e\x29\x35\x9d\xe6\xbb\x02\x5e\x12\xc5\x53\x8d\x7f\xf2\x8f\x02\xfa\x24\x5a\x6c\xf0\x35\x1e\xa6\x27\xf5\xa6\x54\x81\xde\x32\xc5\xa5\xdf\x85\x22\xb3\xa6\xc6\xf2\xf6\x67\x05\x78\xdd\x53\x8d\xb5\x44\xeb\xf7\xf9\x9d\x7a\x6d\xdd\x75\x61\xb0\xad\xa4\x78\xd5\x73\x36\x2c\x33\x8b\x5b\x62\x8a\xf5\x65\x40\x16\xb5\x2e\xb1\xe4\xe2\x62\x7c\x18\xeb\x6f\x4a\x91\x4f\xfd\xb9\xb8\x16\x2d\x89\x8b\x43\x5e\x55\x0e\xe0\x4e\x27\x27\x60\xc9\x5b\xb7\xbb\x9c\xae\xce\xfa\x7d\x0e\xc3\xc1\x87\xa3\xaf\x14\xf0\xdf\xd7\xe7\xf5\xe6\x79\xbb\xfa\x6b\xf5\xf8\xff\xea\x22\x9d\x24\x8c\x8e\xb4\x93\xee\x94\xd5\x1d\xe9\x28\x0d\x69\x61\xe8\x48\x88\xd4\x92\x7d\x25\x83\xe0\x11\x69\x9f\x9c\x8e\xb0\x5e\x28\xbe\x6a\xc7\xd0\xde\xe4\x8d\x17\xc3\x89\x3e\xdb\x45\xe2\x21\x78\x93\x21\x24\x20\xd2\x4b\x22\x16\x7e\xe7\xb8\xbf\xbb\xf9\x7b\x73\xff\xe5\x13\xc7\x18\x9f\x90\x25\xc6\x72\x1b\xbc\xa7\x56\xc8\x64\xa8\x7c\xd5\x3f\xff\x7d\x5a\x60\xaa\xda\xe0\xd1\x44\xd2\x07\xae\x8a\x41\x17\x86\xf2\x1d\x25\x5e\xc5\x36\x2b\xce\x44\xc5\xb8\x0d\x3d\xa1\xd1\xed\x01\xc1\x3b\xeb\xa9\xb0\x47\xe2\xd4\x53\x4e\xd3\x84\x34\xa2\xbc\x93\xde\x2e\xd7\x8b\xc7\xd5\xea\x6e\xb1\xb9\xbb\xfd\xe9\x72\xc4\xab\xfb\x7c\x0a\x06\x97\xeb\xd4\x1f\x8f\x95\xff\x70\x9a\xe5\xfe\xbc\xda\x07\xae\xf1\x87\x0b\x5a\xde\x73\x71\x4e\x5e\xf1\x5b\x44\xd2\x42\x93\xc7\xaf\x26\xf4\xda\xfa\xd5\x55\xe4\x7e\xfb\x10\x11\xf5\xf6\x23\x00\x00\xff\xff\x8d\x8d\xb1\x17\x90\x04\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 1168, mode: os.FileMode(436), modTime: time.Unix(1566840386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

