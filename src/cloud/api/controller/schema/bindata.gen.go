// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x4b\x73\xe3\xb8\x11\xbe\xf3\x57\xb4\xcb\x87\x1d\x57\xd9\x3a\xa4\x92\x3d\xf0\xa6\x48\xda\x1d\x66\x6c\xd9\xb1\x64\x4f\x36\x5b\x53\xae\x16\xd0\x12\x51\x26\x01\x0e\xd0\x94\xad\xa4\xe6\xbf\xa7\xf0\x20\x45\xca\x9e\x6c\xcd\x9e\x04\x36\xfa\xf1\xf5\x13\xad\x73\x58\x97\xca\xc1\x56\x55\x04\x92\x9c\xb0\x6a\x43\x0e\xb8\x24\x70\xa2\xa4\x1a\x61\x6b\x4d\x1d\xbe\xa7\x77\x05\x38\xb2\x7b\x25\x68\x92\x9d\x67\xe7\x50\xf0\x4f\x0e\xb4\x61\x50\x92\xb0\xba\x84\x4d\xcb\xf0\x42\xa0\x89\x24\xb0\x81\x1a\x75\x8b\x55\x75\x80\x1d\x69\xb2\xc8\x04\x7c\x68\xc8\xc1\xd6\xd8\xa0\x6f\x7d\x68\x68\x25\xac\x6a\x18\x1e\x8a\xec\x1c\x5e\x4a\xd2\xc0\x3d\x18\xe5\xa0\x6d\x24\x32\xc9\x49\x84\x28\x50\xc3\x86\x40\x1a\x4d\xb0\x39\x80\x6d\xb5\x56\x7a\x97\x67\xe7\x00\x3b\x8b\x4d\xf9\xb5\xba\x8a\x90\xaf\x82\x9d\xa8\xb9\xb3\x7d\xc5\x2e\x39\x34\x49\xcc\x70\x75\x65\x5a\x6e\x5a\xee\xe8\x72\xc2\x2e\xc0\x50\xa2\x84\x17\x55\x55\x03\xe0\x25\x41\x62\xf6\xba\x23\x40\x2e\x91\x23\xdf\x86\xa0\x51\xe2\x99\x24\xb4\x8d\x87\xe6\xd9\x1f\x8a\x49\x96\x62\x3b\xd0\x1f\x24\x1d\xb8\xd2\xb4\x95\x04\x7a\x55\x8e\x41\xe9\x18\x6e\xac\x09\xa4\xb2\x24\xd8\xd8\x03\xe0\x30\x09\x3d\x66\x2f\x3e\xc9\xb2\x94\x9a\xff\x66\x00\x5f\x5b\xb2\x87\x1c\xfe\xe9\x7f\x32\x80\xba\x65\x64\x65\x74\x0e\x37\xe9\x94\x7d\xcb\xb2\x00\xfa\xc1\x91\x2d\xf4\xd6\x04\x31\x25\x73\x28\xe6\x67\x19\x80\xc6\x9a\x72\x58\xb1\x55\x7a\xe7\xbf\xa9\x46\x55\x0d\x09\x8d\x12\xdc\xda\x11\x8f\xb1\xbb\xe5\x48\xec\x5b\x96\x91\x6e\x6b\x98\x5a\x56\x5b\x14\xec\x73\x1b\xec\x00\x4c\xd7\x4f\x0f\xcb\x4f\xcb\xdb\xcf\xcb\xee\xf3\xba\x58\x3e\xfc\xeb\x69\x7a\x33\xff\xf9\xaf\x1d\x69\x3e\xbd\xff\x5c\x2c\xc7\xb4\xd9\xed\x72\x3d\x2d\x96\x8b\xfb\xa7\xd5\x62\xfd\xf4\xdb\xf4\xe6\x7a\xf5\xfe\xd5\x50\x5f\x0f\xa4\x65\x23\x4c\xdd\x54\xc4\x34\x15\x3e\x0e\x3d\xa4\xe9\x08\xd1\x39\x4c\x35\x90\x54\x0c\x18\xd8\xc0\x08\xd1\x5a\x07\x6a\x0b\x08\xad\x23\x0b\x25\x3a\xa8\x8d\x54\x5b\xe5\xeb\xba\x24\x50\x3a\x14\x02\xbd\xb2\x4f\xb6\xd2\x8e\x2c\x2b\xbd\x03\x63\x41\x52\x45\xe1\x2c\x4a\xb4\x28\x98\xac\x9b\x04\x23\xa1\x10\x94\x16\x55\x2b\x7d\x7b\x1d\x9a\x20\x10\x33\xff\x4c\x87\x8d\x41\x2b\x01\xb5\x84\x06\x5d\x54\x60\xea\x1a\xb5\x0c\xe2\x1e\xf1\x62\x5e\xac\x23\x5c\x70\x54\x91\x38\xe2\xd5\xd5\xe1\x7d\xd0\xa2\x34\x8e\x34\xa0\x06\x1c\x44\x03\x5c\xbb\xdb\x91\xf3\xb2\x93\x0e\x96\x54\x02\xd9\xe3\x32\xc1\x84\x07\x35\x12\x09\xa5\xae\xb8\xab\xdb\xda\xec\x63\x4f\x78\x53\x3f\x39\xf0\xb6\x7d\x53\x9b\x40\xd4\x3e\x30\xd8\x34\xd6\x34\x56\x85\xee\xc1\x4d\xe7\xc5\x6a\x71\xbd\x98\xad\xdf\xcd\xd2\x42\xb3\xe2\xc3\x27\xa5\x65\xcc\xd2\xe2\xd3\x20\x4b\xfe\xeb\xee\x76\x9e\x4e\xab\xc7\x59\x77\x9a\xdd\x17\x77\xeb\xf4\xb1\x9c\xde\x2c\x56\x77\xd3\xd9\xa2\x2f\xf9\xd0\x15\x41\x9d\x47\x9a\xf7\x2d\xe0\x6b\x58\x54\xad\x63\x4f\x9c\xc5\xc3\x09\x7d\x66\xb4\x26\x11\x5b\x69\x76\x4a\x3a\xf2\xaa\xae\xe2\x3f\xe0\xa0\xf4\xf3\x51\x23\x5c\xe4\x30\xbb\x2e\x3a\x8a\x97\xeb\x78\x5d\x2f\x35\x6c\xa7\x8b\xa3\xb8\xeb\x2c\x0d\xd3\xf1\x21\x14\x60\xc7\x7d\x99\xc2\x7f\x67\x5c\x0e\x85\xe6\xcb\x54\x18\xf9\x77\x7a\xe0\x62\x7c\x71\x4f\xae\xad\xf8\x2c\x0b\x89\x8f\xe3\xb8\xde\x59\x20\x2d\x1b\xa3\x34\xbb\x4b\xb0\xb4\xa5\x90\x5c\x69\x84\x2f\x16\x10\x95\x69\x25\x36\x6a\xd2\x58\x13\x2a\xa6\x52\x7b\x7a\x54\xf4\xe2\x72\xf8\xfd\x3a\x9d\x6f\x88\x51\x22\xe3\xd9\x97\xb3\x01\xc7\xcc\x68\x26\xcd\xee\x43\x9a\x3f\x17\x39\x5c\x9f\x5c\x79\xf6\x38\xbc\xbd\xba\x88\x68\xac\x2c\xde\xbe\xa3\x6a\x35\xba\x38\xeb\xcb\xe0\xad\xbf\xa1\x26\x7c\x57\x92\x7f\x8e\x6a\x64\x26\x99\xfa\x5a\xb9\x41\x93\xbb\x14\xe2\xf8\x28\xf8\xa6\xda\x10\x69\x68\xd0\x3a\x92\xdd\xa8\x1f\xb7\x8a\xe9\xfb\x29\xf6\x12\x6e\x56\x6c\x1a\x68\x8c\x53\x3e\x05\xa1\xa1\x7b\x9b\xc5\x30\x93\x81\xff\x73\x49\x5c\x92\x7d\x83\xc1\xe3\x42\xd8\x63\xa5\xe4\x25\xd0\x2b\x89\x96\x71\x53\x51\x37\x27\xbc\x56\xe5\x16\x3d\x3d\x87\xbf\x1b\x53\x11\xea\x38\x33\xaa\x6a\xd0\xf6\xf1\x09\x26\x14\x25\x98\x6d\x30\x94\x40\x06\x6c\xfe\x7c\x64\xcd\xe1\xf7\xf5\x90\xf0\xa5\x0f\xea\x88\x3c\x88\xa7\xd2\x92\x5e\x07\x8a\xe3\xf0\xe0\x92\x1c\x8d\x30\xa0\x0d\xb1\x4f\x26\x0b\x2f\x15\xea\x77\x14\x85\x38\xea\xbc\xfb\x38\x10\x4e\x2b\x84\xcf\x14\x6e\x92\xc1\xf0\x10\xd7\xf8\x1c\x07\x53\x8a\xca\x20\x50\xde\xce\xf1\x6b\xba\x65\xb2\xab\xa0\x7c\x18\x29\x37\x72\x7c\x58\x36\xef\x45\xe0\xfd\xfb\x10\x8a\x67\xa5\x65\xfe\x9d\xf1\x76\xf2\xe6\x66\x90\xf6\xae\x26\x76\x6d\x4f\xad\x91\x45\xe9\x4b\x44\xd2\x2b\x79\x3c\x85\xe6\x2f\xfd\xe8\x4c\x33\x69\xc5\xc8\xad\x1b\x84\x5f\xd2\x16\x7d\x81\x3b\xf6\xa3\x57\x6d\xfd\x82\x56\xa6\xfa\x79\xd6\xe6\x45\xfb\x40\x3c\xfe\xfb\x69\x35\x7e\x04\xbd\x68\x12\x71\x50\x12\x56\x5c\x1e\xbc\x74\x49\x68\x79\x43\xc8\x31\x61\x96\x04\xa9\x3d\x49\xff\x74\x59\xda\xb5\x15\x5a\x50\x9a\xc9\xee\xb1\x72\xe1\xfd\xe2\x32\xd6\x7d\x1a\xa3\x5e\x9d\x25\xd7\x18\x2d\x3d\x08\x36\x60\xe9\x6b\x4b\x8e\xdd\x11\xc7\xc7\xc5\xf4\x7a\xfd\xf1\xb7\x13\x1c\x71\x03\x33\x61\xf0\x28\x27\xe2\xec\xf5\x5d\x1a\x2b\xeb\xd7\xfb\xbb\x19\x88\x7e\x22\xc3\xc6\x12\x3e\xbb\x49\x50\x50\x9a\x86\x62\x1f\x23\xf7\x0f\x5a\x07\x28\xe8\x15\xa6\x26\xd8\xa0\x78\xf6\xcf\xa7\xd2\x14\xa0\x5b\x72\x6d\xed\x0b\x18\x12\xa2\x88\xe4\x08\x74\x5e\xac\x66\xb7\xcb\xe5\x62\xb6\x5e\xcc\xdf\x46\x2d\x6c\xab\xde\xc9\xb4\xc8\xd2\x30\x06\x69\xc9\x6b\xac\x11\xe4\x9c\x6f\x8f\x8e\x7d\x90\x8f\xbb\xf9\x74\x5d\x2c\x7f\xed\x55\xef\xd5\x7f\x54\xf7\x96\x77\xfe\xc7\x35\xdb\x93\xfc\xe6\xed\x48\x33\xa0\x3e\x80\x09\xed\xb2\x6d\x6d\x6c\x9b\x58\x15\x71\x7f\x76\x80\x1b\xd3\xc6\x40\xbc\xa4\xbe\x52\x3c\xcc\xb3\xb1\xef\xa0\x79\xeb\x69\x82\xf3\xe2\x57\x53\x7b\x48\xe9\x8c\x36\x22\xaa\x2d\xaa\x8a\xe2\x1a\xa3\x3c\xbe\x17\xef\x36\xc2\x06\xe5\x69\x24\x83\xab\x8b\xa7\x5f\xa6\xc5\xf5\x62\xde\x37\xd4\x63\x30\x30\x33\x7a\xab\x76\xa1\xa4\x1b\x74\x8e\x4b\x6b\xda\x5d\xb9\xd0\xbe\x6f\xe5\xb1\x5b\x3b\xa1\xc1\xf3\x7d\xb2\xd9\xc6\x28\xe4\xe3\x56\x09\xaf\x11\x3a\xfe\xd8\x15\xf6\x8d\xcb\xe1\x97\xca\x60\x78\x98\xf7\x03\x04\xf9\x08\xcf\xf1\xf6\x91\xac\x1b\x77\x6a\xca\xf3\x77\x2f\x96\xe3\x76\x4f\xd4\x87\x62\xde\x13\x4f\x9c\x19\x6f\x1a\xd1\xad\x66\x2a\xa5\x25\xe7\x86\x7b\x38\x9b\x67\xd2\xa3\x2d\x3c\x68\xe9\x56\xff\x20\x38\xb3\x84\x4c\xb3\x77\xb6\x9d\x0c\xe0\x21\x64\x6f\xe8\xe7\x87\x84\xce\x83\x2b\xe6\x67\x97\xff\x2f\x07\x17\xfd\xe9\x68\x7b\xb0\xe9\xa4\x3f\x00\xad\x1d\xfd\x9d\x00\x70\x25\xfe\xe5\x6f\x3f\xbf\x85\x3d\x5a\x7a\xa2\xd3\x4c\x75\x98\xc4\xe9\xe6\xcb\x1b\xde\xc0\xb6\x1f\x07\x3e\x6c\x66\x25\xea\x1d\x55\x66\x37\x0a\x97\xaa\xc9\x31\xd6\xcd\x20\xe7\xdf\xb2\xec\x1c\xee\xff\x60\xc5\x09\x26\x4f\x37\x9b\x3f\xf8\x1f\xe5\x87\xfa\xc8\xc7\x1f\x34\xd3\xad\x31\xc1\x4c\x9d\x6c\xe6\x6f\x50\x84\x7f\x68\xaf\x55\xc7\x3d\x44\xb0\x57\xee\x1f\xab\xdb\xe5\x9f\x01\x31\x5e\xbb\x7e\xc8\x53\xf0\xc3\xa9\x43\x39\x2e\x90\x1f\x32\xfe\x1d\xff\x4f\x16\x42\x9f\xea\x37\xae\x7f\xcb\xfe\x17\x00\x00\xff\xff\xeb\xde\xb2\x74\xd6\x10\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4310, mode: os.FileMode(436), modTime: time.Unix(1588895859, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
