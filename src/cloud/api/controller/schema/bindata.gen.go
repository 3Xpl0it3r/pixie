// Package schema Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x6f\xe3\xb8\x11\x7f\xf7\xa7\x98\x5c\x1e\x36\x01\x5c\xf7\x50\xf4\x0e\x85\x9f\x4e\xb5\xb5\xb7\x6a\x12\xc7\x8d\x9d\xdd\x1e\x16\x41\x8e\x16\xc7\x16\x61\x89\xd4\x91\x94\x13\xf7\x70\xdf\xbd\x18\x92\x92\x45\xdb\xd9\xc3\x2e\xfa\x64\x91\x9c\x3f\xbf\x19\xce\x0c\x67\x7c\x09\xcb\x42\x18\x58\x8b\x12\x81\xa3\xc9\xb5\x58\xa1\x01\x5b\x20\x98\xbc\xc0\x8a\xc1\x5a\xab\xca\xad\x93\x79\x06\x06\xf5\x4e\xe4\x38\x1a\x5c\x0e\x2e\x21\xb3\xef\x0c\x48\x65\x41\x70\x64\xe5\x10\x56\x8d\x85\x17\x04\x89\xc8\xc1\x2a\xa8\x98\x6c\x58\x59\xee\x61\x83\x12\x35\xb3\x08\x76\x5f\xa3\x81\xb5\xd2\x4e\xde\x72\x5f\xe3\x22\xd7\xa2\xb6\xf0\x98\x0d\x2e\xe1\xa5\x40\x09\xb6\x03\x23\x0c\x34\x35\x67\x16\xf9\xc8\x43\xcc\x99\x84\x15\x02\x57\x12\x61\xb5\x07\xdd\x48\x29\xe4\x06\x7e\xf5\x54\x23\x53\xfc\x0a\x22\x08\xe0\x42\x63\x6e\x95\xde\x8f\x06\xc1\xbe\x16\x83\x09\x66\x8d\xf8\xc8\x9a\x53\xfa\x21\x30\xc9\x21\x57\xb5\x40\x03\xc2\x92\x19\x04\xf5\xa7\x5a\xbc\x0a\xfc\x4b\xc9\x56\xe6\xaf\xac\x16\x50\xb3\x7c\xcb\x36\xe8\x4c\x69\x8c\x83\x73\xb0\x66\x34\x18\x04\xd7\xfd\x3e\x00\xf8\xad\x41\xbd\x1f\xc3\xbf\xe9\x67\x00\x50\x35\x96\x59\xa1\xe4\x18\xee\xc2\xd7\xe0\x8f\xc1\x80\x1c\x03\x8f\x06\x75\x26\xd7\xca\xb1\x09\x3e\x86\x6c\x7a\x31\x00\x90\xac\xc2\x31\x2c\xac\x16\x72\x43\x6b\xac\x98\x28\xfb\x1b\xb5\xc8\x6d\xa3\x23\x1a\xa5\x37\xb3\x88\xad\xaf\x63\x81\xd6\x92\xe3\x48\xcd\x16\xf7\x7d\xbe\x1d\x2b\x9b\x98\x0b\x65\x53\x41\xa2\xad\x58\xb3\xdc\x92\x8d\x8e\x0d\x20\x59\x3e\x3f\xce\x6e\x66\xf7\x9f\x66\xed\xf2\x36\x9b\x3d\xfe\xe7\x39\xb9\x9b\xfe\xf8\xf7\x76\x6b\x9a\x3c\x7c\xca\x66\xf1\xde\xe4\x7e\xb6\x4c\xb2\x59\xfa\xf0\xbc\x48\x97\xcf\xbf\x24\x77\xb7\x8b\xf3\x47\x67\xe4\xc5\x04\xcb\xf4\x6e\x7e\x9b\x2c\xd3\x20\xa4\x03\xdb\x58\x95\xab\xaa\x2e\xd1\x62\x2a\xad\xb0\xfb\x85\xa5\xe0\x23\xdc\x49\xba\xe8\xc1\xa6\xd5\x3c\x9d\x4d\xb3\xd9\xcf\x61\xf5\xf0\x38\x9b\x1d\x56\xef\x93\xec\x36\x9d\x86\xc5\x32\x7d\xb8\xcb\x66\xc9\x32\x9d\x9e\xd5\x94\xe4\x74\x97\x9d\x83\x92\xc8\x3f\x97\x90\x48\x40\x2e\x2c\x30\x47\x06\x2a\xcf\x1b\x6d\x40\xac\x81\x51\xfc\x68\x28\x98\x81\x4a\x71\xb1\x16\x94\x3b\x05\x82\x90\x75\x63\xc1\xe2\xab\xa5\xe0\x12\xd2\xa0\x76\x97\xa6\x34\x70\x2c\xd1\x7d\xe7\x05\xd3\x2c\xb7\xa8\xcd\xc8\x29\x71\x81\x2e\x64\x5e\x36\x9c\x52\x78\x5f\x3b\x06\xe9\xe4\x6d\x71\xbf\x52\x4c\x73\x17\xdf\x35\x33\x5e\x80\xaa\x2a\x26\xb9\x63\x27\xc4\xe9\x34\x5b\x7a\xb8\x60\xb0\xc4\xfc\x80\x57\x96\xfb\xf3\xa0\xf3\x42\x19\x94\xc0\x24\xb0\x9e\x37\xc0\x34\x9b\x0d\x1a\xe2\x1d\xb5\xb0\xb8\xc8\x5d\xfe\x59\xe5\x54\x10\xa8\x88\xc5\x16\xcc\x52\xca\x99\x42\x35\x25\x87\x4a\xed\xd0\x11\x91\xaa\x77\x06\x48\x37\x15\x0e\x9f\x90\x92\x1c\xc3\xea\x5a\xab\x5a\x0b\x57\x5a\xd8\xaa\xb5\x62\x91\xde\xa6\x93\xe5\x17\xe2\xe1\x46\x48\x1e\xc2\xe1\x26\x0a\x87\x9b\xe7\xf9\xfd\x34\x7c\x2d\x3e\x4e\xda\xaf\xc9\x43\x36\x5f\x86\xc5\x2c\xb9\x4b\x17\xf3\x64\x92\x76\x29\x35\xc5\xba\x54\xfb\x0a\xa5\xbd\xc1\xfd\x51\xee\x1e\xa5\x57\xae\x91\xea\x59\x62\xef\xcc\x18\xde\x97\x8a\x59\xda\xa5\xaa\x7b\x9a\xa9\xc9\x3c\xfb\xbf\xca\x73\x05\xc8\x89\x23\x87\x8e\xbb\x6a\x73\x11\x76\x42\x55\x30\x57\x5b\xdc\x9b\x31\x7c\xf6\xfc\x4f\x17\xd7\x63\xf8\xdc\xab\x1a\x4f\x4e\x6f\xd9\x18\x8b\xfa\x2a\x00\xbb\x1e\xc3\xc4\xef\xb4\x02\x03\x01\xc9\xe9\x9f\xf4\x99\x27\x4a\x4a\x74\xd1\x75\x2a\xe6\x70\x76\x10\x28\xda\x22\x74\xc5\x7a\xd5\x68\x1c\xd5\x26\x92\x70\x9b\xb5\x3b\xc4\xd7\xd2\x9a\x8e\xab\x5f\x17\xaf\x0f\xec\xa6\xd5\xd4\x8f\xc9\x2b\x97\x85\x2d\xf5\x30\xc4\xe0\x5c\x99\x31\x64\xd2\x0e\x43\x76\x8c\xdf\x28\x04\xc3\xd6\xd4\xc7\x6c\xda\xd7\xd8\x23\x7e\x40\xd3\x94\xf6\x58\xed\x7b\x81\x25\x3f\xd6\xbd\xa6\xcd\x60\xf2\xd9\x88\x1e\xba\x2a\xa9\xf1\xb7\x46\x68\xe4\x89\xde\x10\x31\xdd\xc0\x79\xf2\xa7\xf3\xf0\x22\xea\x45\x97\xc5\x4f\x03\x97\xb4\xfe\x81\xab\x36\x1a\x50\xf2\x5a\x09\x69\xcd\x10\x34\xae\xd1\x25\x26\x57\xb9\x7b\x52\xf3\x52\x35\x9c\xd5\x62\x54\x6b\xe5\xb2\xbd\x14\x3b\xfc\x28\xf0\x85\xd0\xdc\x86\xef\x3b\xb4\x8c\x33\xcb\x7c\x50\xb4\x14\x13\x25\x2d\x4a\x6b\x7a\x31\x71\x7b\x74\x44\xe4\xc6\xe1\x70\x61\xea\xbe\x62\x61\xfe\xf4\x8c\xa8\x45\x74\x70\xe1\x6d\xf2\xf9\x4b\xa9\x65\x5c\xf2\xf4\xb2\x99\x14\x44\xe9\xed\xe5\x47\x34\x3d\xf1\x31\xa9\x97\x4e\x4d\x53\x10\xcd\x6a\x11\x64\xfa\xdc\xf6\xc2\xfc\x6e\x4f\x4a\x38\x3c\x14\x82\x93\x78\x71\x59\x4c\xe5\xde\x35\x20\x15\xb3\x16\x79\x78\x30\x84\xe9\xbd\x1e\x26\x84\xce\x4b\x21\xf2\xc2\x55\xeb\x15\xa2\x84\x9a\x69\x83\x9c\x9e\x95\xd3\x1a\xac\xba\x42\xed\x8b\x34\x5b\x2d\xac\xaa\xa1\x56\x46\x50\x18\xb8\x97\xa2\xd3\x99\xf5\x23\xd4\xd1\x7f\x2a\xd0\x16\xa8\x4f\x30\x10\x2e\x46\xdd\x85\xe0\x43\xc0\x57\xcc\x1b\xcb\x56\x25\xb6\x0f\x10\x49\x15\x26\xed\xf6\xc7\xf0\x4f\xa5\x4a\x64\xd2\xbb\xb0\x2c\x7b\xef\x89\xef\x1f\x91\xe5\x05\xa8\xb5\x53\x14\x40\x3a\x6c\xf4\x7d\x20\x1d\xc3\xe7\x65\x7f\xe3\xa9\x73\x6a\xb4\xdd\xf3\xa7\x90\x1c\x5f\x7b\x82\xfd\xab\x64\x0b\x34\x18\x61\x60\xda\xf9\x3e\xa8\xcc\x88\xcb\xd5\x84\xc8\x0b\xfe\x0d\x25\xf3\x59\x8f\x39\xf4\xbf\x74\x53\x6c\x15\x14\xbe\x88\xb2\x84\x8a\x6d\xfd\x8b\x17\xbc\xd2\x73\x14\xe9\x39\xac\x92\xb5\xa5\x7a\x4c\xc2\xfb\x9e\x32\x91\xe1\x6f\xe5\xf1\xb9\xb0\x3a\x72\xc5\x56\x48\xfe\x56\x95\x39\x6a\x48\xc3\x73\x43\x69\xe5\x2a\x61\xb7\x5b\x31\x9b\x17\x14\x22\x1c\x5f\x5d\x15\xca\xa4\x7d\x22\x90\xd4\x8b\x9d\x13\xee\x9a\xb4\xee\xd1\x0e\x0f\x01\x6d\x36\xa6\x77\x3f\x1c\xd7\x8c\x32\xc0\x89\xa1\x56\x44\x2a\x5b\x84\x00\xdb\x4a\xf5\x22\xc9\x53\x93\x45\xd4\x7b\x11\x5f\xa0\x37\x50\x20\x2b\x6d\xb1\x27\xd6\x02\x99\xb6\x2b\x64\xd6\x5f\xa7\xc6\x1c\xc5\x0e\x39\x75\x4c\x1a\x37\x4d\xc9\x34\x08\x69\x51\xef\x58\x69\x5c\xdb\x64\x0b\x9f\x15\xa1\x6e\x92\x38\x8d\xa6\x56\x92\x13\x02\xab\x5c\xf1\x45\x63\x4d\x00\xf1\x21\x4d\x6e\x97\x1f\x7e\x39\x05\xd1\xc8\x1e\x0c\x77\xe3\x07\x89\xb9\x7f\xfb\xfc\x08\x35\xa7\xb1\x03\x26\x54\x4f\x1d\x02\x61\xa0\xd6\x6a\x27\x78\x9b\x70\x07\x1b\xfc\xf8\x25\x8c\x7c\x67\xfd\xcc\xe1\x12\x8c\x62\xcd\xa8\x8a\xac\x63\xa6\x6b\xc6\x34\x1a\xac\x56\x25\x1a\xf8\xb0\x5c\xce\xdf\x19\xf8\xe1\xfb\xef\x1d\xba\xc6\x74\xfe\x3b\x0f\xde\x05\xea\x46\xb9\x6a\x2f\xcc\x01\x6b\xb0\xe3\xe7\x87\xf9\xa4\xb5\x80\xa2\x69\xa5\x91\x6d\xcd\xc8\x09\x28\x54\x8d\xbe\x3e\x31\xdb\x75\x80\xad\xe1\x4e\x6e\x4e\x40\x57\x2c\xdf\x52\xbf\x29\x24\x3a\x93\x35\x9a\xa6\xa2\xc4\x84\x80\xc8\x23\x09\x38\xa7\xd9\x62\x72\x3f\x9b\xa5\x93\xa5\x6b\xd4\x8f\xfd\x4c\x93\x21\xdd\x4d\x18\x2d\x23\x47\x0b\xbf\x53\x6b\x95\xa3\x31\x94\xf3\x2d\x79\xeb\x83\xf9\x34\x59\xfa\x69\xc0\xcb\xdd\x89\xff\x8a\xb6\xed\x6d\x2d\xf7\x6e\xa7\x2d\x1a\x84\x0d\x4a\x0b\x4c\xee\x41\xb9\x02\xb0\x6e\xb4\x2f\x04\x3e\x8c\xfd\xa0\x6a\x80\xad\x54\xe3\x5d\xf0\x12\x2a\x85\xb0\xfd\xd8\xa4\xa1\x32\x86\x72\x6a\x63\xc0\xf2\xc2\x0c\x58\xbd\x0f\xf1\xe7\x15\x78\x48\x6b\x26\x4a\xec\xa2\x46\xaa\x17\x32\x98\xc1\x8a\xf1\xc8\x81\xce\xc8\xb4\x1d\x75\xda\xe2\xf0\xd1\x49\x9f\x28\xb9\x16\x7e\x4e\xac\x99\x31\xb6\xd0\xaa\xd9\x14\xa9\xa4\xc8\xe2\x87\xca\xd3\x32\xd1\xbb\xca\x84\x8c\xb2\xf6\x78\x78\x3d\xdf\xb1\x86\xa2\x70\x20\xab\xd0\x18\xb6\xe9\x57\x19\x1f\xbf\xdd\x46\xab\xf3\xe6\x1f\x26\xdd\x91\xd3\x7f\x3f\xcb\xb5\x16\xda\xd8\xa5\xa8\x30\x52\x57\xb2\x93\xcd\x56\xde\x5c\xf1\x6f\x42\xdf\x98\xaf\x82\x0f\x14\x40\xde\x59\xae\x47\x8e\x3d\xe7\x1b\x03\x24\xbb\xe8\xb4\xb5\x91\xb6\x3b\x5f\x1f\xba\xea\xa3\x11\xa1\x45\x13\x55\xd0\xd6\xea\x0f\x6d\xb9\x88\x0c\xd8\xf5\x6e\x7b\x1c\xdd\xfd\xe1\xf4\x23\x6a\x13\x57\xf8\x90\x4a\x6f\x1e\xcc\xe2\x67\xa2\xd6\x68\xed\x7e\x72\xf6\xec\xb4\x11\x0d\x1e\xd2\xaa\x9c\x97\x4c\x62\x77\x2d\xee\x29\xe9\x56\xde\x51\xb2\xa9\x66\x8a\xa3\x6f\xca\xc3\x46\x26\x8d\xd5\x0d\xb5\x62\xc8\xfb\x87\x47\xfe\x8b\x07\x0d\xef\xc9\x3a\xe1\x5c\xa3\x89\x2e\xd4\xaa\x2d\xca\xd3\x99\xaa\xfd\x0b\xc7\x31\x4e\x5c\x70\x04\xc1\xd1\x44\x04\x3f\x71\xac\x35\x52\x57\xc5\xaf\xda\x48\xf8\x2e\x10\xf8\xc7\x87\xf2\x33\x44\x17\xec\x04\x83\xfa\x35\x74\x99\xdf\x5d\x0f\x00\x1e\x5d\x5e\xf7\x2f\xe6\x2a\xb8\x8c\x3c\x96\x4d\x2f\x86\x5f\x4a\xd0\xeb\xee\xeb\xa2\x83\x19\xb5\xaa\x27\x9d\x2b\xc0\x14\xe9\x65\x9e\xbe\xd1\xe8\x9e\x88\xf3\x3d\xeb\xa1\x77\x6d\x05\xf8\xf5\x79\x4e\x6f\xd4\xe3\x17\x46\xcf\xa1\xff\x3f\xea\x68\x1a\xed\x44\x74\x77\x79\x18\xf9\xc2\x9f\x53\x8d\x8e\xfe\x20\x03\x30\x05\xfb\xdb\x0f\x3f\x9e\x19\xb2\xfb\xd3\x9f\xbf\x7e\x8b\x95\x6b\x9f\xc2\xc9\xd3\x09\xad\x23\xdb\xc5\x51\xef\x8a\x43\xc1\xe4\x06\x4b\xb5\x89\x02\x47\x54\x68\x2c\xab\xea\xb8\xd6\x5c\xc2\xc3\x9f\x0c\x4d\x4e\xe5\xf1\xac\xf4\x27\xff\x0c\x9e\x0c\xfe\x5f\xa9\xa6\x1d\x8c\x42\x31\xf5\x3a\xc7\x27\x28\xdc\x7f\x8e\xaf\x65\x4b\x1d\xfd\x7f\x28\xcc\xbf\x16\xf7\xb3\x6f\x01\x11\x0f\x72\x5f\x65\x29\xd0\xfb\xdb\xa2\x8c\x03\xe4\xab\x94\xbf\x61\xff\xd1\x88\x19\x4a\x53\x6c\xfa\x1f\x83\xff\x05\x00\x00\xff\xff\x21\x9e\x06\x00\x48\x17\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 5960, mode: os.FileMode(436), modTime: time.Unix(1617993334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
