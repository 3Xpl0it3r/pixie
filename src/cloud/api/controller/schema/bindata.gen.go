// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x6f\x1b\x37\x12\x7f\xd7\xa7\x18\xd7\x0f\x71\x00\x41\x28\x0e\xd7\xe2\xa0\xa7\xdb\x4a\x9b\x66\xcf\xb6\xac\xb3\xe4\xe4\x8a\xc0\x48\xa9\xe5\x48\x4b\x78\x97\xdc\x92\x5c\xd9\xba\x22\xdf\xfd\x30\x24\xf7\x0f\x25\xb9\xb9\x14\x7d\x92\x96\x1c\x0e\x7f\x33\x9c\xf9\x71\x86\x97\xb0\x2e\x84\x81\xad\x28\x11\x38\x9a\x5c\x8b\x0d\x1a\xb0\x05\x82\xc9\x0b\xac\x18\x6c\xb5\xaa\xdc\x77\xb2\xcc\xc0\xa0\xde\x8b\x1c\x27\xa3\xcb\xd1\x25\x64\xf6\x8d\x01\xa9\x2c\x08\x8e\xac\x1c\xc3\xa6\xb1\xf0\x8c\x20\x11\x39\x58\x05\x15\x93\x0d\x2b\xcb\x03\xec\x50\xa2\x66\x16\xc1\x1e\x6a\x34\xb0\x55\xda\xe9\x5b\x1f\x6a\x5c\xe5\x5a\xd4\x16\x1e\xb2\xd1\x25\x3c\x17\x28\xc1\x76\x60\x84\x81\xa6\xe6\xcc\x22\x9f\x78\x88\x39\x93\xb0\x41\xe0\x4a\x22\x6c\x0e\xa0\x1b\x29\x85\xdc\xc1\xaf\x5e\x6a\x62\x8a\x5f\x41\x04\x05\x5c\x68\xcc\xad\xd2\x87\xc9\x28\xd8\xd7\x62\x30\xc1\xac\x09\x9f\x58\x73\x2a\x3f\x06\x26\x39\xe4\xaa\x16\x68\x40\x58\x32\x83\xa0\x3e\x64\x90\x2b\x8e\x0e\x7a\x63\xdc\xf6\x3d\xfa\xc9\x68\x14\x5c\xf5\xfb\x08\xe0\xb7\x06\xf5\x61\x0a\xff\xa6\x9f\x11\x40\xd5\x58\x66\x85\x92\x53\xb8\x0d\xff\x46\x5f\x46\x23\x72\x04\x3c\x18\xd4\x99\xdc\x2a\xb7\x4c\xf0\x29\x64\xf3\x8b\x11\x80\x64\x15\x4e\x61\x65\xb5\x90\x3b\xfa\xc6\x8a\x89\x72\x38\x50\x8b\xdc\x36\x3a\x92\x51\x7a\xb7\x38\x5a\xa6\xf4\x2e\x9b\x0f\x07\x84\x49\xea\x5a\xab\x3d\xf2\x29\xfc\xa4\x54\x89\x4c\x5e\x74\x58\xee\xf4\xee\xff\x81\x22\xd9\xa6\x44\xaf\x86\x95\xe6\x8c\x1e\xb2\x69\x85\xd6\xd2\xc1\x90\xae\x27\x3c\x0c\x15\xec\x59\xd9\x0c\x34\x7e\x19\x8d\x50\x36\x15\x24\xda\x8a\x2d\xcb\x2d\xf9\xd4\x2d\x03\x48\xd6\x9f\x1f\x16\xd7\x8b\xbb\x8f\x8b\xf6\xf3\x26\x5b\x3c\xfc\xe7\x73\x72\x3b\xff\xf1\xef\xed\xd0\x3c\xb9\xff\x98\x2d\xe2\xb1\xd9\xdd\x62\x9d\x64\x8b\xf4\xfe\xf3\x2a\x5d\x7f\xfe\x25\xb9\xbd\x59\x9d\x9f\x3a\xa3\x2f\x16\x58\xa7\xb7\xcb\x9b\x64\x9d\x06\x25\x1d\xd8\xc6\xaa\x5c\x55\x75\x89\x16\x53\x69\x85\x3d\xac\x2c\x05\x37\xe1\x4e\xd2\xd5\x00\x36\x7d\x2d\xd3\xc5\x3c\x5b\xfc\x1c\xbe\xee\x1f\x16\x8b\xfe\xeb\x5d\x92\xdd\xa4\xf3\xf0\xb1\x4e\xef\x6f\xb3\x45\xb2\x4e\xe7\x67\x77\x4a\x72\x8a\x9d\xce\x41\x49\xe4\x9f\x4b\x48\x24\x20\x17\x16\x98\x13\x03\x95\xe7\x8d\x36\x20\xb6\xc0\x28\x5e\x35\x14\xcc\x40\xa5\xb8\xd8\x0a\xca\xcd\x02\x41\xc8\xba\xb1\x60\xf1\xc5\x52\x30\x0b\x69\x50\xbb\x43\x53\x1a\x38\x96\xe8\xfe\xe7\x05\xd3\x2c\xb7\xa8\xcd\xc4\x6d\xe2\x12\x49\xc8\xbc\x6c\x38\x51\xc4\xa1\x76\x0b\xa4\xd3\xf7\x84\x87\x8d\x62\x9a\xbb\xfc\xa9\x99\xf1\x0a\x54\x55\x31\xc9\xdd\x72\x42\x9c\xce\xb3\xb5\x87\x0b\x06\x4b\xcc\x7b\xbc\xb2\x3c\x9c\x07\x9d\x17\xca\xa0\x04\x26\x81\x0d\xbc\x01\xa6\xd9\xed\xd0\xd0\xda\x49\x0b\x8b\x8b\xdc\xe5\xb7\x55\x6e\x0b\x02\x15\x2d\xb1\x05\xb3\x94\xd2\xa6\x50\x4d\xc9\xa1\x52\x7b\x74\x42\xb4\xd5\x1b\x03\xb4\x37\x11\x93\x4f\x78\x49\x8e\x61\x14\xe8\xb5\x16\x8e\xba\xd8\xa6\xb5\x62\x95\xde\xa4\xb3\xf5\x1f\xc4\xc3\xb5\x90\x3c\x84\xc3\x75\x14\x0e\xd7\x9f\x97\x77\xf3\xf0\x6f\xf5\x61\xd6\xfe\x9b\xdd\x67\xcb\x75\xf8\x58\x24\xb7\xe9\x6a\x99\xcc\xd2\x2e\xa5\xe6\x58\x97\xea\x50\xa1\xb4\xd7\x78\x38\x4a\xd0\xa3\xf4\xca\x35\x12\x5f\x26\xf6\xd6\x4c\xe1\x5d\xa9\x98\xa5\x51\x62\xf5\x28\xe7\x9c\xda\x64\x99\xfd\xa5\xfa\x1c\xe1\x39\x75\xe4\xd0\x69\xc7\x6e\x81\x8b\xa6\x2d\xc5\x5c\x04\x89\xc0\x12\xe6\xea\x09\x0f\x66\x0a\x9f\x82\xbe\xc7\x8b\xb7\x53\xf8\x34\xa0\x91\x8b\xc7\xa0\x81\xc6\x4c\x98\x73\x8a\xdc\x44\x5e\x36\xc6\xa2\xbe\x0a\x36\xbc\x9d\xc2\xcc\x8f\xb4\x7b\x05\x81\x9f\x0e\x44\x90\x57\x11\xa3\xbd\x2a\x4c\xdb\x0c\x67\x86\x3b\xcd\x94\x94\xe8\xa2\xf6\x74\xcf\x7e\xae\x57\x28\x5a\x72\xbb\x62\x03\x96\x9b\x46\x9c\xe7\x54\xdc\x64\xed\x10\x2d\x6c\x85\x4d\xb7\x6c\x71\x04\xbd\x95\x36\xed\x5e\xc3\x68\xbf\x72\xf9\xdd\x8a\x8f\x43\x74\x2f\x95\x99\x42\x26\xed\x38\xe4\xdd\xf4\x15\x8a\x19\xb7\xc6\x3e\xf4\x57\xc8\xdb\x58\xf8\x1e\x4d\x53\xda\xe3\x6d\xdf\x09\x2c\xf9\xf1\xde\x5b\x1a\x0c\x46\x9f\xcd\x95\xb1\xe3\x5f\x8d\xbf\x35\x42\x23\x4f\xf4\x8e\x84\xe9\x0c\xce\x8b\x3f\xbe\x02\x2f\x12\x5f\x75\x04\xf1\x38\x72\x7c\xe0\xef\xea\x6a\xa7\x01\x25\xaf\x95\x90\xd6\x8c\x41\xe3\x16\x5d\xce\x73\x95\xbb\x6a\x20\x2f\x55\xc3\x59\x2d\x26\xb5\x56\x8e\x48\x4a\xb1\xc7\x0f\x02\x9f\x09\xce\x4d\xf8\x7f\x8b\x96\x71\x66\x99\x8f\x8b\x56\x62\xa6\xa4\x45\x69\xcd\x20\x2c\x6e\x8e\xa6\x48\xdc\x38\x1c\x2e\xe2\xdd\xbf\x58\x99\x9f\x3d\xa3\x6a\x15\x4d\x5c\x78\x9b\x3c\x35\x50\xd6\x1a\x97\x97\x03\xa2\xa0\x0d\x22\xe6\xf0\xfa\x23\x99\x81\xfa\x58\xd4\x6b\xa7\x7a\x2f\xa8\x66\xb5\x08\x3a\x3d\x6d\x78\x65\x7e\x74\xa0\x25\x4c\xf6\x1c\x73\x12\x30\x8e\x20\xe8\x26\x71\xb5\x54\xc5\xac\x45\x1e\xee\x22\x61\x06\x17\x93\x09\xb1\xf3\x5c\x88\xbc\x70\x17\xc1\x06\x51\x42\xcd\xb4\x41\x4e\x37\xd6\x29\xbd\xab\xee\x0e\xf0\xfc\xcf\x36\x2b\xab\x6a\xa8\x95\x11\x14\x06\xee\x12\xea\xf6\xcc\x86\x21\xea\xe4\x3f\x16\x68\x0b\xd4\x27\x18\x08\x17\xa3\xc2\x45\xf0\x31\xe0\x0b\xe6\x8d\xa5\x22\xa8\xbd\xdb\x26\xae\xb2\x4a\xbb\xf1\xae\x26\xf2\x2e\x2c\xcb\xc1\x55\xe5\x4b\x5f\x64\x79\x01\x6a\xeb\x36\x0a\x20\x1d\x36\xfa\xdf\x8b\x4e\xe1\xd3\x7a\x38\xf0\xd8\x39\x35\x1a\x1e\xf8\x53\x48\x8e\x2f\x03\xc5\xfe\xc2\xb3\x05\x1a\x8c\x30\x30\xed\x7c\x1f\xb6\xcc\x68\x95\x23\x85\xc8\x0b\xfe\x7a\x26\xf3\xd9\x60\x71\x28\xdd\xe9\xa4\xd8\x26\x6c\xf8\x2c\xca\x12\x2a\xf6\xe4\x2f\xd3\xe0\x95\x81\xa3\x68\x9f\xfe\x2b\xd9\x5a\x62\x76\x52\x3e\xf4\x94\x89\x0c\x7f\x2d\x8f\xcf\x85\xd5\x91\x2b\x9e\x84\xe4\xaf\xd1\xcc\x51\x41\x1b\x6e\x32\x4a\x2b\x47\x85\xdd\x68\xc5\x6c\x5e\x50\x88\x70\x7c\x71\x34\x94\x49\xfb\x48\x20\xa9\xcc\x3b\xa7\xdc\xd5\x7f\x5d\x3d\x10\xee\x02\x1a\x6c\xcc\xe0\x7c\x38\x6e\x19\x65\x80\x53\x43\x55\x8e\x54\xb6\x08\x01\xf6\x24\xd5\xb3\x24\x4f\xcd\x56\x51\x59\x47\xeb\x82\xbc\x81\x02\x59\x69\x8b\x03\x2d\x2d\x90\x69\xbb\x41\x66\xfd\x71\x6a\xcc\x51\xec\x91\x53\x31\xa6\x71\xd7\x94\x4c\x83\x90\x16\x35\x55\xe9\xae\x22\xb3\x85\xcf\x8a\x40\x9c\xa4\x4e\xa3\xa9\x95\xe4\x84\xc0\x2a\xc7\xbe\x68\xac\x09\x20\xde\xa7\xc9\xcd\xfa\xfd\x2f\xa7\x20\x1a\x39\x80\xe1\x4e\xbc\xd7\x98\xfb\xeb\xcf\x77\x7f\x4b\xf1\x22\x10\x66\xc4\xa7\x0e\x81\x30\x40\x6d\x83\xe0\x6d\xc2\xf5\x36\xf8\xce\x51\x18\xf9\xc6\xfa\xf6\xc9\x25\x18\xc5\x9a\x51\x15\x59\xc7\x4c\x57\xe7\x69\x34\x58\x6d\x4a\x34\xf0\x7e\xbd\x5e\xbe\x31\xf0\xc3\xf7\xdf\x3b\x74\x8d\xe9\xfc\x77\x1e\xbc\x0b\xd4\x9d\x72\x6c\x2f\x4c\x8f\x35\xd8\xf1\xf3\xfd\x72\xd6\x5a\x40\xd1\xb4\xd1\xc8\x9e\xcc\xc4\x29\x28\x54\x8d\x9e\x9f\x98\xed\x8a\xcb\xd6\x70\xa7\x37\x27\xa0\x1b\x96\x3f\x51\x29\x2b\x24\x3a\x93\x35\x9a\xa6\xa2\xc4\x84\x80\xc8\x23\x09\x38\xe7\xd9\x6a\x76\xb7\x58\xa4\xb3\xb5\xeb\x01\x8e\xfd\x4c\x4d\x2d\x9d\x4d\xe8\x8a\x23\x47\x0b\x3f\x52\x6b\x95\xa3\x31\x94\xf3\xad\x78\xeb\x83\xe5\x3c\x59\xfb\x46\xc3\xeb\xdd\x8b\xff\x8a\xb6\xa2\x6e\x2d\xf7\x6e\xa7\x21\xea\xe1\x0d\x4a\x0b\x4c\x1e\x40\x39\x02\xd8\x36\xda\x13\x81\x0f\x63\xdf\x63\x1b\x60\x1b\xd5\x78\x17\x3c\x07\xa6\x10\x76\x18\x9b\xd4\x1f\xc7\x50\x4e\x6d\x0c\x58\x9e\x99\x01\xab\x0f\x21\xfe\xfc\x06\x1e\xd2\x96\x89\x12\xbb\xa8\x91\xea\x99\x0c\x66\xb0\x61\x3c\x72\xa0\x33\x32\x6d\xbb\xa8\x96\x1c\x3e\x38\xed\x33\x25\xb7\xc2\xb7\xa0\x35\x33\xc6\x16\x5a\x35\xbb\x22\x75\xfd\xeb\xb9\xfe\x97\x2e\x56\x26\x64\x94\xb6\xc7\xdd\xef\xf9\x6a\x38\xb0\x42\x2f\x56\xa1\x31\x6c\x17\x0d\xf9\x08\x3e\xad\x99\xaf\xff\x61\xd2\x3d\xf9\xfd\xf7\xf3\xeb\xb6\x42\x1b\xbb\x16\x15\x46\x3b\x96\xec\x64\xb0\x55\xb8\x54\xfc\x4f\x19\xd0\x98\x6f\xb4\x00\x28\x8c\xbc\xc7\x5c\xb1\x1c\xbb\xcf\x97\x07\x48\xa6\xd1\x6c\x6b\x26\x0d\x77\x0e\xef\xcb\xeb\xa3\x1e\xa4\xc5\x13\xf1\x68\x6b\xf7\xfb\x96\x34\x22\x13\xf6\x83\x33\x9f\x46\x11\xd0\xcf\x7e\x40\x6d\xc4\x91\x09\x7e\x87\xd7\x67\x8e\xdf\x54\x6a\x8d\xd6\x1e\x66\xe7\x27\x4f\x6b\xd2\xd6\x4d\x5a\x95\xcb\x92\x49\xec\x4e\xc7\xdd\x2a\xdd\x97\xf7\x96\x6c\xaa\x85\xe2\xe8\x0b\xf4\x30\x90\x49\x63\x75\x43\x55\x19\xf2\xe1\xe4\x91\x13\xe3\xb6\xc3\xbb\xb3\x4e\x38\xd7\x68\xa2\x73\xb5\xea\x09\xcf\x44\xa1\x6f\xa8\xf6\x22\xbc\x61\x9c\xbc\x37\x09\x37\x77\x23\xe4\xd3\xe9\xda\xf6\x51\xcb\xad\x9c\xb9\xf8\x0a\xa0\xa2\xde\x0a\xfe\xc9\xb1\xd6\x48\xc5\x19\xbf\x6a\x63\xe9\xbb\x20\xe0\xef\x30\x4a\xf3\x10\xa0\xb0\x17\x0c\xea\x97\x50\xac\x7e\xf7\x76\x04\xf0\xe0\xe8\x61\x78\xb2\x57\xc1\xdf\xe4\xee\x6c\x7e\x31\x3e\x0a\x82\x94\x0b\x57\x70\x44\xc1\x70\xda\xf0\x79\xc8\x51\xf5\x7b\x52\x0c\x03\xcc\x91\x2e\xfb\xf9\x2b\xb5\x73\x47\x26\xad\x3a\x5f\x06\xf7\xe5\x70\xab\xc0\x7f\x9f\x5f\xe9\x0d\x7c\xf8\xa3\xc6\x78\xec\x9f\xcf\xbe\xde\x2c\xfb\xc3\xa4\xe1\xab\xf8\x30\xc7\x9e\x51\xa2\xc8\x1d\xbb\xbc\x3a\x6e\x2e\xfb\x98\x88\xc1\x2d\x51\x57\xc2\x50\xba\x98\x2b\xea\xe2\x3b\xef\x37\xf1\x64\x7f\x00\x47\xab\x7a\xe5\xfe\x00\xbc\xea\x3b\xbd\xeb\xcc\x0e\x0f\x97\x4e\xab\xea\xc7\x7b\x8d\x03\x61\xd2\xd6\xbd\x2b\x7c\x19\x8d\x7c\xe1\x7e\xee\xec\xbf\x76\x15\x9c\xae\x3e\x02\xee\xd3\xea\xf4\x0d\xf5\x74\xe1\x00\x9f\x4f\xa8\x57\x5e\x4d\xfb\x34\xee\x5b\x7f\xff\x80\xa2\xa3\xfc\x33\x05\xfb\xdb\x0f\x3f\x9e\x79\xc1\x19\x3e\x00\x78\x78\x16\x2b\x57\x40\xb7\x0f\x09\x8f\xa7\xd2\x4e\x70\x7f\x86\xf2\x0a\x26\x77\x58\xaa\x5d\xc4\x18\xa2\x42\x63\x59\x55\xc7\x77\xcd\x25\xdc\x7f\xa5\x71\x76\x5b\x1e\xf7\xcb\x5f\x79\x5d\x3e\x79\x57\xfa\xc6\x6d\xda\xe6\x38\xdc\xa6\x7e\xcf\xe9\x09\x0a\x47\xe4\x2f\x65\x2b\x1d\x3d\x4f\x0b\xf3\xaf\xd5\xdd\xe2\xcf\x80\x88\x9b\xf9\x6f\xb2\x14\xa8\x06\x6b\x51\xc6\xb5\xc9\x37\x6d\xfe\x8a\xfd\x47\xcf\x0c\xe1\x4e\x8a\x4d\xff\x32\xfa\x5f\x00\x00\x00\xff\xff\xe1\xe9\xf3\x41\x07\x1a\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6663, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
