// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x51\x6f\xe3\x38\x0e\x7e\xcf\xaf\x60\xb7\x0f\xd3\x02\xb9\xdc\xe2\x70\xbb\x38\xe4\x69\x7d\x89\x67\xc7\xd7\x36\xcd\x35\xe9\xcc\x2d\x06\x45\x57\xb1\x98\x58\x88\x2d\x79\x25\x39\x6d\x6e\x31\xff\xfd\x40\x49\x76\xac\x24\x9d\xc5\x2c\xee\x29\x31\x45\x52\x1f\x29\x92\x22\x75\x09\xcb\x42\x18\x58\x8b\x12\x81\xa3\xc9\xb5\x58\xa1\x01\x5b\x20\x98\xbc\xc0\x8a\xc1\x5a\xab\xca\x7d\x27\xf3\x0c\x0c\xea\x9d\xc8\x71\x34\xb8\x1c\x5c\x42\x66\xdf\x19\x90\xca\x82\xe0\xc8\xca\x21\xac\x1a\x0b\x2f\x08\x12\x91\x83\x55\x50\x31\xd9\xb0\xb2\xdc\xc3\x06\x25\x6a\x66\x11\xec\xbe\x46\x03\x6b\xa5\x9d\xbe\xe5\xbe\xc6\x45\xae\x45\x6d\xe1\x31\x1b\x5c\xc2\x4b\x81\x12\x6c\x07\x46\x18\x68\x6a\xce\x2c\xf2\x91\x87\x98\x33\x09\x2b\x04\xae\x24\xc2\x6a\x0f\xba\x91\x52\xc8\x0d\xfc\xea\xb9\x46\xa6\xf8\x15\x44\x50\xc0\x85\xc6\xdc\x2a\xbd\x1f\x0d\x82\x7d\x2d\x06\x13\xcc\x1a\xf1\x91\x35\xa7\xfc\x43\x60\x92\x43\xae\x6a\x81\x06\x84\x25\x33\x08\xea\x4f\xb5\x78\x15\xf8\x97\x92\xad\xcc\x5f\x59\x2d\xa0\x66\xf9\x96\x6d\xd0\x99\xd2\x18\x07\xe7\x60\xcd\x68\x30\x08\xae\xfb\x7d\x00\xf0\x5b\x83\x7a\x3f\x86\x7f\xd3\xcf\x00\xa0\x6a\x2c\xb3\x42\xc9\x31\xdc\x85\x7f\x83\x2f\x83\x01\x39\x06\x1e\x0d\xea\x4c\xae\x95\x13\x13\x7c\x0c\xd9\xf4\x62\x00\x20\x59\x85\x63\x58\x58\x2d\xe4\x86\xbe\xb1\x62\xa2\xec\x13\x6a\x91\xdb\x46\x47\x3c\x4a\x6f\x66\x47\x62\x4a\x6f\xb2\x69\x9f\x20\x4c\x52\xd7\x5a\xed\x90\x8f\xe1\x9f\x4a\x95\xc8\xe4\x45\x84\x65\x81\xd6\x92\x83\x09\xce\x16\xf7\x7d\xd9\x1d\x2b\x9b\x9e\xf6\x2f\x83\x01\xca\xa6\x82\x44\x5b\xb1\x66\xb9\x25\x5f\x38\x31\x80\x64\xf9\xfc\x38\xbb\x99\xdd\x7f\x9a\xb5\x9f\xb7\xd9\xec\xf1\x3f\xcf\xc9\xdd\xf4\xc7\xbf\xb7\xa4\x69\xf2\xf0\x29\x9b\xc5\xb4\xc9\xfd\x6c\x99\x64\xb3\xf4\xe1\x79\x91\x2e\x9f\x7f\x49\xee\x6e\x17\xe7\x97\xce\xe8\x8b\x19\x96\xe9\xdd\xfc\x36\x59\xa6\x41\x49\x07\xb6\xb1\x2a\x57\x55\x5d\xa2\xc5\x54\x5a\x61\xf7\x0b\x4b\x41\x4a\xb8\x93\x74\xd1\x83\x4d\x5f\xf3\x74\x36\xcd\x66\x3f\x87\xaf\x87\xc7\xd9\xec\xf0\xf5\x3e\xc9\x6e\xd3\x69\xf8\x58\xa6\x0f\x77\xd9\x2c\x59\xa6\xd3\xb3\x3b\x25\x39\x9d\x79\xe7\xa0\x24\xf2\xcf\x25\x24\x12\x90\x0b\x0b\xcc\xb1\x81\xca\xf3\x46\x1b\x10\x6b\x60\x14\x67\x1a\x0a\x66\xa0\x52\x5c\xac\x05\xe5\x58\x81\x20\x64\xdd\x58\xb0\xf8\x6a\x29\x08\x85\x34\xa8\xdd\xa1\x29\x0d\x1c\x4b\x74\xff\xf3\x82\x69\x96\x5b\xd4\x66\xe4\x36\x71\x09\x21\x64\x5e\x36\x9c\x52\x7d\x5f\x3b\x01\xe9\xf4\x6d\x71\xbf\x52\x4c\x73\x97\x07\x35\x33\x5e\x81\xaa\x2a\x26\xb9\x13\x27\xc4\xe9\x34\x5b\x7a\xb8\x60\xb0\xc4\xfc\x80\x57\x96\xfb\xf3\xa0\xf3\x42\x19\x94\xc0\x24\xb0\x9e\x37\xc0\x34\x9b\x0d\x1a\x92\x1d\xb5\xb0\xb8\xc8\x5d\x9e\x5a\xe5\xb6\x20\x50\x91\x88\x2d\x98\xa5\xd4\x34\x85\x6a\x4a\x0e\x95\xda\xa1\x63\xa2\xad\xde\x19\xa0\xbd\xa9\xc0\xf8\xc4\x95\xe4\x18\x46\x71\x5e\x6b\xe1\x4a\x10\x5b\xb5\x56\x2c\xd2\xdb\x74\xb2\xfc\x4a\x3c\xdc\x08\xc9\x43\x38\xdc\x44\xe1\x70\xf3\x3c\xbf\x9f\x86\x7f\x8b\x8f\x93\xf6\xdf\xe4\x21\x9b\x2f\xc3\xc7\x2c\xb9\x4b\x17\xf3\x64\x92\x76\x29\x35\xc5\xba\x54\xfb\x0a\xa5\xbd\xc1\xfd\x51\x8e\x1f\xa5\x57\xae\x91\xea\x5e\x62\xef\xcc\x18\xde\x97\x8a\x59\xa2\x52\x75\x8e\x72\xce\xa9\x4d\xe6\xd9\xff\x55\x9f\x2b\x54\x4e\x1d\x39\x74\xdc\x55\xa5\x8b\x40\x09\x55\xc1\x5c\x6d\x71\x6f\xc6\xf0\xd9\xcb\x3f\x5d\x5c\x8f\xe1\x73\xaf\x6a\x3c\x85\x9a\x43\x24\x13\x96\x48\x8d\xa3\xe7\x65\x63\x2c\xea\xab\x00\xf8\x7a\x0c\x13\x4f\x69\x37\x0a\x0c\x24\xd8\x5f\xe9\x0b\x4f\x94\x94\xe8\xa2\xee\x54\xcd\x61\xed\xa0\x50\xb4\xc5\xe9\x8a\xf5\xaa\xd4\x38\xaa\x59\xa4\xe1\x36\x6b\x29\x24\xd7\xf2\x9a\x4e\xaa\x5f\x57\xaf\x0f\xe2\xa6\xdd\xa9\x1f\xab\x57\x2e\x3b\x5b\xee\x61\x88\xcd\xb9\x32\x63\xc8\xa4\x1d\x86\xac\x19\xbf\x51\x20\x86\xad\xa9\x8f\x87\xc2\x7d\x1d\x33\x3f\xa0\x69\x4a\x7b\xbc\xed\x7b\x81\x25\x3f\xde\x7b\x4d\xc4\x60\xf2\xd9\x48\x1f\xba\xea\xa9\xf1\xb7\x46\x68\xe4\x89\xde\x10\x33\x9d\xc0\x79\xf6\xa7\xf3\xf0\x22\xee\x45\x97\xdd\x4f\x03\x97\xcc\xfe\x82\xac\x36\x1a\x50\xf2\x5a\x09\x69\xcd\x10\x34\xae\xd1\x25\x2c\x57\xb9\xbb\x92\xf3\x52\x35\x9c\xd5\x62\x54\x6b\xe5\xaa\x40\x29\x76\xf8\x51\xe0\x0b\xa1\xb9\x0d\xff\xef\xd0\x32\xce\x2c\xf3\x41\xd1\x72\x4c\x94\xb4\x28\xad\xe9\xc5\xc4\xed\xd1\x12\xb1\x1b\x87\xc3\x85\xaf\xfb\x17\x2b\xf3\xab\x67\x54\x2d\xa2\x85\x0b\x6f\x93\xcf\x6b\x4a\x39\xe3\x92\xaa\x97\xe5\xb4\x41\x94\xf6\x5e\x7f\xc4\xd3\x53\x1f\xb3\x7a\xed\xd4\x74\x05\xd5\xac\x16\x41\xa7\xcf\x79\xaf\xcc\x53\x7b\x5a\xc2\xe2\xa1\x40\x9c\xc4\x8b\xcb\x6e\xba\x06\x5c\x03\x53\x31\x6b\x91\x87\x8b\x44\x98\xde\xad\x62\x42\xe8\xbc\x14\x22\x2f\x5c\x15\x5f\x21\x4a\xa8\x99\x36\xc8\xe9\xba\x39\xad\xcd\xaa\x2b\xe0\xbe\x78\xb3\xd5\xc2\xaa\x1a\x6a\x65\x04\x85\x81\xbb\x41\xba\x3d\xb3\x7e\x84\x3a\xfe\x4f\x05\xda\x02\xf5\x09\x06\xc2\xc5\xa8\xeb\x10\x7c\x08\xf8\x8a\x79\x63\xd9\xaa\xc4\xf6\x62\x1a\xb9\x76\x26\xed\xe8\x5d\x43\xe3\x5d\x58\x96\xbd\x7b\xc6\xf7\x9f\xc8\xf2\x02\xd4\xda\x6d\x14\x40\x3a\x6c\xf4\xff\xc0\x3a\x86\xcf\xcb\x3e\xe1\xa9\x73\x6a\x44\xee\xf9\x53\x48\x8e\xaf\x3d\xc5\xfe\xb6\xb2\x05\x1a\x8c\x30\x30\xed\x7c\x1f\xb6\xcc\x48\xca\xd5\x84\xc8\x0b\xfe\x6e\x25\xf3\x59\x4f\x38\xf4\xcf\x74\x52\x6c\x15\x36\x7c\x11\x65\x09\x15\xdb\xfa\x9b\x30\x78\xa5\xe7\x28\xda\xe7\xf0\x95\xac\x2d\xd5\x69\x52\xde\xf7\x94\x89\x0c\x7f\x2b\x8f\xcf\x85\xd5\x91\x2b\xb6\x42\xf2\xb7\xaa\xcc\x51\x43\x1b\xae\x21\x4a\x2b\x57\x09\x3b\x6a\xc5\x6c\x5e\x50\x88\x70\x7c\x75\x55\x28\x93\xf6\x89\x40\x52\x8f\x76\x4e\xb9\x6b\xde\xba\xcb\x3c\x5c\x04\x44\x6c\x4c\xef\x7c\x38\xae\x19\x65\x80\x53\x43\x2d\x8a\x54\xb6\x08\x01\xb6\x95\xea\x45\x92\xa7\x26\x8b\xa8\x27\x23\xb9\xc0\x6f\xa0\x40\x56\xda\x62\x4f\xa2\x05\x32\x6d\x57\xc8\xac\x3f\x4e\x8d\x39\x8a\x1d\x72\xea\xa4\x34\x6e\x9a\x92\x69\x10\xd2\xa2\xde\xb1\xd2\xb8\x76\xca\x16\x3e\x2b\x42\xdd\x24\x75\x1a\x4d\xad\x24\x27\x04\x56\xb9\xe2\x8b\xc6\x9a\x00\xe2\x43\x9a\xdc\x2e\x3f\xfc\x72\x0a\xa2\x91\x3d\x18\xee\xc4\x0f\x1a\x73\x7f\xf7\xf9\x11\x6c\x4e\x63\x0b\x4c\xa8\x9e\x3a\x04\xc2\x00\xb5\xfc\x82\xb7\x09\x77\xb0\xc1\x8f\x6f\xc2\xc8\x77\xd6\xcf\x2c\x2e\xc1\x28\xd6\x8c\xaa\xc8\x3a\x66\xba\x26\x4d\xa3\xc1\x6a\x55\xa2\x81\x0f\xcb\xe5\xfc\x9d\x81\x1f\xbe\xff\xde\xa1\x6b\x4c\xe7\xbf\xf3\xe0\x5d\xa0\x6e\x94\xab\xf6\xc2\x1c\xb0\x06\x3b\x7e\x7e\x98\x4f\x5a\x0b\x28\x9a\x56\x1a\xd9\xd6\x8c\x9c\x82\x42\xd5\xe8\xeb\x13\xb3\x5d\x67\xd8\x1a\xee\xf4\xe6\x04\x74\xc5\xf2\x2d\xf5\xa1\x42\xa2\x33\x59\xa3\x69\x2a\x4a\x4c\x08\x88\x3c\x92\x80\x73\x9a\x2d\x26\xf7\xb3\x59\x3a\x59\xba\x06\xfe\xd8\xcf\x34\x59\xd2\xd9\x84\xd1\x34\x72\xb4\xf0\x94\x5a\xab\x1c\x8d\xa1\x9c\x6f\xd9\x5b\x1f\xcc\xa7\xc9\xd2\x4f\x09\x5e\xef\x4e\xfc\x57\xb4\xed\x70\x6b\xb9\x77\x3b\x91\x68\x90\x36\x28\x2d\x30\xb9\x07\xe5\x0a\xc0\xba\xd1\xbe\x10\xf8\x30\xf6\x83\xae\x01\xb6\x52\x8d\x77\xc1\x4b\xa8\x14\xc2\xf6\x63\x93\x86\xd2\x18\xca\xa9\x8d\x01\xcb\x0b\x33\x60\xf5\x3e\xc4\x9f\xdf\xc0\x43\x5a\x33\x51\x62\x17\x35\x52\xbd\x90\xc1\x0c\x56\x8c\x47\x0e\x74\x46\xa6\xed\x08\xd4\x16\x87\x8f\x4e\xfb\x44\xc9\xb5\xf0\xf3\x63\xcd\x8c\xb1\x85\x56\xcd\xa6\x48\x25\x45\xd6\x61\xe8\xec\x84\xe8\x5e\x65\x42\x46\x59\x7b\x3c\xfc\x9e\xef\x64\x43\x51\x38\xb0\x55\x68\x0c\xdb\xf4\xab\x8c\x8f\xdf\x8e\xd0\xee\x79\xf3\x0f\x93\xee\xc8\xe9\xbf\x9f\x95\x5a\x0b\x6d\xec\x52\x54\x18\x6d\x57\xb2\x13\x62\xab\x6f\xae\xf8\x9f\x42\xdf\x98\x6f\x82\x0f\x14\x40\xde\x59\xae\x47\x8e\x3d\xe7\x1b\x03\x24\xbb\x68\xb5\xb5\x91\xc8\x9d\xaf\x0f\x5d\xf5\xd1\xe8\xd0\xa2\x89\x2a\x68\x6b\xf5\x87\xb6\x5c\x44\x06\xec\x7a\xa7\x3d\x8e\xce\xfe\xb0\xfa\x11\xb5\x89\x2b\x7c\x48\xa5\x37\x17\x66\xf1\x35\x51\x6b\xb4\x76\x3f\x39\xbb\x76\xda\x88\x06\x0f\x69\x55\xce\x4b\x26\xb1\x3b\x16\x77\x95\x74\x5f\xde\x51\xb2\xa9\x66\x8a\xa3\x6f\xca\x03\x21\x93\xc6\xea\x86\x5a\x31\xe4\xfd\xc5\x23\xff\xc5\x83\x86\xf7\x64\x9d\x70\xae\xd1\x44\x07\x6a\xd5\x16\xe5\xe9\xac\xe5\x87\xa2\x9d\x08\xaf\x0e\x27\x2f\x3b\xc2\xad\xdd\x0a\xb9\x3d\x95\x6d\x9f\x8f\x9c\xe4\xc4\x05\x56\x00\x15\x4d\x53\xf0\x13\xc7\x5a\x23\x75\x64\xfc\xaa\x8d\xa2\xef\x02\x83\xbf\xb8\x28\xb7\x43\x64\xc2\x4e\x30\xa8\x5f\x43\x87\xfa\xdd\xf5\x00\xe0\xd1\xd5\x84\xfe\xa1\x5e\x05\x77\x93\xb7\xb3\xe9\xc5\xf0\x6b\xc9\x7d\xdd\x7b\x5b\x6a\x61\x46\x6d\xee\x49\xd7\x0b\x30\x45\xba\xd5\xa7\x6f\x34\xc9\x27\xea\x7c\xbf\x7b\xe8\x7b\x5b\x05\xfe\xfb\xbc\xa4\x37\xea\xf1\x2b\xe3\xec\xd0\xbf\x71\x1d\x4d\xb8\x3d\x15\xfe\xdc\x48\xc5\x55\x7c\x6e\x43\x5f\x35\xa2\xf7\xb7\xa1\xcb\x9e\x88\x74\x3d\xee\x1d\x7f\x8c\xe9\xaa\x09\xc3\xf2\x18\x52\x2e\x5c\xcb\xd6\x8e\xcf\xe7\xcc\xb8\xd7\x9b\x2b\xa5\x37\xb1\xc0\xbd\x27\x5c\xc7\x6f\x7b\xbe\xa7\x3e\x56\x7a\x54\x01\x6a\xad\xd6\xa2\xc4\x79\xfc\xac\x78\xfe\xc5\xf0\x54\x69\xd8\xf8\x48\x27\xba\xb8\xf0\xe2\xac\x34\x67\x8a\xff\x61\xee\xf6\x8f\x0f\x3a\xca\x04\x53\xb0\xbf\xfd\xf0\xe3\x99\xd7\x8f\xfe\xf8\xed\xf7\xb4\x58\xb9\xfe\x35\xac\x3c\x9d\xf0\x3a\xb6\x5d\x5c\x76\x5c\x75\x2e\x98\xdc\x60\xa9\x36\x51\xe6\x8a\x0a\x8d\x65\x55\x1d\x17\xfb\x4b\x78\xf8\x83\xa9\xd5\x6d\x79\x3c\xac\xfe\xc1\xd3\xee\xc9\x8b\xcc\x37\x6e\xd3\x4e\xa6\xe1\x36\xf3\x7b\x8e\x4f\x50\xb8\x43\x7e\x2d\x5b\xee\xe8\x61\x57\x98\x7f\x2d\xee\x67\x7f\x06\x44\x3c\x49\x7f\x93\xa5\x40\x0d\x50\x8b\x32\x8e\xd8\x6f\xda\xfc\x0d\xfb\x8f\x66\xfc\x70\x37\xc4\xa6\x7f\x19\xfc\x2f\x00\x00\xff\xff\x44\x25\x56\x5c\x09\x19\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6409, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
