// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x51\x8f\xe3\xb6\x11\x7e\xf7\xaf\x98\xcd\x3e\xdc\x2e\xe0\xba\x41\xd1\x04\x85\x9f\xa2\xda\xba\x9c\xba\x5e\x9f\xbb\xf6\xde\x35\x38\x2c\x2e\xb4\x38\xb6\x08\x4b\xa4\x42\x52\xde\x75\x83\xfb\xef\xc5\x90\x94\x2c\xda\xde\x0b\x2e\xe8\x93\x2d\x72\x38\xfc\x66\x38\xf3\x71\x86\xd7\xb0\x2a\x84\x81\x8d\x28\x11\x38\x9a\x5c\x8b\x35\x1a\xb0\x05\x82\xc9\x0b\xac\x18\x6c\xb4\xaa\xdc\x77\xb2\xc8\xc0\xa0\xde\x8b\x1c\x47\x83\xeb\xc1\x35\x64\xf6\x8d\x01\xa9\x2c\x08\x8e\xac\x1c\xc2\xba\xb1\xf0\x8c\x20\x11\x39\x58\x05\x15\x93\x0d\x2b\xcb\x03\x6c\x51\xa2\x66\x16\xc1\x1e\x6a\x34\xb0\x51\xda\xe9\x5b\x1d\x6a\x5c\xe6\x5a\xd4\x16\x1e\xb3\xc1\x35\x3c\x17\x28\xc1\x76\x60\x84\x81\xa6\xe6\xcc\x22\x1f\x79\x88\x39\x93\xb0\x46\xe0\x4a\x22\xac\x0f\xa0\x1b\x29\x85\xdc\xc2\xaf\x5e\x6a\x64\x8a\x5f\x41\x04\x05\x5c\x68\xcc\xad\xd2\x87\xd1\x20\xd8\xd7\x62\x30\xc1\xac\x11\x1f\x59\x73\x2e\x3f\x04\x26\x39\xe4\xaa\x16\x68\x40\x58\x32\x83\xa0\xfe\x54\x8b\x17\x81\x7f\x29\xd9\xda\xfc\x95\xd5\x02\x6a\x96\xef\xd8\x16\x9d\x29\x8d\x71\x70\x8e\xd6\x8c\x06\x83\xe0\xba\xdf\x07\x00\xbf\x35\xa8\x0f\x63\xf8\x37\xfd\x0c\x00\xaa\xc6\x32\x2b\x94\x1c\xc3\x7d\xf8\x37\xf8\x32\x18\x90\x63\xe0\xd1\xa0\xce\xe4\x46\xb9\x65\x82\x8f\x21\x9b\x5e\x0d\x00\x24\xab\x70\x0c\x4b\xab\x85\xdc\xd2\x37\x56\x4c\x94\xfd\x81\x5a\xe4\xb6\xd1\x91\x8c\xd2\xdb\xf9\xc9\x32\xa5\xb7\xd9\xb4\x3f\x20\x4c\x52\xd7\x5a\xed\x91\x8f\xe1\x9f\x4a\x95\xc8\xe4\x55\x84\x65\x89\xd6\x92\x83\x09\xce\x0e\x0f\xfd\xb5\x7b\x56\x36\x3d\xed\x5f\x06\x03\x94\x4d\x05\x89\xb6\x62\xc3\x72\x4b\xbe\x70\xcb\x00\x92\xd5\xe7\xc7\xf9\xdd\xfc\xfd\xc7\x79\xfb\x39\xcb\xe6\x8f\xff\xf9\x9c\xdc\x4f\x7f\xfc\x7b\x3b\x34\x4d\x1e\x3e\x66\xf3\x78\x6c\xf2\x7e\xbe\x4a\xb2\x79\xfa\xf0\x79\x99\xae\x3e\xff\x92\xdc\xcf\x96\x97\xa7\x2e\xe8\x8b\x05\x56\xe9\xfd\x62\x96\xac\xd2\xa0\xa4\x03\xdb\x58\x95\xab\xaa\x2e\xd1\x62\x2a\xad\xb0\x87\xa5\xa5\x20\x25\xdc\x49\xba\xec\xc1\xa6\xaf\x45\x3a\x9f\x66\xf3\x9f\xc3\xd7\xc3\xe3\x7c\x7e\xfc\x7a\x9b\x64\xb3\x74\x1a\x3e\x56\xe9\xc3\x7d\x36\x4f\x56\xe9\xf4\xe2\x4e\x49\x4e\x67\xde\x39\x28\x89\xfc\x73\x0d\x89\x04\xe4\xc2\x02\x73\x62\xa0\xf2\xbc\xd1\x06\xc4\x06\x18\xc5\x99\x86\x82\x19\xa8\x14\x17\x1b\x41\x39\x56\x20\x08\x59\x37\x16\x2c\xbe\x58\x0a\x42\x21\x0d\x6a\x77\x68\x4a\x03\xc7\x12\xdd\xff\xbc\x60\x9a\xe5\x16\xb5\x19\xb9\x4d\x5c\x42\x08\x99\x97\x0d\xa7\x54\x3f\xd4\x6e\x81\x74\xfa\x76\x78\x58\x2b\xa6\xb9\xcb\x83\x9a\x19\xaf\x40\x55\x15\x93\xdc\x2d\x27\xc4\xe9\x34\x5b\x79\xb8\x60\xb0\xc4\xfc\x88\x57\x96\x87\xcb\xa0\xf3\x42\x19\x94\xc0\x24\xb0\x9e\x37\xc0\x34\xdb\x2d\x1a\x5a\x3b\x6a\x61\x71\x91\xbb\x3c\xb5\xca\x6d\x41\xa0\xa2\x25\xb6\x60\x96\x52\xd3\x14\xaa\x29\x39\x54\x6a\x8f\x4e\x88\xb6\x7a\x63\x80\xf6\x26\x82\xf1\x89\x2b\xc9\x31\x8c\xe2\xbc\xd6\xc2\x51\x10\x5b\xb7\x56\x2c\xd3\x59\x3a\x59\x7d\x25\x1e\xee\x84\xe4\x21\x1c\xee\xa2\x70\xb8\xfb\xbc\x78\x3f\x0d\xff\x96\x1f\x26\xed\xbf\xc9\x43\xb6\x58\x85\x8f\x79\x72\x9f\x2e\x17\xc9\x24\xed\x52\x6a\x8a\x75\xa9\x0e\x15\x4a\x7b\x87\x87\x93\x1c\x3f\x49\xaf\x5c\x23\xf1\x5e\x62\xef\xcd\x18\xde\x96\x8a\x59\x1a\x25\x76\x8e\x72\xce\xa9\x4d\x16\xd9\xff\x55\x9f\x23\x2a\xa7\x8e\x1c\x3a\xee\x58\xe9\x2a\x8c\x04\x56\x30\x37\x3b\x3c\x98\x31\x7c\xf2\xeb\x9f\xae\x6e\xc7\xf0\xa9\xc7\x1a\x4f\x81\x73\x68\xc8\x84\x29\x52\xe3\xc6\xf3\xb2\x31\x16\xf5\x4d\x00\x7c\x3b\x86\x89\x1f\x69\x37\x0a\x02\xb4\xb0\x3f\xd3\x5f\x3c\x51\x52\xa2\x8b\xba\x73\x35\xc7\xb9\xa3\x42\xd1\x92\xd3\x0d\xeb\xb1\xd4\x38\xe2\x2c\xd2\x30\xcb\xda\x11\x5a\xd7\xca\x9a\x6e\x55\x9f\x57\x6f\x8f\xcb\x4d\xbb\x53\x3f\x56\x6f\x5c\x76\xb6\xd2\xc3\x10\x9b\x0b\x65\xc6\x90\x49\x3b\x0c\x59\x33\x7e\x85\x20\x86\xad\xa9\x8f\x47\xe2\xbe\x8d\x85\x1f\xd0\x34\xa5\x3d\xdd\xf6\xad\xc0\x92\x9f\xee\xbd\xa1\xc1\x60\xf2\xc5\x48\x1f\x3a\xf6\xd4\xf8\x5b\x23\x34\xf2\x44\x6f\x49\x98\x4e\xe0\xb2\xf8\xd3\x65\x78\x91\xf4\xb2\xcb\xee\xa7\x81\x4b\x66\x7f\x41\x56\x5b\x0d\x28\x79\xad\x84\xb4\x66\x08\x1a\x37\xe8\x12\x96\xab\xdc\x5d\xc9\x79\xa9\x1a\xce\x6a\x31\xaa\xb5\x72\x2c\x50\x8a\x3d\x7e\x10\xf8\x4c\x68\x66\xe1\xff\x3d\x5a\xc6\x99\x65\x3e\x28\x5a\x89\x89\x92\x16\xa5\x35\xbd\x98\x98\x9d\x4c\x91\xb8\x71\x38\x5c\xf8\xba\x7f\xb1\x32\x3f\x7b\x41\xd5\x32\x9a\xb8\xf2\x36\xf9\xbc\xa6\x94\x33\x2e\xa9\x7a\x59\x4e\x1b\x44\x69\xef\xf5\x47\x32\x3d\xf5\xb1\xa8\xd7\x4e\x45\x57\x50\xcd\x6a\x11\x74\xfa\x9c\xf7\xca\xfc\x68\x4f\x4b\x98\x3c\x12\xc4\x59\xbc\xb8\xec\xa6\x6b\xc0\x15\x30\x15\xb3\x16\x79\xb8\x48\x84\xe9\xdd\x2a\x26\x84\xce\x73\x21\xf2\xc2\xb1\xf8\x1a\x51\x42\xcd\xb4\x41\x4e\xd7\xcd\x39\x37\xab\x8e\xc0\x3d\x79\xb3\xf5\xd2\xaa\x1a\x6a\x65\x04\x85\x81\xbb\x41\xba\x3d\xb3\x7e\x84\x3a\xf9\x8f\x05\xda\x02\xf5\x19\x06\xc2\xc5\xa8\xea\x10\x7c\x08\xf8\x82\x79\x63\xd9\xba\xc4\xf6\x62\x1a\xb9\x72\x26\xed\xc6\xbb\x82\xc6\xbb\xb0\x2c\x7b\xf7\x8c\xaf\x3f\x91\xe5\x05\xa8\x8d\xdb\x28\x80\x74\xd8\xe8\xff\x51\x74\x0c\x9f\x56\xfd\x81\xa7\xce\xa9\xd1\x70\xcf\x9f\x42\x72\x7c\xe9\x29\xf6\xb7\x95\x2d\xd0\x60\x84\x81\x69\xe7\xfb\xb0\x65\x46\xab\x1c\x27\x44\x5e\xf0\x77\x2b\x99\xcf\x7a\x8b\x43\xfd\x4c\x27\xc5\xd6\x61\xc3\x67\x51\x96\x50\xb1\x9d\xbf\x09\x83\x57\x7a\x8e\xa2\x7d\x8e\x5f\xc9\xc6\x12\x4f\x93\xf2\xbe\xa7\x4c\x64\xf8\x6b\x79\x7c\x29\xac\x4e\x5c\xb1\x13\x92\xbf\xc6\x32\x27\x05\x6d\xb8\x86\x28\xad\x1c\x13\x76\xa3\x15\xb3\x79\x41\x21\xc2\xf1\xc5\xb1\x50\x26\xed\x13\x81\xa4\x1a\xed\x92\x72\x57\xbc\x75\x97\x79\xb8\x08\x68\xb0\x31\xbd\xf3\xe1\xb8\x61\x94\x01\x4e\x0d\x95\x28\x52\xd9\x22\x04\xd8\x4e\xaa\x67\x49\x9e\x9a\x2c\xa3\x9a\x8c\xd6\x05\x79\x03\x05\xb2\xd2\x16\x07\x5a\x5a\x20\xd3\x76\x8d\xcc\xfa\xe3\xd4\x98\xa3\xd8\x23\xa7\x4a\x4a\xe3\xb6\x29\x99\x06\x21\x2d\xea\x3d\x2b\x8d\x2b\xa7\x6c\xe1\xb3\x22\xf0\x26\xa9\xd3\x68\x6a\x25\x39\x21\xb0\xca\x91\x2f\x1a\x6b\x02\x88\x77\x69\x32\x5b\xbd\xfb\xe5\x1c\x44\x23\x7b\x30\xdc\x89\x1f\x35\xe6\xfe\xee\xf3\x2d\xd8\x82\xda\x16\x98\x10\x9f\x3a\x04\xc2\x00\x95\xfc\x82\xb7\x09\x77\xb4\xc1\xb7\x6f\xc2\xc8\x37\xd6\xf7\x2c\x2e\xc1\x28\xd6\x8c\xaa\xc8\x3a\x66\xba\x22\x4d\xa3\xc1\x6a\x5d\xa2\x81\x77\xab\xd5\xe2\x8d\x81\x1f\xbe\xff\xde\xa1\x6b\x4c\xe7\xbf\xcb\xe0\x5d\xa0\x6e\x95\x63\x7b\x61\x8e\x58\x83\x1d\x3f\x3f\x2c\x26\xad\x05\x14\x4d\x6b\x8d\x6c\x67\x46\x4e\x41\xa1\x6a\xf4\xfc\xc4\x6c\x57\x19\xb6\x86\x3b\xbd\x39\x01\x5d\xb3\x7c\x47\x75\xa8\x90\xe8\x4c\xd6\x68\x9a\x8a\x12\x13\x02\x22\x8f\x24\xe0\x9c\x66\xcb\xc9\xfb\xf9\x3c\x9d\xac\x5c\x01\x7f\xea\x67\xea\x2c\xe9\x6c\x42\x6b\x1a\x39\x5a\xf8\x91\x5a\xab\x1c\x8d\xa1\x9c\x6f\xc5\x5b\x1f\x2c\xa6\xc9\xca\x77\x09\x5e\xef\x5e\xfc\x57\xb4\xe5\x70\x6b\xb9\x77\x3b\x0d\x51\x23\x6d\x50\x5a\x60\xf2\x00\xca\x11\xc0\xa6\xd1\x9e\x08\x7c\x18\xfb\x46\xd7\x00\x5b\xab\xc6\xbb\xe0\x39\x30\x85\xb0\xfd\xd8\xa4\xa6\x34\x86\x72\x6e\x63\xc0\xf2\xcc\x0c\x58\x7d\x08\xf1\xe7\x37\xf0\x90\x36\x4c\x94\xd8\x45\x8d\x54\xcf\x64\x30\x83\x35\xe3\x91\x03\x9d\x91\x69\xdb\x02\xb5\xe4\xf0\xc1\x69\x9f\x28\xb9\x11\xbe\x7f\xac\x99\x31\xb6\xd0\xaa\xd9\x16\xa9\xa4\xc8\x3a\x36\x9d\xdd\x22\xba\x57\x99\x90\x51\xd6\x9e\x36\xbf\x97\x2b\xd9\x40\x0a\x47\xb1\x0a\x8d\x61\xdb\x3e\xcb\xf8\xf8\xed\x06\xda\x3d\xef\xfe\x61\xd2\x3d\x39\xfd\xf7\x8b\xab\x36\x42\x1b\xbb\x12\x15\x46\xdb\x95\xec\x6c\xb0\xd5\xb7\x50\xfc\x4f\xa1\x6f\xcc\x37\xc1\x07\x0a\x20\xef\x2c\x57\x23\xc7\x9e\xf3\x85\x01\x92\x5d\x34\xdb\xda\x48\xc3\x9d\xaf\x8f\x55\xf5\x49\xeb\xd0\xa2\x89\x18\xb4\xb5\xfa\x5d\x4b\x17\x91\x01\xfb\xde\x69\x8f\xa3\xb3\x3f\xce\x7e\x40\x6d\x62\x86\x0f\xa9\xf4\xea\xc4\x3c\xbe\x26\x6a\x8d\xd6\x1e\x26\x17\xe7\xce\x0b\xd1\xe0\x21\xad\xca\x45\xc9\x24\x76\xc7\xe2\xae\x92\xee\xcb\x3b\x4a\x36\xd5\x5c\x71\xf4\x45\x79\x18\xc8\xa4\xb1\xba\xa1\x52\x0c\x79\x7f\xf2\xc4\x7f\x71\xa3\xe1\x3d\x59\x27\x9c\x6b\x34\xd1\x81\x5a\xb5\x43\x79\xde\x6b\xf9\xa6\x68\x2f\xc2\xab\xc3\xd9\xcb\x8e\x70\x73\x33\x21\x77\xe7\x6b\xdb\xe7\x23\xb7\x72\xe2\x02\x2b\x80\x8a\xba\x29\xf8\x89\x63\xad\x91\x2a\x32\x7e\xd3\x46\xd1\x77\x41\xc0\x5f\x5c\x94\xdb\x21\x32\x61\x2f\x18\xd4\x2f\xa1\x42\xfd\xee\x76\x00\xf0\xe8\x38\xa1\x7f\xa8\x37\xc1\xdd\xe4\xed\x6c\x7a\x35\xfc\x5a\x72\xdf\xf6\xde\x96\x5a\x98\x51\x99\x7b\x56\xf5\x02\x4c\x91\x6e\xf5\xe9\x2b\x45\xf2\x99\x3a\x5f\xef\x1e\xeb\xde\x56\x81\xff\xbe\xbc\xd2\x1b\xf5\xf8\x95\x76\x76\xe8\xdf\xb8\x4e\x3a\xdc\x9e\x0a\x7f\x6e\xa4\xe2\x26\x3e\xb7\xa1\x67\x8d\xe8\xfd\x6d\xe8\xb2\x27\x1a\xba\x1d\xf7\x8e\xbf\x17\x58\xc7\xfe\xd3\x37\xe1\x3a\x8a\x08\x53\xb0\xbf\xfd\xf0\xe3\x85\x57\x80\x7e\x1b\xea\xe3\xd0\x62\xe5\xea\xb8\x30\xf3\x74\x26\xeb\xc4\xf6\x71\xfa\x39\x96\x2a\x98\xdc\x62\xa9\xb6\x51\x04\x8b\x0a\x8d\x65\x55\x1d\x93\xde\x35\x3c\xfc\x41\xf7\xe6\xb6\x3c\x6d\xda\xfe\xe0\x89\xf3\xec\x65\xe2\x1b\xb7\x69\x3b\xb4\xc0\xea\x7e\xcf\xf1\x19\x0a\xf7\x78\xfa\x52\xb6\xd2\xd1\x03\xa7\x30\xff\x5a\xbe\x9f\xff\x19\x10\x71\x47\xf9\x4d\x96\x02\x15\x02\x2d\xca\xf8\x55\xf6\x9b\x36\x7f\xc5\xfe\x93\x5e\x37\x70\x64\x6c\xfa\x97\xc1\xff\x02\x00\x00\xff\xff\x3a\xa1\x79\x9a\x11\x18\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6161, mode: os.FileMode(436), modTime: time.Unix(1620773320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
