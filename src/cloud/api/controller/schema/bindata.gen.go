// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x51\x6f\xe3\x36\xf2\x7f\xf7\xa7\x98\x34\x0f\x9b\x00\xfe\xfb\x5f\x1c\xae\xc5\xc1\x4f\xd5\xd9\xda\xae\x2e\x89\xe3\x8b\x9d\xdd\x2b\x16\x41\x4a\x8b\x63\x8b\xb0\x44\xaa\x24\xe5\xc4\x57\xec\x77\x3f\x0c\x49\xc9\xa2\xed\x6c\x6f\x8b\x7b\xb2\x45\x0e\x87\xbf\x19\xce\xfc\x38\xc3\x4b\x58\x16\xc2\xc0\x5a\x94\x08\x1c\x4d\xae\xc5\x0a\x0d\xd8\x02\xc1\xe4\x05\x56\x0c\xd6\x5a\x55\xee\x3b\x99\x67\x60\x50\xef\x44\x8e\xa3\xc1\xe5\xe0\x12\x32\xfb\xce\x80\x54\x16\x04\x47\x56\x0e\x61\xd5\x58\x78\x41\x90\x88\x1c\xac\x82\x8a\xc9\x86\x95\xe5\x1e\x36\x28\x51\x33\x8b\x60\xf7\x35\x1a\x58\x2b\xed\xf4\x2d\xf7\x35\x2e\x72\x2d\x6a\x0b\x8f\xd9\xe0\x12\x5e\x0a\x94\x60\x3b\x30\xc2\x40\x53\x73\x66\x91\x8f\x3c\xc4\x9c\x49\x58\x21\x70\x25\x11\x56\x7b\xd0\x8d\x94\x42\x6e\xe0\x57\x2f\x35\x32\xc5\xaf\x20\x82\x02\x2e\x34\xe6\x56\xe9\xfd\x68\x10\xec\x6b\x31\x98\x60\xd6\x88\x8f\xac\x39\x95\x1f\x02\x93\x1c\x72\x55\x0b\x34\x20\x2c\x99\x41\x50\x7f\xaa\xc5\xab\xc0\xff\x2b\xd9\xca\xfc\x3f\xab\x05\xd4\x2c\xdf\xb2\x0d\x3a\x53\x1a\xe3\xe0\x1c\xac\x19\x0d\x06\xc1\x75\xbf\x0f\x00\x7e\x6b\x50\xef\xc7\xf0\x4f\xfa\x19\x00\x54\x8d\x65\x56\x28\x39\x86\xbb\xf0\x6f\xf0\x65\x30\x20\xc7\xc0\xa3\x41\x9d\xc9\xb5\x72\xcb\x04\x1f\x43\x36\xbd\x18\x00\x48\x56\xe1\x18\x16\x56\x0b\xb9\xa1\x6f\xac\x98\x28\xfb\x03\xb5\xc8\x6d\xa3\x23\x19\xa5\x37\xb3\xa3\x65\x4a\x6f\xb2\x69\x7f\x40\x98\xa4\xae\xb5\xda\x21\x1f\xc3\xdf\x95\x2a\x91\xc9\x8b\x0e\xcb\xbd\xde\xfc\x37\x50\x24\x5b\x95\xe8\xd5\xb0\xd2\x9c\xd1\x43\x36\x2d\xd0\x5a\x3a\x28\xd2\xb5\xc5\x7d\x5f\xc1\x8e\x95\x4d\x4f\xe3\x97\xc1\x00\x65\x53\x41\xa2\xad\x58\xb3\xdc\x92\x4f\xdd\x32\x80\x64\xf9\xfc\x38\xbb\x99\xdd\x7f\x9a\xb5\x9f\xb7\xd9\xec\xf1\x5f\xcf\xc9\xdd\xf4\xc7\xbf\xb6\x43\xd3\xe4\xe1\x53\x36\x8b\xc7\x26\xf7\xb3\x65\x92\xcd\xd2\x87\xe7\x45\xba\x7c\xfe\x25\xb9\xbb\x5d\x9c\x9f\x3a\xa3\x2f\x16\x58\xa6\x77\xf3\xdb\x64\x99\x06\x25\x1d\xd8\xc6\xaa\x5c\x55\x75\x89\x16\x53\x69\x85\xdd\x2f\x2c\x05\x3b\xe1\x4e\xd2\x45\x0f\x36\x7d\xcd\xd3\xd9\x34\x9b\xfd\x1c\xbe\x1e\x1e\x67\xb3\xc3\xd7\xfb\x24\xbb\x4d\xa7\xe1\x63\x99\x3e\xdc\x65\xb3\x64\x99\x4e\xcf\xee\x94\xe4\x14\x3b\x9d\x83\x92\xc8\x3f\x97\x90\x48\x40\x2e\x2c\x30\x27\x06\x2a\xcf\x1b\x6d\x40\xac\x81\x51\xbc\x6a\x28\x98\x81\x4a\x71\xb1\x16\x94\xab\x05\x82\x90\x75\x63\xc1\xe2\xab\xa5\x60\x16\xd2\xa0\x76\x87\xa6\x34\x70\x2c\xd1\xfd\xcf\x0b\xa6\x59\x6e\x51\x9b\x91\xdb\xc4\x25\x96\x90\x79\xd9\x70\xa2\x8c\x7d\xed\x16\x48\xa7\x6f\x8b\xfb\x95\x62\x9a\xbb\x7c\xaa\x99\xf1\x0a\x54\x55\x31\xc9\xdd\x72\x42\x9c\x4e\xb3\xa5\x87\x0b\x06\x4b\xcc\x0f\x78\x65\xb9\x3f\x0f\x3a\x2f\x94\x41\x09\x4c\x02\xeb\x79\x03\x4c\xb3\xd9\xa0\xa1\xb5\xa3\x16\x16\x17\xb9\xcb\x77\xab\xdc\x16\x04\x2a\x5a\x62\x0b\x66\x29\xc5\x4d\xa1\x9a\x92\x43\xa5\x76\xe8\x84\x68\xab\x77\x06\x68\x6f\x22\x2a\x4f\x00\x92\x1c\xc3\x28\xd0\x6b\x2d\x1c\x95\xb1\x55\x6b\xc5\x22\xbd\x4d\x27\xcb\xaf\xc4\xc3\x8d\x90\x3c\x84\xc3\x4d\x14\x0e\x37\xcf\xf3\xfb\x69\xf8\xb7\xf8\x38\x69\xff\x4d\x1e\xb2\xf9\x32\x7c\xcc\x92\xbb\x74\x31\x4f\x26\x69\x97\x52\x53\xac\x4b\xb5\xaf\x50\xda\x1b\xdc\x1f\x25\xe8\x51\x7a\xe5\x1a\x89\x3f\x13\x7b\x67\xc6\xf0\xbe\x54\xcc\xd2\x28\xb1\x7c\x94\x73\x4e\x6d\x32\xcf\xfe\xa7\xfa\x1c\xe1\x39\x75\xe4\xd0\x71\xc7\x6e\x81\x8b\xc6\x2d\xc5\x5c\x04\x89\xc0\x12\xe6\x6a\x8b\x7b\x33\x86\xcf\x5e\xdf\xd3\xc5\xf5\x18\x3e\xf7\x58\xe4\x29\xac\xa7\x21\x13\xa6\x48\x8d\x1b\xcf\xcb\xc6\x58\xd4\x57\xc1\x80\xeb\x31\x4c\xfc\x48\xbb\x51\x10\xa0\x85\xfd\x99\xfe\xe2\x89\x92\x12\x5d\x14\x9e\xaa\x39\xcc\x1d\x14\x8a\x96\xac\xae\x58\x8f\xb5\xc6\x11\x87\x91\x86\xdb\xac\x1d\xa1\x75\xad\xac\xe9\x56\xf5\xf9\xfa\xfa\xb0\xdc\xb4\x3b\xf5\x63\xf7\xca\x65\x6b\x2b\x3d\x0c\xb1\x3a\x57\x66\x0c\x99\xb4\xc3\x90\x45\xe3\x37\x08\x63\xd8\x9a\xfa\x78\xb8\x10\xae\x63\xe1\x07\x34\x4d\x69\x8f\xb7\x7d\x2f\xb0\xe4\xc7\x7b\xaf\x69\x30\x98\x7c\x36\xf2\x87\x8e\x4d\x35\xfe\xd6\x08\x8d\x3c\xd1\x1b\x12\xa6\x13\x38\x2f\xfe\x74\x1e\x5e\x24\xbd\xe8\xb2\xfd\x69\xe0\x92\xdb\x5f\xbc\xd5\x46\x03\x4a\x5e\x2b\x21\xad\x19\x82\xc6\x35\xba\x04\xe6\x2a\x77\x57\x7d\x5e\xaa\x86\xb3\x5a\x8c\x6a\xad\x1c\x2b\x94\x62\x87\x1f\x05\xbe\x10\x9a\xdb\xf0\xff\x0e\x2d\xe3\xcc\x32\x1f\x14\xad\xc4\x44\x49\x8b\xd2\x9a\x5e\x4c\xdc\x1e\x4d\x91\xb8\x71\x38\x5c\xf8\xba\x7f\xb1\x32\x3f\x7b\x46\xd5\x22\x9a\xb8\xf0\x36\xf9\x3c\xa7\x14\x34\x2e\xc9\x7a\x59\x4f\x1b\x44\x34\xe0\xf5\x47\x32\x3d\xf5\xb1\xa8\xd7\x4e\xc5\x5c\x50\xcd\x6a\x11\x74\x7a\x0e\xf0\xca\xfc\x68\x4f\x4b\x98\x3c\x10\xc6\x49\xbc\xb8\x6c\xa7\x6b\xc1\x15\x46\x15\xb3\x16\x79\xb8\x58\x84\xe9\xdd\x32\x26\x84\xce\x4b\x21\xf2\xc2\xb1\xfa\x0a\x51\x42\xcd\xb4\x41\x4e\xd7\xcf\x29\x57\xab\x8e\xd0\x3d\x99\xb3\xd5\xc2\xaa\x1a\x6a\x65\x04\x85\x81\xbb\x51\xba\x3d\xb3\x7e\x84\x3a\xf9\x4f\x05\xda\x02\xf5\x09\x06\xc2\xc5\xa8\x0a\x11\x7c\x08\xf8\x8a\x79\x63\xa9\xa2\x69\x2f\xaa\x91\x2b\x93\xd2\x6e\xbc\x2b\x70\xbc\x0b\xcb\xb2\x77\xef\xf8\xba\x16\x59\x5e\x80\x5a\xbb\x8d\x02\x48\x87\x8d\xfe\x1f\x44\xc7\xf0\x79\xd9\x1f\x78\xea\x9c\x1a\x0d\xf7\xfc\x29\x24\xc7\xd7\x9e\x62\x7f\x7b\xd9\x02\x0d\x46\x18\x98\x76\xbe\x0f\x5b\x66\xb4\xca\x71\x42\xe4\x05\x7f\xd7\x92\xf9\xac\xb7\x38\xd4\xe5\x74\x52\x6c\x15\x36\x7c\x11\x65\x09\x15\xdb\xfa\x9b\x31\x78\xa5\xe7\x28\xda\xe7\xf0\x95\xac\x2d\xf1\x34\x29\xef\x7b\xca\x44\x86\xbf\x95\xc7\xe7\xc2\xea\xc8\x15\x5b\x21\xf9\x5b\x2c\x73\x54\x9d\x86\x6b\x89\xd2\xca\x31\x61\x37\x5a\x31\x9b\x17\x14\x22\x1c\x5f\x1d\x0b\x65\xd2\x3e\x11\x48\xaa\xd9\xce\x29\x77\xc5\x5c\x77\xb9\x87\x8b\x80\x06\x1b\xd3\x3b\x1f\x8e\x6b\x46\x19\xe0\xd4\x50\xc9\x22\x95\x2d\x42\x80\x6d\xa5\x7a\x91\xe4\xa9\xc9\x22\xaa\xd1\x68\x5d\x90\x37\x50\x20\x2b\x6d\xb1\xa7\xa5\x05\x32\x6d\x57\xc8\xac\x3f\x4e\x8d\x39\x8a\x1d\x72\xaa\xac\x34\x6e\x9a\x92\x69\x10\xd2\xa2\xa6\x92\xdb\x95\x57\xb6\xf0\x59\x11\x78\x93\xd4\x69\x34\xb5\x92\x9c\x10\x58\xe5\xc8\x17\x8d\x35\x01\xc4\x87\x34\xb9\x5d\x7e\xf8\xe5\x14\x44\x23\x7b\x30\xdc\x89\x1f\x34\xe6\xfe\xee\xf3\xad\xdd\x9c\xda\x21\x98\x10\x9f\x3a\x04\xc2\x00\xf5\x00\x82\xb7\x09\x77\xb0\xc1\xb7\x85\xc2\xc8\x77\xd6\xf7\x42\x2e\xc1\x28\xd6\x8c\xaa\xc8\x3a\x66\xba\xa2\x4d\xa3\xc1\x6a\x55\xa2\x81\x0f\xcb\xe5\xfc\x9d\x81\x1f\xbe\xff\xde\xa1\x6b\x4c\xe7\xbf\xf3\xe0\x5d\xa0\x6e\x94\x63\x7b\x61\x0e\x58\x83\x1d\x3f\x3f\xcc\x27\xad\x05\x14\x4d\x2b\x8d\x6c\x6b\x46\x4e\x41\xa1\x6a\xf4\xfc\xc4\x6c\x57\x29\xb6\x86\x3b\xbd\x39\x01\x5d\xb1\x7c\x4b\x75\xa9\x90\xe8\x4c\xd6\x68\x9a\x8a\x12\x13\x02\x22\x8f\x24\xe0\x9c\x66\x8b\xc9\xfd\x6c\x96\x4e\x96\xae\xa0\x3f\xf6\x33\x75\xac\x74\x36\xa1\xe5\x8d\x1c\x2d\xfc\x48\xad\x55\x8e\xc6\x50\xce\xb7\xe2\xad\x0f\xe6\xd3\x64\xe9\xbb\x06\xaf\x77\x27\xfe\x2d\xda\xf2\xb8\xb5\xdc\xbb\x9d\x86\xa8\x41\x37\x28\x2d\x30\xb9\x07\xe5\x08\x60\xdd\x68\x4f\x04\x3e\x8c\x7d\x03\x6d\x80\xad\x54\xe3\x5d\xf0\x12\x98\x42\xd8\x7e\x6c\x52\xb3\x1b\x43\x39\xb5\x31\x60\x79\x61\x06\xac\xde\x87\xf8\xf3\x1b\x78\x48\x6b\x26\x4a\xec\xa2\x46\xaa\x17\x32\x98\xc1\x8a\xf1\xc8\x81\xce\xc8\xb4\x6d\x89\x5a\x72\xf8\xe8\xb4\x4f\x94\x5c\x0b\xdf\x4f\xd6\xcc\x18\x5b\x68\xd5\x6c\x8a\xd4\x35\xa3\x87\x66\xb6\x5b\x44\xf7\x2a\x13\x32\xca\xda\xe3\x4e\xf6\x7c\x65\x1b\x48\xe1\x20\x56\xa1\x31\x6c\xd3\x67\x19\x1f\xbf\xdd\x40\xbb\xe7\xcd\xdf\x4c\xba\x23\xa7\xff\x7e\x76\xd5\x5a\x68\x63\x97\xa2\xc2\x68\xbb\x92\x9d\x0c\xb6\xfa\xe6\x8a\xff\x29\xf4\x8d\xf9\x26\xf8\x40\x01\xe4\x9d\xe5\x6a\xe4\xd8\x73\xbe\x30\x40\xb2\x8b\x66\x5b\x1b\x69\xb8\xf3\xf5\xa1\xaa\x3e\x6a\x25\x5a\x34\x11\x83\xb6\x56\x7f\x68\xe9\x22\x32\x60\xd7\x3b\xed\x71\x74\xf6\x87\xd9\x8f\xa8\x4d\xcc\xf0\x21\x95\xde\x9c\x98\xc5\xd7\x44\xad\xd1\xda\xfd\xe4\xec\xdc\x69\x21\x1a\x3c\xa4\x55\x39\x2f\x99\xc4\xee\x58\xdc\x55\xd2\x7d\x79\x47\xc9\xa6\x9a\x29\x8e\xbe\x28\x0f\x03\x99\x34\x56\x37\x54\x8a\x21\xef\x4f\x1e\xf9\x2f\x6e\x34\xbc\x27\xeb\x84\x73\x8d\x26\x3a\x50\xab\xb6\x28\x4f\x7b\x2f\xdf\x14\xed\x44\x78\x85\x38\x79\x31\x12\x6e\xee\x56\xc8\xed\xe9\xda\xf6\x59\xca\xad\x9c\xb8\xc0\x0a\xa0\xa2\x6e\x0a\x7e\xe2\x58\x6b\xa4\x8a\x8c\x5f\xb5\x51\xf4\x5d\x10\xf0\x17\x17\xe5\x76\x88\x4c\xd8\x09\x06\xf5\x6b\xa8\x50\xbf\xbb\x1e\x00\x3c\x3a\x4e\xe8\x1f\xea\x55\x70\x37\x79\x3b\x9b\x5e\x0c\xbf\x96\xdc\xd7\xbd\xb7\xa6\x16\x66\x54\xe6\x9e\x54\xbd\x00\x53\xa4\x5b\x7d\xfa\x46\x91\x7c\xa2\xce\xd7\xbb\x87\xba\xb7\x55\xe0\xbf\xcf\xaf\xf4\x46\x3d\x7e\xa5\x9d\x1d\xfa\x37\xaf\xa3\x0e\xb7\xa7\xc2\x9f\x1b\xa9\xb8\x8a\xcf\x6d\xe8\x59\x23\x7a\xd7\x1b\xba\xec\x89\x86\xae\xc7\xbd\xe3\x8f\x31\x5d\x35\xa1\x59\x1e\x43\xca\x85\x2b\xd9\xda\xf6\xf9\x9c\x19\xf7\x7a\x73\xa5\x7c\x93\x7e\x58\x10\xba\xf6\xeb\xf8\xad\xcf\xd7\xd4\xc7\x4a\x8f\x18\xa0\xd6\x6a\x2d\x4a\x9c\xc7\xcf\x95\xe7\x5f\x22\x4f\x95\x9e\x7f\x91\x7c\xeb\x05\xf2\x90\x50\x87\xbe\xdb\x3f\x46\xe8\x28\x13\x4c\xc1\xfe\xf2\xc3\x8f\x67\x5e\x43\xfa\xed\xb7\xdf\xd3\x62\xe5\xea\xd7\x30\xf3\x74\x22\xeb\xc4\x76\x31\xed\x38\x76\x2e\x98\xdc\x60\xa9\x36\x51\xe6\x8a\x0a\x8d\x65\x55\x1d\x93\xfd\x25\x3c\xfc\x41\xd7\xea\xb6\x3c\x6e\x56\xff\xe0\x9d\xf6\xe4\x85\xe6\x1b\xb7\x69\x3b\xd3\x70\x9b\xf9\x3d\xc7\x27\x28\xdc\x21\xbf\x96\xad\x74\xf4\xd0\x2b\xcc\x3f\x16\xf7\xb3\x3f\x03\x22\xee\xa4\xbf\xc9\x52\xa0\x02\xa8\x45\x19\x47\xec\x37\x6d\xfe\x86\xfd\x47\x3d\x7e\xb8\x1b\x62\xd3\xbf\x0c\xfe\x13\x00\x00\xff\xff\x53\x6d\xe2\x74\x61\x19\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6497, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
