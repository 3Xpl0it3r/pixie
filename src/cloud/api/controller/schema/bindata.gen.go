// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x4b\x6f\xe3\xc8\x11\xbe\xf3\x57\x94\xe1\xc3\x8e\x01\x5b\x87\x20\xd9\x03\x6f\x8a\xa4\xdd\x61\xc6\x96\x1d\x4b\x9e\xc9\x66\x31\x30\x4a\xec\x92\xd8\x30\xd9\xcd\xe9\x2e\xca\x56\x02\xff\xf7\xa0\x1f\xa4\x9a\xb2\x27\x8b\xd9\x93\xc8\x66\x3d\xbe\x7a\x7c\xd5\xa5\x73\x58\x57\xd2\xc2\x56\xd6\x04\x82\x6c\x69\xe4\x86\x2c\x70\x45\x60\xcb\x8a\x1a\x84\xad\xd1\x8d\x7f\x9f\xde\x15\x60\xc9\xec\x65\x49\x93\xec\x3c\x3b\x87\x82\x7f\xb2\xa0\x34\x83\x14\x84\xf5\x25\x6c\x3a\x86\x67\x02\x45\x24\x80\x35\x34\xa8\x3a\xac\xeb\x03\xec\x48\x91\x41\x26\xe0\x43\x4b\x16\xb6\xda\x78\x7b\xeb\x43\x4b\xab\xd2\xc8\x96\xe1\xa1\xc8\xce\xe1\xb9\x22\x05\x3c\x80\x91\x16\xba\x56\x20\x93\x98\x04\x88\x25\x2a\xd8\x10\x08\xad\x08\x36\x07\x30\x9d\x52\x52\xed\xf2\xec\x1c\x60\x67\xb0\xad\xbe\xd5\x57\x01\xf2\x95\xf7\x13\x2c\xf7\xbe\xaf\xd8\xc6\x80\x26\x51\x18\xae\xae\x74\xc7\x6d\xc7\xfd\xb9\x98\xb0\xf5\x30\x64\x59\xc1\xb3\xac\xeb\x04\x78\x45\x10\x85\x9d\xed\x00\x90\x2b\xe4\x20\xb7\x21\x68\x65\xf9\x44\x02\xba\xd6\x41\x73\xe2\x0f\xc5\x24\x8b\xb9\x4d\xec\x7b\x4d\x0b\xb6\xd2\x5d\x2d\x80\x5e\xa4\x65\x90\x2a\xa4\x1b\x1b\x02\x21\x0d\x95\xac\xcd\x01\x30\x2d\xc2\x80\xd9\xa9\x4f\xb2\x2c\x96\xe6\xbf\x19\xc0\xb7\x8e\xcc\x21\x87\x7f\xba\x9f\x0c\xa0\xe9\x18\x59\x6a\x95\xc3\x4d\x7c\xca\x5e\xb3\xcc\x83\x7e\xb0\x64\x0a\xb5\xd5\x5e\x4d\x8a\x1c\x8a\xf9\x59\x06\xa0\xb0\xa1\x1c\x56\x6c\xa4\xda\xb9\x77\x6a\x50\xd6\xe9\x41\x2b\x4b\xee\xcc\x48\x46\x9b\xdd\x72\xa4\xf6\x9a\x65\xa4\xba\x06\xa6\x86\xe5\x16\x4b\x76\xb5\xf5\x7e\x00\xa6\xeb\xc7\x87\xe5\xa7\xe5\xed\x97\x65\xff\x7a\x5d\x2c\x1f\xfe\xf5\x38\xbd\x99\xff\xfc\xd7\xfe\x68\x3e\xbd\xff\x52\x2c\xc7\x67\xb3\xdb\xe5\x7a\x5a\x2c\x17\xf7\x8f\xab\xc5\xfa\xf1\xb7\xe9\xcd\xf5\xea\xfd\x4f\xa9\xbd\x01\x48\xc7\xba\xd4\x4d\x5b\x13\xd3\xb4\x74\x79\x18\x20\x4d\x47\x88\xce\x61\xaa\x80\x84\x64\x40\x2f\x06\xba\x2c\x3b\x63\x41\x6e\x01\xa1\xb3\x64\xa0\x42\x0b\x8d\x16\x72\x2b\x5d\x5f\x57\x04\x52\xf9\x46\xa0\x17\x76\xc5\x96\xca\x92\x61\xa9\x76\xa0\x0d\x08\xaa\xc9\x3f\x97\x15\x1a\x2c\x99\x8c\x9d\x78\x27\xbe\x11\xa4\x2a\xeb\x4e\x38\x7a\x1d\x5a\xaf\x10\x2a\xff\x44\x87\x8d\x46\x23\x00\x95\x80\x16\x6d\x30\xa0\x9b\x06\x95\xf0\xea\x0e\xf1\x62\x5e\xac\x03\x5c\xb0\x54\x53\x79\xc4\xab\xea\xc3\xfb\xa0\xcb\x4a\x5b\x52\x80\x0a\x30\xc9\x06\xd8\x6e\xb7\x23\xeb\x74\x27\x3d\x2c\x21\x4b\x64\x87\x4b\x7b\x17\x0e\xd4\x48\xc5\xb7\xba\xe4\xbe\x6f\x1b\xbd\x0f\x9c\x70\xae\x7e\xb2\xe0\x7c\x3b\x52\x6b\x7f\xa8\x5c\x62\xb0\x6d\x8d\x6e\x8d\xf4\xec\xc1\x4d\x1f\xc5\x6a\x71\xbd\x98\xad\xdf\xad\xd2\x42\xb1\xe4\xc3\x27\xa9\x44\xa8\xd2\xe2\x53\x52\x25\xf7\x76\x77\x3b\x8f\x4f\xab\xcf\xb3\xfe\x69\x76\x5f\xdc\xad\xe3\xcb\x72\x7a\xb3\x58\xdd\x4d\x67\x8b\xa1\xe5\x3d\x2b\xbc\x39\x87\x34\x1f\x28\xe0\x7a\xb8\xac\x3b\xcb\xee\x70\x16\x1e\x4e\xce\x67\x5a\x29\x2a\x03\x95\x66\xa7\x47\x47\x59\xd9\x77\xfc\x07\x4c\x5a\x3f\x1f\x11\xe1\x22\x87\xd9\x75\xd1\x9f\x38\xbd\x5e\xd6\x0e\x5a\x29\x9d\x2e\x8e\xea\xb6\xf7\x94\x96\xe3\x83\x6f\xc0\x5e\xfa\x32\xa6\xff\x4e\xdb\x1c\x0a\xc5\x97\xb1\x31\xf2\xef\x70\xe0\x62\xfc\xe1\x9e\x6c\x57\xf3\x59\xe6\x0b\x1f\xc6\x71\xb3\x33\x40\x4a\xb4\x5a\x2a\xb6\x97\x60\x68\x4b\xbe\xb8\x42\x97\xae\x59\xa0\xac\x75\x27\xb0\x95\x93\xd6\x68\xdf\x31\xb5\xdc\xd3\x67\x49\xcf\x36\x87\xdf\xaf\xe3\xf3\x0d\x31\x0a\x64\x3c\xfb\x7a\x96\x48\xcc\xb4\x62\x52\x6c\x3f\xc4\xf9\x73\x91\xc3\xf5\xc9\x27\x27\x1e\x86\xb7\x33\x17\x10\x8d\x8d\x85\xaf\xef\x98\x5a\x8d\x3e\x9c\x0d\x6d\xf0\x36\x5e\xdf\x13\x8e\x95\xe4\xae\xa3\x06\x99\x49\x44\x5e\x4b\x9b\x90\xdc\xc6\x14\x87\x4b\xc1\x91\x6a\x43\xa4\xa0\x45\x63\x49\xf4\xa3\x7e\x4c\x15\x3d\xf0\x29\x70\x09\x37\x2b\xd6\x2d\xb4\xda\x4a\x57\x02\x4f\xe8\xc1\x67\x91\x56\xd2\xcb\x7f\xa9\x88\x2b\x32\x6f\x30\x38\x5c\x08\x7b\xac\xa5\xb8\x04\x7a\xa1\xb2\x63\xdc\xd4\xd4\xcf\x09\x67\x55\xda\xc5\x70\x9e\xc3\xdf\xb5\xae\x09\x55\x98\x19\x75\x9d\xd0\x3e\x5c\xc1\x84\x65\x05\x7a\xeb\x1d\x45\x90\x1e\x9b\x7b\x3e\x8a\xe6\xf0\xfb\x3a\x3d\xf8\x3a\x24\x75\x74\x9c\xe4\x53\x2a\x41\x2f\x89\xe1\x30\x3c\xb8\x22\x4b\x23\x0c\x68\x7c\xee\xa3\xcb\xc2\x69\xf9\xfe\x1d\x65\x21\x8c\x3a\x17\x3e\x26\xca\x71\x85\x70\x95\xc2\x4d\x74\xe8\x2f\xe2\x06\x9f\xc2\x60\x8a\x59\x49\x12\xe5\xfc\x1c\xdf\xa6\x5b\x26\xb3\xf2\xc6\xd3\x4c\xd9\x51\xe0\x69\xdb\xbc\x97\x81\xf7\xbf\xfb\x54\x3c\x49\x25\xf2\xef\x8c\xb7\x93\x3b\x37\x83\xb8\x77\xb5\x81\xb5\xf1\xb4\x1f\x91\x71\xf6\xac\x18\xb9\xb3\x49\x9a\x05\x6d\xd1\x35\xb2\x65\x37\x62\xe5\xd6\x2d\x62\x55\xec\x93\x27\xa5\x9f\x95\x0b\xf8\xf3\xbf\x1f\x57\xe3\xcb\xce\xa9\x46\x15\x0b\x15\x61\xcd\xd5\xc1\x69\x57\x84\x86\x37\x84\x1c\x0a\x63\xa8\x24\xb9\x27\xe1\xae\x28\x43\xbb\xae\x46\x03\x52\x31\x99\x3d\xd6\xd6\xdf\x53\x5c\x85\xfe\x8e\xe3\xd2\x99\x33\x64\x5b\xad\x84\x03\xc1\x1a\x0c\x7d\xeb\xc8\xb2\x3d\xe2\xf8\xb8\x98\x5e\xaf\x3f\xfe\x76\x82\x23\x6c\x5a\xda\x0f\x18\x69\xcb\x30\x63\x1d\x1b\x43\x07\xfd\x7a\x7f\x37\x83\x72\x98\xbc\xb0\x31\x84\x4f\x76\xe2\x0d\x54\xba\xa5\xc0\x57\xe4\xe1\xe2\xea\x01\x79\xbb\xa5\x6e\x08\x36\x58\x3e\xb9\x6b\x52\x2a\xf2\xd0\x0d\xd9\xae\x71\x8d\x0a\x11\x51\x40\x72\x04\x3a\x2f\x56\xb3\xdb\xe5\x72\x31\x5b\x2f\xe6\x6f\xb3\xe6\xb7\x52\x17\x64\x5c\x58\x29\xcd\x41\x5c\xe6\x5a\xa3\x4b\xb2\xd6\xd1\xa0\x17\x4f\xea\x71\x37\x9f\xae\x8b\xe5\xaf\x83\xe9\xbd\xfc\x8f\xec\xef\xec\x3e\xfe\xb0\x4e\xbb\x23\xb7\x61\x5b\x52\x0c\xa8\x0e\xa0\x3d\x2d\xb6\x9d\x09\xf4\x08\x5d\x11\xf6\x64\x0b\xb8\xd1\x5d\x48\xc4\x73\xe4\x8f\xe4\xb4\xce\xda\xbc\x83\xe6\x6d\xa4\x11\xce\xb3\x5b\x41\xcd\x21\x96\x33\xf8\x08\xa8\xb6\x28\x6b\x0a\xeb\x8a\x74\xf8\x9e\x5d\xd8\x08\x1b\x14\xa7\x99\xf4\xa1\x2e\x1e\x7f\x99\x16\xd7\x8b\xf9\x40\x9c\xcf\xde\xc1\x4c\xab\xad\xdc\xf9\x96\x6e\xd1\x5a\xae\x8c\xee\x76\xd5\x42\x39\x7e\x8a\x23\x2b\x7b\xa5\xe4\x9a\x3e\xd9\x60\x43\x16\xf2\x31\x55\xfc\xad\x83\x96\x3f\xf6\x8d\x7d\x63\x73\xf8\xa5\xd6\xe8\x2f\xe0\x7d\x82\x20\x1f\xe1\x39\x3b\x75\x38\xbe\xf5\x83\xeb\x76\x2a\x84\x21\x6b\xd3\x9d\x98\xf5\x13\xa9\xd1\x46\xec\xad\xf4\x6b\xb8\x57\x9c\x19\x42\xa6\xd9\x3b\x9b\x47\x06\xf0\xe0\x33\x9c\x62\xf9\x10\x1b\xab\x98\xfb\x50\x2f\xff\x5f\x9e\x2e\x86\xa7\x24\x82\xe3\xd6\x11\x97\xf1\xce\x8c\x56\x7b\x00\x5b\xe1\x5f\xfe\xf6\xf3\x5b\xd8\xa3\x05\x24\x04\xcd\xd4\xf8\xa9\x18\xbf\x7c\x7d\x23\xeb\xc5\xf6\x64\x6c\x32\xc7\xfc\x96\x54\xa1\xda\x51\xad\x77\xa3\x74\xc9\x86\x2c\x63\xd3\x26\x75\x79\xcd\xb2\x73\xb8\xff\x83\x75\xc3\xbb\x3c\xdd\x32\xfe\xe0\x3f\x8d\x1b\xb0\xa3\x18\x7f\xd0\x4d\xbf\x52\x78\x37\x4d\xf4\x99\xbf\x41\xe1\xff\x2d\xbd\xd4\xbd\x74\x8a\x60\x2f\xed\x3f\x56\xb7\xcb\x3f\x03\x62\xbc\x02\xfd\x50\xa4\xe0\x06\x48\x8f\x72\xdc\x20\x3f\xe4\xfc\x3b\xf1\x9f\x2c\x67\xae\xd4\x6f\x42\x7f\xcd\xfe\x17\x00\x00\xff\xff\x49\xd4\x16\xbb\x62\x10\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4194, mode: os.FileMode(436), modTime: time.Unix(1588115848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
