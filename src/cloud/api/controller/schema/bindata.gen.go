// Package schema Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xe3\xb8\x11\x7f\xd7\xa7\x98\x20\x0f\xb7\x01\x12\x3f\x14\xed\x3d\xe8\x4d\xb5\x7d\xb7\xea\x26\x4e\x1a\x3b\xd9\x5e\x0f\x41\x40\x8b\x63\x8b\x88\x44\x6a\xc9\x91\x13\xb7\xd8\xef\x5e\x0c\x49\xc9\x92\x9d\xf4\xb0\x05\xfa\x14\x99\x9c\x3f\xbf\xf9\x3f\xcc\x39\xac\x4a\xe5\x60\xa3\x2a\x04\x89\xae\xb0\x6a\x8d\x0e\xa8\x44\x70\x45\x89\xb5\x80\x8d\x35\xb5\xff\x9d\xdd\xe5\xe0\xd0\xee\x54\x81\x93\xe4\x3c\x39\x87\x9c\x7e\x72\xa0\x0d\x81\x92\x28\xaa\x4b\x58\xb7\x04\xaf\x08\x1a\x51\x02\x19\xa8\x85\x6e\x45\x55\xed\x61\x8b\x1a\xad\x20\x04\xda\x37\xe8\x60\x63\xac\x97\xb7\xda\x37\xb8\x2c\xac\x6a\x08\x1e\xf2\xe4\x1c\x5e\x4b\xd4\x40\x3d\x18\xe5\xa0\x6d\xa4\x20\x94\x93\x00\xb1\x10\x1a\xd6\x08\xd2\x68\x84\xf5\x1e\x6c\xab\xb5\xd2\xdb\x34\x39\x07\xd8\x5a\xd1\x94\xdf\xaa\xab\x00\xf9\xca\xeb\x09\x92\x3b\xdd\x57\xe4\xa2\x41\x93\x48\x0c\x57\x57\xa6\xa5\xa6\xa5\xee\x5c\x4e\xc8\x79\x18\xaa\x28\xe1\x55\x55\xd5\x00\x78\x89\x10\x89\x59\x76\x00\x48\xa5\xa0\x40\xb7\x46\x68\x54\xf1\x82\x12\xda\x86\xa1\x31\xf9\x43\x3e\x49\xa2\x6f\x07\xf2\x3d\xa7\x03\x57\x9a\xb6\x92\x80\x6f\xca\x11\x28\x1d\xdc\x2d\x6a\x04\xa9\x2c\x16\x64\xec\x1e\xc4\x30\x08\x3d\x66\x66\x9f\x24\x49\x0c\xcd\xbf\x13\x80\x6f\x2d\xda\x7d\x0a\x7f\xe7\x3f\x09\x40\xdd\x92\x20\x65\x74\x0a\x37\xf1\x2b\xf9\x9e\x24\x1e\xf4\x83\x43\x9b\xeb\x8d\xf1\x6c\x4a\xa6\x90\xcf\xce\x12\x00\x2d\x6a\x4c\x61\x49\x56\xe9\x2d\xff\xc6\x5a\xa8\x6a\x78\xd0\xa8\x82\x5a\x3b\xa2\x31\x76\xbb\x18\xb1\x7d\x4f\x12\xd4\x6d\x0d\x99\x25\xb5\x11\x05\x71\x6c\xbd\x1e\x80\x6c\xf5\xfc\xb0\xf8\xb2\xb8\xfd\xba\xe8\x7e\x5e\xe7\x8b\x87\x7f\x3c\x67\x37\xb3\x9f\xff\xdc\x1d\xcd\xb2\xfb\xaf\xf9\x62\x7c\x36\xbd\x5d\xac\xb2\x7c\x31\xbf\x7f\x5e\xce\x57\xcf\xbf\x65\x37\xd7\xcb\xf7\xaf\x86\xf2\x7a\x20\x2d\x99\xc2\xd4\x4d\x85\x84\x59\xc1\x7e\xe8\x21\x65\x23\x44\xe7\x90\x69\x40\xa9\x08\x84\x27\x03\x53\x14\xad\x75\xa0\x36\x20\xa0\x75\x68\xa1\x14\x0e\x6a\x23\xd5\x46\x71\x5e\x97\x08\x4a\xfb\x44\xc0\x37\xe2\x60\x2b\xed\xd0\x92\xd2\x5b\x30\x16\x24\x56\xe8\xbf\x8b\x52\x58\x51\x10\x5a\x37\xf1\x4a\x7c\x22\x28\x5d\x54\xad\xe4\xf2\xda\x37\x9e\x21\x44\xfe\x05\xf7\x6b\x23\xac\x04\xa1\x25\x34\xc2\x05\x01\xa6\xae\x85\x96\x9e\x9d\x11\xcf\x67\xf9\x2a\xc0\x05\x87\x15\x16\x07\xbc\xba\xda\xbf\x0f\xba\x28\x8d\x43\x0d\x42\x83\x18\x78\x03\x5c\xbb\xdd\xa2\x63\xde\x49\x07\x4b\xaa\x42\x10\xe3\x32\x5e\x05\x83\x1a\xb1\xf8\x54\x57\xd4\xe5\x6d\x6d\x76\xa1\x26\x58\xd5\x4f\x0e\x58\x37\x17\xb5\xf1\x87\x9a\x1d\x23\x9a\xc6\x9a\xc6\x2a\x5f\x3d\x62\xdd\x59\xb1\x9c\x5f\xcf\xa7\xab\x77\xa3\x34\xd7\xa4\x68\xff\x45\x69\x19\xa2\x34\xff\x32\x88\x12\xff\xba\xbb\x9d\xc5\xaf\xe5\xe3\xb4\xfb\x9a\xde\xe7\x77\xab\xf8\x63\x91\xdd\xcc\x97\x77\xd9\x74\xde\xa7\xfc\x0c\x9b\xca\xec\x6b\xd4\xf4\x05\xf7\x47\x79\xff\x82\xfb\x61\x4a\x17\x16\xb9\xd7\x64\x74\xe3\x52\xf8\xa5\x32\x82\xf8\x94\x3b\xe2\x28\xcb\xbd\x58\x5f\x6c\x5e\x1c\x3b\x20\xed\x2b\xeb\x2c\x84\xfa\x76\x76\xfb\x89\x93\xc2\x2a\x6d\x2e\x52\xb8\x11\x2f\x08\xf9\x0c\x2c\x7e\x6b\x95\x45\x09\x46\x17\xdc\x1f\xbc\x1b\x1d\x98\x1d\x7a\xd7\xd5\x6d\x45\xea\xaa\xa8\x5a\x47\x68\xc1\xb5\x4d\x63\x2c\xb1\xdf\xe2\xd1\xa7\x00\xfd\x22\x85\x69\x38\xe8\x34\xc6\x7b\x97\xc2\xef\xc3\x9b\xa7\xff\x2b\x9a\xa9\xd1\x1a\x7d\x02\x9e\xe0\x3a\x5c\x1d\x10\xaa\xae\x31\x7c\x12\x83\x0e\x91\x8e\xfa\x05\x4b\xb8\xce\xbb\x13\xe6\xeb\x68\x5d\xcf\x35\xec\x3a\x17\x07\x76\xd7\x69\x1a\x66\xed\x27\x5f\xa7\x1d\xf5\x65\xcc\xd2\x3b\xe3\x52\xc8\x35\x5d\xc6\xfa\x49\x3f\x68\x15\x17\xe3\x8b\x7b\x74\x6d\x45\xc7\x2a\x7e\x51\x58\xc9\x63\x3d\x1b\x3e\x8c\xe6\xbd\x9b\xdf\x97\xbe\x8d\x75\x01\xc8\xec\x96\x89\x39\x7c\xef\x93\x3f\x5d\xa4\xa3\x9b\x65\x5f\xbf\x4f\x89\x0f\x71\x18\xa2\xf5\xd6\x02\x6a\xd9\x18\xa5\xc9\x5d\x82\xc5\x4d\x88\xa4\x34\x05\x97\x38\x14\x95\x69\xa5\x68\xd4\xa4\xb1\xc6\xd7\x79\xa5\x76\xf8\xa8\xf0\x95\x35\x5f\xc7\xef\x1b\x24\x21\x05\x89\x90\x3d\x1d\xc5\xd4\x68\x42\x4d\x2e\x86\xfa\xec\x22\x85\xeb\xa3\x2b\x26\x0f\x23\x97\xc5\x05\x44\x63\x61\xe1\xf6\x1d\x51\xcb\xd1\xc5\x59\xb0\x29\x54\x2e\x17\xa9\xf3\x65\x38\xa8\x63\x56\x30\x2a\xec\x20\x7f\x44\x33\x10\x3f\x26\xed\x6b\xf8\x34\xb8\xbe\xa0\xb9\x53\x23\xaf\x28\xb5\x20\x42\x19\x7b\xbd\x72\x83\xc6\xef\x62\x9c\xc3\xa2\xc0\x8d\x76\x8d\xa8\xa1\x11\xd6\xa1\xec\xc6\xff\xb8\x7d\x9a\xbe\xc7\x86\xfe\x2a\xd6\x4b\x32\x0d\x34\xc6\x29\x8e\xa3\x6f\xf2\xbd\xce\x7c\x98\x4e\x9e\xfe\x6b\x89\x54\xa2\x3d\xc1\xc0\xb8\x04\xec\x44\xa5\xe4\x25\xe0\x1b\x16\x2d\x89\x75\x85\xdd\xec\x60\xa9\xca\xcd\xfb\xf3\x14\xfe\x6a\x4c\x85\x42\x87\x39\x52\x55\x83\x51\x10\xd6\x32\x14\x45\x09\x66\xe3\x15\x45\x90\x1e\x1b\x7f\x1f\x48\x53\xf8\x7d\x35\x3c\x78\xea\x9d\x3a\x3a\x1e\xf8\x53\x69\x89\x6f\x03\xc1\x61\xa0\x50\x89\x0e\x47\x18\x84\xf5\xbe\x8f\x2a\x73\xe6\xf2\xc5\x3a\xf2\x42\x18\x7f\x6c\xbe\x18\x30\xc7\xb5\x92\x23\x25\xd6\x51\xa1\x5f\xce\x6a\x6e\x78\xac\x37\x7a\x65\xe0\x28\xd6\x73\xf8\x95\x6d\x08\xed\xd2\x0b\x1f\x7a\xca\x8d\x0c\xff\xa8\x10\xdf\x4b\xab\x23\x57\xbc\x28\x2d\x3f\x6a\x09\x47\x7b\x58\x9c\x3c\x5c\x17\xbe\x45\xf5\xa7\xb5\xa0\xa2\xe4\x14\x91\xf8\xe6\x5b\x46\xae\xe9\xa9\x1f\xa7\xb1\x01\x2f\x49\x50\xeb\x06\xee\x97\xb8\x11\x9c\xe0\x8e\x78\x1c\xab\x0d\x2f\xed\x65\xcc\x9f\x17\x6d\x5e\x35\x3b\xe2\xf1\x9f\xcf\xcb\xf1\x62\xc4\xac\x91\xc5\x41\x89\xa2\xa2\x72\xcf\xdc\x25\x0a\x4b\x6b\x14\x14\x02\x66\xb1\x40\xb5\xf3\x93\x04\x2c\x6e\xdb\x4a\x58\x50\x9a\xd0\xee\x44\xe5\xfc\x4e\x43\x65\xc8\xfb\x6e\x9c\x28\x07\x16\x5d\x63\xb4\x64\x10\x64\x7c\x2f\x44\x47\xee\x80\xe3\xf3\x3c\xbb\x5e\x7d\xfe\xed\x08\x47\xd8\xca\x8d\x6f\x6b\xca\x15\x61\xd0\x70\x95\x86\xcc\xfa\xf5\xfe\x6e\x0a\x45\x3f\x7e\x60\x6d\x51\xbc\xb8\x89\x17\x50\x9a\x06\x43\x1d\x0b\xea\x97\x9c\x0e\x90\x97\x5b\x98\x1a\x61\x2d\x8a\x17\x5e\xa9\x94\x46\x0f\xdd\xa2\x6b\x6b\x4e\x60\x88\x88\x02\x92\x03\xd0\x59\xbe\x9c\xde\x2e\x16\xf3\xe9\x6a\x3e\x3b\xf5\x9a\x7f\xc1\xb0\x91\xf1\x71\x83\x43\x1f\xc4\xc5\xbf\xb1\xa6\x40\xe7\xb8\x3c\x3a\xf2\x41\x3c\xee\x66\xd9\x2a\x5f\xfc\xda\x8b\xde\xa9\x7f\xa9\x6e\xbf\xeb\xec\x0f\x4f\x2f\x3e\xe2\xd7\x98\x43\x4d\x20\xf4\x1e\x8c\x2f\x97\x4d\x6b\x43\xd9\x84\xac\x08\x6f\x2a\x07\x62\x6d\xda\xe0\x88\xd7\x58\x57\x8a\x86\x71\x36\xf6\x1d\x34\xa7\x96\x46\x38\xaf\xfc\x5c\xb1\xfb\x18\xce\xa0\x23\xa0\xda\x08\x55\x61\x58\x6d\x15\xe3\x7b\x65\xb3\x05\xac\x85\x3c\xf6\xa4\x37\x75\xfe\xfc\x4b\x96\x5f\xcf\x67\x7d\x41\x3d\x7a\x05\x53\xa3\x37\x6a\xeb\x53\xba\x11\xce\x51\x69\x4d\xbb\x2d\xe7\x9a\xeb\x56\x1e\xaa\xb5\x63\x1a\xec\x41\x47\x5b\x5f\xf0\x42\x3a\x2e\x15\x3f\xeb\x84\xa3\xcf\x5d\x62\x8f\x76\xc0\xdd\x00\x41\x3a\xc2\x73\xb8\x7d\x44\xeb\xc6\x95\x1a\xe3\xfc\xe1\xc5\x62\x5c\xee\xf1\xf4\x21\x9f\xf5\x87\x47\xc6\x8c\xd7\xaa\x60\x56\x93\x49\x69\xd1\xb9\xe1\x22\x4b\xe6\x05\xf5\xe9\xce\xda\x3d\x07\x3d\xe3\xd4\x2f\xbb\x51\xf0\x68\xa1\x4c\x00\x1e\x7c\xf4\x86\x76\x7e\x8a\xe8\x18\x5c\x3e\x3b\xbb\xfc\x6f\x31\xb8\xe8\xbf\xce\x7a\x45\xa3\x11\x7c\x32\x91\x01\x66\xfc\x6a\x1a\x53\x0d\x06\x78\x2f\xae\x77\xc8\x61\x4b\x8c\x6f\xcc\xd6\x8e\x5e\xac\x00\xae\x14\x7f\xfa\xcb\xcf\xa7\x5e\x18\x2d\x8c\xc1\x87\x84\xb5\x6f\xec\xf1\xe6\xe9\x84\xd6\x93\xed\xc6\x71\xf4\x5b\x6d\x29\xf4\x16\x2b\xb3\x1d\x79\x5f\xd5\xe8\x48\xd4\xcd\x20\x85\xbe\x27\xc9\x39\xdc\xff\xc1\x3e\xe6\x55\x1e\xaf\x61\x7f\xf0\x54\x3f\x79\x9d\xfc\xa0\x9a\x6e\xe7\xf2\x6a\xea\xa8\x33\x3d\x41\xe1\xff\x09\xf0\x56\x75\xd4\x43\x04\x3b\xe5\xfe\xb6\xbc\x5d\xfc\x2f\x20\xc6\x3b\xe2\x0f\x59\x0a\xdc\xeb\x3a\x94\xe3\x04\xf9\x21\xe5\x1f\xd8\x7f\xb4\xbd\x72\xa8\x4f\x4c\xff\x9e\xfc\x27\x00\x00\xff\xff\x82\x8b\x9b\x03\x39\x13\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4921, mode: os.FileMode(436), modTime: time.Unix(1591311461, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
