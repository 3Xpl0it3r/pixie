// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x8f\xdb\x36\x10\x85\xef\xfc\x15\x2f\xf0\xa1\x97\xda\x3f\x40\xb7\x85\x76\xdb\x35\xda\x38\x69\xed\x6d\xd1\x5e\x02\x8a\x1c\x5b\x84\x29\x52\xcb\x19\xae\x6b\x14\xfb\xdf\x0b\x52\xb2\xe3\xb8\x39\x49\xa2\xe6\xbd\xf9\x38\xf3\x16\xd8\xf5\x8e\xb1\x77\x9e\x60\x89\x4d\x72\x1d\x31\xa4\x27\xb0\xe9\x69\xd0\xd8\xa7\x38\xd4\xef\x87\xcf\x6b\x30\xa5\x37\x67\x68\xa5\x16\x6a\x81\xb5\xfc\xc0\x08\x51\xe0\x2c\x69\xff\x23\xba\x2c\x38\x11\x02\x91\x85\x44\x0c\x3a\x64\xed\xfd\x19\x07\x0a\x94\xb4\x10\xe4\x3c\x12\x63\x1f\x53\xf5\xdb\x9d\x47\xda\x9a\xe4\x46\xc1\xcb\x5a\x2d\x70\xea\x29\x40\xae\x30\x8e\x91\x47\xab\x85\xec\x6a\x42\x34\x3a\xa0\x23\xd8\x18\x08\xdd\x19\x29\x87\xe0\xc2\xa1\x51\x0b\xe0\x90\xf4\xd8\xbf\xfa\xe5\x84\xbc\xac\x7d\x26\xe7\x4b\xef\xa5\xf0\x7c\xa1\xd5\x5c\x8c\xe5\x32\x66\x19\xb3\x5c\xce\xed\x4a\xb8\x62\x38\xd3\xe3\xe4\xbc\xbf\x01\xef\x09\x73\x71\xf1\x9e\x00\xa5\xd7\x32\xd5\x75\x84\xd1\x99\x23\x59\xe4\xb1\xa0\x95\xf2\x97\xf5\x4a\xcd\xb3\xbd\xf1\xaf\x4a\x06\xf7\x31\x7b\x0b\xfa\xc7\xb1\xc0\x85\x69\xdc\x7a\x20\x58\x97\xc8\x48\x4c\x67\xe8\xdb\x25\x5c\x99\x8b\x7c\xa5\xd4\xbc\x9a\x7f\x15\xf0\x9a\x29\x9d\x1b\xfc\x56\x1e\x0a\x18\xb2\x68\x71\x31\x34\xf8\x38\xbf\xa9\x77\xa5\x2a\xf4\x0b\x53\x5a\x87\x7d\xac\x32\x67\x1b\xac\x1f\x3f\x28\x20\xe8\x81\x1a\x6c\x25\xb9\x70\x28\xdf\x34\x68\xe7\x6f\x0f\x46\x67\x24\xa7\x9b\x9a\x8b\x61\xed\x59\xdd\x32\x53\x6a\xae\x0d\x8a\xc8\xf8\xcc\x52\x0e\xdb\xe9\xe5\xee\xbc\x8d\x21\x90\x99\x40\xdb\xfb\xa3\xa9\xf6\x5d\x29\x0a\x79\xb8\xfc\xde\x8a\x96\xcc\xb5\x5b\x19\x6b\x09\xeb\x5e\x67\x2f\x60\x29\x1b\x72\xfb\x92\xc4\xde\x85\x43\x09\xce\x31\xc4\x53\x58\x29\xe0\x8f\xbf\xbf\x6c\x77\x5f\x5e\x36\xbf\x6c\x3e\xfd\xb9\xb9\x4a\x67\x09\xa3\x27\xed\xa5\x3f\x17\x75\x4f\x3a\x49\x47\x5a\x18\x3a\x11\x12\x19\x72\x6f\x64\x11\x03\x12\x1d\xb2\xd7\x09\x2e\x08\xa5\x37\xed\x19\x3a\xd8\xb2\x9d\x6a\x38\xdf\xa8\xd8\x25\xe2\x31\x06\x5b\x20\x24\x22\xd1\x6b\x26\x16\xfe\xca\xf1\xfc\xf4\xf0\xeb\xee\xf9\xaf\x3b\x8e\x29\x6a\xb1\x48\xac\x63\x33\x8d\x81\x6c\x81\x2a\x09\xf8\xf9\xf7\xcf\x2d\xcc\x75\x38\xe8\x12\xe9\x23\xaf\xaa\x41\x1f\xc7\x7a\x8f\x12\xc5\xea\x5a\x04\x17\xa0\xea\x6b\xe2\x40\xe8\xb4\x39\x22\x06\xef\x02\x55\xf4\x44\x9c\x07\x2a\xc1\x9b\x89\x26\x92\xaf\xa0\x8f\xeb\x6d\xfb\x69\xb3\x79\x6a\x77\x4f\x8f\xd7\x75\xdf\x6c\xf2\x2e\x42\x5c\x77\xd3\x7c\xbb\xaa\xf2\xc3\x6b\x96\xe7\xcb\x60\x3f\x72\x83\x9f\x7c\xd4\xf2\xe1\xde\xf2\xdb\xd5\x4f\xe6\xe3\x83\xb5\x89\x98\x6f\x93\x28\xf1\x48\xe1\xff\x39\xbc\x24\xbd\x0a\xdb\x44\x5a\xa8\xfd\x4e\xfc\xd4\xbb\xfa\x2f\x00\x00\xff\xff\x31\xaa\x7c\x6f\xed\x04\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 1261, mode: os.FileMode(436), modTime: time.Unix(1566858487, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

