// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x4b\x6f\xe3\xc8\x11\xbe\xf3\x57\x94\xe1\xc3\x8e\x01\x5b\x87\x20\xd9\x03\x6f\x8a\xa4\xdd\x61\xc6\x96\x1d\x4b\xf6\x64\xb3\x18\x18\x25\x76\x49\x6c\x98\xec\xe6\x74\x17\x65\x2b\xc1\xfc\xf7\xa0\x1f\xa4\x9a\xb2\x27\x8b\xd9\x93\xc8\x66\x3d\xbe\x7a\x7c\xd5\xa5\x73\x58\x57\xd2\xc2\x56\xd6\x04\x82\x6c\x69\xe4\x86\x2c\x70\x45\x60\xcb\x8a\x1a\x84\xad\xd1\x8d\x7f\x9f\xde\x15\x60\xc9\xec\x65\x49\x93\xec\x3c\x3b\x87\x82\x7f\xb2\xa0\x34\x83\x14\x84\xf5\x25\x6c\x3a\x86\x17\x02\x45\x24\x80\x35\x34\xa8\x3a\xac\xeb\x03\xec\x48\x91\x41\x26\xe0\x43\x4b\x16\xb6\xda\x78\x7b\xeb\x43\x4b\xab\xd2\xc8\x96\xe1\xa1\xc8\xce\xe1\xa5\x22\x05\x3c\x80\x91\x16\xba\x56\x20\x93\x98\x04\x88\x25\x2a\xd8\x10\x08\xad\x08\x36\x07\x30\x9d\x52\x52\xed\xf2\xec\x1c\x60\x67\xb0\xad\xbe\xd6\x57\x01\xf2\x95\xf7\x13\x2c\xf7\xbe\xaf\xd8\xc6\x80\x26\x51\x18\xae\xae\x74\xc7\x6d\xc7\xfd\xb9\x98\xb0\xf5\x30\x64\x59\xc1\x8b\xac\xeb\x04\x78\x45\x10\x85\x9d\xed\x00\x90\x2b\xe4\x20\xb7\x21\x68\x65\xf9\x4c\x02\xba\xd6\x41\x73\xe2\x0f\xc5\x24\x8b\xb9\x4d\xec\x7b\x4d\x0b\xb6\xd2\x5d\x2d\x80\x5e\xa5\x65\x90\x2a\xa4\x1b\x1b\x02\x21\x0d\x95\xac\xcd\x01\x30\x2d\xc2\x80\xd9\xa9\x4f\xb2\x2c\x96\xe6\xbf\x19\xc0\xd7\x8e\xcc\x21\x87\x7f\xba\x9f\x0c\xa0\xe9\x18\x59\x6a\x95\xc3\x4d\x7c\xca\xbe\x65\x99\x07\xfd\x60\xc9\x14\x6a\xab\xbd\x9a\x14\x39\x14\xf3\xb3\x0c\x40\x61\x43\x39\xac\xd8\x48\xb5\x73\xef\xd4\xa0\xac\xd3\x83\x56\x96\xdc\x99\x91\x8c\x36\xbb\xe5\x48\xed\x5b\x96\x91\xea\x1a\x98\x1a\x96\x5b\x2c\xd9\xd5\xd6\xfb\x01\x98\xae\x9f\x1e\x96\x9f\x96\xb7\x9f\x97\xfd\xeb\x75\xb1\x7c\xf8\xd7\xd3\xf4\x66\xfe\xf3\x5f\xfb\xa3\xf9\xf4\xfe\x73\xb1\x1c\x9f\xcd\x6e\x97\xeb\x69\xb1\x5c\xdc\x3f\xad\x16\xeb\xa7\xdf\xa6\x37\xd7\xab\xf7\x3f\xa5\xf6\x06\x20\x1d\xeb\x52\x37\x6d\x4d\x4c\xd3\xd2\xe5\x61\x80\x34\x1d\x21\x3a\x87\xa9\x02\x12\x92\x01\xbd\x18\xe8\xb2\xec\x8c\x05\xb9\x05\x84\xce\x92\x81\x0a\x2d\x34\x5a\xc8\xad\x74\x7d\x5d\x11\x48\xe5\x1b\x81\x5e\xd9\x15\x5b\x2a\x4b\x86\xa5\xda\x81\x36\x20\xa8\x26\xff\x5c\x56\x68\xb0\x64\x32\x76\xe2\x9d\xf8\x46\x90\xaa\xac\x3b\xe1\xe8\x75\x68\xbd\x42\xa8\xfc\x33\x1d\x36\x1a\x8d\x00\x54\x02\x5a\xb4\xc1\x80\x6e\x1a\x54\xc2\xab\x3b\xc4\x8b\x79\xb1\x0e\x70\xc1\x52\x4d\xe5\x11\xaf\xaa\x0f\xef\x83\x2e\x2b\x6d\x49\x01\x2a\xc0\x24\x1b\x60\xbb\xdd\x8e\xac\xd3\x9d\xf4\xb0\x84\x2c\x91\x1d\x2e\xed\x5d\x38\x50\x23\x15\xdf\xea\x92\xfb\xbe\x6d\xf4\x3e\x70\xc2\xb9\xfa\xc9\x82\xf3\xed\x48\xad\xfd\xa1\x72\x89\xc1\xb6\x35\xba\x35\xd2\xb3\x07\x37\x7d\x14\xab\xc5\xf5\x62\xb6\x7e\xb7\x4a\x0b\xc5\x92\x0f\x9f\xa4\x12\xa1\x4a\x8b\x4f\x49\x95\xdc\xdb\xdd\xed\x3c\x3e\xad\x1e\x67\xfd\xd3\xec\xbe\xb8\x5b\xc7\x97\xe5\xf4\x66\xb1\xba\x9b\xce\x16\x43\xcb\x7b\x56\x78\x73\x0e\x69\x3e\x50\xc0\xf5\x70\x59\x77\x96\xdd\xe1\x2c\x3c\x9c\x9c\xcf\xb4\x52\x54\x06\x2a\xcd\x4e\x8f\x8e\xb2\xb2\xef\xf8\x0f\x98\xb4\x7e\x3e\x22\xc2\x45\x0e\xb3\xeb\xa2\x3f\x71\x7a\xbd\xac\x1d\xb4\x52\x3a\x5d\x1c\xd5\x6d\xef\x29\x2d\xc7\x07\xdf\x80\xbd\xf4\x65\x4c\xff\x9d\xb6\x39\x14\x8a\x2f\x63\x63\xe4\xdf\xe1\xc0\xc5\xf8\xc3\x3d\xd9\xae\xe6\xb3\xcc\x17\x3e\x8c\xe3\x66\x67\x80\x94\x68\xb5\x54\x6c\x2f\xc1\xd0\x96\x7c\x71\x85\x2e\x5d\xb3\x40\x59\xeb\x4e\x60\x2b\x27\xad\xd1\xbe\x63\x6a\xb9\xa7\x47\x49\x2f\x36\x87\xdf\xaf\xe3\xf3\x0d\x31\x0a\x64\x3c\xfb\x72\x96\x48\xcc\xb4\x62\x52\x6c\x3f\xc4\xf9\x73\x91\xc3\xf5\xc9\x27\x27\x1e\x86\xb7\x33\x17\x10\x8d\x8d\x85\xaf\xef\x98\x5a\x8d\x3e\x9c\x0d\x6d\xf0\x36\x5e\xdf\x13\x8e\x95\xe4\xae\xa3\x06\x99\x49\x44\x5e\x4b\x9b\x90\xdc\xc6\x14\x87\x4b\xc1\x91\x6a\x43\xa4\xa0\x45\x63\x49\xf4\xa3\x7e\x4c\x15\x3d\xf0\x29\x70\x09\x37\x2b\xd6\x2d\xb4\xda\x4a\x57\x02\x4f\xe8\xc1\x67\x91\x56\xd2\xcb\x7f\xae\x88\x2b\x32\x6f\x30\x38\x5c\x08\x7b\xac\xa5\xb8\x04\x7a\xa5\xb2\x63\xdc\xd4\xd4\xcf\x09\x67\x55\xda\xc5\x70\x9e\xc3\xdf\xb5\xae\x09\x55\x98\x19\x75\x9d\xd0\x3e\x5c\xc1\x84\x65\x05\x7a\xeb\x1d\x45\x90\x1e\x9b\x7b\x3e\x8a\xe6\xf0\xfb\x3a\x3d\xf8\x32\x24\x75\x74\x9c\xe4\x53\x2a\x41\xaf\x89\xe1\x30\x3c\xb8\x22\x4b\x23\x0c\x68\x7c\xee\xa3\xcb\xc2\x69\xf9\xfe\x1d\x65\x21\x8c\x3a\x17\x3e\x26\xca\x71\x85\x70\x95\xc2\x4d\x74\xe8\x2f\xe2\x06\x9f\xc3\x60\x8a\x59\x49\x12\xe5\xfc\x1c\xdf\xa6\x5b\x26\xb3\xf2\xc6\xd3\x4c\xd9\x51\xe0\x69\xdb\xbc\x97\x81\xf7\xbf\xfb\x54\x3c\x4b\x25\xf2\xef\x8c\xb7\x93\x3b\x37\x83\xb8\x77\xb5\x81\xb5\xf1\xb4\x1f\x91\x71\xf6\xac\x18\xb9\xb3\x49\x9a\x05\x6d\xd1\x35\xb2\x65\x37\x62\xe5\xd6\x2d\x62\x55\xec\x93\x67\xa5\x5f\x94\x0b\xf8\xf1\xdf\x4f\xab\xf1\x65\xe7\x54\xa3\x8a\x85\x8a\xb0\xe6\xea\xe0\xb4\x2b\x42\xc3\x1b\x42\x0e\x85\x31\x54\x92\xdc\x93\x70\x57\x94\xa1\x5d\x57\xa3\x01\xa9\x98\xcc\x1e\x6b\xeb\xef\x29\xae\x42\x7f\xc7\x71\xe9\xcc\x19\xb2\xad\x56\xc2\x81\x60\x0d\x86\xbe\x76\x64\xd9\x1e\x71\x7c\x5c\x4c\xaf\xd7\x1f\x7f\x3b\xc1\x11\x36\x2d\xed\x07\x8c\xb4\x65\x98\xb1\x8e\x8d\xa1\x83\x7e\xbd\xbf\x9b\x41\x39\x4c\x5e\xd8\x18\xc2\x67\x3b\xf1\x06\x2a\xdd\x52\xe0\x2b\xf2\x70\x71\xf5\x80\xbc\xdd\x52\x37\x04\x1b\x2c\x9f\xdd\x35\x29\x15\x79\xe8\x86\x6c\xd7\xb8\x46\x85\x88\x28\x20\x39\x02\x9d\x17\xab\xd9\xed\x72\xb9\x98\xad\x17\xf3\xb7\x59\xf3\x5b\xa9\x0b\x32\x2e\xac\x94\xe6\x20\x2e\x73\xad\xd1\x25\x59\xeb\x68\xd0\x8b\x27\xf5\xb8\x9b\x4f\xd7\xc5\xf2\xd7\xc1\xf4\x5e\xfe\x47\xf6\x77\x76\x1f\x7f\x58\xa7\xdd\x91\xdb\xb0\x2d\x29\x06\x54\x07\xd0\x9e\x16\xdb\xce\x04\x7a\x84\xae\x08\x7b\xb2\x05\xdc\xe8\x2e\x24\xe2\x25\xf2\x47\x72\x5a\x67\x6d\xde\x41\xf3\x36\xd2\x08\xe7\xc5\xad\xa0\xe6\x10\xcb\x19\x7c\x04\x54\x5b\x94\x35\x85\x75\x45\x3a\x7c\x2f\x2e\x6c\x84\x0d\x8a\xd3\x4c\xfa\x50\x17\x4f\xbf\x4c\x8b\xeb\xc5\x7c\x20\xce\xa3\x77\x30\xd3\x6a\x2b\x77\xbe\xa5\x5b\xb4\x96\x2b\xa3\xbb\x5d\xb5\x50\x8e\x9f\xe2\xc8\xca\x5e\x29\xb9\xa6\x4f\x36\xd8\x90\x85\x7c\x4c\x15\x7f\xeb\xa0\xe5\x8f\x7d\x63\xdf\xd8\x1c\x7e\xa9\x35\xfa\x0b\x78\x9f\x20\xc8\x47\x78\x8e\x5f\x1f\xc9\xd8\x94\x91\xc3\x6a\xf0\xdd\x0f\xcb\x31\xad\xe3\xe9\x43\x31\x4f\x59\x9d\x06\x33\xde\x28\x42\x58\xed\x54\x08\x43\xd6\xa6\xfb\x36\xeb\x67\x52\xa3\x6d\xdb\x5b\xe9\x57\x7c\xaf\x38\x33\x84\x4c\xb3\x77\xb6\x9a\x0c\xe0\xc1\x57\x2f\x8d\xf3\x43\x44\xe7\xc0\x15\xf3\xb3\xcb\xff\x57\x83\x8b\xe1\xe9\xe8\x3b\xd9\x68\xe2\xa2\xdf\x99\xd1\xdf\x06\x00\x5b\xe1\x5f\xfe\xf6\xf3\x5b\xd8\xa3\xe5\x26\x04\xcd\xd4\xf8\x89\x1b\xbf\x7c\x79\x23\xeb\xc5\xf6\xe3\xc4\xfb\x0d\xac\x42\xb5\xa3\x5a\xef\x46\xe9\x92\x0d\x59\xc6\xa6\x4d\x6a\xfe\x2d\xcb\xce\xe1\xfe\x0f\x56\x19\xef\xf2\x74\x83\xf9\x83\xff\x4b\x6e\x78\x8f\x62\xfc\x41\x37\xfd\xba\xe2\xdd\x34\xd1\x67\xfe\x06\x85\xff\x27\xf6\x5a\xf7\xd2\x29\x82\xbd\xb4\xff\x58\xdd\x2e\xff\x0c\x88\xf1\x7a\xf5\x43\x91\x82\x1b\x4e\x3d\xca\x71\x83\xfc\x90\xf3\xef\xc4\x7f\xb2\xf8\xb9\x52\xbf\x09\xfd\x5b\xf6\xbf\x00\x00\x00\xff\xff\x65\x1f\x61\x3a\xbe\x10\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4286, mode: os.FileMode(436), modTime: time.Unix(1588131999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
