// Package schema Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x51\x73\xe3\xb8\x0d\x7e\xd7\xaf\x40\x2e\x0f\x97\xcc\x24\x79\xe8\xb4\xf7\xe0\xa7\xba\xb6\xef\x56\xdd\xc4\x49\x63\x67\xb7\xd7\x9b\x4c\x86\x16\x61\x8b\x13\x89\xd4\x92\x90\x13\xb7\xb3\xff\xbd\x03\x92\x92\x45\xdb\xdb\x9b\xbd\x99\x3e\xc5\x22\x41\xe0\x23\x80\x0f\x00\x73\x0e\xcb\x52\x39\x58\xab\x0a\x41\xa2\x2b\xac\x5a\xa1\x03\x2a\x11\x5c\x51\x62\x2d\x60\x6d\x4d\xed\xbf\xc7\x0f\x39\x38\xb4\x5b\x55\xe0\x4d\x76\x9e\x9d\x43\x4e\x3f\x3a\xd0\x86\x40\x49\x14\xd5\x15\xac\x5a\x82\x37\x04\x8d\x28\x81\x0c\xd4\x42\xb7\xa2\xaa\x76\xb0\x41\x8d\x56\x10\x02\xed\x1a\x74\xb0\x36\xd6\xeb\x5b\xee\x1a\x5c\x14\x56\x35\x04\x4f\x79\x76\x0e\x6f\x25\x6a\xa0\x1e\x8c\x72\xd0\x36\x52\x10\xca\x9b\x00\xb1\x10\x1a\x56\x08\xd2\x68\x84\xd5\x0e\x6c\xab\xb5\xd2\x9b\x51\x76\x0e\xb0\xb1\xa2\x29\xbf\x54\xd7\x01\xf2\xb5\xb7\x13\x34\x77\xb6\xaf\xc9\xc5\x0b\xdd\x44\x61\xb8\xbe\x36\x2d\x35\x2d\x75\xeb\xf2\x86\x9c\x87\xa1\x8a\x12\xde\x54\x55\x0d\x80\x97\x08\x51\x98\x75\x07\x80\x54\x0a\x0a\x72\x2b\x84\x46\x15\xaf\x28\xa1\x6d\x18\x1a\x8b\x3f\xe5\x37\x59\xf4\xed\x40\xbf\x3f\xe9\xc0\x95\xa6\xad\x24\xe0\xbb\x72\x04\x4a\x07\x77\x8b\x1a\x41\x2a\x8b\x05\x19\xbb\x03\x31\x0c\x42\x8f\x99\x8f\xdf\x64\x59\x0c\xcd\x7f\x32\x80\x2f\x2d\xda\xdd\x08\xfe\xc1\x7f\x32\x80\xba\x25\x41\xca\xe8\x11\xdc\xc5\x5f\xd9\xd7\x2c\xf3\xa0\x9f\x1c\xda\x5c\xaf\x8d\x3f\xa6\xe4\x08\xf2\xe9\x59\x06\xa0\x45\x8d\x23\x58\x90\x55\x7a\xc3\xdf\x58\x0b\x55\x0d\x17\x1a\x55\x50\x6b\x13\x19\x63\x37\xf3\xe4\xd8\xd7\x2c\x43\xdd\xd6\x30\xb6\xa4\xd6\xa2\x20\x8e\xad\xb7\x03\x30\x5e\xbe\x3c\xcd\x3f\xce\xef\x3f\xcf\xbb\xcf\xdb\x7c\xfe\xf4\xcf\x97\xf1\xdd\xf4\xa7\x3f\x77\x4b\xd3\xf1\xe3\xe7\x7c\x9e\xae\x4d\xee\xe7\xcb\x71\x3e\x9f\x3d\xbe\x2c\x66\xcb\x97\x5f\xc7\x77\xb7\x8b\xd3\x5b\x43\x7d\x3d\x90\x96\x4c\x61\xea\xa6\x42\xc2\x71\xc1\x7e\xe8\x21\x8d\x13\x44\xe7\x30\xd6\x80\x52\x11\x08\x2f\x06\xa6\x28\x5a\xeb\x40\xad\x41\x40\xeb\xd0\x42\x29\x1c\xd4\x46\xaa\xb5\xe2\xbc\x2e\x11\x94\xf6\x89\x80\xef\xc4\xc1\x56\xda\xa1\x25\xa5\x37\x60\x2c\x48\xac\xd0\xff\x2e\x4a\x61\x45\x41\x68\xdd\x8d\x37\xe2\x13\x41\xe9\xa2\x6a\x25\xd3\x6b\xd7\xf8\x03\x21\xf2\xaf\xb8\x5b\x19\x61\x25\x08\x2d\xa1\x11\x2e\x28\x30\x75\x2d\xb4\xf4\xc7\x19\xf1\x6c\x9a\x2f\x03\x5c\x70\x58\x61\xb1\xc7\xab\xab\xdd\x69\xd0\x45\x69\x1c\x6a\x10\x1a\xc4\xc0\x1b\xe0\xda\xcd\x06\x1d\x9f\xbd\xe9\x60\x49\x55\x08\x62\x5c\xc6\x9b\x60\x50\xc9\x11\x9f\xea\x8a\xba\xbc\xad\xcd\x36\x70\x82\x4d\xfd\xe8\x80\x6d\x33\xa9\x8d\x5f\xd4\xec\x18\xd1\x34\xd6\x34\x56\x79\xf6\x88\x55\x77\x8b\xc5\xec\x76\x36\x59\x9e\x8c\xd2\x4c\x93\xa2\xdd\x47\xa5\x65\x88\xd2\xec\xe3\x20\x4a\xfc\xf5\x70\x3f\x8d\xbf\x16\x9f\x26\xdd\xaf\xc9\x63\xfe\xb0\x8c\x1f\xf3\xf1\xdd\x6c\xf1\x30\x9e\xcc\xfa\x94\x9f\x62\x53\x99\x5d\x8d\x9a\x3e\xe2\xee\x20\xef\x5f\x71\x37\x4c\xe9\xc2\x22\xd7\x9a\x31\xdd\xb9\x11\xfc\x5c\x19\x41\xbc\xca\x15\x31\xc9\x72\xaf\xd6\x93\xcd\xab\x63\x07\x8c\x7a\x66\x9d\x85\x50\xdf\x4f\xef\x2f\x38\x29\xac\xd2\xe6\x72\x04\x77\xe2\x15\x21\x9f\x82\xc5\x2f\xad\xb2\x28\xc1\xe8\x82\xeb\x83\x77\xa3\x03\xb3\x45\xef\xba\xba\xad\x48\x5d\x17\x55\xeb\x08\x2d\xb8\xb6\x69\x8c\x25\xf6\x5b\x5c\xba\x08\xd0\x2f\x47\x30\x09\x0b\x9d\xc5\xb8\xef\x46\xf0\xdb\x70\xe7\xf9\xff\x8a\x66\x62\xb4\x46\x9f\x80\x47\xb8\xf6\x5b\x7b\x84\xaa\x2b\x0c\x17\x62\x50\x21\x46\x49\xbd\x60\x0d\xb7\x79\xb7\xc2\xe7\x3a\x59\xd7\x9f\x1a\x56\x9d\xcb\xfd\x71\xd7\x59\x1a\x66\xed\x85\xe7\x69\x27\x7d\x15\xb3\xf4\xc1\xb8\x11\xe4\x9a\xae\x22\x7f\x46\xdf\x28\x15\x97\xe9\xc6\x23\xba\xb6\xa2\x43\x13\x3f\x2b\xac\xe4\xa1\x9d\x35\x2f\xc6\xeb\x9d\xcc\xef\x2b\x5f\xc6\xba\x00\x8c\xed\x86\x85\x39\x7c\xa7\xc5\x9f\x2f\x47\xc9\xce\xa2\xe7\xef\x73\xe6\x43\x1c\x9a\x68\xbd\xb1\x80\x5a\x36\x46\x69\x72\x57\x60\x71\x1d\x22\x29\x4d\xc1\x14\x87\xa2\x32\xad\x14\x8d\xba\x69\xac\xf1\x3c\xaf\xd4\x16\x3f\x29\x7c\x63\xcb\xb7\xf1\xf7\x1d\x92\x90\x82\x44\xc8\x9e\x4e\x62\x62\x34\xa1\x26\x17\x43\x7d\x76\x39\x82\xdb\x83\x2d\x16\x0f\x2d\x97\xd5\x05\x44\xa9\xb2\xb0\x7b\x42\xd5\x22\xd9\x38\x0b\x77\x0a\xcc\x65\x92\x3a\x4f\xc3\x01\x8f\xd9\x40\x42\xec\xa0\x3f\x91\x19\xa8\x4f\x45\x7b\x0e\x1f\x07\xd7\x13\x9a\x2b\x35\xf2\x88\x52\x0b\x22\x94\xb1\xd6\x2b\x37\x28\xfc\x2e\xc6\x39\x0c\x0a\x5c\x68\x57\x88\x1a\x1a\x61\x1d\xca\xae\xfd\xa7\xe5\xd3\xf4\x35\x36\xd4\x57\xb1\x5a\x90\x69\xa0\x31\x4e\x71\x1c\x7d\x91\xef\x6d\xe6\xc3\x74\xf2\xf2\x9f\x4b\xa4\x12\xed\x11\x06\xc6\x25\x60\x2b\x2a\x25\xaf\x00\xdf\xb1\x68\x49\xac\x2a\xec\x7a\x07\x6b\x55\x6e\xd6\xaf\x8f\xe0\x6f\xc6\x54\x28\x74\xe8\x23\x55\x35\x68\x05\x61\x2c\x43\x51\x94\x60\xd6\xde\x50\x04\xe9\xb1\xf1\xef\xbd\xe8\x08\x7e\x5b\x0e\x17\x9e\x7b\xa7\x26\xcb\x03\x7f\x2a\x2d\xf1\x7d\xa0\x38\x34\x14\x2a\xd1\x61\x82\x41\x58\xef\xfb\x68\x32\xe7\x53\x9e\xac\x89\x17\x42\xfb\xe3\xeb\x8b\xc1\xe1\x38\x56\x72\xa4\xc4\x2a\x1a\xf4\xc3\x59\xcd\x05\x8f\xed\x46\xaf\x0c\x1c\xc5\x76\xf6\x5f\xe3\x35\xa1\x5d\x78\xe5\x43\x4f\xb9\xe4\xe2\xdf\x22\xe2\xa9\xb4\x3a\x70\xc5\xab\xd2\xf2\x5b\x25\xe1\x60\x0e\x8b\x9d\x87\x79\xe1\x4b\x54\xbf\x5a\x0b\x2a\x4a\x4e\x11\x89\xef\xbe\x64\xe4\x9a\x9e\xfb\x76\x1a\x0b\xf0\x82\x04\xb5\x6e\xe0\x7e\x89\x6b\xc1\x09\xee\x88\xdb\xb1\x5a\xf3\xd0\x5e\xc6\xfc\x79\xd5\xe6\x4d\xb3\x23\x3e\xfd\xeb\x65\x91\x0e\x46\x7c\x34\x1e\x71\x50\xa2\xa8\xa8\xdc\xf1\xe9\x12\x85\xa5\x15\x0a\x0a\x01\xb3\x58\xa0\xda\xfa\x4e\x02\x16\x37\x6d\x25\x2c\x28\x4d\x68\xb7\xa2\x72\x7e\xa6\xa1\x32\xe4\x7d\xd7\x4e\x94\x03\x8b\xae\x31\x5a\x32\x08\x32\xbe\x16\xa2\x23\xb7\xc7\xf1\x61\x36\xbe\x5d\x7e\xf8\xf5\x00\x47\x98\xca\x8d\x2f\x6b\xca\x15\xa1\xd1\x30\x4b\x43\x66\xfd\xf2\xf8\x30\x81\xa2\x6f\x3f\xb0\xb2\x28\x5e\xdd\x8d\x57\x50\x9a\x06\x03\x8f\x05\xf5\x43\x4e\x07\xc8\xeb\x2d\x4c\x8d\xb0\x12\xc5\x2b\x8f\x54\x4a\xa3\x87\x6e\xd1\xb5\x35\x27\x30\x44\x44\x01\xc9\x1e\xe8\x34\x5f\x4c\xee\xe7\xf3\xd9\x64\x39\x9b\x1e\x7b\xcd\xbf\x60\xf8\x92\xf1\x71\x83\x43\x1f\xc4\xc1\xbf\xb1\xa6\x40\xe7\x98\x1e\x9d\xf8\x20\x1e\x0f\xd3\xf1\x32\x9f\xff\xd2\xab\xde\xaa\x7f\xab\x6e\xbe\xeb\xee\x1f\x9e\x5e\xbc\xc4\xaf\x31\x87\x9a\x40\xe8\x1d\x18\x4f\x97\x75\x6b\x03\x6d\x42\x56\x84\x37\x95\x03\xb1\x32\x6d\x70\xc4\x5b\xe4\x95\xa2\x61\x9c\x8d\x3d\x81\xe6\xf8\xa6\x11\xce\x1b\x3f\x57\xec\x2e\x86\x33\xd8\x08\xa8\xd6\x42\x55\x18\x46\x5b\xc5\xf8\xde\xf8\xda\x02\x56\x42\x1e\x7a\xd2\x5f\x75\xf6\xf2\xf3\x38\xbf\x9d\x4d\x7b\x42\x7d\xf2\x06\x26\x46\xaf\xd5\xc6\xa7\x74\x23\x9c\xa3\xd2\x9a\x76\x53\xce\x34\xf3\x56\xee\xd9\xda\x1d\xe2\x66\x22\x94\x4e\xa8\x70\xf8\xce\x39\x3d\xf0\x79\x4c\x43\xb1\x1a\x9d\x13\x9b\x21\x33\x2d\x0a\x37\x20\x65\x67\xf3\xc1\xc8\x3f\x64\xad\x75\xdf\x65\x0e\x38\xec\xe1\x72\x7e\xe2\x4b\x6f\xca\xad\xb0\x77\xc2\x7e\x18\x3c\x18\x7d\x3b\xb3\x49\xbd\xf0\x0d\x5f\x38\xfa\xd0\xb1\x3b\x41\xba\x1d\x84\x61\x94\x04\x65\xbf\xfb\x09\xad\x4b\xcb\x55\x4c\xf6\x6f\x6e\xcc\xd3\x9a\xd7\x58\x24\xda\x4d\x4e\xee\xc5\x13\x4f\xf9\xf4\xc0\x15\xd6\x54\x0f\x95\xd0\xd8\xfb\xdf\xd7\xc5\xfe\x2b\x0c\x07\xba\xad\xe7\x46\x62\x18\xfd\xe2\x42\xae\x1d\xd9\x96\x07\x03\x94\xc3\xcd\x03\xff\xa5\xe3\x6c\xf0\x64\x33\x96\xd2\xa2\x4b\x22\x47\xe6\x15\xf5\xf1\x5b\xa1\x7b\x86\xfb\x83\x13\x9f\x05\x51\x71\x32\xc8\xc3\x5f\x25\x36\x16\x79\x44\x90\x17\x5d\xc8\x7f\x88\x02\xa1\xce\x32\x77\x62\x1a\xc1\x56\x09\x68\xde\xe3\xcc\xf3\xc3\x65\x06\xf0\xe4\x39\x37\x0c\xcc\x45\x74\x19\x7b\x2c\x9f\x9e\x5d\xfd\x2f\xe6\x5c\xf6\xbf\xce\x7a\x98\xc9\xe0\x74\x34\x47\x01\x4c\xf9\xad\x9b\x4a\x0d\xc6\xae\x5e\x5d\xef\xce\xfd\x6c\x1f\xff\x33\xd0\xda\xe4\xff\x0c\x00\xae\x14\x7f\xfa\xcb\x4f\xc7\x3e\x4c\xc6\xfc\x10\x01\xc2\xda\xb7\xe3\xb8\xf3\x7c\x24\xeb\xc5\xb6\x69\xe2\x79\x22\x96\x42\x6f\xb0\x32\x9b\x24\x76\xaa\x46\x47\xa2\x6e\x06\x39\xff\x35\xcb\xce\xe1\xf1\x77\xa6\x68\x6f\xf2\x70\x78\xfe\x9d\x7f\xb0\x1c\xbd\x29\xbf\xd3\x4c\x37\x29\x7b\x33\x75\xb4\x39\x3a\x42\xe1\xff\x75\xf3\x5e\x75\xd2\x43\x04\x5b\xe5\xfe\xbe\xb8\x9f\xff\x11\x10\xe9\x64\xff\x5d\x37\x05\xee\x50\x1d\xca\x34\x41\xbe\xcb\xf8\x37\xee\x7f\xf0\xe6\x88\xd5\x21\xbd\xfa\xd7\xec\xbf\x01\x00\x00\xff\xff\x9f\x75\x62\x13\xef\x14\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 5359, mode: os.FileMode(436), modTime: time.Unix(1594860808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
