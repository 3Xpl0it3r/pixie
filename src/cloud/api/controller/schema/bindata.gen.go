// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x6f\x23\xb7\x11\x7f\xd7\xa7\x18\xc7\x0f\x67\x03\xaa\x1a\x14\x4d\x50\xe8\x29\x1b\x69\x93\xdb\xda\x96\x55\x4b\xbe\x34\x08\x8c\x0b\xb5\x1c\x69\x09\xef\x92\x1b\x92\x2b\x5b\x0d\xee\xbb\x17\x43\x72\xff\x50\x92\x2f\xbd\xa0\x4f\xd2\x92\xc3\xe1\x6f\x86\x33\x3f\xce\xf0\x12\xd6\x85\x30\xb0\x15\x25\x02\x47\x93\x6b\xb1\x41\x03\xb6\x40\x30\x79\x81\x15\x83\xad\x56\x95\xfb\x4e\x96\x19\x18\xd4\x7b\x91\xe3\x64\x74\x39\xba\x84\xcc\xbe\x33\x20\x95\x05\xc1\x91\x95\x63\xd8\x34\x16\x5e\x10\x24\x22\x07\xab\xa0\x62\xb2\x61\x65\x79\x80\x1d\x4a\xd4\xcc\x22\xd8\x43\x8d\x06\xb6\x4a\x3b\x7d\xeb\x43\x8d\xab\x5c\x8b\xda\xc2\x63\x36\xba\x84\x97\x02\x25\xd8\x0e\x8c\x30\xd0\xd4\x9c\x59\xe4\x13\x0f\x31\x67\x12\x36\x08\x5c\x49\x84\xcd\x01\x74\x23\xa5\x90\x3b\xf8\xd5\x4b\x4d\x4c\xf1\x2b\x88\xa0\x80\x0b\x8d\xb9\x55\xfa\x30\x19\x05\xfb\x5a\x0c\x26\x98\x35\xe1\x13\x6b\x4e\xe5\xc7\xc0\x24\x87\x5c\xd5\x02\x0d\x08\x4b\x66\x10\xd4\xef\x6a\xf1\x2a\xf0\x2f\x25\xdb\x98\xbf\xb2\x5a\x40\xcd\xf2\x67\xb6\x43\x67\x4a\x63\x1c\x9c\xde\x9a\xc9\x68\x14\x5c\xf7\xfb\x08\xe0\xb7\x06\xf5\x61\x0a\xff\xa2\x9f\x11\x40\xd5\x58\x66\x85\x92\x53\xb8\x0b\xff\x46\x9f\x46\x23\x72\x0c\x3c\x1a\xd4\x99\xdc\x2a\xb7\x4c\xf0\x29\x64\xf3\x8b\x11\x80\x64\x15\x4e\x61\x65\xb5\x90\x3b\xfa\xc6\x8a\x89\x72\x38\x50\x8b\xdc\x36\x3a\x92\x51\x7a\xb7\x38\x5a\xa6\xf4\x2e\x9b\x0f\x07\x84\x49\xea\x5a\xab\x3d\xf2\x29\x7c\xaf\x54\x89\x4c\x5e\x74\x58\xee\xf5\xee\x7f\x81\x22\xd9\xa6\x44\xaf\x86\x95\xe6\x8c\x1e\xb2\x69\x85\xd6\xd2\x41\x91\xae\x67\x3c\x0c\x15\xec\x59\xd9\x0c\x34\x7e\x1a\x8d\x50\x36\x15\x24\xda\x8a\x2d\xcb\x2d\xf9\xd4\x2d\x03\x48\xd6\x1f\x1f\x17\x37\x8b\xfb\x9f\x16\xed\xe7\x6d\xb6\x78\xfc\xf7\xc7\xe4\x6e\xfe\xed\xdf\xdb\xa1\x79\xf2\xf0\x53\xb6\x88\xc7\x66\xf7\x8b\x75\x92\x2d\xd2\x87\x8f\xab\x74\xfd\xf1\xe7\xe4\xee\x76\x75\x7e\xea\x8c\xbe\x58\x60\x9d\xde\x2d\x6f\x93\x75\x1a\x94\x74\x60\x1b\xab\x72\x55\xd5\x25\x5a\x4c\xa5\x15\xf6\xb0\xb2\x14\xec\x84\x3b\x49\x57\x03\xd8\xf4\xb5\x4c\x17\xf3\x6c\xf1\x63\xf8\x7a\x78\x5c\x2c\xfa\xaf\x1f\x92\xec\x36\x9d\x87\x8f\x75\xfa\x70\x97\x2d\x92\x75\x3a\x3f\xbb\x53\x92\x53\xec\x74\x0e\x4a\x22\xff\x5c\x42\x22\x01\xb9\xb0\xc0\x9c\x18\xa8\x3c\x6f\xb4\x01\xb1\x05\x46\xf1\xaa\xa1\x60\x06\x2a\xc5\xc5\x56\x50\xae\x16\x08\x42\xd6\x8d\x05\x8b\xaf\x96\x82\x59\x48\x83\xda\x1d\x9a\xd2\xc0\xb1\x44\xf7\x3f\x2f\x98\x66\xb9\x45\x6d\x26\x6e\x13\x97\x58\x42\xe6\x65\xc3\x89\x32\x0e\xb5\x5b\x20\x9d\xbe\x67\x3c\x6c\x14\xd3\xdc\xe5\x53\xcd\x8c\x57\xa0\xaa\x8a\x49\xee\x96\x13\xe2\x74\x9e\xad\x3d\x5c\x30\x58\x62\xde\xe3\x95\xe5\xe1\x3c\xe8\xbc\x50\x06\x25\x30\x09\x6c\xe0\x0d\x30\xcd\x6e\x87\x86\xd6\x4e\x5a\x58\x5c\xe4\x2e\xdf\xad\x72\x5b\x10\xa8\x68\x89\x2d\x98\xa5\x14\x37\x85\x6a\x4a\x0e\x95\xda\xa3\x13\xa2\xad\xde\x19\xa0\xbd\x89\xa8\x3c\x01\x48\x72\x0c\xa3\x40\xaf\xb5\x70\x54\xc6\x36\xad\x15\xab\xf4\x36\x9d\xad\x3f\x13\x0f\x37\x42\xf2\x10\x0e\x37\x51\x38\xdc\x7c\x5c\xde\xcf\xc3\xbf\xd5\x87\x59\xfb\x6f\xf6\x90\x2d\xd7\xe1\x63\x91\xdc\xa5\xab\x65\x32\x4b\xbb\x94\x9a\x63\x5d\xaa\x43\x85\xd2\xde\xe0\xe1\x28\x41\x8f\xd2\x2b\xd7\x48\xfc\x99\xd8\x3b\x33\x85\x1f\x4a\xc5\x2c\x8d\x12\xcb\x47\x39\xe7\xd4\x26\xcb\xec\xff\xaa\xcf\x11\x9e\x53\x47\x0e\x9d\x76\xec\x16\xb8\x68\xda\x52\xcc\x45\x90\x08\x2c\x61\xae\x9e\xf1\x60\xa6\xf0\x8b\xd7\xf7\x74\x71\x3d\x85\x5f\x06\x2c\xf2\x14\xd6\xd3\x90\x09\x53\xa4\xc6\x8d\xe7\x65\x63\x2c\xea\xab\x60\xc0\xf5\x14\x66\x7e\xa4\xdd\x28\x08\x7c\x7f\x20\x76\xbc\x8a\xe8\xec\x4d\x61\xda\x65\x38\x33\xdc\x69\xa6\xa4\x44\x17\xb2\xa7\x7b\xf6\x73\xbd\x42\xd1\x32\xdb\x15\x1b\x50\xdc\x34\x22\x3c\xd2\x70\x9b\xb5\x23\xb4\xae\x95\x35\xdd\xaa\x21\xb9\x5f\xf7\xcb\x4d\xbb\xd3\x30\xd0\xaf\x5c\x6a\xb7\xd2\xe3\x10\xd8\x4b\x65\xa6\x90\x49\x3b\x0e\x29\x37\x7d\x83\x5d\xc6\xad\xa9\x8f\xfd\xed\x71\x1d\x0b\x3f\xa0\x69\x4a\x7b\xbc\xed\x0f\x02\x4b\x7e\xbc\xf7\x96\x06\x83\xc9\x67\xd3\x64\xec\xa8\x57\xe3\x6f\x8d\xd0\xc8\x13\xbd\x23\x61\x3a\x81\xf3\xe2\x4f\xe7\xe1\x45\xd2\xab\x8e\x1a\x9e\x46\x8e\x09\xfc\x2d\x5d\xed\x34\xa0\xe4\xb5\x12\xd2\x9a\x31\x68\xdc\xa2\xcb\x76\xae\x72\x57\x17\xe4\xa5\x6a\x38\xab\xc5\xa4\xd6\xca\x51\x48\x29\xf6\xf8\x41\xe0\x0b\xa1\xb9\x0d\xff\xef\xd0\x32\xce\x2c\xf3\x41\xd1\x4a\xcc\x94\xb4\x28\xad\x19\xc4\xc4\xed\xd1\x14\x89\x1b\x87\xc3\xc5\xba\xfb\x17\x2b\xf3\xb3\x67\x54\xad\xa2\x89\x0b\x6f\x93\x27\x05\xca\x57\xe3\x32\x72\x40\x11\xb4\x41\xc4\x19\x5e\x7f\x24\x33\x50\x1f\x8b\x7a\xed\x54\xf9\x05\xd5\xac\x16\x41\xa7\x27\x0c\xaf\xcc\x8f\x0e\xb4\x84\xc9\x9e\x5d\x4e\xe2\xc5\x51\x03\xdd\x21\xae\x8a\xaa\x98\xb5\xc8\xc3\x2d\x24\xcc\xe0\x4a\x32\x21\x74\x5e\x0a\x91\x17\xee\x0a\xd8\x20\x4a\xa8\x99\x36\xc8\xe9\xae\x3a\x25\x76\xd5\xb1\xbf\x67\x7e\xb6\x59\x59\x55\x43\xad\x8c\xa0\x30\x70\xd7\x4f\xb7\x67\x36\x8c\x50\x27\xff\x53\x81\xb6\x40\x7d\x82\x81\x70\x31\x2a\x59\x04\x1f\x03\xbe\x62\xde\x58\x2a\x7f\xda\x5b\x6d\xe2\x6a\xaa\xb4\x1b\xef\xaa\x21\xef\xc2\xb2\x1c\x5c\x52\xbe\x08\x46\x96\x17\xa0\xb6\x6e\xa3\x00\xd2\x61\xa3\xff\xbd\xe8\x14\x7e\x59\x0f\x07\x9e\x3a\xa7\x46\xc3\x03\x7f\x0a\xc9\xf1\x75\xa0\xd8\x5f\x75\xb6\x40\x83\x11\x06\xa6\x9d\xef\xc3\x96\x19\xad\x72\x9c\x10\x79\xc1\x5f\xcc\x64\x3e\x1b\x2c\x0e\x45\x3c\x9d\x14\xdb\x84\x0d\x5f\x44\x59\x42\xc5\x9e\xfd\x35\x1a\xbc\x32\x70\x14\xed\xd3\x7f\x25\x5b\x4b\xa4\x4e\xca\x87\x9e\x32\x91\xe1\x6f\xe5\xf1\xb9\xb0\x3a\x72\xc5\xb3\x90\xfc\x2d\x96\x39\x2a\x65\xc3\x1d\x46\x69\xe5\x98\xb0\x1b\xad\x98\xcd\x0b\x0a\x11\x8e\xaf\x8e\x85\x32\x69\x9f\x08\x24\x15\x78\xe7\x94\xbb\xca\xaf\xab\x04\xc2\x45\x40\x83\x8d\x19\x9c\x0f\xc7\x2d\xa3\x0c\x70\x6a\xa8\xbe\x91\xca\x16\x21\xc0\x9e\xa5\x7a\x91\xe4\xa9\xd9\x2a\x2a\xe8\x68\x5d\x90\x37\x50\x20\x2b\x6d\x71\xa0\xa5\x05\x32\x6d\x37\xc8\xac\x3f\x4e\x8d\x39\x8a\x3d\x72\x2a\xc3\x34\xee\x9a\x92\x69\x10\xd2\xa2\xa6\xfa\xdc\xd5\x62\xb6\xf0\x59\x11\x78\x93\xd4\x69\x34\xb5\x92\x9c\x10\x58\xe5\xc8\x17\x8d\x35\x01\xc4\xfb\x34\xb9\x5d\xbf\xff\xf9\x14\x44\x23\x07\x30\xdc\x89\xf7\x1a\x73\x7f\xf7\xf9\x3e\x70\x49\xbd\x13\xcc\x88\x4f\x1d\x02\x61\x80\x1a\x06\xc1\xdb\x84\xeb\x6d\xf0\x3d\xa4\x30\xf2\x9d\xf5\x8d\x93\x4b\x30\x8a\x35\xa3\x2a\xb2\x8e\x99\xae\xc2\xd3\x68\xb0\xda\x94\x68\xe0\xfd\x7a\xbd\x7c\x67\xe0\x9b\xaf\xbf\x76\xe8\x1a\xd3\xf9\xef\x3c\x78\x17\xa8\x3b\xe5\xd8\x5e\x98\x1e\x6b\xb0\xe3\xc7\x87\xe5\xac\xb5\x80\xa2\x69\xa3\x91\x3d\x9b\x89\x53\x50\xa8\x1a\x3d\x3f\x31\xdb\x95\x95\xad\xe1\x4e\x6f\x4e\x40\x37\x2c\x7f\xa6\x22\x56\x48\x74\x26\x6b\x34\x4d\x45\x89\x09\x01\x91\x47\x12\x70\xce\xb3\xd5\xec\x7e\xb1\x48\x67\x6b\x57\xfd\x1f\xfb\x99\xda\x5b\x3a\x9b\xd0\x1f\x47\x8e\x16\x7e\xa4\xd6\x2a\x47\x63\x28\xe7\x5b\xf1\xd6\x07\xcb\x79\xb2\xf6\x2d\x86\xd7\xbb\x17\xff\x11\x6d\x2d\xdd\x5a\xee\xdd\x4e\x43\xd4\xcd\x1b\x94\x16\x98\x3c\x80\x72\x04\xb0\x6d\xb4\x27\x02\x1f\xc6\xbe\xdb\x36\xc0\x36\xaa\xf1\x2e\x78\x09\x4c\x21\xec\x30\x36\xa9\x33\x8e\xa1\x9c\xda\x18\xb0\xbc\x30\x03\x56\x1f\x42\xfc\xf9\x0d\x3c\xa4\x2d\x13\x25\x76\x51\x23\xd5\x0b\x19\xcc\x60\xc3\x78\xe4\x40\x67\x64\xda\xf6\x4f\x2d\x39\x7c\x70\xda\x67\x4a\x6e\x85\x6f\x3e\x6b\x66\x8c\x2d\xb4\x6a\x76\x45\xea\x3a\xd7\xbe\xf3\xed\x16\xd1\xbd\xca\x84\x8c\xb2\xf6\xb8\xed\x3d\x5f\x06\x07\x52\xe8\xc5\x2a\x34\x86\xed\x86\x2c\xe3\xe3\xb7\x1b\x68\xf7\xbc\xf9\x87\x49\xf7\xe4\xf4\xdf\xcf\xae\xda\x0a\x6d\xec\x5a\x54\x18\x6d\x57\xb2\x93\xc1\x56\xdf\x52\xf1\x3f\x85\xbe\x31\x5f\x04\x1f\x28\x80\xbc\xb3\x5c\x8d\x1c\x7b\xce\x17\x06\x48\x76\xd1\x6c\x6b\x23\x0d\x77\xbe\xee\xab\xea\xa3\xbe\xa3\x45\x13\x31\x68\x6b\xf5\xfb\x96\x2e\x22\x03\xf6\x83\xd3\x9e\x46\x67\xdf\xcf\x7e\x40\x6d\x62\x86\x0f\xa9\xf4\xe6\xc4\x22\xbe\x26\x6a\x8d\xd6\x1e\x66\x67\xe7\x4e\x0b\xd1\xe0\x21\xad\xca\x65\xc9\x24\x76\xc7\xe2\xae\x92\xee\xcb\x3b\x4a\x36\xd5\x42\x71\xf4\x45\x79\x18\xc8\xa4\xb1\xba\xa1\x52\x0c\xf9\x70\xf2\xc8\x7f\x71\xa3\xe1\x3d\x59\x27\x9c\x6b\x34\xd1\x81\x5a\xf5\x8c\xf2\xb4\x51\xf3\x1d\xd4\x5e\x84\x27\x8b\x93\xe7\x25\xe1\xe6\x6e\x85\x7c\x3e\x5d\xdb\xbe\x61\xb9\x95\x33\x17\x58\x01\x54\xd4\x4d\xc1\x77\x1c\x6b\x8d\x54\x91\xf1\xab\x36\x8a\xbe\x0a\x02\xfe\xe2\xa2\xdc\x0e\x91\x09\x7b\xc1\xa0\x7e\x0d\x15\xea\x57\xd7\x23\x80\x47\xc7\x09\xc3\x43\xbd\x0a\xee\x26\x6f\x67\xf3\x8b\xf1\xe7\x92\xfb\x7a\xf0\x30\xd5\xc2\x8c\xca\xdc\x93\xaa\x17\x60\x8e\x74\xab\xcf\xdf\x28\x92\x4f\xd4\xf9\x7a\xb7\xaf\x7b\x5b\x05\xfe\xfb\xfc\x4a\x6f\xd4\xe3\x67\x7a\xdf\xb1\x7f\x20\x3b\x6a\x87\x07\x2a\xfc\xb9\x91\x8a\xab\xf8\xdc\xc6\x9e\x35\xa2\x47\xc0\xb1\xcb\x9e\xc5\x51\xd3\xdb\x1f\x7f\x8c\xe9\xaa\x09\x9d\xf5\x14\x52\x2e\x5c\xc9\xd6\xf6\xda\xe7\xcc\xb8\xd7\xbb\x2b\xe5\x3b\xfa\x7e\x41\x68\xf1\xaf\xe3\x87\x41\x5f\x53\x1f\x2b\x3d\x62\x80\x5a\xab\xad\x28\x71\x19\xbf\x6d\x9e\x7f\xb6\x3c\x55\x7a\xfe\xf9\xf2\xad\xe7\xca\x3e\xa1\xfa\xbe\xdb\xbf\x5c\xe8\x28\x13\x4c\xc1\xfe\xf6\xcd\xb7\x67\x9e\x4e\x86\xed\xb7\xdf\xd3\x62\xe5\xea\xd7\x30\xf3\x74\x22\xeb\xc4\xf6\x31\xed\x38\x76\x2e\x98\xdc\x61\xa9\x76\x51\xe6\x8a\x0a\x8d\x65\x55\x1d\x93\xfd\x25\x3c\xfc\x41\xd7\xea\xb6\x3c\x6e\x56\xff\xe0\x51\xf7\xe4\x39\xe7\x0b\xb7\x69\x3b\xd3\x70\x9b\xf9\x3d\xa7\x27\x28\xdc\x21\xbf\x96\xad\x74\xf4\x2a\x2c\xcc\x3f\x57\xf7\x8b\x3f\x03\x22\xee\xa4\xbf\xc8\x52\xa0\x02\xa8\x45\x19\x47\xec\x17\x6d\xfe\x86\xfd\x47\x3d\x7e\xb8\x1b\x62\xd3\x3f\x8d\xfe\x1b\x00\x00\xff\xff\xd9\x23\x2f\x5b\x8e\x19\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6542, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
