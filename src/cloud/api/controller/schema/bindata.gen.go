// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xe3\x36\x12\x7f\xf7\xa7\x98\x34\x0f\x9b\x00\x3e\x5f\x71\xb8\x16\x07\x3f\x55\x67\x6b\xbb\xba\x24\x8e\x2f\x76\x76\xaf\x58\x04\x29\x2d\x8e\x2d\xc2\x12\xa9\x92\x94\x13\x5f\xd1\xef\x7e\x18\x92\x92\x45\xdb\xd9\x62\x8b\xeb\x93\x4d\x72\x38\xf3\x9b\xe1\xfc\xd5\x25\x2c\x0b\x61\x60\x2d\x4a\x04\x8e\x26\xd7\x62\x85\x06\x6c\x81\x60\xf2\x02\x2b\x06\x6b\xad\x2a\xb7\x4e\xe6\x19\x18\xd4\x3b\x91\xe3\x68\x70\x39\xb8\x84\xcc\xbe\x33\x20\x95\x05\xc1\x91\x95\x43\x58\x35\x16\x5e\x10\x24\x22\x07\xab\xa0\x62\xb2\x61\x65\xb9\x87\x0d\x4a\xd4\xcc\x22\xd8\x7d\x8d\x06\xd6\x4a\x3b\x7e\xcb\x7d\x8d\x8b\x5c\x8b\xda\xc2\x63\x36\xb8\x84\x97\x02\x25\xd8\x0e\x8c\x30\xd0\xd4\x9c\x59\xe4\x23\x0f\x31\x67\x12\x56\x08\x5c\x49\x84\xd5\x1e\x74\x23\xa5\x90\x1b\xf8\xd9\x53\x8d\x4c\xf1\x33\x88\xc0\x80\x0b\x8d\xb9\x55\x7a\x3f\x1a\x04\xfd\x5a\x0c\x06\x58\x50\x6c\xc4\x47\xb6\x15\x75\x7c\x6d\x08\x4c\x72\xc8\x55\x2d\xd0\x80\xb0\xa4\x0d\x21\xfe\xa1\x16\xaf\x02\xff\xca\x6a\x01\x35\xcb\xb7\x6c\x83\x4e\x99\xc6\x38\x40\x07\x7d\x46\x83\x41\x30\xde\xaf\x03\x80\x5f\x1a\xd4\xfb\x31\xfc\x9b\x7e\x06\x00\x55\x63\x99\x15\x4a\x8e\xe1\x2e\xfc\x1b\xfc\x36\x18\x90\x69\xe0\xd1\xa0\xce\xe4\x5a\xb9\x6b\x82\x8f\x21\x9b\x5e\x0c\x00\x24\xab\x70\x0c\x0b\xab\x85\xdc\xd0\x1a\x2b\x26\xca\xfe\x46\x2d\x72\xdb\xe8\x88\x46\xe9\xcd\x2c\xba\xd6\x97\xb1\x40\x6b\xc9\x74\x24\x66\x8b\xfb\xfe\xbd\x1d\x2b\x9b\xf8\x16\xca\xa6\x82\x44\x5b\xb1\x66\xb9\x25\x1d\xdd\x35\x80\x64\xf9\xfc\x38\xbb\x99\xdd\x7f\x9a\xb5\xcb\xdb\x6c\xf6\xf8\x9f\xe7\xe4\x6e\xfa\xfd\xdf\xdb\xad\x69\xf2\xf0\x29\x9b\xc5\x7b\x93\xfb\xd9\x32\xc9\x66\xe9\xc3\xf3\x22\x5d\x3e\xff\x94\xdc\xdd\x2e\xce\x1f\x9d\xe1\x17\x13\x2c\xd3\xbb\xf9\x6d\xb2\x4c\x03\x93\x0e\x6c\x63\x55\xae\xaa\xba\x44\x8b\xa9\xb4\xc2\xee\x17\x96\xdc\x8f\x70\x27\xe9\xa2\x07\x9b\x56\xf3\x74\x36\xcd\x66\x3f\x86\xd5\xc3\xe3\x6c\x76\x58\xbd\x4f\xb2\xdb\x74\x1a\x16\xcb\xf4\xe1\x2e\x9b\x25\xcb\x74\x7a\x56\x52\x92\xd3\x5b\x76\x06\x4a\x22\xfb\x5c\x42\x22\x01\xb9\xb0\xc0\x1c\x19\xa8\x3c\x6f\xb4\x01\xb1\x06\x46\xfe\xa3\xa1\x60\x06\x2a\xc5\xc5\x5a\x50\xf4\x14\xe4\x94\x75\x63\xc1\xe2\xab\x25\xe7\x12\xd2\xa0\x76\x8f\xa6\x34\x70\x2c\xd1\xfd\xcf\x0b\xa6\x59\x6e\x51\x9b\x91\x13\xe2\x5c\x5d\xc8\xbc\x6c\x38\x05\xf1\xbe\x76\x17\xa4\xe3\xb7\xc5\xfd\x4a\x31\xcd\x9d\x6b\xd7\xcc\x78\x06\xaa\xaa\x98\xe4\xee\x3a\x21\x4e\xa7\xd9\xd2\xc3\x05\x83\x25\xe6\x07\xbc\xb2\xdc\x9f\x07\x9d\x17\xca\xa0\x04\x26\x81\xf5\xac\x01\xa6\xd9\x6c\xd0\xd0\xdd\x51\x0b\x8b\x8b\xdc\x45\xa0\x55\x4e\x04\x81\x8a\xae\xd8\x82\x59\x8a\x36\x53\xa8\xa6\xe4\x50\xa9\x1d\x3a\x22\x12\xf5\xce\x00\xc9\xa6\xd4\xe1\x63\x51\x92\x61\x58\x5d\x6b\x55\x6b\xe1\x92\x0b\x5b\xb5\x5a\x2c\xd2\xdb\x74\xb2\xfc\x82\x3f\xdc\x08\xc9\x83\x3b\xdc\x44\xee\x70\xf3\x3c\xbf\x9f\x86\x7f\x8b\x8f\x93\xf6\xdf\xe4\x21\x9b\x2f\xc3\x62\x96\xdc\xa5\x8b\x79\x32\x49\xbb\x90\x9a\x62\x5d\xaa\x7d\x85\xd2\xde\xe0\xfe\x28\x76\x8f\xc2\x2b\xd7\x48\x19\x2d\xb1\x77\x66\x0c\xef\x4b\xc5\x2c\xed\x52\xde\x3d\x8d\xd4\x64\x9e\xfd\x5f\xf9\xb9\x04\xe4\xd8\x91\x41\xc7\x5d\xb6\xb9\x08\x3b\x21\x2b\x98\xab\x2d\xee\xcd\x18\x3e\xfb\xfb\x4f\x17\xd7\x63\xf8\xdc\xcb\x1a\x4f\x17\xde\xd5\xee\xa7\xf7\x57\xe4\x94\x5a\x48\x75\x3d\x86\x3b\xb6\x45\xc8\xa6\xa0\xf1\x97\x46\x68\xe4\xa0\x64\x8e\xf0\x98\xb9\x67\x34\xa0\x76\xe8\x9e\xae\x6a\x4a\x2b\xfe\x92\x97\x8d\xb1\xa8\xc1\x34\x75\xad\xb4\xa5\x77\x0b\x5b\x57\x5e\xd5\xeb\x31\x4c\xfc\x46\x8b\x30\x9c\x13\xb0\xfe\xc9\x9f\x8b\x66\xa2\xa4\x44\x17\x00\x27\xb8\x0e\x47\x07\x84\xa2\x4d\x93\x57\xac\x97\x2f\xc7\x51\xf6\x24\x0e\xb7\x59\xbb\x43\xf7\x5a\x5a\xd3\xdd\xea\x67\xee\xeb\xc3\x75\xd3\x4a\xea\x47\xcd\x95\xcb\x13\x2d\xf5\x30\x44\xc9\x5c\x99\x31\x64\xd2\x0e\x43\xfc\x8e\xdf\x48\x55\xc3\x56\xd3\xc7\x6c\xda\x97\xd8\x23\x7e\x40\xd3\x94\xf6\x58\xec\x7b\x81\x25\x3f\x96\xbd\xa6\xcd\xa0\xf2\xd9\x98\x1b\xba\x3c\xde\x3e\x4a\xa2\x37\x44\x4c\x4f\x7a\x9e\xfc\xe9\x3c\xbc\x88\x7a\xd1\xe5\x99\xa7\x81\x73\x05\x5f\x82\xab\x8d\x06\x94\xbc\x56\x42\x5a\x33\x04\x8d\x6b\xff\xe2\x5c\xe5\x94\x8a\x20\x2f\x55\xc3\x59\x2d\x46\xb5\x56\x2e\x1f\x95\x62\x87\x1f\x05\xbe\x10\x9a\xdb\xf0\xff\x0e\x2d\xe3\xcc\x32\xef\x65\x2d\xc5\x44\x49\x8b\xd2\x9a\xe0\x12\x14\x1f\xb7\x47\x47\x44\x6e\x1c\x0e\x17\x48\xee\x5f\xcc\xcc\x9f\x9e\x61\xb5\x88\x0e\x2e\xbc\x4e\x3e\xc3\x50\xf0\x1b\x17\xde\xbd\x7c\x43\x02\xa2\x04\xe4\xf9\x47\x34\x3d\xf6\x31\xa9\xe7\x4e\x8d\x5d\x60\xcd\x6a\x11\x78\xfa\xec\xe3\x99\xf9\xdd\x1e\x97\x70\x78\x48\x55\x27\xfe\xe2\xf2\x0c\x15\x24\xd7\x22\x55\xcc\x5a\xe4\xa1\xa4\x09\xd3\xab\x6f\x26\xb8\xce\x4b\x21\xf2\xc2\xd5\x93\x15\xa2\x84\x9a\x69\x83\x9c\x0a\xdf\x69\x95\x50\x5d\x29\xf1\x65\x84\xad\x16\x56\xd5\x50\x2b\x23\xc8\x0d\x5c\x2d\xeb\x64\x66\x7d\x0f\x75\xf4\x9f\x0a\xb4\x05\xea\x13\x0c\x84\x8b\x51\xff\x23\xf8\x10\xf0\x15\xf3\xc6\xb2\x55\x89\x6d\x89\x24\xae\xc2\xa4\xdd\xfe\x18\xfe\xa9\x54\x89\x4c\x7a\x13\x96\x65\xaf\xe2\xf9\x1e\x17\x59\x5e\x80\x5a\x3b\x41\x01\xa4\xc3\x46\xff\x0f\xa4\x63\xf8\xbc\xec\x6f\x3c\x75\x46\x8d\xb6\x7b\xf6\x14\x92\xe3\x6b\x8f\xb1\xaf\x9b\xb6\x40\x83\x11\x06\xa6\x9d\xed\x83\xc8\x8c\x6e\xb9\x9c\x10\x59\xc1\x57\x79\x52\x9f\xf5\x2e\x87\x1e\x9d\x5e\x8a\xad\x82\xc0\x17\x51\x96\x50\x51\x5e\x25\xb9\xc1\x2a\x3d\x43\x91\x9c\xc3\x2a\x59\x5b\xaa\x18\xc4\xbc\x6f\x29\x13\x29\xfe\x56\x1c\x9f\x73\xab\x23\x53\x6c\x85\xe4\x6f\x65\x99\xa3\x96\x39\x14\x44\x0a\x2b\x97\x09\xbb\xdd\x8a\xd9\xbc\x20\x17\xe1\xf8\xea\xb2\x50\x26\xed\x13\x81\xa4\x6e\xf1\x1c\x73\xd7\x46\x76\x6d\x45\x28\x04\xb4\xd9\x98\xde\xfb\x70\x5c\x33\x8a\x00\xc7\x86\x9a\x25\xa9\x6c\x11\x1c\x6c\x2b\xd5\x8b\x24\x4b\x4d\x16\x51\x77\x48\xf7\x02\xbd\x81\x02\x59\x69\x8b\x3d\x5d\x2d\x90\x69\xbb\x42\x66\xfd\x73\x6a\xcc\x51\xec\x5c\x39\x03\x8d\x9b\xa6\x64\x1a\x84\xb4\xa8\x77\xac\x34\xae\xb1\xb3\x85\x8f\x8a\xb6\xa6\x09\x03\x1a\x4d\xad\x24\x27\x04\x56\xb9\xe4\x8b\xc6\x9a\x00\xe2\x43\x9a\xdc\x2e\x3f\xfc\x74\x0a\xa2\x91\x3d\x18\xee\xc5\x0f\x1c\x73\x5f\xfb\xfc\x98\x37\xa7\x99\x08\x26\x94\x4f\x1d\x02\x61\xa0\xd6\x6a\x27\x78\x1b\x70\x07\x1d\xfc\x88\x28\x8c\x7c\x67\xfd\x54\xe4\x02\x8c\x7c\xcd\xa8\x8a\xb4\x63\xa6\x6b\x17\x35\x1a\xac\x56\x25\x1a\xf8\xb0\x5c\xce\xdf\x19\xf8\xee\xdb\x6f\x1d\xba\xc6\x74\xf6\x3b\x0f\xde\x39\xea\x46\xb9\x6c\x2f\xcc\x01\x6b\xd0\xe3\xc7\x87\xf9\xa4\xd5\x80\xbc\x69\xa5\x91\x6d\xcd\xc8\x31\x28\x54\x8d\x3e\x3f\x31\xdb\xf5\xa8\xad\xe2\x8e\x6f\x4e\x40\x57\x2c\xdf\x52\x47\x2c\x24\x3a\x95\x35\x9a\xa6\x72\x63\x64\x40\xe4\x91\x04\x9c\xd3\x6c\x31\xb9\x9f\xcd\xd2\xc9\xd2\x8d\x12\xc7\x76\xa6\xe9\x95\xde\x26\x8c\xbf\x91\xa1\x85\xdf\xa9\xb5\xca\xd1\x18\x8a\xf9\x96\xbc\xb5\xc1\x7c\x9a\x2c\xfd\xbc\xe2\xf9\xee\xc4\x7f\x45\xdb\x98\xb7\x9a\x7b\xb3\xd3\x16\x0d\xeb\x06\xa5\x05\x26\xf7\xa0\x5c\x02\x58\x37\xda\x27\x02\xef\xc6\x7e\x98\x36\xc0\x56\xaa\xf1\x26\x78\x09\x99\x42\xd8\xbe\x6f\xd2\xd8\x1b\x43\x39\xd5\x31\x60\x79\x61\x06\xac\xde\x07\xff\xf3\x02\x3c\xa4\x35\x13\x25\x76\x5e\x23\xd5\x0b\x29\xcc\x60\xc5\x78\x64\x40\xa7\x64\xda\x0e\x63\x6d\x72\xf8\xe8\xb8\x4f\x94\x5c\x0b\x3f\xc9\xd6\xcc\x18\x5b\x68\xd5\x6c\x8a\x54\x92\x67\xf1\x43\xe6\x69\x2f\x51\x5d\x65\x42\x46\x51\x7b\x3c\x5e\x9f\xef\xa9\x43\x52\x38\x90\x55\x68\x0c\xdb\xf4\xb3\x8c\xf7\xdf\x6e\xa3\x95\x79\xf3\x0f\x93\xee\xc8\xe8\xbf\x9e\xbd\xb5\x16\xda\xd8\xa5\xa8\x30\x12\x57\xb2\x93\xcd\x96\xdf\x5c\xf1\x3f\x84\xbe\x31\x5f\x05\x1f\xc8\x81\xbc\xb1\x5c\xd3\x1d\x5b\xce\x37\x06\x48\x7a\xd1\x69\xab\x23\x6d\x77\xb6\x3e\xb4\xe9\x47\x43\x4c\x8b\x26\xca\xa0\xad\xd6\x1f\xda\x74\x11\x29\xb0\xeb\xbd\xf6\x38\x7a\xfb\xc3\xe9\x47\xd4\x26\xce\xf0\x21\x94\xde\x3c\x98\xc5\x65\xa2\xd6\x68\xed\x7e\x72\xf6\xec\xb4\x11\x0d\x16\xd2\xaa\x9c\x97\x4c\x62\xf7\x2c\xae\x94\x74\x2b\x6f\x28\xd9\x54\x33\xc5\xd1\x37\xe5\x61\x23\x93\xc6\xea\x86\x5a\x31\xe4\xfd\xc3\x23\xfb\xc5\x83\x86\xb7\x64\x9d\x70\xae\xd1\x44\x0f\x6a\xd5\x16\xe5\xe9\xd4\xd7\x7e\x64\x72\x17\x27\xce\x39\x02\xe3\x68\xc4\x82\x1f\x38\xd6\x1a\xa9\xab\xe2\x57\xad\x27\x7c\x13\x08\x7c\xf1\xa1\xf8\x0c\xde\x05\x3b\xc1\xa0\x7e\x0d\x5d\xe6\x37\xd7\x03\x80\x47\x17\xd7\xfd\x87\xb9\x0a\x26\x23\x8b\x65\xd3\x8b\xe1\x97\x02\xf4\xba\xfb\x77\xd1\xc1\x8c\x5a\xd5\x93\xce\x15\x60\x8a\x54\x99\xa7\x6f\x34\xba\x27\xec\x7c\xcf\x7a\xe8\x5d\x5b\x06\x7e\x7d\xfe\xa6\x57\xea\xf1\x0b\xc3\xf1\xd0\x7f\x31\x3b\x9a\x97\x3b\x16\xdd\x5b\x1e\x46\xbe\xf0\xf9\xac\xd1\xd1\x27\x3c\x00\x53\xb0\xbf\x7d\xf7\xfd\x99\xcf\x00\xfd\xe9\xcf\x3f\xbf\xc5\xca\xb5\x4f\xe1\xe4\xe9\x84\xd6\x91\xed\x62\xaf\x77\xc9\xa1\x60\x72\x83\xa5\xda\x44\x8e\x23\x2a\x34\x96\x55\x75\x9c\x6b\x2e\xe1\xe1\x77\x86\x26\x27\xf2\x78\x56\xfa\x9d\x6f\x97\x27\x9f\x26\xbe\x52\x4c\x3b\x18\x85\x64\xea\x65\x8e\x4f\x50\xb8\xaf\xa2\xaf\x65\x4b\x1d\x7d\xe1\x14\xe6\x5f\x8b\xfb\xd9\x1f\x01\x11\x0f\x72\x5f\xa5\x29\x50\xfd\x6d\x51\xc6\x0e\xf2\x55\xc2\xdf\xd0\xff\x68\xc4\x0c\xa9\x29\x56\xfd\xb7\xc1\xff\x02\x00\x00\xff\xff\x86\x5c\xd4\xe1\xec\x17\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6124, mode: os.FileMode(436), modTime: time.Unix(1615511598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
