// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x6f\x23\xb7\x11\x7f\xd7\xa7\x18\xc7\x0f\xe7\x03\x54\x35\x28\x9a\xa0\xd0\x53\x36\xd2\x26\xb7\xb5\x2d\xab\x96\x7c\xd7\xe0\x60\x5c\xa8\xe5\x48\x4b\x78\x97\xdc\x90\x5c\xd9\x6a\x70\xdf\xbd\x18\x92\xfb\x87\x92\x9c\xeb\x05\x7d\x92\x96\x1c\x0e\x7f\x33\x9c\xf9\x71\x86\x97\xb0\x2e\x84\x81\xad\x28\x11\x38\x9a\x5c\x8b\x0d\x1a\xb0\x05\x82\xc9\x0b\xac\x18\x6c\xb5\xaa\xdc\x77\xb2\xcc\xc0\xa0\xde\x8b\x1c\x27\xa3\xcb\xd1\x25\x64\xf6\x8d\x01\xa9\x2c\x08\x8e\xac\x1c\xc3\xa6\xb1\xf0\x8c\x20\x11\x39\x58\x05\x15\x93\x0d\x2b\xcb\x03\xec\x50\xa2\x66\x16\xc1\x1e\x6a\x34\xb0\x55\xda\xe9\x5b\x1f\x6a\x5c\xe5\x5a\xd4\x16\x1e\xb2\xd1\x25\x3c\x17\x28\xc1\x76\x60\x84\x81\xa6\xe6\xcc\x22\x9f\x78\x88\x39\x93\xb0\x41\xe0\x4a\x22\x6c\x0e\xa0\x1b\x29\x85\xdc\xc1\xaf\x5e\x6a\x62\x8a\x5f\x41\x04\x05\x5c\x68\xcc\xad\xd2\x87\xc9\x28\xd8\xd7\x62\x30\xc1\xac\x09\x9f\x58\x73\x2a\x3f\x06\x26\x39\xe4\xaa\x16\x68\x40\x58\x32\x83\xa0\xfe\x50\x8b\x17\x81\x7f\x29\xd9\xc6\xfc\x95\xd5\x02\x6a\x96\x3f\xb1\x1d\x3a\x53\x1a\xe3\xe0\xf4\xd6\x4c\x46\xa3\xe0\xba\xdf\x47\x00\xbf\x35\xa8\x0f\x53\xf8\x17\xfd\x8c\x00\xaa\xc6\x32\x2b\x94\x9c\xc2\x6d\xf8\x37\xfa\x3c\x1a\x91\x63\xe0\xc1\xa0\xce\xe4\x56\xb9\x65\x82\x4f\x21\x9b\x5f\x8c\x00\x24\xab\x70\x0a\x2b\xab\x85\xdc\xd1\x37\x56\x4c\x94\xc3\x81\x5a\xe4\xb6\xd1\x91\x8c\xd2\xbb\xc5\xd1\x32\xa5\x77\xd9\x7c\x38\x20\x4c\x52\xd7\x5a\xed\x91\x4f\xe1\x47\xa5\x4a\x64\xf2\xa2\xc3\x72\xa7\x77\xff\x0b\x14\xc9\x36\x25\x7a\x35\xac\x34\x67\xf4\x90\x4d\x2b\xb4\x96\x0e\x8a\x74\x3d\xe1\x61\xa8\x60\xcf\xca\x66\xa0\xf1\xf3\x68\x84\xb2\xa9\x20\xd1\x56\x6c\x59\x6e\xc9\xa7\x6e\x19\x40\xb2\xfe\xf4\xb0\xb8\x5e\xdc\x7d\x58\xb4\x9f\x37\xd9\xe2\xe1\xdf\x9f\x92\xdb\xf9\xf7\x7f\x6f\x87\xe6\xc9\xfd\x87\x6c\x11\x8f\xcd\xee\x16\xeb\x24\x5b\xa4\xf7\x9f\x56\xe9\xfa\xd3\x2f\xc9\xed\xcd\xea\xfc\xd4\x19\x7d\xb1\xc0\x3a\xbd\x5d\xde\x24\xeb\x34\x28\xe9\xc0\x36\x56\xe5\xaa\xaa\x4b\xb4\x98\x4a\x2b\xec\x61\x65\x29\xd8\x09\x77\x92\xae\x06\xb0\xe9\x6b\x99\x2e\xe6\xd9\xe2\xe7\xf0\x75\xff\xb0\x58\xf4\x5f\x3f\x25\xd9\x4d\x3a\x0f\x1f\xeb\xf4\xfe\x36\x5b\x24\xeb\x74\x7e\x76\xa7\x24\xa7\xd8\xe9\x1c\x94\x44\xfe\xb9\x84\x44\x02\x72\x61\x81\x39\x31\x50\x79\xde\x68\x03\x62\x0b\x8c\xe2\x55\x43\xc1\x0c\x54\x8a\x8b\xad\xa0\x5c\x2d\x10\x84\xac\x1b\x0b\x16\x5f\x2c\x05\xb3\x90\x06\xb5\x3b\x34\xa5\x81\x63\x89\xee\x7f\x5e\x30\xcd\x72\x8b\xda\x4c\xdc\x26\x2e\xb1\x84\xcc\xcb\x86\x13\x65\x1c\x6a\xb7\x40\x3a\x7d\x4f\x78\xd8\x28\xa6\xb9\xcb\xa7\x9a\x19\xaf\x40\x55\x15\x93\xdc\x2d\x27\xc4\xe9\x3c\x5b\x7b\xb8\x60\xb0\xc4\xbc\xc7\x2b\xcb\xc3\x79\xd0\x79\xa1\x0c\x4a\x60\x12\xd8\xc0\x1b\x60\x9a\xdd\x0e\x0d\xad\x9d\xb4\xb0\xb8\xc8\x5d\xbe\x5b\xe5\xb6\x20\x50\xd1\x12\x5b\x30\x4b\x29\x6e\x0a\xd5\x94\x1c\x2a\xb5\x47\x27\x44\x5b\xbd\x31\x40\x7b\x13\x51\x79\x02\x90\xe4\x18\x46\x81\x5e\x6b\xe1\xa8\x8c\x6d\x5a\x2b\x56\xe9\x4d\x3a\x5b\xff\x41\x3c\x5c\x0b\xc9\x43\x38\x5c\x47\xe1\x70\xfd\x69\x79\x37\x0f\xff\x56\xef\x67\xed\xbf\xd9\x7d\xb6\x5c\x87\x8f\x45\x72\x9b\xae\x96\xc9\x2c\xed\x52\x6a\x8e\x75\xa9\x0e\x15\x4a\x7b\x8d\x87\xa3\x04\x3d\x4a\xaf\x5c\x23\xf1\x67\x62\x6f\xcd\x14\x7e\x2a\x15\xb3\x34\x4a\x2c\x1f\xe5\x9c\x53\x9b\x2c\xb3\xff\xab\x3e\x47\x78\x4e\x1d\x39\x74\xda\xb1\x5b\xe0\xa2\x69\x4b\x31\x17\x41\x22\xb0\x84\xb9\x7a\xc2\x83\x99\xc2\xc7\xa0\xef\xf1\xe2\xed\x14\x3e\x0e\x68\xe4\xe2\x31\x68\xa0\x31\x13\xe6\x9c\x22\x37\x91\x97\x8d\xb1\xa8\xaf\x82\x0d\x6f\xa7\x30\xf3\x23\xed\x5e\x41\xe0\xc7\x03\x11\xe4\x55\xc4\x68\xaf\x0a\xd3\x36\xc3\x99\xe1\x4e\x33\x25\x25\xba\xa8\x3d\xdd\xb3\x9f\xeb\x15\x8a\x96\xdc\xae\xd8\x80\xe5\xa6\x11\xe7\x39\x15\x37\x59\x3b\x44\x0b\x5b\x61\xd3\x2d\x5b\x1c\x41\x6f\xa5\x4d\xbb\xd7\x30\xda\xaf\x5c\x7e\xb7\xe2\xe3\x10\xdd\x4b\x65\xa6\x90\x49\x3b\x0e\x79\x37\x7d\x85\x62\xc6\xad\xb1\x0f\xfd\x15\xf2\x36\x16\xbe\x47\xd3\x94\xf6\x78\xdb\x9f\x04\x96\xfc\x78\xef\x2d\x0d\x06\xa3\xcf\xe6\xca\xd8\xf1\xaf\xc6\xdf\x1a\xa1\x91\x27\x7a\x47\xc2\x74\x06\xe7\xc5\x1f\x5f\x81\x17\x89\xaf\x3a\x82\x78\x1c\x39\x3e\xf0\x77\x75\xb5\xd3\x80\x92\xd7\x4a\x48\x6b\xc6\xa0\x71\x8b\x2e\xe7\xb9\xca\x5d\x75\x90\x97\xaa\xe1\xac\x16\x93\x5a\x2b\x47\x24\xa5\xd8\xe3\x7b\x81\xcf\x04\xe7\x26\xfc\xbf\x45\xcb\x38\xb3\xcc\xc7\x45\x2b\x31\x53\xd2\xa2\xb4\x66\x10\x16\x37\x47\x53\x24\x6e\x1c\x0e\x17\xf1\xee\x5f\xac\xcc\xcf\x9e\x51\xb5\x8a\x26\x2e\xbc\x4d\x9e\x1a\x28\x6b\x8d\xcb\xcb\x01\x51\xd0\x06\x11\x73\x78\xfd\x91\xcc\x40\x7d\x2c\xea\xb5\x53\xfd\x17\x54\xb3\x5a\x04\x9d\x9e\x36\xbc\x32\x3f\x3a\xd0\x12\x26\x7b\x8e\x39\x09\x18\x47\x10\x74\x93\xb8\x5a\xaa\x62\xd6\x22\x0f\x77\x91\x30\x83\x8b\xc9\x84\xd8\x79\x2e\x44\x5e\xb8\x8b\x60\x83\x28\xa1\x66\xda\x20\xa7\x1b\xeb\x94\xde\x55\x77\x07\x78\xfe\x67\x9b\x95\x55\x35\xd4\xca\x08\x0a\x03\x77\x09\x75\x7b\x66\xc3\x10\x75\xf2\x1f\x0a\xb4\x05\xea\x13\x0c\x84\x8b\x51\xe1\x22\xf8\x18\xf0\x05\xf3\xc6\x52\x11\xd4\xde\x6d\x13\x57\x59\xa5\xdd\x78\x57\x13\x79\x17\x96\xe5\xe0\xaa\xf2\xa5\x30\xb2\xbc\x00\xb5\x75\x1b\x05\x90\x0e\x1b\xfd\xef\x45\xa7\xf0\x71\x3d\x1c\x78\xec\x9c\x1a\x0d\x0f\xfc\x29\x24\xc7\x97\x81\x62\x7f\xe1\xd9\x02\x0d\x46\x18\x98\x76\xbe\x0f\x5b\x66\xb4\xca\x91\x42\xe4\x05\x7f\x3d\x93\xf9\x6c\xb0\x38\x94\xf2\x74\x52\x6c\x13\x36\x7c\x16\x65\x09\x15\x7b\xf2\x97\x69\xf0\xca\xc0\x51\xb4\x4f\xff\x95\x6c\x2d\x31\x3b\x29\x1f\x7a\xca\x44\x86\xbf\x96\xc7\xe7\xc2\xea\xc8\x15\x4f\x42\xf2\xd7\x68\xe6\xa8\xa0\x0d\x37\x19\xa5\x95\xa3\xc2\x6e\xb4\x62\x36\x2f\x28\x44\x38\xbe\x38\x1a\xca\xa4\x7d\x24\x90\x54\xe6\x9d\x53\xee\xea\xbf\xae\x1e\x08\x77\x01\x0d\x36\x66\x70\x3e\x1c\xb7\x8c\x32\xc0\xa9\xa1\x2a\x47\x2a\x5b\x84\x00\x7b\x92\xea\x59\x92\xa7\x66\xab\xa8\xac\xa3\x75\x41\xde\x40\x81\xac\xb4\xc5\x81\x96\x16\xc8\xb4\xdd\x20\xb3\xfe\x38\x35\xe6\x28\xf6\xc8\xa9\x18\xd3\xb8\x6b\x4a\xa6\x41\x48\x8b\x9a\xaa\x74\x57\x91\xd9\xc2\x67\x45\x20\x4e\x52\xa7\xd1\xd4\x4a\x72\x42\x60\x95\x63\x5f\x34\xd6\x04\x10\xef\xd2\xe4\x66\xfd\xee\x97\x53\x10\x8d\x1c\xc0\x70\x27\xde\x6b\xcc\xfd\xf5\xe7\xbb\xc1\x25\x75\x50\x30\x23\x3e\x75\x08\x84\x01\x6a\x1b\x04\x6f\x13\xae\xb7\xc1\x77\x92\xc2\xc8\x37\xd6\xb7\x4f\x2e\xc1\x28\xd6\x8c\xaa\xc8\x3a\x66\xba\x3a\x4f\xa3\xc1\x6a\x53\xa2\x81\x77\xeb\xf5\xf2\x8d\x81\xef\xbe\xfd\xd6\xa1\x6b\x4c\xe7\xbf\xf3\xe0\x5d\xa0\xee\x94\x63\x7b\x61\x7a\xac\xc1\x8e\x9f\xef\x97\xb3\xd6\x02\x8a\xa6\x8d\x46\xf6\x64\x26\x4e\x41\xa1\x6a\xf4\xfc\xc4\x6c\x57\x5c\xb6\x86\x3b\xbd\x39\x01\xdd\xb0\xfc\x89\x4a\x59\x21\xd1\x99\xac\xd1\x34\x15\x25\x26\x04\x44\x1e\x49\xc0\x39\xcf\x56\xb3\xbb\xc5\x22\x9d\xad\x5d\x0f\x70\xec\x67\x6a\x72\xe9\x6c\x42\x97\x1c\x39\x5a\xf8\x91\x5a\xab\x1c\x8d\xa1\x9c\x6f\xc5\x5b\x1f\x2c\xe7\xc9\xda\x37\x1a\x5e\xef\x5e\xfc\x47\xb4\x15\x75\x6b\xb9\x77\x3b\x0d\x51\x4f\x6f\x50\x5a\x60\xf2\x00\xca\x11\xc0\xb6\xd1\x9e\x08\x7c\x18\xfb\x9e\xdb\x00\xdb\xa8\xc6\xbb\xe0\x39\x30\x85\xb0\xc3\xd8\xa4\xfe\x38\x86\x72\x6a\x63\xc0\xf2\xcc\x0c\x58\x7d\x08\xf1\xe7\x37\xf0\x90\xb6\x4c\x94\xd8\x45\x8d\x54\xcf\x64\x30\x83\x0d\xe3\x91\x03\x9d\x91\x69\xdb\x45\xb5\xe4\xf0\xde\x69\x9f\x29\xb9\x15\xbe\x05\xad\x99\x31\xb6\xd0\xaa\xd9\x15\xa9\xeb\x5f\xcf\xf5\xbf\x74\xb1\x32\x21\xa3\xb4\x3d\xee\x7e\xcf\x57\xc3\x81\x15\x7a\xb1\x0a\x8d\x61\xbb\x68\xc8\x47\xf0\x69\xcd\x7c\xfd\x0f\x93\xee\xc9\xef\xbf\x9f\x5f\xb7\x15\xda\xd8\xb5\xa8\x30\xda\xb1\x64\x27\x83\xad\xc2\xa5\xe2\x7f\xca\x80\xc6\x7c\xa5\x05\x40\x61\xe4\x3d\xe6\x8a\xe5\xd8\x7d\xbe\x3c\x40\x32\x8d\x66\x5b\x33\x69\xb8\x73\x78\x5f\x5e\x1f\xf5\x20\x2d\x9e\x88\x47\x5b\xbb\xdf\xb5\xa4\x11\x99\xb0\x1f\x9c\xf9\x34\x8a\x80\x7e\xf6\x3d\x6a\x23\x8e\x4c\xf0\x3b\xbc\x3e\x73\xfc\xa6\x52\x6b\xb4\xf6\x30\x3b\x3f\x79\x5a\x93\xb6\x6e\xd2\xaa\x5c\x96\x4c\x62\x77\x3a\xee\x56\xe9\xbe\xbc\xb7\x64\x53\x2d\x14\x47\x5f\xa0\x87\x81\x4c\x1a\xab\x1b\xaa\xca\x90\x0f\x27\x8f\x9c\x18\xb7\x1d\xde\x9d\x75\xc2\xb9\x46\x13\x9d\xab\x55\x4f\x78\x26\x0a\x7d\x43\xb5\x17\xe1\x0d\xe3\xe4\xbd\x49\xb8\xb9\x1b\x21\x9f\x4e\xd7\xb6\x8f\x5a\x6e\xe5\xcc\xc5\x57\x00\x15\xf5\x56\xf0\x03\xc7\x5a\x23\x15\x67\xfc\xaa\x8d\xa5\x6f\x82\x80\xbf\xc3\x28\xcd\x43\x80\xc2\x5e\x30\xa8\x5f\x42\xb1\xfa\xcd\xdb\x11\xc0\x83\xa3\x87\xe1\xc9\x5e\x05\x7f\x93\xbb\xb3\xf9\xc5\xf8\x28\x08\x52\x2e\x5c\xc1\x11\x05\xc3\x69\xc3\xe7\x21\x47\xd5\xef\x49\x31\x0c\x30\x47\xba\xec\xe7\xaf\xd4\xce\x1d\x99\xb4\xea\x7c\x19\xdc\x97\xc3\xad\x02\xff\x7d\x7e\xa5\x37\xf0\xe1\x8f\x1a\xe3\xb1\x7f\x3e\xfb\x72\xb3\xec\x0f\x93\x86\xaf\xe2\xc3\x1c\x7b\x46\x89\x22\x77\xec\xf2\xea\xb8\xb9\xec\x63\x22\x06\xb7\x44\x5d\x09\x43\xe9\x62\xae\xa8\x8b\xef\xbc\xdf\xc4\x93\xfd\x01\x1c\xad\xea\x95\xfb\x03\xf0\xaa\xef\xf4\xae\x33\x3b\x3c\x5c\x3a\xad\xaa\x1f\xef\x35\x0e\x84\x49\x5b\xf7\xae\xf0\x79\x34\xf2\x85\xfb\xb9\xb3\xff\xd2\x55\x70\xba\xfa\x08\xb8\x4f\xab\xd3\x37\xd4\xd3\x85\x03\x7c\x3e\xa1\x5e\x79\x35\xed\xd3\xb8\x6f\xfd\xfd\x03\x8a\x8e\xf2\xcf\x14\xec\x6f\xdf\x7d\x7f\xe6\x05\x67\xf8\x00\xe0\xe1\x59\xac\x5c\x01\xdd\x3e\x24\x3c\x9e\x4a\x3b\xc1\xfd\x19\xca\x2b\x98\xdc\x61\xa9\x76\x11\x63\x88\x0a\x8d\x65\x55\x1d\xdf\x35\x97\x70\xff\x85\xc6\xd9\x6d\x79\xdc\x2f\x7f\xe1\x75\xf9\xe4\x5d\xe9\x2b\xb7\x69\x9b\xe3\x70\x9b\xfa\x3d\xa7\x27\x28\x1c\x91\xbf\x94\xad\x74\xf4\x3c\x2d\xcc\x3f\x57\x77\x8b\x3f\x03\x22\x6e\xe6\xbf\xca\x52\xa0\x1a\xac\x45\x19\xd7\x26\x5f\xb5\xf9\x2b\xf6\x1f\x3d\x33\x84\x3b\x29\x36\xfd\xf3\xe8\xbf\x01\x00\x00\xff\xff\x7f\x8c\x5c\xd1\x17\x1a\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6679, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
