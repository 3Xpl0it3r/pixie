// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\xb8\x22\x0f\x6d\x80\xc4\x0f\xc3\xd6\x07\xbd\x69\xb6\xb7\x0a\x4d\x9c\x2c\x76\xda\x75\x43\x11\x9c\xc8\xb3\x45\x58\x22\x55\xf2\xe4\xc4\x1b\xfa\xdd\x07\x92\x92\x2c\x25\xe9\x9e\x44\x1d\xef\xcf\x8f\x77\xbf\x3b\xf2\x0c\x36\xa5\x72\xb0\x55\x15\x81\x24\x27\xac\x2a\xc8\x01\x97\x04\x4e\x94\x54\x23\x6c\xad\xa9\xc3\x7f\x76\x9b\x83\x23\x7b\x50\x82\x66\xc9\x59\x72\x06\x39\xbf\x75\xa0\x0d\x83\x92\x84\xd5\x05\x14\x2d\xc3\x23\x81\x26\x92\xc0\x06\x6a\xd4\x2d\x56\xd5\x11\x76\xa4\xc9\x22\x13\xf0\xb1\x21\x07\x5b\x63\x83\xbf\xcd\xb1\xa1\xb5\xb0\xaa\x61\xb8\xcf\x93\x33\x78\x2c\x49\x03\x0f\x60\x94\x83\xb6\x91\xc8\x24\x67\x11\xa2\x40\x0d\x05\x81\x34\x9a\xa0\x38\x82\x6d\xb5\x56\x7a\x97\x26\x67\x00\x3b\x8b\x4d\xf9\xad\xba\x8c\x90\x2f\x43\x9c\xe8\xb9\x8f\x7d\xc9\xae\x3b\xd0\xac\x53\x86\xcb\x4b\xd3\x72\xd3\x72\x2f\x97\x33\x76\x01\x86\x12\x25\x3c\xaa\xaa\x1a\x01\x2f\x09\x3a\x65\xef\x3b\x02\xe4\x12\x39\xea\x15\x04\x8d\x12\x7b\x92\xd0\x36\x1e\x9a\x57\xbf\xcf\x67\x49\x97\xdb\x91\xff\x60\xe9\xc0\x95\xa6\xad\x24\xd0\x93\x72\x0c\x4a\xc7\x74\x63\x4d\x20\x95\x25\xc1\xc6\x1e\x01\xc7\x45\x18\x30\x7b\xf3\x59\x92\x74\xa5\xf9\x37\x01\xf8\xd6\x92\x3d\xa6\xf0\x87\xff\x24\x00\x75\xcb\xc8\xca\xe8\x14\xae\xbb\x55\xf2\x3d\x49\x02\xe8\x7b\x47\x36\xd7\x5b\x13\xcc\x94\x4c\x21\x5f\xbc\x49\x00\x34\xd6\x94\xc2\x9a\xad\xd2\x3b\xff\x4f\x35\xaa\x6a\x2c\x68\x94\xe0\xd6\x4e\x74\x8c\xdd\xad\x26\x66\xdf\x93\x84\x74\x5b\x43\x66\x59\x6d\x51\xb0\xaf\x6d\x88\x03\x90\x6d\x1e\xee\x57\x1f\x57\x37\x9f\x57\xfd\xef\x55\xbe\xba\xff\xf3\x21\xbb\x5e\xbc\xff\xb9\x17\x2d\xb2\xbb\xcf\xf9\x6a\x2a\x9b\xdf\xac\x36\x59\xbe\x5a\xde\x3d\xac\x97\x9b\x87\x2f\xd9\xf5\xd5\xfa\xf5\xad\xb1\xbf\x01\x48\xcb\x46\x98\xba\xa9\x88\x29\x13\x3e\x0f\x03\xa4\x6c\x82\xe8\x0c\x32\x0d\x24\x15\x03\x06\x35\x30\x42\xb4\xd6\x81\xda\x02\x42\xeb\xc8\x42\x89\x0e\x6a\x23\xd5\x56\x79\x5e\x97\x04\x4a\x07\x22\xd0\x13\xfb\x62\x2b\xed\xc8\xb2\xd2\x3b\x30\x16\x24\x55\x14\xd6\xa2\x44\x8b\x82\xc9\xba\x59\x08\x12\x88\xa0\xb4\xa8\x5a\xe9\xdb\xeb\xd8\x04\x83\x58\xf9\x3d\x1d\x0b\x83\x56\x02\x6a\x09\x0d\xba\xe8\xc0\xd4\x35\x6a\x19\xcc\x3d\xe2\xe5\x22\xdf\x44\xb8\xe0\xa8\x22\x71\xc2\xab\xab\xe3\xeb\xa0\x45\x69\x1c\x69\x40\x0d\x38\xca\x06\xb8\x76\xb7\x23\xe7\x6d\x67\x3d\x2c\xa9\x04\xb2\xc7\x65\x42\x08\x0f\x6a\x62\x12\xa8\xae\xb8\xe7\x6d\x6d\x0e\xb1\x27\x7c\xa8\xb7\x0e\x7c\x6c\xdf\xd4\x26\x08\xb5\x4f\x0c\x36\x8d\x35\x8d\x55\xa1\x7b\xb0\xe8\x4f\xb1\x5e\x5e\x2d\xe7\x9b\x57\xab\xb4\xd4\xac\xf8\xf8\x51\x69\x19\xab\xb4\xfc\x38\xaa\x92\xff\xbb\xbd\x59\x74\xab\xf5\xa7\x79\xbf\x9a\xdf\xe5\xb7\x9b\xee\x67\x95\x5d\x2f\xd7\xb7\xd9\x7c\x39\x50\x3e\x74\x45\x70\xe7\x91\xa6\x43\x0b\x78\x0e\x8b\xaa\x75\xec\x85\xf3\xb8\x78\x26\x9f\x1b\xad\x49\xc4\x56\x9a\x3f\x17\x9d\x74\x55\xcf\xf8\x77\x38\xa2\x7e\x3a\x69\x84\xf3\x14\xe6\x57\x79\x2f\xf1\x76\xbd\xae\x1b\xac\xc6\xed\x74\x7e\x32\x77\x7d\xa4\x71\x39\xde\x05\x02\xf6\xda\x17\x5d\xfa\x6f\x8d\x4b\x21\xd7\x7c\xd1\x11\x23\xfd\x41\x0f\x9c\x4f\x37\xee\xc8\xb5\x15\xbf\x19\x52\xf6\x72\x2f\xe4\xcf\x33\x98\xfc\xe8\xae\x91\x99\x64\xd7\x03\xca\x8d\x1a\xc2\x75\x70\xe2\x00\xf5\x04\x2c\x88\x34\x34\x68\x1d\xc9\x7e\x2c\x4e\x69\x65\x06\xee\x45\xde\x61\xb1\x66\xd3\x40\x63\x9c\xf2\x70\x03\xf9\x87\x98\xf9\xf8\xd4\x41\xff\x73\x49\x5c\x92\x7d\x81\xc1\xe3\x42\x38\x60\xa5\xe4\x05\xd0\x13\x89\x96\xb1\xa8\xa8\xef\x29\xef\x55\xb9\xe5\x20\x4f\xe1\x57\x63\x2a\x42\x1d\xfb\xab\xaa\x46\x2d\x12\xaf\x2b\x42\x51\x82\xd9\x86\x40\x1d\xc8\x80\xcd\xaf\x4f\xaa\x29\xfc\xbd\x19\x0b\xbe\x0e\x49\x9d\x88\x47\xf9\x54\x5a\xd2\xd3\xc8\x71\x6c\x34\x2e\xc9\xd1\x04\x03\xda\x90\xfb\x2e\x64\xee\xad\x42\xad\x27\x59\x88\x63\xc1\x1f\x1f\x47\xc6\xdd\x75\xeb\x2b\x85\x45\x17\x30\x5c\x5a\x35\xee\x63\x13\x77\x59\x19\x25\xca\xc7\x39\xfd\x65\x5b\x26\xbb\x0e\xce\xc7\x99\x72\x93\x83\x8f\x69\xf3\x5a\x06\x5e\xdf\x0f\xa9\xd8\x2b\x2d\xd3\x1f\x8c\x82\x67\xf7\x53\x02\xdd\x1b\xa5\x89\x0c\xef\xa4\xfd\x38\xe9\xfa\x74\xcd\xc8\xad\x1b\xa5\x59\xd2\x16\x3d\x91\x1d\xfb\x71\xa4\xb6\xfe\xd1\x52\x76\x3c\xd9\x6b\xf3\xa8\xfd\x81\x3f\xfd\xf5\xb0\x9e\x5e\x0c\xde\xb4\x33\x71\x50\x12\x56\x5c\x1e\xbd\x75\x49\x68\xb9\x20\xe4\x58\x18\x4b\x82\xd4\x81\xa4\x1f\xe7\x96\x76\x6d\x85\x16\x94\x66\xb2\x07\xac\x5c\x98\xe9\x5c\x46\x7e\x77\xa3\xc5\xbb\xb3\xe4\x1a\xa3\xa5\x07\xc1\x06\x2c\x7d\x6b\xc9\xb1\x3b\xe1\xf8\xb0\xcc\xae\x36\x1f\xbe\x3c\xc3\x11\x5f\x25\xc6\x9b\x48\xe5\x44\x9c\x47\xbe\x1b\x23\x83\x7e\xbf\xbb\x9d\x83\x18\xa6\x14\x14\x96\x70\xef\x66\xc1\x41\x69\x1a\x8a\xfd\x8a\x3c\x0c\xf9\x1e\x50\xf0\x2b\x4c\x4d\x50\xa0\xd8\xfb\x2b\x45\x69\x0a\xd0\x2d\xb9\xb6\xf6\x44\x85\x0e\x51\x44\x72\x02\xba\xc8\xd7\xf3\x9b\xd5\x6a\x39\xdf\x2c\x17\x43\xb5\x3f\xa9\x7f\x54\x98\x97\x5b\xb5\x0b\x75\x68\xd0\x39\x2e\xad\x69\x77\xe5\x52\x7b\x52\xc9\x13\x95\x7a\xa3\xd1\x1c\x7e\xf6\x44\x71\xa1\xa0\xe9\xb4\xbe\x7e\xa3\x42\xc7\x1f\xfa\x6a\x5c\xbb\x14\x7e\xab\x0c\x86\x09\x7b\x18\x21\x48\x27\x78\xde\x3c\x0f\x38\x1d\xeb\x31\x74\x93\x49\x69\xc9\xb9\xf1\xa3\x87\xcd\x9e\xf4\xe4\xc9\x13\xbc\xf4\xef\xac\x60\x38\xb7\x84\x4c\xf3\x57\xae\x96\x04\xe0\x3e\x3c\x67\xc7\x58\xde\x75\x05\xc8\x17\xe1\xa8\x17\xff\x97\xa7\xf3\x61\x35\x3a\xc1\xe9\x5a\xe9\x5e\x5b\xad\x9d\xbc\xdd\x00\x5c\x89\x3f\xfd\xf2\xfe\x25\xec\xc9\x0d\x13\x0f\xcd\x54\x87\x56\xee\x76\xbe\xbe\xd0\x0d\x6a\x07\xb2\x6e\xd4\x7c\xe1\x1a\x2c\x51\xef\xa8\x32\xbb\x49\xba\x54\x4d\x8e\xb1\x6e\x46\x75\xf9\x9e\xfc\x17\x00\x00\xff\xff\x8a\x24\xec\x8b\x6f\x0c\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3183, mode: os.FileMode(420), modTime: time.Unix(1586894904, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
