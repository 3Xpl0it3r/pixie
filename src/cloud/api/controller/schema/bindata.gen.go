// Package schema Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4f\x6f\xdb\xb8\x12\xbf\xeb\x53\x4c\x90\x43\x13\x20\xf1\xe1\xe1\xbd\x1e\x74\xf3\xb3\xfd\x5e\xb5\x4d\x9c\x6c\xec\xa4\xdb\x2d\x8a\x60\x4c\x8e\x2d\xc2\x12\xa9\x92\x23\x27\xde\x45\xbe\xfb\x82\xa4\x24\x4b\x4e\xba\x45\xf7\x24\x8a\x9c\x3f\xbf\xf9\x3f\xa7\xb0\xcc\x95\x83\xb5\x2a\x08\x24\x39\x61\xd5\x8a\x1c\x70\x4e\xe0\x44\x4e\x25\xc2\xda\x9a\x32\xfc\x8f\x6f\x33\x70\x64\x77\x4a\xd0\x28\x39\x4d\x4e\x21\xe3\x77\x0e\xb4\x61\x50\x92\xb0\xb8\x80\x55\xcd\xf0\x44\xa0\x89\x24\xb0\x81\x12\x75\x8d\x45\xb1\x87\x0d\x69\xb2\xc8\x04\xbc\xaf\xc8\xc1\xda\xd8\x20\x6f\xb9\xaf\x68\x21\xac\xaa\x18\xee\xb3\xe4\x14\x9e\x72\xd2\xc0\x1d\x18\xe5\xa0\xae\x24\x32\xc9\x51\x84\x28\x50\xc3\x8a\x40\x1a\x4d\xb0\xda\x83\xad\xb5\x56\x7a\x93\x26\xa7\x00\x1b\x8b\x55\xfe\xad\xb8\x8c\x90\x2f\x83\x9e\x28\xb9\xd5\x7d\xc9\xae\x31\x68\xd4\x10\xc3\xe5\xa5\xa9\xb9\xaa\xb9\xbd\x97\x23\x76\x01\x86\x12\x39\x3c\xa9\xa2\xe8\x01\xcf\x09\x1a\x62\x2f\x3b\x02\xe4\x1c\x39\xd2\xad\x08\x2a\x25\xb6\x24\xa1\xae\x3c\x34\x4f\x7e\x9f\x8d\x92\xc6\xb7\x3d\xf9\x81\xd3\x81\xcb\x4d\x5d\x48\xa0\x67\xe5\x18\x94\x8e\xee\xc6\x92\x40\x2a\x4b\x82\x8d\xdd\x03\xf6\x83\xd0\x61\xf6\xec\xa3\x24\x69\x42\xf3\x67\x02\xf0\xad\x26\xbb\x4f\xe1\x57\xff\x49\x00\xca\x9a\x91\x95\xd1\x29\x5c\x37\xa7\xe4\x25\x49\x02\xe8\x7b\x47\x36\xd3\x6b\x13\xd8\x94\x4c\x21\x9b\x9e\x24\x00\x1a\x4b\x4a\x61\xc1\x56\xe9\x8d\xff\xa7\x12\x55\xd1\xbf\xa8\x94\xe0\xda\x0e\x68\x8c\xdd\xcc\x07\x6c\x2f\x49\x42\xba\x2e\x61\x6c\x59\xad\x51\xb0\x8f\x6d\xd0\x03\x30\x5e\x3e\xde\xcf\x3f\xce\x6f\x3e\xcd\xdb\xdf\xab\x6c\x7e\xff\xdb\xe3\xf8\x7a\xfa\xfe\xdf\xed\xd5\x74\x7c\xf7\x29\x9b\x0f\xef\x26\x37\xf3\xe5\x38\x9b\xcf\xee\x1e\x17\xb3\xe5\xe3\xe7\xf1\xf5\xd5\xe2\xed\xa7\xbe\xbc\x0e\x48\xcd\x46\x98\xb2\x2a\x88\x69\x2c\xbc\x1f\x3a\x48\xe3\x01\xa2\x53\x18\x6b\x20\xa9\x18\x30\x90\x81\x11\xa2\xb6\x0e\xd4\x1a\x10\x6a\x47\x16\x72\x74\x50\x1a\xa9\xd6\xca\xe7\x75\x4e\xa0\x74\x48\x04\x7a\x66\x1f\x6c\xa5\x1d\x59\x56\x7a\x03\xc6\x82\xa4\x82\xc2\x59\xe4\x68\x51\x30\x59\x37\x0a\x4a\x42\x22\x28\x2d\x8a\x5a\xfa\xf2\xda\x57\x81\x21\x46\x7e\x4b\xfb\x95\x41\x2b\x01\xb5\x84\x0a\x5d\x14\x60\xca\x12\xb5\x0c\xec\x1e\xf1\x6c\x9a\x2d\x23\x5c\x70\x54\x90\x38\xe0\xd5\xc5\xfe\x6d\xd0\x22\x37\x8e\x34\xa0\x06\xec\x79\x03\x5c\xbd\xd9\x90\xf3\xbc\xa3\x16\x96\x54\x02\xd9\xe3\x32\x41\x85\x07\x35\x60\x09\xa9\xae\xb8\xcd\xdb\xd2\xec\x62\x4d\x78\x55\xef\x1c\x78\xdd\xbe\xa8\x4d\xb8\xd4\xde\x31\x58\x55\xd6\x54\x56\x85\xea\xc1\x55\x6b\xc5\x62\x76\x35\x9b\x2c\xdf\x8c\xd2\x4c\xb3\xe2\xfd\x47\xa5\x65\x8c\xd2\xec\x63\x2f\x4a\xfe\xef\xf6\x66\xda\x9c\x16\x0f\x93\xf6\x34\xb9\xcb\x6e\x97\xcd\xcf\x7c\x7c\x3d\x5b\xdc\x8e\x27\xb3\x2e\xe5\x43\x55\x04\x71\x1e\x69\xda\x95\x80\xcf\x61\x51\xd4\x8e\xfd\xe5\x24\x1e\x8e\xee\x27\x46\x6b\x12\xb1\x94\x26\xc7\x57\x07\x5a\xd5\x66\xfc\x19\xf6\x52\x3f\x1d\x14\xc2\x79\x0a\x93\xab\xac\xbd\xf1\x7c\x2d\xad\xeb\xb8\xfa\xe5\x74\x7e\x60\x77\xad\xa6\x7e\x38\xce\x42\x02\xb6\xd4\x17\x8d\xfb\x6f\x8d\x4b\x21\xd3\x7c\xd1\x24\x46\xfa\x9d\x1a\x38\x1f\x3e\xdc\x91\xab\x0b\x3e\x49\x42\xe0\x63\x3b\x2e\x37\x16\x48\xcb\xca\x28\xcd\xee\x02\x2c\xad\x29\x04\x57\x1a\xe1\x93\x05\x44\x61\x6a\x89\x95\x1a\x55\xd6\x84\x8c\x29\xd4\x8e\x1e\x14\x3d\xb9\x14\xbe\x5c\x35\xe7\x6b\x62\x94\xc8\x78\xf2\xf5\xa4\x47\x31\x31\x9a\x49\xb3\x3b\x6b\xfa\xcf\x79\x0a\x57\x47\x4f\x9e\x3c\x36\x6f\x2f\x2e\x22\x1a\x0a\x8b\xaf\x6f\x88\x5a\x0c\x1e\x4e\xba\x34\x78\x6d\x6f\xc8\x09\x5f\x95\xe4\xc7\x51\x89\xcc\x24\x9b\xba\x56\xae\x57\xe4\xae\x71\x71\x1c\x0a\xbe\xa8\x56\x44\x1a\x2a\xb4\x8e\x64\xdb\xea\x87\xa5\x62\xba\x7a\x8a\xb5\x84\xab\x05\x9b\x0a\x2a\xe3\x94\x0f\x41\x28\xe8\x4e\x67\xd6\x8f\x64\xa0\xff\x94\x13\xe7\x64\x5f\x61\xf0\xb8\x10\x76\x58\x28\x79\x01\xf4\x4c\xa2\x66\x5c\x15\xd4\xf6\x09\x2f\x55\xb9\x59\x77\x9f\xc2\x7f\x8d\x29\x08\x75\xec\x19\x45\xd1\x2b\xfb\x38\x82\x09\x45\x0e\x66\x1d\x14\x35\x20\x03\x36\x7f\x3e\x90\xa6\xf0\x65\xd9\xbf\xf8\xda\x39\x75\x70\xdd\xf3\xa7\xd2\x92\x9e\x7b\x82\x63\xf3\xe0\x9c\x1c\x0d\x30\xa0\x0d\xbe\x6f\x54\x66\x9e\x2b\xe4\xef\xc0\x0b\xb1\xd5\x79\xf3\xb1\xc7\xdc\xac\x10\x3e\x52\xb8\x6a\x14\x86\x41\x5c\xe2\x36\x36\xa6\xc6\x2b\x3d\x47\x79\x3d\x87\xbf\xf1\x9a\xc9\x2e\x82\xf0\xbe\xa7\xdc\xc0\xf0\x7e\xda\xbc\xe5\x81\xb7\xdf\x83\x2b\xb6\x4a\xcb\xf4\x3b\xed\xed\x68\xe6\x26\xd0\xec\x5d\x55\xac\xda\xe6\xb6\x6d\x91\x4d\xef\x59\x30\x72\xed\x7a\x6e\x96\xb4\x46\x9f\xc8\x8e\x7d\x8b\x55\x6b\xbf\x88\xe5\x4d\x9e\x6c\xb5\x79\xd2\xde\xe0\x87\xdf\x1f\x17\xc3\x61\xe7\x59\x1b\x16\x07\x39\x61\xc1\xf9\xde\x73\xe7\x84\x96\x57\x84\x1c\x03\x63\x49\x90\xda\x91\xf4\x23\xca\xd2\xa6\x2e\xd0\x82\xd2\x4c\x76\x87\x85\x0b\x73\x8a\xf3\x98\xdf\x4d\xbb\xf4\xe2\x2c\xb9\xca\x68\xe9\x41\xb0\x01\x4b\xdf\x6a\x72\xec\x0e\x38\x3e\xcc\xc6\x57\xcb\x0f\x9f\x8f\x70\xc4\x4d\xcb\x84\x06\xa3\x9c\x88\x3d\xd6\x57\x63\xcc\xa0\xff\xdf\xdd\x4e\x40\x74\x9d\x17\x56\x96\x70\xeb\x46\x41\x40\x6e\x2a\x8a\xf5\x8a\xdc\x0d\xae\x16\x50\x90\x2b\x4c\x49\xb0\x42\xb1\xf5\x63\x52\x69\x0a\xd0\x2d\xb9\xba\xf4\x89\x0a\x0d\xa2\x88\xe4\x00\x74\x9a\x2d\x26\x37\xf3\xf9\x6c\xb2\x9c\x4d\xbb\x68\x3f\xa8\x3f\x54\x98\x01\x6b\xb5\x09\x71\xa8\xd0\x39\xce\xad\xa9\x37\xf9\x4c\xfb\xa4\x92\x87\x54\x6a\x99\x7a\xb3\xe5\x68\xed\x72\x21\xa0\xe9\x30\xbe\xa1\x55\xa2\xe3\x0f\x6d\x34\xae\x5d\x0a\xff\x2b\x0c\x86\xa9\xb1\xeb\x21\x48\x07\x78\x4e\x8e\x15\x0e\x47\x55\x54\x5d\x8d\xa5\xb4\xe4\x5c\x7f\x91\x63\xb3\x25\x3d\x58\xe3\x82\x94\x76\x77\x0c\x8c\x13\x4b\xc8\x34\x79\x63\x5c\x26\x00\xf7\x61\x45\xef\x63\x39\x6b\x02\x90\x4d\x83\xa9\x17\x7f\xe7\xa7\xf3\xee\xd4\xb3\xe0\x30\x2a\x9b\x0d\xb2\xb6\x83\x7d\x14\xc0\xe5\xf8\xaf\xff\xbc\x7f\x0d\x7b\x30\x35\xa3\xd1\x4c\x65\x28\xe5\xe6\xe5\xeb\x2b\xda\x40\xb6\x23\xeb\x7a\xc5\x17\x46\x7b\x8e\x7a\x43\x85\xd9\x0c\xdc\xa5\x4a\x72\x8c\x65\xd5\x8b\xcb\x4b\x92\x9c\xc2\xdd\x0f\x66\x64\x50\x79\x3c\x1a\x7f\xb0\x88\xfb\xae\x30\xb0\xf1\x27\xd5\xb4\x73\x30\xa8\x29\x1b\x9d\xe9\x2b\x14\x61\xc5\x7f\x2e\x5a\xea\x3e\x82\x9d\x72\xbf\x2c\x6e\xe6\xff\x04\xc4\x70\x6e\xff\x94\xa5\xe0\xe7\x6c\x8b\x72\x98\x20\x3f\xa5\xfc\x3b\xf6\x1f\x6d\x14\x3e\xd4\xaf\x4c\x7f\x49\xfe\x0a\x00\x00\xff\xff\x4e\xb6\x57\x54\x17\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3863, mode: os.FileMode(436), modTime: time.Unix(1587081016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
