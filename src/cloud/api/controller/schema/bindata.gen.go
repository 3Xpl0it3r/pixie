// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x73\xe3\xb8\xd1\xbe\xf3\x57\xb4\xd7\x87\xb5\xab\x6c\x1d\xde\x7a\xb3\x07\x9e\xc2\x48\x9a\x1d\x66\x6c\xd9\xb1\xe4\x99\x6c\xb6\x5c\x2e\x88\x68\x89\x28\x93\x00\x07\x68\xca\x56\x52\xf3\xdf\x53\x0d\x80\x14\x29\x79\xb2\x35\xa9\xca\xc9\x14\xd0\x1f\x4f\x7f\x37\x7c\x0e\xab\x52\x39\xd8\xa8\x0a\x41\xa2\x2b\xac\x5a\xa3\x03\x2a\x11\x5c\x51\x62\x2d\x60\x63\x4d\xed\x7f\x67\xf7\x39\x38\xb4\x3b\x55\xe0\x24\x39\x4f\xce\x21\xa7\x9f\x1d\x68\x43\xa0\x24\x8a\xea\x0a\xd6\x2d\xc1\x2b\x82\x46\x94\x40\x06\x6a\xa1\x5b\x51\x55\x7b\xd8\xa2\x46\x2b\x08\x81\xf6\x0d\x3a\xd8\x18\xeb\xe5\xad\xf6\x0d\x2e\x0b\xab\x1a\x82\xc7\x3c\x39\x87\xd7\x12\x35\x50\x0f\x46\x39\x68\x1b\x29\x08\xe5\x24\x40\x2c\x84\x86\x35\x82\x34\x1a\x61\xbd\x07\xdb\x6a\xad\xf4\x36\x4d\xce\x01\xb6\x56\x34\xe5\xd7\xea\x3a\x40\xbe\xf6\x7a\x82\xe4\x4e\xf7\x35\xb9\x68\xd0\x24\x12\xc3\xf5\xb5\x69\xa9\x69\xa9\x3b\x97\x13\x72\x1e\x86\x2a\x4a\x78\x55\x55\x35\x00\x5e\x22\x44\x62\x96\x1d\x00\x52\x29\x28\xd0\xad\x11\x1a\x55\xbc\xa0\x84\xb6\x61\x68\x4c\xfe\x98\x4f\x92\xe8\xdb\x81\x7c\xcf\xe9\xc0\x95\xa6\xad\x24\xe0\x9b\x72\x04\x4a\x07\x77\x8b\x1a\x41\x2a\x8b\x05\x19\xbb\x07\x31\x0c\x42\x8f\x99\xd9\x27\x49\x12\x43\xf3\xaf\x04\xe0\x6b\x8b\x76\x9f\xc2\xdf\xf8\x4f\x02\x50\xb7\x24\x48\x19\x9d\xc2\x6d\xfc\x4a\xbe\x25\x89\x07\xfd\xe8\xd0\xe6\x7a\x63\x3c\x9b\x92\x29\xe4\xb3\xb3\x04\x40\x8b\x1a\x53\x58\x92\x55\x7a\xcb\xbf\xb1\x16\xaa\x1a\x1e\x34\xaa\xa0\xd6\x8e\x68\x8c\xdd\x2e\x46\x6c\xdf\x92\x04\x75\x5b\x43\x66\x49\x6d\x44\x41\x1c\x5b\xaf\x07\x20\x5b\x3d\x3f\x2e\x3e\x2d\xee\xbe\x2c\xba\x9f\x37\xf9\xe2\xf1\xef\xcf\xd9\xed\xec\x97\xff\xef\x8e\x66\xd9\xc3\x97\x7c\x31\x3e\x9b\xde\x2d\x56\x59\xbe\x98\x3f\x3c\x2f\xe7\xab\xe7\xdf\xb2\xdb\x9b\xe5\xfb\x57\x43\x79\x3d\x90\x96\x4c\x61\xea\xa6\x42\xc2\xac\x60\x3f\xf4\x90\xb2\x11\xa2\x73\xc8\x34\xa0\x54\x04\xc2\x93\x81\x29\x8a\xd6\x3a\x50\x1b\x10\xd0\x3a\xb4\x50\x0a\x07\xb5\x91\x6a\xa3\x38\xaf\x4b\x04\xa5\x7d\x22\xe0\x1b\x71\xb0\x95\x76\x68\x49\xe9\x2d\x18\x0b\x12\x2b\xf4\xdf\x45\x29\xac\x28\x08\xad\x9b\x78\x25\x3e\x11\x94\x2e\xaa\x56\x72\x79\xed\x1b\xcf\x10\x22\xff\x82\xfb\xb5\x11\x56\x82\xd0\x12\x1a\xe1\x82\x00\x53\xd7\x42\x4b\xcf\xce\x88\xe7\xb3\x7c\x15\xe0\x82\xc3\x0a\x8b\x03\x5e\x5d\xed\xdf\x07\x5d\x94\xc6\xa1\x06\xa1\x41\x0c\xbc\x01\xae\xdd\x6e\xd1\x31\xef\xa4\x83\x25\x55\x21\x88\x71\x19\xaf\x82\x41\x8d\x58\x7c\xaa\x2b\xea\xf2\xb6\x36\xbb\x50\x13\xac\xea\x67\x07\xac\x9b\x8b\xda\xf8\x43\xcd\x8e\x11\x4d\x63\x4d\x63\x95\xaf\x1e\xb1\xee\xac\x58\xce\x6f\xe6\xd3\xd5\xbb\x51\x9a\x6b\x52\xb4\xff\xa4\xb4\x0c\x51\x9a\x7f\x1a\x44\x89\x7f\xdd\xdf\xcd\xe2\xd7\xf2\xf3\xb4\xfb\x9a\x3e\xe4\xf7\xab\xf8\x63\x91\xdd\xce\x97\xf7\xd9\x74\xde\xa7\xfc\x0c\x9b\xca\xec\x6b\xd4\xf4\x09\xf7\x47\x79\xff\x82\xfb\x61\x4a\x17\x16\xb9\xd7\x64\x74\xeb\x52\xf8\x50\x19\x41\x7c\xca\x1d\x71\x94\xe5\x5e\xac\x2f\x36\x2f\x8e\x1d\x90\xf6\x95\x75\x16\x42\x7d\x37\xbb\xbb\xe0\xa4\xb0\x4a\x9b\xcb\x14\x6e\xc5\x0b\x42\x3e\x03\x8b\x5f\x5b\x65\x51\x82\xd1\x05\xf7\x07\xef\x46\x07\x66\x87\xde\x75\x75\x5b\x91\xba\x2e\xaa\xd6\x11\x5a\x70\x6d\xd3\x18\x4b\xec\xb7\x78\x74\x11\xa0\x5f\xa6\x30\x0d\x07\x9d\xc6\x78\xef\x52\xf8\x7d\x78\xf3\xf4\x3f\x45\x33\x35\x5a\xa3\x4f\xc0\x13\x5c\x87\xab\x03\x42\xd5\x35\x86\x0b\x31\xe8\x10\xe9\xa8\x5f\xb0\x84\x9b\xbc\x3b\x61\xbe\x8e\xd6\xf5\x5c\xc3\xae\x73\x79\x60\x77\x9d\xa6\x61\xd6\x5e\xf8\x3a\xed\xa8\xaf\x62\x96\xde\x1b\x97\x42\xae\xe9\x2a\xd6\x4f\xfa\x9d\x56\x71\x39\xbe\x78\x40\xd7\x56\x74\xac\xe2\x83\xc2\x4a\x1e\xeb\xd9\xf0\x61\x34\xef\xdd\xfc\xbe\xf2\x6d\xac\x0b\x40\x66\xb7\x4c\xcc\xe1\x7b\x9f\xfc\xe9\x32\x1d\xdd\x2c\xfb\xfa\x7d\x4a\x7c\x88\xc3\x10\xad\xb7\x16\x50\xcb\xc6\x28\x4d\xee\x0a\x2c\x6e\x42\x24\xa5\x29\xb8\xc4\xa1\xa8\x4c\x2b\x45\xa3\x26\x8d\x35\xbe\xce\x2b\xb5\xc3\xcf\x0a\x5f\x59\xf3\x4d\xfc\xbe\x45\x12\x52\x90\x08\xd9\xd3\x51\x4c\x8d\x26\xd4\xe4\x62\xa8\xcf\x2e\x53\xb8\x39\xba\x62\xf2\x30\x72\x59\x5c\x40\x34\x16\x16\x6e\xdf\x11\xb5\x1c\x5d\x9c\x05\x9b\x42\xe5\x72\x91\x3a\x5f\x86\x83\x3a\x66\x05\xa3\xc2\x0e\xf2\x47\x34\x03\xf1\x63\xd2\xbe\x86\x4f\x83\xeb\x0b\x9a\x3b\x35\xf2\x8a\x52\x0b\x22\x94\xb1\xd7\x2b\x37\x68\xfc\x2e\xc6\x39\x2c\x0a\xdc\x68\xd7\x88\x1a\x1a\x61\x1d\xca\x6e\xfc\x8f\xdb\xa7\xe9\x7b\x6c\xe8\xaf\x62\xbd\x24\xd3\x40\x63\x9c\xe2\x38\xfa\x26\xdf\xeb\xcc\x87\xe9\xe4\xe9\xbf\x94\x48\x25\xda\x13\x0c\x8c\x4b\xc0\x4e\x54\x4a\x5e\x01\xbe\x61\xd1\x92\x58\x57\xd8\xcd\x0e\x96\xaa\xdc\xbc\x3f\x4f\xe1\x2f\xc6\x54\x28\x74\x98\x23\x55\x35\x18\x05\x61\x2d\x43\x51\x94\x60\x36\x5e\x51\x04\xe9\xb1\xf1\xf7\x81\x34\x85\xdf\x57\xc3\x83\xa7\xde\xa9\xa3\xe3\x81\x3f\x95\x96\xf8\x36\x10\x1c\x06\x0a\x95\xe8\x70\x84\x41\x58\xef\xfb\xa8\x32\x67\x2e\x5f\xac\x23\x2f\x84\xf1\xc7\xe6\x8b\x01\x73\x5c\x2b\x39\x52\x62\x1d\x15\xfa\xe5\xac\xe6\x86\xc7\x7a\xa3\x57\x06\x8e\x62\x3d\x87\x5f\xd9\x86\xd0\x2e\xbd\xf0\xa1\xa7\xdc\xc8\xf0\xef\x15\xe2\x7b\x69\x75\xe4\x8a\x17\xa5\xe5\xf7\x5a\xc2\xd1\x1e\x16\x27\x0f\xd7\x85\x6f\x51\xfd\x69\x2d\xa8\x28\x39\x45\x24\xbe\xf9\x96\x91\x6b\x7a\xea\xc7\x69\x6c\xc0\x4b\x12\xd4\xba\x81\xfb\x25\x6e\x04\x27\xb8\x23\x1e\xc7\x6a\xc3\x4b\x7b\x19\xf3\xe7\x45\x9b\x57\xcd\x8e\xf8\xfc\x8f\xe7\xe5\x78\x31\x62\xd6\xc8\xe2\xa0\x44\x51\x51\xb9\x67\xee\x12\x85\xa5\x35\x0a\x0a\x01\xb3\x58\xa0\xda\xf9\x49\x02\x16\xb7\x6d\x25\x2c\x28\x4d\x68\x77\xa2\x72\x7e\xa7\xa1\x32\xe4\x7d\x37\x4e\x94\x03\x8b\xae\x31\x5a\x32\x08\x32\xbe\x17\xa2\x23\x77\xc0\xf1\x71\x9e\xdd\xac\x3e\xfe\x76\x84\x23\x6c\xe5\xc6\xb7\x35\xe5\x8a\x30\x68\xb8\x4a\x43\x66\xfd\xfa\x70\x3f\x85\xa2\x1f\x3f\xb0\xb6\x28\x5e\xdc\xc4\x0b\x28\x4d\x83\xa1\x8e\x05\xf5\x4b\x4e\x07\xc8\xcb\x2d\x4c\x8d\xb0\x16\xc5\x0b\xaf\x54\x4a\xa3\x87\x6e\xd1\xb5\x35\x27\x30\x44\x44\x01\xc9\x01\xe8\x2c\x5f\x4e\xef\x16\x8b\xf9\x74\x35\x9f\x9d\x7a\xcd\xbf\x60\xd8\xc8\xf8\xb8\xc1\xa1\x0f\xe2\xe2\xdf\x58\x53\xa0\x73\x5c\x1e\x1d\xf9\x20\x1e\xf7\xb3\x6c\x95\x2f\x7e\xed\x45\xef\xd4\x3f\x55\xb7\xdf\x75\xf6\x87\xa7\x17\x1f\xf1\x6b\xcc\xa1\x26\x10\x7a\x0f\xc6\x97\xcb\xa6\xb5\xa1\x6c\x42\x56\x84\x37\x95\x03\xb1\x36\x6d\x70\xc4\x6b\xac\x2b\x45\xc3\x38\x1b\xfb\x0e\x9a\x53\x4b\x23\x9c\x57\x7e\xae\xd8\x7d\x0c\x67\xd0\x11\x50\x6d\x84\xaa\x30\xac\xb6\x8a\xf1\xbd\xb2\xd9\x02\xd6\x42\x1e\x7b\xd2\x9b\x3a\x7f\xfe\x90\xe5\x37\xf3\x59\x5f\x50\x9f\xbd\x82\xa9\xd1\x1b\xb5\xf5\x29\xdd\x08\xe7\xa8\xb4\xa6\xdd\x96\x73\xcd\x75\x2b\x0f\xd5\xda\x31\x0d\xf6\xa0\xa3\xad\x2f\x78\x21\x1d\x97\x8a\x9f\x75\xc2\xd1\xc7\x2e\xb1\x47\x3b\xe0\x6e\x80\x20\x1d\xe1\x39\xdc\x7e\x46\xeb\xc6\x95\x1a\xe3\xfc\xdd\x8b\xc5\xb8\xdc\xe3\xe9\x63\x3e\xeb\x0f\x8f\x8c\x19\xaf\x55\xc1\xac\x26\x93\xd2\xa2\x73\xc3\x45\x96\xcc\x0b\xea\xd3\x9d\xb5\x7b\x0e\x7a\xc6\xa9\x5f\x76\xa3\xe0\xd1\x42\x09\x7f\x96\xd8\x58\xe4\x51\x25\x2f\x2c\x0a\xc7\xd8\x7f\x8a\x04\xa1\xde\x39\x86\x71\x5b\x86\x9d\x12\xd0\xbc\xc5\xd9\xfb\xd3\x65\x02\xf0\xe8\x63\x3f\xf4\xd2\x45\xb4\x8d\x4d\xcb\x67\x67\x57\xff\x29\x82\x97\xfd\xd7\x59\x0f\x73\x34\xc0\x4f\xe6\x39\xc0\x8c\xdf\x5c\x63\xaa\xc1\xf8\xef\xc5\xf5\xee\x3c\xec\x98\xf1\x85\xda\xda\xd1\x7b\x17\xc0\x95\xe2\xff\xfe\xf4\xcb\xa9\x0f\x47\xeb\x66\x88\x00\x61\xed\xc7\x42\xbc\x79\x3a\xa1\xf5\x64\xbb\x71\x16\xf8\x9d\xb8\x14\x7a\x8b\x95\xd9\x8e\x62\xa7\x6a\x74\x24\xea\x66\x90\x80\xdf\x92\xe4\x1c\x1e\xfe\x60\x9b\xf3\x2a\x8f\x97\xb8\x3f\x78\xe8\x9f\xbc\x6d\x7e\x50\x4d\xb7\xb1\x79\x35\x75\xd4\x99\x9e\xa0\xf0\xff\x42\x78\xab\x3a\xea\x21\x82\x9d\x72\x7f\x5d\xde\x2d\xfe\x1b\x10\xe3\x0d\xf3\x87\x2c\x05\xee\x94\x1d\xca\x71\x82\xfc\x90\xf2\xef\xd8\x7f\xb4\xfb\x72\xa8\x4f\x4c\xff\x96\xfc\x3b\x00\x00\xff\xff\xae\x59\x93\x96\x77\x13\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4983, mode: os.FileMode(436), modTime: time.Unix(1591401925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
