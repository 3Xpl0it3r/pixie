// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x6f\x23\xb7\x11\x7f\xd7\xa7\x18\xc7\x0f\x67\x03\xaa\x1a\x14\x4d\x50\xe8\x29\x1b\x69\x93\xdb\xda\x96\x55\x4b\xbe\x34\x08\x8c\x0b\xb5\x1c\x69\x09\xef\x92\x1b\x92\x2b\x5b\x0d\xee\xbb\x17\x43\x72\xff\x50\x92\x2f\xbd\xa0\x4f\xd2\x92\xc3\xf9\xc7\x99\xdf\xcc\xf0\x12\xd6\x85\x30\xb0\x15\x25\x02\x47\x93\x6b\xb1\x41\x03\xb6\x40\x30\x79\x81\x15\x83\xad\x56\x95\xfb\x4e\x96\x19\x18\xd4\x7b\x91\xe3\x64\x74\x39\xba\x84\xcc\xbe\x33\x20\x95\x05\xc1\x91\x95\x63\xd8\x34\x16\x5e\x10\x24\x22\x07\xab\xa0\x62\xb2\x61\x65\x79\x80\x1d\x4a\xd4\xcc\x22\xd8\x43\x8d\x06\xb6\x4a\x3b\x7e\xeb\x43\x8d\xab\x5c\x8b\xda\xc2\x63\x36\xba\x84\x97\x02\x25\xd8\x4e\x19\x61\xa0\xa9\x39\xb3\xc8\x27\x5e\xc5\x9c\x49\xd8\x20\x70\x25\x11\x36\x07\xd0\x8d\x94\x42\xee\xe0\x57\x4f\x35\x31\xc5\xaf\x20\x02\x03\x2e\x34\xe6\x56\xe9\xc3\x64\x14\xec\x6b\x75\x30\xc1\xac\x09\x9f\x58\x73\x4a\x3f\x06\x26\x39\xe4\xaa\x16\x68\x40\x58\x32\x83\x54\xfd\xae\x16\xaf\x02\xff\x52\xb2\x8d\xf9\x2b\xab\x05\xd4\x2c\x7f\x66\x3b\x74\xa6\x34\xc6\xa9\xd3\x5b\x33\x19\x8d\x82\xeb\x7e\x1f\x01\xfc\xd6\xa0\x3e\x4c\xe1\x5f\xf4\x33\x02\xa8\x1a\xcb\xac\x50\x72\x0a\x77\xe1\xdf\xe8\xd3\x68\x44\x8e\x81\x47\x83\x3a\x93\x5b\xe5\x8e\x09\x3e\x85\x6c\x7e\x31\x02\x90\xac\xc2\x29\xac\xac\x16\x72\x47\xdf\x58\x31\x51\x0e\x17\x6a\x91\xdb\x46\x47\x34\x4a\xef\x16\x47\xc7\x94\xde\x65\xf3\xe1\x82\x30\x49\x5d\x6b\xb5\x47\x3e\x85\xef\x95\x2a\x91\xc9\x8b\x4e\x97\x7b\xbd\xfb\x5f\x54\x91\x6c\x53\xa2\x67\xc3\x4a\x73\x86\x0f\xd9\xb4\x42\x6b\xe9\xa2\x88\xd7\x33\x1e\x86\x0c\xf6\xac\x6c\x06\x1c\x3f\x8d\x46\x28\x9b\x0a\x12\x6d\xc5\x96\xe5\x96\x7c\xea\x8e\x01\x24\xeb\x8f\x8f\x8b\x9b\xc5\xfd\x4f\x8b\xf6\xf3\x36\x5b\x3c\xfe\xfb\x63\x72\x37\xff\xf6\xef\xed\xd2\x3c\x79\xf8\x29\x5b\xc4\x6b\xb3\xfb\xc5\x3a\xc9\x16\xe9\xc3\xc7\x55\xba\xfe\xf8\x73\x72\x77\xbb\x3a\xbf\x75\x86\x5f\x4c\xb0\x4e\xef\x96\xb7\xc9\x3a\x0d\x4c\x3a\x65\x1b\xab\x72\x55\xd5\x25\x5a\x4c\xa5\x15\xf6\xb0\xb2\x14\xec\xa4\x77\x92\xae\x06\x6a\xd3\xd7\x32\x5d\xcc\xb3\xc5\x8f\xe1\xeb\xe1\x71\xb1\xe8\xbf\x7e\x48\xb2\xdb\x74\x1e\x3e\xd6\xe9\xc3\x5d\xb6\x48\xd6\xe9\xfc\xac\xa4\x24\xa7\xd8\xe9\x1c\x94\x44\xfe\xb9\x84\x44\x02\x72\x61\x81\x39\x32\x50\x79\xde\x68\x03\x62\x0b\x8c\xe2\x55\x43\xc1\x0c\x54\x8a\x8b\xad\xa0\x5c\x2d\x10\x84\xac\x1b\x0b\x16\x5f\x2d\x05\xb3\x90\x06\xb5\xbb\x34\xa5\x81\x63\x89\xee\x7f\x5e\x30\xcd\x72\x8b\xda\x4c\x9c\x10\x97\x58\x42\xe6\x65\xc3\x09\x32\x0e\xb5\x3b\x20\x1d\xbf\x67\x3c\x6c\x14\xd3\xdc\xe5\x53\xcd\x8c\x67\xa0\xaa\x8a\x49\xee\x8e\x93\xc6\xe9\x3c\x5b\x7b\x75\xc1\x60\x89\x79\xaf\xaf\x2c\x0f\xe7\x95\xce\x0b\x65\x50\x02\x93\xc0\x06\xde\x00\xd3\xec\x76\x68\xe8\xec\xa4\x55\x8b\x8b\xdc\xe5\xbb\x55\x4e\x04\x29\x15\x1d\xb1\x05\xb3\x94\xe2\xa6\x50\x4d\xc9\xa1\x52\x7b\x74\x44\x24\xea\x9d\x01\x92\x4d\x40\xe5\x01\x40\x92\x63\x18\x05\x7a\xad\x85\x83\x32\xb6\x69\xad\x58\xa5\xb7\xe9\x6c\xfd\x99\x78\xb8\x11\x92\x87\x70\xb8\x89\xc2\xe1\xe6\xe3\xf2\x7e\x1e\xfe\xad\x3e\xcc\xda\x7f\xb3\x87\x6c\xb9\x0e\x1f\x8b\xe4\x2e\x5d\x2d\x93\x59\xda\xa5\xd4\x1c\xeb\x52\x1d\x2a\x94\xf6\x06\x0f\x47\x09\x7a\x94\x5e\xb9\x46\xc2\xcf\xc4\xde\x99\x29\xfc\x50\x2a\x66\x69\x95\x50\x3e\xca\x39\xc7\x36\x59\x66\xff\x57\x7e\x0e\xf0\x1c\x3b\x72\xe8\xb4\x43\xb7\x80\x45\xd3\x16\x62\x2e\x02\x45\x40\x09\x73\xf5\x8c\x07\x33\x85\x5f\x3c\xbf\xa7\x8b\xeb\x29\xfc\x32\x40\x91\xa7\x70\x9e\x96\x4c\xd8\x22\x36\x6e\x3d\x2f\x1b\x63\x51\x5f\x05\x03\xae\xa7\x30\xf3\x2b\xad\xa0\x40\xf0\xfd\x81\xd0\xf1\x2a\x82\xb3\x37\x89\x49\xca\x70\x67\x28\x69\xa6\xa4\x44\x17\xb2\xa7\x32\xfb\xbd\x9e\xa1\x68\x91\xed\x8a\x0d\x20\x6e\x1a\x01\x1e\x71\xb8\xcd\xda\x15\x3a\xd7\xd2\x9a\xee\xd4\x10\xdc\xaf\xfb\xe3\xa6\x95\x34\x0c\xf4\x2b\x97\xda\x2d\xf5\x38\x04\xf6\x52\x99\x29\x64\xd2\x8e\x43\xca\x4d\xdf\x40\x97\x71\x6b\xea\x63\x5f\x3d\xae\x63\xe2\x07\x34\x4d\x69\x8f\xc5\xfe\x20\xb0\xe4\xc7\xb2\xb7\xb4\x18\x4c\x3e\x9b\x26\x63\x07\xbd\x1a\x7f\x6b\x84\x46\x9e\xe8\x1d\x11\xd3\x0d\x9c\x27\x7f\x3a\xaf\x5e\x44\xbd\xea\xa0\xe1\x69\xe4\x90\xc0\x57\xe9\x6a\xa7\x01\x25\xaf\x95\x90\xd6\x8c\x41\xe3\x16\x5d\xb6\x73\x95\xbb\xbe\x20\x2f\x55\xc3\x59\x2d\x26\xb5\x56\x0e\x42\x4a\xb1\xc7\x0f\x02\x5f\x48\x9b\xdb\xf0\xff\x0e\x2d\xe3\xcc\x32\x1f\x14\x2d\xc5\x4c\x49\x8b\xd2\x9a\x41\x4c\xdc\x1e\x6d\x11\xb9\x71\x7a\xb8\x58\x77\xff\x62\x66\x7e\xf7\x0c\xab\x55\xb4\x71\xe1\x6d\xf2\xa0\x40\xf9\x6a\x5c\x46\x0e\x20\x82\x04\x44\x98\xe1\xf9\x47\x34\x03\xf6\x31\xa9\xe7\x4e\x9d\x5f\x60\xcd\x6a\x11\x78\x7a\xc0\xf0\xcc\xfc\xea\x80\x4b\xd8\xec\xd1\xe5\x24\x5e\x1c\x34\x50\x0d\x71\x5d\x54\xc5\xac\x45\x1e\xaa\x90\x30\x83\x92\x64\x42\xe8\xbc\x14\x22\x2f\x5c\x09\xd8\x20\x4a\xa8\x99\x36\xc8\xa9\x56\x9d\x02\xbb\xea\xd0\xdf\x23\x3f\xdb\xac\xac\xaa\xa1\x56\x46\x50\x18\xb8\xf2\xd3\xc9\xcc\x86\x11\xea\xe8\x7f\x2a\xd0\x16\xa8\x4f\x74\x20\xbd\x18\xb5\x2c\x82\x8f\x01\x5f\x31\x6f\x2c\xb5\x3f\x6d\x55\x9b\xb8\x9e\x2a\xed\xd6\xbb\x6e\xc8\xbb\xb0\x2c\x07\x45\xca\x37\xc1\xc8\xf2\x02\xd4\xd6\x09\x0a\x4a\x3a\xdd\xe8\x7f\x4f\x3a\x85\x5f\xd6\xc3\x85\xa7\xce\xa9\xd1\xf2\xc0\x9f\x42\x72\x7c\x1d\x30\xf6\xa5\xce\x16\x68\x30\xd2\x81\x69\xe7\xfb\x20\x32\xa3\x53\x0e\x13\x22\x2f\xf8\xc2\x4c\xe6\xb3\xc1\xe1\xd0\xc4\xd3\x4d\xb1\x4d\x10\xf8\x22\xca\x12\x2a\xf6\xec\xcb\x68\xf0\xca\xc0\x51\x24\xa7\xff\x4a\xb6\x96\x40\x9d\x98\x0f\x3d\x65\x22\xc3\xdf\xca\xe3\x73\x61\x75\xe4\x8a\x67\x21\xf9\x5b\x28\x73\xd4\xca\x86\x1a\x46\x69\xe5\x90\xb0\x5b\xad\x98\xcd\x0b\x0a\x11\x8e\xaf\x0e\x85\x32\x69\x9f\x48\x49\x6a\xf0\xce\x31\x77\x9d\x5f\xd7\x09\x84\x42\x40\x8b\x8d\x19\xdc\x0f\xc7\x2d\xa3\x0c\x70\x6c\xa8\xbf\x91\xca\x16\x21\xc0\x9e\xa5\x7a\x91\xe4\xa9\xd9\x2a\x6a\xe8\xe8\x5c\xa0\x37\x50\x20\x2b\x6d\x71\xa0\xa3\x05\x32\x6d\x37\xc8\xac\xbf\x4e\x8d\x39\x8a\x3d\x72\x6a\xc3\x34\xee\x9a\x92\x69\x10\xd2\xa2\xa6\xfe\xdc\xf5\x62\xb6\xf0\x59\x11\x70\x93\xd8\x69\x34\xb5\x92\x9c\x34\xb0\xca\x81\x2f\x1a\x6b\x82\x12\xef\xd3\xe4\x76\xfd\xfe\xe7\x53\x25\x1a\x39\x50\xc3\xdd\x78\xcf\x31\xf7\xb5\xcf\xcf\x81\x4b\x9a\x9d\x60\x46\x78\xea\x34\x10\x06\x68\x60\x10\xbc\x4d\xb8\xde\x06\x3f\x43\x0a\x23\xdf\x59\x3f\x38\xb9\x04\xa3\x58\x33\xaa\x22\xeb\x98\xe9\x3a\x3c\x8d\x06\xab\x4d\x89\x06\xde\xaf\xd7\xcb\x77\x06\xbe\xf9\xfa\x6b\xa7\x5d\x63\x3a\xff\x9d\x57\xde\x05\xea\x4e\x39\xb4\x17\xa6\xd7\x35\xd8\xf1\xe3\xc3\x72\xd6\x5a\x40\xd1\xb4\xd1\xc8\x9e\xcd\xc4\x31\x28\x54\x8d\x1e\x9f\x98\xed\xda\xca\xd6\x70\xc7\x37\x27\x45\x37\x2c\x7f\xa6\x26\x56\x48\x74\x26\x6b\x34\x4d\x45\x89\x09\x41\x23\xaf\x49\xd0\x73\x9e\xad\x66\xf7\x8b\x45\x3a\x5b\xbb\xee\xff\xd8\xcf\x34\xde\xd2\xdd\x84\xf9\x38\x72\xb4\xf0\x2b\xb5\x56\x39\x1a\x43\x39\xdf\x92\xb7\x3e\x58\xce\x93\xb5\x1f\x31\x3c\xdf\xbd\xf8\x8f\x68\x7b\xe9\xd6\x72\xef\x76\x5a\xa2\x69\xde\xa0\xb4\xc0\xe4\x01\x94\x03\x80\x6d\xa3\x3d\x10\xf8\x30\xf6\xd3\xb6\x01\xb6\x51\x8d\x77\xc1\x4b\x40\x0a\x61\x87\xb1\x49\x93\x71\xac\xca\xa9\x8d\x41\x97\x17\x66\xc0\xea\x43\x88\x3f\x2f\xc0\xab\xb4\x65\xa2\xc4\x2e\x6a\xa4\x7a\x21\x83\x19\x6c\x18\x8f\x1c\xe8\x8c\x4c\xdb\xf9\xa9\x05\x87\x0f\x8e\xfb\x4c\xc9\xad\xf0\xc3\x67\xcd\x8c\xb1\x85\x56\xcd\xae\x48\xdd\xe4\xda\x4f\xbe\xdd\x21\xaa\xab\x4c\xc8\x28\x6b\x8f\xc7\xde\xf3\x6d\x70\x00\x85\x9e\xac\x42\x63\xd8\x6e\x88\x32\x3e\x7e\xbb\x85\x56\xe6\xcd\x3f\x4c\xba\x27\xa7\xff\x7e\xf6\xd4\x56\x68\x63\xd7\xa2\xc2\x48\x5c\xc9\x4e\x16\x5b\x7e\x4b\xc5\xff\x94\xf6\x8d\xf9\x22\xf5\x81\x02\xc8\x3b\xcb\xf5\xc8\xb1\xe7\x7c\x63\x80\x64\x17\xed\xb6\x36\xd2\x72\xe7\xeb\xbe\xab\x3e\x9a\x3b\x5a\x6d\x22\x04\x6d\xad\x7e\xdf\xc2\x45\x64\xc0\x7e\x70\xdb\xd3\xe8\xee\xfb\xdd\x0f\xa8\x4d\x8c\xf0\x21\x95\xde\xdc\x58\xc4\x65\xa2\xd6\x68\xed\x61\x76\x76\xef\xb4\x11\x0d\x1e\xd2\xaa\x5c\x96\x4c\x62\x77\x2d\xae\x94\x74\x5f\xde\x51\xb2\xa9\x16\x8a\xa3\x6f\xca\xc3\x42\x26\x8d\xd5\x0d\xb5\x62\xc8\x87\x9b\x47\xfe\x8b\x07\x0d\xef\xc9\x3a\xe1\x5c\xa3\x89\x2e\xd4\xaa\x67\x94\xa7\x83\x9a\x9f\xa0\xf6\x22\x3c\x59\x9c\x3c\x2f\x09\xb7\x77\x2b\xe4\xf3\xe9\xd9\xf6\x0d\xcb\x9d\x9c\xb9\xc0\x0a\x4a\x45\xd3\x14\x7c\xc7\xb1\xd6\x48\x1d\x19\xbf\x6a\xa3\xe8\xab\x40\xe0\x0b\x17\xe5\x76\x88\x4c\xd8\x0b\x06\xf5\x6b\xe8\x50\xbf\xba\x1e\x01\x3c\x3a\x4c\x18\x5e\xea\x55\x70\x37\x79\x3b\x9b\x5f\x8c\x3f\x97\xdc\xd7\x83\x87\xa9\x56\xcd\xa8\xcd\x3d\xe9\x7a\x01\xe6\x48\x55\x7d\xfe\x46\x93\x7c\xc2\xce\xf7\xbb\x7d\xdf\xdb\x32\xf0\xdf\xe7\x4f\x7a\xa3\x1e\x3f\x33\xfb\x8e\xfd\x03\xd9\xd1\x38\x3c\x60\xe1\xef\x8d\x58\x5c\xc5\xf7\x36\xf6\xa8\x11\x3d\x02\x8e\x5d\xf6\x2c\x8e\x86\xde\xfe\xfa\x63\x9d\x96\xa8\x2b\x61\x28\x2b\xcc\x15\xcd\xe7\x9d\xa3\x9b\x78\x73\x0a\x29\x17\xae\xa3\x3b\x3a\xd5\x33\xf7\x33\xa9\x67\x7d\xaf\x77\x9d\xb5\xe1\x49\xd2\x71\x55\xfd\x7a\xcf\x71\x40\x4c\xdc\xba\x17\x83\x4f\xa3\x91\x6f\xcc\xdf\x10\xed\x73\xe0\xf4\x7d\xf3\xf4\xe0\x40\x82\x8f\xfe\x37\x5e\x34\xfb\x9c\xeb\x47\x73\xff\xb8\xa1\xa3\x64\x31\x05\xfb\xdb\x37\xdf\x9e\x79\x5d\x19\x4e\xe8\x5e\x3d\x8b\x95\x6b\x71\xc3\xce\xd3\x09\xad\x23\xdb\xc7\xc8\xe4\x00\xbc\x60\x72\x87\xa5\xda\x45\xc9\x2d\x2a\x34\x96\x55\x75\x5c\x0f\x2e\xe1\xe1\x0f\x06\x5b\x27\xf2\x78\x9e\xfd\x83\x77\xdf\x93\x17\x9f\x2f\x14\xd3\x0e\xaf\xa1\xe0\x79\x99\xd3\x13\x2d\xdc\xe3\xf6\x6b\xd9\x52\x47\x0f\xc7\xc2\xfc\x73\x75\xbf\xf8\x33\x4a\xc4\xc3\xf6\x17\x59\x0a\xd4\x23\xb5\x5a\xc6\xaf\xdd\x5f\x24\xfc\x0d\xfb\x8f\x9e\x01\x42\xf9\x88\x4d\xff\x34\xfa\x6f\x00\x00\x00\xff\xff\x7f\x3f\x31\x6d\xb1\x19\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6577, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
