// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\x23\xb7\x11\x7f\xd7\xa7\x18\xc7\x0f\xb1\x01\x57\x05\x8a\x36\x28\xf4\x94\xad\xa4\xe4\xb6\xb6\x65\xd5\x92\xef\x1a\x1c\x0c\x87\x5a\x8e\xb4\x84\x76\xc9\x0d\xc9\x95\xad\x06\xf9\xee\xc5\xf0\xcf\x6a\x29\xc9\x17\x5c\xd0\x3e\x69\x49\x0e\x67\x7e\x33\x9c\xbf\xba\x84\x65\x29\x0c\xac\x45\x85\xc0\xd1\x14\x5a\xac\xd0\x80\x2d\x11\x4c\x51\x62\xcd\x60\xad\x55\xed\xd6\xd9\x3c\x07\x83\x7a\x27\x0a\x1c\x0e\x2e\x07\x97\x90\xdb\x6f\x0d\x48\x65\x41\x70\x64\xd5\x0d\xac\x5a\x0b\xaf\x08\x12\x91\x83\x55\x50\x33\xd9\xb2\xaa\xda\xc3\x06\x25\x6a\x66\x11\xec\xbe\x41\x03\x6b\xa5\x1d\xbf\xe5\xbe\xc1\x45\xa1\x45\x63\xe1\x29\x1f\x5c\xc2\x6b\x89\x12\x6c\x07\x46\x18\x68\x1b\xce\x2c\xf2\xa1\x87\x58\x30\x09\x2b\x04\xae\x24\xc2\x6a\x0f\xba\x95\x52\xc8\x0d\xfc\xec\xa9\x86\xa6\xfc\x19\x44\x60\xc0\x85\xc6\xc2\x2a\xbd\x1f\x0e\x82\x7e\x11\x83\x01\x16\x14\x1b\xf2\xa1\x8d\xa2\x8e\xaf\xdd\x00\x93\x1c\x0a\xd5\x08\x34\x20\x2c\x69\x43\x88\xbf\x6f\xc4\x9b\xc0\x3f\xb3\x46\x40\xc3\x8a\x2d\xdb\xa0\x53\xa6\x35\x0e\xd0\x41\x9f\xe1\x60\x10\x8c\xf7\xeb\x00\xe0\x97\x16\xf5\x7e\x04\xff\xa2\x9f\x01\x40\xdd\x5a\x66\x85\x92\x23\xb8\x0f\x5f\x83\xdf\x06\x03\x32\x0d\x3c\x19\xd4\xb9\x5c\x2b\x77\x4d\xf0\x11\xe4\x93\x8b\x01\x80\x64\x35\x8e\x60\x61\xb5\x90\x1b\x5a\x63\xcd\x44\xd5\xdf\x68\x44\x61\x5b\x9d\xd0\x28\xbd\x99\x25\xd7\xfa\x32\x16\x68\x2d\x99\x8e\xc4\x6c\x71\xdf\xbf\xb7\x63\x55\x9b\xde\x42\xd9\xd6\x90\x69\x2b\xd6\xac\xb0\xa4\xa3\xbb\x06\x90\x2d\x5f\x9e\x66\xb7\xb3\x87\x4f\xb3\xb8\xbc\xcb\x67\x4f\xff\x7e\xc9\xee\x27\xdf\xfd\x35\x6e\x4d\xb2\xc7\x4f\xf9\x2c\xdd\x1b\x3f\xcc\x96\x59\x3e\x9b\x3e\xbe\x2c\xa6\xcb\x97\x9f\xb2\xfb\xbb\xc5\xf9\xa3\x3e\xbf\x0e\x48\x6b\x55\xa1\xea\xa6\x42\x8b\x53\x69\x85\xdd\x2f\x2c\xb9\x16\x61\xca\xa6\x8b\x1e\x24\x5a\xcd\xa7\xb3\x49\x3e\xfb\x31\xac\x1e\x9f\x66\xb3\xc3\xea\x87\x2c\xbf\x9b\x4e\xc2\x62\x39\x7d\xbc\xcf\x67\xd9\x72\x3a\x39\x2b\x29\x2b\xe8\x9d\x3a\xe5\xb3\x44\xf7\x4b\xc8\x24\x20\x17\x16\x98\x23\x03\x55\x14\xad\x36\x20\xd6\xc0\xc8\x37\x34\x94\xcc\x40\xad\xb8\x58\x0b\x8a\x8c\x92\x1c\xae\x69\x2d\x58\x7c\xb3\xe4\x38\x42\x1a\xd4\xee\x41\x94\x06\x8e\x15\xba\xef\xa2\x64\x9a\x15\x16\xb5\x19\x3a\x21\xce\x8d\x85\x2c\xaa\x96\x53\x80\xee\x1b\x77\x41\x3a\x7e\x5b\xdc\xaf\x14\xd3\xdc\xb9\x6d\xc3\x8c\x67\xa0\xea\x9a\x49\xee\xae\x13\xe2\xe9\x24\x5f\x7a\xb8\x60\xb0\xc2\xe2\x80\x57\x56\xfb\xf3\xa0\x8b\x52\x19\x94\xc0\x24\xb0\x9e\x35\xc0\xb4\x9b\x0d\x1a\xba\x3b\x8c\xb0\xb8\x28\x5c\x74\x59\xe5\x44\x10\xa8\xe4\x8a\x2d\x99\xa5\x48\x32\xa5\x6a\x2b\x0e\xb5\xda\xa1\x23\x22\x51\xdf\x1a\x20\xd9\x94\x16\x7c\x9c\x49\x32\x0c\x6b\x1a\xad\x1a\x2d\x5c\xe2\x60\xab\xa8\xc5\x62\x7a\x37\x1d\x2f\xbf\xe0\x0f\xb7\x42\xf2\xe0\x0e\xb7\x89\x3b\xdc\xbe\xcc\x1f\x26\xe1\x6b\xf1\x71\x1c\xbf\xc6\x8f\xf9\x7c\x19\x16\xb3\xec\x7e\xba\x98\x67\xe3\x69\x17\x2e\x13\x6c\x2a\xb5\xaf\x51\xda\x5b\xdc\x1f\xc5\xe5\x51\xe8\x14\x1a\x29\x5b\x65\xf6\xde\x8c\xe0\x87\x4a\x31\x4b\xbb\x94\x53\x4f\xa3\x30\x9b\xe7\xff\x53\x7e\x2e\xb9\x38\x76\x64\xd0\x51\x97\x49\x2e\xc2\x4e\x88\x78\x73\xb5\xc5\xbd\x19\xc1\x67\x7f\xff\xf9\xe2\x7a\x04\x9f\x7b\x19\xe1\xf9\xc2\xbb\xda\xc3\xe4\xe1\x8a\x9c\x52\x0b\xa9\xae\x47\x70\xcf\xb6\x08\xf9\x04\x34\xfe\xd2\x0a\x8d\x1c\x94\x2c\x10\x9e\x72\xf7\x8c\x06\xd4\x0e\xdd\xd3\xd5\x6d\x65\xc5\x9f\x8a\xaa\x35\x16\x35\x98\xb6\x69\x94\xb6\xf4\x6e\x61\xeb\xca\xab\x7a\x3d\x82\xb1\xdf\x88\x08\xc3\x39\x01\xeb\x9f\xfc\x7f\xd1\x8c\x95\x94\xe8\x02\xe0\x04\xd7\xe1\xe8\x80\x50\xc4\x14\x78\xc5\x7a\xb9\x70\x94\x64\x46\xe2\x70\x97\xc7\x1d\xba\x17\x69\x4d\x77\xab\x9f\x95\xaf\x0f\xd7\x4d\x94\xd4\x8f\x9a\x2b\x97\x27\x22\xf5\x4d\x88\x92\xb9\x32\x23\xc8\xa5\xbd\x09\xf1\x3b\x7a\x27\x55\xdd\x44\x4d\x9f\xf2\x49\x5f\x62\x8f\xf8\x11\x4d\x5b\xd9\x63\xb1\x3f\x08\xac\xf8\xb1\xec\x35\x6d\x06\x95\xcf\xc6\xdc\x8d\x4b\xe2\xf1\x51\x32\xbd\x21\x62\x7a\xd2\xf3\xe4\xcf\xe7\xe1\x25\xd4\x8b\x2e\xcf\x3c\x0f\x9c\x2b\xf8\xf2\x5a\x6f\x34\xa0\xe4\x8d\x12\xd2\x9a\x1b\xd0\xb8\xf6\x2f\xce\x55\x41\xa9\x08\x8a\x4a\xb5\x9c\x35\x62\xd8\x68\xe5\xf2\x51\x25\x76\xf8\x51\xe0\x2b\xa1\xb9\x0b\xdf\xf7\x68\x19\x67\x96\x79\x2f\x8b\x14\x63\x25\x2d\x4a\x6b\x82\x4b\x50\x7c\xdc\x1d\x1d\x11\xb9\x71\x38\x5c\x20\xb9\xaf\x94\x99\x3f\x3d\xc3\x6a\x91\x1c\x5c\x78\x9d\x7c\x86\xa1\xe0\x37\x2e\xbc\x7b\xf9\x86\x04\x24\x09\xc8\xf3\x4f\x68\x7a\xec\x53\x52\xcf\x9d\x9a\xb6\xc0\x9a\x35\x22\xf0\xf4\xd9\xc7\x33\xf3\xbb\x3d\x2e\xe1\xf0\x90\xaa\x4e\xfc\xc5\xe5\x19\x2a\x48\xae\xfd\xa9\x99\xb5\xc8\x43\x49\x13\xa6\x57\xdf\x4c\x70\x9d\xd7\x52\x14\xa5\xab\x27\x2b\x44\x09\x0d\xd3\x06\x39\x15\xbe\xd3\x2a\xa1\xba\x52\xe2\xcb\x08\x5b\x2d\xac\x6a\xa0\x51\x46\x90\x1b\xb8\x5a\xd6\xc9\xcc\xfb\x1e\xea\xe8\x3f\x95\x68\x4b\xd4\x27\x18\x08\x17\xa3\xde\x46\xf0\x1b\xc0\x37\x2c\x5a\xcb\x56\x15\xc6\x12\x49\x5c\x85\x99\x76\xfb\x23\xf8\x87\x52\x15\x32\xe9\x4d\x58\x55\xbd\x8a\xe7\xfb\x57\x64\x45\x09\x6a\xed\x04\x05\x90\x0e\x1b\x7d\x1f\x48\x47\xf0\x79\xd9\xdf\x78\xee\x8c\x9a\x6c\xf7\xec\x29\x24\xc7\xb7\x1e\x63\x5f\x37\x6d\x89\x06\x13\x0c\x4c\x3b\xdb\x07\x91\x39\xdd\x72\x39\x21\xb1\x82\xaf\xf2\xa4\x3e\xeb\x5d\x0e\xfd\x37\xbd\x14\x5b\x05\x81\xaf\xa2\xaa\xa0\xa6\xbc\x4a\x72\x83\x55\x7a\x86\x22\x39\x87\x55\xb6\xb6\x54\x31\x88\x79\xdf\x52\x26\x51\xfc\xbd\x38\x3e\xe7\x56\x47\xa6\xd8\x0a\xc9\xdf\xcb\x32\x47\xed\x70\x28\x88\x14\x56\x2e\x13\x76\xbb\x35\xb3\x45\x49\x2e\xc2\xf1\xcd\x65\xa1\x5c\xda\x67\x02\x49\xdd\xe2\x39\xe6\xae\x8d\xec\xda\x8a\x50\x08\x68\xb3\x35\xbd\xf7\xe1\xb8\x66\x14\x01\x8e\x0d\x35\x4b\x52\xd9\x32\x38\xd8\x56\xaa\x57\x49\x96\x1a\x2f\x92\xee\x90\xee\x05\x7a\x03\x25\xb2\xca\x96\x7b\xba\x5a\x22\xd3\x76\x85\xcc\xfa\xe7\xd4\x58\xa0\xd8\xb9\x72\x06\x1a\x37\x6d\xc5\x34\x08\x69\x51\xef\x58\x65\x5c\x63\x67\x4b\x1f\x15\xb1\xa6\x09\x03\x1a\x4d\xa3\x24\x27\x04\x56\xb9\xe4\x8b\xc6\x9a\x00\xe2\xc3\x34\xbb\x5b\x7e\xf8\xe9\x08\x84\x7b\xeb\x8d\x72\x09\x53\x98\xc2\x97\x3a\x0a\x60\xef\x74\x3f\x3e\xce\xc7\x50\x74\x05\x10\x56\x1a\xd9\xd6\x0c\x1d\x83\x52\x35\xe8\x43\x9c\xd9\xae\xcd\x8b\x68\x1c\xdf\x42\xd5\x08\x2b\x56\x6c\xa9\xa9\x14\x12\x1d\x6e\x8d\xa6\xad\xdd\x94\x15\x10\x79\x24\x01\xe5\x24\x5f\x8c\x1f\x66\xb3\xe9\x78\xe9\xba\xf1\x23\x7b\xb9\xe1\x8e\xd4\x0b\xd3\x21\xf6\xb5\x17\x7e\xa7\xd1\xaa\x40\x63\x28\x6c\x22\x79\x7c\x86\xf9\x24\x5b\xfa\x96\xdf\xf3\xdd\x89\xff\x88\xd8\xdb\x46\xcd\xfd\xe0\x4a\x5b\x34\xcb\x1a\x94\x16\x98\xdc\x83\x72\x31\xb4\x6e\xb5\x8f\x25\xef\x09\x7e\xd6\x34\xc0\x56\xaa\xf5\x26\x78\x0d\xc1\x26\x6c\xff\x79\x69\x2a\x4c\xa1\x9c\xea\x18\xb0\xbc\x32\x03\x56\xef\xc3\x13\x7a\x01\x1e\xd2\x9a\x89\x0a\x7d\x4f\x2f\x08\xdc\x2b\x29\xcc\x60\xc5\x78\x62\x40\xa7\xe4\x34\xce\x33\x31\xbe\x3e\x3a\xee\x63\x25\xd7\xc2\x0f\x7a\x0d\x33\xc6\x96\x5a\xb5\x9b\x72\x2a\x29\x8c\xf9\x21\x78\xe3\x25\x2a\x4d\x4c\xc8\xc4\xf1\x8f\xa7\xcf\xf3\x6d\x69\x88\xab\x03\x59\x8d\xc6\xb0\x4d\x3f\x50\x35\x32\xd3\x8b\xd1\x28\xf3\xf6\xef\x66\xba\x23\xa3\xff\x7a\xf6\xd6\x5a\x68\x63\x97\xa2\xc6\x44\x5c\xc5\x4e\x36\x23\xbf\xb9\xe2\x7f\x08\x7d\x6b\xbe\x0a\x3e\x90\x03\x79\x63\xb9\xbe\x35\xb5\x9c\xaf\xad\x48\x7a\xd1\x69\xd4\x91\xb6\x3b\x5b\x1f\x3a\xdd\xa3\x39\x20\xa2\x49\x92\x50\xd4\xfa\x43\xcc\x1a\x89\x02\xbb\xde\x6b\x8f\x92\xb7\x3f\x9c\x7e\x44\x6d\xd2\x24\x19\x42\xe9\xdd\x83\x59\x9a\x69\x1b\x8d\xd6\xee\xc7\x67\xcf\x4e\x7b\xb9\x60\x21\xad\xaa\x79\xc5\x24\x76\xcf\xe2\xb2\x71\xb7\xf2\x86\x92\x6d\x3d\x53\x1c\x7d\x5f\x1b\x36\x72\x69\xac\x6e\xa9\x9b\x41\xde\x3f\x3c\xb2\x5f\xda\xab\x7b\x4b\x36\x19\xe7\x1a\x4d\xf2\xa0\x56\x6d\x51\x9e\x0e\x4e\xf1\x3f\x18\x77\x71\xec\x9c\x23\x30\x4e\xa6\x14\xf8\x9e\x63\xa3\x91\x1a\x13\x7e\x15\x3d\xe1\x9b\x40\xe0\xf3\x37\xc5\x67\xf0\x2e\xd8\x09\x06\xcd\x5b\x68\xd4\xbe\xb9\x1e\x00\x3c\xb9\xb8\xee\x3f\xcc\x55\x30\x19\x59\x2c\x9f\x5c\xdc\x7c\x29\x40\xaf\xbb\xaf\x8b\x0e\x66\xd2\xed\x9d\x34\x7f\x00\x13\xa4\xe2\x36\x79\xa7\x57\x3c\x61\xe7\xdb\xbe\x43\xfb\x17\x19\xf8\xf5\xf9\x9b\x5e\xa9\xa7\x2f\xcc\x97\x37\xfe\x0f\xa5\xa3\x91\xb3\x63\xd1\xbd\xe5\x61\x6a\x0a\xff\x2e\xb5\x3a\xf9\x87\x0b\xc0\x94\xec\x2f\x7f\xfb\xee\xcc\x24\xdd\x1f\xa0\xfc\xf3\x5b\xac\x5d\x07\x12\x4e\x9e\x4f\x68\x1d\xd9\x2e\xf5\x7a\x97\x1c\x4a\x26\x37\x58\xa9\x4d\xe2\x38\xa2\x46\x63\x59\xdd\xa4\xb9\xe6\x12\x1e\x7f\x67\xee\x70\x22\x8f\xc7\x8d\xdf\xf9\x6b\xef\x64\xba\xff\x4a\x31\x71\xb6\x08\xc9\xd4\xcb\x1c\x9d\xa0\x70\x7f\x1a\xbe\x55\x91\x3a\xf9\x03\x50\x98\x7f\x2e\x1e\x66\x7f\x04\x44\x3a\x0b\x7d\x95\xa6\x40\xf5\x37\xa2\x4c\x1d\xe4\xab\x84\xbf\xa3\xff\xd1\x94\x16\x52\x53\xaa\xfa\x6f\x83\xff\x06\x00\x00\xff\xff\x39\xc4\x54\x6a\x0b\x17\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 5899, mode: os.FileMode(420), modTime: time.Unix(1614124224, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
