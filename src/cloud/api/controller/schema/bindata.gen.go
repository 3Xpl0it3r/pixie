// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x51\x6f\xe3\x36\x12\x7e\xf7\xaf\x98\x34\x0f\x9b\x00\x3e\x5f\x71\xb8\x16\x07\x3f\x55\x67\xab\x5d\x5d\x1c\xaf\x2f\x76\x76\xaf\x58\x04\x29\x2d\x8e\x2d\xc2\x12\xa9\x92\x94\x13\x5f\xd1\xff\x7e\x18\x92\x92\x45\xdb\xd9\x62\x8b\x7b\xb2\x49\x0e\x87\xdf\x0c\x67\x3e\xce\xe8\x1a\x56\x85\x30\xb0\x11\x25\x02\x47\x93\x6b\xb1\x46\x03\xb6\x40\x30\x79\x81\x15\x83\x8d\x56\x95\x1b\x27\x8b\x0c\x0c\xea\xbd\xc8\x71\x34\xb8\x1e\x5c\x43\x66\xdf\x19\x90\xca\x82\xe0\xc8\xca\x21\xac\x1b\x0b\x2f\x08\x12\x91\x83\x55\x50\x31\xd9\xb0\xb2\x3c\xc0\x16\x25\x6a\x66\x11\xec\xa1\x46\x03\x1b\xa5\x9d\xbe\xd5\xa1\xc6\x65\xae\x45\x6d\xe1\x31\x1b\x5c\xc3\x4b\x81\x12\x6c\x07\x46\x18\x68\x6a\xce\x2c\xf2\x91\x87\x98\x33\x09\x6b\x04\xae\x24\xc2\xfa\x00\xba\x91\x52\xc8\x2d\xfc\xe2\xa5\x46\xa6\xf8\x05\x44\x50\xc0\x85\xc6\xdc\x2a\x7d\x18\x0d\x82\x7d\x2d\x06\x13\xcc\x1a\xf1\x91\x35\xe7\xf2\x43\x60\x92\x43\xae\x6a\x81\x06\x84\x25\x33\x08\xea\x0f\xb5\x78\x15\xf8\x97\x92\xad\xcd\x5f\x59\x2d\xa0\x66\xf9\x8e\x6d\xd1\x99\xd2\x18\x07\xe7\x68\xcd\x68\x30\x08\xae\xfb\x6d\x00\xf0\x6b\x83\xfa\x30\x86\x7f\xd3\xcf\x00\xa0\x6a\x2c\xb3\x42\xc9\x31\xdc\x87\x7f\x83\xdf\x07\x03\x72\x0c\x3c\x1a\xd4\x99\xdc\x28\xb7\x4d\xf0\x31\x64\xd3\xab\x01\x80\x64\x15\x8e\x61\x69\xb5\x90\x5b\x1a\x63\xc5\x44\xd9\x9f\xa8\x45\x6e\x1b\x1d\xc9\x28\xbd\x9d\x9f\x6c\x53\x7a\x9b\x4d\x8f\x13\xfd\x43\x97\x68\x2d\x79\x92\xce\xdd\xe1\xa1\xbf\x6b\xcf\xca\x06\xa3\x5d\x28\x9b\x0a\x12\x6d\xc5\x86\xe5\x96\x8c\x76\xdb\x00\x92\xd5\xf3\xe3\xfc\x6e\xfe\xe1\xd3\xbc\x1d\xce\xb2\xf9\xe3\x7f\x9e\x93\xfb\xe9\xf7\x7f\x6f\xa7\xa6\xc9\xc3\xa7\x6c\x1e\xcf\x4d\x3e\xcc\x57\x49\x36\x4f\x1f\x9e\x97\xe9\xea\xf9\xe7\xe4\x7e\xb6\xbc\xbc\x74\x41\x5f\x2c\xb0\x4a\xef\x17\xb3\x64\x95\x06\x25\x1d\xd8\xc6\xaa\x5c\x55\x75\x89\x16\x53\x69\x85\x3d\x2c\x2d\x45\x23\xe1\x4e\xd2\x65\x0f\x36\x8d\x16\xe9\x7c\x9a\xcd\x7f\x0a\xa3\x87\xc7\xf9\xfc\x38\xfa\x31\xc9\x66\xe9\x34\x0c\x56\xe9\xc3\x7d\x36\x4f\x56\xe9\xf4\xe2\x49\x49\x4e\x97\xdb\x39\x28\x89\xfc\x73\x0d\x89\x04\xe4\xc2\x02\x73\x62\xa0\xf2\xbc\xd1\x06\xc4\x06\x18\x05\x94\x86\x82\x19\xa8\x14\x17\x1b\x41\xc9\x54\x20\x08\x59\x37\x16\x2c\xbe\x5a\x8a\x36\x21\x0d\x6a\x77\x69\x4a\x03\xc7\x12\xdd\xff\xbc\x60\x9a\xe5\x16\xb5\x19\xb9\x43\x5c\xe4\x0b\x99\x97\x0d\xa7\x9c\x3e\xd4\x6e\x83\x74\xfa\x76\x78\x58\x2b\xa6\xb9\x0b\xf8\x9a\x19\xaf\x40\x55\x15\x93\xdc\x6d\x27\xc4\xe9\x34\x5b\x79\xb8\x60\xb0\xc4\xfc\x88\x57\x96\x87\xcb\xa0\xf3\x42\x19\x94\xc0\x24\xb0\x9e\x37\xc0\x34\xdb\x2d\x1a\xda\x3b\x6a\x61\x71\x91\xbb\x84\xb4\xca\x1d\x41\xa0\xa2\x2d\xb6\x60\x96\x72\xd0\x14\xaa\x29\x39\x54\x6a\x8f\x4e\x88\x8e\x7a\x67\x80\xce\x26\x26\xf1\x19\x2a\xc9\x31\xac\xae\xb5\xaa\xb5\x70\x5c\xc3\xd6\xad\x15\xcb\x74\x96\x4e\x56\x5f\x88\x87\x3b\x21\x79\x08\x87\xbb\x28\x1c\xee\x9e\x17\x1f\xa6\xe1\xdf\xf2\xe3\xa4\xfd\x37\x79\xc8\x16\xab\x30\x98\x27\xf7\xe9\x72\x91\x4c\xd2\x2e\xa5\xa6\x58\x97\xea\x50\xa1\xb4\x77\x78\x38\x49\xe6\x93\xf4\xca\x35\x12\xc1\x25\xf6\xde\x8c\xe1\xc7\x52\x31\x4b\xb3\x44\xc3\xe7\x99\x9a\x2c\xb2\xff\xab\x3e\xc7\x48\x4e\x1d\x39\x74\xdc\xd1\xcf\x55\x98\x09\xac\x60\x6e\x76\x78\x30\x63\xf8\xec\xf7\x3f\x5d\xdd\x8e\xe1\x73\x8f\x35\x9e\xdc\xb9\x65\x63\x2c\xea\x9b\x00\xec\x76\x0c\x13\x3f\xd3\x2a\x0c\x02\xa4\xa7\xbf\xd2\xdf\x3c\x51\x52\xa2\x8b\xae\x73\x35\xc7\xb5\xa3\x42\xd1\x92\xd0\x0d\xeb\xb1\xd1\x38\xe2\x26\xd2\x30\xcb\xda\x19\xda\xd7\xca\x9a\x6e\x57\x9f\x28\x6f\x8f\xdb\x4d\x7b\x52\x3f\x26\x6f\x5c\x16\xb6\xd2\xc3\x10\x83\x0b\x65\xc6\x90\x49\x3b\x0c\xd9\x31\x7e\x83\x08\x86\xad\xa9\x8f\x47\x26\xbe\x8d\x85\x1f\xd0\x34\xa5\x3d\x3d\xf6\x47\x81\x25\x3f\x3d\x7b\x43\x93\xc1\xe4\x8b\x11\x3d\x74\x2c\xa9\xf1\xd7\x46\x68\xe4\x89\xde\x92\x30\xdd\xc0\x65\xf1\xa7\xcb\xf0\x22\xe9\x65\x97\xc5\x4f\x03\x97\xb4\xfe\xc5\xab\xb6\x1a\x50\xf2\x5a\x09\x69\xcd\x10\x34\x6e\xd0\x25\x26\x57\xb9\x7b\x63\xf3\x52\x35\x9c\xd5\x62\x54\x6b\xe5\xb2\xbd\x14\x7b\xfc\x28\xf0\x85\xd0\xcc\xc2\xff\x7b\xb4\x8c\x33\xcb\x7c\x50\xb4\x12\x13\x25\x2d\x4a\x6b\x7a\x31\x31\x3b\x59\x22\x71\xe3\x70\xb8\x30\x75\xff\x62\x65\x7e\xf5\x82\xaa\x65\xb4\x70\xe5\x6d\xf2\xf9\x4b\xa9\x65\x5c\xf2\xf4\xb2\x99\x0e\x88\xd2\xdb\xeb\x8f\x64\x7a\xea\x63\x51\xaf\x9d\xaa\xa8\xa0\x9a\xd5\x22\xe8\xf4\xb9\xed\x95\xf9\xd9\x9e\x96\xb0\x78\x24\x82\xb3\x78\x71\x59\x4c\x74\xef\x2a\x92\x8a\x59\x8b\x3c\x3c\x18\xc2\xf4\x5e\x0f\x13\x42\xe7\xa5\x10\x79\xe1\xd8\x7a\x8d\x28\xa1\x66\xda\x20\xa7\x67\xe5\x9c\x83\x55\x47\xd4\x9e\xa4\xd9\x7a\x69\x55\x0d\xb5\x32\x82\xc2\xc0\xbd\x14\xdd\x99\x59\x3f\x42\x9d\xfc\xa7\x02\x6d\x81\xfa\x0c\x03\xe1\x62\x54\x5d\x08\x3e\x04\x7c\xc5\xbc\xb1\x6c\x5d\x62\xfb\x00\x91\x56\x61\xd2\x6e\x7e\x0c\xff\x54\xaa\x44\x26\xbd\x0b\xcb\xb2\xf7\x9e\xf8\x82\x12\x59\x5e\x80\xda\xb8\x83\x02\x48\x87\x8d\xfe\x1f\x45\xc7\xf0\x79\xd5\x9f\x78\xea\x9c\x1a\x4d\xf7\xfc\x29\x24\xc7\xd7\x9e\x62\xff\x2a\xd9\x02\x0d\x46\x18\x98\x76\xbe\x0f\x47\x66\xb4\xcb\x71\x42\xe4\x05\xff\x86\x92\xf9\xac\xb7\x39\x14\xc4\x74\x53\x6c\x1d\x0e\x7c\x11\x65\x09\x15\xdb\xf9\x17\x2f\x78\xa5\xe7\x28\x3a\xe7\x38\x4a\x36\x96\xf8\x98\x94\xf7\x3d\x65\x22\xc3\xdf\xca\xe3\x4b\x61\x75\xe2\x8a\x9d\x90\xfc\x2d\x96\x39\xa9\x50\xc3\x73\x43\x69\xe5\x98\xb0\x9b\xad\x98\xcd\x0b\x0a\x11\x8e\xaf\x8e\x85\x32\x69\x9f\x08\x24\xd5\x62\x97\x94\xbb\x22\xad\x7b\xb4\xc3\x43\x40\x93\x8d\xe9\xdd\x0f\xc7\x0d\xa3\x0c\x70\x6a\xa8\x14\x91\xca\x16\x21\xc0\x76\x52\xbd\x48\xf2\xd4\x64\x19\xd5\x5e\xb4\x2f\xc8\x1b\x28\x90\x95\xb6\x38\xd0\xd6\x02\x99\xb6\x6b\x64\xd6\x5f\xa7\xc6\x1c\xc5\x1e\x39\x55\x4c\x1a\xb7\x4d\xc9\x34\x08\x69\x51\xef\x59\x69\x5c\xd9\x64\x0b\x9f\x15\x81\x37\x49\x9d\x46\x53\x2b\xc9\x09\x81\x55\x8e\x7c\xd1\x58\x13\x40\xbc\x4f\x93\xd9\xea\xfd\xcf\xe7\x20\x1a\xd9\x83\xe1\x6e\xfc\xa8\x31\xf7\x6f\x9f\xef\xa9\x16\xd4\x87\xc0\x84\xf8\xd4\x21\x10\x06\x6a\xad\xf6\x82\xb7\x09\x77\xb4\xc1\xf7\x63\xc2\xc8\x77\xd6\x37\x21\x2e\xc1\x28\xd6\x8c\xaa\xc8\x3a\x66\xba\x62\x4c\xa3\xc1\x6a\x5d\xa2\x81\xf7\xab\xd5\xe2\x9d\x81\xef\xbe\xfd\xd6\xa1\x6b\x4c\xe7\xbf\xcb\xe0\x5d\xa0\x6e\x95\x63\x7b\x61\x8e\x58\x83\x1d\x3f\x3d\x2c\x26\xad\x05\x14\x4d\x6b\x8d\x6c\x67\x46\x4e\x41\xa1\x6a\xf4\xfc\xc4\x6c\x57\x01\xb6\x86\x3b\xbd\x39\x01\x5d\xb3\x7c\x47\xf5\xa6\x90\xe8\x4c\xd6\x68\x9a\x8a\x12\x13\x02\x22\x8f\x24\xe0\x9c\x66\xcb\xc9\x87\xf9\x3c\x9d\xac\x5c\xa1\x7e\xea\x67\x6a\x15\xe9\x6e\x42\xaf\x19\x39\x5a\xf8\x99\x5a\xab\x1c\x8d\xa1\x9c\x6f\xc5\x5b\x1f\x2c\xa6\xc9\xca\x77\x03\x5e\xef\x5e\xfc\x57\xb4\x65\x6f\x6b\xb9\x77\x3b\x4d\x51\x67\x6c\x50\x5a\x60\xf2\x00\xca\x11\xc0\xa6\xd1\x9e\x08\x7c\x18\xfb\xce\xd5\x00\x5b\xab\xc6\xbb\xe0\x25\x30\x85\xb0\xfd\xd8\xa4\x2e\x33\x86\x72\x6e\x63\xc0\xf2\xc2\x0c\x58\x7d\x08\xf1\xe7\x0f\xf0\x90\x36\x4c\x94\xd8\x45\x8d\x54\x2f\x64\x30\x83\x35\xe3\x91\x03\x9d\x91\x69\xdb\xea\xb4\xe4\xf0\xd1\x69\x9f\x28\xb9\x11\xbe\x4f\xac\x99\x31\xb6\xd0\xaa\xd9\x16\xa9\xa4\xc8\xe2\x47\xe6\x69\x37\xd1\xbb\xca\x84\x8c\xb2\xf6\xb4\x9b\xbd\x5c\xb1\x06\x52\x38\x8a\x55\x68\x0c\xdb\xf6\x59\xc6\xc7\x6f\x37\xd1\x9e\x79\xf7\x0f\x93\xee\xc9\xe9\xbf\x5d\xdc\xb5\x11\xda\xd8\x95\xa8\x30\x3a\xae\x64\x67\x93\xad\xbe\x85\xe2\x7f\x0a\x7d\x63\xbe\x0a\x3e\x50\x00\x79\x67\xb9\x1a\x39\xf6\x9c\x2f\x0c\x90\xec\xa2\xd5\xd6\x46\x9a\xee\x7c\x7d\xac\xaa\x4f\x5a\x84\x16\x4d\xc4\xa0\xad\xd5\xef\x5b\xba\x88\x0c\xd8\xf7\x6e\x7b\x1c\xdd\xfd\x71\xf5\x23\x6a\x13\x33\x7c\x48\xa5\x37\x17\xe6\xf1\x33\x51\x6b\xb4\xf6\x30\xb9\xb8\x76\x5e\x88\x06\x0f\x69\x55\x2e\x4a\x26\xb1\xbb\x16\xf7\x94\x74\x23\xef\x28\xd9\x54\x73\xc5\xd1\x17\xe5\x61\x22\x93\xc6\xea\x86\x4a\x31\xe4\xfd\xc5\x13\xff\xc5\x8d\x86\xf7\x64\x9d\x70\xae\xd1\x44\x17\x6a\xd5\x0e\xe5\xe5\xaf\x29\x99\xdc\x8b\xf0\x75\xe1\xec\x53\x8d\x70\x6b\x33\x21\x77\xe7\x7b\xdb\xef\x41\x6e\xe7\xc4\x05\x56\x00\x15\x75\x53\xf0\x03\xc7\x5a\x23\x55\x64\xfc\xa6\x8d\xa2\x6f\x82\x80\x7f\xb8\x28\xb7\x43\x64\xc2\x5e\x30\xa8\x5f\x43\x85\xfa\xcd\xed\x00\xe0\xd1\x71\x42\xff\x52\x6f\x82\xbb\xc9\xdb\xd9\xf4\x6a\xf8\xa5\xe4\xbe\xed\xfe\x5d\x75\x30\xa3\x32\xf7\xac\xea\x05\x98\x22\xbd\xea\xd3\x37\x8a\xe4\x33\x75\xbe\xde\x3d\xd6\xbd\xad\x02\x3f\xbe\xbc\xd3\x1b\xf5\xf8\x85\xb6\x75\xe8\xbf\x65\x9d\x74\xb2\x3d\x15\xfe\xde\x48\xc5\x4d\x7c\x6f\x43\xcf\x1a\xd1\x07\xb5\xa1\xcb\x9e\x68\xea\x76\xdc\xbb\xfe\x5e\x60\x1d\xfb\x4f\xdf\x6c\xeb\x28\x22\x4c\xc1\xfe\xf6\xdd\xf7\x17\xba\xfd\x7e\x1b\xea\xe3\xd0\x62\xe5\xea\xb8\xb0\xf2\x74\x26\xeb\xc4\xf6\x71\xfa\x39\x96\x2a\x98\xdc\x62\xa9\xb6\x51\x04\x8b\x0a\x8d\x65\x55\x1d\x93\xde\x35\x3c\xfc\x41\xf7\xe6\x8e\x3c\x6d\xda\xfe\xe0\x9b\xe5\xd9\x17\x88\xaf\x3c\xa6\xed\xd0\x02\xab\xfb\x33\xc7\x67\x28\xdc\xd7\xd0\xd7\xb2\x95\x8e\x3e\x64\x0a\xf3\xaf\xe5\x87\xf9\x9f\x01\x11\x77\x94\x5f\x65\x29\x50\x21\xd0\xa2\xec\x45\xdb\xd7\x1e\xfe\x86\xfd\x27\xbd\x6e\xe0\xc8\xd8\xf4\xdf\x07\xff\x0b\x00\x00\xff\xff\x36\xa0\xfe\x75\xe2\x17\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 6114, mode: os.FileMode(436), modTime: time.Unix(1619569314, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
