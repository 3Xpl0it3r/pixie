// Code generated for package schema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x57\x5f\x6f\xdb\x38\x12\x7f\xd7\xa7\x98\x22\x0f\xdb\x00\x89\x81\x5b\xec\x15\x07\xbd\x69\x6d\xa5\x15\x9a\xc8\xbe\x48\x4e\xaf\x57\x14\xc1\x58\x1c\x5b\x44\x24\x52\x25\xa9\x24\xbe\x43\xbf\xfb\x81\xa4\x24\x53\x49\x7a\xfb\x64\x6a\x38\x7f\x7e\x9c\xf9\xcd\x90\x3e\x83\xb2\xe6\x1a\xf6\xbc\x21\x60\xa4\x2b\xc5\x77\xa4\xc1\xd4\x04\xba\xaa\xa9\x45\xd8\x2b\xd9\xba\xef\x64\x93\x81\x26\xf5\xc8\x2b\x5a\x44\x67\xd1\x19\x64\xe6\x37\x0d\x42\x1a\xe0\x8c\xb0\xb9\x80\x5d\x6f\xe0\x89\x40\x10\x31\x30\x12\x5a\x14\x3d\x36\xcd\x11\x0e\x24\x48\xa1\x21\x30\xc7\x8e\x34\xec\xa5\x72\xfe\xca\x63\x47\x45\xa5\x78\x67\x60\x9b\x45\x67\xf0\x54\x93\x00\x33\x81\xe1\x1a\xfa\x8e\xa1\x21\xb6\xf0\x10\x2b\x14\xb0\x23\x60\x52\x10\xec\x8e\xa0\x7a\x21\xb8\x38\xc4\xd1\x19\xc0\x41\x61\x57\xff\x68\x2e\x3d\xe4\x4b\x17\xc7\x7b\x1e\x63\x5f\x1a\x3d\x1c\x68\x31\x28\xc3\xe5\xa5\xec\x4d\xd7\x9b\x51\xce\x16\x46\x3b\x18\xbc\xaa\xe1\x89\x37\x4d\x00\xbc\x26\x18\x94\xad\x6f\x0f\xd0\xd4\x68\xbc\xde\x8e\xa0\xe3\xd5\x03\x31\xe8\x3b\x0b\xcd\xaa\x6f\xb3\x45\x34\xe4\x36\xf0\xef\x2c\x35\xe8\x5a\xf6\x0d\x03\x7a\xe6\xda\x00\x17\x3e\xdd\xd8\x12\x30\xae\xa8\x32\x52\x1d\x01\xc3\x22\x4c\x98\xad\xf9\x22\x8a\x86\xd2\xfc\x37\x02\xf8\xd1\x93\x3a\xc6\xf0\x4f\xfb\x13\x01\xb4\xbd\x41\xc3\xa5\x88\xe1\x66\x58\x45\x3f\xa3\xc8\x81\xde\x6a\x52\x99\xd8\x4b\x67\xc6\x59\x0c\xd9\xea\x5d\x04\x20\xb0\xa5\x18\x0a\xa3\xb8\x38\xd8\x6f\x6a\x91\x37\xa1\xa0\xe3\x95\xe9\x55\xa0\xf3\x33\x8a\x48\xf4\x2d\x24\xca\xf0\x3d\x56\xc6\x16\xd2\x39\x05\x48\xca\xfb\x6d\xfe\x39\x5f\x7f\xc9\xc7\xcf\xeb\x2c\xdf\xfe\xeb\x3e\xb9\x59\x7d\xf8\x63\x14\xad\x92\xdb\x2f\x59\x3e\x97\x2d\xd7\x79\x99\x64\x79\x7a\x7b\x5f\xa4\xe5\xfd\xd7\xe4\xe6\xba\x78\x7b\x2b\xf4\x37\x01\xe9\x8d\xac\x64\xdb\x35\x64\x28\xa9\xec\xa1\x27\x48\xc9\x0c\xd1\x19\x24\x02\x88\x71\x03\xe8\xd4\x40\x56\x55\xaf\x34\xf0\x3d\x20\xf4\x9a\x14\xd4\xa8\xa1\x95\x8c\xef\xb9\x25\x71\x4d\xc0\x85\xab\x3a\x3d\x1b\x5b\x59\x2e\x34\x29\xc3\xc5\x01\xa4\x02\x46\x0d\xb9\x75\x55\xa3\xc2\xca\x90\xd2\x0b\x17\xc4\x55\x9d\x8b\xaa\xe9\x99\xed\xa5\x63\xe7\x0c\x7c\x99\x1f\xe8\xb8\x93\xa8\x18\xa0\x60\xd0\xa1\xf6\x0e\x64\xdb\xa2\x60\xce\xdc\x22\x4e\x57\x59\xe9\xe1\x82\xa6\x86\xaa\x13\x5e\xd1\x1c\xdf\x06\x5d\xd5\x52\x93\x00\x14\x80\x41\x36\x40\xf7\x87\x03\x69\x6b\xbb\x18\x61\x31\x5e\xa1\xb1\xb8\xa4\x0b\x61\x41\xcd\x4c\x1c\xaf\xb9\x19\x49\xda\xca\x47\xdf\x00\x36\xd4\x6f\x1a\x6c\x6c\xdb\xc1\xd2\x09\x85\x4d\x0c\x76\x9d\x92\x9d\xe2\xae\x55\x70\x37\x9e\xa2\x48\xaf\xd3\x65\xf9\x66\x95\x52\x61\xb8\x39\x7e\xe6\x82\xf9\x2a\xa5\x9f\x83\x2a\xd9\xaf\xcd\x7a\x35\xac\x8a\xbb\xe5\xb8\x5a\xde\x66\x9b\x72\xf8\xc8\x93\x9b\xb4\xd8\x24\xcb\x74\xe2\xb7\x6b\x01\xe7\xce\x22\x8d\x27\xbe\x5b\x0e\x57\x4d\xaf\x8d\x15\x2e\xfd\xe2\x85\x7c\x29\x85\xa0\xca\xf7\xcd\xf2\xa5\xe8\xa4\xcb\x47\xc6\xbf\xc7\x80\xfa\xf1\xac\x11\xce\x63\x58\x5e\x67\xa3\xc4\xda\x8d\xba\x7a\xb2\xca\x83\x96\x3b\x3f\x99\xeb\x31\x12\x3d\x1b\xcb\xa7\x3b\xae\xaf\x7a\x51\x39\xf1\x7b\x3f\xcf\xa6\x26\xbc\x80\x7d\x2f\x2a\xeb\x48\xc7\xf0\x6d\x10\x7e\x3f\x8f\x21\x34\x72\xd1\x83\xac\xbf\x77\x64\x1e\x7d\x5c\x0c\xa5\xdc\x48\x1d\x43\x26\xcc\xc5\x40\xb2\xf8\x17\xfd\x74\x3e\xdf\xb8\x25\xdd\x37\xe6\xdd\x94\xfe\xd7\x7b\xae\x16\xb6\x1b\xc8\xce\xfc\x16\x8d\x21\x36\xf4\x13\xd7\x41\x73\xe9\x01\x8e\x9f\xbc\x96\xcc\x3b\x22\x01\x1d\x2a\x4d\x6c\x9c\xa7\x73\x8a\xca\x89\xc7\x9e\xc3\xb8\x2b\x8c\xec\xa0\x93\x9a\x5b\xb8\xae\x91\xa6\x98\x59\x78\x6a\xa7\xff\xa5\x26\x53\x93\x7a\x85\xc1\xe2\x42\x78\xc4\x86\xb3\x0b\xa0\x67\xaa\x7a\x83\xbb\x86\xc6\xfe\xb4\x5e\xb9\x4e\x27\x79\x0c\x7f\x4a\xd9\x10\x0a\xdf\xab\x4d\x13\xb4\x9b\xbf\xe7\x08\xab\x1a\xe4\xde\x05\x1a\x40\x3a\x6c\x76\x7d\x52\x8d\xe1\x5b\x19\x0a\xbe\x4f\x49\x9d\x89\x83\x7c\x72\xc1\xe8\x39\x70\xec\x9b\xd6\xd4\xa4\x69\x86\x01\x95\xcb\xfd\x10\x32\xb3\x56\xae\xd6\xb3\x2c\xf8\x11\x63\x8f\x8f\x81\xf1\x70\x4f\xdb\x4a\xe1\x6e\x08\xe8\x6e\xbb\x16\x1f\xfc\x40\x18\xb2\x12\x24\x6a\xe1\xc8\x3b\x7e\x25\x7b\x43\xaa\x70\xce\xc3\x4c\xe9\xd9\xc1\x43\xda\xbc\x95\x81\xb7\xf7\x5d\x2a\xec\xf8\x88\x7f\x31\x56\x22\x80\xb0\xcb\x22\x80\xd5\xf0\x24\x70\x0c\x1f\xa4\xe3\x68\x1a\x7a\xbe\x30\x68\x7a\x1d\xa4\x99\xd1\x1e\x2d\x91\xb5\xb1\xa3\x8d\xef\xed\x6b\xa7\x1e\x78\xf2\x20\xe4\x93\xb0\x07\xbe\xfb\xf7\x7d\x31\xbf\x64\xac\xe9\x60\xa2\xa1\x26\x6c\x4c\x7d\xb4\xd6\x35\xa1\x32\x3b\x42\xe3\x0b\xa3\xa8\x22\xfe\x48\xcc\x5e\x0d\x8a\x0e\x7d\x83\x0a\xb8\x30\xa4\x1e\xb1\xd1\xee\x7e\x30\xb5\xe7\xf7\x30\xa6\xac\x3b\x45\xba\x93\x82\x59\x10\x46\x82\xa2\x1f\x3d\x69\xa3\x4f\x38\x3e\xa5\xc9\x75\xf9\xe9\xeb\x0b\x1c\xfe\x39\x23\xad\x09\xe3\xba\xf2\xb3\xcd\x76\xa3\x67\xd0\xc7\xdb\xcd\x12\xaa\x69\xe2\xc1\x4e\x11\x3e\xe8\x85\x73\x50\xcb\x8e\x7c\xbf\xa2\x99\x2e\x8c\x11\x90\xf3\x5b\xc9\x96\x60\x87\xd5\x83\xbd\x9e\xb8\x20\x07\x5d\x91\xee\x5b\x4b\x54\x18\x10\x79\x24\x27\xa0\xab\xac\x58\xae\xf3\x3c\x5d\x96\xe9\x6a\xaa\xf6\x1d\xff\x0f\x77\xb3\x77\xcf\x0f\xae\x0e\x1d\x6a\x6d\x6a\x25\xfb\x43\x9d\x0a\x4b\x2a\x76\xa2\xd2\x68\x14\xcc\xf4\x17\x6f\x1b\xed\x0a\x1a\xcf\xeb\x6b\x37\x1a\xd4\xe6\xd3\x58\x8d\x1b\x1d\xc3\x55\x23\xd1\x4d\xeb\xc7\x00\x41\x3c\xc3\xf3\xee\x65\xc0\xf9\x15\xe1\x43\x77\x09\x63\x8a\xb4\x0e\x1f\x50\x46\x3e\x90\x98\x3d\x9f\x9c\x97\xf1\x81\xe6\x0c\x97\x8a\xd0\xd0\xf2\x8d\x6b\x2a\x02\xd8\xba\x77\x70\x88\xe5\xfd\x50\x80\x6c\xe5\x8e\x7a\xf1\xff\xf2\x74\x3e\xad\x82\x13\x9c\xae\xa8\xe1\xe5\xd6\xab\xd9\xa3\x0f\x40\xd7\xf8\xfb\xdf\x3f\xbc\x86\x3d\xbb\xad\xfc\xa1\x0d\xb5\xae\x95\x87\x9d\xef\xaf\x74\x9d\xda\x23\x29\x1d\x34\x9f\xbb\x52\x6b\x14\x07\x6a\xe4\x61\x96\x2e\xde\x92\x36\xd8\x76\x41\x5d\x46\x87\x2b\x59\x79\xc5\x1b\xec\x52\x61\x86\xfb\x7e\xbc\x0a\x43\x2f\x6c\xd4\x7c\x7d\x82\x3b\xae\x8b\x8e\xaa\x01\xd4\x01\xed\xc7\x2f\xb5\xfe\x32\xd0\xa3\xd7\x8b\x47\x03\xeb\xc0\x4f\x95\x15\x1a\x9c\x1e\xa2\xab\xa4\x4c\xee\xcb\xaf\x9b\x34\x98\x14\x7f\xae\xd7\xd7\x69\x62\x57\x59\x5e\xba\xb7\xf0\x36\xcb\xcb\xbf\xfd\xfe\x8f\x08\xe0\xea\x7a\x9d\x78\x59\x51\xde\x66\xf9\xc7\x08\xa0\xcc\x6e\xd2\x0f\x7f\xe4\xf6\x61\xbc\xda\xde\x26\x65\xb6\xce\xdd\xe7\x38\xc5\x0a\x6a\x51\x18\x5e\x4d\x31\xdd\x58\x2a\x36\xe9\x32\xbb\xca\xd2\x95\x17\xe4\xeb\x3c\xf5\xab\xe4\x63\x9a\x97\xf7\xdb\x6c\xd8\xd8\x6e\xc6\x55\x91\xde\xde\x65\xcb\xd4\x3d\xb1\xa6\x74\x5c\x89\x44\x1d\xdc\x01\x13\xe5\x5b\xf3\xe5\x1f\x07\x36\x1c\x37\x9e\x0e\xee\x5a\x30\x00\x15\xcf\x20\x3a\x1b\x3f\x60\xef\xb0\xe9\xe9\x75\x09\x4e\x31\x5d\x40\x54\x07\x4b\xb3\x19\x92\x77\xdf\x5f\xaa\xff\x65\xc1\xf6\x56\xcd\x97\xec\xe4\x6a\x56\xf7\xe9\x01\xe5\x7c\xb0\x80\x73\x31\x7c\x7b\x45\x41\x0b\x61\xa2\x81\xd7\x79\xc1\x1d\xaf\xb1\x1f\xe1\x4d\x67\x08\xf7\x7f\x46\xff\x0b\x00\x00\xff\xff\x33\x96\x69\xbc\x8a\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3978, mode: os.FileMode(436), modTime: time.Unix(1586206628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
