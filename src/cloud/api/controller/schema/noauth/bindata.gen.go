// Code generated for package noauth by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package noauth

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x31\x0a\x02\x31\x10\x45\xfb\x39\xc5\x4f\xa7\x57\x48\x67\x23\x58\x28\x88\xa5\x58\x0c\xeb\xec\x1a\xd8\x24\x4b\x66\x14\x17\xd9\xbb\x0b\x81\x88\x62\x37\xbc\x79\xbc\x2f\x4f\x93\x74\x85\xcd\x93\xe0\x78\x97\x32\xe3\x45\x00\x17\x0b\x3d\x77\xa6\xab\x76\x1d\x38\x8a\xc7\xc9\x4a\x48\x83\x5b\x7b\x6c\x9a\xb1\x4b\x7d\x76\xb4\x10\xd5\xc4\x0f\xae\xa9\x60\x12\xd5\xe3\xdc\x3e\xee\xf2\x6f\x57\xf1\x21\x45\x43\x4e\x9f\x11\x02\xba\x1b\xa7\x41\xc6\x3c\x7c\x43\x0b\x51\xd4\x38\x4e\x7b\xf5\xd8\x8e\x99\xcd\xd1\xf2\x0e\x00\x00\xff\xff\xc2\xab\x64\xad\xc7\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 199, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5b\x6f\xdb\x38\x16\x7e\xf7\xaf\x38\x99\x3e\x34\x05\x82\x62\xb0\xd8\x19\x2c\xfc\xb4\x1a\x5b\x9d\x6a\xe3\x38\xde\xd8\x69\x77\x30\x28\x0a\x5a\x3c\xb6\x88\x48\xa4\x86\xa4\x92\x78\x17\xfd\xef\x8b\x43\x52\x17\xca\x4a\x8b\x0e\xe6\x4d\x22\x0f\xbf\x73\xbf\x90\xf8\x6c\x51\x72\xb0\xa7\x1a\xe1\xdf\x0d\xea\x13\xfc\x6f\x06\xd0\x18\xd4\x73\xb8\x37\xa8\x33\x79\x50\x17\x33\x00\xa5\x8f\x73\xb8\xd5\xc7\xf6\x9f\x28\xb6\x68\xad\x90\x47\x73\xf9\x80\x27\x33\x87\xdf\xb7\x56\x0b\x79\xbc\xf8\x74\xf1\x66\x0e\xbf\xdf\xf7\x04\x17\x9f\x02\x02\xad\x99\xb0\xe7\x80\xdc\x46\x5e\x36\xc6\xa2\xbe\x14\x7c\x0e\xd9\x92\x0e\x2f\xfc\x4a\xcb\x2b\x10\xfc\x72\x5a\xb3\x0a\x2f\x25\xab\x70\x0e\x81\xd7\x8b\xc4\xc4\x66\xb8\x33\xe4\xb4\x50\x52\x62\x6e\x85\x92\xe7\x3c\xfb\xbd\x1e\x50\x24\xda\x8a\x03\xcb\xed\x25\x0b\x1f\xbb\x53\x8d\x73\x48\x06\x7f\x0e\x62\x95\xb5\x4b\x74\x90\x35\x56\xe5\xaa\xaa\x4b\xb4\x78\x29\x64\xdd\xd8\x56\xec\x2b\xc8\x1b\x6d\x94\xde\x28\x33\x87\x4c\xda\x2b\x60\x8e\xe5\x1c\x92\xc1\x99\xc4\xad\x11\xf8\x55\x2b\xf9\x7d\xb6\x6c\x31\xde\xc4\xc4\x77\x68\x9a\xf2\x8c\xed\x3b\x81\x25\x1f\xf3\x3e\xd0\x62\xd0\x60\x40\x9b\x4a\x2b\xec\xe9\x5a\x48\x7e\x35\x03\x00\xd0\xf8\x47\x23\x34\xf2\x44\x1f\x89\x98\x0c\x3a\x4d\xfe\xe9\x05\xf1\x22\xf2\x6d\x73\x3c\xa2\x21\x85\x3e\xcd\x66\x00\xaf\x60\x9b\x6b\x51\xdb\xea\xa8\x01\x25\xaf\x95\x90\xd6\x5c\x81\xc6\x03\x6a\xb0\x0a\xb8\xca\x0d\x08\x09\x79\xa9\x1a\xce\x6a\xf1\xb6\xd6\xca\xaa\x19\x40\x29\x1e\xf1\x83\xc0\x27\x12\x67\x15\xbe\x6f\xd0\x32\xce\x2c\xf3\x4e\x6e\x29\x16\x4a\x5a\x94\xd6\x0c\x7c\xbc\x1a\x6d\x11\xb9\x71\x72\xb8\xf0\x75\x5f\x31\x98\xdf\x9d\x80\xda\x46\x1b\x17\x5e\xa7\x25\xd6\xa5\x3a\x01\xa5\xc3\x0c\x80\xbb\xbf\x0a\xa5\xbd\xf6\xf9\xb1\x1c\x2e\x78\xfc\x88\x66\x00\x1f\x93\x7a\xf4\x64\x93\xb5\xd0\xac\x16\x01\x33\xd9\x64\x1d\x98\x5f\x1d\xa0\x84\xcd\xd9\x97\xd9\x6c\x98\xe7\x37\x8d\x65\xe4\x09\x97\xea\x0b\x8d\xcc\x62\x88\xfe\x28\x9b\xe0\x9f\x1c\x6b\x8d\x39\xb3\xc8\x2f\x35\x32\x43\x01\xfa\x43\x20\x30\xc0\x34\x82\x54\x4f\x90\x3b\x00\x0e\x8f\x82\x41\xfd\x1c\x34\xfa\xe1\xcd\x0c\xe0\xbe\xe6\xcc\xe2\x07\xf1\x5f\xe1\xf2\xea\x20\x8e\x97\x21\x50\x28\x4e\xb2\xe5\xc5\x15\x3c\x0e\x36\xe7\x90\x72\x61\xd9\xbe\x8c\x8e\x4c\xa4\xb8\x17\x39\x32\xd1\x99\xc5\x00\x96\x48\x71\xb7\x7c\xc1\xc0\xbf\x28\x55\x22\x93\x3d\x9c\xb7\x55\x6f\xb3\x16\xc0\xff\x4f\x9f\xf4\x0a\xde\x7f\xad\x14\x5e\xc1\x23\x2b\x1b\xfc\x76\x79\xcc\xe4\xa3\xf0\x58\x97\x58\x31\x51\x76\x25\x8e\x12\x56\x1b\xbb\x1e\x96\xbd\x2b\x28\xd9\x68\xe9\x4d\x5b\xaf\x09\x26\x16\x6e\x83\xba\x12\xc6\x08\x25\xcd\x25\xd5\xed\xce\xfa\x4d\xbc\xd9\x3b\x60\x74\xaa\x07\xf7\x0e\xf0\xd0\xb7\xfa\xd8\xa9\xad\xf4\xb1\x43\x55\xfd\x7a\x8f\x38\x20\x26\xb4\xae\x93\x7c\x99\xcd\x5c\x4c\xb6\xf0\x2e\x26\x83\xb1\x67\x00\x51\xb1\x9f\x01\xc4\xa6\x99\x01\xd4\x22\xb7\x8d\x8e\x68\x94\x3e\xae\x47\xc7\x82\x78\xfd\x82\x30\x49\x5d\x6b\xf5\x88\x7c\xe0\xd0\x56\x96\x20\xdc\xb7\x44\x91\xa4\x97\x87\x61\xa5\x99\xc0\x19\xf8\xd8\x61\x3d\x50\x7c\xf5\x00\x2e\x30\xfa\x85\xf6\x94\x0f\xb8\x11\xf3\xd1\xd1\x90\x73\x89\xbd\x31\x73\x78\x57\x2a\x66\x7d\x31\x31\xf9\x39\x5e\x94\x01\x7f\x09\x2c\xca\xa6\x9a\x68\x1d\x5b\xcb\x2c\x3a\x06\x49\xba\xfd\x7c\xbf\xbe\x5e\xdf\x7e\x5c\x87\xbf\x4d\xba\x5e\x66\xeb\x5f\xc3\xdf\xdd\xfd\x7a\xdd\xff\xbd\x4b\xb2\x55\xba\x0c\x3f\xbb\xf4\xee\x26\x5b\x27\xbb\x74\x39\xc9\xa9\xef\x89\x9e\x51\xb2\x1b\x30\x7a\x05\x89\x04\xe4\xc2\x86\x76\x0a\x2a\xa7\x3e\x0b\xe2\x00\xcc\xc5\x3a\x14\xcc\x40\xa5\xb8\x38\x08\xe4\x60\x0b\x04\xd7\x1a\xc1\xe2\xb3\x85\xfd\x09\x84\x34\xa8\x9d\xbb\x94\x06\x4e\xe9\x4f\xdf\x79\xc1\x34\xcb\xa9\xe6\xbd\x75\x4c\x76\x85\xa0\xde\x94\x97\x0d\x47\x43\x15\xd5\x1d\x90\x0e\xef\x01\x4f\x7b\xc5\x34\x07\x26\x39\xd4\xcc\x78\x00\x55\x55\x4c\x72\x77\x9c\x24\x4e\x97\xd9\xce\x8b\x0b\x06\x4b\xcc\x7b\x79\x65\x79\x9a\x16\x3a\x2f\x94\x41\x09\x4c\x46\xed\x1d\x4c\xd7\x55\xdf\xb6\x62\x71\x41\x05\xdb\x80\xeb\x96\xaf\x9c\x50\xd1\x11\x5b\x30\x0b\xc2\x82\x29\x54\x53\x72\xa8\xd4\x23\x3a\x22\x62\xf5\xda\x84\xc1\x84\x5a\x30\x2d\x4a\x32\x0c\xa3\x10\xaf\xb5\x20\xef\x5a\xb6\x6f\xb5\xd8\xa6\xab\x74\xb1\xfb\x4a\x3c\xd0\x6c\x10\xc2\xe1\x3a\x0a\x87\xeb\xcf\x9b\xdb\x65\xf8\xda\x7e\x58\xb4\x5f\x8b\xbb\x6c\xb3\x0b\x3f\xeb\xe4\x26\xdd\x6e\x92\x45\xda\xa7\xc5\xe4\x30\xe1\xf3\x4a\x48\xfe\xd2\x2c\x33\x4a\xdc\x10\xce\xd4\xbb\xdd\xbc\xd5\xad\x56\xcc\xe6\x05\xf2\x4c\x72\x7c\x76\xd5\x3a\x93\xf6\x13\x0d\x00\x14\xd4\x53\xe0\x2e\xda\x3b\xe9\x76\x6c\x3f\x12\x8a\xe2\x84\xe2\x8b\xe3\x33\xa8\x83\xb3\xa6\x65\x7b\x6f\x7e\x5b\xa0\x19\x3a\xcf\x37\xd3\x83\xd2\x64\x5b\xcb\xf6\x4e\x0a\x37\x19\x3a\xa0\x8f\x05\xda\x02\x75\x08\x16\x8a\x28\x36\x38\x4c\xe7\xc0\x92\xf3\x09\xdf\x33\x7c\x12\x65\x09\x15\x7b\xf0\xae\x0d\xf1\x07\xf8\x8c\x79\xe3\xaa\x31\xf1\xe9\xff\x92\x83\xa5\x42\x45\xe0\x5d\x15\x23\xd5\x7b\xf9\xbe\x32\xcc\x4d\xf9\xc7\x0f\xa3\x03\x33\x1c\x94\xae\x98\xa5\x29\xc1\x27\x1c\x09\xdb\x65\x9f\x09\x73\xe9\x53\x21\xf2\xc2\x45\xfb\x1e\x51\x42\xcd\xb4\x41\x4e\x69\x79\x1e\xc3\xaa\x0b\x74\x1f\xe4\x6c\xbf\xb5\xaa\x86\x5a\x19\xe1\xe4\x25\xfd\x3a\x9e\xd9\x70\xfc\x8d\x0c\x3a\x96\x81\xe4\x62\x54\x97\x05\xbf\x1a\xd8\xa7\x35\xe0\x5b\xd7\x38\xd2\x6e\x7d\x68\xac\x57\x90\x94\x65\xe4\x52\x72\x0b\xb2\xbc\x18\x78\x9f\x84\x34\xc1\xc7\xdb\xc8\xba\x51\xfc\xf4\x46\xa5\xf9\x92\x09\x89\x9a\xa2\xad\x31\xce\xa2\xe3\x3e\x34\x5d\xb4\x43\xdc\xf6\x64\x15\x1a\xc3\x8e\xd1\x52\x3b\xd3\x8d\x3b\xc6\xf5\x3f\x4c\xfa\x88\xd2\x3b\x70\xe2\x9c\x9b\x47\x76\xa2\xc2\x88\x23\x4d\x24\xa3\xc5\x16\x70\xa3\xf8\x9f\x52\xa0\x31\xdf\xa9\x01\x40\xde\x5a\xcc\x5d\x00\x63\xf3\xf9\x41\x0b\x49\x35\xda\x6d\xd5\xa4\xe5\xb6\x8a\x85\x49\x73\x20\xad\x0f\x60\x8e\x07\x46\x21\xed\xcc\x4a\xb5\x59\x2a\x5b\x84\x88\x79\x90\xea\x49\x92\x57\x17\xdb\xa8\x19\xd1\xb9\x40\x6f\xa0\x40\x56\xda\xe2\x44\x47\x0b\x64\xda\xee\x91\x59\x9f\xf6\x1a\x73\x14\x8f\xc8\xa9\x85\x68\x3c\x36\x25\xd3\x20\xa4\x45\x4d\x53\x85\xeb\x23\xb6\xf0\x61\x1e\x86\x67\x82\xd3\x68\x6a\x25\x39\x49\x60\x95\xbb\xaa\xa1\xb1\x26\x08\xf1\x3e\x4d\x56\xbb\xf7\xbf\x9d\x0b\xd1\xc8\x81\x18\xae\x32\xf4\x88\xb9\xbf\xf8\x52\x5f\x54\xb0\x11\xcf\x02\x61\x41\x97\x2f\x27\x81\x30\x40\x63\x8e\xe0\x6d\x06\xf5\x3a\x5c\xc1\xde\x25\xb4\x7c\x6d\xe1\x8f\x06\xf5\xc9\x65\x0c\x05\xbf\x51\x15\x06\x0f\x85\xee\xa4\xd1\x60\xb5\x2f\xd1\xc0\xfb\xdd\x6e\xf3\xda\xc0\x4f\x3f\xfe\x18\x1c\xdd\xd9\x6f\x5a\x78\x57\xd0\x8e\xca\x5d\x0d\x85\xe9\x65\x0d\x7a\xfc\x7a\xb7\x59\xb4\x1a\x50\x49\xdc\x6b\x64\x0f\xe6\xad\x03\x28\x54\x8d\xbe\xe0\x30\xdb\xb5\xc4\x56\x71\x87\x9b\x93\xa0\x7b\x96\x3f\x50\x03\x16\x12\x9d\xca\x1a\x4d\x53\x51\x79\x80\x20\x91\x97\x24\xc8\xb9\xcc\xb6\x8b\xdb\xf5\x3a\x5d\xec\xdc\xe4\x32\xb6\x33\xcd\xc7\xe4\x9b\xa7\x02\xe5\xd8\xd0\xc2\xaf\xd4\x5a\xe5\x68\x0c\x55\x87\x96\xbc\xb5\xc1\x66\x99\xec\xfc\x78\xe4\x71\xfd\x25\xc9\xcf\x01\xad\xe6\xde\xec\xb4\x24\x95\x05\x43\xd9\xca\xe4\x09\x94\xab\x6b\x87\x46\xfb\x86\xe1\xc3\xd8\xe1\xa3\x01\xb6\x57\x8d\x37\xc1\x53\x28\x80\xc2\x0e\x63\x53\xe9\xb1\x28\xe7\x3a\x06\x59\x9e\x98\x01\xab\x4f\x21\xfe\x3c\x03\x2f\xd2\x81\x89\x12\xbb\xa8\xa1\x0b\xa2\x90\xc0\x60\xcf\x78\x64\x40\xa7\x64\xda\xce\x7e\x6d\xa1\x18\x5e\xfc\x5c\xf6\xd5\xcc\x18\x5b\x68\xd5\x1c\x8b\xd4\xcd\xdb\x53\xf3\xfa\xf0\xce\x1a\xcf\xb7\x6d\x11\x89\xd2\xba\x2d\x56\xef\xdb\x18\x8e\xea\x4e\x7c\x23\x8d\x6e\xa2\xdd\xee\x07\xd4\x46\x8c\xea\x8e\xe7\xf0\xf2\xce\xf8\x4a\x52\x6b\xb4\xf6\xb4\x98\xde\x3c\x7f\x4f\x69\x6b\x9b\x56\xe5\xa6\x64\x12\xbb\x92\xea\x86\x95\xee\xcf\x97\x38\xd9\x54\x6b\xc5\xd1\x3f\x2e\x85\x85\x4c\x1a\xab\x1b\xba\x06\x20\x1f\x6e\x8e\x8c\x18\xbf\x7f\x79\x73\xd6\x09\xe7\x1a\x4d\x54\x8c\xad\x7a\xc0\x89\xd6\xd1\x5f\x41\xdd\xd1\xb3\xeb\x9a\x70\x7b\x2b\x21\x1f\xa2\xb3\xaf\xe0\xee\x1b\x2f\x3f\x0e\x7d\xfc\xe0\xf3\x8d\x1b\xda\xd9\xc5\xe5\x3b\xd9\xb4\xaf\x3b\xa1\x0f\x7a\x9e\xf3\x33\x29\x9c\x37\x9f\xcb\x96\x3a\xba\xe2\x09\xf3\xaf\xed\xed\xfa\xcf\x08\x11\xbf\x46\x7d\x97\xa6\x40\x75\xa1\x95\x32\xce\x97\xef\x62\xfe\x82\xfe\xa3\x77\xb2\x10\x98\xb1\xea\xdd\xad\x60\xf0\x44\xea\x60\x00\xa2\x2b\x9b\xfb\x5d\x65\xeb\xfb\xff\x7c\x4e\x6e\x96\x3f\xff\xbd\x5d\x5a\x26\x77\x1f\xb3\x75\xbc\xb6\xb8\x5d\xef\x92\x6c\x9d\xde\x7d\xde\xa6\xbb\xcf\xbf\x25\x37\xab\xed\xf4\xd6\x04\x5e\x4c\xb0\x4b\x6f\x36\x2b\x2a\x3f\x1e\xa4\x4b\x81\xfe\xfd\xd6\xbf\x82\xeb\x28\x76\x4d\xc1\xfe\xf6\xd3\xcf\x91\x8e\x7e\x78\x9c\x7a\xb6\xfa\x56\xf5\x3a\x3f\x3d\x7a\x73\xf1\x1e\x3f\x7f\xa6\x38\x3f\x38\x78\x5a\xf1\x49\xf7\xc2\xc3\xc4\xec\xcb\xff\x03\x00\x00\xff\xff\x91\xf6\x41\xa8\xed\x17\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 6125, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
