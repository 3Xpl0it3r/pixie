/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */


/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  user: GQLUserInfo;
  cluster: GQLClusterInfo;
  clusterConnection: GQLClusterConnectionInfo;
  cliArtifact: GQLCLIArtifact;
  artifacts: GQLArtifactsInfo;
  extractVisFuncsInfo: GQLVisFuncsInfo;
  autocomplete: GQLAutocompleteResult;
}

export interface GQLUserInfo {
  id: string;
  name: string;
  email: string;
  picture: string;
  orgName: string;
}

export interface GQLClusterInfo {
  id: string;
  status: GQLClusterStatus;
  lastHeartbeatMs: number;
  vizierConfig: GQLVizierConfig;
}

export const enum GQLClusterStatus {
  VZ_ST_UNKNOWN = 'VZ_ST_UNKNOWN',
  VZ_ST_HEALTHY = 'VZ_ST_HEALTHY',
  VZ_ST_DISCONNECTED = 'VZ_ST_DISCONNECTED'
}

export interface GQLVizierConfig {
  passthroughEnabled?: boolean;
}

export interface GQLClusterConnectionInfo {
  ipAddress: string;
  token: string;
}

export const enum GQLArtifactType {
  AT_UNKNOWN = 'AT_UNKNOWN',
  AT_LINUX_AMD64 = 'AT_LINUX_AMD64',
  AT_DARWIN_AMD64 = 'AT_DARWIN_AMD64',
  AT_CONTAINER_SET_YAMLS = 'AT_CONTAINER_SET_YAMLS',
  AT_CONTAINER_SET_LINUX_AMD64 = 'AT_CONTAINER_SET_LINUX_AMD64'
}

export interface GQLCLIArtifact {
  url: string;
  sha256: string;
}

export interface GQLArtifactsInfo {
  items?: Array<GQLArtifact | null>;
}

export interface GQLArtifact {
  version: string;
  changelog: string;
  timestampMs: number;
}

export interface GQLVisFuncsInfo {
  docStringMap: Array<GQLDocStringMapEntry>;
  visSpecMap: Array<GQLVisSpecMapEntry>;
  fnArgsMap: Array<GQLFnArgsMapEntry>;
}

export interface GQLDocStringMapEntry {
  funcName: string;
  docString: string;
}

export interface GQLVisSpecMapEntry {
  funcName: string;
  visSpec?: GQLVisSpec;
}

export interface GQLVisSpec {
  vegaSpec: string;
}

export interface GQLFnArgsMapEntry {
  funcName: string;
  fnArgSpec: GQLFnArgsSpec;
}

export interface GQLFnArgsSpec {
  args: Array<GQLFnArgsSpecArg>;
}

export interface GQLFnArgsSpecArg {
  name: string;
  dataType: GQLDataType;
  semanticType: GQLSemanticType;
  defaultValue: string;
}

export const enum GQLDataType {
  DATA_TYPE_UNKNOWN = 'DATA_TYPE_UNKNOWN',
  BOOLEAN = 'BOOLEAN',
  INT64 = 'INT64',
  UINT128 = 'UINT128',
  FLOAT64 = 'FLOAT64',
  STRING = 'STRING',
  TIME64NS = 'TIME64NS',
  DURATION64NS = 'DURATION64NS'
}

export const enum GQLSemanticType {
  ST_UNSPECIFIED = 'ST_UNSPECIFIED',
  ST_NONE = 'ST_NONE',
  ST_AGENT_UID = 'ST_AGENT_UID',
  ST_UPID = 'ST_UPID',
  ST_SERVICE_NAME = 'ST_SERVICE_NAME'
}

export const enum GQLAutocompleteActionType {
  AAT_UNKNOWN = 'AAT_UNKNOWN',
  AAT_EDIT = 'AAT_EDIT',
  AAT_SELECT = 'AAT_SELECT'
}

export interface GQLAutocompleteResult {
  formattedInput?: string;
  isExecutable?: boolean;
  tabSuggestions?: Array<GQLTabSuggestion | null>;
}

export interface GQLTabSuggestion {
  tabIndex?: number;
  executableAfterSelect?: boolean;
  suggestions?: Array<GQLAutocompleteSuggestion | null>;
}

export interface GQLAutocompleteSuggestion {
  kind?: GQLAutocompleteEntityKind;
  name?: string;
  description?: string;
}

export const enum GQLAutocompleteEntityKind {
  AEK_UNKNOWN = 'AEK_UNKNOWN',
  AEK_POD = 'AEK_POD',
  AEK_SVC = 'AEK_SVC',
  AEK_SCRIPT = 'AEK_SCRIPT',
  AEK_NAMESPACE = 'AEK_NAMESPACE'
}

export interface GQLMutation {
  CreateCluster?: GQLClusterInfo;
  UpdateVizierConfig: boolean;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  UserInfo?: GQLUserInfoTypeResolver;
  ClusterInfo?: GQLClusterInfoTypeResolver;
  VizierConfig?: GQLVizierConfigTypeResolver;
  ClusterConnectionInfo?: GQLClusterConnectionInfoTypeResolver;
  CLIArtifact?: GQLCLIArtifactTypeResolver;
  ArtifactsInfo?: GQLArtifactsInfoTypeResolver;
  Artifact?: GQLArtifactTypeResolver;
  VisFuncsInfo?: GQLVisFuncsInfoTypeResolver;
  DocStringMapEntry?: GQLDocStringMapEntryTypeResolver;
  VisSpecMapEntry?: GQLVisSpecMapEntryTypeResolver;
  VisSpec?: GQLVisSpecTypeResolver;
  FnArgsMapEntry?: GQLFnArgsMapEntryTypeResolver;
  FnArgsSpec?: GQLFnArgsSpecTypeResolver;
  FnArgsSpecArg?: GQLFnArgsSpecArgTypeResolver;
  AutocompleteResult?: GQLAutocompleteResultTypeResolver;
  TabSuggestion?: GQLTabSuggestionTypeResolver;
  AutocompleteSuggestion?: GQLAutocompleteSuggestionTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  user?: QueryToUserResolver<TParent>;
  cluster?: QueryToClusterResolver<TParent>;
  clusterConnection?: QueryToClusterConnectionResolver<TParent>;
  cliArtifact?: QueryToCliArtifactResolver<TParent>;
  artifacts?: QueryToArtifactsResolver<TParent>;
  extractVisFuncsInfo?: QueryToExtractVisFuncsInfoResolver<TParent>;
  autocomplete?: QueryToAutocompleteResolver<TParent>;
}

export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToClusterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToClusterConnectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCliArtifactArgs {
  artifactType?: GQLArtifactType;
}
export interface QueryToCliArtifactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCliArtifactArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToArtifactsArgs {
  artifactName?: string;
}
export interface QueryToArtifactsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToArtifactsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToExtractVisFuncsInfoArgs {
  script: string;
  funcNames?: Array<string>;
}
export interface QueryToExtractVisFuncsInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToExtractVisFuncsInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAutocompleteArgs {
  input?: string;
  cursorPos?: number;
  action?: GQLAutocompleteActionType;
}
export interface QueryToAutocompleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAutocompleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserInfoTypeResolver<TParent = any> {
  id?: UserInfoToIdResolver<TParent>;
  name?: UserInfoToNameResolver<TParent>;
  email?: UserInfoToEmailResolver<TParent>;
  picture?: UserInfoToPictureResolver<TParent>;
  orgName?: UserInfoToOrgNameResolver<TParent>;
}

export interface UserInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToPictureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInfoToOrgNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClusterInfoTypeResolver<TParent = any> {
  id?: ClusterInfoToIdResolver<TParent>;
  status?: ClusterInfoToStatusResolver<TParent>;
  lastHeartbeatMs?: ClusterInfoToLastHeartbeatMsResolver<TParent>;
  vizierConfig?: ClusterInfoToVizierConfigResolver<TParent>;
}

export interface ClusterInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToLastHeartbeatMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterInfoToVizierConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVizierConfigTypeResolver<TParent = any> {
  passthroughEnabled?: VizierConfigToPassthroughEnabledResolver<TParent>;
}

export interface VizierConfigToPassthroughEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLClusterConnectionInfoTypeResolver<TParent = any> {
  ipAddress?: ClusterConnectionInfoToIpAddressResolver<TParent>;
  token?: ClusterConnectionInfoToTokenResolver<TParent>;
}

export interface ClusterConnectionInfoToIpAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClusterConnectionInfoToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCLIArtifactTypeResolver<TParent = any> {
  url?: CLIArtifactToUrlResolver<TParent>;
  sha256?: CLIArtifactToSha256Resolver<TParent>;
}

export interface CLIArtifactToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CLIArtifactToSha256Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArtifactsInfoTypeResolver<TParent = any> {
  items?: ArtifactsInfoToItemsResolver<TParent>;
}

export interface ArtifactsInfoToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLArtifactTypeResolver<TParent = any> {
  version?: ArtifactToVersionResolver<TParent>;
  changelog?: ArtifactToChangelogResolver<TParent>;
  timestampMs?: ArtifactToTimestampMsResolver<TParent>;
}

export interface ArtifactToVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArtifactToChangelogResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ArtifactToTimestampMsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVisFuncsInfoTypeResolver<TParent = any> {
  docStringMap?: VisFuncsInfoToDocStringMapResolver<TParent>;
  visSpecMap?: VisFuncsInfoToVisSpecMapResolver<TParent>;
  fnArgsMap?: VisFuncsInfoToFnArgsMapResolver<TParent>;
}

export interface VisFuncsInfoToDocStringMapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VisFuncsInfoToVisSpecMapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VisFuncsInfoToFnArgsMapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDocStringMapEntryTypeResolver<TParent = any> {
  funcName?: DocStringMapEntryToFuncNameResolver<TParent>;
  docString?: DocStringMapEntryToDocStringResolver<TParent>;
}

export interface DocStringMapEntryToFuncNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DocStringMapEntryToDocStringResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVisSpecMapEntryTypeResolver<TParent = any> {
  funcName?: VisSpecMapEntryToFuncNameResolver<TParent>;
  visSpec?: VisSpecMapEntryToVisSpecResolver<TParent>;
}

export interface VisSpecMapEntryToFuncNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VisSpecMapEntryToVisSpecResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVisSpecTypeResolver<TParent = any> {
  vegaSpec?: VisSpecToVegaSpecResolver<TParent>;
}

export interface VisSpecToVegaSpecResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFnArgsMapEntryTypeResolver<TParent = any> {
  funcName?: FnArgsMapEntryToFuncNameResolver<TParent>;
  fnArgSpec?: FnArgsMapEntryToFnArgSpecResolver<TParent>;
}

export interface FnArgsMapEntryToFuncNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FnArgsMapEntryToFnArgSpecResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFnArgsSpecTypeResolver<TParent = any> {
  args?: FnArgsSpecToArgsResolver<TParent>;
}

export interface FnArgsSpecToArgsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFnArgsSpecArgTypeResolver<TParent = any> {
  name?: FnArgsSpecArgToNameResolver<TParent>;
  dataType?: FnArgsSpecArgToDataTypeResolver<TParent>;
  semanticType?: FnArgsSpecArgToSemanticTypeResolver<TParent>;
  defaultValue?: FnArgsSpecArgToDefaultValueResolver<TParent>;
}

export interface FnArgsSpecArgToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FnArgsSpecArgToDataTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FnArgsSpecArgToSemanticTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FnArgsSpecArgToDefaultValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAutocompleteResultTypeResolver<TParent = any> {
  formattedInput?: AutocompleteResultToFormattedInputResolver<TParent>;
  isExecutable?: AutocompleteResultToIsExecutableResolver<TParent>;
  tabSuggestions?: AutocompleteResultToTabSuggestionsResolver<TParent>;
}

export interface AutocompleteResultToFormattedInputResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteResultToIsExecutableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteResultToTabSuggestionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTabSuggestionTypeResolver<TParent = any> {
  tabIndex?: TabSuggestionToTabIndexResolver<TParent>;
  executableAfterSelect?: TabSuggestionToExecutableAfterSelectResolver<TParent>;
  suggestions?: TabSuggestionToSuggestionsResolver<TParent>;
}

export interface TabSuggestionToTabIndexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TabSuggestionToExecutableAfterSelectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TabSuggestionToSuggestionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAutocompleteSuggestionTypeResolver<TParent = any> {
  kind?: AutocompleteSuggestionToKindResolver<TParent>;
  name?: AutocompleteSuggestionToNameResolver<TParent>;
  description?: AutocompleteSuggestionToDescriptionResolver<TParent>;
}

export interface AutocompleteSuggestionToKindResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteSuggestionToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AutocompleteSuggestionToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  CreateCluster?: MutationToCreateClusterResolver<TParent>;
  UpdateVizierConfig?: MutationToUpdateVizierConfigResolver<TParent>;
}

export interface MutationToCreateClusterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateVizierConfigArgs {
  clusterID: string;
  passthroughEnabled?: boolean;
}
export interface MutationToUpdateVizierConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateVizierConfigArgs, context: any, info: GraphQLResolveInfo): TResult;
}
