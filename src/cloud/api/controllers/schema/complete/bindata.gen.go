// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xdf\x8f\xdb\x36\xf2\x7f\xf7\x5f\x31\x69\x1e\xea\x05\xf6\x1b\x14\x5f\x5c\x8b\x83\x9f\x4e\xb5\x95\x46\x97\x5d\xaf\xcf\x76\xd2\x2b\x82\x20\xa0\xa5\xb1\x45\x58\x26\x55\x92\xf2\xae\xef\xd0\xff\xfd\x30\x24\x25\x91\xb2\xb6\xe9\xf6\xee\x4d\xfc\x35\xf3\x99\x1f\x1c\xce\x8c\xf0\xc9\xa0\x28\xc0\x5c\x6a\x84\x7f\x34\xa8\x2e\xf0\xef\x09\x40\xa3\x51\xcd\xe0\x83\x46\x95\x89\xbd\x7c\x35\x01\x90\xea\x30\x83\x07\x75\x68\xc7\xb4\x63\x83\xc6\x70\x71\xd0\x6e\x67\x3b\x6a\x57\x13\x63\x14\xdf\x35\x06\xfd\x7a\x3f\xf6\xf4\x68\x52\xcf\xe0\x53\xc7\xe6\x33\x2d\xe4\x55\xa3\x0d\xaa\x29\x2f\x66\x90\x2d\x5e\xdd\xcc\x60\xee\x66\x5a\xce\x7e\xc3\x8f\x97\x25\x3b\xe1\x54\xb0\x13\xce\x60\x63\x14\x17\x87\xe7\x37\x13\x9b\x70\x25\xe4\x34\x97\x42\x60\x6e\xb8\x14\xd7\x3c\xfb\xb5\x9e\x20\x4f\x94\xe1\x7b\x96\x9b\x29\xf3\x1f\xdb\x4b\x8d\x33\x48\x82\x91\x25\x71\x97\xb5\x53\x74\x90\x35\x46\xe6\xf2\x54\x57\x68\x70\xca\x45\xdd\x98\x16\xf6\x2d\xe4\x8d\xd2\x52\xad\xa4\x9e\x41\x26\xcc\x2d\x30\xcb\x72\x06\x49\x70\x26\xb1\x73\x44\xfc\xb6\x45\xfe\x21\x5b\xb4\x34\x6e\xe2\xcd\x6b\xd4\x4d\x75\xc5\xf6\x2d\xc7\xaa\x18\xf2\xde\xd3\xa4\x97\x20\xd8\x9b\x0a\xc3\xcd\xe5\x3d\x17\xc5\xed\x04\x00\x40\xe1\xaf\x0d\x57\x58\x24\xea\x40\x9b\x49\xa1\xe3\xdb\x3f\xff\x01\x78\x16\x48\x8b\x71\x02\xf0\x1a\x36\xb9\xe2\xb5\x39\x1d\x14\xa0\x28\x6a\xc9\x85\xd1\xb7\xa0\x70\x8f\x0a\x8c\x84\x42\xe6\x1a\xb8\x80\xbc\x92\x4d\xc1\x6a\xfe\xa6\x56\xd2\xc8\x09\x40\xc5\xcf\xf8\x91\xe3\x23\xc1\xb9\xf3\xdf\xf7\x68\x58\xc1\x0c\x73\x46\x6e\x77\xcc\xa5\x30\x28\x8c\x0e\x6c\x7c\x37\x58\xa2\xed\xda\xe2\x20\x72\x0e\x51\x4c\xcc\xad\x8e\x90\xda\x44\x0b\x5e\xa6\x05\xd6\x95\xbc\xc0\x11\x2f\x7a\x02\x50\xd8\xd1\x09\x85\x79\x8f\x17\x62\xb0\x08\x27\x62\x3e\xd1\xde\x80\x4d\x74\xc4\x73\x49\x56\x59\xcb\x82\xd5\xdc\xd3\x4e\x56\xd9\x15\x51\xb7\x1a\x50\x73\x9b\x3c\x99\x55\xd5\x1c\xb8\x98\x00\xd4\xf6\x43\x4f\x8f\x5c\x14\x33\x3f\x4d\x76\xbd\x99\xc1\x27\x37\x72\xe4\x14\x92\xac\x5c\x0a\x37\x39\x97\x62\xcf\x0f\x96\x7a\x7f\x19\x3f\x85\x6b\x74\xec\xb7\xc9\x24\x0c\x38\xf7\x8d\x61\x44\xc2\xc6\x9c\xb9\x42\x66\xd0\x5f\xbc\xe8\x22\xc3\xdf\x0a\xac\x15\xe6\xcc\x60\x31\x55\xc8\x34\xdd\x8d\x6f\xfc\x06\x0d\x4c\x21\x08\xf9\x08\xb9\x25\x50\xc0\x99\x33\xa8\x9f\xbc\x12\xbf\xb9\x99\x00\x7c\xa8\x0b\x66\xf0\x23\xff\x17\xb7\x57\x9a\x80\x7a\x1f\x25\x17\xcd\x16\xaf\x6e\xe1\x1c\x2c\xce\x20\x2d\xb8\x61\xbb\x2a\x3a\x32\x12\x5d\x1c\xe4\xc8\x2a\x57\x46\x02\x58\x20\xf9\xfc\xe2\x19\x9b\xfe\x28\x65\x85\x4c\xf4\xe4\x9c\x59\x7a\xf3\xb4\x04\xdc\x78\xfc\xa4\x13\x30\x8c\xc2\x53\xdd\x05\xe7\x56\x98\x28\x48\xdf\x5c\x07\xed\x0d\x9a\x38\x4e\x4f\x59\x10\xc2\x43\x2a\x41\x28\xbf\x19\x0b\xee\x99\x38\x73\x07\x67\x8a\x27\xc6\xab\xce\x27\x28\xdc\x28\x6d\x96\x61\xd0\xbe\x85\x8a\x0d\xa6\x6e\xda\xb7\x87\xc8\xc4\xf2\xad\x50\x9d\xb8\xd6\x5c\x0a\x3d\xa5\x57\xa6\x33\x60\x13\x2f\xc6\x80\x83\x85\x9e\x78\x68\xc3\x07\x75\x98\x4a\x75\x18\xa2\xc8\x16\x3d\xf7\x07\x75\xe8\x94\x2b\xd5\xa1\x63\x2c\xfb\xf9\x9e\x69\xb0\x99\xe8\x04\x0f\xa7\xe3\xe7\x44\xdb\xca\x23\x8a\x80\xd8\x4d\xc7\x7b\x02\xb0\xc6\xb3\x3c\x62\x52\x55\xc1\x5e\x1d\x6f\x0e\x3c\x60\x8d\x27\x79\xb6\xb2\xbe\x55\xf2\x44\xe2\x04\xda\x09\xb7\xc6\xb7\xdd\x89\xb6\xfe\xda\x5d\xbe\x05\x14\x24\x56\xd1\x13\xea\xa6\x3e\xa2\xd2\xf6\xb5\xea\x5e\x33\x7b\x3c\x50\x46\x48\x55\x47\x60\x7e\x9b\x4c\x6c\x20\x68\x0d\x62\x03\x81\xf7\xf0\x09\x40\xf4\xb8\x4f\x00\x62\x67\xa2\x60\xc5\x73\xd3\xa8\x68\xcf\xd0\x8a\x6e\xaa\x7f\x8a\x68\x82\xeb\xa4\xae\x95\x3c\x87\xf2\x74\x58\xb2\x45\xba\x62\xa6\xb4\x50\xb2\x45\x3a\x24\x56\x33\x53\xf6\xe3\xf6\x90\x37\xf0\x57\xf0\x17\xf2\xc4\xb8\x18\x52\x74\x7a\x74\x88\x58\xa5\x23\xb3\xf2\x02\x09\x0c\xc5\x74\x8f\xcb\x87\xd1\x4e\x6d\xad\x9b\x59\xd6\x4c\xb0\xea\x62\x78\xae\x1f\x6a\x23\xe9\x95\x8f\x48\x39\x58\xe1\xe1\xfe\xda\xda\xe3\x46\x36\x6a\x83\x28\x9e\x3b\x67\x53\x87\x67\x22\xc1\x38\x81\xf1\x53\x7f\x08\x73\x07\x34\x7e\xcc\x06\x2a\xf6\x41\x3f\x31\xf7\x7a\x06\x6f\x2b\xc9\x8c\x7b\x40\x75\x7e\x6d\x24\x47\x68\x40\xe0\x48\xb1\xb6\x37\xc6\x4b\xe8\x8d\xbe\xe0\xff\x05\xbe\x88\xde\xff\x04\x26\x8a\xe6\x34\x92\xd6\x6d\x0c\x33\x68\x19\x24\xe9\xe6\xcb\x87\xe5\xfb\xe5\xc3\xcf\x4b\x3f\x5a\xa5\xcb\x45\xb6\xfc\xc9\x8f\xd6\x1f\x96\xcb\x7e\xf4\x36\xc9\xee\xd2\x85\x1f\x6c\xd3\xf5\x7d\xb6\x4c\xb6\xe9\x62\x94\x53\x9f\xaf\x3a\x46\xc9\x36\x60\xf4\x1a\x12\x01\x58\x70\xe3\x53\x5d\x90\x39\xe5\xc0\xc0\xf7\xc0\x6c\x24\x87\x92\x69\x38\xc9\x82\xef\x39\x16\x60\x4a\x04\xe7\x45\x06\x9f\x0c\xec\x2e\xc0\x85\x46\x45\x3e\x04\x52\x41\x41\xef\x23\x7d\xe7\x25\x53\x2c\xa7\xa4\xe0\x8d\x65\xb2\x2d\x39\xe5\x8d\x79\xd5\x14\xa8\x29\xe5\xb0\x07\x84\xa5\x77\xc4\xcb\x4e\x32\x55\x00\x13\x05\xd4\x4c\x3b\x02\xf2\x74\x62\xa2\xb0\xc7\x09\x71\xba\xc8\xb6\x0e\x2e\x68\xac\x30\xef\xf1\x8a\xea\x32\x0e\x3a\x2f\xa5\x46\x01\x4c\x44\xa9\x37\xe8\xe6\x70\x40\x4d\x67\xdf\xb4\xb0\x0a\x4e\x19\x8d\x06\x9b\xc9\xbe\xb6\xa0\xa2\x23\xa6\x64\x06\xb8\x01\x5d\xca\xa6\x2a\x80\xe2\xbb\xdd\x44\xac\xbe\xd5\xbe\x68\xa0\xf4\x98\x26\x05\x29\x86\x51\x0c\xa9\x15\x27\xeb\x1a\xb6\x6b\xa5\xd8\xa4\x77\xe9\x7c\xfb\x3b\xfe\x40\xf9\x9d\x77\x87\xf7\x91\x3b\xbc\xff\xb2\x7a\x58\xf8\xaf\xcd\xc7\x79\xfb\x35\x5f\x67\xab\xad\x1f\x2c\x93\xfb\x74\xb3\x4a\xe6\x69\x3b\x7e\x58\xa4\xfd\x8d\x0b\x58\x6d\x3a\x0d\x58\x56\x2e\xbf\x1c\xc7\x32\x08\x9d\xde\xb3\x29\xc5\x0e\x1e\x9a\x09\xc0\x89\x99\xbc\xc4\x22\x13\x05\x3e\xd9\x92\x24\x13\xe6\x33\xe5\xe9\xe4\xdf\x63\xc4\xad\xe3\x77\xe8\xb6\x6c\x37\x00\x45\x2e\x43\xae\x56\xe0\x13\xc8\xbd\x55\xac\x61\x3b\x67\x09\x53\xa2\x0e\xed\xe8\x12\xcf\xbd\x54\xa4\x66\xc3\x76\x16\x85\x2d\xe0\x2c\xa1\x9f\x4b\x34\x25\x2a\xef\x37\xe4\x5c\x2c\x38\x4c\xe7\xc0\x90\x1f\x10\x7d\xc7\xf0\x91\x57\x15\x9c\xd8\xd1\x59\xd9\xbb\x22\xe0\x13\xe6\x8d\x8d\x9c\xc4\xa7\x1f\x25\x7b\x43\x81\x94\x88\xf7\x21\x13\x42\x7c\x83\x12\xad\x17\xf5\xf3\xa8\x7d\x5c\x3d\x16\xa8\x61\x2f\xd5\x89\x19\xca\xa8\xdd\xdd\x23\xb0\xdd\x45\xd4\xfe\xb1\x7f\x2c\x79\x5e\x5a\xc7\xdf\x21\x0a\xa8\x99\xd2\x58\xd0\x0d\xbd\x76\x67\xd9\xf9\xbc\xf3\x77\xb6\xdb\x18\x59\x43\x2d\x35\xb7\x78\x49\xbe\x8e\x67\x16\x56\xa9\x91\x42\x87\x18\x08\x17\x83\x33\xab\x78\x71\x1b\xe8\xa7\x55\xe0\x1b\xfb\xde\xa7\xdd\x7c\xa8\xac\xd7\x90\x54\x55\x64\x52\x32\x0b\xb2\xbc\x0c\xac\x4f\x20\xb5\xb7\xf1\x26\xd2\x6e\xe4\x3f\xe3\x4a\x0d\x2a\xdd\x40\xb3\xcf\x44\x06\xed\xbd\xa2\x95\x8f\x12\x02\x5e\x60\xf1\x47\xcd\xfa\x2a\xd2\x93\x54\x20\xa4\x75\x5b\xaa\xd5\x1a\x25\xb0\x00\x65\x91\x38\xcf\xad\x99\x32\x9c\x55\x30\x35\xaa\xc1\x1b\xda\xde\x41\x9a\xee\x59\xa5\x91\x2a\xa7\x92\xe9\xa4\x28\xac\x7d\x58\x75\x6f\xaf\x9b\x1e\xc9\x99\xa8\xf2\x65\x5c\xa0\xa2\x0b\xd6\xb8\x77\x7d\x98\xfc\x8c\x3f\x59\xfe\xaa\xf6\xdb\x4e\xa8\x35\x3b\x44\x53\x6d\xc9\x17\xce\x68\xc3\x94\x99\xcb\x46\x18\x7b\xe5\x7a\x28\xef\xff\xaa\xd3\x33\x0a\xa7\xee\x11\x62\xb6\x00\xd9\xf2\x13\x46\x30\xa8\x04\x19\x4c\xb6\x04\x57\xb2\xf8\x53\x52\x35\xfa\xc5\x62\xe5\xad\x1a\x6d\xbf\x2a\xd6\xa9\xab\xba\x91\x44\xa3\xd5\x56\xcc\xb6\x18\x1f\xd3\x87\x8d\xf6\xbe\x64\x0d\x44\x70\x3e\x58\xe0\x9e\x91\x57\x5a\x03\xd0\x1b\x26\xa4\x29\xfd\x75\x3a\x0a\xf9\x28\xc8\xe5\xe7\x9b\xe8\xd1\xa6\x73\x7e\xbf\x86\x12\x59\x65\xca\x0b\x1d\x2d\x91\x29\xb3\x43\xe6\x3d\x4b\x61\x8e\xfc\x8c\x05\x3d\xb5\x0a\x0f\x4d\xc5\x14\x70\x61\x50\x51\x7a\x6b\xdf\x5b\x53\xba\x18\xe0\xab\x70\x22\xa7\x50\xd7\x52\x14\x84\xc0\x48\xdb\x6e\x42\x6d\xb4\x07\xf1\x2e\x4d\xee\xb6\xef\x7e\xb9\x06\xd1\x88\x00\x86\x0d\x9b\x3d\xc5\xdc\x35\xef\x28\x7f\x90\xb0\xe2\x4f\x1c\x61\x5e\xc9\xc6\xbd\xf8\x5c\xfb\xeb\xd5\x86\x97\x5e\x86\x5b\xd8\xd9\x68\x27\xbe\x35\xf0\x6b\x83\xea\x62\xc3\x09\x5d\x4d\x2d\x4f\xe8\xcd\xe6\x5f\x71\x85\x1a\x4f\xbb\x0a\x35\xbc\xdb\x6e\x57\xdf\x6a\xf8\xfe\xbb\xef\xbc\xf5\x3b\xfd\x8d\x83\xb7\xd1\xfe\x20\x6d\x7b\x8b\xeb\x1e\xab\x97\xe3\xa7\xf5\x6a\xde\x4a\x40\xef\xc5\x4e\x21\x3b\xea\x37\x96\x40\x29\x6b\x74\xd1\x98\x99\x2e\x75\x68\x05\xb7\x74\x73\x02\xba\x63\xf9\x91\x12\x15\x2e\xd0\x8a\x4c\x97\xff\x44\xb1\x05\x3c\x22\x87\xc4\xe3\x5c\x64\x9b\xf9\xc3\x72\x99\xce\xb7\x36\xc3\x1b\xea\x99\xea\x44\xb2\xcd\x63\x89\x62\xa8\x68\xee\x66\x6a\x25\x73\xd4\x9a\x42\x67\xbb\xbd\xd5\xc1\x6a\x91\x6c\x5d\x1a\xe9\xe8\xba\x6e\x8b\xcb\x97\x5a\xc9\x9d\xda\x69\x8a\xc2\x96\xa6\x2b\xcc\xc4\x05\xa4\x0d\x66\xfb\x46\xb9\xd7\xd4\xb9\xb1\xa5\x8f\x1a\xd8\x4e\x36\x4e\x05\x8f\x3e\xea\x71\x13\xfa\xa6\x54\x43\x28\xd7\x32\x7a\x2c\x8f\x4c\x83\x51\x17\xef\x7f\x8e\x81\x83\xb4\x67\xbc\xc2\xce\x6b\x84\x7c\x24\x81\x19\xec\x58\x11\x29\xd0\x0a\x99\xf6\x39\xf2\x40\x83\x05\x1e\x14\x2b\x7a\x03\x07\xfa\xab\xf8\x11\xab\x0b\xb1\xdd\x61\xe0\x71\xc4\xfb\xc4\x0f\xa5\xa1\x69\xdb\xbe\xf0\xae\x4a\x65\x46\x6b\xb5\xf4\xa7\x75\xb2\x70\x29\xb8\x8d\x56\x61\xc7\xca\xde\xf6\x9a\x69\x6d\x4a\x25\x9b\x43\x99\x0e\x6b\xf8\x3e\x7e\x07\xcd\xb6\xb8\xee\x68\x23\x59\x14\x46\xda\x88\xf9\xae\xbd\x33\x51\xf0\x8b\x5b\x69\x51\x0b\xad\x5b\x1d\x34\x0d\x82\x76\xfc\xf3\x2b\x57\x95\xb8\x42\x63\x2e\xf3\xf1\xc5\xeb\x1e\x74\x1b\x60\x95\xac\x56\x15\x13\xd8\xc5\x75\x9b\x39\x76\x23\x17\x50\xbb\xb8\xb2\x60\x86\x7d\x7d\xbb\x68\x4e\x4b\x59\xa0\xf6\xb1\xd7\x4e\x64\x42\x1b\xd5\x50\x35\x87\x45\xbc\xe8\x74\x7a\x7f\xfd\x22\xd4\x0a\xcf\x5c\x36\x7a\x33\xa6\xf4\xab\xf5\xe8\xbd\x1a\x9a\x32\xfe\x73\xe1\x8c\x5a\x27\x45\xa1\x50\x47\xef\x92\x91\x47\x14\xd7\xa5\x68\xdf\x7e\xb3\x47\xaf\x1a\x2f\xdc\xae\xdd\x71\x71\x8c\xce\xbe\x86\xf5\x57\x7a\xf6\x96\xfa\xb0\x55\xff\xb5\xb6\xc9\xb0\xac\x7d\x21\x9b\xb6\x2f\xef\x53\x02\xc7\x73\x76\x85\xc2\x5a\xe0\xa9\x6a\x77\x87\x08\xce\x5c\xff\x7d\xf3\xb0\xfc\x33\x20\xe2\xff\x08\x2f\x92\xd4\xa6\x5f\x2d\xca\xf8\xd6\xbe\x88\xf9\x33\xf2\x0f\xfe\x70\xf8\xeb\x11\x8b\xde\xd5\x8c\xc1\xcf\x2d\x4b\x06\x20\x2a\xe8\xed\xf0\x2e\x5b\x7e\xf8\xe7\x97\xe4\x7e\xf1\xc3\x5f\xda\xa9\x45\xb2\xfe\x39\x5b\xc6\x73\xf3\x87\xe5\x36\xc9\x96\xe9\xfa\xcb\x26\xdd\x7e\xf9\x25\xb9\xbf\xdb\x8c\x2f\x8d\xd0\x8b\x37\x6c\xd3\xfb\xd5\x1d\x05\x5d\x47\xa4\xbb\x02\xfd\x9f\x37\xf7\x37\x53\x45\xbe\xab\x4b\xf6\xff\xdf\xff\x10\xc9\x18\xb7\xa8\x5e\x12\x43\xc7\x1b\x5c\x41\xbf\xd9\x59\xfc\xba\xe1\x78\x7d\x30\xe8\x19\xbb\x4b\xf7\x4c\x5f\xd0\xd9\xdf\x35\x55\xff\x4f\x61\x65\x7f\x7a\x90\xe0\xfa\x4d\x9b\xb2\xda\xb5\xd1\x7c\x35\x68\xea\x8e\x97\xd5\x36\xb6\xcb\x83\x0c\x6a\x2f\xe2\xa0\xcd\x48\x60\xd6\x4d\x5d\x4b\x65\x74\xd7\x3f\x8e\x1a\x87\xdd\x1f\xa2\xeb\x77\x07\x9e\x69\x1e\x77\xfe\xd6\xff\x77\xb2\x52\xac\xc2\xb6\xc4\xea\xfd\x97\x75\xba\x4d\x97\xdb\xec\x61\xd9\x67\xe9\x41\x8f\x79\x54\xf0\x33\xab\x9a\xab\xbb\x76\x25\xfb\x95\x51\x5e\x4a\xf7\x77\x09\x38\xbb\x76\xfd\xf1\x4f\x63\x7b\x5c\x7f\xf7\x3f\x01\x00\x00\xff\xff\x38\x14\x92\x29\x97\x1f\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 8087, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
