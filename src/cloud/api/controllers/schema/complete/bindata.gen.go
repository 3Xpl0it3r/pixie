// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x5f\x8f\xe3\xb6\x11\x7f\xf7\xa7\x98\xcb\x3d\x64\x17\x58\x1c\x82\xa2\x09\x0a\x3f\x55\xb1\x95\x9c\x7a\xbb\x5e\x77\xed\xbd\x34\x28\x0e\x07\x5a\x1c\x5b\x84\x65\x52\x21\x29\xef\xba\xc5\x7d\xf7\x62\x48\x4a\x22\x6d\x6d\xae\x9b\xf6\xcd\xe2\x9f\x99\xdf\xfc\xe1\x6f\x86\x34\x3e\x5b\x94\x1c\xec\xa9\x41\xf8\x7b\x8b\xfa\x04\xff\x9e\x00\xb4\x06\xf5\x14\x1e\x0d\xea\x42\x6e\xd5\x9b\x09\x80\xd2\xbb\x29\xdc\xeb\x5d\xf7\x4d\x2b\x56\x68\xad\x90\x3b\xe3\x57\x76\x5f\xdd\x6c\x66\xad\x16\x9b\xd6\x62\x98\x1f\xbe\x83\x3c\x1a\x34\x53\xf8\x67\xaf\xe6\x13\x4d\x94\x75\x6b\x2c\xea\x2b\xc1\xa7\x50\xcc\xdf\x5c\x4f\x61\xe6\x47\x3a\xcd\x61\xc1\x8f\xa7\x05\x3b\xe0\x95\x64\x07\x9c\xc2\xca\x6a\x21\x77\x2f\x2f\x26\x35\xf1\x4c\xac\x69\xa6\xa4\xc4\xd2\x0a\x25\x2f\x75\x0e\x73\x83\x40\x91\x69\x2b\xb6\xac\xb4\x57\x2c\xfc\x58\x9f\x1a\x9c\x42\x16\x7d\x39\x11\xb7\x45\x37\x44\x1b\x59\x6b\x55\xa9\x0e\x4d\x8d\x16\xaf\x84\x6c\x5a\xdb\xc1\xbe\x81\xb2\xd5\x46\xe9\xa5\x32\x53\x28\xa4\xbd\x01\xe6\x54\x4e\x21\x8b\xf6\x64\x6e\x8c\x84\xdf\x74\xc8\x1f\x8b\x79\x27\xe3\x3a\x5d\xfc\x80\xa6\xad\x2f\xd4\xfe\x24\xb0\xe6\xe7\xba\xb7\x34\x18\x2c\x88\xd6\xe6\xd2\x0a\x7b\xfa\x20\x24\xbf\x99\x00\x00\x68\xfc\xad\x15\x1a\x79\xa6\x77\xb4\x98\x1c\x3a\xbe\xfc\xd3\x0b\xf0\x92\xe5\xab\x76\xb7\x43\x43\x06\x7d\x9a\x4c\x00\xde\xc2\xaa\xd4\xa2\xb1\x87\x9d\x06\x94\xbc\x51\x42\x5a\x73\x03\x1a\xb7\xa8\xc1\x2a\xe0\xaa\x34\x20\x24\x94\xb5\x6a\x39\x6b\xc4\xbb\x46\x2b\xab\x26\x00\xb5\x38\xe2\x47\x81\x4f\x04\xe7\x36\xfc\xbe\x43\xcb\x38\xb3\xcc\x07\xb9\x5b\x31\x53\xd2\xa2\xb4\x26\x8a\xf1\xed\xd9\x14\x2d\x37\x0e\x07\x89\xf3\x88\x52\x61\x7e\x76\x44\xd4\x2a\x99\x78\xe3\x6d\x9a\x63\x53\xab\x13\xec\xf1\x64\x26\x00\xdc\x7d\x1d\x50\xda\x0f\x78\x22\x05\xf3\x78\x20\xd5\x93\xac\x8d\xd4\x24\x5b\x82\x96\x6c\x59\x74\x2a\x58\x23\x82\xec\x6c\x59\x5c\x08\xf5\xb3\x91\x34\xbf\xe8\xcd\xe4\xcb\x64\x12\xb3\xc0\x5d\x6b\x19\x45\xc6\x11\xc1\x4c\x23\xb3\x18\x4e\x43\x72\xba\xe0\xaf\x1c\x1b\x8d\x25\xb3\xc8\xaf\x34\x32\x43\x09\xfb\x4d\x58\x60\x80\x69\x04\xa9\x9e\xa0\x74\x02\x38\x1c\x05\x83\xe6\x39\x58\xf6\xcd\xf5\x04\xe0\xb1\xe1\xcc\xe2\x47\xf1\x2f\xe1\xce\xd9\x56\xec\xae\x42\xe2\x50\xde\x14\xf3\x37\x37\x70\x8c\x26\xa7\x90\x73\x61\xd9\xa6\x4e\xb6\x8c\x1c\x79\x0f\x39\x71\xd5\x85\xe7\x00\xe6\x48\x79\x38\x7f\xc1\xd1\x3f\x2a\x55\x23\x93\x83\x38\xef\xab\xc1\x67\x9d\x00\xff\x3d\xbe\xd3\x1b\x18\x53\xe3\x95\xe9\x19\xb3\x33\x26\x61\xce\xeb\x4b\x26\x5d\xa1\x4d\xc9\xf3\x8a\x45\xbc\x1a\x4b\x89\xf8\xf5\x7a\x8c\x71\x0b\x79\x14\x1e\xce\x15\x1e\x98\xa8\x7b\xd6\x24\x0e\xd0\xc6\x2e\x62\x26\xbd\x81\x9a\x9d\x0d\x5d\x77\x05\x81\xc4\xa4\xf6\x2d\x51\x1f\x84\x31\x42\x49\x73\x45\xd4\xdf\x07\xb0\x4d\x27\x53\xc0\xd1\xc4\x20\x3c\x8e\xe1\xbd\xde\x5d\x29\xbd\x3b\x47\x51\xcc\x07\xed\xf7\x7a\xd7\x3b\x57\xe9\x5d\xaf\x58\x0d\xe3\x83\xd2\x68\x31\xc9\x89\xaa\x99\xd7\xe7\x4d\x5b\xab\x3d\xca\x48\xd8\x75\xaf\x7b\x02\xf0\x80\x47\xb5\xc7\xac\xae\xa3\xb5\x26\x5d\xdc\x67\xc0\x97\xc9\xc4\x1d\xa8\xce\x30\x77\xa0\x42\xa6\x4c\x00\x92\xca\x35\x01\x48\x83\x32\x01\x68\x44\x69\x5b\x9d\xac\x39\xf7\x86\x1f\x1a\x78\x96\x06\x84\xc9\x9a\x46\xab\x23\xf2\x11\x2c\xc5\x3c\x5f\x32\x5b\x39\x28\xc5\x3c\x3f\x17\xd6\x30\x5b\x0d\xdf\xdd\xa6\xe0\xa8\xaf\xe1\x97\xe4\x63\xaf\x9b\xd5\x26\x39\x0a\x82\x23\xa9\x25\x6a\x0a\x08\x88\x93\x62\x07\x75\x81\x71\x4a\x98\x64\xf5\xc9\x8a\xd2\xdc\x37\x56\x51\xb1\x4a\x44\x79\x00\xf1\xe6\x21\xd1\xdd\x76\xab\x5a\xbd\x42\x94\x2f\xed\x73\x15\xf0\x85\xb3\x33\x2e\x60\x7c\xd7\x7f\x85\xb9\x07\x9a\x72\xf2\x99\x33\x03\x4d\x66\xf6\xce\x4c\xe1\xa7\x5a\x31\xeb\xeb\x80\x29\x2f\xc3\xe1\x05\x9d\x09\xd8\x13\x3b\x0d\xc1\x78\x8d\xbc\xd1\x42\xf4\x3f\xe0\x4b\xe4\xfd\x5f\x60\xa2\x6c\x0f\x23\xdd\xc9\xca\x32\x8b\x4e\x41\x96\xaf\x3e\x3f\x2e\x3e\x2c\xee\x7f\x59\x84\xaf\x65\xbe\x98\x17\x8b\x9f\xc3\xd7\xc3\xe3\x62\x31\x7c\xfd\x94\x15\xb7\xf9\x3c\x7c\xac\xf3\x87\xbb\x62\x91\xad\xf3\xf9\xa8\xa6\xa1\xed\xf2\x8a\xb2\x75\xa4\xe8\x2d\x64\x12\x90\x0b\x1b\x3a\x36\x50\x25\xb5\x72\x20\xb6\xc0\x1c\xf7\x41\xc5\x0c\x1c\x14\x17\x5b\x81\x1c\x6c\x85\xe0\xb3\xc8\xe2\xb3\x85\xcd\x09\x84\x34\xa8\x29\x87\x40\x69\xe0\x54\x51\xe8\x77\x59\x31\xcd\x4a\x2a\xa3\xef\x9c\x92\x75\x25\xa8\xfd\x29\xeb\x96\xa3\xa1\x22\xed\x36\x48\x27\x6f\x8f\xa7\x8d\x62\x9a\x03\x93\x1c\x1a\x66\xbc\x00\x75\x38\x30\xc9\xdd\x76\x42\x9c\xcf\x8b\xb5\x87\x0b\x06\x6b\x2c\x07\xbc\xb2\x3e\x8d\x83\x2e\x2b\x65\x50\x02\x93\x49\x07\x09\xa6\x6f\xdc\xde\x75\xb0\xb8\xa0\x1e\xc0\x80\x6b\xc8\xde\x3a\x50\xc9\x16\x5b\x31\x0b\xc2\x82\xa9\x54\x5b\x73\x38\xa8\x23\xba\x45\xa4\xea\x5b\x13\x7a\x5f\xea\xf2\x68\x50\x92\x63\x18\x71\x48\xa3\x05\x45\xd7\xb2\x4d\x67\xc5\x2a\xbf\xcd\x67\xeb\xdf\xc9\x07\x6a\x3f\x43\x3a\x7c\x48\xd2\xe1\xc3\xe7\xe5\xfd\x3c\xfc\x5a\x7d\x9c\x75\xbf\x66\x0f\xc5\x72\x1d\x3e\x16\xd9\x5d\xbe\x5a\x66\xb3\x7c\x38\x66\xa3\xfd\xaa\x93\xbf\x17\x92\xbf\xd4\x2e\x9f\x31\x63\x48\x67\x6a\x0f\x5d\x4b\xdf\x8f\x1e\x98\x2d\x2b\xe4\x85\xe4\xf8\xec\xda\xe9\x42\xda\x4f\xd4\x63\x52\x52\x8f\x09\x77\xd9\xde\xa3\x5b\xb3\xcd\x19\x28\xca\x13\xca\x2f\x8e\xcf\xa0\xb6\xce\x9b\x96\x6d\xbc\xfb\x6d\x85\x26\x0e\x9e\xef\xcf\xb6\x4a\x93\x6f\x2d\xdb\x38\x14\xee\xf2\xe1\x04\xfd\x52\xa1\xad\x50\x87\x64\xa1\x8c\x62\xd1\x66\xda\x07\x96\x82\x4f\xf2\xbd\xc2\x27\x51\xd7\x70\x60\x7b\x1f\xda\x90\x7f\x80\xcf\x58\xb6\x8e\x2e\x49\xcf\xf0\x95\x6d\x2d\xb1\x27\x09\x1f\x78\x12\x62\x7c\xbf\x73\x5f\x18\x8b\x8f\xbf\xef\x44\x6e\xd8\x2a\x7d\x60\x96\x1a\x4f\x7f\xe0\x08\x6c\x7f\xfa\x4c\xb8\xfa\x3c\x55\xa2\xac\x5c\xb6\x6f\x10\x25\x34\x4c\x1b\xe4\x74\x2c\x2f\x73\x58\xf5\x89\xee\x93\x9c\x6d\x56\x56\x35\xd0\x28\x23\x1c\x5e\xb2\xaf\xd7\x59\xc4\x37\xac\xc4\xa1\xe7\x18\x08\x17\x83\x23\xab\x05\xbf\x89\xfc\xd3\x39\xf0\x9d\x2b\xe7\x79\x3f\x1e\x3b\xeb\x2d\x64\x75\x9d\x84\x94\xc2\x82\xac\xac\xa2\xe8\x13\x48\x13\x62\xbc\x4a\xbc\x9b\xe4\xcf\xe0\x54\xba\xc2\x30\x21\x51\x53\xb6\xb5\xbe\xb2\x9d\x17\xfa\x71\xd2\x0e\x79\x3b\x2c\x3b\xa0\x31\x6c\x97\x0c\x75\xd7\x84\x78\xc4\x58\xa6\xed\x4c\xb5\xd2\xba\xfc\x1b\xca\xc8\x87\xbf\x98\xfc\x88\xd2\x47\x75\x44\x98\x6b\x5a\xd7\xe2\x80\x09\x0c\x6a\x5b\xcf\x06\x3b\x81\x4b\xc5\xff\x90\x55\xad\x79\xb5\x59\x65\xe7\x46\xf7\xf0\x90\xfa\xd4\xdf\xc6\x90\x4c\xa3\xd9\xce\x4c\x3f\x3c\xee\x0f\xc7\x77\xe1\x9a\x13\x99\xe0\x53\x9d\xe3\x96\x51\xf2\xbb\x00\x10\x8b\x4b\x65\xab\x90\x5b\x7b\xa9\x9e\x24\xc5\x7f\xb6\x4a\xca\x16\xed\x0b\xeb\x0d\x54\xc8\x6a\x5b\x9d\x68\x6b\x85\x4c\xdb\x0d\x32\xeb\x09\x42\x63\x89\xe2\x88\x9c\x8a\x8d\xc6\x5d\x5b\x33\x0d\x42\x5a\xd4\xd4\xe0\xb9\x8a\x63\x2b\x7f\x20\xc2\xcd\x8d\xc4\x69\x34\x8d\x92\x9c\x10\x58\xe5\xde\x0d\xd0\x58\x13\x40\xbc\xcf\xb3\xdb\xf5\xfb\x5f\x2f\x41\xb4\x32\x82\xe1\x38\x64\x90\x58\xfa\x57\x18\xaa\xa0\x0a\x96\xe2\x59\x20\xcc\x6a\xd5\xfa\x9a\x27\x0c\x50\xc7\x29\x78\x77\xd6\x06\x1b\x6e\x60\xe3\x8e\xbe\xfc\xd6\xc2\x6f\x2d\xea\x93\x3b\x5b\x74\x4c\x8c\x3a\x60\x08\x5b\xa8\x63\x1a\x0d\x1e\x36\x35\x1a\x78\xbf\x5e\x2f\xbf\x35\xf0\xfd\x77\xdf\x85\xe8\xf7\xfe\x1b\x07\xef\xa8\x6f\xa7\xdc\x3b\x85\x30\x03\xd6\x60\xc7\xcf\x0f\xcb\x59\x67\x01\x91\xe7\x46\x23\xdb\x9b\x77\x4e\x40\xa5\x1a\xf4\xd4\xc4\x6c\x5f\x3c\x3b\xc3\x9d\xdc\x92\x80\x6e\x58\xb9\xa7\x52\x2d\x24\x3a\x93\x35\x9a\xf6\x40\x44\x02\x01\x91\x47\x12\x70\xce\x8b\xd5\xec\x7e\xb1\xc8\x67\x6b\xd7\xe3\x9c\xfb\x99\xae\x4d\x14\x9b\xa7\x0a\xe5\xb9\xa3\x85\x1f\x69\xb4\x2a\xd1\x18\xe2\x91\x6e\x79\xe7\x83\xe5\x3c\x5b\xfb\x46\xca\xcb\xf5\x37\x74\xdf\x31\x74\x96\x7b\xb7\xd3\x90\x54\x16\x0c\x1d\x61\x26\x4f\xa0\x1c\x03\x6e\x5b\xed\x4b\x8b\x4f\x63\x27\x1f\x0d\xb0\x8d\x6a\xbd\x0b\x9e\x02\x55\x0a\x1b\xe7\xa6\xd2\xe7\x50\x2e\x6d\x0c\x58\x9e\x98\x01\xab\x4f\x21\xff\xbc\x02\x0f\x69\xcb\x44\x8d\x7d\xd6\x48\xf5\x44\x06\x33\xd8\x30\x9e\x38\xd0\x19\x99\x0f\x5d\xe2\x99\x07\x39\xee\x34\xe3\x43\x80\x23\xff\xd5\x62\x8f\xf5\x89\xd4\x6e\x30\xca\x38\xd2\x7d\x10\xbb\xca\xd2\xb0\xbb\xf2\x86\x54\xa5\x46\xbb\x8b\x5a\xfe\xf3\x43\x36\xf7\x4d\xa8\x63\xab\xf8\x95\xc3\x9d\xf6\x86\x19\x63\x2b\xad\xda\x5d\x95\xbb\xab\xd6\xd8\xfd\x2e\x7e\xa0\x49\x3b\xef\x8e\xc9\x12\x1a\xe9\x18\xf3\x7d\x77\x66\x12\xf2\x4b\x9f\x5f\x92\x67\x97\x7e\xf6\x23\x6a\x23\xce\xc8\xcf\x6b\x78\x79\xe6\xe2\xd6\xa9\xd1\xda\xd3\x6c\x7c\xf2\xf2\x31\xb1\x23\x58\xad\xea\x65\xcd\x24\xf6\xbc\xee\xda\xa8\xfe\xcb\x13\x6a\xcf\x2b\x73\x66\xd9\xd7\x97\xcb\xf6\xb0\x50\x1c\x4d\xe0\x5e\x37\x50\x48\x63\x75\x4b\xf7\x19\xe4\xe9\xa4\xf7\xe9\xdd\x65\x45\x68\x34\x1e\x85\x6a\xcd\x6a\xcc\xe9\x17\xf3\x49\xbd\x3a\x0f\x65\xfa\x04\xed\x83\xda\x64\x9c\x6b\x34\x49\x5d\xb2\x6a\x8f\xf2\xf2\x32\x36\x3c\xd9\xb8\xad\x17\x8f\x0c\xc2\xcd\xdd\x0a\xb9\x4f\xf6\xbe\x85\x87\xaf\x3c\xbe\x3a\xe9\xe7\x6f\xae\x5f\x79\x22\xb8\xb8\xd8\xbd\x52\x4d\xf7\xc0\x1a\x5a\x02\xaf\x73\x7a\x81\xc2\x45\xe0\xb9\xee\x56\xc7\x08\x8e\xc2\xfc\x6d\x75\xbf\xf8\x23\x20\xd2\x07\xe1\x57\x59\x0a\xc4\x86\x1d\xca\xf4\xd4\xbe\x4a\xf9\x0b\xf6\x9f\x3d\x55\x87\xe3\x91\x9a\xde\xdf\x9a\xa2\x7f\x29\x9c\x18\x80\xe4\x4a\xeb\x3e\x6f\x8b\xc5\xe3\x3f\x3e\x67\x77\xf3\x1f\xfe\xdc\x0d\xcd\xb3\x87\x5f\x8a\x45\x3a\x36\xbb\x5f\xac\xb3\x62\x91\x3f\x7c\x5e\xe5\xeb\xcf\xbf\x66\x77\xb7\xab\xf1\xa9\x11\x79\xe9\x82\x75\x7e\xb7\xbc\x25\xd2\xf5\x42\xfa\x23\x30\xfc\x85\xe2\xff\x96\xd2\x49\xee\x9a\x8a\xfd\xe9\xfb\x1f\x12\x1b\xd3\x47\x9a\xd7\x70\xe8\xf8\x13\x4f\xf4\x46\xe9\x23\x7e\xf9\xb8\x76\xb9\x31\x7a\x67\xf4\x87\xee\x85\x97\xb1\xc9\x97\xc9\x7f\x02\x00\x00\xff\xff\x7c\xbc\x9e\xe7\x7f\x1b\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 7039, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
