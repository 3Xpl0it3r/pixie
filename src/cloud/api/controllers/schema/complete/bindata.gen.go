// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x5f\x8f\xe3\xb6\x11\x7f\xf7\xa7\x98\xcb\x3d\xc4\x0b\x6c\x0f\x41\xd1\x04\x85\x9f\xaa\xd8\xba\x9c\xba\xbb\x5e\xd7\xf6\x5d\x1a\x04\x87\x03\x2d\x8d\x2d\xc2\x32\xa9\x90\x94\x77\xdd\x22\xdf\xbd\x18\x92\x92\x48\x59\xdb\xcb\x5d\xfb\x26\xfe\x9b\xf9\xcd\x1f\x0e\x67\x46\xf8\x6c\x50\x14\x60\x2e\x35\xc2\x3f\x1a\x54\x17\xf8\xf7\x04\xa0\xd1\xa8\x66\xf0\x5e\xa3\xca\xc4\x5e\xbe\x9a\x00\x48\x75\x98\xc1\xa3\x3a\xb4\x63\xda\xb1\x41\x63\xb8\x38\x68\xb7\xb3\x1d\xb5\xab\x89\x31\x8a\xef\x1a\x83\x7e\xbd\x1f\x7b\x7a\x34\xa9\x67\xf0\x6b\xc7\xe6\x23\x2d\xe4\x55\xa3\x0d\xaa\x29\x2f\x66\x90\x2d\x5e\xdd\xcc\x60\xee\x66\x5a\xce\x7e\xc3\x8f\x97\x25\x3b\xe1\x54\xb0\x13\xce\x60\x63\x14\x17\x87\x97\x37\x13\x9b\x70\x25\xe4\x34\x97\x42\x60\x6e\xb8\x14\xd7\x3c\xfb\xb5\x9e\x20\x4f\x94\xe1\x7b\x96\x9b\x29\xf3\x1f\xdb\x4b\x8d\x33\x48\x82\x91\x25\x71\x9f\xb5\x53\x74\x90\x35\x46\xe6\xf2\x54\x57\x68\x70\xca\x45\xdd\x98\x16\xf6\x2d\xe4\x8d\xd2\x52\xad\xa4\x9e\x41\x26\xcc\x2d\x30\xcb\x72\x06\x49\x70\x26\xb1\x73\x44\xfc\xb6\x45\xfe\x3e\x5b\xb4\x34\x6e\xe2\xcd\x6b\xd4\x4d\x75\xc5\xf6\x2d\xc7\xaa\x18\xf2\xde\xd3\xa4\x97\x20\xd8\x9b\x0a\xc3\xcd\xe5\x8e\x8b\xe2\x76\x02\x00\xa0\xf0\xb7\x86\x2b\x2c\x12\x75\xa0\xcd\xa4\xd0\xf1\xed\x1f\xff\x00\x3c\x0b\xa4\xc5\x38\x01\x78\x0d\x9b\x5c\xf1\xda\x9c\x0e\x0a\x50\x14\xb5\xe4\xc2\xe8\x5b\x50\xb8\x47\x05\x46\x42\x21\x73\x0d\x5c\x40\x5e\xc9\xa6\x60\x35\x7f\x53\x2b\x69\xe4\x04\xa0\xe2\x67\xfc\xc0\xf1\x89\xe0\xdc\xfb\xef\x07\x34\xac\x60\x86\x39\x23\xb7\x3b\xe6\x52\x18\x14\x46\x07\x36\xbe\x1f\x2c\xd1\x76\x6d\x71\x10\x39\x87\x28\x26\xe6\x56\x47\x48\x6d\xa2\x05\x2f\xd3\x02\xeb\x4a\x5e\xe0\x88\x17\x3d\x01\x28\xec\xe8\x84\xc2\xdc\xe1\x85\x18\x2c\xc2\x89\x98\x4f\xb4\x37\x60\x13\x1d\xf1\x5c\x92\x55\xd6\xb2\x60\x35\xf7\xb4\x93\x55\x76\x45\xd4\xad\x06\xd4\xdc\x26\x4f\x66\x55\x35\x07\x2e\x26\x00\xb5\xfd\xd0\xd3\x23\x17\xc5\xcc\x4f\x93\x5d\x6f\x66\xf0\xab\x1b\x39\x72\x0a\x49\x56\x2e\x85\x9b\xa4\xfb\x61\x69\xfb\xab\x78\xeb\x09\x7d\x40\xa5\xad\x2f\xf7\x57\xb4\x3f\xe0\x03\xc1\x3a\x26\x35\x97\x62\xcf\x0f\x21\xb1\x9e\xb7\x5b\x23\x04\xbf\x4f\x26\x61\xec\x7a\x68\x0c\x23\x12\x36\x7c\xcd\x15\x32\x83\xfe\x0e\x47\x31\x01\xfe\x56\x60\xad\x30\x67\x06\x8b\xa9\x42\xa6\x09\xda\x37\x7e\x83\x06\xa6\x10\x84\x7c\x82\xdc\x12\x28\xe0\xcc\x19\xd4\xcf\xde\x1e\xdf\xdc\x4c\x00\xde\xd7\x05\x33\xf8\x81\xff\x8b\xdb\xe8\x40\x40\xbd\xbb\x93\xb7\x67\x8b\x57\xb7\x70\x0e\x16\x67\x90\x16\xdc\xb0\x5d\x15\x1d\x19\x09\x54\x0e\x72\x64\xe0\x2b\x7b\x03\x2c\x90\xae\xcf\xe2\x05\xf7\xf8\x51\xca\x0a\x99\xe8\xc9\x39\x0b\xf7\x96\x6e\x09\xb8\xf1\xf8\x49\x27\x60\x18\xd0\xa7\xba\x8b\xf3\xad\x30\x51\xbc\xbf\xb9\x8e\xff\x1b\x34\x71\xc8\x9f\xb2\xe0\x35\x08\xa9\x04\xaf\xc2\xcd\xd8\x3b\x91\x89\x33\x77\x70\xa6\x78\x62\xbc\x0a\x1c\x6c\xcf\x95\x36\xcb\x30\xfe\xdf\x42\xc5\x06\x53\x37\xed\x33\x46\x64\x62\xf9\x56\xa8\x4e\x5c\x93\x77\xea\x29\x3d\x58\x9d\x01\x9b\x78\x31\x06\x1c\x2c\xf4\xc4\x43\x1b\x3e\xaa\xc3\x54\xaa\xc3\x10\x45\xb6\xe8\xb9\x3f\xaa\x43\xa7\x5c\xa9\x0e\x1d\x63\xd9\xcf\xf7\x4c\x83\xcd\x44\x27\x78\x83\x1d\x3f\x27\xda\x56\x1e\x51\x04\xc4\x6e\x3a\xde\x13\x80\x35\x9e\xe5\x11\x93\xaa\x0a\xf6\xea\x78\x73\xe0\x01\x6b\x3c\xc9\xb3\x95\xf5\xad\x92\x27\x12\x27\xd0\x4e\xb8\x35\x0e\x1c\x4e\xb4\xcf\xde\xe5\x5b\x40\x41\x62\x15\x1d\xa1\x6e\x66\x10\x2b\x6e\x21\xb7\xa7\x03\x5d\x84\x44\x75\x84\xe5\xf7\xc9\xc4\xc6\x81\xd6\x1e\x36\x0e\x78\x07\x9f\x00\x44\x69\xc2\x04\x20\xf6\x25\x0a\x7b\x3c\x37\x8d\x8a\xf6\x0c\x8d\xe8\xa6\xfa\x47\x8d\x26\xb8\x4e\xea\x5a\xc9\x73\x20\x4e\x8f\x25\x5b\xa4\x2b\x66\x4a\x0b\x25\x5b\xa4\x43\x62\x35\x33\x65\x3f\x6e\x0f\x79\xfb\x7e\x06\x7f\x21\x4f\x8c\x8b\x21\x45\xa7\x47\x87\x88\x55\x3a\xb2\x2a\x2f\x90\xc0\xd0\xeb\xe0\x71\xf9\x28\xda\xa9\xad\xf5\x32\xcb\x9a\x09\x56\x5d\x0c\xcf\xf5\x63\x6d\x24\xe5\x0b\x11\x29\x07\x2b\x3c\xdc\xdf\x5a\x7b\xdc\xc8\x46\x6d\x10\xc5\x4b\xe7\x6c\x12\xf2\x42\x20\x18\x27\x30\x7e\xea\x0f\x61\xee\x80\xc6\xcf\xe2\x40\xc5\x3e\xe6\x27\xe6\x41\xcf\xe0\x6d\x25\x99\x71\x4f\xb1\xce\xaf\x8d\xe4\x08\x0d\x08\x1c\x29\xd4\xf6\xc6\xf8\x12\x7a\xa3\xb9\xc0\xff\x80\x2f\xa2\xf7\x7f\x81\x89\xa2\x39\x8d\x24\x88\x1b\xc3\x0c\x5a\x06\x49\xba\xf9\xf4\x7e\x79\xb7\x7c\xfc\x79\xe9\x47\xab\x74\xb9\xc8\x96\x3f\xf9\xd1\xfa\xfd\x72\xd9\x8f\xde\x26\xd9\x7d\xba\xf0\x83\x6d\xba\x7e\xc8\x96\xc9\x36\x5d\x8c\x72\xea\x33\x5f\xc7\x28\xd9\x06\x8c\x5e\x43\x22\x00\x0b\x6e\x7c\xd2\x0c\x32\xa7\x6c\x1a\xf8\x1e\x98\x0d\xe4\x50\x32\x0d\x27\x59\xf0\x3d\xc7\x02\x4c\x89\xe0\xbc\xc8\xe0\xb3\x81\xdd\x05\xb8\xd0\xa8\xc8\x87\x40\x2a\x28\xe8\x79\xa4\xef\xbc\x64\x8a\xe5\x94\x13\xbc\xb1\x4c\xb6\x25\xa7\x0c\x34\xaf\x9a\x02\x35\x65\x1c\xf6\x80\xb0\xf4\x8e\x78\xd9\x49\xa6\x0a\x60\xa2\x80\x9a\x69\x47\x40\x9e\x4e\x4c\x14\xf6\x38\x21\x4e\x17\xd9\xd6\xc1\x05\x8d\x15\xe6\x3d\x5e\x51\x5d\xc6\x41\xe7\xa5\xd4\x28\x80\x89\x28\x89\x07\xdd\x1c\x0e\xa8\xe9\xec\x9b\x16\x56\xc1\x29\xa1\xd1\x60\x73\xe2\xd7\x16\x54\x74\xc4\x94\xcc\x00\x37\xa0\x4b\xd9\x54\x05\x50\x78\xb7\x9b\x88\xd5\xb7\xda\x97\x1f\x94\x68\xd3\xa4\x20\xc5\x30\x8a\x21\xb5\xe2\x64\x5d\xc3\x76\xad\x14\x9b\xf4\x3e\x9d\x6f\xff\x8b\x3f\x50\xa6\xe8\xdd\xe1\x2e\x72\x87\xbb\x4f\xab\xc7\x85\xff\xda\x7c\x98\xb7\x5f\xf3\x75\xb6\xda\xfa\xc1\x32\x79\x48\x37\xab\x64\x9e\xb6\xe3\xc7\x45\xda\xdf\xb8\x80\xd5\xa6\xd3\x80\x65\xe5\x32\xd5\x71\x2c\x83\xd0\xe9\x3d\x9b\x92\xf5\xe0\xa1\x99\x00\x9c\x98\xc9\x4b\x2c\x32\x51\xe0\xb3\x2d\x6e\x32\x61\x3e\x52\xc6\x4f\xfe\x3d\x46\xdc\x3a\x7e\x87\x6e\xcb\x76\x03\x50\xe4\x32\xe4\x6a\x05\x3e\x83\xdc\x5b\xc5\x1a\xb6\x73\x96\x30\x25\xea\xd0\x8e\x2e\xef\xdc\x4b\x45\x6a\x36\x6c\x67\x51\xd8\x52\xd0\x12\xfa\xb9\x44\x53\xa2\xf2\x7e\x43\xce\xc5\x82\xc3\x74\x0e\x0c\xf9\x01\xd1\x77\x0c\x9f\x78\x55\xc1\x89\x1d\x9d\x95\xbd\x2b\x02\x3e\x63\xde\xd8\xc8\x49\x7c\xfa\x51\xb2\x37\x14\x48\x89\x78\x1f\x32\x21\xc4\x37\x28\xf6\x7a\x51\x3f\x8e\xda\xc7\x55\x76\x81\x1a\xf6\x52\x9d\x98\xa1\x84\xda\xdd\x3d\x02\xdb\x5d\x44\xed\x1f\xfb\xa7\x92\xe7\xa5\x75\xfc\x1d\xa2\x80\x9a\x29\x8d\x05\xdd\xd0\x6b\x77\x96\x9d\xcf\x3b\x7f\x67\xbb\x8d\x91\x35\xd4\x52\x73\x8b\x97\xe4\xeb\x78\x66\x61\xbd\x1b\x29\x74\x88\x81\x70\x31\x38\xb3\x8a\x17\xb7\x81\x7e\x5a\x05\xbe\xb1\xef\x7d\xda\xcd\x87\xca\x7a\x0d\x49\x55\x45\x26\x25\xb3\x20\xcb\xcb\xc0\xfa\x04\x52\x7b\x1b\x6f\x22\xed\x46\xfe\x33\xae\xd4\xa0\x66\x0e\x34\xfb\x42\x64\xd0\xde\x2b\x5a\xf9\x28\x21\xe0\x05\x16\x7f\xd4\xac\xaf\x22\x3d\x49\x05\x42\x5a\xb7\xa5\xaa\xaf\x51\x02\x0b\x50\x16\x89\xf3\xdc\x9a\x29\xc3\x59\x05\x53\xa3\x1a\xbc\xa1\xed\x1d\xa4\xe9\x9e\x55\x1a\xa9\x70\x2a\x99\x4e\x8a\xc2\xda\x87\x55\x0f\xf6\xba\xe9\x91\x9c\x89\x6a\x68\xc6\x05\x2a\xba\x60\x8d\x7b\xd7\x87\xc9\xcf\xf8\x93\xe5\xaf\x6a\xbf\xed\x84\x5a\xb3\x43\x34\xd5\x56\x7c\xe1\x8c\x36\x4c\x99\xb9\x6c\x84\xb1\x57\xae\x87\x72\xf7\x57\x9d\x9e\x51\x38\x75\x8f\x10\xb3\xf5\xc7\x96\x9f\x30\x82\x41\x15\xc8\x60\xb2\x25\xb8\x92\xc5\x57\x49\xd5\xe8\x2f\x16\x2b\x6f\xd5\x68\x3b\x5f\xb1\x4e\x5d\xfd\x8e\x24\x1a\xad\xb6\x62\xb6\x65\xfd\x98\x3e\x6c\xb4\xf7\x15\x6b\x20\x82\xf3\xc1\x02\xf7\x8c\xbc\xd2\x1a\x80\xde\x30\x21\x4d\xe9\xaf\xd3\x51\xc8\x27\x41\x2e\x3f\xdf\x44\x8f\x36\x9d\xf3\xfb\x35\x94\xc8\x2a\x53\x5e\xe8\x68\x89\x4c\x99\x1d\x32\xef\x59\x0a\x73\xe4\x67\x2c\xe8\xa9\x55\x78\x68\x2a\xa6\x80\x0b\x83\x8a\xd2\x5b\xfb\xde\x9a\xd2\xc5\x00\x5f\x84\x13\x39\x85\xba\x96\xa2\x20\x04\x46\xda\xc6\x15\x6a\xa3\x3d\x88\x77\x69\x72\xbf\x7d\xf7\xcb\x35\x88\x46\x04\x30\x6c\xd8\xec\x29\xe6\xae\x0d\x48\xf9\x83\x84\x15\x7f\xe6\x08\xf3\x4a\x36\xee\xc5\xe7\xda\x5f\xaf\x36\xbc\xf4\x32\xdc\xc2\xce\x46\x3b\xf1\xad\x81\xdf\x1a\x54\x17\x1b\x4e\xe8\x6a\x6a\x79\x42\x6f\x36\xff\x8a\x2b\xd4\x78\xda\x55\xa8\xe1\xdd\x76\xbb\xfa\x56\xc3\xf7\xdf\x7d\xe7\xad\xdf\xe9\x6f\x1c\xbc\x8d\xf6\x07\x69\x1b\x65\x5c\xf7\x58\xbd\x1c\x3f\xad\x57\xf3\x56\x02\x7a\x2f\x76\x0a\xd9\x51\xbf\xb1\x04\x4a\x59\xa3\x8b\xc6\xcc\x74\xa9\x43\x2b\xb8\xa5\x9b\x13\xd0\x1d\xcb\x8f\x94\xa8\x70\x81\x56\x64\xba\xfc\x27\x8a\x2d\xe0\x11\x39\x24\x1e\xe7\x22\xdb\xcc\x1f\x97\xcb\x74\xbe\xb5\x19\xde\x50\xcf\x54\x26\x92\x6d\x9e\x4a\x14\x43\x45\x73\x37\x53\x2b\x99\xa3\xd6\x14\x3a\xdb\xed\xad\x0e\x56\x8b\x64\xeb\xd2\x48\x47\xd7\x35\x5b\x5c\xbe\xd4\x4a\xee\xd4\x4e\x53\x14\xb6\x34\x5d\x61\x26\x2e\x20\x6d\x30\xdb\x37\xca\xbd\xa6\xce\x8d\x2d\x7d\xd4\xc0\x76\xb2\x71\x2a\x78\xf2\x51\x8f\x9b\xd0\x37\xa5\x1a\x42\xb9\x96\xd1\x63\x79\x62\x1a\x8c\xba\x78\xff\x73\x0c\x1c\xa4\x3d\xe3\x15\x76\x5e\x23\xe4\x13\x09\xcc\x60\xc7\x8a\x48\x81\x56\xc8\xb4\xcf\x91\x07\x1a\x2c\xf0\xa0\x58\xd1\x1b\x38\xd0\x5f\xc5\x8f\x58\x5d\x88\xed\x0e\x03\x8f\x23\xde\x27\x7e\x28\x0d\x4d\xdb\xee\x85\x77\x55\x2a\x33\x5a\xab\xa5\x3f\xad\x93\x85\x4b\xc1\x6d\xb4\x0a\x1b\x56\xf6\xb6\xd7\x4c\x6b\x53\x2a\xd9\x1c\xca\x74\x50\xc2\x07\xf1\x3b\xe8\xb5\xc5\x75\x47\x1b\xc9\xa2\x30\xd2\x46\xcc\x77\xed\x9d\x89\x82\x5f\xdc\x49\x8b\x3a\x68\xdd\xea\xb0\xc1\xd8\x37\xf6\x5f\x5e\xb9\xaa\xc4\x15\x1a\x73\x99\x8f\x2f\x5e\x77\xb3\xdb\x00\xab\x64\xb5\xaa\x98\xc0\x2e\xae\xdb\xcc\xb1\x1b\xb9\x80\xda\xc5\x95\x05\x33\xec\xf3\xdb\x45\x73\x5a\xca\x02\xb5\x8f\xbd\x76\x22\x13\xda\xa8\x86\xaa\x39\x2c\xe2\x45\xa7\xd3\x87\xeb\x17\xa1\x56\x78\xe6\xb2\xd1\x9b\x31\xa5\x5f\xad\x47\xef\xd5\xd0\x94\xf1\x3f\x10\x67\xd4\x3a\x29\x0a\x85\x3a\x7a\x97\x8c\x3c\xa2\xb8\x2e\x45\xfb\xee\x9b\x3d\x7a\xd5\x78\xe1\x76\xed\x9e\x8b\x63\x74\xf6\x35\xac\x3f\xd3\xfd\xb7\xd4\x87\x4d\xff\xcf\xb5\x4d\x86\x65\xed\x17\xb2\x69\x3b\xfc\x3e\x25\x70\x3c\x67\x57\x28\xac\x05\x9e\xab\x76\x77\x88\xe0\xcc\xf5\xdf\x37\x8f\xcb\xaf\x01\x11\xff\x91\xf8\x22\x49\x6d\xfa\xd5\xa2\x8c\x6f\xed\x17\x31\x7f\x41\xfe\xc1\xbf\x12\x7f\x3d\x62\xd1\xbb\x9a\x31\xf8\x4d\x66\xc9\x00\x44\x05\xbd\x1d\xde\x67\xcb\xf7\xff\xfc\x94\x3c\x2c\x7e\xf8\x4b\x3b\xb5\x48\xd6\x3f\x67\xcb\x78\x6e\xfe\xb8\xdc\x26\xd9\x32\x5d\x7f\xda\xa4\xdb\x4f\xbf\x24\x0f\xf7\x9b\xf1\xa5\x11\x7a\xf1\x86\x6d\xfa\xb0\xba\xa7\xa0\xeb\x88\x74\x57\xa0\xff\x87\xe7\xfe\x8b\xaa\xc8\x77\x75\xc9\xfe\xfc\xfd\x0f\x91\x8c\x71\x8b\xea\x4b\x62\xe8\x78\x83\x2b\x68\x37\x3b\x8b\x5f\x37\x1c\xaf\x0f\x06\x2d\x63\x77\xe9\x5e\xe8\x0b\x3a\xfb\xbb\xa6\xea\x9f\x14\x56\xf6\x9f\x07\x09\xae\xdf\xb4\x29\xab\x5d\x1b\xcd\x57\x83\x9e\xee\x78\x59\x6d\x63\xbb\x3c\xc8\xa0\xf6\x22\x0e\xda\x8c\x04\x66\xdd\xd4\xb5\x54\x46\x77\xed\xe3\xa8\x71\xd8\xfd\x6b\xba\x7e\x77\xe0\x85\xe6\x71\xe7\x6f\xfd\x1f\x2c\x2b\xc5\x2a\x6c\x4b\xac\xee\x3e\xad\xd3\x6d\xba\xdc\x66\x8f\xcb\x3e\x4b\x0f\x7a\xcc\xa3\x82\x9f\x59\xd5\xe0\x75\xa0\xeb\x7f\x6b\xd9\x53\x5d\xef\x3a\xfa\x73\xb5\xc9\x4b\x3c\xb1\xb0\xf3\x7a\xbd\x3a\xca\x74\x54\xbf\x57\x86\xff\x0a\xec\x2f\x13\xd0\x03\x39\xc6\xf6\x38\x49\xfe\x13\x00\x00\xff\xff\xf4\xcb\x08\xc8\x45\x20\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 8261, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
