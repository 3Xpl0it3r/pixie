// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x5f\x6f\xe3\xb8\x11\x7f\xf7\xa7\x98\xbd\x7d\xb8\x04\x08\x16\x87\xa2\x77\x28\xfc\x54\x9d\xad\xbd\x55\x93\x38\xae\xed\xec\xf6\x50\x2c\x16\xb4\x34\xb6\x08\x4b\xa4\x8e\xa4\x9c\xb8\xc5\x7e\xf7\x62\x48\x4a\x22\x6d\xe5\xb6\xb9\xf6\xcd\xe2\x9f\x99\xdf\xfc\xe1\x6f\x86\x34\x3e\x1b\x14\x05\x98\x53\x83\xf0\xf7\x16\xd5\x09\xfe\x3d\x01\x68\x35\xaa\x29\x3c\x6a\x54\x99\xd8\xc9\x37\x13\x00\xa9\xf6\x53\x78\x50\xfb\xee\x9b\x56\xac\xd1\x18\x2e\xf6\xda\xad\xec\xbe\xba\xd9\xc4\x18\xc5\xb7\xad\x41\x3f\x3f\x7c\x7b\x79\x34\xa8\xa7\xf0\xcf\x5e\xcd\x67\x9a\xc8\xab\x56\x1b\x54\x57\xbc\x98\x42\x36\x7f\x73\x3d\x85\x99\x1b\xe9\x34\xfb\x05\x3f\x9f\x16\xac\xc6\x2b\xc1\x6a\x9c\xc2\xda\x28\x2e\xf6\x2f\x2f\x26\x35\xe1\x4c\xa8\x69\x26\x85\xc0\xdc\x70\x29\x2e\x75\x0e\x73\x83\x40\x9e\x28\xc3\x77\x2c\x37\x57\xcc\xff\xd8\x9c\x1a\x9c\x42\x12\x7c\x59\x11\x77\x59\x37\x44\x1b\x59\x6b\x64\x2e\xeb\xa6\x42\x83\x57\x5c\x34\xad\xe9\x60\xdf\x40\xde\x2a\x2d\xd5\x52\xea\x29\x64\xc2\xdc\x00\xb3\x2a\xa7\x90\x04\x7b\x12\x3b\x46\xc2\x6f\x3a\xe4\x8f\xd9\xbc\x93\x71\x1d\x2f\x5e\xa1\x6e\xab\x0b\xb5\xef\x39\x56\xc5\xb9\xee\x1d\x0d\x7a\x0b\x82\xb5\xa9\x30\xdc\x9c\x6e\xb9\x28\x6e\x26\x00\x00\x0a\x7f\x6b\xb9\xc2\x22\x51\x7b\x5a\x4c\x0e\x1d\x5f\xfe\xf9\x05\x78\xd1\xf2\x75\xbb\xdf\xa3\x26\x83\x3e\x4f\x26\x00\x6f\x61\x9d\x2b\xde\x98\x7a\xaf\x00\x45\xd1\x48\x2e\x8c\xbe\x01\x85\x3b\x54\x60\x24\x14\x32\xd7\xc0\x05\xe4\x95\x6c\x0b\xd6\xf0\x77\x8d\x92\x46\x4e\x00\x2a\x7e\xc4\x8f\x1c\x9f\x08\xce\x9d\xff\x7d\x8f\x86\x15\xcc\x30\x17\xe4\x6e\xc5\x4c\x0a\x83\xc2\xe8\x20\xc6\x77\x67\x53\xb4\x5c\x5b\x1c\x24\xce\x21\x8a\x85\xb9\xd9\x11\x51\xeb\x68\xe2\x8d\xb3\x69\x8e\x4d\x25\x4f\x70\xc0\x93\x9e\x00\x14\xf6\xab\x46\x61\x6e\xf1\x44\x0a\xe6\xe1\x40\xac\x27\x5a\x1b\xa8\x89\xb6\x78\x2d\xc9\x32\xeb\x54\xb0\x86\x7b\xd9\xc9\x32\xbb\x10\xea\x66\x03\x69\x6e\xd1\x9b\xc9\xd7\xc9\x24\x64\x81\xfb\xd6\x30\x8a\x8c\x25\x82\x99\x42\x66\xd0\x9f\x86\xe8\x74\xc1\x5f\x0b\x6c\x14\xe6\xcc\x60\x71\xa5\x90\x69\x4a\xd8\xef\xfc\x02\x0d\x4c\x21\x08\xf9\x04\xb9\x15\x50\xc0\x91\x33\x68\x9e\xbd\x65\xdf\x5d\x4f\x00\x1e\x9b\x82\x19\xfc\xc8\xff\xc5\xed\x39\xdb\xf1\xfd\x95\x4f\x1c\xca\x9b\x6c\xfe\xe6\x06\x8e\xc1\xe4\x14\xd2\x82\x1b\xb6\xad\xa2\x2d\x23\x47\xde\x41\x8e\x5c\x75\xe1\x39\x80\x39\x52\x1e\xce\x5f\x70\xf4\xcf\x52\x56\xc8\xc4\x20\xce\xf9\x6a\xf0\x59\x27\xc0\x7d\x8f\xef\x74\x06\x86\xd4\x78\xa5\x7b\xc6\xec\x8c\x89\x98\xf3\xfa\x92\x49\xd7\x68\x62\xf2\xbc\x62\x01\xaf\x86\x52\x02\x7e\xbd\x1e\x63\xdc\x4c\x1c\xb9\x83\x73\x85\x35\xe3\x55\xcf\x9a\xc4\x01\x4a\x9b\x45\xc8\xa4\x37\x50\xb1\xb3\xa1\xeb\xae\x20\x90\x98\xd8\xbe\x25\xaa\x9a\x6b\xcd\xa5\xd0\x57\x44\xfd\x7d\x00\xdb\x78\x32\x06\x1c\x4c\x0c\xc2\xc3\x18\x3e\xa8\xfd\x95\x54\xfb\x73\x14\xd9\x7c\xd0\xfe\xa0\xf6\xbd\x73\xa5\xda\xf7\x8a\xe5\x30\x3e\x28\x0d\x16\x93\x9c\xa0\x9a\x39\x7d\xce\xb4\x8d\x3c\xa0\x08\x84\x5d\xf7\xba\x27\x00\x2b\x3c\xca\x03\x26\x55\x15\xac\xd5\xf1\xe2\x20\x03\x56\x58\xcb\xa3\xb5\xf5\xbd\x92\x35\x99\x13\x78\x27\x5c\xfa\x75\x32\xb1\x67\xaf\xf3\x81\x3d\x7b\x3e\xa9\x26\x00\x51\x91\x9b\x00\xc4\xf1\x9b\x00\x34\x3c\x37\xad\x8a\xd6\x9c\x3b\xce\x0d\x0d\x94\x4c\x03\x5c\x27\x4d\xa3\xe4\x11\x8b\x11\x2c\xd9\x3c\x5d\x32\x53\x5a\x28\xd9\x3c\x3d\x17\xd6\x30\x53\x0e\xdf\xdd\x26\xef\xd3\x6f\xe1\x17\x14\x0e\xa7\x9b\x55\x3a\xf2\x19\x2f\x90\xd4\x12\x8b\x79\x04\x44\x5f\xa1\x83\xba\x18\x5a\x25\x4c\xb0\xea\x64\x78\xae\x1f\x1a\x23\xa9\xae\x45\xa2\x1c\x80\x70\xf3\x70\x26\xec\x76\x23\x5b\xb5\x46\x14\x2f\xed\xb3\xc5\xf2\x85\x63\x36\x2e\x60\x7c\xd7\x7f\x85\xb9\x07\x1a\xd3\xf7\x99\x33\x3d\xa3\x26\xe6\x5e\x4f\xe1\x7d\x25\x99\x71\x25\x43\xe7\x97\xe1\x70\x82\xce\x04\x1c\x88\xc8\x86\x60\xbc\x46\xde\x68\xcd\xfa\x1f\xf0\x45\xf2\xfe\x2f\x30\x51\xb4\xf5\x48\x23\xb3\x36\xcc\xa0\x55\x90\xa4\xeb\x2f\x8f\x8b\xdb\xc5\xc3\xa7\x85\xff\x5a\xa6\x8b\x79\xb6\xf8\xc5\x7f\xad\x1e\x17\x8b\xe1\xeb\x7d\x92\xdd\xa5\x73\xff\xb1\x49\x57\xf7\xd9\x22\xd9\xa4\xf3\x51\x4d\x43\x87\xe6\x14\x25\x9b\x40\xd1\x5b\x48\x04\x60\xc1\x8d\x6f\xee\x40\xe6\xd4\xf5\x01\xdf\x01\xb3\x34\x09\x25\xd3\x50\xcb\x82\xef\x38\x16\x60\x4a\x04\x97\x45\x06\x9f\x0d\x6c\x4f\xc0\x85\x46\x45\x39\x04\x52\x41\x41\xc5\x87\x7e\xe7\x25\x53\x2c\xa7\x8a\xfb\xce\x2a\xd9\x94\x9c\x3a\xa5\xbc\x6a\x0b\xd4\x54\xcf\xed\x06\x61\xe5\x1d\xf0\xb4\x95\x4c\x15\xc0\x44\x01\x0d\xd3\x4e\x80\xac\x6b\x26\x0a\xbb\x9d\x10\xa7\xf3\x6c\xe3\xe0\x82\xc6\x0a\xf3\x01\xaf\xa8\x4e\xe3\xa0\xf3\x52\x6a\x14\xc0\x44\xd4\x6c\x82\xee\x7b\xbc\x77\x1d\xac\x82\x53\xbb\xa0\xc1\xf6\x6e\x6f\x2d\xa8\x68\x8b\x29\x99\x01\x6e\x40\x97\xb2\xad\x0a\x20\xf2\xb4\x8b\x48\xd5\xf7\xda\xb7\xc9\xd4\x10\xd2\xa0\x20\xc7\x30\xe2\x90\x46\x71\x8a\xae\x61\xdb\xce\x8a\x75\x7a\x97\xce\x36\xbf\x93\x0f\xd4\xa9\xfa\x74\xb8\x8d\xd2\xe1\xf6\xcb\xf2\x61\xee\x7f\xad\x3f\xce\xba\x5f\xb3\x55\xb6\xdc\xf8\x8f\x45\x72\x9f\xae\x97\xc9\x2c\xed\xbe\x1f\xe6\xe9\x70\xe2\x46\xbb\x5c\xab\xea\xc0\x45\xf1\x52\x93\x7d\x46\x92\x3e\xb3\xa9\xa9\xb4\x17\x81\x7e\xb4\x66\x26\x2f\xb1\xc8\x44\x81\xcf\xb6\x09\xcf\x84\xf9\x4c\x9d\x29\xe5\xf7\x98\x70\x9b\xf8\x3d\xba\x0d\xdb\x9e\x81\xa2\x94\xa1\x54\x2b\xf0\x19\xe4\xce\x3a\xd6\xb0\xad\x8b\x84\x29\x51\x87\x71\x74\x5d\xdd\x4e\x2a\x72\xb3\x61\x5b\x8b\xc2\x5e\x59\xac\xa0\x4f\x25\x9a\x12\x95\xcf\x1b\x4a\x2e\x16\x6c\xa6\x7d\x60\x28\x0f\x48\xbe\x53\xf8\xc4\xab\x0a\x6a\x76\x70\x51\xf6\xa9\x08\xf8\x8c\x79\x6b\x99\x93\xf4\x0c\x5f\xc9\xce\x10\x91\x92\xf0\x81\x32\x21\xc4\xf7\x3b\xb7\x8c\xb1\xf8\xb8\x5b\x52\xe0\x86\x9d\x54\x35\x33\xd4\xae\xba\xb3\x47\x60\xfb\x83\xa8\xfd\x85\xe9\xa9\xe4\x79\x69\x13\x7f\x8b\x28\xa0\x61\x4a\x63\x41\x27\xf4\x32\x9d\x65\x9f\xf3\x2e\xdf\xd9\x76\x6d\x64\x03\x8d\xd4\xdc\xe2\x25\xfb\x7a\x9d\x59\x78\x2f\x8b\x1c\x7a\x8e\x81\x70\x31\x38\xb2\x8a\x17\x37\x81\x7f\x3a\x07\xbe\xb3\x95\x3d\xed\xc7\x43\x67\xbd\x85\xa4\xaa\xa2\x90\x52\x58\x90\xe5\x65\x10\x7d\x02\xa9\x7d\x8c\xd7\x91\x77\xa3\xfc\x19\x9c\x4a\x17\x1f\xc6\x05\x2a\xca\xb6\xd6\x15\xb9\xf3\x9a\x3f\xce\xdf\x3e\x6f\x87\x65\x35\x6a\xcd\xf6\xd1\x50\x77\xb9\x08\x47\xb4\x61\xca\xcc\x64\x2b\x8c\xcd\xbf\xa1\xa2\xdc\xfe\x45\xa7\x47\x14\x2e\xaa\x23\xc2\x6c\xab\xbb\xe1\x35\x46\x30\xa8\xd9\x3d\x1b\xec\x04\x2e\x65\xf1\x87\xac\x6a\xf5\xab\xcd\xca\x3b\x37\xda\xe7\x8a\xd8\xa7\xee\x0e\x87\x64\x1a\xcd\x76\x66\xba\xe1\x71\x7f\x58\xea\xf3\x97\xa3\xc0\x04\x97\xea\x05\xee\x18\x25\xbf\x0d\x00\x11\xba\x90\xa6\xf4\xb9\x75\x10\xf2\x49\x50\xfc\x67\xeb\xa8\x82\xd1\x3e\xbf\x5e\x43\x89\xac\x32\xe5\x89\xb6\x96\xc8\x94\xd9\x22\x33\x8e\x20\x14\xe6\xc8\x8f\x58\x50\xdd\x51\xb8\x6f\x2b\xa6\x80\x0b\x83\x8a\x7a\x3d\x5b\x7c\x4c\xe9\x0e\x84\xbf\xef\x91\x38\x85\xba\x91\xa2\x20\x04\x46\xda\xd7\x06\xd4\x46\x7b\x10\x1f\xd2\xe4\x6e\xf3\xe1\xd7\x4b\x10\xad\x08\x60\x58\x0e\x19\x24\xe6\xee\xed\x86\x8a\xa9\x84\x25\x7f\xe6\x08\xb3\x4a\xb6\xae\xfc\x71\x0d\xd4\x7c\xf2\xa2\x3b\x6b\x83\x0d\x37\xb0\xb5\x47\x5f\x7c\x6f\xe0\xb7\x16\xd5\xc9\x9e\x2d\x3a\x26\x5a\xd6\xe8\xc3\xe6\x4b\x9a\x42\x8d\xf5\xb6\x42\x0d\x1f\x36\x9b\xe5\xf7\x1a\x7e\xfc\xe1\x07\x1f\xfd\xde\x7f\xe3\xe0\x2d\xf5\xed\xa5\x7d\xdd\xe0\x7a\xc0\xea\xed\xf8\x65\xb5\x9c\x75\x16\x10\x79\x6e\x15\xb2\x83\x7e\x67\x05\x94\xb2\x41\x47\x4d\xcc\xf4\x75\xb4\x33\xdc\xca\xcd\x09\xe8\x96\xe5\x07\xaa\xda\x5c\xa0\x35\x59\xa1\x6e\x6b\x22\x12\xf0\x88\x1c\x12\x8f\x73\x9e\xad\x67\x0f\x8b\x45\x3a\xdb\xd8\x76\xe7\xdc\xcf\x74\xd9\xa2\xd8\x3c\x95\x28\xce\x1d\xcd\xdd\x48\xa3\x64\x8e\x5a\x13\x8f\x74\xcb\x3b\x1f\x2c\xe7\xc9\xc6\xf5\x54\x4e\xae\xbb\xd7\xbb\xe6\xa1\xb3\xdc\xb9\x9d\x86\x84\x34\xa0\xe9\x08\x33\x71\x02\x69\x19\x70\xd7\x2a\x57\x5a\x5c\x1a\x5b\xf9\xa8\x81\x6d\x65\xeb\x5c\xf0\xe4\xa9\x92\x9b\x30\x37\xa5\x3a\x87\x72\x69\xa3\xc7\xf2\xc4\x34\x18\x75\xf2\xf9\xe7\x14\x38\x48\x3b\xc6\x2b\xec\xb3\x46\xc8\x27\x32\x98\xc1\x96\x15\x91\x03\xad\x91\xe9\xd0\x30\x9e\x79\xb0\xc0\xbd\x62\xc5\x10\xe0\xc0\x7f\x15\x3f\x60\x75\x22\xb5\x5b\x0c\x32\x8e\x74\xd7\x7c\x5f\x1a\x1a\xb6\x17\x65\x9f\xaa\xd4\x73\x77\x51\x4b\x7f\x59\x25\x73\xd7\x8f\x5a\xb6\x0a\xdf\x46\xec\x69\x6f\x98\xd6\xa6\x54\xb2\xdd\x97\xa9\xbd\x75\x8d\x5d\xf5\xc2\x67\x9d\xb8\x09\xef\x98\x2c\xa2\x91\x8e\x31\x3f\x74\x67\x26\x22\xbf\xf8\xd1\x26\x7a\xac\xe9\x67\x3f\xa2\xd2\xfc\x8c\xfc\x9c\x86\x97\x67\x2e\x2e\xa0\x0a\x8d\x39\xcd\xc6\x27\x2f\x9f\x20\x3b\x82\x55\xb2\x5a\x56\x4c\x60\xcf\xeb\xb6\x8d\xea\xbf\x1c\xa1\xf6\xbc\x32\x67\x86\x7d\x7b\xb9\x68\xeb\x85\x2c\x50\x7b\xee\xb5\x03\x99\xd0\x46\xb5\x74\xb5\xc1\x22\x9e\x74\x3e\xbd\xbf\xac\x08\x8d\xc2\x23\x97\xad\x5e\x8f\x39\xfd\x62\x3e\xaa\x57\xe7\xa1\x8c\x1f\xae\x5d\x50\x9b\xa4\x28\x14\xea\xa8\x2e\x19\x79\x40\x71\x79\x2f\x1b\x1e\x7a\xec\xd6\x8b\xf7\x06\x6e\xe7\xee\xb8\x38\x44\x7b\xdf\xc2\xea\x1b\x4f\xb6\x56\xfa\xf9\x4b\xed\x37\x5e\x0b\x2e\xee\x78\xaf\x54\xd3\x3d\xcb\xfa\x96\xc0\xe9\x9c\x5e\xa0\xb0\x11\x78\xae\xba\xd5\x21\x82\x23\xd7\x7f\x5b\x3f\x2c\xfe\x08\x88\xf8\x19\xf9\x55\x96\x02\xb1\x61\x87\x32\x3e\xb5\xaf\x52\xfe\x82\xfd\x67\x0f\xdc\xfe\x78\xc4\xa6\xf7\x17\xa8\xe0\xbf\x0d\x2b\x06\x20\xba\xdd\xda\xcf\xbb\x6c\xf1\xf8\x8f\x2f\xc9\xfd\xfc\xa7\x3f\x77\x43\xf3\x64\xf5\x29\x5b\xc4\x63\xb3\x87\xc5\x26\xc9\x16\xe9\xea\xcb\x3a\xdd\x7c\xf9\x35\xb9\xbf\x5b\x8f\x4f\x8d\xc8\x8b\x17\x6c\xd2\xfb\xe5\x1d\x91\xae\x13\xd2\x1f\x81\xe1\x8f\x17\xf7\x67\x96\x8a\x72\x57\x97\xec\x4f\x3f\xfe\x14\xd9\x18\xbf\xd7\xbc\x86\x43\xc7\x5f\x7b\x82\x97\x4d\x17\xf1\xcb\x77\xb6\xcb\x8d\xc1\xeb\xa4\x3b\x74\x2f\x3c\x92\x4d\xbe\x4e\xfe\x13\x00\x00\xff\xff\x5d\xd2\x17\x17\xb5\x1b\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 7093, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
