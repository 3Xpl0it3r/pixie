// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x5f\x8f\xe3\xb6\x11\x7f\xf7\xa7\x98\xcb\x3d\x64\x17\x58\x1c\x82\xa2\x09\x0a\x3f\x55\xb1\x95\x9c\x7a\xbb\x5e\x77\xed\xbd\x34\x28\x0e\x07\x5a\x1c\x5b\x84\x65\x52\x21\x29\xef\xba\xc5\x7d\xf7\x62\x48\x4a\x22\x6d\x6d\xae\x9b\xf6\xcd\xe2\x9f\x99\xdf\xfc\xe1\x6f\x86\x34\x3e\x5b\x94\x1c\xec\xa9\x41\xf8\x7b\x8b\xfa\x04\xff\x9e\x00\xb4\x06\xf5\x14\x1e\x0d\xea\x42\x6e\xd5\x9b\x09\x80\xd2\xbb\x29\xdc\xeb\x5d\xf7\x4d\x2b\x56\x68\xad\x90\x3b\xe3\x57\x76\x5f\xdd\x6c\x66\xad\x16\x9b\xd6\x62\x98\x1f\xbe\x83\x3c\x1a\x34\x53\xf8\x67\xaf\xe6\x13\x4d\x94\x75\x6b\x2c\xea\x2b\xc1\xa7\x50\xcc\xdf\x5c\x4f\x61\xe6\x47\x3a\xcd\x61\xc1\x8f\xa7\x05\x3b\xe0\x95\x64\x07\x9c\xc2\xca\x6a\x21\x77\x2f\x2f\x26\x35\xf1\x4c\xac\x69\xa6\xa4\xc4\xd2\x0a\x25\x2f\x75\x0e\x73\x83\x40\x91\x69\x2b\xb6\xac\xb4\x57\x2c\xfc\x58\x9f\x1a\x9c\x42\x16\x7d\x39\x11\xb7\x45\x37\x44\x1b\x59\x6b\x55\xa9\x0e\x4d\x8d\x16\xaf\x84\x6c\x5a\xdb\xc1\xbe\x81\xb2\xd5\x46\xe9\xa5\x32\x53\x28\xa4\xbd\x01\xe6\x54\x4e\x21\x8b\xf6\x64\x6e\x8c\x84\xdf\x74\xc8\x1f\x8b\x79\x27\xe3\x3a\x5d\xfc\x80\xa6\xad\x2f\xd4\xfe\x24\xb0\xe6\xe7\xba\xb7\x34\x18\x2c\x88\xd6\xe6\xd2\x0a\x7b\xfa\x20\x24\xbf\x99\x00\x00\x68\xfc\xad\x15\x1a\x79\xa6\x77\xb4\x98\x1c\x3a\xbe\xfc\xd3\x0b\xf0\x92\xe5\xab\x76\xb7\x43\x43\x06\x7d\x9a\x4c\x00\xde\xc2\xaa\xd4\xa2\xb1\x87\x9d\x06\x94\xbc\x51\x42\x5a\x73\x03\x1a\xb7\xa8\xc1\x2a\xe0\xaa\x34\x20\x24\x94\xb5\x6a\x39\x6b\xc4\xbb\x46\x2b\xab\x26\x00\xb5\x38\xe2\x47\x81\x4f\x04\xe7\x36\xfc\xbe\x43\xcb\x38\xb3\xcc\x07\xb9\x5b\x31\x53\xd2\xa2\xb4\x26\x8a\xf1\xed\xd9\x14\x2d\x37\x0e\x07\x89\xf3\x88\x52\x61\x7e\x76\x44\xd4\x2a\x99\x78\xe3\x6d\x9a\x63\x53\xab\x13\xec\xf1\x64\x26\x00\xdc\x7d\x1d\x50\xda\x0f\x78\x22\x05\xf3\x78\x20\xd5\x93\xac\x8d\xd4\x24\x5b\x82\x96\x6c\x59\x74\x2a\x58\x23\x82\xec\x6c\x59\x5c\x08\xf5\xb3\x91\x34\xbf\xe8\xcd\xe4\xcb\x64\x12\xb3\xc0\x5d\x6b\x19\x45\xc6\x11\xc1\x4c\x23\xb3\x18\x4e\x43\x72\xba\xe0\xaf\x1c\x1b\x8d\x25\xb3\xc8\xaf\x34\x32\x43\x09\xfb\x4d\x58\x60\x80\x69\x04\xa9\x9e\xa0\x74\x02\x38\x1c\x05\x83\xe6\x39\x58\xf6\xcd\xf5\x04\xe0\xb1\xe1\xcc\xe2\x47\xf1\x2f\xe1\xce\xd9\x56\xec\xae\x42\xe2\x50\xde\x14\xf3\x37\x37\x70\x8c\x26\xa7\x90\x73\x61\xd9\xa6\x4e\xb6\x8c\x1c\x79\x0f\x39\x71\xd5\x85\xe7\x00\xe6\x48\x79\x38\x7f\xc1\xd1\x3f\x2a\x55\x23\x93\x83\x38\xef\xab\xc1\x67\x9d\x00\xff\x3d\xbe\xd3\x1b\x18\x53\xe3\x95\xe9\x19\xb3\x33\x26\x61\xce\xeb\x4b\x26\x5d\xa1\x4d\xc9\xf3\x8a\x45\xbc\x1a\x4b\x89\xf8\xf5\x7a\x8c\x71\x0b\x79\x14\x1e\xce\x15\x1e\x98\xa8\x7b\xd6\x24\x0e\xd0\xc6\x2e\x62\x26\xbd\x81\x9a\x9d\x0d\x5d\x77\x05\x81\xc4\xa4\xf6\x2d\x51\x1f\x84\x31\x42\x49\x73\x45\xd4\xdf\x07\xb0\x4d\x27\x53\xc0\xd1\xc4\x20\x3c\x8e\xe1\xbd\xde\x5d\x29\xbd\x3b\x47\x51\xcc\x07\xed\xf7\x7a\xd7\x3b\x57\xe9\x5d\xaf\x58\x0d\xe3\x83\xd2\x68\x31\xc9\x89\xaa\x99\xd7\xe7\x4d\x5b\xab\x3d\xca\x48\xd8\x75\xaf\x7b\x02\xf0\x80\x47\xb5\xc7\xac\xae\xa3\xb5\x26\x5d\xdc\x67\xc0\x97\xc9\xc4\x1d\xa8\xce\x30\x77\xa0\x42\xa6\x4c\x00\x92\xca\x35\x01\x48\x83\x32\x01\x68\x44\x69\x5b\x9d\xac\x39\xf7\x86\x1f\x1a\x78\x96\x06\x84\xc9\x9a\x46\xab\x23\xf2\x11\x2c\xc5\x3c\x5f\x32\x5b\x39\x28\xc5\x3c\x3f\x17\xd6\x30\x5b\x0d\xdf\xdd\xa6\xe0\xa8\xaf\xe1\x97\xe4\x63\xaf\x9b\xd5\x26\x39\x0a\x82\x23\xa9\x25\x6a\x0a\x08\x88\x93\x62\x07\x75\x81\x71\x4a\x98\x64\xf5\xc9\x8a\xd2\xdc\x37\x56\x51\xb1\x4a\x44\x79\x00\xf1\xe6\x21\xd1\xdd\x76\xab\x5a\xbd\x42\x94\x2f\xed\x73\x15\xf0\x85\xb3\x33\x2e\x60\x7c\xd7\x7f\x85\xb9\x07\x9a\x72\xf2\x99\x33\x03\x4d\x66\xf6\xce\x4c\xe1\xa7\x5a\x31\xeb\xeb\x80\x29\x2f\xc3\xe1\x05\x9d\x09\xd8\x13\x3b\x0d\xc1\x78\x8d\xbc\xd1\x42\xf4\x3f\xe0\x4b\xe4\xfd\x5f\x60\xa2\x6c\x0f\x23\xdd\xc9\xca\x32\x8b\x4e\x41\x96\xaf\x3e\x3f\x2e\x3e\x2c\xee\x7f\x59\x84\xaf\x65\xbe\x98\x17\x8b\x9f\xc3\xd7\xc3\xe3\x62\x31\x7c\xfd\x94\x15\xb7\xf9\x3c\x7c\xac\xf3\x87\xbb\x62\x91\xad\xf3\xf9\xa8\xa6\xa1\xed\xf2\x8a\xb2\x75\xa4\xe8\x2d\x64\x12\x90\x0b\x1b\x3a\x36\x50\x25\xb5\x72\x20\xb6\xc0\x1c\xf7\x41\xc5\x0c\x1c\x14\x17\x5b\x81\x1c\x6c\x85\xe0\xb3\xc8\xe2\xb3\x85\xcd\x09\x84\x34\xa8\x29\x87\x40\x69\xe0\x54\x51\xe8\x77\x59\x31\xcd\x4a\x2a\xa3\xef\x9c\x92\x75\x25\xa8\xfd\x29\xeb\x96\xa3\xa1\x22\xed\x36\x48\x27\x6f\x8f\xa7\x8d\x62\x9a\x03\x93\x1c\x1a\x66\xbc\x00\x75\x38\x30\xc9\xdd\x76\x42\x9c\xcf\x8b\xb5\x87\x0b\x06\x6b\x2c\x07\xbc\xb2\x3e\x8d\x83\x2e\x2b\x65\x50\x02\x93\x49\x07\x09\xa6\x6f\xdc\xde\x75\xb0\xb8\xa0\x1e\xc0\x80\x6b\xc8\xde\x3a\x50\xc9\x16\x5b\x31\x0b\xc2\x82\xa9\x54\x5b\x73\x38\xa8\x23\xba\x45\xa4\xea\x5b\x13\x7a\x5f\xea\xf2\x68\x50\x92\x63\x18\x71\x48\xa3\x05\x45\xd7\xb2\x4d\x67\xc5\x2a\xbf\xcd\x67\xeb\xdf\xc9\x07\x6a\x3f\x43\x3a\x7c\x48\xd2\xe1\xc3\xe7\xe5\xfd\x3c\xfc\x5a\x7d\x9c\x75\xbf\x66\x0f\xc5\x72\x1d\x3e\x16\xd9\x5d\xbe\x5a\x66\xb3\xbc\xfb\xbe\x9f\xe7\xc3\x89\x1b\x6d\x5d\x9d\xaa\xbd\x90\xfc\xa5\xce\xf9\x8c\x24\x43\x66\x53\xa7\xe8\xba\xfb\x7e\xf4\xc0\x6c\x59\x21\x2f\x24\xc7\x67\xd7\x59\x17\xd2\x7e\xa2\x76\x93\xf2\x7b\x4c\xb8\x4b\xfc\x1e\xdd\x9a\x6d\xce\x40\x51\xca\x50\xaa\x71\x7c\x06\xb5\x75\x8e\xb5\x6c\xe3\x23\x61\x2b\x34\x71\x1c\x7d\xab\xb6\x55\x9a\xdc\x6c\xd9\xc6\xa1\x70\xf7\x10\x27\xe8\x97\x0a\x6d\x85\x3a\xe4\x0d\x25\x17\x8b\x36\xd3\x3e\xb0\x94\x07\x24\xdf\x2b\x7c\x12\x75\x0d\x07\xb6\xf7\x51\x0e\xa9\x08\xf8\x8c\x65\xeb\x98\x93\xf4\x0c\x5f\xd9\xd6\x12\x91\x92\xf0\x81\x32\x21\xc6\xf7\x3b\x57\x87\xb1\xf8\xf8\xab\x4f\xe4\x86\xad\xd2\x07\x66\xa9\x07\xf5\x67\x8f\xc0\xf6\x07\xd1\x84\x5b\xd0\x53\x25\xca\xca\x25\xfe\x06\x51\x42\xc3\xb4\x41\x4e\x27\xf4\x32\x9d\x55\x9f\xf3\x3e\xdf\xd9\x66\x65\x55\x03\x8d\x32\xc2\xe1\x25\xfb\x7a\x9d\x45\x7c\xd9\x4a\x1c\x7a\x8e\x81\x70\x31\x38\xb2\x5a\xf0\x9b\xc8\x3f\x9d\x03\xdf\xb9\xca\x9e\xf7\xe3\xb1\xb3\xde\x42\x56\xd7\x49\x48\x29\x2c\xc8\xca\x2a\x8a\x3e\x81\x34\x21\xc6\xab\xc4\xbb\x49\xfe\x0c\x4e\xa5\xdb\x0c\x13\x12\x35\x65\x5b\xeb\x8b\xdc\x79\xcd\x1f\xe7\xef\x90\xb7\xc3\xb2\x03\x1a\xc3\x76\xc9\x50\x77\x63\x88\x47\x8c\x65\xda\xce\x54\x2b\xad\xcb\xbf\xa1\xa2\x7c\xf8\x8b\xc9\x8f\x28\x7d\x54\x47\x84\xb9\xfe\x75\x2d\x0e\x98\xc0\xa0\x0e\xf6\x6c\xb0\x13\xb8\x54\xfc\x0f\x59\xd5\x9a\x57\x9b\x55\x76\x6e\x74\x6f\x10\xa9\x4f\xfd\xc5\x0c\xc9\x34\x9a\xed\xcc\xf4\xc3\xe3\xfe\x70\xd4\x17\x6e\x3c\x91\x09\x3e\xd5\x39\x6e\x19\x25\xbf\x0b\x00\x11\xba\x54\xb6\x0a\xb9\xb5\x97\xea\x49\x52\xfc\x67\xab\xa4\x82\xd1\xbe\xb0\xde\x40\x85\xac\xb6\xd5\x89\xb6\x56\xc8\xb4\xdd\x20\xb3\x9e\x20\x34\x96\x28\x8e\xc8\xa9\xee\x68\xdc\xb5\x35\xd3\x20\xa4\x45\x4d\xbd\x9e\x2b\x3e\xb6\xf2\x07\x22\x5c\xe2\x48\x9c\x46\xd3\x28\xc9\x09\x81\x55\xee\x09\x01\x8d\x35\x01\xc4\xfb\x3c\xbb\x5d\xbf\xff\xf5\x12\x44\x2b\x23\x18\x8e\x43\x06\x89\xa5\x7f\x90\xa1\x62\xaa\x60\x29\x9e\x05\xc2\xac\x56\xad\x2f\x7f\xc2\x00\x35\x9f\x82\x77\x67\x6d\xb0\xe1\x06\x36\xee\xe8\xcb\x6f\x2d\xfc\xd6\xa2\x3e\xb9\xb3\x45\xc7\xc4\xa8\x03\x86\xb0\x85\x92\xa6\xd1\xe0\x61\x53\xa3\x81\xf7\xeb\xf5\xf2\x5b\x03\xdf\x7f\xf7\x5d\x88\x7e\xef\xbf\x71\xf0\x8e\xfa\x76\xca\x3d\x59\x08\x33\x60\x0d\x76\xfc\xfc\xb0\x9c\x75\x16\x10\x79\x6e\x34\xb2\xbd\x79\xe7\x04\x54\xaa\x41\x4f\x4d\xcc\xf6\x75\xb4\x33\xdc\xc9\x2d\x09\xe8\x86\x95\x7b\xaa\xda\x42\xa2\x33\x59\xa3\x69\x0f\x44\x24\x10\x10\x79\x24\x01\xe7\xbc\x58\xcd\xee\x17\x8b\x7c\xb6\x76\xed\xce\xb9\x9f\xe9\x06\x45\xb1\x79\xaa\x50\x9e\x3b\x5a\xf8\x91\x46\xab\x12\x8d\x21\x1e\xe9\x96\x77\x3e\x58\xce\xb3\xb5\xef\xa9\xbc\x5c\x7f\x59\xf7\xcd\x43\x67\xb9\x77\x3b\x0d\x49\x65\xc1\xd0\x11\x66\xf2\x04\xca\x31\xe0\xb6\xd5\xbe\xb4\xf8\x34\x76\xf2\xd1\x00\xdb\xa8\xd6\xbb\xe0\x29\x50\xa5\xb0\x71\x6e\x2a\x7d\x0e\xe5\xd2\xc6\x80\xe5\x89\x19\xb0\xfa\x14\xf2\xcf\x2b\xf0\x90\xb6\x4c\xd4\xd8\x67\x8d\x54\x4f\x64\x30\x83\x0d\xe3\x89\x03\x9d\x91\xf9\xd0\x30\x9e\x79\x90\xe3\x4e\x33\x3e\x04\x38\xf2\x5f\x2d\xf6\x58\x9f\x48\xed\x06\xa3\x8c\x23\xdd\x07\xb1\xab\x2c\x0d\xbb\xdb\x6f\x48\x55\xea\xb9\xbb\xa8\xe5\x3f\x3f\x64\x73\xdf\x8f\x3a\xb6\x8a\x1f\x3c\xdc\x69\x6f\x98\x31\xb6\xd2\xaa\xdd\x55\xb9\xbb\x75\x8d\x5d\xf5\xe2\xb7\x9a\xb4\x09\xef\x98\x2c\xa1\x91\x8e\x31\xdf\x77\x67\x26\x21\xbf\xf4\x25\x26\x79\x81\xe9\x67\x3f\xa2\x36\xe2\x8c\xfc\xbc\x86\x97\x67\x2e\x2e\xa0\x1a\xad\x3d\xcd\xc6\x27\x2f\xdf\x15\x3b\x82\xd5\xaa\x5e\xd6\x4c\x62\xcf\xeb\xae\x8d\xea\xbf\x3c\xa1\xf6\xbc\x32\x67\x96\x7d\x7d\xb9\x6c\x0f\x0b\xc5\xd1\x04\xee\x75\x03\x85\x34\x56\xb7\x74\xb5\x41\x9e\x4e\x7a\x9f\xde\x5d\x56\x84\x46\xe3\x51\xa8\xd6\xac\xc6\x9c\x7e\x31\x9f\xd4\xab\xf3\x50\xa6\xaf\xd1\x3e\xa8\x4d\xc6\xb9\x46\x93\xd4\x25\xab\xf6\x28\x2f\xef\x65\xc3\xeb\x8d\xdb\x7a\xf1\xde\x20\xdc\xdc\xad\x90\xfb\x64\xef\x5b\x78\xf8\xca\x3b\xac\x93\x7e\xfe\xfc\xfa\x95\xd7\x82\x8b\x3b\xde\x2b\xd5\x74\x6f\xad\xa1\x25\xf0\x3a\xa7\x17\x28\x5c\x04\x9e\xeb\x6e\x75\x8c\xe0\x28\xcc\xdf\x56\xf7\x8b\x3f\x02\x22\x7d\x1b\x7e\x95\xa5\x40\x6c\xd8\xa1\x4c\x4f\xed\xab\x94\xbf\x60\xff\xd9\xab\x75\x38\x1e\xa9\xe9\xfd\x05\x2a\xfa\xc3\xc2\x89\x01\x48\x6e\xb7\xee\xf3\xb6\x58\x3c\xfe\xe3\x73\x76\x37\xff\xe1\xcf\xdd\xd0\x3c\x7b\xf8\xa5\x58\xa4\x63\xb3\xfb\xc5\x3a\x2b\x16\xf9\xc3\xe7\x55\xbe\xfe\xfc\x6b\x76\x77\xbb\x1a\x9f\x1a\x91\x97\x2e\x58\xe7\x77\xcb\x5b\x22\x5d\x2f\xa4\x3f\x02\xc3\xbf\x29\xfe\x1f\x2a\x9d\xe4\xae\xa9\xd8\x9f\xbe\xff\x21\xb1\x31\x7d\xaf\x79\x0d\x87\x8e\xbf\xf6\x44\xcf\x95\x3e\xe2\x97\xef\x6c\x97\x1b\xa3\x27\x47\x7f\xe8\x5e\x78\x24\x9b\x7c\x99\xfc\x27\x00\x00\xff\xff\xfc\x5f\x08\x0f\x8a\x1b\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 7050, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
