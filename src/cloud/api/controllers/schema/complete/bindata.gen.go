// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x31\x0a\x02\x31\x10\x45\xfb\x9c\xe2\x6f\xa7\x57\x48\x67\x23\x58\x28\x88\xa5\x58\x0c\xeb\x6c\x0c\x6c\x26\x4b\x66\x14\x17\xf1\xee\x62\x20\xa2\xd8\x0d\x6f\x1e\xef\xf3\xdd\x58\xce\xb0\x79\x62\xec\xaf\x5c\x66\x3c\x1c\x40\xc5\xe2\x40\xbd\xe9\xa2\x5d\x3b\x4a\xec\x71\xb0\x12\x25\x74\x4b\x8f\x55\x33\x36\x32\xe4\xce\x3d\x9d\xab\x89\x1f\x5c\x53\xd1\x38\xa9\xc7\xb1\x7d\xba\xd3\xbf\x5d\xc5\x1b\x17\x8d\x59\x3e\x23\x0e\xe8\x2f\x24\x81\xc7\x1c\xbe\xa1\xc5\xc4\x6a\x94\xa6\xad\x7a\xac\xc7\x4c\xf6\x0e\xbe\x02\x00\x00\xff\xff\xa4\xc1\x10\x47\xc8\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 200, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\x31\x7b\xfb\x70\x0e\x10\x2c\x0e\x45\xef\x50\xf8\xa9\x3a\x5b\xb7\xab\x26\x71\xdc\xd8\xd9\xed\xa1\x58\x2c\x68\x71\x6c\x11\x96\x48\x1d\x49\x39\x71\x8b\xfd\xdf\x8b\x21\xa9\x0f\xda\xca\x6d\x73\xed\x9b\xc5\x8f\x99\xdf\x7c\xf0\x37\x43\x1a\x9f\x2d\x4a\x0e\xf6\x54\x23\xfc\xbd\x41\x7d\x82\x7f\x4f\x00\x1a\x83\x7a\x06\x8f\x06\x75\x26\x77\xea\xcd\x04\x40\xe9\xfd\x0c\xee\xf5\xbe\xfd\xa6\x15\x6b\xb4\x56\xc8\xbd\xf1\x2b\xdb\xaf\x76\x36\xb1\x56\x8b\x6d\x63\x31\xcc\xf7\xdf\x41\x1e\x0d\x9a\x19\xfc\xb3\x53\xf3\x99\x26\xf2\xb2\x31\x16\xf5\x54\xf0\x19\x64\x8b\x37\x57\x33\x98\xfb\x91\x56\x73\x58\xf0\xf3\x69\xc9\x2a\x9c\x4a\x56\xe1\x0c\xd6\x56\x0b\xb9\x7f\x79\x31\xa9\x19\xce\x0c\x35\xcd\x95\x94\x98\x5b\xa1\xe4\xa5\xce\x7e\xae\x17\x28\x12\x6d\xc5\x8e\xe5\x76\xca\xc2\x8f\xcd\xa9\xc6\x19\x24\x83\x2f\x27\xe2\x36\x6b\x87\x68\x23\x6b\xac\xca\x55\x55\x97\x68\x71\x2a\x64\xdd\xd8\x16\xf6\x35\xe4\x8d\x36\x4a\xaf\x94\x99\x41\x26\xed\x35\x30\xa7\x72\x06\xc9\x60\x4f\xe2\xc6\x48\xf8\x75\x8b\xfc\x31\x5b\xb4\x32\xae\xe2\xc5\x0f\x68\x9a\xf2\x42\xed\x2f\x02\x4b\x7e\xae\x7b\x47\x83\xc1\x82\xc1\xda\x54\x5a\x61\x4f\x37\x42\xf2\xeb\x09\x00\x80\xc6\xdf\x1a\xa1\x91\x27\x7a\x4f\x8b\xc9\xa1\xe3\xcb\x3f\xbf\x00\x2f\x5a\xbe\x6e\xf6\x7b\x34\x64\xd0\xe7\xc9\x04\xe0\x2d\xac\x73\x2d\x6a\x5b\xed\x35\xa0\xe4\xb5\x12\xd2\x9a\x6b\xd0\xb8\x43\x0d\x56\x01\x57\xb9\x01\x21\x21\x2f\x55\xc3\x59\x2d\xde\xd5\x5a\x59\x35\x01\x28\xc5\x11\x3f\x0a\x7c\x22\x38\xb7\xe1\xf7\x1d\x5a\xc6\x99\x65\x3e\xc8\xed\x8a\xb9\x92\x16\xa5\x35\x83\x18\xdf\x9e\x4d\xd1\x72\xe3\x70\x90\x38\x8f\x28\x16\xe6\x67\x47\x44\xad\xa3\x89\x37\xde\xa6\x05\xd6\xa5\x3a\xc1\x01\x4f\x66\x02\xc0\xdd\x57\x85\xd2\xde\xe0\x89\x14\x2c\x86\x03\xb1\x9e\x68\xed\x40\x4d\xb4\x25\x68\x49\x56\x59\xab\x82\xd5\x22\xc8\x4e\x56\xd9\x85\x50\x3f\x3b\x90\xe6\x17\xbd\x99\x7c\x9d\x4c\x86\x2c\x70\xd7\x58\x46\x91\x71\x44\x30\xd7\xc8\x2c\x86\xd3\x10\x9d\x2e\xf8\x2b\xc7\x5a\x63\xce\x2c\xf2\xa9\x46\x66\x28\x61\xbf\x0b\x0b\x0c\x30\x8d\x20\xd5\x13\xe4\x4e\x00\x87\xa3\x60\x50\x3f\x07\xcb\xbe\xbb\x9a\x00\x3c\xd6\x9c\x59\xfc\x28\xfe\x25\xdc\x39\xdb\x89\xfd\x34\x24\x0e\xe5\x4d\xb6\x78\x73\x0d\xc7\xc1\xe4\x0c\x52\x2e\x2c\xdb\x96\xd1\x96\x91\x23\xef\x21\x47\xae\xba\xf0\x1c\xc0\x02\x29\x0f\x17\x2f\x38\xfa\x67\xa5\x4a\x64\xb2\x17\xe7\x7d\xd5\xfb\xac\x15\xe0\xbf\xc7\x77\x7a\x03\x87\xd4\x38\x35\x1d\x63\xb6\xc6\x44\xcc\x79\x75\xc9\xa4\x6b\xb4\x31\x79\x4e\xd9\x80\x57\x87\x52\x06\xfc\x7a\x35\xc6\xb8\x99\x3c\x0a\x0f\x67\x8a\x15\x13\x65\xc7\x9a\xc4\x01\xda\xd8\xe5\x90\x49\xaf\xa1\x64\x67\x43\x57\x6d\x41\x20\x31\xb1\x7d\x2b\xd4\x95\x30\x46\x28\x69\xa6\x44\xfd\x5d\x00\x9b\x78\x32\x06\x3c\x98\xe8\x85\x0f\x63\x78\xaf\xf7\x53\xa5\xf7\xe7\x28\xb2\x45\xaf\xfd\x5e\xef\x3b\xe7\x2a\xbd\xef\x14\xab\x7e\xbc\x57\x3a\x58\x4c\x72\xba\x6a\xf6\x75\x32\x71\x99\xdf\x22\x70\x99\x1f\x42\x3a\x01\x88\x4a\xcc\x04\x20\xf6\xde\x04\xa0\x16\xb9\x6d\x74\xb4\xe6\x1c\xb6\x1f\xea\x09\x91\x06\x84\x49\xea\x5a\xab\x23\xf2\x41\xda\xb4\x58\xb2\x45\xba\x62\xb6\x70\x50\xb2\x45\x7a\x2e\xac\x66\xb6\xe8\xbf\xdb\x4d\xc1\xa2\x6f\xe1\x97\xe4\x0c\xaf\x9b\x95\x26\xca\x59\xc1\x91\xd4\x12\x87\x04\x04\x44\x1e\x43\x07\xb5\x1e\x74\x4a\x98\x64\xe5\xc9\x8a\xdc\xdc\xd7\x56\x51\x55\x89\x44\x79\x00\xc3\xcd\x7d\x46\xba\xed\x56\x35\x7a\x8d\x28\x5f\xda\xe7\x4a\xd5\x0b\x49\x3e\x2e\x60\x7c\xd7\x7f\x85\xb9\x03\x1a\x93\xe7\x99\x33\x03\x9f\x25\xf6\xce\xcc\xe0\x97\x52\x31\xeb\x09\xdb\xe4\x97\xe1\xf0\x82\xce\x04\x1c\x88\x46\xfa\x60\xbc\x46\xde\x68\xc5\xf8\x1f\xf0\x45\xf2\xfe\x2f\x30\x51\x36\xd5\x48\x1b\xb1\xb6\xcc\xa2\x53\x90\xa4\xeb\x2f\x8f\xcb\x9b\xe5\xfd\xa7\x65\xf8\x5a\xa5\xcb\x45\xb6\x7c\x1f\xbe\x1e\x1e\x97\xcb\xfe\xeb\x97\x24\xbb\x4d\x17\xe1\x63\x93\x3e\xdc\x65\xcb\x64\x93\x2e\x46\x35\xf5\xfd\x91\x57\x94\x6c\x06\x8a\xde\x42\x22\x01\xb9\xb0\xa1\xb5\x02\x95\x53\xcf\x05\x62\x07\xcc\x91\x14\x14\xcc\x40\xa5\xb8\xd8\x09\xe4\x60\x0b\x04\x9f\x45\x16\x9f\x2d\x6c\x4f\x20\xa4\x41\x4d\x39\x04\x4a\x03\x27\xea\xa7\xdf\x79\xc1\x34\xcb\xa9\xde\xbd\x73\x4a\x36\x85\xa0\x3e\x25\x2f\x1b\x8e\x86\xaa\xa9\xdb\x20\x9d\xbc\x03\x9e\xb6\x8a\x69\x0e\x4c\x72\xa8\x99\xf1\x02\x54\x55\x31\xc9\xdd\x76\x42\x9c\x2e\xb2\x8d\x87\x0b\x06\x4b\xcc\x7b\xbc\xb2\x3c\x8d\x83\xce\x0b\x65\x50\x02\x93\x51\xab\x07\xa6\xeb\xb0\xde\xb5\xb0\xb8\xa0\x62\x6d\xc0\x75\x4e\x6f\x1d\xa8\x68\x8b\x2d\x98\x05\x61\xc1\x14\xaa\x29\x39\x54\xea\x88\x6e\x11\xa9\xfa\xde\x84\x26\x95\xda\x31\x1a\x94\xe4\x18\x46\x1c\x52\x6b\x41\xd1\xb5\x6c\xdb\x5a\xb1\x4e\x6f\xd3\xf9\xe6\x77\xf2\x81\xfa\xc4\x90\x0e\x37\x51\x3a\xdc\x7c\x59\xdd\x2f\xc2\xaf\xf5\xc7\x79\xfb\x6b\xfe\x90\xad\x36\xe1\x63\x99\xdc\xa5\xeb\x55\x32\x4f\xfb\x63\x36\xda\x58\x3a\xf9\x07\x21\xf9\x4b\x7d\xed\x19\x33\x86\x74\xa6\x3e\xce\xf5\xde\xdd\x68\xc5\x6c\x5e\x20\xcf\x24\xc7\x67\xd7\xf7\x66\xd2\x7e\xa6\x66\x90\x92\x7a\x4c\xb8\xcb\xf6\x0e\xdd\x86\x6d\xcf\x40\x51\x9e\x50\x7e\x71\x7c\x06\xb5\x73\xde\xb4\x6c\xeb\xdd\x6f\x0b\x34\xc3\xe0\xf9\x46\x6a\xa7\x34\xf9\xd6\xb2\xad\x43\xe1\x6e\x09\x4e\xd0\xa7\x02\x6d\x81\x3a\x24\x0b\x65\x14\x1b\x6c\xa6\x7d\x60\x29\xf8\x24\xdf\x2b\x7c\x12\x65\x09\x15\x3b\xf8\xd0\x86\xfc\x03\x7c\xc6\xbc\x71\x74\x49\x7a\xfa\xaf\x64\x67\x89\x3d\x49\x78\xcf\x93\x30\xc4\xf7\x3b\x8d\xfd\x58\x7c\xfc\xc5\x64\xe0\x86\x9d\xd2\x15\xb3\xd4\x21\xfa\x03\x47\x60\xbb\xd3\x67\xc2\x1d\xe5\xa9\x10\x79\xe1\xb2\x7d\x8b\x28\xa1\x66\xda\x20\xa7\x63\x79\x99\xc3\xaa\x4b\x74\x9f\xe4\x6c\xbb\xb6\xaa\x86\x5a\x19\xe1\xf0\x92\x7d\x9d\xce\x6c\x78\x15\x8a\x1c\x7a\x8e\x81\x70\x31\x38\xb2\x52\xf0\xeb\x81\x7f\x5a\x07\xbe\x73\xe5\x3c\xed\xc6\x87\xce\x7a\x0b\x49\x59\x46\x21\xa5\xb0\x20\xcb\x8b\x41\xf4\x09\xa4\x09\x31\x5e\x47\xde\x8d\xf2\xa7\x77\x2a\xdd\x35\x98\x90\xa8\x29\xdb\x1a\x5f\xd9\xce\x0b\xfd\x38\x69\x87\xbc\xed\x97\x55\x68\x0c\xdb\x47\x43\x6d\x3f\x3f\x1c\x31\x96\x69\x3b\x57\x8d\xb4\x2e\xff\xfa\x32\x72\xf3\x17\x93\x1e\x51\xfa\xa8\x8e\x08\x73\xdd\xe5\x46\x54\x18\xc1\xa0\xfe\xf2\x6c\xb0\x15\xb8\x52\xfc\x0f\x59\xd5\x98\x57\x9b\x95\xb7\x6e\x74\x2f\x04\xb1\x4f\xfd\xb5\x09\xc9\x34\x9a\x6d\xcd\xf4\xc3\xe3\xfe\x70\x7c\x17\xee\x23\x03\x13\x7c\xaa\x73\xdc\x31\x4a\x7e\x17\x00\x62\x71\xa9\x6c\x11\x72\xeb\x20\xd5\x93\xa4\xf8\xcf\xd7\x51\xd9\xa2\x7d\x61\xbd\x81\x02\x59\x69\x8b\x13\x6d\x2d\x90\x69\xbb\x45\x66\x3d\x41\x68\xcc\x51\x1c\x91\x53\xb1\xd1\xb8\x6f\x4a\xa6\x41\x48\x8b\x9a\x1a\x3c\x57\x71\x6c\xe1\x0f\x44\xb8\x62\x91\x38\x8d\xa6\x56\x92\x13\x02\xab\xdc\x05\x1f\x8d\x35\x01\xc4\x87\x34\xb9\xdd\x7c\xf8\xf5\x12\x44\x23\x07\x30\x1c\x87\xf4\x12\x73\xff\x5c\x42\x15\x54\xc1\x4a\x3c\x0b\x84\x39\x5d\xd9\x1d\x02\x61\x80\x3a\x4e\xc1\xdb\xb3\xd6\xdb\x70\x0d\x5b\x77\xf4\xe5\xf7\x16\x7e\x6b\x50\x9f\xdc\xd9\xa2\x63\x62\x54\x85\x21\x6c\xa1\x8e\x69\x34\x58\x6d\x4b\x34\xf0\x61\xb3\x59\x7d\x6f\xe0\xc7\x1f\x7e\x08\xd1\xef\xfc\x37\x0e\xde\x51\xdf\x5e\xb9\x07\x05\x61\x7a\xac\xc1\x8e\xf7\x0f\xab\x79\x6b\x01\x91\xe7\x56\x23\x3b\x98\x77\x4e\x40\xa1\x6a\xf4\xd4\xc4\x6c\x57\x3c\x5b\xc3\x9d\xdc\x9c\x80\x6e\x59\x7e\xa0\x52\x2d\x24\x3a\x93\x35\x9a\xa6\x22\x22\x81\x80\xc8\x23\x09\x38\x17\xd9\x7a\x7e\xbf\x5c\xa6\xf3\x8d\xeb\x71\xce\xfd\x4c\xf7\x1b\x8a\xcd\x53\x81\xf2\xdc\xd1\xc2\x8f\xd4\x5a\xe5\x68\x0c\xf1\x48\xbb\xbc\xf5\xc1\x6a\x91\x6c\x7c\x23\xe5\xe5\xfa\xab\xb4\xef\x18\x5a\xcb\xbd\xdb\x69\x48\x2a\x0b\x86\x8e\x30\x93\x27\x50\x8e\x01\x77\x8d\xf6\xa5\xc5\xa7\xb1\x93\x8f\x06\xd8\x56\x35\xde\x05\x4f\x81\x2a\x85\x1d\xe6\xa6\xd2\xe7\x50\x2e\x6d\x0c\x58\x9e\x98\x01\xab\x4f\x21\xff\xbc\x02\x0f\x69\xc7\x44\x89\x5d\xd6\x48\xf5\x44\x06\x33\xd8\x32\x1e\x39\xd0\x19\x99\xf6\x5d\xe2\x99\x07\x39\xee\x35\xe3\x7d\x80\x07\xfe\x2b\xc5\x01\xcb\x13\xa9\xdd\xe2\x20\xe3\x48\x77\x25\xf6\x85\xa5\x61\x77\x37\x0d\xa9\x4a\x8d\x76\x1b\xb5\xf4\xfd\x43\xb2\xf0\x4d\xa8\x63\xab\xe1\x73\x84\x3b\xed\x35\x33\xc6\x16\x5a\x35\xfb\x22\x75\x57\xad\xb1\xfb\xdd\xf0\x25\x25\xee\xbc\x5b\x26\x8b\x68\xa4\x65\xcc\x0f\xed\x99\x89\xc8\x2f\x7e\x27\x89\xde\x47\xba\xd9\x8f\xa8\x8d\x38\x23\x3f\xaf\xe1\xe5\x99\x8b\x5b\xa7\x46\x6b\x4f\xf3\xf1\xc9\xcb\x57\xbf\x96\x60\xb5\x2a\x57\x25\x93\xd8\xf1\xba\x6b\xa3\xba\x2f\x4f\xa8\x1d\xaf\x2c\x98\x65\xdf\x5e\x2e\x9b\x6a\xa9\x38\x9a\xc0\xbd\x6e\x20\x93\xc6\xea\x86\xee\x33\xc8\xe3\x49\xef\xd3\xbb\xcb\x8a\x50\x6b\x3c\x0a\xd5\x98\xf5\x98\xd3\x2f\xe6\xa3\x7a\x75\x1e\xca\xf8\xad\xd8\x07\xb5\x4e\x38\xd7\x68\xa2\xba\x64\xd5\x01\xe5\xe5\x65\xac\x7f\x5b\x71\x5b\x2f\x1e\x19\x84\x9b\xbb\x15\xf2\x10\xed\x7d\x0b\x0f\xdf\x78\x25\x75\xd2\xcf\x1f\x47\xbf\xf1\x44\x70\x71\xb1\x7b\xa5\x9a\xf6\x25\x34\xb4\x04\x5e\xe7\xec\x02\x85\x8b\xc0\x73\xd9\xae\x1e\x22\x38\x0a\xf3\xb7\xf5\xfd\xf2\x8f\x80\x88\x5f\x6e\x5f\x65\x29\x10\x1b\xb6\x28\xe3\x53\xfb\x2a\xe5\x2f\xd8\x7f\xf6\xa6\x1c\x8e\x47\x6c\x7a\x77\x6b\x1a\xfc\x9d\xe0\xc4\x00\x44\x57\x5a\xf7\x79\x9b\x2d\x1f\xff\xf1\x25\xb9\x5b\xfc\xf4\xe7\x76\x68\x91\x3c\x7c\xca\x96\xf1\xd8\xfc\x7e\xb9\x49\xb2\x65\xfa\xf0\x65\x9d\x6e\xbe\xfc\x9a\xdc\xdd\xae\xc7\xa7\x46\xe4\xc5\x0b\x36\xe9\xdd\xea\x96\x48\xd7\x0b\xe9\x8e\x40\xff\x5f\x87\xff\xff\x48\x47\xb9\x6b\x0a\xf6\xa7\x1f\x7f\x8a\x6c\x8c\x1f\x69\x5e\xc3\xa1\xe3\x4f\x3c\x83\xc7\x44\x1f\xf1\xcb\xc7\xb5\xcb\x8d\x83\x07\x41\x7f\xe8\x5e\x78\x19\x9b\x7c\x9d\xfc\x27\x00\x00\xff\xff\xe7\xad\xf3\x9e\x28\x1b\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 6952, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
