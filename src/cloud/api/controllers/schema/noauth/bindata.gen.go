// Code generated for package noauth by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package noauth

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\xdd\x8f\xe3\xb6\x11\x7f\xf7\x5f\x31\x97\x7b\xc8\x2e\xb0\x3d\x04\x45\x13\x14\x7e\xaa\x62\xeb\x72\xea\xee\x7a\x5d\xdb\x7b\x69\x10\x1c\x0e\xb4\x34\xb6\x88\x95\x48\x85\xa4\x76\xd7\x2d\xf2\xbf\x17\x43\x52\x12\x29\x6b\x73\x1f\x2d\xfa\x66\xf1\x63\xe6\x37\x1f\x9c\x19\x0e\x8d\xcf\x06\x45\x01\xe6\xd4\x20\xfc\xa3\x45\x75\x82\x7f\xcf\x00\x5a\x8d\x6a\x0e\xf7\x1a\x55\x26\x0e\xf2\xd5\x0c\x40\xaa\xe3\x1c\xee\xd4\xb1\xfb\xa6\x15\x5b\x34\x86\x8b\xa3\x76\x2b\xbb\xaf\x6e\x36\x31\x46\xf1\x7d\x6b\xd0\xcf\x0f\xdf\x9e\x1e\x0d\xea\x39\xfc\xda\xb3\xf9\x40\x13\x79\xd5\x6a\x83\xea\x82\x17\x73\xc8\x96\xaf\x2e\xe7\xb0\x70\x23\x1d\x67\xbf\xe0\xc7\xd3\x8a\xd5\x78\x21\x58\x8d\x73\xd8\x1a\xc5\xc5\xf1\xe5\xc5\xc4\x26\x9c\x09\x39\x2d\xa4\x10\x98\x1b\x2e\xc5\x39\xcf\x61\x6e\x20\xc8\x13\x65\xf8\x81\xe5\xe6\x82\xf9\x1f\xbb\x53\x83\x73\x48\x82\x2f\x4b\xe2\x26\xeb\x86\x68\x23\x6b\x8d\xcc\x65\xdd\x54\x68\xf0\x82\x8b\xa6\x35\x1d\xec\x2b\xc8\x5b\xa5\xa5\x5a\x4b\x3d\x87\x4c\x98\x2b\x60\x96\xe5\x1c\x92\x60\x4f\x62\xc7\x88\xf8\x55\x87\xfc\x3e\x5b\x76\x34\x2e\xe3\xc5\x1b\xd4\x6d\x75\xc6\xf6\x2d\xc7\xaa\x18\xf3\x3e\xd0\xa0\x97\x20\x58\x9b\x0a\xc3\xcd\xe9\x9a\x8b\xe2\x6a\x06\x00\xa0\xf0\xb7\x96\x2b\x2c\x12\x75\xa4\xc5\xa4\xd0\xe9\xe5\x1f\x3e\x03\x9e\x05\xd2\x61\x9c\x01\xbc\x86\x6d\xae\x78\x63\xea\xa3\x02\x14\x45\x23\xb9\x30\xfa\x0a\x14\x1e\x50\x81\x91\x50\xc8\x5c\x03\x17\x90\x57\xb2\x2d\x58\xc3\xdf\x34\x4a\x1a\x39\x03\xa8\xf8\x23\xbe\xe7\xf8\x44\x70\x6e\xfc\xef\x5b\x34\xac\x60\x86\x39\x23\x77\x2b\x16\x52\x18\x14\x46\x07\x36\xbe\x19\x4d\xd1\x72\x6d\x71\x10\x39\x87\x28\x26\xe6\x66\x27\x48\x6d\xa3\x09\x2f\xd3\x12\x9b\x4a\x9e\xe0\x01\x4f\x7a\x06\x50\xd8\xaf\x1a\x85\xb9\xc6\x13\x31\x58\x86\x03\x31\x9f\x68\x6d\xc0\x26\xda\xe2\xb9\x24\xeb\xac\x63\xc1\x1a\xee\x69\x27\xeb\xec\x8c\xa8\x9b\x0d\xa8\xb9\x45\x9e\xcc\xba\x6a\x8f\x5c\xcc\x00\x1a\xfb\x43\x5f\x3c\x70\x51\xcc\xfd\x30\xd9\xf5\x72\x0e\xbf\xba\x2f\x47\x4e\x21\xc9\xca\xa5\x70\x83\x74\x3e\x2c\x6d\x7f\x14\xaf\x3c\xa1\xf7\xa8\xb4\xf5\xe5\xe1\x88\x0e\x1b\x7c\x20\xd8\xc4\xa4\x16\x52\x1c\xf8\x31\x24\x36\xf0\x76\x73\x23\x04\xdb\xde\x68\x9b\x78\x68\x72\xdd\x88\xf0\x12\x0d\xe3\x15\x16\xe3\xad\xb3\xdf\x67\xb3\x30\x38\xde\xb6\x86\xd1\xb4\x8d\x8f\x0b\x85\xcc\xa0\x0f\x12\x51\xd0\x81\xbf\x15\xd8\x28\xcc\x99\xc1\xe2\x42\x21\xd3\x24\xfb\x37\x7e\x81\x06\xa6\x10\x84\x7c\x82\xdc\x12\x28\xe0\x91\x33\x68\x9e\xbd\xc1\xbf\xb9\x9c\x01\xdc\x37\x05\x33\xf8\x9e\xff\x8b\xdb\xf0\x43\x9a\xf0\xe7\x89\x8e\x53\xb6\x7c\x75\x05\x8f\xc1\xe4\x1c\xd2\x82\x1b\xb6\xaf\xa2\x2d\x13\x91\xd0\x41\x8e\x3c\xe8\xcc\xa1\x00\x96\x48\xe7\x73\xf9\x82\xff\xfd\x28\x65\x85\x4c\x0c\xe4\x9c\x0b\x0d\xae\xd4\x11\x70\xdf\xd3\x3b\x9d\x80\x61\xc6\xb8\xd0\x7d\x22\xe9\x84\x89\x12\xca\xe5\x79\x82\xd9\xa2\x89\x73\xca\x05\x0b\xd2\x4d\x48\x25\x48\x3b\x97\x53\x89\x28\x13\x8f\xdc\xc1\xb9\xc0\x9a\xf1\x2a\xf0\xe0\x03\x57\xda\xac\xc2\x04\x73\x05\x15\x1b\x0d\x5d\x76\x79\x92\xc8\xc4\xf2\xad\x51\xd5\x5c\x93\xfb\xeb\x0b\xca\x88\xbd\x01\xdb\x78\x32\x06\x1c\x4c\x0c\xc4\x43\x1b\xde\xa9\xe3\x85\x54\xc7\x31\x8a\x6c\x39\x70\xbf\x53\xc7\x5e\xb9\x52\x1d\x7b\xc6\x72\x18\x1f\x98\x06\x8b\x89\x4e\x90\xe4\x1d\x3f\x27\xda\x4e\x3e\xa0\x08\x88\x5d\xf6\xbc\x67\x00\x1b\x7c\x94\x0f\x98\x54\x55\xb0\x56\xc7\x8b\x03\x0f\xd8\x60\x2d\x1f\xad\xac\x6f\x95\xac\x49\x9c\x40\x3b\xe1\xd2\x38\x32\x39\xd1\x3e\x19\x2c\xae\x00\x05\x89\x55\xf4\x84\xfa\x91\x51\x30\xba\x82\xdc\xee\x0e\x74\x11\x12\xd5\x93\x8e\xbb\x99\x88\x26\x56\xb7\x2e\x39\x0c\xa4\x46\x0b\xa7\x8e\xcf\x98\xd6\xa7\x49\x38\x23\xbb\x43\xf6\x02\x92\x90\xd1\xef\xb3\x99\x0d\x5e\x9d\x13\xd9\xe0\xe5\xd7\xcd\x00\xa2\xe2\x69\x06\x10\x1f\x00\x4a\x06\x3c\x37\xad\x8a\xd6\x8c\x3d\xcf\x0d\x0d\xa9\x9e\x06\xb8\x4e\x9a\x46\xc9\xc7\xc0\x06\x03\x96\x6c\x99\xae\x99\x29\x2d\x94\x6c\x99\x8e\x89\x35\xcc\x94\xc3\x77\xb7\xc9\x3b\xe5\x27\xf0\x17\xb2\x66\x5c\x8c\x29\x3a\xe3\x3b\x44\xac\xd2\x91\x1d\x78\x81\x04\x86\x72\x87\xc7\x45\x39\x23\x54\x5b\x77\x34\x2c\x6b\x26\x58\x75\x32\x3c\xd7\x77\x8d\x91\x54\x45\x45\xa4\x1c\xac\x70\xf3\x10\x6a\xec\x76\x23\x5b\xb5\x45\x14\x2f\xed\xb3\xa5\xd9\x0b\xd1\x6b\x9a\xc0\xf4\xae\xcf\xc2\xdc\x03\x8d\x8b\x85\x91\x8a\x7d\xa2\x4a\xcc\xad\x9e\xc3\xdb\x4a\x32\xe3\x0a\x14\x9d\x9f\x1b\xc9\x11\x1a\x11\x78\xa0\xfc\x30\x18\xe3\x4b\xe8\x4d\x56\x48\xff\x05\xbe\x88\xde\xff\x04\x26\x8a\xb6\x9e\x28\x9b\xb7\x86\x19\xb4\x0c\x92\x74\xfb\xf1\x7e\x75\xbd\xba\xfb\x79\xe5\xbf\xd6\xe9\x6a\x99\xad\x7e\xf2\x5f\x9b\xfb\xd5\x6a\xf8\x7a\x9b\x64\x37\xe9\xd2\x7f\xec\xd2\xcd\x6d\xb6\x4a\x76\xe9\x72\x92\xd3\x70\x1f\x70\x8c\x92\x5d\xc0\xe8\x35\x24\x02\xb0\xe0\xc6\x5f\x25\x40\xe6\x74\xc7\x00\x7e\x00\x66\xb3\x0f\x94\x4c\x43\x2d\x0b\x7e\xe0\x58\x80\x29\x11\x9c\x17\x19\x7c\x36\xb0\x3f\x01\x17\x1a\x15\xf9\x10\x48\x05\x05\x85\x1b\xfa\x9d\x97\x4c\xb1\x9c\x0a\x99\x37\x96\xc9\xae\xe4\x54\x97\xe7\x55\x5b\xa0\xa6\x32\xc9\x6e\x10\x96\xde\x03\x9e\xf6\x92\xa9\x02\x98\x28\xa0\x61\xda\x11\x90\x75\xcd\x44\x61\xb7\x13\xe2\x74\x99\xed\x1c\x5c\xd0\x58\x61\x3e\xe0\x15\xd5\x69\x1a\x74\x5e\x4a\x8d\x02\x98\x88\xae\x36\xa0\xdb\xe3\x11\x35\xed\x7d\xd3\xc1\x2a\x38\x55\x61\x1a\xec\x4d\xe1\xb5\x05\x15\x6d\x31\x25\x33\xc0\x0d\xe8\x52\xb6\x55\x01\x94\x93\xec\x22\x62\xf5\xad\xf6\x97\x32\xba\x7e\xd0\xa0\x20\xc5\x30\x8a\x21\x8d\xe2\x64\x5d\xc3\xf6\x9d\x14\xdb\xf4\x26\x5d\xec\xfe\xc0\x1f\xa8\x7e\xf6\xee\x70\x1d\xb9\xc3\xf5\xc7\xf5\xdd\xd2\xff\xda\xbe\x5f\x74\xbf\x16\x9b\x6c\xbd\xf3\x1f\xab\xe4\x36\xdd\xae\x93\x45\xda\x7d\xdf\x2d\xd3\xe1\xc4\x05\xac\xb6\xbd\x06\x2c\x2b\x57\xbf\x4f\x63\x19\x85\x4e\xef\xd9\x94\x44\x82\xec\x38\x03\xa8\x99\xc9\x4b\x2c\x32\x51\xe0\xb3\xbd\xf2\x65\xc2\x7c\xa0\x7b\x10\xf9\xf7\x14\x71\xeb\xf8\x3d\xba\x1d\xdb\x8f\x40\x91\xcb\x90\xab\x15\xf8\x0c\xf2\x60\x15\x6b\xd8\xde\x59\xc2\x94\xa8\x43\x3b\xba\x62\xf9\x20\x15\xa9\xd9\xb0\xbd\x45\x61\x2f\xc8\x96\xd0\xcf\x25\x9a\x12\x95\xf7\x1b\x72\x2e\x16\x6c\xa6\x7d\x60\xc8\x0f\x88\xbe\x63\xf8\xc4\xab\x0a\x6a\xf6\xe0\xac\xec\x5d\x11\xf0\x19\xf3\xd6\x46\x4e\xe2\x33\x7c\x25\x07\x43\x81\x94\x88\x0f\x21\x13\x42\x7c\xa3\x2b\xf0\x20\xea\x87\x49\xfb\xb8\xfb\x6e\xa0\x86\x83\x54\x35\x33\x74\x0b\x70\x67\x8f\xc0\xf6\x07\x51\xfb\x0a\xe5\xa9\xe4\x79\x69\x1d\x7f\x8f\x28\xa0\x61\x4a\x63\x41\x27\xf4\xdc\x9d\x65\xef\xf3\xce\xdf\xd9\x7e\x6b\x64\x03\x8d\xd4\xdc\xe2\x25\xf9\x7a\x9e\x59\xd8\x05\x88\x14\x3a\xc6\x40\xb8\x18\x3c\xb2\x8a\x17\x57\x81\x7e\x3a\x05\xbe\xb1\xf9\x3e\xed\xc7\x43\x65\xbd\x86\xa4\xaa\x22\x93\x92\x59\x90\xe5\x65\x60\x7d\x02\xa9\xbd\x8d\xb7\x91\x76\x23\xff\x99\x56\x6a\xd0\x49\x08\x34\xfb\x42\x64\xd0\xde\x2b\x3a\xf9\xa8\x20\xe0\x05\x16\x9f\x6b\xd6\x57\x91\x9e\xa4\x02\x21\xad\xdb\xd2\x0d\xb3\x55\x02\x0b\x50\x16\x89\xf3\xdc\x86\x29\xc3\x59\x05\x17\x46\xb5\x78\x49\xcb\x7b\x48\x17\x07\x56\x69\xa4\xdb\x5e\xc9\x74\x52\x14\xd6\x3e\xac\xba\xb5\xc7\x4d\x4f\xd4\x4c\x0b\x29\x0c\xe3\x02\x15\x1d\xb0\xd6\xe5\xf5\x71\xf1\x33\x9d\xb2\xfc\x51\x1d\x96\xd5\xa8\x35\x3b\x46\x43\xdd\x35\x35\x1c\xd1\x86\x29\xb3\x90\xad\x30\xf6\xc8\x0d\x50\xae\xff\xaa\xd3\x47\x14\x4e\xdd\x13\xc4\xec\xa5\x69\xc7\x6b\x8c\x60\xd0\xb5\x69\x34\xd8\x11\x5c\xcb\xe2\xab\xa4\x6a\xf5\x17\x8b\x95\x77\x6a\xb4\xfd\xc0\x58\xa7\xae\x57\x80\x24\x1a\xcd\x76\x62\x76\x2d\x84\x29\x7d\xd8\x68\xef\xaf\xd9\x81\x08\xce\x07\x0b\x3c\x30\xf2\x4a\x6b\x00\xca\x61\x42\x9a\xd2\x1f\xa7\x07\x21\x9f\x04\xb9\xfc\x62\x1b\x25\x6d\xda\xe7\xd7\x6b\x28\x91\x55\xa6\x3c\xd1\xd6\x12\x99\x32\x7b\x64\xde\xb3\x14\xe6\xc8\x1f\xb1\xa0\x54\xab\xf0\xd8\x56\x4c\x01\x17\x06\x15\x95\xb7\x36\xdf\x9a\xd2\xc5\x00\xdf\x39\x20\x72\x0a\x75\x23\x45\x41\x08\x8c\xb4\xed\x3c\xd4\x46\x7b\x10\xef\xd2\xe4\x66\xf7\xee\x97\x73\x10\xad\x08\x60\xd8\xb0\x39\x50\xcc\x5d\x73\x94\xea\x07\x09\x6b\xfe\xcc\x11\x16\x95\x6c\x5d\xc6\xe7\xda\x1f\xaf\x2e\xbc\x0c\x32\x5c\xc1\xde\x46\x3b\xf1\xad\x81\xdf\x5a\x54\x27\x1b\x4e\xe8\x68\x6a\x59\xa3\x37\x9b\xcf\xe2\x0a\x35\xd6\xfb\x0a\x35\xbc\xdb\xed\xd6\xdf\x6a\xf8\xfe\xbb\xef\xbc\xf5\x7b\xfd\x4d\x83\xb7\xd1\xfe\x28\x6d\xfb\x90\xeb\x01\xab\x97\xe3\xa7\xcd\x7a\xd1\x49\x40\xf9\x62\xaf\x90\x3d\xe8\x37\x96\x40\x29\x1b\x74\xd1\x98\x99\xbe\x74\xe8\x04\xb7\x74\x73\x02\xba\x67\xf9\x03\x15\x2a\x5c\xa0\x15\x99\x0e\x7f\x4d\xb1\x05\x3c\x22\x87\xc4\xe3\x5c\x66\xdb\xc5\xdd\x6a\x95\x2e\x76\xb6\xc2\x1b\xeb\x99\xee\x96\x64\x9b\xa7\x12\xc5\x58\xd1\xdc\x8d\x34\x4a\xe6\xa8\x35\x85\xce\x6e\x79\xa7\x83\xf5\x32\xd9\xb9\x32\xd2\xd1\x75\x1d\x22\x57\x2f\x75\x92\x3b\xb5\xd3\x10\x85\x2d\x4d\x47\x98\x89\x13\x48\x1b\xcc\x0e\xad\x72\xd9\xd4\xb9\xb1\xa5\x8f\x1a\xd8\x5e\xb6\x4e\x05\x4f\x3e\xea\x71\x13\xfa\xa6\x54\x63\x28\xe7\x32\x7a\x2c\x4f\x4c\x83\x51\x27\xef\x7f\x8e\x81\x83\x74\xb0\xfd\xb7\xce\x6b\x84\x7c\x22\x81\x19\xec\x59\x11\x29\xd0\x0a\x99\x0e\x35\xf2\x48\x83\x05\x1e\x15\x2b\x06\x03\x07\xfa\xab\xf8\x03\x56\x27\x62\xbb\xc7\xc0\xe3\x88\x77\xcd\x8f\xa5\xa1\x61\xdb\x72\xf1\xae\x4a\xd7\x8c\xce\x6a\xe9\x4f\x9b\x64\xe9\x4a\x70\x1b\xad\xc2\x2e\x9b\x3d\xed\x0d\xd3\xda\x94\x4a\xb6\xc7\x32\x1d\xf5\x1d\x82\xf8\x1d\x34\x08\xe3\x7b\x47\x17\xc9\xa2\x30\xd2\x45\xcc\x77\xdd\x99\x89\x82\x5f\xdc\xfe\x8b\xda\x7e\xfd\xec\xb8\xed\x3a\x3c\x77\xbc\x3c\x73\x76\x13\x57\x68\xcc\x69\x31\x3d\x79\xde\xe3\xef\x02\xac\x92\xd5\xba\x62\x02\xfb\xb8\x6e\x2b\xc7\xfe\xcb\x05\xd4\x3e\xae\x2c\x99\x61\x9f\x5e\x2e\xda\x7a\x25\x0b\xd4\x3e\xf6\xda\x81\x4c\x68\xa3\x5a\xba\xcd\x61\x11\x4f\x3a\x9d\xde\x9e\x67\x84\x46\xe1\x23\x97\xad\xde\x4e\x29\xfd\x6c\x3e\xca\x57\x63\x53\xc6\x2f\x43\xce\xa8\x4d\x52\x14\x0a\x75\x94\x97\x8c\x7c\x40\x71\x7e\x15\x1d\x5a\x86\x76\xeb\x59\xe3\x85\xdb\xb9\x1b\x2e\x1e\xa2\xbd\xaf\x61\xf3\x89\x37\x11\x4b\x7d\xfc\x14\xf2\xa9\xb6\xc9\xf8\x5a\xfb\x85\x6c\xba\x77\x0f\x5f\x12\x38\x9e\xf3\x33\x14\xd6\x02\xcf\x55\xb7\x3a\x44\xf0\xc8\xf5\xdf\xb7\x77\xab\xaf\x01\x11\xbf\xd3\x7c\x91\xa4\xb6\xfc\xea\x50\xc6\xa7\xf6\x8b\x98\xbf\x20\xff\xe8\x05\xc9\x1f\x8f\x58\xf4\xfe\xce\x18\x3c\x1e\x5a\x32\x00\xd1\x85\xde\x7e\xde\x64\xab\xfb\x7f\x7e\x4c\x6e\x97\x3f\xfc\xa5\x1b\x5a\x26\x9b\x9f\xb3\x55\x3c\xb6\xb8\x5b\xed\x92\x6c\x95\x6e\x3e\x6e\xd3\xdd\xc7\x5f\x92\xdb\x9b\xed\xf4\xd4\x04\xbd\x78\xc1\x2e\xbd\x5d\xdf\x50\xd0\x75\x44\xfa\x23\x30\xbc\x6c\xba\xd7\x62\x15\xf9\xae\x2e\xd9\x9f\xbf\xff\x21\x92\x31\x6e\x51\x7d\x49\x0c\x9d\x6e\x70\x05\x3d\x72\x67\xf1\xf3\x86\xe3\xf9\xc6\xa0\xcf\xed\x0e\xdd\x0b\x7d\x41\x67\x7f\xd7\x09\xfe\x93\xc2\xca\x3e\xd4\x90\xe0\xfa\x4d\x57\xb2\xda\xb9\xc9\x7a\x35\x68\x44\x4f\x5f\xab\x6d\x6c\x97\x47\x19\xdc\xbd\x88\x83\x36\x13\x81\x59\xb7\x4d\x23\x95\xd1\x7d\xa7\x37\x6a\x1c\xf6\xef\x5a\xe7\x79\x07\x5e\xe8\x78\xf7\xfe\x36\xbc\xeb\x59\x29\xd6\x61\x5b\x62\x7d\xfd\x71\x93\xee\xd2\xd5\x2e\xbb\x5b\x0d\x55\x7a\xd0\x18\x9f\x14\xfc\x91\x55\x2d\x9e\x07\xba\xe1\xb1\xcf\xee\xea\x1b\xee\xd1\x7b\xde\x36\x2f\xb1\x66\x61\xe7\xf5\x7c\x76\x92\xe9\xa4\x7e\xcf\x0c\xff\x15\xd8\x5f\x26\xa0\x47\x72\x4c\xad\xf1\x92\xbc\x06\xca\x6e\x83\x9d\x62\x27\x1a\xb5\xef\x3f\x23\x72\x4d\x78\xd2\xc1\x16\xf2\x22\x3f\x6d\xfb\xec\x37\x7e\xfd\x18\xfd\x0d\x22\x5b\xba\x94\xea\x9e\x67\xc7\x7d\xfb\x35\x15\xdc\x66\xa2\x82\x79\xe1\x99\xf4\xff\x8d\xfa\x3c\x82\x4e\x4b\x92\xb7\xda\xc8\x3a\x7d\xa6\xe3\x73\xbf\xb9\x09\x0e\xdb\xb4\x8c\xb1\xbd\xa7\x84\xfc\xac\x86\xd9\x48\xb0\x09\xb9\xce\xc5\x9a\x90\x6a\x42\xa8\x3f\x90\xe9\xf7\xd9\x7f\x02\x00\x00\xff\xff\x4f\xc0\xa8\xab\xc5\x23\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 9157, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
