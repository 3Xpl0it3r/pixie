// Code generated for package noauth by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package noauth

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\xdf\x8f\xdb\x36\xf2\x7f\xf7\x5f\x31\x69\x1e\xba\x0b\xec\x37\x28\xbe\xb8\x16\x07\x3f\x9d\x6a\x2b\x8d\x2e\xbb\x5e\x9f\xed\x4d\xaf\x28\x82\x80\x96\xc6\x16\xb1\x12\xa9\x92\x94\x77\x7d\x87\xfe\xef\x87\x21\x29\x89\x94\xb5\x4d\xd2\xbb\x37\x8b\x3f\x66\x3e\xf3\x83\x33\xc3\xa1\xf1\xd9\xa0\x28\xc0\x9c\x1b\x84\x7f\xb4\xa8\xce\xf0\xef\x19\x40\xab\x51\xcd\xe1\x41\xa3\xca\xc4\x41\xbe\x9a\x01\x48\x75\x9c\xc3\xbd\x3a\x76\xdf\xb4\x62\x8b\xc6\x70\x71\xd4\x6e\x65\xf7\xd5\xcd\x26\xc6\x28\xbe\x6f\x0d\xfa\xf9\xe1\xdb\xd3\xa3\x41\x3d\x87\x5f\x7b\x36\x1f\x69\x22\xaf\x5a\x6d\x50\x5d\xf1\x62\x0e\xd9\xf2\xd5\xf5\x1c\x16\x6e\xa4\xe3\xec\x17\xfc\x78\x5e\xb1\x1a\xaf\x04\xab\x71\x0e\x5b\xa3\xb8\x38\xbe\xbc\x98\xd8\x84\x33\x21\xa7\x85\x14\x02\x73\xc3\xa5\xb8\xe4\x39\xcc\x0d\x04\x79\xa2\x0c\x3f\xb0\xdc\x5c\x31\xff\x63\x77\x6e\x70\x0e\x49\xf0\x65\x49\xdc\x66\xdd\x10\x6d\x64\xad\x91\xb9\xac\x9b\x0a\x0d\x5e\x71\xd1\xb4\xa6\x83\x7d\x03\x79\xab\xb4\x54\x6b\xa9\xe7\x90\x09\x73\x03\xcc\xb2\x9c\x43\x12\xec\x49\xec\x18\x11\xbf\xe9\x90\x3f\x64\xcb\x8e\xc6\x75\xbc\x78\x83\xba\xad\x2e\xd8\xbe\xe5\x58\x15\x63\xde\x07\x1a\xf4\x12\x04\x6b\x53\x61\xb8\x39\xbf\xe7\xa2\xb8\x99\x01\x00\x28\xfc\xad\xe5\x0a\x8b\x44\x1d\x69\x31\x29\x74\x7a\xf9\xc7\x2f\x80\x67\x81\x74\x18\x67\x00\xaf\x61\x9b\x2b\xde\x98\xfa\xa8\x00\x45\xd1\x48\x2e\x8c\xbe\x01\x85\x07\x54\x60\x24\x14\x32\xd7\xc0\x05\xe4\x95\x6c\x0b\xd6\xf0\x37\x8d\x92\x46\xce\x00\x2a\x7e\xc2\x0f\x1c\x9f\x08\xce\xad\xff\x7d\x87\x86\x15\xcc\x30\x67\xe4\x6e\xc5\x42\x0a\x83\xc2\xe8\xc0\xc6\xb7\xa3\x29\x5a\xae\x2d\x0e\x22\xe7\x10\xc5\xc4\xdc\xec\x04\xa9\x6d\x34\xe1\x65\x5a\x62\x53\xc9\x33\x3c\xe2\x59\xcf\x00\x0a\xfb\x55\xa3\x30\xef\xf1\x4c\x0c\x96\xe1\x40\xcc\x27\x5a\x1b\xb0\x89\xb6\x78\x2e\xc9\x3a\xeb\x58\xb0\x86\x7b\xda\xc9\x3a\xbb\x20\xea\x66\x03\x6a\x6e\x91\x27\xb3\xae\xda\x23\x17\x33\x80\xc6\xfe\xd0\x57\x8f\x5c\x14\x73\x3f\x4c\x76\xbd\x9e\xc3\xaf\xee\xcb\x91\x53\x48\xb2\x72\x29\xdc\x20\x9d\x0f\x4b\xdb\x1f\xc5\x1b\x4f\xe8\x03\x2a\x6d\x7d\x79\x38\xa2\xc3\x06\x1f\x08\x36\x31\xa9\x85\x14\x07\x7e\x0c\x89\x0d\xbc\xdd\xdc\x08\xc1\xb6\x37\xda\x26\x1e\x9a\x5c\x37\x22\x3c\xde\x32\xfb\x7d\x36\x0b\x83\xe2\x5d\x6b\x18\x4d\xdb\xb8\xb8\x50\xc8\x0c\xfa\xe0\x10\x05\x1b\xf8\x5b\x81\x8d\xc2\x9c\x19\x2c\xae\x14\x32\x4d\x32\x7f\xe3\x17\x68\x60\x0a\x41\xc8\x27\xc8\x2d\x81\x02\x4e\x9c\x41\xf3\xec\x0d\xfd\xcd\xf5\x0c\xe0\xa1\x29\x98\xc1\x0f\xfc\x5f\xdc\x86\x1d\xd2\x80\x3f\x47\x74\x8c\xb2\xe5\xab\x1b\x38\x05\x93\x73\x48\x0b\x6e\xd8\xbe\x8a\xb6\x4c\x44\x40\x07\x39\xf2\x9c\x0b\x47\x02\x58\x22\x9d\xcb\xe5\x0b\x7e\xf7\xa3\x94\x15\x32\x31\x90\x73\xae\x33\xb8\x50\x47\xc0\x7d\x4f\xef\x74\x02\x86\x99\xe2\x4a\xf7\x09\xa4\x13\x26\x4a\x24\xd7\x97\x89\x65\x8b\x26\xce\x25\x57\x2c\x48\x33\x21\x95\x20\xdd\x5c\x4f\x25\xa0\x4c\x9c\xb8\x83\x73\x85\x35\xe3\x55\xe0\xb9\x07\xae\xb4\x59\x85\x89\xe5\x06\x2a\x36\x1a\xba\xee\xf2\x23\x91\x89\xe5\x5b\xa3\xaa\xb9\x26\xb7\xd7\x57\x94\x09\x7b\x03\xb6\xf1\x64\x0c\x38\x98\x18\x88\x87\x36\xbc\x57\xc7\x2b\xa9\x8e\x63\x14\xd9\x72\xe0\x7e\xaf\x8e\xbd\x72\xa5\x3a\xf6\x8c\xe5\x30\x3e\x30\x0d\x16\x13\x9d\x20\xb9\x3b\x7e\x4e\xb4\x9d\x7c\x44\x11\x10\xbb\xee\x79\xcf\x00\x36\x78\x92\x8f\x98\x54\x55\xb0\x56\xc7\x8b\x03\x0f\xd8\x60\x2d\x4f\x56\xd6\xb7\x4a\xd6\x24\x4e\xa0\x9d\x70\x69\x1c\x91\x9c\x68\x9f\x0d\x12\x37\x80\x82\xc4\x2a\x7a\x42\xfd\xc8\x28\x08\xdd\x40\x6e\x77\x07\xba\x08\x89\xea\x49\xc7\xdd\x4c\x44\x11\xab\x5b\x97\x14\x06\x52\xa3\x85\x21\xad\xdf\x67\x33\x1b\x53\x3a\xdb\xda\x98\xe2\x09\xcd\x00\xa2\x5a\x66\x06\x10\xfb\x25\xc5\x66\x9e\x9b\x56\x45\x6b\xc6\x0e\xe1\x86\x86\xcc\x4b\x03\x5c\x27\x4d\xa3\xe4\x29\x50\xcd\x80\x25\x5b\xa6\x6b\x66\x4a\x0b\x25\x5b\xa6\x63\x62\x0d\x33\xe5\xf0\xdd\x6d\xf2\xbe\xf2\x19\xfc\x85\xac\x19\x17\x63\x8a\xce\x26\x0e\x11\xab\x74\xa4\x6a\x5e\x20\x81\xa1\x50\xee\x71\x51\x08\x0f\xd5\xd6\x79\xac\x65\xcd\x04\xab\xce\x86\xe7\xfa\xbe\x31\x92\x8a\x9a\x88\x94\x83\x15\x6e\x1e\x22\x80\xdd\x6e\x64\xab\xb6\x88\xe2\xa5\x7d\xb6\x52\x7a\x21\xa8\x4c\x13\x98\xde\xf5\x45\x98\x7b\xa0\x71\xee\x1e\xa9\xd8\xe7\x8f\xc4\xdc\xe9\x39\xbc\xad\x24\x33\xae\x5e\xd0\xf9\xa5\x91\x1c\xa1\x11\x81\x47\x0a\xdb\x83\x31\xbe\x86\xde\x64\xc1\xf2\x5f\xe0\x8b\xe8\xfd\x4f\x60\xa2\x68\xeb\x89\x2a\x76\x6b\x98\x41\xcb\x20\x49\xb7\x9f\x1e\x56\xef\x57\xf7\x3f\xaf\xfc\xd7\x3a\x5d\x2d\xb3\xd5\x4f\xfe\x6b\xf3\xb0\x5a\x0d\x5f\x6f\x93\xec\x36\x5d\xfa\x8f\x5d\xba\xb9\xcb\x56\xc9\x2e\x5d\x4e\x72\x1a\xca\x73\xc7\x28\xd9\x05\x8c\x5e\x43\x22\x00\x0b\x6e\x7c\x65\x0f\x32\xa7\x92\x1f\xf8\x01\x98\x4d\x0a\x50\x32\x0d\xb5\x2c\xf8\x81\x63\x01\xa6\x44\x70\x5e\x64\xf0\xd9\xc0\xfe\x0c\x5c\x68\x54\xe4\x43\x20\x15\x14\x94\x6a\xe9\x77\x5e\x32\xc5\x72\xaa\x2f\xde\x58\x26\xbb\x92\x53\x99\x9c\x57\x6d\x81\x9a\xaa\x17\xbb\x41\x58\x7a\x8f\x78\xde\x4b\xa6\x0a\x60\xa2\x80\x86\x69\x47\x40\xd6\x35\x13\x85\xdd\x4e\x88\xd3\x65\xb6\x73\x70\x41\x63\x85\xf9\x80\x57\x54\xe7\x69\xd0\x79\x29\x35\x0a\x60\x22\xba\x69\x80\x6e\x8f\x47\xd4\xb4\xf7\x4d\x07\xab\xe0\x54\x1c\x69\xb0\x85\xfb\x6b\x0b\x2a\xda\x62\x4a\x66\x80\x1b\xd0\xa5\x6c\xab\x02\x28\x55\xd8\x45\xc4\xea\x5b\xed\xef\x48\x74\x1b\xa0\x41\x41\x8a\x61\x14\x43\x1a\xc5\xc9\xba\x86\xed\x3b\x29\xb6\xe9\x6d\xba\xd8\xfd\x81\x3f\x50\x39\xeb\xdd\xe1\x7d\xe4\x0e\xef\x3f\xad\xef\x97\xfe\xd7\xf6\xc3\xa2\xfb\xb5\xd8\x64\xeb\x9d\xff\x58\x25\x77\xe9\x76\x9d\x2c\xd2\xee\xfb\x7e\x99\x0e\x27\x2e\x60\xb5\xed\x35\x60\x59\xb9\x72\x7a\x1a\xcb\x28\x74\x7a\xcf\xa6\xe4\x11\x24\xad\x19\x40\xcd\x4c\x5e\x62\x91\x89\x02\x9f\xed\x0d\x2c\x13\xe6\x23\x5d\x4b\xc8\xbf\xa7\x88\x5b\xc7\xef\xd1\xed\xd8\x7e\x04\x8a\x5c\x86\x5c\xad\xc0\x67\x90\x07\xab\x58\xc3\xf6\xce\x12\xa6\x44\x1d\xda\xd1\xd5\xb0\x07\xa9\x48\xcd\x86\xed\x2d\x0a\x7b\x5f\xb5\x84\x7e\x2e\xd1\x94\xa8\xbc\xdf\x90\x73\xb1\x60\x33\xed\x03\x43\x7e\x40\xf4\x1d\xc3\x27\x5e\x55\x50\xb3\x47\x67\x65\xef\x8a\x80\xcf\x98\xb7\x36\x72\x12\x9f\xe1\x2b\x39\x18\x0a\xa4\x44\x7c\x08\x99\x10\xe2\x1b\xdd\x48\x07\x51\x3f\x4e\xda\xc7\x5d\x3f\x03\x35\x1c\xa4\xaa\x99\xa1\xe2\xdc\x9d\x3d\x02\xdb\x1f\x44\xed\x0b\x87\xa7\x92\xe7\xa5\x75\xfc\x3d\xa2\x80\x86\x29\x8d\x05\x9d\xd0\x4b\x77\x96\xbd\xcf\x3b\x7f\x67\xfb\xad\x91\x0d\x34\x52\x73\x8b\x97\xe4\xeb\x79\x66\xe1\xa5\x3c\x52\xe8\x18\x03\xe1\x62\x70\x62\x15\x2f\x6e\x02\xfd\x74\x0a\x7c\x63\xf3\x7d\xda\x8f\x87\xca\x7a\x0d\x49\x55\x45\x26\x25\xb3\x20\xcb\xcb\xc0\xfa\x04\x52\x7b\x1b\x6f\x23\xed\x46\xfe\x33\xad\xd4\xe0\x62\x1f\x68\xf6\x85\xc8\xa0\xbd\x57\x74\xf2\x51\x41\xc0\x0b\x2c\xbe\xd4\xac\xaf\x22\x3d\x49\x05\x42\x5a\xb7\xa5\x0b\x5f\xab\x04\x16\xa0\x2c\x12\xe7\xb9\x0d\x53\x86\xb3\x0a\xae\x8c\x6a\xf1\x9a\x96\xf7\x90\xae\x0e\xac\xd2\x48\x97\xb0\x92\xe9\xa4\x28\xac\x7d\x58\x75\x67\x8f\x9b\x9e\xa8\x99\xe8\xa2\xcf\xb8\x40\x45\x07\xac\x75\x79\x7d\x5c\xfc\x4c\xa7\x2c\x7f\x54\x87\x65\x35\x6a\xcd\x8e\xd1\x50\x77\x7b\x0c\x47\xb4\x61\xca\x2c\x64\x2b\x8c\x3d\x72\x03\x94\xf7\x7f\xd5\xe9\x09\x85\x53\xf7\x04\x31\x7b\x97\xd9\xf1\x1a\x23\x18\x74\x9b\x19\x0d\x76\x04\xd7\xb2\xf8\x53\x52\xb5\xfa\xab\xc5\xca\x3b\x35\xda\xf6\x5c\xac\x53\x77\x75\x47\x12\x8d\x66\x3b\x31\xbb\x1b\xfd\x94\x3e\x6c\xb4\xf7\xb7\xdf\x40\x04\xe7\x83\x05\x1e\x18\x79\xa5\x35\x00\xe5\x30\x21\x4d\xe9\x8f\xd3\xa3\x90\x4f\x82\x5c\x7e\xb1\x8d\x92\x36\xed\xf3\xeb\x35\x94\xc8\x2a\x53\x9e\x69\x6b\x89\x4c\x99\x3d\x32\xef\x59\x0a\x73\xe4\x27\x2c\x28\xd5\x2a\x3c\xb6\x15\x53\xc0\x85\x41\x45\xe5\xad\xcd\xb7\xa6\x74\x31\xc0\x5f\xe8\x89\x9c\x42\xdd\x48\x51\x10\x02\x23\x6d\x77\x0d\xb5\xd1\x1e\xc4\xbb\x34\xb9\xdd\xbd\xfb\xe5\x12\x44\x2b\x02\x18\x36\x6c\x0e\x14\x73\xd7\xab\xa4\xfa\x41\xc2\x9a\x3f\x73\x84\x45\x25\x5b\x97\xf1\xb9\xf6\xc7\xab\x0b\x2f\x83\x0c\x37\xb0\xb7\xd1\x4e\x7c\x6b\xe0\xb7\x16\xd5\xd9\x86\x13\x3a\x9a\x5a\xd6\xe8\xcd\xe6\xb3\xb8\x42\x8d\xf5\xbe\x42\x0d\xef\x76\xbb\xf5\xb7\x1a\xbe\xff\xee\x3b\x6f\xfd\x5e\x7f\xd3\xe0\x6d\xb4\x3f\x4a\xdb\xcd\xe3\x7a\xc0\xea\xe5\xf8\x69\xb3\x5e\x74\x12\x50\xbe\xd8\x2b\x64\x8f\xfa\x8d\x25\x50\xca\x06\x5d\x34\x66\xa6\x2f\x1d\x3a\xc1\x2d\xdd\x9c\x80\xee\x59\xfe\x48\x85\x0a\x17\x68\x45\xa6\xc3\x5f\x53\x6c\x01\x8f\xc8\x21\xf1\x38\x97\xd9\x76\x71\xbf\x5a\xa5\x8b\x9d\xad\xf0\xc6\x7a\xa6\x2b\x1f\xd9\xe6\xa9\x44\x31\x56\x34\x77\x23\x8d\x92\x39\x6a\x4d\xa1\xb3\x5b\xde\xe9\x60\xbd\x4c\x76\xae\x8c\x74\x74\x5d\xe3\xc6\xd5\x4b\x9d\xe4\x4e\xed\x34\x44\x61\x4b\xd3\x11\x66\xe2\x0c\xd2\x06\xb3\x43\xab\x5c\x36\x75\x6e\x6c\xe9\xa3\x06\xb6\x97\xad\x53\xc1\x93\x8f\x7a\xdc\x84\xbe\x29\xd5\x18\xca\xa5\x8c\x1e\xcb\x13\xd3\x60\xd4\xd9\xfb\x9f\x63\xe0\x20\x1d\x18\xaf\xb0\xf7\x1a\x21\x9f\x48\x60\x06\x7b\x56\x44\x0a\xb4\x42\xa6\x43\x8d\x3c\xd2\x60\x81\x47\xc5\x8a\xc1\xc0\x81\xfe\x2a\xfe\x88\xd5\x99\xd8\xee\x31\xf0\x38\xe2\x5d\xf3\x63\x69\x68\xd8\x76\x42\xbc\xab\xd2\x35\xa3\xb3\x5a\xfa\xd3\x26\x59\xba\x12\xdc\x46\xab\xb0\xf9\x65\x4f\x7b\xc3\xb4\x36\xa5\x92\xed\xb1\x4c\x47\xed\x80\x20\x7e\x07\x7d\xbb\xf8\xde\xd1\x45\xb2\x28\x8c\x74\x11\xf3\x5d\x77\x66\xa2\xe0\x17\x77\xe5\xa2\x6e\x5c\x3f\x3b\xee\x82\x0e\xaf\x0f\x2f\xcf\x5c\xdc\xc4\x15\x1a\x73\x5e\x4c\x4f\x5e\xb6\xdc\xbb\x00\xab\x64\xb5\xae\x98\xc0\x3e\xae\xdb\xca\xb1\xff\x72\x01\xb5\x8f\x2b\x4b\x66\xd8\xe7\x97\x8b\xb6\x5e\xc9\x02\xb5\x8f\xbd\x76\x20\x13\xda\xa8\x96\x6e\x73\x58\xc4\x93\x4e\xa7\x77\x97\x19\xa1\x51\x78\xe2\xb2\xd5\xdb\x29\xa5\x5f\xcc\x47\xf9\x6a\x6c\xca\xf8\xa1\xc6\x19\xb5\x49\x8a\x42\xa1\x8e\xf2\x92\x91\x8f\x28\x2e\xaf\xa2\x43\x27\xcf\x6e\xbd\x68\xbc\x70\x3b\x77\xcb\xc5\x63\xb4\xf7\x35\x6c\x3e\xf3\x44\x61\xa9\x8f\x5f\x26\x3e\xd7\x36\x19\x5f\x6b\xbf\x92\x4d\xf7\x0c\xe1\x4b\x02\xc7\x73\x7e\x81\xc2\x5a\xe0\xb9\xea\x56\x87\x08\x4e\x5c\xff\x7d\x7b\xbf\xfa\x33\x20\xe2\x67\x93\xaf\x92\xd4\x96\x5f\x1d\xca\xf8\xd4\x7e\x15\xf3\x17\xe4\x1f\x3d\xe8\xf8\xe3\x11\x8b\xde\xdf\x19\x83\xb7\x3c\x4b\x06\x20\xba\xd0\xdb\xcf\xdb\x6c\xf5\xf0\xcf\x4f\xc9\xdd\xf2\x87\xbf\x74\x43\xcb\x64\xf3\x73\xb6\x8a\xc7\x16\xf7\xab\x5d\x92\xad\xd2\xcd\xa7\x6d\xba\xfb\xf4\x4b\x72\x77\xbb\x9d\x9e\x9a\xa0\x17\x2f\xd8\xa5\x77\xeb\x5b\x0a\xba\x8e\x48\x7f\x04\x86\x87\x46\xf7\x78\xab\x22\xdf\xd5\x25\xfb\xff\xef\x7f\x88\x64\x8c\x5b\x54\x5f\x13\x43\xa7\x1b\x5c\x41\xeb\xda\x59\xfc\xb2\xe1\x78\xb9\x31\x68\x3f\xbb\x43\xf7\x42\x5f\xd0\xd9\xdf\x35\x68\xff\x4f\x61\x65\xdf\x4f\x48\x70\xfd\xa6\x2b\x59\xed\xdc\x64\xbd\x1a\xf4\x87\xa7\xaf\xd5\x36\xb6\xcb\xa3\x0c\xee\x5e\xc4\x41\x9b\x89\xc0\xac\xdb\xa6\x91\xca\xe8\xbe\xc3\x1b\x35\x0e\xfb\x67\xa6\xcb\xbc\x03\x2f\x34\xa2\x7b\x7f\x1b\x9e\xd9\xac\x14\xeb\xb0\x2d\xb1\x7e\xff\x69\x93\xee\xd2\xd5\x2e\xbb\x5f\x0d\x55\x7a\xd0\xaf\x9e\x14\xfc\xc4\xaa\x16\x2f\x03\xdd\xf0\xf6\x66\x77\xf5\x7d\xf0\xe8\x79\x6d\x9b\x97\x58\xb3\xb0\xf3\x7a\x39\x3b\xc9\x74\x52\xbf\x17\x86\xff\x13\xd8\x5f\x26\xa0\x47\x72\x4c\xad\xf1\x92\xbc\x06\xca\x6e\x83\x9d\x62\x27\x1a\xb5\xed\xbf\x20\x72\x4d\x78\xd2\xc1\x16\xf2\x22\x3f\x6f\xfb\xec\x37\x7e\x94\x18\xfd\x2b\x21\x5b\xfa\x3f\x23\x4c\x84\x61\xf7\x82\x3a\x4a\xe9\xad\x36\xb2\x4e\x9f\xc9\x11\x1f\x36\xb7\xa1\x27\xc5\x4a\x9a\x92\xe7\x8b\xba\x4c\x23\x19\x26\x44\xb8\x94\x60\x42\x80\x09\xfc\x7f\x08\xff\x3f\x01\x00\x00\xff\xff\x62\x0d\x3f\x54\x89\x22\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 8841, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
