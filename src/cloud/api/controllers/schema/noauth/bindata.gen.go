// Code generated for package noauth by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package noauth

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x5f\x8f\xe3\xb6\x11\x7f\xf7\xa7\x98\xcb\x3d\xc4\x0b\x2c\x0e\x41\xd1\x04\xc5\x3e\x55\xb1\x75\x39\xf5\x76\xbd\xee\xda\x77\x69\x50\x1c\x0e\xb4\x38\xb6\x08\xcb\xa4\x42\x52\xbb\xeb\x16\xf9\xee\xc5\x90\x94\x44\xca\xda\x5e\x2e\xed\x9b\xc5\x3f\x33\xbf\xf9\xf7\xe3\x90\xc6\x67\x8b\x92\x83\x3d\x37\x08\x7f\x6f\x51\x9f\xe1\xdf\x33\x80\xd6\xa0\xbe\x81\x0f\x06\x75\x21\xf7\xea\xd5\x0c\x40\xe9\xc3\x0d\xdc\xeb\x43\xf7\x4d\x2b\x36\x68\xad\x90\x07\xe3\x57\x76\x5f\xdd\x6c\x66\xad\x16\xbb\xd6\x62\x98\x1f\xbe\x83\x3c\x1a\x34\x37\xf0\xcf\x5e\xcd\x27\x9a\x28\xeb\xd6\x58\xd4\x73\xc1\x6f\xa0\x58\xbe\xba\xba\x81\x85\x1f\xe9\x34\x87\x05\x3f\x9e\x57\xec\x84\x73\xc9\x4e\x78\x03\x1b\xab\x85\x3c\xbc\xbc\x98\xd4\xc4\x33\xb1\xa6\x85\x92\x12\x4b\x2b\x94\xbc\xd4\x39\xcc\x0d\x02\x45\xa6\xad\xd8\xb3\xd2\xce\x59\xf8\xb1\x3d\x37\x78\x03\x59\xf4\xe5\x44\xdc\x16\xdd\x10\x6d\x64\xad\x55\xa5\x3a\x35\x35\x5a\x9c\x0b\xd9\xb4\xb6\x83\x7d\x0d\x65\xab\x8d\xd2\x6b\x65\x6e\xa0\x90\xf6\x1a\x98\x53\x79\x03\x59\xb4\x27\x73\x63\x24\xfc\xba\x43\xfe\xa1\x58\x76\x32\xae\xd2\xc5\x0f\x68\xda\xfa\x42\xed\x5b\x81\x35\x1f\xeb\xde\xd3\x60\xb0\x20\x5a\x9b\x4b\x2b\xec\xf9\xbd\x90\xfc\x7a\x06\x00\xa0\xf1\xd7\x56\x68\xe4\x99\x3e\xd0\x62\x72\xe8\xf4\xf2\x4f\xbf\x03\x9e\x03\xd2\x61\x9c\x01\xbc\x86\x4d\xa9\x45\x63\x4f\x07\x0d\x28\x79\xa3\x84\xb4\xe6\x1a\x34\xee\x51\x83\x55\xc0\x55\x69\x40\x48\x28\x6b\xd5\x72\xd6\x88\x37\x8d\x56\x56\xcd\x00\x6a\xf1\x88\x1f\x05\x3e\x11\x9c\xdb\xf0\xfb\x0e\x2d\xe3\xcc\x32\x1f\xe4\x6e\xc5\x42\x49\x8b\xd2\x9a\x28\xc6\xb7\xa3\x29\x5a\x6e\x1c\x0e\x12\xe7\x11\xa5\xc2\xfc\xec\x84\xa8\x4d\x32\x11\x6c\x5a\x62\x53\xab\x33\x1c\xf1\x6c\x66\x00\xdc\x7d\x9d\x50\xda\xf7\x78\x26\x05\xcb\x78\x20\xd5\x93\xac\x8d\xd4\x24\x5b\x82\x96\x6c\x5d\x74\x2a\x58\x23\x82\xec\x6c\x5d\x5c\x08\xf5\xb3\x91\x34\xbf\xe8\xd5\xec\xb7\xd9\x2c\x66\x81\xbb\xd6\x32\x4a\x35\x47\x04\x0b\x8d\xcc\x62\xa8\x86\xa4\xba\xe0\xaf\x1c\x1b\x8d\x25\xb3\xc8\xe7\x1a\x99\xa1\x84\xfd\x26\x2c\x30\xc0\x34\x82\x54\x4f\x50\x3a\x01\x1c\x1e\x05\x83\xe6\x39\x58\xf6\xcd\xd5\x0c\xe0\x43\xc3\x99\xc5\x8f\xe2\x5f\xc2\xd5\xd9\x5e\x1c\xe6\x21\x71\x28\x6f\x8a\xe5\xab\x6b\x78\x8c\x26\x6f\x20\xe7\xc2\xb2\x5d\x9d\x6c\x99\x28\x79\x0f\x39\x71\xd5\x85\xe7\x00\x96\x48\x89\xb8\x7c\xc1\xd1\x3f\x2a\x55\x23\x93\x83\x38\xef\xab\xc1\x67\x9d\x00\xff\x3d\xbd\xd3\x1b\x18\x53\xe3\xdc\xf4\x8c\xd9\x19\x93\x30\xe7\xd5\x25\x93\x6e\xd0\xa6\xe4\x39\x67\x11\xaf\xc6\x52\x22\x7e\xbd\x9a\x62\xdc\x42\x3e\x0a\x0f\x67\x8e\x27\x26\xea\x9e\x35\x89\x03\xb4\xb1\xab\x98\x49\xaf\xa1\x66\xa3\xa1\xab\xee\x40\x20\x31\xa9\x7d\x6b\xd4\x27\x61\x8c\x50\xd2\xcc\x89\xfa\xfb\x00\xb6\xe9\x64\x0a\x38\x9a\x18\x84\xc7\x31\xbc\xd7\x87\xb9\xd2\x87\x31\x8a\x62\x39\x68\xbf\xd7\x87\xde\xb9\x4a\x1f\x7a\xc5\x6a\x18\x1f\x94\x46\x8b\x49\x4e\x74\x9a\x79\x7d\xde\xb4\xad\x3a\xa2\x8c\x84\x5d\xf5\xba\x67\x00\x0f\xf8\xa8\x8e\x98\xd5\x75\xb4\xd6\xa4\x8b\xa3\x0c\x78\xc0\x93\x7a\x74\xb6\xbe\xd5\xea\x44\xe6\x44\xde\x89\x97\xfe\x36\x9b\xb9\xda\xeb\x7c\xe0\x6a\x2f\x24\xd5\x0c\x20\x39\xe4\x66\x00\x69\xfc\x66\x00\x8d\x28\x6d\xab\x93\x35\x63\xc7\xf9\xa1\x81\x92\x69\x40\x98\xac\x69\xb4\x7a\x44\x3e\x81\xa5\x58\xe6\x6b\x66\x2b\x07\xa5\x58\xe6\x63\x61\x0d\xb3\xd5\xf0\xdd\x6d\x0a\x3e\xfd\x02\x7e\xae\x4e\x4c\xc8\xb1\x44\x94\x14\x24\x8f\x88\xd5\x26\xf1\xa4\xe0\x48\x60\x88\xdb\x02\x2e\x22\xb5\xd8\x6d\x5d\x64\x9d\x6a\x26\x59\x7d\xb6\xa2\x34\xf7\x8d\x55\x74\xda\x25\xa2\x3c\xac\x78\xf3\x50\x29\x6e\xbb\x55\xad\xde\x20\xca\x97\xf6\xb9\x23\xf4\x85\xe2\x9b\x16\x30\xbd\xeb\x77\x61\xee\x81\xa6\xa4\x3e\x72\x71\xe0\xd9\xcc\xde\x99\x1b\x78\x5b\x2b\x66\xfd\x41\x62\xca\xcb\x20\x79\x41\x23\x01\x47\xa2\xb7\x21\x18\x5f\x23\x6f\xf2\x24\xfb\x1f\xf0\x25\xf2\xfe\x2f\x30\x51\xb6\xa7\x89\xf6\x66\x63\x99\x45\xa7\x20\xcb\x37\x9f\x3f\xac\xde\xaf\xee\x7f\x5e\x85\xaf\x75\xbe\x5a\x16\xab\x9f\xc2\xd7\xc3\x87\xd5\x6a\xf8\x7a\x9b\x15\xb7\xf9\x32\x7c\x6c\xf3\x87\xbb\x62\x95\x6d\xf3\xe5\xa4\xa6\xa1\x6f\xf3\x8a\xb2\x6d\xa4\xe8\x35\x64\x12\x90\x0b\x1b\x5a\x3e\x50\x25\xf5\x82\x20\xf6\xc0\x1c\x79\x42\xc5\x0c\x9c\x14\x17\x7b\x81\x1c\x6c\x85\xe0\xb3\xc8\xe2\xb3\x85\xdd\x19\x84\x34\xa8\x29\x87\x40\x69\xe0\x74\x24\xd1\xef\xb2\x62\x9a\x95\x74\x0e\xbf\x71\x4a\xb6\x95\xa0\xfe\xa9\xac\x5b\x8e\x86\x4e\x79\xb7\x41\x3a\x79\x47\x3c\xef\x14\xd3\x1c\x98\xe4\xd0\x30\xe3\x05\xa8\xd3\x89\x49\xee\xb6\x13\xe2\x7c\x59\x6c\x3d\x5c\x30\x58\x63\x39\xe0\x95\xf5\x79\x1a\x74\x59\x29\x83\x12\x98\x4c\x5a\x50\x30\xed\xe1\x80\x86\xf6\xbe\xe9\x60\x71\x41\x4d\x84\x01\xd7\xd1\xbd\x76\xa0\x92\x2d\xb6\x62\x16\x84\x05\x53\xa9\xb6\xe6\x40\x94\xea\x16\x91\xaa\x6f\x4d\x68\x9e\xa9\x4d\xa4\x41\x49\x8e\x61\xc4\x21\x8d\x16\x14\x5d\xcb\x76\x9d\x15\x9b\xfc\x36\x5f\x6c\xff\x4b\x3e\x50\xff\x1a\xd2\xe1\x7d\x92\x0e\xef\x3f\xaf\xef\x97\xe1\xd7\xe6\xe3\xa2\xfb\xb5\x78\x28\xd6\xdb\xf0\xb1\xca\xee\xf2\xcd\x3a\x5b\xe4\xdd\xf7\xfd\x32\x1f\x2a\x2e\x52\xb5\xe9\x3d\xe0\x54\x1d\x85\xe4\x2f\xb5\xde\x23\xea\x0c\x99\x4d\xad\xa6\xbb\x1e\xf4\xa3\x27\x66\xcb\x0a\x79\x21\x39\x3e\xbb\xd6\xbc\x90\xf6\x13\xf5\xab\x94\xdf\x53\xc2\x5d\xe2\xf7\xe8\xb6\x6c\x37\x02\x45\x29\x43\xa9\xc6\xf1\x19\xd4\xde\x39\xd6\xb2\x9d\x8f\x84\xad\xd0\xc4\x71\xf4\xbd\xde\x5e\x69\x72\xb3\x65\x3b\x87\xc2\x5d\x64\x9c\xa0\x9f\x2b\xb4\x15\xea\x90\x37\x94\x5c\x2c\xda\x4c\xfb\xc0\x52\x1e\x90\x7c\xaf\xf0\x49\xd4\x35\x9c\xd8\xd1\x47\x39\xa4\x22\xe0\x33\x96\xad\x63\x4e\xd2\x33\x7c\x65\x7b\x4b\x44\x4a\xc2\x07\xca\x84\x18\xdf\xe8\xaa\x32\x98\xfa\x69\x32\x3e\xfe\x5e\x12\xb9\x61\xaf\xf4\x89\x59\x6a\x62\x7d\xed\x11\xd8\xbe\x10\x4d\xb8\x46\x3d\x55\xa2\xac\x5c\xe2\xef\x10\x25\x34\x4c\x1b\xe4\x54\xa1\x97\xe9\xac\xfa\x9c\xf7\xf9\xce\x76\x1b\xab\x1a\x68\x94\x11\x0e\x2f\xd9\xd7\xeb\x2c\xe2\xdb\x5a\xe2\xd0\x31\x06\xc2\xc5\xe0\x91\xd5\x82\x5f\x47\xfe\xe9\x1c\xf8\xc6\x9d\xf7\x79\x3f\x1e\x3b\xeb\x35\x64\x75\x9d\x84\x94\xc2\x82\xac\xac\xa2\xe8\x13\x48\x13\x62\xbc\x49\xbc\x9b\xe4\xcf\xb4\x53\xa3\x1b\x5f\xe4\xd9\x17\x98\xc1\x84\xac\xe8\xec\xa3\x86\x40\x70\xe4\xbf\x37\xac\xaf\x12\x3f\x29\x0d\x52\xb9\xb4\x05\x8d\xb6\xd5\x12\x39\x68\x87\xc4\x67\x6e\x43\xd7\x78\x56\xc3\xdc\xea\x16\xaf\x68\x79\x0f\x69\xbe\x67\xb5\x41\xba\xac\x54\xcc\x64\x9c\xbb\xf8\xb0\xfa\xce\x95\x9b\x99\xe8\x99\xe8\x06\xc8\x84\x44\x4d\x05\xd6\xfa\x73\x7d\xdc\xfc\x4c\x1f\x59\xa1\x54\x87\x65\x27\x34\x86\x1d\x92\xa1\xee\x96\x15\x8f\x18\xcb\xb4\x5d\xa8\x56\x5a\x57\x72\x03\x94\xf7\x7f\x31\xf9\x23\x4a\xef\xee\x09\x61\xae\xe7\xdf\x8a\x13\x26\x30\xa8\xeb\x1f\x0d\x76\x02\xd7\x8a\xff\x21\xab\x5a\xf3\xd5\x66\x95\x9d\x1b\xdd\xbb\x4d\xea\x53\x7f\x99\x45\x32\x8d\x66\x3b\x33\xfd\xf0\xb4\x3f\x1c\xdb\x87\x5b\x62\x64\x82\xcf\x41\x8e\x7b\x46\x59\xe9\x02\x40\x67\x98\x54\xb6\x0a\xe5\x74\x94\xea\x49\x52\xca\x2f\x36\xc9\xa1\x4d\xfb\xc2\x7a\x03\x15\xb2\xda\x56\x67\xda\x5a\x21\xd3\x76\x87\x2c\x64\x96\xc6\x12\xc5\x23\x72\x3a\x6a\x35\x1e\xda\x9a\x69\x10\xd2\xa2\xa6\xf6\xd6\x9d\xb7\xb6\xf2\x1c\x10\x2e\xbe\x24\x4e\xa3\x69\x94\xe4\x84\xc0\x2a\xf7\xec\x82\xc6\x9a\x00\xe2\x5d\x9e\xdd\x6e\xdf\xfd\x72\x09\xa2\x95\x11\x0c\x47\x9b\x83\xc4\xd2\x3f\x62\x51\xff\xa0\x60\x2d\x9e\x05\xc2\xa2\x56\xad\x3f\xf1\x85\x09\xe5\xd5\xd1\xcb\x60\xc3\x35\xec\x1c\xdb\xc9\x6f\x2d\xfc\xda\xa2\x3e\x3b\x3a\xa1\xd2\x34\xea\x84\x21\x6c\xe1\x14\xd7\x68\xf0\xb4\xab\xd1\xc0\xbb\xed\x76\xfd\xad\x81\xef\xbf\xfb\x2e\x44\xbf\xf7\xdf\x34\x78\xc7\xf6\x07\xe5\x9e\x79\x84\x19\xb0\x06\x3b\x7e\x7a\x58\x2f\x3a\x0b\xe8\xbc\xd8\x69\x64\x47\xf3\xc6\x09\xa8\x54\x83\x9e\x8d\x99\xed\x5b\x87\xce\x70\x27\xb7\x24\xa0\x3b\x56\x1e\xa9\x51\x11\x12\x9d\xc9\x54\xfc\x27\xe2\x16\x08\x88\x3c\x92\x80\x73\x59\x6c\x16\xf7\xab\x55\xbe\xd8\xba\x0e\x6f\xec\x67\xba\x75\x52\x6c\x9e\x2a\x94\x63\x47\x0b\x3f\xd2\x68\x55\xa2\x31\x44\x9d\xdd\xf2\xce\x07\xeb\x65\xb6\xf5\x6d\xa4\x97\xeb\x1f\x38\x7c\xbf\xd4\x59\xee\xdd\x4e\x43\x44\x5b\x86\x4a\x98\xc9\x33\x28\x47\x66\xfb\x56\xfb\xd3\xd4\xa7\xb1\x93\x8f\x06\xd8\x4e\xb5\xde\x05\x4f\x81\xf5\x84\x8d\x73\x53\xe9\x31\x94\x4b\x1b\x03\x96\x27\x66\xc0\xea\x73\xc8\x3f\xaf\xc0\x43\xda\x33\x51\x63\x9f\x35\x52\x3d\x91\xc1\x0c\x76\x8c\x27\x0e\x74\x46\xe6\x43\x8f\x3c\xf2\x20\xc7\x83\x66\x7c\x08\x70\xe4\xbf\x5a\x1c\xb1\x3e\x93\xda\x1d\x46\x19\x47\xba\x4f\xe2\x50\x59\x1a\x76\x2f\x06\x21\x55\xe9\x9a\xd1\x45\x2d\xff\xe9\x21\x5b\xfa\x16\xdc\xb1\x55\xfc\x48\xe4\xaa\xbd\x61\xc6\xd8\x4a\xab\xf6\x50\xe5\xee\xa2\x39\x75\xe7\x8d\xdf\xb7\xd2\x7b\x47\xc7\x64\x09\x8d\x74\x8c\xf9\xae\xab\x99\x84\xfc\xd2\xd7\xab\xe4\xd5\xaa\x9f\xfd\x88\xda\x88\x11\xf9\x79\x0d\x2f\xcf\x5c\xdc\xc4\x35\x5a\x7b\x5e\x4c\x4f\x5e\xbe\xc5\x76\x04\xab\x55\xbd\xae\x99\xc4\x9e\xd7\x5d\xe7\xd8\x7f\x79\x42\xed\x79\x65\xc9\x2c\xfb\xf2\x72\xd9\x9e\x56\x8a\xa3\x09\xdc\xeb\x06\x0a\x69\xac\x6e\xe9\x36\x87\x3c\x9d\xf4\x3e\xbd\xbb\x3c\x11\x1a\x8d\x8f\x42\xb5\x66\x33\xe5\xf4\x8b\xf9\xe4\xbc\x1a\x87\x32\x7d\xc1\xf7\x41\x6d\x32\xce\x35\x9a\xe4\x5c\xb2\xea\x88\xf2\xf2\x2a\x3a\xbc\x78\xb9\xad\x17\x0f\x2f\xc2\xcd\xdd\x0a\x79\x4c\xf6\xbe\x86\x87\x2f\xbc\x5d\x3b\xe9\xe3\x27\xeb\x2f\x3d\x9b\x8c\xaf\xb5\x5f\xa9\xa6\x7b\x9f\x0e\x2d\x81\xd7\x79\x73\x81\xc2\x45\xe0\xb9\xee\x56\xc7\x08\x1e\x85\xf9\xdb\xe6\x7e\xf5\x47\x40\xa4\xef\xe9\x5f\x65\xa9\x6b\xbf\x3a\x94\x69\xd5\x7e\x95\xf2\x17\xec\x1f\xbd\xf4\x87\xf2\x48\x4d\xef\xef\x8c\xd1\x9f\x3c\x4e\x0c\x40\x72\xa1\x77\x9f\xb7\xc5\xea\xc3\x3f\x3e\x67\x77\xcb\x1f\xfe\xdc\x0d\x2d\xb3\x87\x9f\x8b\x55\x3a\xb6\xb8\x5f\x6d\xb3\x62\x95\x3f\x7c\xde\xe4\xdb\xcf\xbf\x64\x77\xb7\x9b\xe9\xa9\x09\x79\xe9\x82\x6d\x7e\xb7\xbe\x25\xd2\xf5\x42\xfa\x12\x18\xfe\x81\xf2\xff\xea\xe9\x24\x77\x4d\xc5\xfe\xf4\xfd\x0f\x89\x8d\xe9\x13\xd5\xd7\x70\xe8\xf4\x03\x57\xf4\xc4\xeb\x23\x7e\xf9\xe0\x78\xb9\x31\x7a\xa6\xf5\x45\xf7\xc2\xbb\xe0\xec\xb7\xd9\x7f\x02\x00\x00\xff\xff\x2b\x28\xa9\x40\xbe\x1c\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 7358, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
