// Code generated for package noauth by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package noauth

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x5f\x8f\xe3\xb6\x11\x7f\xf7\xa7\x98\xcb\x3d\xc4\x0b\x2c\x0e\x41\xd1\x04\x85\x9f\xaa\xd8\xba\x9c\x7a\xbb\x5e\x77\xed\xbb\x34\x28\x0e\x07\x5a\x1c\x5b\x84\x65\x52\x21\x29\xef\xba\x45\xbe\x7b\x31\x24\x25\x91\xb6\xb6\x97\x4b\xfb\x66\xf1\xcf\xcc\x6f\xfe\xfd\x38\xa4\xf1\xd9\xa2\xe4\x60\xcf\x0d\xc2\xdf\x5b\xd4\x67\xf8\xf7\x04\xa0\x35\xa8\x67\xf0\xc1\xa0\x2e\xe4\x4e\xbd\x9a\x00\x28\xbd\x9f\xc1\x83\xde\x77\xdf\xb4\x62\x8d\xd6\x0a\xb9\x37\x7e\x65\xf7\xd5\xcd\x66\xd6\x6a\xb1\x6d\x2d\x86\xf9\xe1\x3b\xc8\xa3\x41\x33\x83\x7f\xf6\x6a\x3e\xd1\x44\x59\xb7\xc6\xa2\x9e\x0a\x3e\x83\x62\xf1\xea\x66\x06\x73\x3f\xd2\x69\x0e\x0b\x7e\x3c\x2f\xd9\x11\xa7\x92\x1d\x71\x06\x6b\xab\x85\xdc\xbf\xbc\x98\xd4\xc4\x33\xb1\xa6\xb9\x92\x12\x4b\x2b\x94\xbc\xd6\x39\xcc\x0d\x02\x45\xa6\xad\xd8\xb1\xd2\x4e\x59\xf8\xb1\x39\x37\x38\x83\x2c\xfa\x72\x22\xee\x8a\x6e\x88\x36\xb2\xd6\xaa\x52\x1d\x9b\x1a\x2d\x4e\x85\x6c\x5a\xdb\xc1\xbe\x85\xb2\xd5\x46\xe9\x95\x32\x33\x28\xa4\xbd\x05\xe6\x54\xce\x20\x8b\xf6\x64\x6e\x8c\x84\xdf\x76\xc8\x3f\x14\x8b\x4e\xc6\x4d\xba\xf8\x11\x4d\x5b\x5f\xa9\x7d\x2b\xb0\xe6\x97\xba\x77\x34\x18\x2c\x88\xd6\xe6\xd2\x0a\x7b\x7e\x2f\x24\xbf\x9d\x00\x00\x68\xfc\xb5\x15\x1a\x79\xa6\xf7\xb4\x98\x1c\x3a\xbe\xfc\xd3\xef\x80\xe7\x80\x74\x18\x27\x00\xaf\x61\x5d\x6a\xd1\xd8\xe3\x5e\x03\x4a\xde\x28\x21\xad\xb9\x05\x8d\x3b\xd4\x60\x15\x70\x55\x1a\x10\x12\xca\x5a\xb5\x9c\x35\xe2\x4d\xa3\x95\x55\x13\x80\x5a\x9c\xf0\xa3\xc0\x27\x82\x73\x17\x7e\xdf\xa3\x65\x9c\x59\xe6\x83\xdc\xad\x98\x2b\x69\x51\x5a\x13\xc5\xf8\xee\x62\x8a\x96\x1b\x87\x83\xc4\x79\x44\xa9\x30\x3f\x3b\x22\x6a\x9d\x4c\x04\x9b\x16\xd8\xd4\xea\x0c\x07\x3c\x9b\x09\x00\x77\x5f\x47\x94\xf6\x3d\x9e\x49\xc1\x22\x1e\x48\xf5\x24\x6b\x23\x35\xc9\x96\xa0\x25\x5b\x15\x9d\x0a\xd6\x88\x20\x3b\x5b\x15\x57\x42\xfd\x6c\x24\xcd\x2f\x7a\x35\xf9\x6d\x32\x89\x59\xe0\xbe\xb5\x8c\x52\xcd\x11\xc1\x5c\x23\xb3\x18\xaa\x21\xa9\x2e\xf8\x2b\xc7\x46\x63\xc9\x2c\xf2\xa9\x46\x66\x28\x61\xbf\x09\x0b\x0c\x30\x8d\x20\xd5\x13\x94\x4e\x00\x87\x93\x60\xd0\x3c\x07\xcb\xbe\xb9\x99\x00\x7c\x68\x38\xb3\xf8\x51\xfc\x4b\xb8\x3a\xdb\x89\xfd\x34\x24\x0e\xe5\x4d\xb1\x78\x75\x0b\xa7\x68\x72\x06\x39\x17\x96\x6d\xeb\x64\xcb\x48\xc9\x7b\xc8\x89\xab\xae\x3c\x07\xb0\x40\x4a\xc4\xc5\x0b\x8e\xfe\x51\xa9\x1a\x99\x1c\xc4\x79\x5f\x0d\x3e\xeb\x04\xf8\xef\xf1\x9d\xde\xc0\x98\x1a\xa7\xa6\x67\xcc\xce\x98\x84\x39\x6f\xae\x99\x74\x8d\x36\x25\xcf\x29\x8b\x78\x35\x96\x12\xf1\xeb\xcd\x18\xe3\x16\xf2\x24\x3c\x9c\x29\x1e\x99\xa8\x7b\xd6\x24\x0e\xd0\xc6\x2e\x63\x26\xbd\x85\x9a\x5d\x0c\xdd\x74\x07\x02\x89\x49\xed\x5b\xa1\x3e\x0a\x63\x84\x92\x66\x4a\xd4\xdf\x07\xb0\x4d\x27\x53\xc0\xd1\xc4\x20\x3c\x8e\xe1\x83\xde\x4f\x95\xde\x5f\xa2\x28\x16\x83\xf6\x07\xbd\xef\x9d\xab\xf4\xbe\x57\xac\x86\xf1\x41\x69\xb4\x98\xe4\x44\xa7\x99\xd7\xe7\x4d\xdb\xa8\x03\xca\x48\xd8\x4d\xaf\x7b\x02\xf0\x88\x27\x75\xc0\xac\xae\xa3\xb5\x26\x5d\x1c\x65\xc0\x23\x1e\xd5\xc9\xd9\xfa\x56\xab\x23\x99\x13\x79\x27\x5e\xfa\xdb\x64\xe2\x6a\xaf\xf3\x81\xab\xbd\x90\x54\x13\x80\xe4\x90\x9b\x00\xa4\xf1\x9b\x00\x34\xa2\xb4\xad\x4e\xd6\x5c\x3a\xce\x0f\x0d\x94\x4c\x03\xc2\x64\x4d\xa3\xd5\x09\xf9\x08\x96\x62\x91\xaf\x98\xad\x1c\x94\x62\x91\x5f\x0a\x6b\x98\xad\x86\xef\x6e\x53\xf0\xe9\x97\xf0\x4b\x0a\x87\xd7\xcd\x6a\x93\xf8\x4c\x70\x24\xb5\xc4\x62\x01\x01\xd1\x57\xec\xa0\x2e\x86\x4e\x09\x93\xac\x3e\x5b\x51\x9a\x87\xc6\x2a\x3a\xd7\x12\x51\x1e\x40\xbc\x79\xa8\x09\xb7\xdd\xaa\x56\xaf\x11\xe5\x4b\xfb\xdc\x61\xf9\x42\x99\x8d\x0b\x18\xdf\xf5\xbb\x30\xf7\x40\x53\xfa\xbe\x70\x66\x60\xd4\xcc\xde\x9b\x19\xbc\xad\x15\xb3\xfe\xc8\x30\xe5\x75\x38\xbc\xa0\x0b\x01\x07\x22\xb2\x21\x18\x5f\x23\x6f\xf4\xcc\xfa\x1f\xf0\x25\xf2\xfe\x2f\x30\x51\xb6\xc7\x91\x46\x66\x6d\x99\x45\xa7\x20\xcb\xd7\x9f\x3f\x2c\xdf\x2f\x1f\x7e\x5e\x86\xaf\x55\xbe\x5c\x14\xcb\x9f\xc2\xd7\xe3\x87\xe5\x72\xf8\x7a\x9b\x15\x77\xf9\x22\x7c\x6c\xf2\xc7\xfb\x62\x99\x6d\xf2\xc5\xa8\xa6\xa1\x43\xf3\x8a\xb2\x4d\xa4\xe8\x35\x64\x12\x90\x0b\x1b\x9a\x3b\x50\x25\x75\x7d\x20\x76\xc0\x1c\x4d\x42\xc5\x0c\x1c\x15\x17\x3b\x81\x1c\x6c\x85\xe0\xb3\xc8\xe2\xb3\x85\xed\x19\x84\x34\xa8\x29\x87\x40\x69\xe0\x74\xf8\xd0\xef\xb2\x62\x9a\x95\x74\xe2\xbe\x71\x4a\x36\x95\xa0\x4e\xa9\xac\x5b\x8e\x86\xce\x73\xb7\x41\x3a\x79\x07\x3c\x6f\x15\xd3\x1c\x98\xe4\xd0\x30\xe3\x05\xa8\xe3\x91\x49\xee\xb6\x13\xe2\x7c\x51\x6c\x3c\x5c\x30\x58\x63\x39\xe0\x95\xf5\x79\x1c\x74\x59\x29\x83\x12\x98\x4c\x9a\x4d\x30\xed\x7e\x8f\x86\xf6\xbe\xe9\x60\x71\x41\xed\x82\x01\xd7\xbb\xbd\x76\xa0\x92\x2d\xb6\x62\x16\x84\x05\x53\xa9\xb6\xe6\x40\xe4\xe9\x16\x91\xaa\x6f\x4d\x68\x93\xa9\x21\xa4\x41\x49\x8e\x61\xc4\x21\x8d\x16\x14\x5d\xcb\xb6\x9d\x15\xeb\xfc\x2e\x9f\x6f\xfe\x4b\x3e\x50\xa7\x1a\xd2\xe1\x7d\x92\x0e\xef\x3f\xaf\x1e\x16\xe1\xd7\xfa\xe3\xbc\xfb\x35\x7f\x2c\x56\x9b\xf0\xb1\xcc\xee\xf3\xf5\x2a\x9b\xe7\xdd\xf7\xc3\x22\x1f\x2a\x2e\x52\xb5\xee\x3d\xe0\x54\x1d\x84\xe4\x2f\x35\xd9\x17\x24\x19\x32\x9b\x9a\x4a\x77\x11\xe8\x47\x8f\xcc\x96\x15\xf2\x42\x72\x7c\x76\x4d\x78\x21\xed\x27\xea\x4c\x29\xbf\xc7\x84\xbb\xc4\xef\xd1\x6d\xd8\xf6\x02\x14\xa5\x0c\xa5\x1a\xc7\x67\x50\x3b\xe7\x58\xcb\xb6\x3e\x12\xb6\x42\x13\xc7\xd1\x77\x75\x3b\xa5\xc9\xcd\x96\x6d\x1d\x0a\x77\x65\x71\x82\x7e\xae\xd0\x56\xa8\x43\xde\x50\x72\xb1\x68\x33\xed\x03\x4b\x79\x40\xf2\xbd\xc2\x27\x51\xd7\x70\x64\x07\x1f\xe5\x90\x8a\x80\xcf\x58\xb6\x8e\x39\x49\xcf\xf0\x95\xed\x2c\x11\x29\x09\x1f\x28\x13\x62\x7c\x17\x97\x92\xc1\xd4\x4f\xa3\xf1\xf1\x37\x90\xc8\x0d\x3b\xa5\x8f\xcc\x52\xbb\xea\x6b\x8f\xc0\xf6\x85\x68\xc2\x85\xe9\xa9\x12\x65\xe5\x12\x7f\x8b\x28\xa1\x61\xda\x20\xa7\x0a\xbd\x4e\x67\xd5\xe7\xbc\xcf\x77\xb6\x5d\x5b\xd5\x40\xa3\x8c\x70\x78\xc9\xbe\x5e\x67\x11\xdf\xcb\x12\x87\x5e\x62\x20\x5c\x0c\x4e\xac\x16\xfc\x36\xf2\x4f\xe7\xc0\x37\xee\x64\xcf\xfb\xf1\xd8\x59\xaf\x21\xab\xeb\x24\xa4\x14\x16\x64\x65\x15\x45\x9f\x40\x9a\x10\xe3\x75\xe2\xdd\x24\x7f\xc6\x9d\x1a\xdd\xed\x22\xcf\xbe\xc0\x0c\x26\x64\x45\x67\x1f\x35\x04\x82\x23\xff\xbd\x61\x7d\x95\xf8\x49\x69\x90\xca\xa5\x2d\x68\xb4\xad\x96\xc8\x41\x3b\x24\x3e\x73\x1b\xba\xb0\xb3\x1a\xa6\x56\xb7\x78\x43\xcb\x7b\x48\xd3\x1d\xab\x0d\xd2\xb5\xa4\x62\x26\xe3\xdc\xc5\x87\xd5\xf7\xae\xdc\xcc\x48\x77\x44\x77\x3d\x26\x24\x6a\x2a\xb0\xd6\x9f\xeb\x97\x6d\xce\xf8\x91\x15\x4a\x75\x58\x76\x44\x63\xd8\x3e\x19\xea\xee\x53\xf1\x88\xb1\x4c\xdb\xb9\x6a\xa5\x75\x25\x37\x40\x79\xff\x17\x93\x9f\x50\x7a\x77\x8f\x08\x73\xdd\xfd\x46\x1c\x31\x81\x41\xfd\xfd\xc5\x60\x27\x70\xa5\xf8\x1f\xb2\xaa\x35\x5f\x6d\x56\xd9\xb9\xd1\xbd\xd0\xa4\x3e\xf5\xd7\x56\x24\xd3\x68\xb6\x33\xd3\x0f\x8f\xfb\xc3\xb1\x7d\xb8\x0f\x46\x26\xf8\x1c\xe4\xb8\x63\x94\x95\x2e\x00\x74\x86\x49\x65\xab\x50\x4e\x07\xa9\x9e\x24\xa5\xfc\x7c\x9d\x1c\xda\xb4\x2f\xac\x37\x50\x21\xab\x6d\x75\xa6\xad\x15\x32\x6d\xb7\xc8\x42\x66\x69\x2c\x51\x9c\x90\xd3\x51\xab\x71\xdf\xd6\x4c\x83\x90\x16\x35\xb5\xb7\xee\xbc\xb5\x95\xe7\x80\x70\xc5\x25\x71\x1a\x4d\xa3\x24\x27\x04\x56\xb9\x07\x16\x34\xd6\x04\x10\xef\xf2\xec\x6e\xf3\xee\x97\x6b\x10\xad\x8c\x60\x38\xda\x1c\x24\x96\xfe\xb9\x8a\xfa\x07\x05\x2b\xf1\x2c\x10\xe6\xb5\x6a\xfd\x89\x2f\x4c\x28\xaf\x8e\x5e\x06\x1b\x6e\x61\xeb\xd8\x4e\x7e\x6b\xe1\xd7\x16\xf5\xd9\xd1\x09\x95\xa6\x51\x47\x0c\x61\x0b\xa7\xb8\x46\x83\xc7\x6d\x8d\x06\xde\x6d\x36\xab\x6f\x0d\x7c\xff\xdd\x77\x21\xfa\xbd\xff\xc6\xc1\x3b\xb6\xdf\x2b\xf7\xa0\x23\xcc\x80\x35\xd8\xf1\xd3\xe3\x6a\xde\x59\x40\xe7\xc5\x56\x23\x3b\x98\x37\x4e\x40\xa5\x1a\xf4\x6c\xcc\x6c\xdf\x3a\x74\x86\x3b\xb9\x25\x01\xdd\xb2\xf2\x40\x8d\x8a\x90\xe8\x4c\xa6\xe2\x3f\x12\xb7\x40\x40\xe4\x91\x04\x9c\x8b\x62\x3d\x7f\x58\x2e\xf3\xf9\xc6\x75\x78\x97\x7e\xa6\xfb\x25\xc5\xe6\xa9\x42\x79\xe9\x68\xe1\x47\x1a\xad\x4a\x34\x86\xa8\xb3\x5b\xde\xf9\x60\xb5\xc8\x36\xbe\x8d\xf4\x72\xfd\x53\x86\xef\x97\x3a\xcb\xbd\xdb\x69\x88\x68\xcb\x50\x09\x33\x79\x06\xe5\xc8\x6c\xd7\x6a\x7f\x9a\xfa\x34\x76\xf2\xd1\x00\xdb\xaa\xd6\xbb\xe0\x29\xb0\x9e\xb0\x71\x6e\x2a\x7d\x09\xe5\xda\xc6\x80\xe5\x89\x19\xb0\xfa\x1c\xf2\xcf\x2b\xf0\x90\x76\x4c\xd4\xd8\x67\x8d\x54\x4f\x64\x30\x83\x2d\xe3\x89\x03\x9d\x91\xf9\xd0\x23\x5f\x78\x90\xe3\x5e\x33\x3e\x04\x38\xf2\x5f\x2d\x0e\x58\x9f\x49\xed\x16\xa3\x8c\x23\xdd\x47\xb1\xaf\x2c\x0d\xbb\xb7\x81\x90\xaa\x74\xcd\xe8\xa2\x96\xff\xf4\x98\x2d\x7c\x0b\xee\xd8\x2a\x7e\x0e\x72\xd5\xde\x30\x63\x6c\xa5\x55\xbb\xaf\x72\x77\xd1\x1c\xbb\xdd\xc6\x2f\x59\xe9\xbd\xa3\x63\xb2\x84\x46\x3a\xc6\x7c\xd7\xd5\x4c\x42\x7e\xe9\x3b\x55\xf2\x3e\xd5\xcf\x7e\x44\x6d\xc4\x05\xf9\x79\x0d\x2f\xcf\x5c\xdd\xb9\x35\x5a\x7b\x9e\x8f\x4f\x5e\xbf\xba\x76\x04\xab\x55\xbd\xaa\x99\xc4\x9e\xd7\x5d\xe7\xd8\x7f\x79\x42\xed\x79\x65\xc1\x2c\xfb\xf2\x72\xd9\x1e\x97\x8a\xa3\x09\xdc\xeb\x06\x0a\x69\xac\x6e\xe9\x36\x87\x3c\x9d\xf4\x3e\xbd\xbf\x3e\x11\x1a\x8d\x27\xa1\x5a\xb3\x1e\x73\xfa\xd5\x7c\x72\x5e\x5d\x86\x32\x7d\xab\xf7\x41\x6d\x32\xce\x35\x9a\xe4\x5c\xb2\xea\x80\xf2\xfa\x2a\x3a\xbc\x6d\xb9\xad\x57\x4f\x2c\xc2\xcd\xdd\x09\x79\x48\xf6\xbe\x86\xc7\x2f\xbc\x52\x3b\xe9\x97\x8f\xd3\x5f\x78\x20\xb9\xba\xd6\x7e\xa5\x9a\xee\x25\x3a\xb4\x04\x5e\xe7\xec\x0a\x85\x8b\xc0\x73\xdd\xad\x8e\x11\x9c\x84\xf9\xdb\xfa\x61\xf9\x47\x40\xa4\x2f\xe7\x5f\x65\xa9\x6b\xbf\x3a\x94\x69\xd5\x7e\x95\xf2\x17\xec\xbf\x78\xd3\x0f\xe5\x91\x9a\xde\xdf\x19\xa3\xbf\x73\x9c\x18\x80\xe4\x42\xef\x3e\xef\x8a\xe5\x87\x7f\x7c\xce\xee\x17\x3f\xfc\xb9\x1b\x5a\x64\x8f\x3f\x17\xcb\x74\x6c\xfe\xb0\xdc\x64\xc5\x32\x7f\xfc\xbc\xce\x37\x9f\x7f\xc9\xee\xef\xd6\xe3\x53\x23\xf2\xd2\x05\x9b\xfc\x7e\x75\x47\xa4\xeb\x85\xf4\x25\x30\xfc\xd7\xe4\xff\xbf\xd3\x49\xee\x9a\x8a\xfd\xe9\xfb\x1f\x12\x1b\xd3\x27\xaa\xaf\xe1\xd0\xf1\x07\xae\xe8\x31\xd7\x47\xfc\xfa\x69\xf1\x7a\x63\xf4\x20\xeb\x8b\xee\x85\x77\xc1\xc9\x6f\x93\xff\x04\x00\x00\xff\xff\xff\xd1\xfb\x07\xa8\x1c\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 7336, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
