// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/vzmgr/vzmgrpb/service.proto

package vzmgrpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	cloudpb "pixielabs.ai/pixielabs/src/cloud/cloudpb"
	proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateVizierClusterRequest struct {
	OrgID *proto1.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *CreateVizierClusterRequest) Reset()      { *m = CreateVizierClusterRequest{} }
func (*CreateVizierClusterRequest) ProtoMessage() {}
func (*CreateVizierClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b112f5a7e47f58f, []int{0}
}
func (m *CreateVizierClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateVizierClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateVizierClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateVizierClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVizierClusterRequest.Merge(m, src)
}
func (m *CreateVizierClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateVizierClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVizierClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVizierClusterRequest proto.InternalMessageInfo

func (m *CreateVizierClusterRequest) GetOrgID() *proto1.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type GetViziersByOrgResponse struct {
	VizierIDs []*proto1.UUID `protobuf:"bytes,1,rep,name=vizier_ids,json=vizierIds,proto3" json:"vizier_ids,omitempty"`
}

func (m *GetViziersByOrgResponse) Reset()      { *m = GetViziersByOrgResponse{} }
func (*GetViziersByOrgResponse) ProtoMessage() {}
func (*GetViziersByOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b112f5a7e47f58f, []int{1}
}
func (m *GetViziersByOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetViziersByOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetViziersByOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetViziersByOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetViziersByOrgResponse.Merge(m, src)
}
func (m *GetViziersByOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetViziersByOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetViziersByOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetViziersByOrgResponse proto.InternalMessageInfo

func (m *GetViziersByOrgResponse) GetVizierIDs() []*proto1.UUID {
	if m != nil {
		return m.VizierIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateVizierClusterRequest)(nil), "pl.services.CreateVizierClusterRequest")
	proto.RegisterType((*GetViziersByOrgResponse)(nil), "pl.services.GetViziersByOrgResponse")
}

func init() {
	proto.RegisterFile("src/cloud/vzmgr/vzmgrpb/service.proto", fileDescriptor_7b112f5a7e47f58f)
}

var fileDescriptor_7b112f5a7e47f58f = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6b, 0x14, 0x3f,
	0x18, 0x4f, 0x28, 0x2d, 0x6c, 0xfa, 0x2f, 0x0b, 0xf9, 0x23, 0x2d, 0x83, 0x66, 0xd7, 0x41, 0xd1,
	0x8b, 0x33, 0x58, 0xc1, 0x4b, 0xf1, 0xe0, 0xee, 0x82, 0x1d, 0x41, 0x16, 0x47, 0x5a, 0x4b, 0x2f,
	0x65, 0x5e, 0xd2, 0x18, 0x9c, 0x9d, 0x8c, 0xc9, 0xcc, 0xa2, 0x3d, 0xf9, 0x11, 0xfc, 0x18, 0x7e,
	0x14, 0x8f, 0x7b, 0xec, 0xa9, 0xb8, 0xd9, 0x8b, 0x27, 0xe9, 0x47, 0x90, 0x26, 0xeb, 0xb6, 0xb3,
	0xce, 0xf6, 0x92, 0xe4, 0xc9, 0xef, 0x25, 0x4f, 0x7e, 0xf0, 0xa0, 0x87, 0x4a, 0x26, 0x7e, 0x92,
	0x89, 0x2a, 0xf5, 0xc7, 0x67, 0x23, 0x26, 0xed, 0x5a, 0xc4, 0xbe, 0xa2, 0x72, 0xcc, 0x13, 0xea,
	0x15, 0x52, 0x94, 0x02, 0x6f, 0x16, 0x99, 0x37, 0xbf, 0x51, 0xce, 0x13, 0xc6, 0xcb, 0x0f, 0x55,
	0xec, 0x25, 0x62, 0xe4, 0x33, 0xc1, 0x84, 0x6f, 0x38, 0x71, 0x75, 0x6a, 0x2a, 0x53, 0x98, 0x93,
	0xd5, 0x3a, 0x5d, 0xf3, 0x84, 0x18, 0x8d, 0x44, 0xee, 0x57, 0x15, 0x4f, 0x2d, 0xdd, 0x1c, 0xe7,
	0x8c, 0x7b, 0xd7, 0x4d, 0x98, 0xb5, 0x88, 0xed, 0x6e, 0x61, 0x77, 0x88, 0x9c, 0xbe, 0xa4, 0x51,
	0x49, 0x0f, 0xf9, 0x19, 0xa7, 0xb2, 0x9f, 0x55, 0xaa, 0xa4, 0x32, 0xa4, 0x9f, 0x2a, 0xaa, 0x4a,
	0xfc, 0x14, 0x6d, 0x08, 0xc9, 0x4e, 0x78, 0xba, 0x03, 0xbb, 0xf0, 0xf1, 0xe6, 0x6e, 0xdb, 0x2b,
	0x32, 0xef, 0xca, 0xbc, 0x88, 0xbd, 0x83, 0x83, 0x60, 0xd0, 0x6b, 0xe9, 0x8b, 0xce, 0xfa, 0x50,
	0xb2, 0x60, 0x10, 0xae, 0x0b, 0xc9, 0x82, 0xd4, 0x3d, 0x42, 0xdb, 0xaf, 0x68, 0x69, 0xdd, 0x54,
	0xef, 0xcb, 0x50, 0xb2, 0x90, 0xaa, 0x42, 0xe4, 0x8a, 0xe2, 0x17, 0x08, 0x8d, 0xcd, 0xfd, 0x09,
	0x4f, 0xd5, 0x0e, 0xec, 0xae, 0x35, 0x39, 0x6e, 0xe9, 0x8b, 0x4e, 0xcb, 0xca, 0x83, 0x81, 0x0a,
	0x5b, 0x56, 0x11, 0xa4, 0x6a, 0xf7, 0xf7, 0x1a, 0xfa, 0xef, 0xf0, 0xf8, 0x0d, 0x93, 0xef, 0x6c,
	0x58, 0xf8, 0x2d, 0xfa, 0xbf, 0xa1, 0x77, 0xfc, 0xc8, 0xbb, 0x11, 0xa8, 0xb7, 0xfa, 0x77, 0xce,
	0xf2, 0xdb, 0x2e, 0xc0, 0xaf, 0x51, 0x7b, 0xa9, 0x7b, 0xbc, 0xcc, 0x72, 0x1e, 0xd4, 0xfc, 0x57,
	0x7c, 0xd6, 0x05, 0x78, 0x0f, 0x6d, 0x2d, 0xc0, 0x20, 0x3f, 0x15, 0xff, 0x3a, 0x6d, 0xd7, 0x9c,
	0xae, 0x99, 0x2e, 0xc0, 0xc3, 0x1b, 0x31, 0xf6, 0x45, 0x9e, 0xd3, 0xa4, 0xe4, 0x22, 0x6f, 0xb6,
	0xb9, 0xdf, 0x60, 0x53, 0xd7, 0xb8, 0x00, 0xbf, 0x47, 0xed, 0x1a, 0x42, 0x53, 0xec, 0xd6, 0x74,
	0x21, 0x65, 0xfc, 0x2a, 0x1d, 0xcb, 0xfa, 0x9b, 0x11, 0xb9, 0x85, 0xf3, 0x32, 0xf9, 0xe8, 0x02,
	0x7c, 0x84, 0xee, 0xec, 0x47, 0x79, 0x9a, 0xcd, 0x33, 0xde, 0xa7, 0x91, 0x2c, 0x63, 0x1a, 0x95,
	0xf8, 0x6e, 0x43, 0x5b, 0x0b, 0xd4, 0xe9, 0xdc, 0x86, 0x1a, 0xe7, 0x5e, 0x36, 0x99, 0x12, 0x70,
	0x3e, 0x25, 0xe0, 0x72, 0x4a, 0xe0, 0x57, 0x4d, 0xe0, 0x77, 0x4d, 0xe0, 0x0f, 0x4d, 0xe0, 0x44,
	0x13, 0xf8, 0x53, 0x13, 0xf8, 0x4b, 0x13, 0x70, 0xa9, 0x09, 0xfc, 0x36, 0x23, 0x60, 0x32, 0x23,
	0xe0, 0x7c, 0x46, 0xc0, 0xf1, 0xf3, 0x82, 0x7f, 0xe6, 0x34, 0x8b, 0x62, 0xe5, 0x45, 0xdc, 0x5f,
	0x14, 0xfe, 0x8a, 0x61, 0xdc, 0x9b, 0xef, 0xf1, 0x86, 0x19, 0x88, 0x67, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x9d, 0x7b, 0xe5, 0xb3, 0xb6, 0x03, 0x00, 0x00,
}

func (this *CreateVizierClusterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateVizierClusterRequest)
	if !ok {
		that2, ok := that.(CreateVizierClusterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *GetViziersByOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetViziersByOrgResponse)
	if !ok {
		that2, ok := that.(GetViziersByOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VizierIDs) != len(that1.VizierIDs) {
		return false
	}
	for i := range this.VizierIDs {
		if !this.VizierIDs[i].Equal(that1.VizierIDs[i]) {
			return false
		}
	}
	return true
}
func (this *CreateVizierClusterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vzmgrpb.CreateVizierClusterRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetViziersByOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vzmgrpb.GetViziersByOrgResponse{")
	if this.VizierIDs != nil {
		s = append(s, "VizierIDs: "+fmt.Sprintf("%#v", this.VizierIDs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VZMgrServiceClient is the client API for VZMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VZMgrServiceClient interface {
	CreateVizierCluster(ctx context.Context, in *CreateVizierClusterRequest, opts ...grpc.CallOption) (*proto1.UUID, error)
	GetViziersByOrg(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*GetViziersByOrgResponse, error)
	GetVizierInfo(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*cloudpb.VizierInfo, error)
	GetVizierConnectionInfo(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*cloudpb.VizierConnectionInfo, error)
	VizierConnected(ctx context.Context, in *cloudpb.RegisterVizierRequest, opts ...grpc.CallOption) (*cloudpb.RegisterVizierAck, error)
	HandleVizierHeartbeat(ctx context.Context, in *cloudpb.VizierHeartbeat, opts ...grpc.CallOption) (*cloudpb.VizierHeartbeatAck, error)
}

type vZMgrServiceClient struct {
	cc *grpc.ClientConn
}

func NewVZMgrServiceClient(cc *grpc.ClientConn) VZMgrServiceClient {
	return &vZMgrServiceClient{cc}
}

func (c *vZMgrServiceClient) CreateVizierCluster(ctx context.Context, in *CreateVizierClusterRequest, opts ...grpc.CallOption) (*proto1.UUID, error) {
	out := new(proto1.UUID)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/CreateVizierCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) GetViziersByOrg(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*GetViziersByOrgResponse, error) {
	out := new(GetViziersByOrgResponse)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/GetViziersByOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) GetVizierInfo(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*cloudpb.VizierInfo, error) {
	out := new(cloudpb.VizierInfo)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/GetVizierInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) GetVizierConnectionInfo(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*cloudpb.VizierConnectionInfo, error) {
	out := new(cloudpb.VizierConnectionInfo)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/GetVizierConnectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) VizierConnected(ctx context.Context, in *cloudpb.RegisterVizierRequest, opts ...grpc.CallOption) (*cloudpb.RegisterVizierAck, error) {
	out := new(cloudpb.RegisterVizierAck)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/VizierConnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) HandleVizierHeartbeat(ctx context.Context, in *cloudpb.VizierHeartbeat, opts ...grpc.CallOption) (*cloudpb.VizierHeartbeatAck, error) {
	out := new(cloudpb.VizierHeartbeatAck)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/HandleVizierHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VZMgrServiceServer is the server API for VZMgrService service.
type VZMgrServiceServer interface {
	CreateVizierCluster(context.Context, *CreateVizierClusterRequest) (*proto1.UUID, error)
	GetViziersByOrg(context.Context, *proto1.UUID) (*GetViziersByOrgResponse, error)
	GetVizierInfo(context.Context, *proto1.UUID) (*cloudpb.VizierInfo, error)
	GetVizierConnectionInfo(context.Context, *proto1.UUID) (*cloudpb.VizierConnectionInfo, error)
	VizierConnected(context.Context, *cloudpb.RegisterVizierRequest) (*cloudpb.RegisterVizierAck, error)
	HandleVizierHeartbeat(context.Context, *cloudpb.VizierHeartbeat) (*cloudpb.VizierHeartbeatAck, error)
}

func RegisterVZMgrServiceServer(s *grpc.Server, srv VZMgrServiceServer) {
	s.RegisterService(&_VZMgrService_serviceDesc, srv)
}

func _VZMgrService_CreateVizierCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVizierClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).CreateVizierCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/CreateVizierCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).CreateVizierCluster(ctx, req.(*CreateVizierClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_GetViziersByOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).GetViziersByOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/GetViziersByOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).GetViziersByOrg(ctx, req.(*proto1.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_GetVizierInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).GetVizierInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/GetVizierInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).GetVizierInfo(ctx, req.(*proto1.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_GetVizierConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).GetVizierConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/GetVizierConnectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).GetVizierConnectionInfo(ctx, req.(*proto1.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_VizierConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloudpb.RegisterVizierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).VizierConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/VizierConnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).VizierConnected(ctx, req.(*cloudpb.RegisterVizierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_HandleVizierHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloudpb.VizierHeartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).HandleVizierHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/HandleVizierHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).HandleVizierHeartbeat(ctx, req.(*cloudpb.VizierHeartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

var _VZMgrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.services.VZMgrService",
	HandlerType: (*VZMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVizierCluster",
			Handler:    _VZMgrService_CreateVizierCluster_Handler,
		},
		{
			MethodName: "GetViziersByOrg",
			Handler:    _VZMgrService_GetViziersByOrg_Handler,
		},
		{
			MethodName: "GetVizierInfo",
			Handler:    _VZMgrService_GetVizierInfo_Handler,
		},
		{
			MethodName: "GetVizierConnectionInfo",
			Handler:    _VZMgrService_GetVizierConnectionInfo_Handler,
		},
		{
			MethodName: "VizierConnected",
			Handler:    _VZMgrService_VizierConnected_Handler,
		},
		{
			MethodName: "HandleVizierHeartbeat",
			Handler:    _VZMgrService_HandleVizierHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/vzmgr/vzmgrpb/service.proto",
}

func (m *CreateVizierClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateVizierClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.OrgID.Size()))
		n1, err := m.OrgID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetViziersByOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetViziersByOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VizierIDs) > 0 {
		for _, msg := range m.VizierIDs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateVizierClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetViziersByOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VizierIDs) > 0 {
		for _, e := range m.VizierIDs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateVizierClusterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVizierClusterRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "proto1.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetViziersByOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetViziersByOrgResponse{`,
		`VizierIDs:` + strings.Replace(fmt.Sprintf("%v", this.VizierIDs), "UUID", "proto1.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateVizierClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVizierClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVizierClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &proto1.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetViziersByOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetViziersByOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetViziersByOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierIDs = append(m.VizierIDs, &proto1.UUID{})
			if err := m.VizierIDs[len(m.VizierIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
