// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/vzmgr/vzmgrpb/service.proto

package vzmgrpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	cloudpb "pixielabs.ai/pixielabs/src/cloud/cloudpb"
	proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateVizierClusterRequest struct {
	OrgID *proto1.UUID `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *CreateVizierClusterRequest) Reset()      { *m = CreateVizierClusterRequest{} }
func (*CreateVizierClusterRequest) ProtoMessage() {}
func (*CreateVizierClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b112f5a7e47f58f, []int{0}
}
func (m *CreateVizierClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateVizierClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateVizierClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateVizierClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVizierClusterRequest.Merge(m, src)
}
func (m *CreateVizierClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateVizierClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVizierClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVizierClusterRequest proto.InternalMessageInfo

func (m *CreateVizierClusterRequest) GetOrgID() *proto1.UUID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

type GetViziersByOrgResponse struct {
	VizierIDs []*proto1.UUID `protobuf:"bytes,1,rep,name=vizier_ids,json=vizierIds,proto3" json:"vizier_ids,omitempty"`
}

func (m *GetViziersByOrgResponse) Reset()      { *m = GetViziersByOrgResponse{} }
func (*GetViziersByOrgResponse) ProtoMessage() {}
func (*GetViziersByOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b112f5a7e47f58f, []int{1}
}
func (m *GetViziersByOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetViziersByOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetViziersByOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetViziersByOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetViziersByOrgResponse.Merge(m, src)
}
func (m *GetViziersByOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetViziersByOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetViziersByOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetViziersByOrgResponse proto.InternalMessageInfo

func (m *GetViziersByOrgResponse) GetVizierIDs() []*proto1.UUID {
	if m != nil {
		return m.VizierIDs
	}
	return nil
}

type GetSSLCertsRequest struct {
	ClusterID *proto1.UUID `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (m *GetSSLCertsRequest) Reset()      { *m = GetSSLCertsRequest{} }
func (*GetSSLCertsRequest) ProtoMessage() {}
func (*GetSSLCertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b112f5a7e47f58f, []int{2}
}
func (m *GetSSLCertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSSLCertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSSLCertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSSLCertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSSLCertsRequest.Merge(m, src)
}
func (m *GetSSLCertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSSLCertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSSLCertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSSLCertsRequest proto.InternalMessageInfo

func (m *GetSSLCertsRequest) GetClusterID() *proto1.UUID {
	if m != nil {
		return m.ClusterID
	}
	return nil
}

type GetSSLCertsResponse struct {
	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Cert string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (m *GetSSLCertsResponse) Reset()      { *m = GetSSLCertsResponse{} }
func (*GetSSLCertsResponse) ProtoMessage() {}
func (*GetSSLCertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b112f5a7e47f58f, []int{3}
}
func (m *GetSSLCertsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSSLCertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSSLCertsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSSLCertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSSLCertsResponse.Merge(m, src)
}
func (m *GetSSLCertsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSSLCertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSSLCertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSSLCertsResponse proto.InternalMessageInfo

func (m *GetSSLCertsResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetSSLCertsResponse) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateVizierClusterRequest)(nil), "pl.services.CreateVizierClusterRequest")
	proto.RegisterType((*GetViziersByOrgResponse)(nil), "pl.services.GetViziersByOrgResponse")
	proto.RegisterType((*GetSSLCertsRequest)(nil), "pl.services.GetSSLCertsRequest")
	proto.RegisterType((*GetSSLCertsResponse)(nil), "pl.services.GetSSLCertsResponse")
}

func init() {
	proto.RegisterFile("src/cloud/vzmgr/vzmgrpb/service.proto", fileDescriptor_7b112f5a7e47f58f)
}

var fileDescriptor_7b112f5a7e47f58f = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0xc7, 0x1d, 0xf6, 0x22, 0xd5, 0x63, 0x1a, 0xf2, 0x84, 0x36, 0x45, 0xe0, 0x96, 0x08, 0x04,
	0x17, 0x12, 0x31, 0x24, 0x2e, 0xd3, 0x0e, 0xac, 0x95, 0xb6, 0x20, 0x50, 0x45, 0xaa, 0x8d, 0x69,
	0x97, 0x29, 0x2f, 0x5e, 0xb0, 0x96, 0xc6, 0xc1, 0x76, 0x26, 0xb6, 0x13, 0x1f, 0x81, 0x8f, 0xc1,
	0xe7, 0xe0, 0xc4, 0x71, 0xc7, 0x9d, 0x26, 0x96, 0x5e, 0x38, 0xee, 0x23, 0xa0, 0xda, 0x59, 0xd7,
	0x74, 0x69, 0x2f, 0xc9, 0x63, 0x3f, 0xff, 0xe7, 0xe7, 0xbf, 0x9f, 0xa7, 0x0d, 0x7c, 0x21, 0x78,
	0xe8, 0x84, 0x09, 0xcb, 0x23, 0xe7, 0xf4, 0xbc, 0x1f, 0x73, 0xfd, 0xcc, 0x02, 0x47, 0x10, 0x7e,
	0x4a, 0x43, 0x62, 0x67, 0x9c, 0x49, 0x86, 0x96, 0xb2, 0xc4, 0x2e, 0x77, 0x84, 0xf9, 0x3a, 0xa6,
	0xf2, 0x6b, 0x1e, 0xd8, 0x21, 0xeb, 0x3b, 0x31, 0x8b, 0x99, 0xa3, 0x34, 0x41, 0x7e, 0xac, 0x56,
	0x6a, 0xa1, 0x22, 0x5d, 0x6b, 0xb6, 0xd4, 0x11, 0xac, 0xdf, 0x67, 0xa9, 0x93, 0xe7, 0x34, 0xd2,
	0x72, 0x15, 0x96, 0x8a, 0xa7, 0x77, 0x26, 0xd4, 0x33, 0x0b, 0xf4, 0x5b, 0xa7, 0xad, 0x2e, 0x34,
	0xdb, 0x9c, 0xf8, 0x92, 0xec, 0xd3, 0x73, 0x4a, 0x78, 0x3b, 0xc9, 0x85, 0x24, 0xdc, 0x23, 0xdf,
	0x72, 0x22, 0x24, 0x7a, 0x03, 0x17, 0x19, 0x8f, 0x8f, 0x68, 0xb4, 0x6e, 0xb4, 0x8c, 0x57, 0x4b,
	0x1b, 0x2b, 0x76, 0x96, 0xd8, 0x43, 0x78, 0x16, 0xd8, 0x7b, 0x7b, 0x6e, 0x67, 0xbb, 0x51, 0x5c,
	0x35, 0x17, 0xba, 0x3c, 0x76, 0x3b, 0xde, 0x02, 0xe3, 0xb1, 0x1b, 0x59, 0x07, 0x70, 0x6d, 0x87,
	0x48, 0x4d, 0x13, 0xdb, 0x67, 0x5d, 0x1e, 0x7b, 0x44, 0x64, 0x2c, 0x15, 0x04, 0x6d, 0x41, 0x78,
	0xaa, 0xf6, 0x8f, 0x68, 0x24, 0xd6, 0x8d, 0xd6, 0x5c, 0x1d, 0x71, 0xb9, 0xb8, 0x6a, 0x36, 0x74,
	0xb9, 0xdb, 0x11, 0x5e, 0x43, 0x57, 0xb8, 0x91, 0xb0, 0x7a, 0x10, 0xed, 0x10, 0xd9, 0xeb, 0x7d,
	0x6c, 0x13, 0x2e, 0xc5, 0xad, 0xc5, 0x2d, 0x08, 0x43, 0x6d, 0x7a, 0x86, 0x4d, 0x05, 0x2d, 0xef,
	0xe6, 0x76, 0xbc, 0x46, 0x59, 0xe1, 0x46, 0xd6, 0x26, 0x5c, 0xad, 0x40, 0x4b, 0xab, 0x8f, 0xe0,
	0xdc, 0x09, 0x39, 0x53, 0xb8, 0x86, 0x37, 0x0c, 0x11, 0x82, 0xf3, 0x21, 0xe1, 0x72, 0xfd, 0x81,
	0xda, 0x52, 0xf1, 0xc6, 0xef, 0x79, 0xf8, 0x70, 0xff, 0xf0, 0x53, 0xcc, 0x7b, 0x7a, 0x7c, 0xe8,
	0x33, 0x5c, 0xad, 0xe9, 0x26, 0x7a, 0x69, 0x8f, 0x8d, 0xd8, 0x9e, 0xde, 0x6f, 0x73, 0xd2, 0xb8,
	0x05, 0x90, 0x07, 0x97, 0xc6, 0x0c, 0xa2, 0x66, 0x05, 0x75, 0xbf, 0x1f, 0x66, 0x6b, 0xba, 0x40,
	0xdf, 0xcd, 0x02, 0xe8, 0x03, 0x5c, 0x99, 0x98, 0x11, 0x9a, 0x3c, 0xd9, 0x7c, 0x3e, 0xc9, 0xa9,
	0x1b, 0xa9, 0x05, 0xd0, 0x26, 0x5c, 0x1e, 0x25, 0xdd, 0xf4, 0x98, 0xdd, 0x27, 0xad, 0x55, 0x48,
	0x77, 0x4a, 0x0b, 0xa0, 0xee, 0xd8, 0x8f, 0xa5, 0xcd, 0xd2, 0x94, 0x84, 0x92, 0xb2, 0xb4, 0x1e,
	0xf3, 0xac, 0x06, 0x53, 0xad, 0xb1, 0x00, 0xfa, 0x02, 0x57, 0x2a, 0x19, 0x12, 0x21, 0xab, 0x52,
	0xe7, 0x91, 0x98, 0x0e, 0x3b, 0xae, 0x55, 0xb7, 0x4d, 0xc3, 0x33, 0x34, 0xef, 0xc3, 0x13, 0x0b,
	0xa0, 0x03, 0xf8, 0x78, 0xd7, 0x4f, 0xa3, 0xa4, 0x9c, 0xdb, 0x2e, 0xf1, 0xb9, 0x0c, 0x88, 0x2f,
	0xd1, 0x93, 0x1a, 0x5b, 0xa3, 0xac, 0xd9, 0x9c, 0x95, 0x55, 0xe4, 0xed, 0xe4, 0xe2, 0x1a, 0x83,
	0xcb, 0x6b, 0x0c, 0x6e, 0xae, 0xb1, 0xf1, 0xa3, 0xc0, 0xc6, 0xaf, 0x02, 0x1b, 0x7f, 0x0a, 0x6c,
	0x5c, 0x14, 0xd8, 0xf8, 0x5b, 0x60, 0xe3, 0x5f, 0x81, 0xc1, 0x4d, 0x81, 0x8d, 0x9f, 0x03, 0x0c,
	0x2e, 0x06, 0x18, 0x5c, 0x0e, 0x30, 0x38, 0x7c, 0x97, 0xd1, 0xef, 0x94, 0x24, 0x7e, 0x20, 0x6c,
	0x9f, 0x3a, 0xa3, 0x85, 0x33, 0xe5, 0x93, 0xb3, 0x59, 0xbe, 0x83, 0x45, 0xf5, 0xb7, 0x7f, 0xfb,
	0x3f, 0x00, 0x00, 0xff, 0xff, 0x91, 0x81, 0xb7, 0x25, 0x9c, 0x04, 0x00, 0x00,
}

func (this *CreateVizierClusterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateVizierClusterRequest)
	if !ok {
		that2, ok := that.(CreateVizierClusterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	return true
}
func (this *GetViziersByOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetViziersByOrgResponse)
	if !ok {
		that2, ok := that.(GetViziersByOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VizierIDs) != len(that1.VizierIDs) {
		return false
	}
	for i := range this.VizierIDs {
		if !this.VizierIDs[i].Equal(that1.VizierIDs[i]) {
			return false
		}
	}
	return true
}
func (this *GetSSLCertsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSSLCertsRequest)
	if !ok {
		that2, ok := that.(GetSSLCertsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClusterID.Equal(that1.ClusterID) {
		return false
	}
	return true
}
func (this *GetSSLCertsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSSLCertsResponse)
	if !ok {
		that2, ok := that.(GetSSLCertsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Cert != that1.Cert {
		return false
	}
	return true
}
func (this *CreateVizierClusterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vzmgrpb.CreateVizierClusterRequest{")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetViziersByOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vzmgrpb.GetViziersByOrgResponse{")
	if this.VizierIDs != nil {
		s = append(s, "VizierIDs: "+fmt.Sprintf("%#v", this.VizierIDs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSSLCertsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&vzmgrpb.GetSSLCertsRequest{")
	if this.ClusterID != nil {
		s = append(s, "ClusterID: "+fmt.Sprintf("%#v", this.ClusterID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSSLCertsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&vzmgrpb.GetSSLCertsResponse{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VZMgrServiceClient is the client API for VZMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VZMgrServiceClient interface {
	CreateVizierCluster(ctx context.Context, in *CreateVizierClusterRequest, opts ...grpc.CallOption) (*proto1.UUID, error)
	GetSSLCerts(ctx context.Context, in *GetSSLCertsRequest, opts ...grpc.CallOption) (*GetSSLCertsResponse, error)
	GetViziersByOrg(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*GetViziersByOrgResponse, error)
	GetVizierInfo(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*cloudpb.VizierInfo, error)
	GetVizierConnectionInfo(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*cloudpb.VizierConnectionInfo, error)
	VizierConnected(ctx context.Context, in *cloudpb.RegisterVizierRequest, opts ...grpc.CallOption) (*cloudpb.RegisterVizierAck, error)
	HandleVizierHeartbeat(ctx context.Context, in *cloudpb.VizierHeartbeat, opts ...grpc.CallOption) (*cloudpb.VizierHeartbeatAck, error)
}

type vZMgrServiceClient struct {
	cc *grpc.ClientConn
}

func NewVZMgrServiceClient(cc *grpc.ClientConn) VZMgrServiceClient {
	return &vZMgrServiceClient{cc}
}

func (c *vZMgrServiceClient) CreateVizierCluster(ctx context.Context, in *CreateVizierClusterRequest, opts ...grpc.CallOption) (*proto1.UUID, error) {
	out := new(proto1.UUID)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/CreateVizierCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) GetSSLCerts(ctx context.Context, in *GetSSLCertsRequest, opts ...grpc.CallOption) (*GetSSLCertsResponse, error) {
	out := new(GetSSLCertsResponse)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/GetSSLCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) GetViziersByOrg(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*GetViziersByOrgResponse, error) {
	out := new(GetViziersByOrgResponse)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/GetViziersByOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) GetVizierInfo(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*cloudpb.VizierInfo, error) {
	out := new(cloudpb.VizierInfo)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/GetVizierInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) GetVizierConnectionInfo(ctx context.Context, in *proto1.UUID, opts ...grpc.CallOption) (*cloudpb.VizierConnectionInfo, error) {
	out := new(cloudpb.VizierConnectionInfo)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/GetVizierConnectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) VizierConnected(ctx context.Context, in *cloudpb.RegisterVizierRequest, opts ...grpc.CallOption) (*cloudpb.RegisterVizierAck, error) {
	out := new(cloudpb.RegisterVizierAck)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/VizierConnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vZMgrServiceClient) HandleVizierHeartbeat(ctx context.Context, in *cloudpb.VizierHeartbeat, opts ...grpc.CallOption) (*cloudpb.VizierHeartbeatAck, error) {
	out := new(cloudpb.VizierHeartbeatAck)
	err := c.cc.Invoke(ctx, "/pl.services.VZMgrService/HandleVizierHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VZMgrServiceServer is the server API for VZMgrService service.
type VZMgrServiceServer interface {
	CreateVizierCluster(context.Context, *CreateVizierClusterRequest) (*proto1.UUID, error)
	GetSSLCerts(context.Context, *GetSSLCertsRequest) (*GetSSLCertsResponse, error)
	GetViziersByOrg(context.Context, *proto1.UUID) (*GetViziersByOrgResponse, error)
	GetVizierInfo(context.Context, *proto1.UUID) (*cloudpb.VizierInfo, error)
	GetVizierConnectionInfo(context.Context, *proto1.UUID) (*cloudpb.VizierConnectionInfo, error)
	VizierConnected(context.Context, *cloudpb.RegisterVizierRequest) (*cloudpb.RegisterVizierAck, error)
	HandleVizierHeartbeat(context.Context, *cloudpb.VizierHeartbeat) (*cloudpb.VizierHeartbeatAck, error)
}

// UnimplementedVZMgrServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVZMgrServiceServer struct {
}

func (*UnimplementedVZMgrServiceServer) CreateVizierCluster(ctx context.Context, req *CreateVizierClusterRequest) (*proto1.UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVizierCluster not implemented")
}
func (*UnimplementedVZMgrServiceServer) GetSSLCerts(ctx context.Context, req *GetSSLCertsRequest) (*GetSSLCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSLCerts not implemented")
}
func (*UnimplementedVZMgrServiceServer) GetViziersByOrg(ctx context.Context, req *proto1.UUID) (*GetViziersByOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViziersByOrg not implemented")
}
func (*UnimplementedVZMgrServiceServer) GetVizierInfo(ctx context.Context, req *proto1.UUID) (*cloudpb.VizierInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVizierInfo not implemented")
}
func (*UnimplementedVZMgrServiceServer) GetVizierConnectionInfo(ctx context.Context, req *proto1.UUID) (*cloudpb.VizierConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVizierConnectionInfo not implemented")
}
func (*UnimplementedVZMgrServiceServer) VizierConnected(ctx context.Context, req *cloudpb.RegisterVizierRequest) (*cloudpb.RegisterVizierAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VizierConnected not implemented")
}
func (*UnimplementedVZMgrServiceServer) HandleVizierHeartbeat(ctx context.Context, req *cloudpb.VizierHeartbeat) (*cloudpb.VizierHeartbeatAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleVizierHeartbeat not implemented")
}

func RegisterVZMgrServiceServer(s *grpc.Server, srv VZMgrServiceServer) {
	s.RegisterService(&_VZMgrService_serviceDesc, srv)
}

func _VZMgrService_CreateVizierCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVizierClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).CreateVizierCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/CreateVizierCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).CreateVizierCluster(ctx, req.(*CreateVizierClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_GetSSLCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSSLCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).GetSSLCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/GetSSLCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).GetSSLCerts(ctx, req.(*GetSSLCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_GetViziersByOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).GetViziersByOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/GetViziersByOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).GetViziersByOrg(ctx, req.(*proto1.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_GetVizierInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).GetVizierInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/GetVizierInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).GetVizierInfo(ctx, req.(*proto1.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_GetVizierConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).GetVizierConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/GetVizierConnectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).GetVizierConnectionInfo(ctx, req.(*proto1.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_VizierConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloudpb.RegisterVizierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).VizierConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/VizierConnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).VizierConnected(ctx, req.(*cloudpb.RegisterVizierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VZMgrService_HandleVizierHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloudpb.VizierHeartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VZMgrServiceServer).HandleVizierHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.VZMgrService/HandleVizierHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VZMgrServiceServer).HandleVizierHeartbeat(ctx, req.(*cloudpb.VizierHeartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

var _VZMgrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.services.VZMgrService",
	HandlerType: (*VZMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVizierCluster",
			Handler:    _VZMgrService_CreateVizierCluster_Handler,
		},
		{
			MethodName: "GetSSLCerts",
			Handler:    _VZMgrService_GetSSLCerts_Handler,
		},
		{
			MethodName: "GetViziersByOrg",
			Handler:    _VZMgrService_GetViziersByOrg_Handler,
		},
		{
			MethodName: "GetVizierInfo",
			Handler:    _VZMgrService_GetVizierInfo_Handler,
		},
		{
			MethodName: "GetVizierConnectionInfo",
			Handler:    _VZMgrService_GetVizierConnectionInfo_Handler,
		},
		{
			MethodName: "VizierConnected",
			Handler:    _VZMgrService_VizierConnected_Handler,
		},
		{
			MethodName: "HandleVizierHeartbeat",
			Handler:    _VZMgrService_HandleVizierHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/vzmgr/vzmgrpb/service.proto",
}

func (m *CreateVizierClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateVizierClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateVizierClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size, err := m.OrgID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetViziersByOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetViziersByOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetViziersByOrgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VizierIDs) > 0 {
		for iNdEx := len(m.VizierIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VizierIDs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSSLCertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSSLCertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSSLCertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterID != nil {
		{
			size, err := m.ClusterID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSSLCertsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSSLCertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSSLCertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintService(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintService(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateVizierClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != nil {
		l = m.OrgID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetViziersByOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VizierIDs) > 0 {
		for _, e := range m.VizierIDs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GetSSLCertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != nil {
		l = m.ClusterID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetSSLCertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateVizierClusterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVizierClusterRequest{`,
		`OrgID:` + strings.Replace(fmt.Sprintf("%v", this.OrgID), "UUID", "proto1.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetViziersByOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVizierIDs := "[]*UUID{"
	for _, f := range this.VizierIDs {
		repeatedStringForVizierIDs += strings.Replace(fmt.Sprintf("%v", f), "UUID", "proto1.UUID", 1) + ","
	}
	repeatedStringForVizierIDs += "}"
	s := strings.Join([]string{`&GetViziersByOrgResponse{`,
		`VizierIDs:` + repeatedStringForVizierIDs + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSSLCertsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSSLCertsRequest{`,
		`ClusterID:` + strings.Replace(fmt.Sprintf("%v", this.ClusterID), "UUID", "proto1.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSSLCertsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSSLCertsResponse{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Cert:` + fmt.Sprintf("%v", this.Cert) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateVizierClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVizierClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVizierClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrgID == nil {
				m.OrgID = &proto1.UUID{}
			}
			if err := m.OrgID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetViziersByOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetViziersByOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetViziersByOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierIDs = append(m.VizierIDs, &proto1.UUID{})
			if err := m.VizierIDs[len(m.VizierIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSSLCertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSSLCertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSSLCertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterID == nil {
				m.ClusterID = &proto1.UUID{}
			}
			if err := m.ClusterID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSSLCertsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSSLCertsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSSLCertsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
