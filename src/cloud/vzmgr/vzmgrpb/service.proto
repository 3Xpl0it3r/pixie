syntax = "proto3";

package pl.services;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/common/uuid/proto/uuid.proto";
import "src/shared/cvmsgspb/cvmsgs.proto";

option go_package = "pixielabs.ai/pixielabs/src/cloud/vzmgr/vzmgrpb;vzmgrpb";

service VZMgrService {
  rpc CreateVizierCluster(CreateVizierClusterRequest) returns (uuidpb.UUID) {}
  rpc GetViziersByOrg(uuidpb.UUID) returns (GetViziersByOrgResponse) {}
  rpc GetVizierInfo(uuidpb.UUID) returns (cvmsgspb.VizierInfo) {}
  rpc GetViziersByShard(GetViziersByShardRequest) returns (GetViziersByShardResponse) {}
  rpc GetVizierConnectionInfo(uuidpb.UUID) returns (cvmsgspb.VizierConnectionInfo) {}
  // Call to acknowledge connection of a vizier.
  rpc VizierConnected(cvmsgspb.RegisterVizierRequest) returns (cvmsgspb.RegisterVizierAck) {}
  rpc UpdateVizierConfig(cvmsgspb.UpdateVizierConfigRequest) returns (cvmsgspb.UpdateVizierConfigResponse) {}
}

message CreateVizierClusterRequest {
  uuidpb.UUID org_id = 1 [
                          (gogoproto.customname) = "OrgID"
                         ];
}

message GetViziersByOrgResponse {
  repeated uuidpb.UUID vizier_ids = 1 [
                                       (gogoproto.customname) = "VizierIDs"
                                      ];
}
message GetViziersByShardRequest {
    string shard_id = 1 [
                        (gogoproto.customname) = "ShardID"
                        ];
}

// GetViziersByShardResponse, get a information about all connected viziers in a shard.
message GetViziersByShardResponse {
    message VizierInfo {
        uuidpb.UUID vizier_id = 1 [
                                  (gogoproto.customname) = "VizierID"
                                  ];
        uuidpb.UUID org_id = 2 [
                               (gogoproto.customname) = "OrgID"
                               ];
    }
    repeated VizierInfo viziers = 1;
}
