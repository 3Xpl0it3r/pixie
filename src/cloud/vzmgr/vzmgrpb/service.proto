syntax = "proto3";

package pl.services;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/common/uuid/proto/uuid.proto";
import "src/shared/cvmsgspb/cvmsgs.proto";

option go_package = "pixielabs.ai/pixielabs/src/cloud/vzmgr/vzmgrpb;vzmgrpb";

service VZMgrService {
  rpc CreateVizierCluster(CreateVizierClusterRequest) returns (uuidpb.UUID) {}
  rpc GetSSLCerts(GetSSLCertsRequest) returns (GetSSLCertsResponse) {}
  rpc GetViziersByOrg(uuidpb.UUID) returns (GetViziersByOrgResponse) {}
  rpc GetVizierInfo(uuidpb.UUID) returns (pl.cvmsgspb.VizierInfo) {}
  rpc GetVizierConnectionInfo(uuidpb.UUID) returns (pl.cvmsgspb.VizierConnectionInfo) {}
  // Call to acknowledge connection of a vizier.
  rpc VizierConnected(pl.cvmsgspb.RegisterVizierRequest) returns (pl.cvmsgspb.RegisterVizierAck) {}
  rpc HandleVizierHeartbeat(pl.cvmsgspb.VizierHeartbeat) returns (pl.cvmsgspb.VizierHeartbeatAck) {}
}

message CreateVizierClusterRequest {
  uuidpb.UUID org_id = 1 [
                          (gogoproto.customname) = "OrgID"
                         ];
;
}

message GetViziersByOrgResponse {
  repeated uuidpb.UUID vizier_ids = 1 [
                                       (gogoproto.customname) = "VizierIDs"
                                      ];
}

message GetSSLCertsRequest {
  uuidpb.UUID cluster_id = 1 [
                              (gogoproto.customname) = "ClusterID"
                             ];
}

message GetSSLCertsResponse {
  string key = 1;
  string cert = 2;
}
