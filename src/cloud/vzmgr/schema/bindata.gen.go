// Code generated by go-bindata.
// sources:
// 000001_create_cluster_tables.down.sql
// 000001_create_cluster_tables.down.sql~
// 000001_create_cluster_tables.up.sql
// 000001_create_cluster_tables.up.sql~
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_cluster_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xcb\xac\xca\x4c\x2d\x8a\x4f\xce\x29\x2d\x2e\x49\x2d\x8a\xcf\xcc\x4b\xcb\xb7\xe6\x82\xa8\x8c\x0c\xc0\xa2\xb0\xb8\x24\xb1\xa4\xb4\x18\xa6\x04\xaf\x61\xd6\x5c\x80\x00\x00\x00\xff\xff\x12\xa8\x9d\x4b\x72\x00\x00\x00")

func _000001_create_cluster_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_cluster_tablesDownSql,
		"000001_create_cluster_tables.down.sql",
	)
}

func _000001_create_cluster_tablesDownSql() (*asset, error) {
	bytes, err := _000001_create_cluster_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_cluster_tables.down.sql", size: 114, mode: os.FileMode(436), modTime: time.Unix(1566514280, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_create_cluster_tablesDownSql2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xce\x2c\x49\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xff\xc7\xee\xf6\x1c\x00\x00\x00")

func _000001_create_cluster_tablesDownSql2Bytes() ([]byte, error) {
	return bindataRead(
		__000001_create_cluster_tablesDownSql2,
		"000001_create_cluster_tables.down.sql~",
	)
}

func _000001_create_cluster_tablesDownSql2() (*asset, error) {
	bytes, err := _000001_create_cluster_tablesDownSql2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_cluster_tables.down.sql~", size: 28, mode: os.FileMode(436), modTime: time.Unix(1566513060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_create_cluster_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x5f\x6f\xda\x30\x14\xc5\xdf\xfd\x29\x8e\xfa\x02\x48\xb4\x62\xd2\xde\xfa\x94\x81\x59\x23\xc0\x61\x89\xa3\x96\xa7\xc8\x4d\x2e\xc4\x1b\x24\x95\x6d\x40\xdb\xa7\x9f\x9c\x86\x8c\x3f\xdd\xb4\x17\x64\x7c\xcf\xfd\xdd\x93\x73\x3d\x8e\x79\x20\x39\xf8\x8b\xe4\x22\x09\x23\x81\x70\x0a\x11\x49\xf0\x97\x30\x91\x09\xee\xf6\x7b\x5d\xdc\xd7\xd6\xbe\xdd\x3d\x32\x76\x7f\x0f\x59\x6a\x0b\xa7\x5e\xb7\x84\xbc\xae\x9c\xd2\x95\x45\xbe\xdd\x5b\x47\x06\x86\x36\xda\x3a\xa3\x9c\xae\x2b\xe8\x6a\x5d\x9b\x5d\x73\x1e\x42\xe5\x39\x59\xdb\x74\x98\x7a\x3b\x04\xb9\xfc\x81\xb5\xa3\x65\xf0\x65\xce\x71\xd0\xbf\x34\x99\xec\x84\xea\x33\xa0\x99\x46\x08\x27\x70\x35\xf6\x96\xb0\xae\x0d\x9c\x9f\xdf\xaa\x1e\x18\xa0\x0b\xa4\x69\x38\x41\x2a\xc2\x6f\x29\xc7\x84\x4f\x83\x74\x2e\xe1\x6d\x67\x1b\xaa\xc8\x28\x47\xd9\xe1\x73\x7f\x30\x7c\x27\xd6\x66\x93\xe9\x02\xfe\x23\x4a\x42\x7d\xac\xc8\xa0\x5e\xdf\x60\x5b\x59\x83\xf6\x71\x88\x74\x3e\x6f\x09\x52\xef\xc8\x3a\xb5\x7b\xc3\xb1\xa4\xea\xa2\x13\x47\x65\x91\x1b\x52\x8e\x0a\x4f\x69\x8f\x99\x72\x90\xe1\x82\x27\x32\x58\x2c\x3b\x8b\x22\x7a\xee\x5c\x9d\x31\x09\xa5\x3a\x10\xd6\xda\x58\x07\x4b\x57\x13\x3c\xb5\x29\x65\xbe\x74\x01\x1e\x32\x06\x2c\xe3\x70\x11\xc4\x2b\xcc\xf8\xaa\xaf\x8b\x01\x1b\x3c\x32\xd6\x05\xbd\x5a\x76\x39\x5b\xa7\xdc\xde\x22\x48\xc0\x45\xba\x40\xbf\x97\x8a\x99\x88\x9e\x45\x6f\x88\x5e\x34\xf3\xbf\xa9\x78\xe2\xc1\x5c\x3e\xad\xfc\x9f\x49\x98\x8c\x23\x21\xf8\x58\xf2\x49\xcf\x33\xff\xb1\xbb\xcc\x6f\xfe\xff\x17\x78\xdd\xfc\x97\xd0\x4b\x82\xd3\x3b\x7a\xdf\x15\x61\xab\xac\x43\x49\xca\xb8\x57\x52\xce\x73\xfc\x4d\xd6\xdd\x9c\xc7\xf2\xc7\xc8\x12\xaa\x28\x8c\x7f\x89\x2d\xe6\xcc\xc7\xa9\x72\x50\x26\x2f\x95\xe9\x7f\x1a\x8d\x46\x83\xb3\x66\xab\x37\x95\xae\x36\xf8\x41\x3f\x3f\xe8\xfe\x7e\x74\x59\xab\xc8\xbc\xe2\x8a\xc2\x80\x36\xf1\x8b\xfc\x6f\x56\x76\x13\x46\xe3\x60\x1a\xc5\x3c\xfc\x2a\xbc\x02\x1f\x48\x10\xf3\x29\x8f\xb9\x18\xf3\xe4\x2a\xcd\xd3\x13\xf8\x1d\x00\x00\xff\xff\x5b\x32\x4d\x47\xe5\x03\x00\x00")

func _000001_create_cluster_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_cluster_tablesUpSql,
		"000001_create_cluster_tables.up.sql",
	)
}

func _000001_create_cluster_tablesUpSql() (*asset, error) {
	bytes, err := _000001_create_cluster_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_cluster_tables.up.sql", size: 997, mode: os.FileMode(436), modTime: time.Unix(1566514224, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_create_cluster_tablesUpSql2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x51\x6f\xda\x30\x14\x85\xdf\xfd\x2b\x8e\xfa\x02\x48\x50\x31\x69\x6f\x7d\xca\xc0\xac\x11\xe0\xb0\xc4\x51\xcb\x53\xe4\x26\x17\xe2\x0d\x92\xca\x36\xa0\xed\xd7\x4f\x4e\x03\x0d\x74\x9b\xf6\x12\x39\xbe\xf7\x7e\xf7\xe4\x9c\x4c\x62\x1e\x48\x0e\xfe\x2c\xb9\x48\xc2\x48\x20\x9c\x41\x44\x12\xfc\x39\x4c\x64\x82\xbb\xc3\x41\x17\xa3\xda\xda\xd7\xbb\x07\xc6\x46\x23\xc8\x52\x5b\x38\xf5\xb2\x23\xe4\x75\xe5\x94\xae\x2c\xf2\xdd\xc1\x3a\x32\x30\xb4\xd5\xd6\x19\xe5\x74\x5d\x41\x57\x9b\xda\xec\x9b\xf3\x10\x2a\xcf\xc9\xda\x66\xc2\xd4\xbb\x21\xc8\xe5\xf7\xac\x5d\x2d\x83\x2f\x0b\x8e\xa3\xfe\xa5\xc9\x64\x67\x54\x9f\x01\xcd\x36\x42\x38\x85\xab\x71\xb0\x84\x4d\x6d\xe0\xfc\xfe\xb6\xeb\x9e\x01\xba\x40\x9a\x86\x53\xa4\x22\xfc\x96\x72\x4c\xf9\x2c\x48\x17\x12\x5e\x76\xb6\xa5\x8a\x8c\x72\x94\x1d\x3f\xf7\x07\xc3\x37\x62\x6d\xb6\x99\x2e\xe0\x3f\xa2\x24\xd4\xa7\x8a\x0c\xea\xcd\x07\x6c\xdb\xd6\xa0\xbd\x1d\x22\x5d\x2c\x5a\x82\xd4\x7b\xb2\x4e\xed\x5f\x71\x2a\xa9\xba\x9a\xc4\x49\x59\xe4\x86\x94\xa3\xc2\x53\xda\x63\xa6\x1c\x64\xb8\xe4\x89\x0c\x96\xab\x8b\x44\x11\x3d\x5d\x54\x75\x98\x84\x52\x1d\x09\x1b\x6d\xac\x83\xa5\x9b\x0d\x9e\xda\x94\x32\x5f\xba\x02\x0f\x19\x03\x56\x71\xb8\x0c\xe2\x35\xe6\x7c\xdd\xd7\xc5\x80\x0d\x1e\x18\xbb\x18\xbd\x5e\x5d\x7c\xb6\x4e\xb9\x83\x45\x90\x80\x8b\x74\x89\x7e\x2f\x15\x73\x11\x3d\x89\xde\x10\xbd\x68\xee\x9f\xa9\x78\xe4\xc1\x42\x3e\xae\xfd\xcb\x34\x4c\x26\x91\x10\x7c\x22\xf9\xb4\xe7\x99\xff\xc8\x2e\xf3\xc9\x63\xf0\xbf\x01\xde\x0e\xff\xc5\xf4\x92\xe0\xf4\x9e\xde\xb2\x22\xec\x94\x75\x28\x49\x19\xf7\x42\xca\x79\x8e\xbf\xc9\x2e\x37\x5d\x5b\xde\x85\xac\xa0\x8a\xc2\xf8\x3f\xb1\xc5\x74\x74\x9c\x2b\x47\x65\xf2\x52\x99\xfe\xa7\xf1\x78\x3c\xe8\x0c\x5b\xbd\xad\x74\xb5\xc5\x0f\xfa\xf9\x87\xe9\xef\x27\x97\xb5\x1d\x99\xef\xb8\xa1\x30\xa0\x75\xfc\xca\xff\x0f\x91\xbd\xbb\xd0\xac\x9e\x45\x31\x0f\xbf\x0a\x5f\x42\xb7\x86\x98\xcf\x78\xcc\xc5\x84\x27\x37\xfe\x9d\x43\xff\x1d\x00\x00\xff\xff\x3c\xb4\xa5\x1d\xd7\x03\x00\x00")

func _000001_create_cluster_tablesUpSql2Bytes() ([]byte, error) {
	return bindataRead(
		__000001_create_cluster_tablesUpSql2,
		"000001_create_cluster_tables.up.sql~",
	)
}

func _000001_create_cluster_tablesUpSql2() (*asset, error) {
	bytes, err := _000001_create_cluster_tablesUpSql2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_cluster_tables.up.sql~", size: 983, mode: os.FileMode(436), modTime: time.Unix(1566514027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_cluster_tables.down.sql": _000001_create_cluster_tablesDownSql,
	"000001_create_cluster_tables.down.sql~": _000001_create_cluster_tablesDownSql2,
	"000001_create_cluster_tables.up.sql": _000001_create_cluster_tablesUpSql,
	"000001_create_cluster_tables.up.sql~": _000001_create_cluster_tablesUpSql2,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_cluster_tables.down.sql": &bintree{_000001_create_cluster_tablesDownSql, map[string]*bintree{}},
	"000001_create_cluster_tables.down.sql~": &bintree{_000001_create_cluster_tablesDownSql2, map[string]*bintree{}},
	"000001_create_cluster_tables.up.sql": &bintree{_000001_create_cluster_tablesUpSql, map[string]*bintree{}},
	"000001_create_cluster_tables.up.sql~": &bintree{_000001_create_cluster_tablesUpSql2, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

