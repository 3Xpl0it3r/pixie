// Code generated by go-bindata.
// sources:
// 000001_create_dns_tables.down.sql
// 000001_create_dns_tables.up.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_dns_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2e\xce\x89\x4f\x4e\x2d\x2a\x29\xb6\xe6\xc2\x2a\x9f\x92\x57\x1c\x9f\x98\x92\x52\x94\x5a\x5c\x9c\x5a\x6c\xcd\x05\x08\x00\x00\xff\xff\xbd\x6d\xb7\xe6\x44\x00\x00\x00")

func _000001_create_dns_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_dns_tablesDownSql,
		"000001_create_dns_tables.down.sql",
	)
}

func _000001_create_dns_tablesDownSql() (*asset, error) {
	bytes, err := _000001_create_dns_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_dns_tables.down.sql", size: 68, mode: os.FileMode(436), modTime: time.Unix(1569805108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_create_dns_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x6e\xdb\x30\x10\x44\xef\xfc\x8a\x41\x4e\x0e\x50\x07\xee\x39\x27\xb7\x61\x01\xa2\xae\x92\x5a\x12\x90\x9c\x0c\x5a\x5c\x57\x44\x2d\x32\xe1\x92\x2d\xfa\xf7\x05\x25\x51\x69\x0a\x1f\x72\x23\xb4\xfb\x66\x67\x46\x9f\xf7\x72\xdb\x48\xc8\xc7\x46\x56\xb5\xba\xaf\xa0\xbe\xa0\xba\x6f\x20\x1f\x55\xdd\xd4\xb8\x4a\xc9\x9a\xb5\x67\x7e\xbe\xba\x15\x62\xbd\x46\xd3\x5b\x46\xd4\xc7\x33\xa1\xf3\x2e\x6a\xeb\x18\xd6\x9d\x7c\x18\x74\xb4\xde\x41\x1f\x7d\x8a\xf0\x29\xa0\xae\x77\xe8\x28\x44\x86\x76\x06\xbf\x7b\xdb\xf5\xe8\xce\x89\x23\x05\x86\x0e\x84\xc4\xd6\xfd\x40\xec\x69\xb8\x11\xb3\x8d\x66\xfb\x69\x27\xc1\x7c\x3e\x4c\xe4\x4a\x00\xe3\x51\x82\xba\xc3\xc9\x87\xbc\x3e\xaa\xde\x08\xc0\x1a\xb4\xad\xba\x43\x5b\xa9\xef\xad\xfc\x30\xed\xce\x27\x0e\xd6\x20\x3b\xed\x29\xaf\xf9\xd3\x04\x4e\xb3\xd7\xcb\x8b\xd4\x3f\x54\x96\x2c\x5a\x14\x62\x51\x19\xdf\xc5\x41\xc9\x36\xa2\x79\xf0\x4b\x87\xae\xd7\x61\xf5\x71\xb3\xd9\x5c\xcf\xf4\x4f\xfa\x53\xe0\xfc\xbc\xc4\xe6\xef\x6f\x50\x71\x7d\x2b\xc4\xdb\x36\x8c\xe3\x83\x36\x26\x10\x33\x2d\x8d\xbc\x23\xe5\x85\x58\xe3\x9f\xad\xda\xdd\x6e\x76\xc8\xf4\x72\x70\x69\x28\x12\x4c\x2f\x89\x5c\x47\x70\x69\x38\x52\x40\xf4\x48\x4c\x8b\x71\xe3\x18\xb3\x91\xac\xbd\xc0\x2e\xce\x72\xf6\xb9\x18\x5d\x4a\x4b\x21\x90\x8b\x50\x0f\x85\xbc\x60\xb2\x4c\xfe\xeb\x50\x00\x0f\x7b\xf5\x6d\xbb\x7f\xc2\x57\xf9\xb4\x7a\x8d\x32\x96\xf4\x37\x00\x00\xff\xff\x96\x6e\xf8\xd0\xb8\x02\x00\x00")

func _000001_create_dns_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_dns_tablesUpSql,
		"000001_create_dns_tables.up.sql",
	)
}

func _000001_create_dns_tablesUpSql() (*asset, error) {
	bytes, err := _000001_create_dns_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_dns_tables.up.sql", size: 696, mode: os.FileMode(436), modTime: time.Unix(1569805607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_dns_tables.down.sql": _000001_create_dns_tablesDownSql,
	"000001_create_dns_tables.up.sql": _000001_create_dns_tablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_dns_tables.down.sql": &bintree{_000001_create_dns_tablesDownSql, map[string]*bintree{}},
	"000001_create_dns_tables.up.sql": &bintree{_000001_create_dns_tablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

