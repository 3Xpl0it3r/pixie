// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/scriptmgr/scriptmgrpb/service.proto

package scriptmgrpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	scriptspb "pixielabs.ai/pixielabs/src/shared/scriptspb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExtractVisFuncsInfoRequest struct {
	Script    string   `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	FuncNames []string `protobuf:"bytes,2,rep,name=func_names,json=funcNames,proto3" json:"func_names,omitempty"`
}

func (m *ExtractVisFuncsInfoRequest) Reset()      { *m = ExtractVisFuncsInfoRequest{} }
func (*ExtractVisFuncsInfoRequest) ProtoMessage() {}
func (*ExtractVisFuncsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e19e341d77057158, []int{0}
}
func (m *ExtractVisFuncsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtractVisFuncsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtractVisFuncsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtractVisFuncsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtractVisFuncsInfoRequest.Merge(m, src)
}
func (m *ExtractVisFuncsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExtractVisFuncsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtractVisFuncsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtractVisFuncsInfoRequest proto.InternalMessageInfo

func (m *ExtractVisFuncsInfoRequest) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *ExtractVisFuncsInfoRequest) GetFuncNames() []string {
	if m != nil {
		return m.FuncNames
	}
	return nil
}

func init() {
	proto.RegisterType((*ExtractVisFuncsInfoRequest)(nil), "pl.services.ExtractVisFuncsInfoRequest")
}

func init() {
	proto.RegisterFile("src/cloud/scriptmgr/scriptmgrpb/service.proto", fileDescriptor_e19e341d77057158)
}

var fileDescriptor_e19e341d77057158 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4b, 0x03, 0x31,
	0x18, 0xc6, 0x13, 0x85, 0x42, 0xe3, 0x22, 0x27, 0x48, 0x39, 0xf0, 0xa5, 0x76, 0xb1, 0x4b, 0x13,
	0xd0, 0xd1, 0xad, 0xa0, 0xe0, 0xa0, 0x43, 0x0b, 0x0e, 0x2e, 0x72, 0x17, 0xd3, 0x6b, 0xa0, 0xbd,
	0x9c, 0xf9, 0xa3, 0x1d, 0xfd, 0x08, 0x7e, 0x0c, 0x3f, 0x8a, 0x63, 0xc7, 0x8e, 0x36, 0x5d, 0x1c,
	0xfb, 0x11, 0xe4, 0x72, 0xb5, 0xde, 0xa0, 0xb8, 0x3d, 0xcf, 0xcb, 0x2f, 0x79, 0xde, 0x27, 0x21,
	0x3d, 0xa3, 0x39, 0xe3, 0x13, 0xe5, 0x1e, 0x98, 0xe1, 0x5a, 0x16, 0x76, 0x9a, 0xe9, 0x1f, 0x55,
	0xa4, 0xcc, 0x08, 0xfd, 0x24, 0xb9, 0xa0, 0x85, 0x56, 0x56, 0x45, 0x7b, 0xc5, 0x84, 0x6e, 0x26,
	0x26, 0xee, 0x65, 0xd2, 0x8e, 0x5d, 0x4a, 0xb9, 0x9a, 0xb2, 0x4c, 0x65, 0x8a, 0x05, 0x26, 0x75,
	0xa3, 0xe0, 0x82, 0x09, 0xaa, 0x3a, 0x1b, 0x77, 0xca, 0x28, 0x33, 0x4e, 0xb4, 0xf8, 0xce, 0x32,
	0xe5, 0xfd, 0x95, 0xaa, 0x98, 0xce, 0x90, 0xc4, 0x17, 0x33, 0xab, 0x13, 0x6e, 0x6f, 0xa5, 0xb9,
	0x74, 0x39, 0x37, 0x57, 0xf9, 0x48, 0x0d, 0xc4, 0xa3, 0x13, 0xc6, 0x46, 0x87, 0xa4, 0x51, 0xe1,
	0x2d, 0xdc, 0xc6, 0xdd, 0xe6, 0x60, 0xe3, 0xa2, 0x23, 0x42, 0x46, 0x2e, 0xe7, 0xf7, 0x79, 0x32,
	0x15, 0xa6, 0xb5, 0xd3, 0xde, 0xed, 0x36, 0x07, 0xcd, 0x72, 0x72, 0x53, 0x0e, 0x4e, 0x9f, 0xc9,
	0xfe, 0x30, 0x80, 0xd7, 0x99, 0x1e, 0x56, 0xcb, 0x47, 0x9c, 0x1c, 0xfc, 0x12, 0x14, 0x9d, 0xd0,
	0x5a, 0x41, 0xfa, 0xf7, 0x2a, 0xf1, 0x71, 0x00, 0x43, 0x19, 0xba, 0x2d, 0x43, 0xeb, 0x64, 0x07,
	0xf5, 0x67, 0xf3, 0x25, 0xa0, 0xc5, 0x12, 0xd0, 0x7a, 0x09, 0xf8, 0xc5, 0x03, 0x7e, 0xf3, 0x80,
	0xdf, 0x3d, 0xe0, 0xb9, 0x07, 0xfc, 0xe1, 0x01, 0x7f, 0x7a, 0x40, 0x6b, 0x0f, 0xf8, 0x75, 0x05,
	0x68, 0xbe, 0x02, 0xb4, 0x58, 0x01, 0xba, 0xeb, 0x17, 0x72, 0x26, 0xc5, 0x24, 0x49, 0x0d, 0x4d,
	0x24, 0xdb, 0x1a, 0xf6, 0xcf, 0x4f, 0x9d, 0xd7, 0x74, 0xda, 0x08, 0xcf, 0x79, 0xf6, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x95, 0xe2, 0x0b, 0x2a, 0xdf, 0x01, 0x00, 0x00,
}

func (this *ExtractVisFuncsInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtractVisFuncsInfoRequest)
	if !ok {
		that2, ok := that.(ExtractVisFuncsInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Script != that1.Script {
		return false
	}
	if len(this.FuncNames) != len(that1.FuncNames) {
		return false
	}
	for i := range this.FuncNames {
		if this.FuncNames[i] != that1.FuncNames[i] {
			return false
		}
	}
	return true
}
func (this *ExtractVisFuncsInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&scriptmgrpb.ExtractVisFuncsInfoRequest{")
	s = append(s, "Script: "+fmt.Sprintf("%#v", this.Script)+",\n")
	s = append(s, "FuncNames: "+fmt.Sprintf("%#v", this.FuncNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScriptMgrServiceClient is the client API for ScriptMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScriptMgrServiceClient interface {
	ExtractVisFuncsInfo(ctx context.Context, in *ExtractVisFuncsInfoRequest, opts ...grpc.CallOption) (*scriptspb.VisFuncsInfo, error)
}

type scriptMgrServiceClient struct {
	cc *grpc.ClientConn
}

func NewScriptMgrServiceClient(cc *grpc.ClientConn) ScriptMgrServiceClient {
	return &scriptMgrServiceClient{cc}
}

func (c *scriptMgrServiceClient) ExtractVisFuncsInfo(ctx context.Context, in *ExtractVisFuncsInfoRequest, opts ...grpc.CallOption) (*scriptspb.VisFuncsInfo, error) {
	out := new(scriptspb.VisFuncsInfo)
	err := c.cc.Invoke(ctx, "/pl.services.ScriptMgrService/ExtractVisFuncsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScriptMgrServiceServer is the server API for ScriptMgrService service.
type ScriptMgrServiceServer interface {
	ExtractVisFuncsInfo(context.Context, *ExtractVisFuncsInfoRequest) (*scriptspb.VisFuncsInfo, error)
}

// UnimplementedScriptMgrServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScriptMgrServiceServer struct {
}

func (*UnimplementedScriptMgrServiceServer) ExtractVisFuncsInfo(ctx context.Context, req *ExtractVisFuncsInfoRequest) (*scriptspb.VisFuncsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractVisFuncsInfo not implemented")
}

func RegisterScriptMgrServiceServer(s *grpc.Server, srv ScriptMgrServiceServer) {
	s.RegisterService(&_ScriptMgrService_serviceDesc, srv)
}

func _ScriptMgrService_ExtractVisFuncsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractVisFuncsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServiceServer).ExtractVisFuncsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pl.services.ScriptMgrService/ExtractVisFuncsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServiceServer).ExtractVisFuncsInfo(ctx, req.(*ExtractVisFuncsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScriptMgrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pl.services.ScriptMgrService",
	HandlerType: (*ScriptMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractVisFuncsInfo",
			Handler:    _ScriptMgrService_ExtractVisFuncsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/scriptmgr/scriptmgrpb/service.proto",
}

func (m *ExtractVisFuncsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtractVisFuncsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtractVisFuncsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FuncNames) > 0 {
		for iNdEx := len(m.FuncNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FuncNames[iNdEx])
			copy(dAtA[i:], m.FuncNames[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.FuncNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Script) > 0 {
		i -= len(m.Script)
		copy(dAtA[i:], m.Script)
		i = encodeVarintService(dAtA, i, uint64(len(m.Script)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExtractVisFuncsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.FuncNames) > 0 {
		for _, s := range m.FuncNames {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExtractVisFuncsInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtractVisFuncsInfoRequest{`,
		`Script:` + fmt.Sprintf("%v", this.Script) + `,`,
		`FuncNames:` + fmt.Sprintf("%v", this.FuncNames) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExtractVisFuncsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtractVisFuncsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtractVisFuncsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuncNames = append(m.FuncNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
