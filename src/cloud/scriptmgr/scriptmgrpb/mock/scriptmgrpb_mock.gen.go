// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package mock_scriptmgrpb is a generated GoMock package.
package mock_scriptmgrpb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	scriptmgrpb "pixielabs.ai/pixielabs/src/cloud/scriptmgr/scriptmgrpb"
	scriptspb "pixielabs.ai/pixielabs/src/shared/scriptspb"
	reflect "reflect"
)

// MockScriptMgrServiceClient is a mock of ScriptMgrServiceClient interface
type MockScriptMgrServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockScriptMgrServiceClientMockRecorder
}

// MockScriptMgrServiceClientMockRecorder is the mock recorder for MockScriptMgrServiceClient
type MockScriptMgrServiceClientMockRecorder struct {
	mock *MockScriptMgrServiceClient
}

// NewMockScriptMgrServiceClient creates a new mock instance
func NewMockScriptMgrServiceClient(ctrl *gomock.Controller) *MockScriptMgrServiceClient {
	mock := &MockScriptMgrServiceClient{ctrl: ctrl}
	mock.recorder = &MockScriptMgrServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScriptMgrServiceClient) EXPECT() *MockScriptMgrServiceClientMockRecorder {
	return m.recorder
}

// ExtractVisFuncsInfo mocks base method
func (m *MockScriptMgrServiceClient) ExtractVisFuncsInfo(ctx context.Context, in *scriptmgrpb.ExtractVisFuncsInfoRequest, opts ...grpc.CallOption) (*scriptspb.VisFuncsInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExtractVisFuncsInfo", varargs...)
	ret0, _ := ret[0].(*scriptspb.VisFuncsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractVisFuncsInfo indicates an expected call of ExtractVisFuncsInfo
func (mr *MockScriptMgrServiceClientMockRecorder) ExtractVisFuncsInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractVisFuncsInfo", reflect.TypeOf((*MockScriptMgrServiceClient)(nil).ExtractVisFuncsInfo), varargs...)
}

// MockScriptMgrServiceServer is a mock of ScriptMgrServiceServer interface
type MockScriptMgrServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockScriptMgrServiceServerMockRecorder
}

// MockScriptMgrServiceServerMockRecorder is the mock recorder for MockScriptMgrServiceServer
type MockScriptMgrServiceServerMockRecorder struct {
	mock *MockScriptMgrServiceServer
}

// NewMockScriptMgrServiceServer creates a new mock instance
func NewMockScriptMgrServiceServer(ctrl *gomock.Controller) *MockScriptMgrServiceServer {
	mock := &MockScriptMgrServiceServer{ctrl: ctrl}
	mock.recorder = &MockScriptMgrServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScriptMgrServiceServer) EXPECT() *MockScriptMgrServiceServerMockRecorder {
	return m.recorder
}

// ExtractVisFuncsInfo mocks base method
func (m *MockScriptMgrServiceServer) ExtractVisFuncsInfo(arg0 context.Context, arg1 *scriptmgrpb.ExtractVisFuncsInfoRequest) (*scriptspb.VisFuncsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractVisFuncsInfo", arg0, arg1)
	ret0, _ := ret[0].(*scriptspb.VisFuncsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractVisFuncsInfo indicates an expected call of ExtractVisFuncsInfo
func (mr *MockScriptMgrServiceServerMockRecorder) ExtractVisFuncsInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractVisFuncsInfo", reflect.TypeOf((*MockScriptMgrServiceServer)(nil).ExtractVisFuncsInfo), arg0, arg1)
}
