// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	gomock "github.com/golang/mock/gomock"
	scriptspb "pixielabs.ai/pixielabs/src/shared/scriptspb"
	reflect "reflect"
)

// MockPlanner is a mock of Planner interface
type MockPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerMockRecorder
}

// MockPlannerMockRecorder is the mock recorder for MockPlanner
type MockPlannerMockRecorder struct {
	mock *MockPlanner
}

// NewMockPlanner creates a new mock instance
func NewMockPlanner(ctrl *gomock.Controller) *MockPlanner {
	mock := &MockPlanner{ctrl: ctrl}
	mock.recorder = &MockPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlanner) EXPECT() *MockPlannerMockRecorder {
	return m.recorder
}

// ExtractVisFuncsInfo mocks base method
func (m *MockPlanner) ExtractVisFuncsInfo(script string) (*scriptspb.VisFuncsInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractVisFuncsInfo", script)
	ret0, _ := ret[0].(*scriptspb.VisFuncsInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractVisFuncsInfo indicates an expected call of ExtractVisFuncsInfo
func (mr *MockPlannerMockRecorder) ExtractVisFuncsInfo(script interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractVisFuncsInfo", reflect.TypeOf((*MockPlanner)(nil).ExtractVisFuncsInfo), script)
}

// Free mocks base method
func (m *MockPlanner) Free() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free")
}

// Free indicates an expected call of Free
func (mr *MockPlannerMockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockPlanner)(nil).Free))
}
