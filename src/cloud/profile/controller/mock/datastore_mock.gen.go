// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
	datastore "pixielabs.ai/pixielabs/src/cloud/profile/datastore"
	reflect "reflect"
)

// MockDatastore is a mock of Datastore interface
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockDatastore) CreateUser(arg0 *datastore.UserInfo) (go_uuid.UUID, error) {
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(go_uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockDatastoreMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatastore)(nil).CreateUser), arg0)
}

// GetUser mocks base method
func (m *MockDatastore) GetUser(arg0 go_uuid.UUID) (*datastore.UserInfo, error) {
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*datastore.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockDatastoreMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatastore)(nil).GetUser), arg0)
}

// GetUserByEmail mocks base method
func (m *MockDatastore) GetUserByEmail(arg0 string) (*datastore.UserInfo, error) {
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(*datastore.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockDatastoreMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDatastore)(nil).GetUserByEmail), arg0)
}

// CreateUserAndOrg mocks base method
func (m *MockDatastore) CreateUserAndOrg(arg0 *datastore.OrgInfo, arg1 *datastore.UserInfo) (go_uuid.UUID, go_uuid.UUID, error) {
	ret := m.ctrl.Call(m, "CreateUserAndOrg", arg0, arg1)
	ret0, _ := ret[0].(go_uuid.UUID)
	ret1, _ := ret[1].(go_uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUserAndOrg indicates an expected call of CreateUserAndOrg
func (mr *MockDatastoreMockRecorder) CreateUserAndOrg(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAndOrg", reflect.TypeOf((*MockDatastore)(nil).CreateUserAndOrg), arg0, arg1)
}

// GetOrg mocks base method
func (m *MockDatastore) GetOrg(arg0 go_uuid.UUID) (*datastore.OrgInfo, error) {
	ret := m.ctrl.Call(m, "GetOrg", arg0)
	ret0, _ := ret[0].(*datastore.OrgInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg
func (mr *MockDatastoreMockRecorder) GetOrg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockDatastore)(nil).GetOrg), arg0)
}

// GetOrgByDomain mocks base method
func (m *MockDatastore) GetOrgByDomain(arg0 string) (*datastore.OrgInfo, error) {
	ret := m.ctrl.Call(m, "GetOrgByDomain", arg0)
	ret0, _ := ret[0].(*datastore.OrgInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgByDomain indicates an expected call of GetOrgByDomain
func (mr *MockDatastoreMockRecorder) GetOrgByDomain(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgByDomain", reflect.TypeOf((*MockDatastore)(nil).GetOrgByDomain), arg0)
}

// DeleteOrgAndUsers mocks base method
func (m *MockDatastore) DeleteOrgAndUsers(arg0 go_uuid.UUID) error {
	ret := m.ctrl.Call(m, "DeleteOrgAndUsers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrgAndUsers indicates an expected call of DeleteOrgAndUsers
func (mr *MockDatastoreMockRecorder) DeleteOrgAndUsers(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrgAndUsers", reflect.TypeOf((*MockDatastore)(nil).DeleteOrgAndUsers), arg0)
}
