// Code generated by MockGen. DO NOT EDIT.
// Source: pixielabs.ai/pixielabs/src/cloud/auth/controllers (interfaces: Auth0Connector)

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	gomock "github.com/golang/mock/gomock"
	controllers "pixielabs.ai/pixielabs/src/cloud/auth/controllers"
	reflect "reflect"
)

// MockAuth0Connector is a mock of Auth0Connector interface
type MockAuth0Connector struct {
	ctrl     *gomock.Controller
	recorder *MockAuth0ConnectorMockRecorder
}

// MockAuth0ConnectorMockRecorder is the mock recorder for MockAuth0Connector
type MockAuth0ConnectorMockRecorder struct {
	mock *MockAuth0Connector
}

// NewMockAuth0Connector creates a new mock instance
func NewMockAuth0Connector(ctrl *gomock.Controller) *MockAuth0Connector {
	mock := &MockAuth0Connector{ctrl: ctrl}
	mock.recorder = &MockAuth0ConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuth0Connector) EXPECT() *MockAuth0ConnectorMockRecorder {
	return m.recorder
}

// GetUserIDFromToken mocks base method
func (m *MockAuth0Connector) GetUserIDFromToken(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "GetUserIDFromToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDFromToken indicates an expected call of GetUserIDFromToken
func (mr *MockAuth0ConnectorMockRecorder) GetUserIDFromToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromToken", reflect.TypeOf((*MockAuth0Connector)(nil).GetUserIDFromToken), arg0)
}

// GetUserInfo mocks base method
func (m *MockAuth0Connector) GetUserInfo(arg0 string) (*controllers.UserInfo, error) {
	ret := m.ctrl.Call(m, "GetUserInfo", arg0)
	ret0, _ := ret[0].(*controllers.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo
func (mr *MockAuth0ConnectorMockRecorder) GetUserInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockAuth0Connector)(nil).GetUserInfo), arg0)
}

// Init mocks base method
func (m *MockAuth0Connector) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockAuth0ConnectorMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAuth0Connector)(nil).Init))
}

// SetPLMetadata mocks base method
func (m *MockAuth0Connector) SetPLMetadata(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SetPLMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPLMetadata indicates an expected call of SetPLMetadata
func (mr *MockAuth0ConnectorMockRecorder) SetPLMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPLMetadata", reflect.TypeOf((*MockAuth0Connector)(nil).SetPLMetadata), arg0, arg1, arg2)
}
