syntax = "proto3";

package pl.services;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/shared/services/proto/jwt.proto";
import "src/common/uuid/proto/uuid.proto";

option go_package = "pixielabs.ai/pixielabs/src/cloud/auth/proto;auth";


service AuthService {
// Peforms first time new org/user registration.
  rpc CreateUserOrg(CreateUserOrgRequest) returns (CreateUserOrgResponse) {}

  // Performs a login based on auth0 credentials and returns an opaque JWT identifier for the user.
  rpc Login(LoginRequest) returns (LoginReply) {}

  // Takes an opaque identifier (from above) and produces a token with user details.
  rpc GetAugmentedToken(GetAugmentedAuthTokenRequest) returns (GetAugmentedAuthTokenResponse) {}
}

message CreateUserOrgRequest {
  // The auth0 access token.
  string access_token = 1;
  // The email of the user, this needs to match the auth0 info or the request, otherwise it will be aborted.
  string user_email = 2;
  // The domain name for the org.
  string domain_name = 3;
  // The name of the organization.
  string org_name = 4;
}

 message CreateUserOrgResponse {
  // The opaque access token generated by our system. This is a JWT claim
  // that is used to identify the user. This token can be treated as the refresh token
  // and should not be sent to the browser or other insecure clients.
  string token = 1;
  // When this login expires.
  int64 expires_at = 2;

   pl.uuidpb.UUID org_id = 3 [
                            (gogoproto.customname) = "OrgID"
                            ];

   pl.uuidpb.UUID user_id = 4 [
                             (gogoproto.customname) = "UserID"
                             ];
}

message LoginRequest {
  // The auth0 access token.
  string access_token = 1;
  // The name of the site to log into.
  string site_name = 2;
  // The domain name for the org.
  string domain_name = 3;

  // Automatically create the user if they don't exist.
  bool create_user_if_not_exists = 4;
}

message LoginReply {
  // The opaque access token generated by our system. This is a JWT claim
  // that is used to identify the user. This token can be treated as the refresh token
  // and should not be sent to the browser or other insecure clients.
  string token = 1;
  // When this login expires.
  int64 expires_at      = 2;
}

message GetAugmentedAuthTokenRequest {
  // The signed token identifying the user.
  string token = 1;
}

message GetAugmentedAuthTokenResponse {
  // The signed token augmented with user information. This can contain additional information about
  // the user such as permissions, etc. This allows us to keep the initial token small.
  // This token will have a short lifetime of ~30 mins.
  string token = 1;

  // When this login expires.
  int64 expires_at      = 2;
}
