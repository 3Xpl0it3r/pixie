syntax = "proto3";

package pl.services;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/common/uuid/proto/uuid.proto";

option go_package = "pixielabs.ai/pixielabs/src/cloud/auth/proto;auth";

message AuthenticatedUserInfo {
  // User ID of the logged in user.
  pl.uuidpb.UUID user_id = 1 [
    (gogoproto.customname) = "UserID"
  ];

  // Name of the logged in user.
  string first_name = 2;
  string last_name = 3;
  // Email of the logged in user.
  string email = 4;
}

service AuthService {
  // Performs a login based on auth0 credentials and returns an opaque JWT identifier for the user.
  rpc Login(LoginRequest) returns (LoginReply) {}
  // Performs a signup based on auth0 credentials and returns an opaque JWT identifier for the user.
  rpc Signup(SignupRequest) returns (SignupReply) {}

  // Takes an opaque identifier (from above) and produces a token with user details.
  rpc GetAugmentedToken(GetAugmentedAuthTokenRequest) returns (GetAugmentedAuthTokenResponse) {}
}

message LoginRequest {
  // The auth0 access token.
  string access_token = 1;
  // Automatically create the user if they don't exist.
  bool create_user_if_not_exists = 3;
  // If the account is a Pixie Support account, login with access to the given org. Otherwise, this field is ignored.
  string org_name = 4;
}

message LoginReply {
  // The opaque access token generated by our system. This is a JWT claim
  // that is used to identify the user. This token can be treated as the refresh token
  // and should not be sent to the browser or other insecure clients.
  string token = 1;
  // When this login expires.
  int64 expires_at      = 2;
  // True if a new user was created while processing the LoginRequest. This is only possible if
  // create_user_if_not_exists is set in the LoginRequest.
  bool user_created = 3;

  // User ID of the logged in user.
  pl.uuidpb.UUID user_id = 4 [
    (gogoproto.customname) = "UserID"
  ];

  // Information about the logged in user.
  AuthenticatedUserInfo user_info = 5;

  message OrgInfo {
    string org_id = 1 [
    (gogoproto.customname) = "OrgID"
  ];
    string org_name = 2;
  }
  OrgInfo org_info = 6;
}

message SignupRequest {
  // The auth0 access token.
  string access_token = 1;
  // The email of the user, this needs to match the auth0 info or the request, otherwise it will be aborted.
  string user_email = 2;
}

message SignupReply {
  // The opaque access token generated by our system. This is a JWT claim
  // that is used to identify the user. This token can be treated as the refresh token
  // and should not be sent to the browser or other insecure clients.
  string token = 1;
  // When this login expires.
  int64 expires_at      = 2;
  // True if a new org was created while processing the SignupRequest.
  bool org_created = 3;

  // User ID of the logged in user.
  pl.uuidpb.UUID user_id = 4 [
    (gogoproto.customname) = "UserID"
  ];

  // Information about the logged in user.
  AuthenticatedUserInfo user_info = 5;

  // Org ID of the logged in user.
  pl.uuidpb.UUID org_id = 6 [
    (gogoproto.customname) = "OrgID"
  ];
}


message GetAugmentedAuthTokenRequest {
  // The signed token identifying the user.
  string token = 1;
}

message GetAugmentedAuthTokenResponse {
  // The signed token augmented with user information. This can contain additional information about
  // the user such as permissions, etc. This allows us to keep the initial token small.
  // This token will have a short lifetime of ~30 mins.
  string token = 1;

  // When this login expires.
  int64 expires_at      = 2;
}
