// Code generated by MockGen. DO NOT EDIT.
// Source: cloudapi.pb.go

// Package mock_cloudapipb is a generated GoMock package.
package mock_cloudapipb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	cloudapipb "pixielabs.ai/pixielabs/src/cloud/cloudapipb"
	reflect "reflect"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockAuthServiceClient) Login(ctx context.Context, in *cloudapipb.LoginRequest, opts ...grpc.CallOption) (*cloudapipb.LoginReply, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*cloudapipb.LoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthServiceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceClient)(nil).Login), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockAuthServiceServer) Login(arg0 context.Context, arg1 *cloudapipb.LoginRequest) (*cloudapipb.LoginReply, error) {
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.LoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceServer)(nil).Login), arg0, arg1)
}

// MockVizierImageAuthorizationClient is a mock of VizierImageAuthorizationClient interface
type MockVizierImageAuthorizationClient struct {
	ctrl     *gomock.Controller
	recorder *MockVizierImageAuthorizationClientMockRecorder
}

// MockVizierImageAuthorizationClientMockRecorder is the mock recorder for MockVizierImageAuthorizationClient
type MockVizierImageAuthorizationClientMockRecorder struct {
	mock *MockVizierImageAuthorizationClient
}

// NewMockVizierImageAuthorizationClient creates a new mock instance
func NewMockVizierImageAuthorizationClient(ctrl *gomock.Controller) *MockVizierImageAuthorizationClient {
	mock := &MockVizierImageAuthorizationClient{ctrl: ctrl}
	mock.recorder = &MockVizierImageAuthorizationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierImageAuthorizationClient) EXPECT() *MockVizierImageAuthorizationClientMockRecorder {
	return m.recorder
}

// GetImageCredentials mocks base method
func (m *MockVizierImageAuthorizationClient) GetImageCredentials(ctx context.Context, in *cloudapipb.GetImageCredentialsRequest, opts ...grpc.CallOption) (*cloudapipb.GetImageCredentialsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImageCredentials", varargs...)
	ret0, _ := ret[0].(*cloudapipb.GetImageCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageCredentials indicates an expected call of GetImageCredentials
func (mr *MockVizierImageAuthorizationClientMockRecorder) GetImageCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageCredentials", reflect.TypeOf((*MockVizierImageAuthorizationClient)(nil).GetImageCredentials), varargs...)
}

// MockVizierImageAuthorizationServer is a mock of VizierImageAuthorizationServer interface
type MockVizierImageAuthorizationServer struct {
	ctrl     *gomock.Controller
	recorder *MockVizierImageAuthorizationServerMockRecorder
}

// MockVizierImageAuthorizationServerMockRecorder is the mock recorder for MockVizierImageAuthorizationServer
type MockVizierImageAuthorizationServerMockRecorder struct {
	mock *MockVizierImageAuthorizationServer
}

// NewMockVizierImageAuthorizationServer creates a new mock instance
func NewMockVizierImageAuthorizationServer(ctrl *gomock.Controller) *MockVizierImageAuthorizationServer {
	mock := &MockVizierImageAuthorizationServer{ctrl: ctrl}
	mock.recorder = &MockVizierImageAuthorizationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierImageAuthorizationServer) EXPECT() *MockVizierImageAuthorizationServerMockRecorder {
	return m.recorder
}

// GetImageCredentials mocks base method
func (m *MockVizierImageAuthorizationServer) GetImageCredentials(arg0 context.Context, arg1 *cloudapipb.GetImageCredentialsRequest) (*cloudapipb.GetImageCredentialsResponse, error) {
	ret := m.ctrl.Call(m, "GetImageCredentials", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.GetImageCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageCredentials indicates an expected call of GetImageCredentials
func (mr *MockVizierImageAuthorizationServerMockRecorder) GetImageCredentials(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageCredentials", reflect.TypeOf((*MockVizierImageAuthorizationServer)(nil).GetImageCredentials), arg0, arg1)
}

// MockArtifactTrackerClient is a mock of ArtifactTrackerClient interface
type MockArtifactTrackerClient struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactTrackerClientMockRecorder
}

// MockArtifactTrackerClientMockRecorder is the mock recorder for MockArtifactTrackerClient
type MockArtifactTrackerClientMockRecorder struct {
	mock *MockArtifactTrackerClient
}

// NewMockArtifactTrackerClient creates a new mock instance
func NewMockArtifactTrackerClient(ctrl *gomock.Controller) *MockArtifactTrackerClient {
	mock := &MockArtifactTrackerClient{ctrl: ctrl}
	mock.recorder = &MockArtifactTrackerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArtifactTrackerClient) EXPECT() *MockArtifactTrackerClientMockRecorder {
	return m.recorder
}

// GetArtifactList mocks base method
func (m *MockArtifactTrackerClient) GetArtifactList(ctx context.Context, in *cloudapipb.GetArtifactListRequest, opts ...grpc.CallOption) (*cloudapipb.ArtifactSet, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactList", varargs...)
	ret0, _ := ret[0].(*cloudapipb.ArtifactSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactList indicates an expected call of GetArtifactList
func (mr *MockArtifactTrackerClientMockRecorder) GetArtifactList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactList", reflect.TypeOf((*MockArtifactTrackerClient)(nil).GetArtifactList), varargs...)
}

// GetDownloadLink mocks base method
func (m *MockArtifactTrackerClient) GetDownloadLink(ctx context.Context, in *cloudapipb.GetDownloadLinkRequest, opts ...grpc.CallOption) (*cloudapipb.GetDownloadLinkResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDownloadLink", varargs...)
	ret0, _ := ret[0].(*cloudapipb.GetDownloadLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadLink indicates an expected call of GetDownloadLink
func (mr *MockArtifactTrackerClientMockRecorder) GetDownloadLink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadLink", reflect.TypeOf((*MockArtifactTrackerClient)(nil).GetDownloadLink), varargs...)
}

// MockArtifactTrackerServer is a mock of ArtifactTrackerServer interface
type MockArtifactTrackerServer struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactTrackerServerMockRecorder
}

// MockArtifactTrackerServerMockRecorder is the mock recorder for MockArtifactTrackerServer
type MockArtifactTrackerServerMockRecorder struct {
	mock *MockArtifactTrackerServer
}

// NewMockArtifactTrackerServer creates a new mock instance
func NewMockArtifactTrackerServer(ctrl *gomock.Controller) *MockArtifactTrackerServer {
	mock := &MockArtifactTrackerServer{ctrl: ctrl}
	mock.recorder = &MockArtifactTrackerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArtifactTrackerServer) EXPECT() *MockArtifactTrackerServerMockRecorder {
	return m.recorder
}

// GetArtifactList mocks base method
func (m *MockArtifactTrackerServer) GetArtifactList(arg0 context.Context, arg1 *cloudapipb.GetArtifactListRequest) (*cloudapipb.ArtifactSet, error) {
	ret := m.ctrl.Call(m, "GetArtifactList", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.ArtifactSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactList indicates an expected call of GetArtifactList
func (mr *MockArtifactTrackerServerMockRecorder) GetArtifactList(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactList", reflect.TypeOf((*MockArtifactTrackerServer)(nil).GetArtifactList), arg0, arg1)
}

// GetDownloadLink mocks base method
func (m *MockArtifactTrackerServer) GetDownloadLink(arg0 context.Context, arg1 *cloudapipb.GetDownloadLinkRequest) (*cloudapipb.GetDownloadLinkResponse, error) {
	ret := m.ctrl.Call(m, "GetDownloadLink", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.GetDownloadLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadLink indicates an expected call of GetDownloadLink
func (mr *MockArtifactTrackerServerMockRecorder) GetDownloadLink(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadLink", reflect.TypeOf((*MockArtifactTrackerServer)(nil).GetDownloadLink), arg0, arg1)
}

// MockVizierClusterInfoClient is a mock of VizierClusterInfoClient interface
type MockVizierClusterInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockVizierClusterInfoClientMockRecorder
}

// MockVizierClusterInfoClientMockRecorder is the mock recorder for MockVizierClusterInfoClient
type MockVizierClusterInfoClientMockRecorder struct {
	mock *MockVizierClusterInfoClient
}

// NewMockVizierClusterInfoClient creates a new mock instance
func NewMockVizierClusterInfoClient(ctrl *gomock.Controller) *MockVizierClusterInfoClient {
	mock := &MockVizierClusterInfoClient{ctrl: ctrl}
	mock.recorder = &MockVizierClusterInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierClusterInfoClient) EXPECT() *MockVizierClusterInfoClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method
func (m *MockVizierClusterInfoClient) CreateCluster(ctx context.Context, in *cloudapipb.CreateClusterRequest, opts ...grpc.CallOption) (*cloudapipb.CreateClusterResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(*cloudapipb.CreateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster
func (mr *MockVizierClusterInfoClientMockRecorder) CreateCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockVizierClusterInfoClient)(nil).CreateCluster), varargs...)
}

// GetClusterInfo mocks base method
func (m *MockVizierClusterInfoClient) GetClusterInfo(ctx context.Context, in *cloudapipb.GetClusterInfoRequest, opts ...grpc.CallOption) (*cloudapipb.GetClusterInfoResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterInfo", varargs...)
	ret0, _ := ret[0].(*cloudapipb.GetClusterInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterInfo indicates an expected call of GetClusterInfo
func (mr *MockVizierClusterInfoClientMockRecorder) GetClusterInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterInfo", reflect.TypeOf((*MockVizierClusterInfoClient)(nil).GetClusterInfo), varargs...)
}

// GetClusterConnectionInfo mocks base method
func (m *MockVizierClusterInfoClient) GetClusterConnectionInfo(ctx context.Context, in *cloudapipb.GetClusterConnectionInfoRequest, opts ...grpc.CallOption) (*cloudapipb.GetClusterConnectionInfoResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterConnectionInfo", varargs...)
	ret0, _ := ret[0].(*cloudapipb.GetClusterConnectionInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterConnectionInfo indicates an expected call of GetClusterConnectionInfo
func (mr *MockVizierClusterInfoClientMockRecorder) GetClusterConnectionInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterConnectionInfo", reflect.TypeOf((*MockVizierClusterInfoClient)(nil).GetClusterConnectionInfo), varargs...)
}

// UpdateClusterVizierConfig mocks base method
func (m *MockVizierClusterInfoClient) UpdateClusterVizierConfig(ctx context.Context, in *cloudapipb.UpdateClusterVizierConfigRequest, opts ...grpc.CallOption) (*cloudapipb.UpdateClusterVizierConfigResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterVizierConfig", varargs...)
	ret0, _ := ret[0].(*cloudapipb.UpdateClusterVizierConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterVizierConfig indicates an expected call of UpdateClusterVizierConfig
func (mr *MockVizierClusterInfoClientMockRecorder) UpdateClusterVizierConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterVizierConfig", reflect.TypeOf((*MockVizierClusterInfoClient)(nil).UpdateClusterVizierConfig), varargs...)
}

// MockVizierClusterInfoServer is a mock of VizierClusterInfoServer interface
type MockVizierClusterInfoServer struct {
	ctrl     *gomock.Controller
	recorder *MockVizierClusterInfoServerMockRecorder
}

// MockVizierClusterInfoServerMockRecorder is the mock recorder for MockVizierClusterInfoServer
type MockVizierClusterInfoServerMockRecorder struct {
	mock *MockVizierClusterInfoServer
}

// NewMockVizierClusterInfoServer creates a new mock instance
func NewMockVizierClusterInfoServer(ctrl *gomock.Controller) *MockVizierClusterInfoServer {
	mock := &MockVizierClusterInfoServer{ctrl: ctrl}
	mock.recorder = &MockVizierClusterInfoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierClusterInfoServer) EXPECT() *MockVizierClusterInfoServerMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method
func (m *MockVizierClusterInfoServer) CreateCluster(arg0 context.Context, arg1 *cloudapipb.CreateClusterRequest) (*cloudapipb.CreateClusterResponse, error) {
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.CreateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster
func (mr *MockVizierClusterInfoServerMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockVizierClusterInfoServer)(nil).CreateCluster), arg0, arg1)
}

// GetClusterInfo mocks base method
func (m *MockVizierClusterInfoServer) GetClusterInfo(arg0 context.Context, arg1 *cloudapipb.GetClusterInfoRequest) (*cloudapipb.GetClusterInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetClusterInfo", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.GetClusterInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterInfo indicates an expected call of GetClusterInfo
func (mr *MockVizierClusterInfoServerMockRecorder) GetClusterInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterInfo", reflect.TypeOf((*MockVizierClusterInfoServer)(nil).GetClusterInfo), arg0, arg1)
}

// GetClusterConnectionInfo mocks base method
func (m *MockVizierClusterInfoServer) GetClusterConnectionInfo(arg0 context.Context, arg1 *cloudapipb.GetClusterConnectionInfoRequest) (*cloudapipb.GetClusterConnectionInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetClusterConnectionInfo", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.GetClusterConnectionInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterConnectionInfo indicates an expected call of GetClusterConnectionInfo
func (mr *MockVizierClusterInfoServerMockRecorder) GetClusterConnectionInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterConnectionInfo", reflect.TypeOf((*MockVizierClusterInfoServer)(nil).GetClusterConnectionInfo), arg0, arg1)
}

// UpdateClusterVizierConfig mocks base method
func (m *MockVizierClusterInfoServer) UpdateClusterVizierConfig(arg0 context.Context, arg1 *cloudapipb.UpdateClusterVizierConfigRequest) (*cloudapipb.UpdateClusterVizierConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateClusterVizierConfig", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.UpdateClusterVizierConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterVizierConfig indicates an expected call of UpdateClusterVizierConfig
func (mr *MockVizierClusterInfoServerMockRecorder) UpdateClusterVizierConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterVizierConfig", reflect.TypeOf((*MockVizierClusterInfoServer)(nil).UpdateClusterVizierConfig), arg0, arg1)
}
