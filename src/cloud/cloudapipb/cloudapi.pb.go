// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/cloud/cloudapipb/cloudapi.proto

package cloudapipb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/public/uuidpb"
	metadatapb "px.dev/pixie/src/shared/k8s/metadatapb"
	vispb "px.dev/pixie/src/shared/vispb"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ArtifactType int32

const (
	AT_UNKNOWN                      ArtifactType = 0
	AT_LINUX_AMD64                  ArtifactType = 1
	AT_DARWIN_AMD64                 ArtifactType = 2
	AT_CONTAINER_SET_YAMLS          ArtifactType = 50
	AT_CONTAINER_SET_TEMPLATE_YAMLS ArtifactType = 60
	AT_CONTAINER_SET_LINUX_AMD64    ArtifactType = 100
)

var ArtifactType_name = map[int32]string{
	0:   "AT_UNKNOWN",
	1:   "AT_LINUX_AMD64",
	2:   "AT_DARWIN_AMD64",
	50:  "AT_CONTAINER_SET_YAMLS",
	60:  "AT_CONTAINER_SET_TEMPLATE_YAMLS",
	100: "AT_CONTAINER_SET_LINUX_AMD64",
}

var ArtifactType_value = map[string]int32{
	"AT_UNKNOWN":                      0,
	"AT_LINUX_AMD64":                  1,
	"AT_DARWIN_AMD64":                 2,
	"AT_CONTAINER_SET_YAMLS":          50,
	"AT_CONTAINER_SET_TEMPLATE_YAMLS": 60,
	"AT_CONTAINER_SET_LINUX_AMD64":    100,
}

func (ArtifactType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{0}
}

type ClusterStatus int32

const (
	CS_UNKNOWN       ClusterStatus = 0
	CS_HEALTHY       ClusterStatus = 1
	CS_UNHEALTHY     ClusterStatus = 2
	CS_DISCONNECTED  ClusterStatus = 3
	CS_UPDATING      ClusterStatus = 4
	CS_CONNECTED     ClusterStatus = 5
	CS_UPDATE_FAILED ClusterStatus = 6
)

var ClusterStatus_name = map[int32]string{
	0: "CS_UNKNOWN",
	1: "CS_HEALTHY",
	2: "CS_UNHEALTHY",
	3: "CS_DISCONNECTED",
	4: "CS_UPDATING",
	5: "CS_CONNECTED",
	6: "CS_UPDATE_FAILED",
}

var ClusterStatus_value = map[string]int32{
	"CS_UNKNOWN":       0,
	"CS_HEALTHY":       1,
	"CS_UNHEALTHY":     2,
	"CS_DISCONNECTED":  3,
	"CS_UPDATING":      4,
	"CS_CONNECTED":     5,
	"CS_UPDATE_FAILED": 6,
}

func (ClusterStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{1}
}

type AutocompleteActionType int32

const (
	AAT_UNKNOWN AutocompleteActionType = 0
	AAT_EDIT    AutocompleteActionType = 1
	AAT_SELECT  AutocompleteActionType = 2
)

var AutocompleteActionType_name = map[int32]string{
	0: "AAT_UNKNOWN",
	1: "AAT_EDIT",
	2: "AAT_SELECT",
}

var AutocompleteActionType_value = map[string]int32{
	"AAT_UNKNOWN": 0,
	"AAT_EDIT":    1,
	"AAT_SELECT":  2,
}

func (AutocompleteActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{2}
}

type AutocompleteEntityKind int32

const (
	AEK_UNKNOWN   AutocompleteEntityKind = 0
	AEK_POD       AutocompleteEntityKind = 1
	AEK_SVC       AutocompleteEntityKind = 2
	AEK_SCRIPT    AutocompleteEntityKind = 3
	AEK_NAMESPACE AutocompleteEntityKind = 4
)

var AutocompleteEntityKind_name = map[int32]string{
	0: "AEK_UNKNOWN",
	1: "AEK_POD",
	2: "AEK_SVC",
	3: "AEK_SCRIPT",
	4: "AEK_NAMESPACE",
}

var AutocompleteEntityKind_value = map[string]int32{
	"AEK_UNKNOWN":   0,
	"AEK_POD":       1,
	"AEK_SVC":       2,
	"AEK_SCRIPT":    3,
	"AEK_NAMESPACE": 4,
}

func (AutocompleteEntityKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{3}
}

type AutocompleteEntityState int32

const (
	AES_UNKNOWN    AutocompleteEntityState = 0
	AES_PENDING    AutocompleteEntityState = 1
	AES_RUNNING    AutocompleteEntityState = 2
	AES_FAILED     AutocompleteEntityState = 3
	AES_TERMINATED AutocompleteEntityState = 4
)

var AutocompleteEntityState_name = map[int32]string{
	0: "AES_UNKNOWN",
	1: "AES_PENDING",
	2: "AES_RUNNING",
	3: "AES_FAILED",
	4: "AES_TERMINATED",
}

var AutocompleteEntityState_value = map[string]int32{
	"AES_UNKNOWN":    0,
	"AES_PENDING":    1,
	"AES_RUNNING":    2,
	"AES_FAILED":     3,
	"AES_TERMINATED": 4,
}

func (AutocompleteEntityState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{4}
}

type LoginRequest struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (m *LoginRequest) Reset()      { *m = LoginRequest{} }
func (*LoginRequest) ProtoMessage() {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{0}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type LoginReply struct {
	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ExpiresAt int64  `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (m *LoginReply) Reset()      { *m = LoginReply{} }
func (*LoginReply) ProtoMessage() {}
func (*LoginReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{1}
}
func (m *LoginReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReply.Merge(m, src)
}
func (m *LoginReply) XXX_Size() int {
	return m.Size()
}
func (m *LoginReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReply.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReply proto.InternalMessageInfo

func (m *LoginReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginReply) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

type GetImageCredentialsRequest struct {
}

func (m *GetImageCredentialsRequest) Reset()      { *m = GetImageCredentialsRequest{} }
func (*GetImageCredentialsRequest) ProtoMessage() {}
func (*GetImageCredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{2}
}
func (m *GetImageCredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetImageCredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetImageCredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetImageCredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImageCredentialsRequest.Merge(m, src)
}
func (m *GetImageCredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetImageCredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImageCredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetImageCredentialsRequest proto.InternalMessageInfo

type GetImageCredentialsResponse struct {
	Creds string `protobuf:"bytes,1,opt,name=creds,proto3" json:"creds,omitempty"`
}

func (m *GetImageCredentialsResponse) Reset()      { *m = GetImageCredentialsResponse{} }
func (*GetImageCredentialsResponse) ProtoMessage() {}
func (*GetImageCredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{3}
}
func (m *GetImageCredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetImageCredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetImageCredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetImageCredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImageCredentialsResponse.Merge(m, src)
}
func (m *GetImageCredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetImageCredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImageCredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetImageCredentialsResponse proto.InternalMessageInfo

func (m *GetImageCredentialsResponse) GetCreds() string {
	if m != nil {
		return m.Creds
	}
	return ""
}

type ArtifactSet struct {
	Name     string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Artifact []*Artifact `protobuf:"bytes,2,rep,name=artifact,proto3" json:"artifact,omitempty"`
}

func (m *ArtifactSet) Reset()      { *m = ArtifactSet{} }
func (*ArtifactSet) ProtoMessage() {}
func (*ArtifactSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{4}
}
func (m *ArtifactSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArtifactSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArtifactSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArtifactSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactSet.Merge(m, src)
}
func (m *ArtifactSet) XXX_Size() int {
	return m.Size()
}
func (m *ArtifactSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactSet.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactSet proto.InternalMessageInfo

func (m *ArtifactSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ArtifactSet) GetArtifact() []*Artifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

type Artifact struct {
	Timestamp          *types.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CommitHash         string           `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	VersionStr         string           `protobuf:"bytes,3,opt,name=version_str,json=versionStr,proto3" json:"version_str,omitempty"`
	AvailableArtifacts []ArtifactType   `protobuf:"varint,4,rep,packed,name=available_artifacts,json=availableArtifacts,proto3,enum=px.cloudapi.ArtifactType" json:"available_artifacts,omitempty"`
	Changelog          string           `protobuf:"bytes,5,opt,name=changelog,proto3" json:"changelog,omitempty"`
}

func (m *Artifact) Reset()      { *m = Artifact{} }
func (*Artifact) ProtoMessage() {}
func (*Artifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{5}
}
func (m *Artifact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Artifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Artifact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Artifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artifact.Merge(m, src)
}
func (m *Artifact) XXX_Size() int {
	return m.Size()
}
func (m *Artifact) XXX_DiscardUnknown() {
	xxx_messageInfo_Artifact.DiscardUnknown(m)
}

var xxx_messageInfo_Artifact proto.InternalMessageInfo

func (m *Artifact) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Artifact) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

func (m *Artifact) GetVersionStr() string {
	if m != nil {
		return m.VersionStr
	}
	return ""
}

func (m *Artifact) GetAvailableArtifacts() []ArtifactType {
	if m != nil {
		return m.AvailableArtifacts
	}
	return nil
}

func (m *Artifact) GetChangelog() string {
	if m != nil {
		return m.Changelog
	}
	return ""
}

type GetArtifactListRequest struct {
	ArtifactName string       `protobuf:"bytes,1,opt,name=artifact_name,json=artifactName,proto3" json:"artifact_name,omitempty"`
	ArtifactType ArtifactType `protobuf:"varint,2,opt,name=artifact_type,json=artifactType,proto3,enum=px.cloudapi.ArtifactType" json:"artifact_type,omitempty"`
	Limit        int64        `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GetArtifactListRequest) Reset()      { *m = GetArtifactListRequest{} }
func (*GetArtifactListRequest) ProtoMessage() {}
func (*GetArtifactListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{6}
}
func (m *GetArtifactListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArtifactListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArtifactListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArtifactListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArtifactListRequest.Merge(m, src)
}
func (m *GetArtifactListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetArtifactListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArtifactListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetArtifactListRequest proto.InternalMessageInfo

func (m *GetArtifactListRequest) GetArtifactName() string {
	if m != nil {
		return m.ArtifactName
	}
	return ""
}

func (m *GetArtifactListRequest) GetArtifactType() ArtifactType {
	if m != nil {
		return m.ArtifactType
	}
	return AT_UNKNOWN
}

func (m *GetArtifactListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetDownloadLinkRequest struct {
	ArtifactName string       `protobuf:"bytes,1,opt,name=artifact_name,json=artifactName,proto3" json:"artifact_name,omitempty"`
	VersionStr   string       `protobuf:"bytes,2,opt,name=version_str,json=versionStr,proto3" json:"version_str,omitempty"`
	ArtifactType ArtifactType `protobuf:"varint,3,opt,name=artifact_type,json=artifactType,proto3,enum=px.cloudapi.ArtifactType" json:"artifact_type,omitempty"`
}

func (m *GetDownloadLinkRequest) Reset()      { *m = GetDownloadLinkRequest{} }
func (*GetDownloadLinkRequest) ProtoMessage() {}
func (*GetDownloadLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{7}
}
func (m *GetDownloadLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDownloadLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDownloadLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDownloadLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDownloadLinkRequest.Merge(m, src)
}
func (m *GetDownloadLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDownloadLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDownloadLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDownloadLinkRequest proto.InternalMessageInfo

func (m *GetDownloadLinkRequest) GetArtifactName() string {
	if m != nil {
		return m.ArtifactName
	}
	return ""
}

func (m *GetDownloadLinkRequest) GetVersionStr() string {
	if m != nil {
		return m.VersionStr
	}
	return ""
}

func (m *GetDownloadLinkRequest) GetArtifactType() ArtifactType {
	if m != nil {
		return m.ArtifactType
	}
	return AT_UNKNOWN
}

type GetDownloadLinkResponse struct {
	Url        string           `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	SHA256     string           `protobuf:"bytes,2,opt,name=sha256,proto3" json:"sha256,omitempty"`
	ValidUntil *types.Timestamp `protobuf:"bytes,3,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
}

func (m *GetDownloadLinkResponse) Reset()      { *m = GetDownloadLinkResponse{} }
func (*GetDownloadLinkResponse) ProtoMessage() {}
func (*GetDownloadLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{8}
}
func (m *GetDownloadLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDownloadLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDownloadLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDownloadLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDownloadLinkResponse.Merge(m, src)
}
func (m *GetDownloadLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDownloadLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDownloadLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDownloadLinkResponse proto.InternalMessageInfo

func (m *GetDownloadLinkResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GetDownloadLinkResponse) GetSHA256() string {
	if m != nil {
		return m.SHA256
	}
	return ""
}

func (m *GetDownloadLinkResponse) GetValidUntil() *types.Timestamp {
	if m != nil {
		return m.ValidUntil
	}
	return nil
}

type CreateClusterRequest struct {
}

func (m *CreateClusterRequest) Reset()      { *m = CreateClusterRequest{} }
func (*CreateClusterRequest) ProtoMessage() {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{9}
}
func (m *CreateClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterRequest.Merge(m, src)
}
func (m *CreateClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterRequest proto.InternalMessageInfo

type CreateClusterResponse struct {
	ClusterID *uuidpb.UUID `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (m *CreateClusterResponse) Reset()      { *m = CreateClusterResponse{} }
func (*CreateClusterResponse) ProtoMessage() {}
func (*CreateClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{10}
}
func (m *CreateClusterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClusterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterResponse.Merge(m, src)
}
func (m *CreateClusterResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterResponse proto.InternalMessageInfo

func (m *CreateClusterResponse) GetClusterID() *uuidpb.UUID {
	if m != nil {
		return m.ClusterID
	}
	return nil
}

type UpdateOrInstallClusterRequest struct {
	ClusterID    *uuidpb.UUID `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Version      string       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	RedeployEtcd bool         `protobuf:"varint,3,opt,name=redeploy_etcd,json=redeployEtcd,proto3" json:"redeploy_etcd,omitempty"`
}

func (m *UpdateOrInstallClusterRequest) Reset()      { *m = UpdateOrInstallClusterRequest{} }
func (*UpdateOrInstallClusterRequest) ProtoMessage() {}
func (*UpdateOrInstallClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{11}
}
func (m *UpdateOrInstallClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrInstallClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrInstallClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrInstallClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrInstallClusterRequest.Merge(m, src)
}
func (m *UpdateOrInstallClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrInstallClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrInstallClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrInstallClusterRequest proto.InternalMessageInfo

func (m *UpdateOrInstallClusterRequest) GetClusterID() *uuidpb.UUID {
	if m != nil {
		return m.ClusterID
	}
	return nil
}

func (m *UpdateOrInstallClusterRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UpdateOrInstallClusterRequest) GetRedeployEtcd() bool {
	if m != nil {
		return m.RedeployEtcd
	}
	return false
}

type UpdateOrInstallClusterResponse struct {
	UpdateStarted bool `protobuf:"varint,1,opt,name=update_started,json=updateStarted,proto3" json:"update_started,omitempty"`
}

func (m *UpdateOrInstallClusterResponse) Reset()      { *m = UpdateOrInstallClusterResponse{} }
func (*UpdateOrInstallClusterResponse) ProtoMessage() {}
func (*UpdateOrInstallClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{12}
}
func (m *UpdateOrInstallClusterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrInstallClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrInstallClusterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOrInstallClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrInstallClusterResponse.Merge(m, src)
}
func (m *UpdateOrInstallClusterResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOrInstallClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrInstallClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrInstallClusterResponse proto.InternalMessageInfo

func (m *UpdateOrInstallClusterResponse) GetUpdateStarted() bool {
	if m != nil {
		return m.UpdateStarted
	}
	return false
}

type VizierConfig struct {
	PassthroughEnabled bool `protobuf:"varint,1,opt,name=passthrough_enabled,json=passthroughEnabled,proto3" json:"passthrough_enabled,omitempty"`
	AutoUpdateEnabled  bool `protobuf:"varint,2,opt,name=auto_update_enabled,json=autoUpdateEnabled,proto3" json:"auto_update_enabled,omitempty"`
}

func (m *VizierConfig) Reset()      { *m = VizierConfig{} }
func (*VizierConfig) ProtoMessage() {}
func (*VizierConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{13}
}
func (m *VizierConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierConfig.Merge(m, src)
}
func (m *VizierConfig) XXX_Size() int {
	return m.Size()
}
func (m *VizierConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VizierConfig proto.InternalMessageInfo

func (m *VizierConfig) GetPassthroughEnabled() bool {
	if m != nil {
		return m.PassthroughEnabled
	}
	return false
}

func (m *VizierConfig) GetAutoUpdateEnabled() bool {
	if m != nil {
		return m.AutoUpdateEnabled
	}
	return false
}

type VizierConfigUpdate struct {
	PassthroughEnabled *types.BoolValue `protobuf:"bytes,1,opt,name=passthrough_enabled,json=passthroughEnabled,proto3" json:"passthrough_enabled,omitempty"`
	AutoUpdateEnabled  *types.BoolValue `protobuf:"bytes,2,opt,name=auto_update_enabled,json=autoUpdateEnabled,proto3" json:"auto_update_enabled,omitempty"`
}

func (m *VizierConfigUpdate) Reset()      { *m = VizierConfigUpdate{} }
func (*VizierConfigUpdate) ProtoMessage() {}
func (*VizierConfigUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{14}
}
func (m *VizierConfigUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierConfigUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierConfigUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierConfigUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierConfigUpdate.Merge(m, src)
}
func (m *VizierConfigUpdate) XXX_Size() int {
	return m.Size()
}
func (m *VizierConfigUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierConfigUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_VizierConfigUpdate proto.InternalMessageInfo

func (m *VizierConfigUpdate) GetPassthroughEnabled() *types.BoolValue {
	if m != nil {
		return m.PassthroughEnabled
	}
	return nil
}

func (m *VizierConfigUpdate) GetAutoUpdateEnabled() *types.BoolValue {
	if m != nil {
		return m.AutoUpdateEnabled
	}
	return nil
}

type GetClusterInfoRequest struct {
	ID *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetClusterInfoRequest) Reset()      { *m = GetClusterInfoRequest{} }
func (*GetClusterInfoRequest) ProtoMessage() {}
func (*GetClusterInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{15}
}
func (m *GetClusterInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterInfoRequest.Merge(m, src)
}
func (m *GetClusterInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterInfoRequest proto.InternalMessageInfo

func (m *GetClusterInfoRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type K8SEvent struct {
	Message   string           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	FirstTime *types.Timestamp `protobuf:"bytes,2,opt,name=first_time,json=firstTime,proto3" json:"first_time,omitempty"`
	LastTime  *types.Timestamp `protobuf:"bytes,3,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"`
}

func (m *K8SEvent) Reset()      { *m = K8SEvent{} }
func (*K8SEvent) ProtoMessage() {}
func (*K8SEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{16}
}
func (m *K8SEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *K8SEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_K8SEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *K8SEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SEvent.Merge(m, src)
}
func (m *K8SEvent) XXX_Size() int {
	return m.Size()
}
func (m *K8SEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SEvent.DiscardUnknown(m)
}

var xxx_messageInfo_K8SEvent proto.InternalMessageInfo

func (m *K8SEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *K8SEvent) GetFirstTime() *types.Timestamp {
	if m != nil {
		return m.FirstTime
	}
	return nil
}

func (m *K8SEvent) GetLastTime() *types.Timestamp {
	if m != nil {
		return m.LastTime
	}
	return nil
}

type PodStatus struct {
	Name          string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status        metadatapb.PodPhase `protobuf:"varint,2,opt,name=status,proto3,enum=px.shared.k8s.metadatapb.PodPhase" json:"status,omitempty"`
	StatusMessage string              `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	Reason        string              `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Containers    []*ContainerStatus  `protobuf:"bytes,5,rep,name=containers,proto3" json:"containers,omitempty"`
	CreatedAt     *types.Timestamp    `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Events        []*K8SEvent         `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *PodStatus) Reset()      { *m = PodStatus{} }
func (*PodStatus) ProtoMessage() {}
func (*PodStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{17}
}
func (m *PodStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatus.Merge(m, src)
}
func (m *PodStatus) XXX_Size() int {
	return m.Size()
}
func (m *PodStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatus proto.InternalMessageInfo

func (m *PodStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodStatus) GetStatus() metadatapb.PodPhase {
	if m != nil {
		return m.Status
	}
	return metadatapb.PHASE_UNKNOWN
}

func (m *PodStatus) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *PodStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodStatus) GetContainers() []*ContainerStatus {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *PodStatus) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PodStatus) GetEvents() []*K8SEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type ContainerStatus struct {
	Name      string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State     metadatapb.ContainerState `protobuf:"varint,2,opt,name=state,proto3,enum=px.shared.k8s.metadatapb.ContainerState" json:"state,omitempty"`
	Message   string                    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Reason    string                    `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	CreatedAt *types.Timestamp          `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *ContainerStatus) Reset()      { *m = ContainerStatus{} }
func (*ContainerStatus) ProtoMessage() {}
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{18}
}
func (m *ContainerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStatus.Merge(m, src)
}
func (m *ContainerStatus) XXX_Size() int {
	return m.Size()
}
func (m *ContainerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStatus proto.InternalMessageInfo

func (m *ContainerStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerStatus) GetState() metadatapb.ContainerState {
	if m != nil {
		return m.State
	}
	return metadatapb.CONTAINER_STATE_UNKNOWN
}

func (m *ContainerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ContainerStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ContainerStatus) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type ClusterInfo struct {
	ID                      *uuidpb.UUID          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                  ClusterStatus         `protobuf:"varint,2,opt,name=status,proto3,enum=px.cloudapi.ClusterStatus" json:"status,omitempty"`
	LastHeartbeatNs         int64                 `protobuf:"varint,3,opt,name=lastHeartbeatNs,proto3" json:"lastHeartbeatNs,omitempty"`
	Config                  *VizierConfig         `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	ClusterUID              string                `protobuf:"bytes,5,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
	ClusterName             string                `protobuf:"bytes,6,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	PrettyClusterName       string                `protobuf:"bytes,9,opt,name=pretty_cluster_name,json=prettyClusterName,proto3" json:"pretty_cluster_name,omitempty"`
	ClusterVersion          string                `protobuf:"bytes,7,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
	VizierVersion           string                `protobuf:"bytes,8,opt,name=vizier_version,json=vizierVersion,proto3" json:"vizier_version,omitempty"`
	ControlPlanePodStatuses map[string]*PodStatus `protobuf:"bytes,10,rep,name=control_plane_pod_statuses,json=controlPlanePodStatuses,proto3" json:"control_plane_pod_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumNodes                int32                 `protobuf:"varint,11,opt,name=num_nodes,json=numNodes,proto3" json:"num_nodes,omitempty"`
	NumInstrumentedNodes    int32                 `protobuf:"varint,12,opt,name=num_instrumented_nodes,json=numInstrumentedNodes,proto3" json:"num_instrumented_nodes,omitempty"`
}

func (m *ClusterInfo) Reset()      { *m = ClusterInfo{} }
func (*ClusterInfo) ProtoMessage() {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{19}
}
func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ClusterInfo) GetStatus() ClusterStatus {
	if m != nil {
		return m.Status
	}
	return CS_UNKNOWN
}

func (m *ClusterInfo) GetLastHeartbeatNs() int64 {
	if m != nil {
		return m.LastHeartbeatNs
	}
	return 0
}

func (m *ClusterInfo) GetConfig() *VizierConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ClusterInfo) GetClusterUID() string {
	if m != nil {
		return m.ClusterUID
	}
	return ""
}

func (m *ClusterInfo) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterInfo) GetPrettyClusterName() string {
	if m != nil {
		return m.PrettyClusterName
	}
	return ""
}

func (m *ClusterInfo) GetClusterVersion() string {
	if m != nil {
		return m.ClusterVersion
	}
	return ""
}

func (m *ClusterInfo) GetVizierVersion() string {
	if m != nil {
		return m.VizierVersion
	}
	return ""
}

func (m *ClusterInfo) GetControlPlanePodStatuses() map[string]*PodStatus {
	if m != nil {
		return m.ControlPlanePodStatuses
	}
	return nil
}

func (m *ClusterInfo) GetNumNodes() int32 {
	if m != nil {
		return m.NumNodes
	}
	return 0
}

func (m *ClusterInfo) GetNumInstrumentedNodes() int32 {
	if m != nil {
		return m.NumInstrumentedNodes
	}
	return 0
}

type GetClusterInfoResponse struct {
	Clusters []*ClusterInfo `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (m *GetClusterInfoResponse) Reset()      { *m = GetClusterInfoResponse{} }
func (*GetClusterInfoResponse) ProtoMessage() {}
func (*GetClusterInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{20}
}
func (m *GetClusterInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterInfoResponse.Merge(m, src)
}
func (m *GetClusterInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterInfoResponse proto.InternalMessageInfo

func (m *GetClusterInfoResponse) GetClusters() []*ClusterInfo {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type GetClusterConnectionInfoRequest struct {
	ID *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetClusterConnectionInfoRequest) Reset()      { *m = GetClusterConnectionInfoRequest{} }
func (*GetClusterConnectionInfoRequest) ProtoMessage() {}
func (*GetClusterConnectionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{21}
}
func (m *GetClusterConnectionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterConnectionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterConnectionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterConnectionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterConnectionInfoRequest.Merge(m, src)
}
func (m *GetClusterConnectionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterConnectionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterConnectionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterConnectionInfoRequest proto.InternalMessageInfo

func (m *GetClusterConnectionInfoRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type GetClusterConnectionInfoResponse struct {
	IPAddress string `protobuf:"bytes,1,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *GetClusterConnectionInfoResponse) Reset()      { *m = GetClusterConnectionInfoResponse{} }
func (*GetClusterConnectionInfoResponse) ProtoMessage() {}
func (*GetClusterConnectionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{22}
}
func (m *GetClusterConnectionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterConnectionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterConnectionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterConnectionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterConnectionInfoResponse.Merge(m, src)
}
func (m *GetClusterConnectionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterConnectionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterConnectionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterConnectionInfoResponse proto.InternalMessageInfo

func (m *GetClusterConnectionInfoResponse) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *GetClusterConnectionInfoResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UpdateClusterVizierConfigRequest struct {
	ID           *uuidpb.UUID        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConfigUpdate *VizierConfigUpdate `protobuf:"bytes,2,opt,name=config_update,json=configUpdate,proto3" json:"config_update,omitempty"`
}

func (m *UpdateClusterVizierConfigRequest) Reset()      { *m = UpdateClusterVizierConfigRequest{} }
func (*UpdateClusterVizierConfigRequest) ProtoMessage() {}
func (*UpdateClusterVizierConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{23}
}
func (m *UpdateClusterVizierConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClusterVizierConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClusterVizierConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClusterVizierConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterVizierConfigRequest.Merge(m, src)
}
func (m *UpdateClusterVizierConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClusterVizierConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterVizierConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterVizierConfigRequest proto.InternalMessageInfo

func (m *UpdateClusterVizierConfigRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *UpdateClusterVizierConfigRequest) GetConfigUpdate() *VizierConfigUpdate {
	if m != nil {
		return m.ConfigUpdate
	}
	return nil
}

type UpdateClusterVizierConfigResponse struct {
}

func (m *UpdateClusterVizierConfigResponse) Reset()      { *m = UpdateClusterVizierConfigResponse{} }
func (*UpdateClusterVizierConfigResponse) ProtoMessage() {}
func (*UpdateClusterVizierConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{24}
}
func (m *UpdateClusterVizierConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClusterVizierConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClusterVizierConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClusterVizierConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterVizierConfigResponse.Merge(m, src)
}
func (m *UpdateClusterVizierConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClusterVizierConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterVizierConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterVizierConfigResponse proto.InternalMessageInfo

type DeploymentKey struct {
	ID        *uuidpb.UUID     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key       string           `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	CreatedAt *types.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Desc      string           `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *DeploymentKey) Reset()      { *m = DeploymentKey{} }
func (*DeploymentKey) ProtoMessage() {}
func (*DeploymentKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{25}
}
func (m *DeploymentKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentKey.Merge(m, src)
}
func (m *DeploymentKey) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentKey) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentKey.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentKey proto.InternalMessageInfo

func (m *DeploymentKey) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *DeploymentKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DeploymentKey) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *DeploymentKey) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type CreateDeploymentKeyRequest struct {
	Desc string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *CreateDeploymentKeyRequest) Reset()      { *m = CreateDeploymentKeyRequest{} }
func (*CreateDeploymentKeyRequest) ProtoMessage() {}
func (*CreateDeploymentKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{26}
}
func (m *CreateDeploymentKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDeploymentKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDeploymentKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDeploymentKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDeploymentKeyRequest.Merge(m, src)
}
func (m *CreateDeploymentKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateDeploymentKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDeploymentKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDeploymentKeyRequest proto.InternalMessageInfo

func (m *CreateDeploymentKeyRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type ListDeploymentKeyRequest struct {
}

func (m *ListDeploymentKeyRequest) Reset()      { *m = ListDeploymentKeyRequest{} }
func (*ListDeploymentKeyRequest) ProtoMessage() {}
func (*ListDeploymentKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{27}
}
func (m *ListDeploymentKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDeploymentKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDeploymentKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDeploymentKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeploymentKeyRequest.Merge(m, src)
}
func (m *ListDeploymentKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDeploymentKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeploymentKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeploymentKeyRequest proto.InternalMessageInfo

type ListDeploymentKeyResponse struct {
	Keys []*DeploymentKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *ListDeploymentKeyResponse) Reset()      { *m = ListDeploymentKeyResponse{} }
func (*ListDeploymentKeyResponse) ProtoMessage() {}
func (*ListDeploymentKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{28}
}
func (m *ListDeploymentKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDeploymentKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDeploymentKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDeploymentKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeploymentKeyResponse.Merge(m, src)
}
func (m *ListDeploymentKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDeploymentKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeploymentKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeploymentKeyResponse proto.InternalMessageInfo

func (m *ListDeploymentKeyResponse) GetKeys() []*DeploymentKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type GetDeploymentKeyRequest struct {
	ID *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetDeploymentKeyRequest) Reset()      { *m = GetDeploymentKeyRequest{} }
func (*GetDeploymentKeyRequest) ProtoMessage() {}
func (*GetDeploymentKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{29}
}
func (m *GetDeploymentKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeploymentKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeploymentKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeploymentKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentKeyRequest.Merge(m, src)
}
func (m *GetDeploymentKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDeploymentKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentKeyRequest proto.InternalMessageInfo

func (m *GetDeploymentKeyRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type GetDeploymentKeyResponse struct {
	Key *DeploymentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetDeploymentKeyResponse) Reset()      { *m = GetDeploymentKeyResponse{} }
func (*GetDeploymentKeyResponse) ProtoMessage() {}
func (*GetDeploymentKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{30}
}
func (m *GetDeploymentKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeploymentKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeploymentKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeploymentKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentKeyResponse.Merge(m, src)
}
func (m *GetDeploymentKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDeploymentKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentKeyResponse proto.InternalMessageInfo

func (m *GetDeploymentKeyResponse) GetKey() *DeploymentKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type APIKey struct {
	ID        *uuidpb.UUID     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key       string           `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	CreatedAt *types.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Desc      string           `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *APIKey) Reset()      { *m = APIKey{} }
func (*APIKey) ProtoMessage() {}
func (*APIKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{31}
}
func (m *APIKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIKey.Merge(m, src)
}
func (m *APIKey) XXX_Size() int {
	return m.Size()
}
func (m *APIKey) XXX_DiscardUnknown() {
	xxx_messageInfo_APIKey.DiscardUnknown(m)
}

var xxx_messageInfo_APIKey proto.InternalMessageInfo

func (m *APIKey) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *APIKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *APIKey) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *APIKey) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type CreateAPIKeyRequest struct {
	Desc string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *CreateAPIKeyRequest) Reset()      { *m = CreateAPIKeyRequest{} }
func (*CreateAPIKeyRequest) ProtoMessage() {}
func (*CreateAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{32}
}
func (m *CreateAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAPIKeyRequest.Merge(m, src)
}
func (m *CreateAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAPIKeyRequest proto.InternalMessageInfo

func (m *CreateAPIKeyRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type ListAPIKeyRequest struct {
}

func (m *ListAPIKeyRequest) Reset()      { *m = ListAPIKeyRequest{} }
func (*ListAPIKeyRequest) ProtoMessage() {}
func (*ListAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{33}
}
func (m *ListAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAPIKeyRequest.Merge(m, src)
}
func (m *ListAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAPIKeyRequest proto.InternalMessageInfo

type ListAPIKeyResponse struct {
	Keys []*APIKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *ListAPIKeyResponse) Reset()      { *m = ListAPIKeyResponse{} }
func (*ListAPIKeyResponse) ProtoMessage() {}
func (*ListAPIKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{34}
}
func (m *ListAPIKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAPIKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAPIKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAPIKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAPIKeyResponse.Merge(m, src)
}
func (m *ListAPIKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAPIKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAPIKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAPIKeyResponse proto.InternalMessageInfo

func (m *ListAPIKeyResponse) GetKeys() []*APIKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type GetAPIKeyRequest struct {
	ID *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetAPIKeyRequest) Reset()      { *m = GetAPIKeyRequest{} }
func (*GetAPIKeyRequest) ProtoMessage() {}
func (*GetAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{35}
}
func (m *GetAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIKeyRequest.Merge(m, src)
}
func (m *GetAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIKeyRequest proto.InternalMessageInfo

func (m *GetAPIKeyRequest) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

type GetAPIKeyResponse struct {
	Key *APIKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetAPIKeyResponse) Reset()      { *m = GetAPIKeyResponse{} }
func (*GetAPIKeyResponse) ProtoMessage() {}
func (*GetAPIKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{36}
}
func (m *GetAPIKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPIKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPIKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAPIKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIKeyResponse.Merge(m, src)
}
func (m *GetAPIKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAPIKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIKeyResponse proto.InternalMessageInfo

func (m *GetAPIKeyResponse) GetKey() *APIKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetLiveViewsReq struct {
}

func (m *GetLiveViewsReq) Reset()      { *m = GetLiveViewsReq{} }
func (*GetLiveViewsReq) ProtoMessage() {}
func (*GetLiveViewsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{37}
}
func (m *GetLiveViewsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveViewsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveViewsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveViewsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveViewsReq.Merge(m, src)
}
func (m *GetLiveViewsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveViewsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveViewsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveViewsReq proto.InternalMessageInfo

type LiveViewMetadata struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *LiveViewMetadata) Reset()      { *m = LiveViewMetadata{} }
func (*LiveViewMetadata) ProtoMessage() {}
func (*LiveViewMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{38}
}
func (m *LiveViewMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveViewMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveViewMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveViewMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveViewMetadata.Merge(m, src)
}
func (m *LiveViewMetadata) XXX_Size() int {
	return m.Size()
}
func (m *LiveViewMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveViewMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_LiveViewMetadata proto.InternalMessageInfo

func (m *LiveViewMetadata) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *LiveViewMetadata) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *LiveViewMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetLiveViewsResp struct {
	LiveViews []*LiveViewMetadata `protobuf:"bytes,1,rep,name=live_views,json=liveViews,proto3" json:"live_views,omitempty"`
}

func (m *GetLiveViewsResp) Reset()      { *m = GetLiveViewsResp{} }
func (*GetLiveViewsResp) ProtoMessage() {}
func (*GetLiveViewsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{39}
}
func (m *GetLiveViewsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveViewsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveViewsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveViewsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveViewsResp.Merge(m, src)
}
func (m *GetLiveViewsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveViewsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveViewsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveViewsResp proto.InternalMessageInfo

func (m *GetLiveViewsResp) GetLiveViews() []*LiveViewMetadata {
	if m != nil {
		return m.LiveViews
	}
	return nil
}

type GetLiveViewContentsReq struct {
	LiveViewID string `protobuf:"bytes,1,opt,name=live_view_id,json=liveViewId,proto3" json:"live_view_id,omitempty"`
}

func (m *GetLiveViewContentsReq) Reset()      { *m = GetLiveViewContentsReq{} }
func (*GetLiveViewContentsReq) ProtoMessage() {}
func (*GetLiveViewContentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{40}
}
func (m *GetLiveViewContentsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveViewContentsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveViewContentsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveViewContentsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveViewContentsReq.Merge(m, src)
}
func (m *GetLiveViewContentsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveViewContentsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveViewContentsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveViewContentsReq proto.InternalMessageInfo

func (m *GetLiveViewContentsReq) GetLiveViewID() string {
	if m != nil {
		return m.LiveViewID
	}
	return ""
}

type GetLiveViewContentsResp struct {
	Metadata    *LiveViewMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PxlContents string            `protobuf:"bytes,2,opt,name=pxl_contents,json=pxlContents,proto3" json:"pxl_contents,omitempty"`
	Vis         *vispb.Vis        `protobuf:"bytes,3,opt,name=vis,proto3" json:"vis,omitempty"`
}

func (m *GetLiveViewContentsResp) Reset()      { *m = GetLiveViewContentsResp{} }
func (*GetLiveViewContentsResp) ProtoMessage() {}
func (*GetLiveViewContentsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{41}
}
func (m *GetLiveViewContentsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveViewContentsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveViewContentsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveViewContentsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveViewContentsResp.Merge(m, src)
}
func (m *GetLiveViewContentsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveViewContentsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveViewContentsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveViewContentsResp proto.InternalMessageInfo

func (m *GetLiveViewContentsResp) GetMetadata() *LiveViewMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetLiveViewContentsResp) GetPxlContents() string {
	if m != nil {
		return m.PxlContents
	}
	return ""
}

func (m *GetLiveViewContentsResp) GetVis() *vispb.Vis {
	if m != nil {
		return m.Vis
	}
	return nil
}

type GetScriptsReq struct {
}

func (m *GetScriptsReq) Reset()      { *m = GetScriptsReq{} }
func (*GetScriptsReq) ProtoMessage() {}
func (*GetScriptsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{42}
}
func (m *GetScriptsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScriptsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScriptsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScriptsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptsReq.Merge(m, src)
}
func (m *GetScriptsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetScriptsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptsReq proto.InternalMessageInfo

type ScriptMetadata struct {
	ID          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc        string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	HasLiveView bool   `protobuf:"varint,4,opt,name=has_live_view,json=hasLiveView,proto3" json:"has_live_view,omitempty"`
}

func (m *ScriptMetadata) Reset()      { *m = ScriptMetadata{} }
func (*ScriptMetadata) ProtoMessage() {}
func (*ScriptMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{43}
}
func (m *ScriptMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScriptMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScriptMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScriptMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptMetadata.Merge(m, src)
}
func (m *ScriptMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ScriptMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptMetadata proto.InternalMessageInfo

func (m *ScriptMetadata) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ScriptMetadata) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ScriptMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScriptMetadata) GetHasLiveView() bool {
	if m != nil {
		return m.HasLiveView
	}
	return false
}

type GetScriptsResp struct {
	Scripts []*ScriptMetadata `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
}

func (m *GetScriptsResp) Reset()      { *m = GetScriptsResp{} }
func (*GetScriptsResp) ProtoMessage() {}
func (*GetScriptsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{44}
}
func (m *GetScriptsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScriptsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScriptsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScriptsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptsResp.Merge(m, src)
}
func (m *GetScriptsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetScriptsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptsResp proto.InternalMessageInfo

func (m *GetScriptsResp) GetScripts() []*ScriptMetadata {
	if m != nil {
		return m.Scripts
	}
	return nil
}

type GetScriptContentsReq struct {
	ScriptID string `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
}

func (m *GetScriptContentsReq) Reset()      { *m = GetScriptContentsReq{} }
func (*GetScriptContentsReq) ProtoMessage() {}
func (*GetScriptContentsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{45}
}
func (m *GetScriptContentsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScriptContentsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScriptContentsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScriptContentsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptContentsReq.Merge(m, src)
}
func (m *GetScriptContentsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetScriptContentsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptContentsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptContentsReq proto.InternalMessageInfo

func (m *GetScriptContentsReq) GetScriptID() string {
	if m != nil {
		return m.ScriptID
	}
	return ""
}

type GetScriptContentsResp struct {
	Metadata *ScriptMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Contents string          `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (m *GetScriptContentsResp) Reset()      { *m = GetScriptContentsResp{} }
func (*GetScriptContentsResp) ProtoMessage() {}
func (*GetScriptContentsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{46}
}
func (m *GetScriptContentsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScriptContentsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScriptContentsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScriptContentsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptContentsResp.Merge(m, src)
}
func (m *GetScriptContentsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetScriptContentsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptContentsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptContentsResp proto.InternalMessageInfo

func (m *GetScriptContentsResp) GetMetadata() *ScriptMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetScriptContentsResp) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

type AutocompleteRequest struct {
	Input      string                 `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	CursorPos  int64                  `protobuf:"varint,2,opt,name=cursor_pos,json=cursorPos,proto3" json:"cursor_pos,omitempty"`
	Action     AutocompleteActionType `protobuf:"varint,3,opt,name=action,proto3,enum=px.cloudapi.AutocompleteActionType" json:"action,omitempty"`
	ClusterUID string                 `protobuf:"bytes,4,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
}

func (m *AutocompleteRequest) Reset()      { *m = AutocompleteRequest{} }
func (*AutocompleteRequest) ProtoMessage() {}
func (*AutocompleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{47}
}
func (m *AutocompleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutocompleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutocompleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutocompleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutocompleteRequest.Merge(m, src)
}
func (m *AutocompleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *AutocompleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AutocompleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AutocompleteRequest proto.InternalMessageInfo

func (m *AutocompleteRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *AutocompleteRequest) GetCursorPos() int64 {
	if m != nil {
		return m.CursorPos
	}
	return 0
}

func (m *AutocompleteRequest) GetAction() AutocompleteActionType {
	if m != nil {
		return m.Action
	}
	return AAT_UNKNOWN
}

func (m *AutocompleteRequest) GetClusterUID() string {
	if m != nil {
		return m.ClusterUID
	}
	return ""
}

type TabSuggestion struct {
	TabIndex              int64                     `protobuf:"varint,1,opt,name=tab_index,json=tabIndex,proto3" json:"tab_index,omitempty"`
	ExecutableAfterSelect bool                      `protobuf:"varint,2,opt,name=executable_after_select,json=executableAfterSelect,proto3" json:"executable_after_select,omitempty"`
	Suggestions           []*AutocompleteSuggestion `protobuf:"bytes,3,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
}

func (m *TabSuggestion) Reset()      { *m = TabSuggestion{} }
func (*TabSuggestion) ProtoMessage() {}
func (*TabSuggestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{48}
}
func (m *TabSuggestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabSuggestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabSuggestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TabSuggestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabSuggestion.Merge(m, src)
}
func (m *TabSuggestion) XXX_Size() int {
	return m.Size()
}
func (m *TabSuggestion) XXX_DiscardUnknown() {
	xxx_messageInfo_TabSuggestion.DiscardUnknown(m)
}

var xxx_messageInfo_TabSuggestion proto.InternalMessageInfo

func (m *TabSuggestion) GetTabIndex() int64 {
	if m != nil {
		return m.TabIndex
	}
	return 0
}

func (m *TabSuggestion) GetExecutableAfterSelect() bool {
	if m != nil {
		return m.ExecutableAfterSelect
	}
	return false
}

func (m *TabSuggestion) GetSuggestions() []*AutocompleteSuggestion {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

type AutocompleteSuggestion struct {
	Kind           AutocompleteEntityKind  `protobuf:"varint,1,opt,name=kind,proto3,enum=px.cloudapi.AutocompleteEntityKind" json:"kind,omitempty"`
	Name           string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MatchedIndexes []int64                 `protobuf:"varint,4,rep,packed,name=matched_indexes,json=matchedIndexes,proto3" json:"matched_indexes,omitempty"`
	State          AutocompleteEntityState `protobuf:"varint,5,opt,name=state,proto3,enum=px.cloudapi.AutocompleteEntityState" json:"state,omitempty"`
}

func (m *AutocompleteSuggestion) Reset()      { *m = AutocompleteSuggestion{} }
func (*AutocompleteSuggestion) ProtoMessage() {}
func (*AutocompleteSuggestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{49}
}
func (m *AutocompleteSuggestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutocompleteSuggestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutocompleteSuggestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutocompleteSuggestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutocompleteSuggestion.Merge(m, src)
}
func (m *AutocompleteSuggestion) XXX_Size() int {
	return m.Size()
}
func (m *AutocompleteSuggestion) XXX_DiscardUnknown() {
	xxx_messageInfo_AutocompleteSuggestion.DiscardUnknown(m)
}

var xxx_messageInfo_AutocompleteSuggestion proto.InternalMessageInfo

func (m *AutocompleteSuggestion) GetKind() AutocompleteEntityKind {
	if m != nil {
		return m.Kind
	}
	return AEK_UNKNOWN
}

func (m *AutocompleteSuggestion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AutocompleteSuggestion) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AutocompleteSuggestion) GetMatchedIndexes() []int64 {
	if m != nil {
		return m.MatchedIndexes
	}
	return nil
}

func (m *AutocompleteSuggestion) GetState() AutocompleteEntityState {
	if m != nil {
		return m.State
	}
	return AES_UNKNOWN
}

type AutocompleteResponse struct {
	FormattedInput string           `protobuf:"bytes,1,opt,name=formatted_input,json=formattedInput,proto3" json:"formatted_input,omitempty"`
	IsExecutable   bool             `protobuf:"varint,2,opt,name=is_executable,json=isExecutable,proto3" json:"is_executable,omitempty"`
	TabSuggestions []*TabSuggestion `protobuf:"bytes,3,rep,name=tabSuggestions,proto3" json:"tabSuggestions,omitempty"`
}

func (m *AutocompleteResponse) Reset()      { *m = AutocompleteResponse{} }
func (*AutocompleteResponse) ProtoMessage() {}
func (*AutocompleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{50}
}
func (m *AutocompleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutocompleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutocompleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutocompleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutocompleteResponse.Merge(m, src)
}
func (m *AutocompleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *AutocompleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AutocompleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AutocompleteResponse proto.InternalMessageInfo

func (m *AutocompleteResponse) GetFormattedInput() string {
	if m != nil {
		return m.FormattedInput
	}
	return ""
}

func (m *AutocompleteResponse) GetIsExecutable() bool {
	if m != nil {
		return m.IsExecutable
	}
	return false
}

func (m *AutocompleteResponse) GetTabSuggestions() []*TabSuggestion {
	if m != nil {
		return m.TabSuggestions
	}
	return nil
}

type AutocompleteFieldRequest struct {
	Input            string                   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	FieldType        AutocompleteEntityKind   `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=px.cloudapi.AutocompleteEntityKind" json:"field_type,omitempty"`
	RequiredArgTypes []AutocompleteEntityKind `protobuf:"varint,3,rep,packed,name=required_arg_types,json=requiredArgTypes,proto3,enum=px.cloudapi.AutocompleteEntityKind" json:"required_arg_types,omitempty"`
	ClusterUID       string                   `protobuf:"bytes,4,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
}

func (m *AutocompleteFieldRequest) Reset()      { *m = AutocompleteFieldRequest{} }
func (*AutocompleteFieldRequest) ProtoMessage() {}
func (*AutocompleteFieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{51}
}
func (m *AutocompleteFieldRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutocompleteFieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutocompleteFieldRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutocompleteFieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutocompleteFieldRequest.Merge(m, src)
}
func (m *AutocompleteFieldRequest) XXX_Size() int {
	return m.Size()
}
func (m *AutocompleteFieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AutocompleteFieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AutocompleteFieldRequest proto.InternalMessageInfo

func (m *AutocompleteFieldRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *AutocompleteFieldRequest) GetFieldType() AutocompleteEntityKind {
	if m != nil {
		return m.FieldType
	}
	return AEK_UNKNOWN
}

func (m *AutocompleteFieldRequest) GetRequiredArgTypes() []AutocompleteEntityKind {
	if m != nil {
		return m.RequiredArgTypes
	}
	return nil
}

func (m *AutocompleteFieldRequest) GetClusterUID() string {
	if m != nil {
		return m.ClusterUID
	}
	return ""
}

type AutocompleteFieldResponse struct {
	Suggestions []*AutocompleteSuggestion `protobuf:"bytes,1,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
}

func (m *AutocompleteFieldResponse) Reset()      { *m = AutocompleteFieldResponse{} }
func (*AutocompleteFieldResponse) ProtoMessage() {}
func (*AutocompleteFieldResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{52}
}
func (m *AutocompleteFieldResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutocompleteFieldResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutocompleteFieldResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutocompleteFieldResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutocompleteFieldResponse.Merge(m, src)
}
func (m *AutocompleteFieldResponse) XXX_Size() int {
	return m.Size()
}
func (m *AutocompleteFieldResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AutocompleteFieldResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AutocompleteFieldResponse proto.InternalMessageInfo

func (m *AutocompleteFieldResponse) GetSuggestions() []*AutocompleteSuggestion {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

type OrgInfo struct {
	ID      *uuidpb.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgName string       `protobuf:"bytes,2,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
}

func (m *OrgInfo) Reset()      { *m = OrgInfo{} }
func (*OrgInfo) ProtoMessage() {}
func (*OrgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c309ce7890afda1a, []int{53}
}
func (m *OrgInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrgInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrgInfo.Merge(m, src)
}
func (m *OrgInfo) XXX_Size() int {
	return m.Size()
}
func (m *OrgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OrgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OrgInfo proto.InternalMessageInfo

func (m *OrgInfo) GetID() *uuidpb.UUID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *OrgInfo) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func init() {
	proto.RegisterEnum("px.cloudapi.ArtifactType", ArtifactType_name, ArtifactType_value)
	proto.RegisterEnum("px.cloudapi.ClusterStatus", ClusterStatus_name, ClusterStatus_value)
	proto.RegisterEnum("px.cloudapi.AutocompleteActionType", AutocompleteActionType_name, AutocompleteActionType_value)
	proto.RegisterEnum("px.cloudapi.AutocompleteEntityKind", AutocompleteEntityKind_name, AutocompleteEntityKind_value)
	proto.RegisterEnum("px.cloudapi.AutocompleteEntityState", AutocompleteEntityState_name, AutocompleteEntityState_value)
	proto.RegisterType((*LoginRequest)(nil), "px.cloudapi.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "px.cloudapi.LoginReply")
	proto.RegisterType((*GetImageCredentialsRequest)(nil), "px.cloudapi.GetImageCredentialsRequest")
	proto.RegisterType((*GetImageCredentialsResponse)(nil), "px.cloudapi.GetImageCredentialsResponse")
	proto.RegisterType((*ArtifactSet)(nil), "px.cloudapi.ArtifactSet")
	proto.RegisterType((*Artifact)(nil), "px.cloudapi.Artifact")
	proto.RegisterType((*GetArtifactListRequest)(nil), "px.cloudapi.GetArtifactListRequest")
	proto.RegisterType((*GetDownloadLinkRequest)(nil), "px.cloudapi.GetDownloadLinkRequest")
	proto.RegisterType((*GetDownloadLinkResponse)(nil), "px.cloudapi.GetDownloadLinkResponse")
	proto.RegisterType((*CreateClusterRequest)(nil), "px.cloudapi.CreateClusterRequest")
	proto.RegisterType((*CreateClusterResponse)(nil), "px.cloudapi.CreateClusterResponse")
	proto.RegisterType((*UpdateOrInstallClusterRequest)(nil), "px.cloudapi.UpdateOrInstallClusterRequest")
	proto.RegisterType((*UpdateOrInstallClusterResponse)(nil), "px.cloudapi.UpdateOrInstallClusterResponse")
	proto.RegisterType((*VizierConfig)(nil), "px.cloudapi.VizierConfig")
	proto.RegisterType((*VizierConfigUpdate)(nil), "px.cloudapi.VizierConfigUpdate")
	proto.RegisterType((*GetClusterInfoRequest)(nil), "px.cloudapi.GetClusterInfoRequest")
	proto.RegisterType((*K8SEvent)(nil), "px.cloudapi.K8sEvent")
	proto.RegisterType((*PodStatus)(nil), "px.cloudapi.PodStatus")
	proto.RegisterType((*ContainerStatus)(nil), "px.cloudapi.ContainerStatus")
	proto.RegisterType((*ClusterInfo)(nil), "px.cloudapi.ClusterInfo")
	proto.RegisterMapType((map[string]*PodStatus)(nil), "px.cloudapi.ClusterInfo.ControlPlanePodStatusesEntry")
	proto.RegisterType((*GetClusterInfoResponse)(nil), "px.cloudapi.GetClusterInfoResponse")
	proto.RegisterType((*GetClusterConnectionInfoRequest)(nil), "px.cloudapi.GetClusterConnectionInfoRequest")
	proto.RegisterType((*GetClusterConnectionInfoResponse)(nil), "px.cloudapi.GetClusterConnectionInfoResponse")
	proto.RegisterType((*UpdateClusterVizierConfigRequest)(nil), "px.cloudapi.UpdateClusterVizierConfigRequest")
	proto.RegisterType((*UpdateClusterVizierConfigResponse)(nil), "px.cloudapi.UpdateClusterVizierConfigResponse")
	proto.RegisterType((*DeploymentKey)(nil), "px.cloudapi.DeploymentKey")
	proto.RegisterType((*CreateDeploymentKeyRequest)(nil), "px.cloudapi.CreateDeploymentKeyRequest")
	proto.RegisterType((*ListDeploymentKeyRequest)(nil), "px.cloudapi.ListDeploymentKeyRequest")
	proto.RegisterType((*ListDeploymentKeyResponse)(nil), "px.cloudapi.ListDeploymentKeyResponse")
	proto.RegisterType((*GetDeploymentKeyRequest)(nil), "px.cloudapi.GetDeploymentKeyRequest")
	proto.RegisterType((*GetDeploymentKeyResponse)(nil), "px.cloudapi.GetDeploymentKeyResponse")
	proto.RegisterType((*APIKey)(nil), "px.cloudapi.APIKey")
	proto.RegisterType((*CreateAPIKeyRequest)(nil), "px.cloudapi.CreateAPIKeyRequest")
	proto.RegisterType((*ListAPIKeyRequest)(nil), "px.cloudapi.ListAPIKeyRequest")
	proto.RegisterType((*ListAPIKeyResponse)(nil), "px.cloudapi.ListAPIKeyResponse")
	proto.RegisterType((*GetAPIKeyRequest)(nil), "px.cloudapi.GetAPIKeyRequest")
	proto.RegisterType((*GetAPIKeyResponse)(nil), "px.cloudapi.GetAPIKeyResponse")
	proto.RegisterType((*GetLiveViewsReq)(nil), "px.cloudapi.GetLiveViewsReq")
	proto.RegisterType((*LiveViewMetadata)(nil), "px.cloudapi.LiveViewMetadata")
	proto.RegisterType((*GetLiveViewsResp)(nil), "px.cloudapi.GetLiveViewsResp")
	proto.RegisterType((*GetLiveViewContentsReq)(nil), "px.cloudapi.GetLiveViewContentsReq")
	proto.RegisterType((*GetLiveViewContentsResp)(nil), "px.cloudapi.GetLiveViewContentsResp")
	proto.RegisterType((*GetScriptsReq)(nil), "px.cloudapi.GetScriptsReq")
	proto.RegisterType((*ScriptMetadata)(nil), "px.cloudapi.ScriptMetadata")
	proto.RegisterType((*GetScriptsResp)(nil), "px.cloudapi.GetScriptsResp")
	proto.RegisterType((*GetScriptContentsReq)(nil), "px.cloudapi.GetScriptContentsReq")
	proto.RegisterType((*GetScriptContentsResp)(nil), "px.cloudapi.GetScriptContentsResp")
	proto.RegisterType((*AutocompleteRequest)(nil), "px.cloudapi.AutocompleteRequest")
	proto.RegisterType((*TabSuggestion)(nil), "px.cloudapi.TabSuggestion")
	proto.RegisterType((*AutocompleteSuggestion)(nil), "px.cloudapi.AutocompleteSuggestion")
	proto.RegisterType((*AutocompleteResponse)(nil), "px.cloudapi.AutocompleteResponse")
	proto.RegisterType((*AutocompleteFieldRequest)(nil), "px.cloudapi.AutocompleteFieldRequest")
	proto.RegisterType((*AutocompleteFieldResponse)(nil), "px.cloudapi.AutocompleteFieldResponse")
	proto.RegisterType((*OrgInfo)(nil), "px.cloudapi.OrgInfo")
}

func init() {
	proto.RegisterFile("src/cloud/cloudapipb/cloudapi.proto", fileDescriptor_c309ce7890afda1a)
}

var fileDescriptor_c309ce7890afda1a = []byte{
	// 3208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x3f, 0x70, 0x1b, 0x47,
	0x77, 0xd7, 0x01, 0x24, 0x05, 0x3c, 0xf0, 0x0f, 0xb8, 0xa4, 0x28, 0x08, 0x92, 0x40, 0xea, 0xf8,
	0x29, 0xe2, 0xa7, 0xcf, 0x06, 0x3f, 0xd1, 0x96, 0x2c, 0x4b, 0xb6, 0x63, 0x10, 0x80, 0x29, 0x88,
	0x24, 0x84, 0x1c, 0x40, 0x3a, 0xf6, 0x64, 0xe6, 0x72, 0x00, 0x96, 0xe0, 0x0d, 0x0f, 0x77, 0xa7,
	0xdb, 0x05, 0x25, 0xba, 0x4a, 0x91, 0x32, 0x33, 0x49, 0x9c, 0x26, 0x29, 0x92, 0xda, 0x93, 0x4c,
	0x52, 0xa7, 0x4d, 0x93, 0x49, 0x9a, 0x8c, 0xd3, 0xb9, 0x89, 0x26, 0xa2, 0x9b, 0x14, 0x29, 0x5c,
	0xa6, 0xcc, 0xec, 0x9f, 0x03, 0xee, 0x80, 0x03, 0x48, 0x39, 0x2e, 0xd2, 0x50, 0xd8, 0xf7, 0x7e,
	0xef, 0xed, 0xdb, 0xf7, 0xde, 0xbe, 0xdd, 0xb7, 0x27, 0x58, 0x27, 0x5e, 0x6b, 0xb3, 0x65, 0x39,
	0xbd, 0xb6, 0xf8, 0x6b, 0xb8, 0xa6, 0xdb, 0xec, 0xff, 0xcc, 0xbb, 0x9e, 0x43, 0x1d, 0x94, 0x72,
	0x5f, 0xe7, 0x7d, 0x52, 0xf6, 0xfd, 0x8e, 0x49, 0x8f, 0x7b, 0xcd, 0x7c, 0xcb, 0xe9, 0x6e, 0x76,
	0x9c, 0x8e, 0xb3, 0xc9, 0x31, 0xcd, 0xde, 0x11, 0x1f, 0xf1, 0x01, 0xff, 0x25, 0x64, 0xb3, 0x37,
	0x3b, 0x8e, 0xd3, 0xb1, 0xf0, 0x00, 0x85, 0xbb, 0x2e, 0x3d, 0x93, 0xcc, 0xd5, 0x61, 0x26, 0x35,
	0xbb, 0x98, 0x50, 0xa3, 0xeb, 0x4a, 0x40, 0x6e, 0x18, 0xf0, 0xca, 0x33, 0x5c, 0x17, 0x7b, 0x44,
	0xf2, 0xd7, 0x98, 0xf9, 0x86, 0x6b, 0x6e, 0xba, 0xbd, 0xa6, 0x65, 0xb6, 0x36, 0x7b, 0x3d, 0xb3,
	0xed, 0x36, 0xf9, 0x3f, 0x12, 0xb1, 0xc1, 0x10, 0xe4, 0xd8, 0xf0, 0x70, 0x7b, 0xf3, 0xe4, 0x31,
	0xd9, 0xec, 0x62, 0x6a, 0xb4, 0x0d, 0x6a, 0xb8, 0xcd, 0xfe, 0x4f, 0x89, 0xcc, 0x06, 0x90, 0xa7,
	0x26, 0x71, 0x9b, 0xec, 0xaf, 0xe0, 0xa9, 0x0f, 0x60, 0x76, 0xcf, 0xe9, 0x98, 0xb6, 0x86, 0x5f,
	0xf6, 0x30, 0xa1, 0xe8, 0x0e, 0xcc, 0x1a, 0xad, 0x16, 0x26, 0x44, 0xa7, 0xce, 0x09, 0xb6, 0x33,
	0xca, 0x9a, 0xb2, 0x91, 0xd4, 0x52, 0x82, 0xd6, 0x60, 0x24, 0xb5, 0x00, 0x20, 0x45, 0x5c, 0xeb,
	0x0c, 0x2d, 0xc3, 0x74, 0x10, 0x29, 0x06, 0xe8, 0x36, 0x00, 0x7e, 0xed, 0x9a, 0x1e, 0x26, 0xba,
	0x41, 0x33, 0xb1, 0x35, 0x65, 0x23, 0xae, 0x25, 0x25, 0xa5, 0x40, 0xd5, 0x5b, 0x90, 0xdd, 0xc1,
	0xb4, 0xd2, 0x35, 0x3a, 0xb8, 0xe8, 0xe1, 0x36, 0xb6, 0xa9, 0x69, 0x58, 0x44, 0xda, 0xa0, 0x7e,
	0x00, 0x37, 0x23, 0xb9, 0xc4, 0x75, 0x6c, 0x82, 0xd9, 0x8c, 0x2d, 0x0f, 0xb7, 0x89, 0x3f, 0x23,
	0x1f, 0xa8, 0x0d, 0x48, 0x15, 0x3c, 0x6a, 0x1e, 0x19, 0x2d, 0x5a, 0xc7, 0x14, 0x21, 0x98, 0xb2,
	0x8d, 0x2e, 0x96, 0x18, 0xfe, 0x1b, 0x3d, 0x80, 0x84, 0x21, 0x21, 0x99, 0xd8, 0x5a, 0x7c, 0x23,
	0xb5, 0x75, 0x2d, 0x1f, 0x48, 0x80, 0xbc, 0x2f, 0xaf, 0xf5, 0x61, 0xea, 0x4f, 0x0a, 0x24, 0x7c,
	0x32, 0x7a, 0x0c, 0xc9, 0x7e, 0x18, 0xb9, 0xe2, 0xd4, 0x56, 0x36, 0x2f, 0xe2, 0x98, 0xf7, 0xe3,
	0x98, 0x6f, 0xf8, 0x08, 0x6d, 0x00, 0x46, 0xab, 0x90, 0x6a, 0x39, 0xdd, 0xae, 0x49, 0xf5, 0x63,
	0x83, 0x1c, 0x73, 0x7f, 0x24, 0x35, 0x10, 0xa4, 0x67, 0x06, 0x39, 0x66, 0x80, 0x53, 0xec, 0x11,
	0xd3, 0xb1, 0x75, 0x42, 0xbd, 0x4c, 0x5c, 0x00, 0x24, 0xa9, 0x4e, 0x3d, 0xf4, 0x1c, 0x96, 0x8c,
	0x53, 0xc3, 0xb4, 0x8c, 0xa6, 0x85, 0x75, 0xdf, 0x3c, 0x92, 0x99, 0x5a, 0x8b, 0x6f, 0xcc, 0x6f,
	0xdd, 0x88, 0x5c, 0x46, 0xe3, 0xcc, 0xc5, 0x1a, 0xea, 0x4b, 0xf9, 0x64, 0x82, 0x6e, 0x41, 0xb2,
	0x75, 0x6c, 0xd8, 0x1d, 0x6c, 0x39, 0x9d, 0xcc, 0x34, 0x9f, 0x6a, 0x40, 0x50, 0xff, 0x42, 0x81,
	0x95, 0x1d, 0x4c, 0x7d, 0xf8, 0x9e, 0x49, 0xa8, 0x9f, 0x1c, 0xeb, 0x30, 0xe7, 0x4f, 0xad, 0x07,
	0xbc, 0x3b, 0xeb, 0x13, 0xab, 0xcc, 0xcb, 0x9f, 0x05, 0x40, 0xf4, 0xcc, 0xc5, 0x7c, 0xb5, 0x13,
	0x6d, 0xec, 0xcb, 0xb3, 0x11, 0x0b, 0xaf, 0x65, 0x76, 0x4d, 0xca, 0x9d, 0x10, 0xd7, 0xc4, 0x40,
	0xfd, 0x1b, 0x61, 0x55, 0xc9, 0x79, 0x65, 0x5b, 0x8e, 0xd1, 0xde, 0x33, 0xed, 0x93, 0x77, 0xb2,
	0x6a, 0xc8, 0xc1, 0xb1, 0x11, 0x07, 0x8f, 0x98, 0x1d, 0x7f, 0x27, 0xb3, 0xd5, 0x3f, 0x51, 0xe0,
	0xfa, 0x88, 0x81, 0x32, 0x63, 0xd3, 0x10, 0xef, 0x79, 0x96, 0xb4, 0x8b, 0xfd, 0x44, 0x2a, 0xcc,
	0x90, 0x63, 0x63, 0xeb, 0xe1, 0x23, 0x61, 0xc9, 0x36, 0x9c, 0xbf, 0x59, 0x9d, 0xa9, 0x3f, 0x2b,
	0x6c, 0x3d, 0x7c, 0xa4, 0x49, 0x0e, 0x7a, 0x0a, 0xa9, 0x53, 0xc3, 0x32, 0xdb, 0x7a, 0xcf, 0xa6,
	0xa6, 0xc5, 0xed, 0x99, 0x9c, 0x70, 0xc0, 0xe1, 0x07, 0x0c, 0xad, 0xae, 0xc0, 0x72, 0xd1, 0xc3,
	0x06, 0xc5, 0x45, 0xab, 0x47, 0x28, 0xf6, 0xfc, 0xbd, 0x75, 0x08, 0xd7, 0x86, 0xe8, 0xd2, 0xc6,
	0x4f, 0x01, 0x5a, 0x82, 0xa4, 0x9b, 0x6d, 0x99, 0xdd, 0x0b, 0x6c, 0xf1, 0xa2, 0xf2, 0xe4, 0x0f,
	0x0e, 0x2a, 0xa5, 0xed, 0xb9, 0xf3, 0x37, 0xab, 0x49, 0x29, 0x59, 0x29, 0x69, 0x49, 0x29, 0x51,
	0x69, 0xab, 0x7f, 0xad, 0xc0, 0xed, 0x03, 0xb7, 0x6d, 0x50, 0xfc, 0xc2, 0xab, 0xd8, 0x84, 0x1a,
	0x96, 0x15, 0x9e, 0xf9, 0xff, 0x38, 0x01, 0xca, 0xc0, 0x55, 0x19, 0x2d, 0x19, 0x3c, 0x7f, 0xc8,
	0xe2, 0xcf, 0xaa, 0x84, 0x6b, 0x39, 0x67, 0x3a, 0xa6, 0xad, 0x36, 0xf7, 0x54, 0x42, 0x9b, 0xf5,
	0x89, 0x65, 0xda, 0x6a, 0xab, 0x3b, 0x90, 0x1b, 0x67, 0x9e, 0x74, 0xc0, 0x5d, 0x98, 0xef, 0x71,
	0x84, 0x4e, 0xa8, 0xe1, 0x51, 0x2c, 0x6c, 0x4c, 0x68, 0x73, 0x82, 0x5a, 0x17, 0x44, 0xd5, 0x81,
	0xd9, 0x43, 0xf3, 0x1b, 0x13, 0x7b, 0x45, 0xc7, 0x3e, 0x32, 0x3b, 0x68, 0x13, 0x96, 0x5c, 0x83,
	0x10, 0x7a, 0xec, 0x39, 0xbd, 0xce, 0xb1, 0x8e, 0x6d, 0xb6, 0xd7, 0x7c, 0x59, 0x14, 0x60, 0x95,
	0x05, 0x07, 0xe5, 0x61, 0xc9, 0xe8, 0x51, 0x47, 0x97, 0x93, 0xf9, 0x02, 0x31, 0x2e, 0xb0, 0xc8,
	0x58, 0xc2, 0x50, 0x89, 0x57, 0xff, 0x5e, 0x01, 0x14, 0x9c, 0x51, 0x70, 0xd1, 0xee, 0xf8, 0x79,
	0xa3, 0xb2, 0x64, 0xdb, 0x71, 0xac, 0x43, 0xc3, 0xea, 0xe1, 0x48, 0x9b, 0x9e, 0x8f, 0xb7, 0x69,
	0xb2, 0xb2, 0x08, 0x7b, 0x3f, 0x87, 0x6b, 0x3b, 0x98, 0xfa, 0x31, 0xb4, 0x8f, 0x1c, 0x3f, 0x01,
	0xee, 0x41, 0x6c, 0x7c, 0xe0, 0x67, 0xce, 0xdf, 0xac, 0xc6, 0x2a, 0x25, 0x2d, 0x66, 0xb6, 0xd5,
	0xbf, 0x54, 0x20, 0xb1, 0xfb, 0x98, 0x94, 0x4f, 0xb1, 0x4d, 0x59, 0xdc, 0xbb, 0x98, 0x10, 0xa3,
	0xe3, 0xef, 0x6b, 0x7f, 0x88, 0x3e, 0x06, 0x38, 0x32, 0x3d, 0x42, 0x75, 0x56, 0x67, 0xc7, 0xda,
	0x1a, 0xa8, 0xc7, 0x1c, 0xcd, 0xc6, 0xe8, 0x23, 0x48, 0x5a, 0x86, 0x2f, 0x79, 0xf1, 0xc6, 0x4a,
	0x30, 0x30, 0x1b, 0xaa, 0xff, 0x1e, 0x83, 0x64, 0xcd, 0x69, 0xd7, 0xa9, 0x41, 0x7b, 0x24, 0xf2,
	0x90, 0x79, 0x02, 0x33, 0x84, 0x73, 0x65, 0xdd, 0x53, 0xd9, 0x4a, 0xc5, 0xe1, 0x9b, 0x3f, 0x79,
	0x4c, 0xf2, 0x83, 0x63, 0x3a, 0x5f, 0x73, 0xda, 0xb5, 0x63, 0x83, 0x60, 0x4d, 0x4a, 0xb0, 0x14,
	0x14, 0xbf, 0x74, 0x7f, 0xc9, 0xe2, 0x20, 0x98, 0x13, 0xd4, 0x7d, 0xb9, 0xf0, 0x15, 0x98, 0xf1,
	0xb0, 0x41, 0x1c, 0x3b, 0x33, 0xc5, 0xd9, 0x72, 0x84, 0x3e, 0x01, 0x68, 0x39, 0x36, 0x35, 0x4c,
	0x1b, 0x7b, 0x24, 0x33, 0xcd, 0x4f, 0xb8, 0x5b, 0xa1, 0xfa, 0x55, 0xf4, 0xd9, 0x62, 0x01, 0x5a,
	0x00, 0x8f, 0x9e, 0x01, 0xb4, 0x78, 0x65, 0x68, 0xb3, 0x23, 0x7b, 0xe6, 0x22, 0xa7, 0xc8, 0xad,
	0x2a, 0x24, 0x0a, 0x54, 0x4b, 0xb6, 0xfc, 0x9f, 0xe8, 0x7d, 0x98, 0xc1, 0x2c, 0x76, 0x24, 0x73,
	0x35, 0xe2, 0x94, 0xf5, 0x23, 0xab, 0x49, 0x90, 0xfa, 0x56, 0x81, 0x85, 0x21, 0xc3, 0x22, 0x3d,
	0xfb, 0x19, 0x4c, 0x33, 0x3f, 0xf8, 0x07, 0xca, 0xc6, 0x78, 0xc7, 0x86, 0xb4, 0x61, 0x4d, 0x88,
	0x05, 0x33, 0x29, 0x1e, 0xce, 0xa4, 0x71, 0x0e, 0xfd, 0xc5, 0x5c, 0xa2, 0xfe, 0xf3, 0x34, 0xa4,
	0x02, 0x5b, 0xe2, 0xd2, 0x7b, 0x01, 0x6d, 0x0d, 0xa5, 0x53, 0x36, 0x1c, 0x4f, 0xa1, 0x52, 0x46,
	0xd3, 0x4f, 0xa3, 0x0d, 0x58, 0x60, 0x09, 0xfb, 0x0c, 0x1b, 0x1e, 0x6d, 0x62, 0x83, 0x56, 0x89,
	0x3c, 0x4b, 0x87, 0xc9, 0xe8, 0x01, 0xcc, 0xb4, 0x78, 0x51, 0xe1, 0x0b, 0x4f, 0x0d, 0x9d, 0x76,
	0xc1, 0xaa, 0xa3, 0x49, 0x20, 0xda, 0x84, 0x94, 0x5f, 0xc6, 0x7b, 0x66, 0x5b, 0x5c, 0x1f, 0xb6,
	0xe7, 0xcf, 0xdf, 0xac, 0x82, 0x34, 0xe6, 0xa0, 0x52, 0xd2, 0xfc, 0x4a, 0x7f, 0x60, 0xb6, 0xd9,
	0x8d, 0xd2, 0x17, 0xe0, 0x21, 0x9d, 0x11, 0x37, 0x4a, 0x49, 0xe3, 0x87, 0x73, 0x1e, 0x96, 0x5c,
	0x0f, 0x53, 0x7a, 0xa6, 0x87, 0x90, 0x49, 0x8e, 0x5c, 0x14, 0xac, 0x62, 0x00, 0x7f, 0x0f, 0x16,
	0x7c, 0xa0, 0x7f, 0x26, 0x5c, 0xe5, 0xd8, 0x79, 0x49, 0x3e, 0x94, 0x47, 0xc3, 0x5d, 0x98, 0x3f,
	0xe5, 0x8b, 0xe8, 0xe3, 0x12, 0x62, 0x43, 0x09, 0xaa, 0x0f, 0xf3, 0x20, 0xcb, 0x36, 0x82, 0xe7,
	0x58, 0xba, 0x6b, 0x19, 0x36, 0xd6, 0x5d, 0xa7, 0xad, 0x0b, 0x67, 0x62, 0x92, 0x01, 0x9e, 0xc4,
	0x0f, 0xa3, 0x1c, 0xcf, 0x62, 0xc9, 0xb3, 0xcd, 0x73, 0xac, 0x1a, 0x93, 0xec, 0xd7, 0x06, 0x4c,
	0xca, 0x36, 0xf5, 0xce, 0xb4, 0xeb, 0xad, 0x68, 0x2e, 0xba, 0x09, 0x49, 0xbb, 0xd7, 0xd5, 0x6d,
	0xa7, 0x8d, 0x49, 0x26, 0xb5, 0xa6, 0x6c, 0x4c, 0x6b, 0x09, 0xbb, 0xd7, 0xad, 0xb2, 0x31, 0xfa,
	0x10, 0x56, 0x18, 0xd3, 0xb4, 0x09, 0xf5, 0x7a, 0x5d, 0x6c, 0xb3, 0x0c, 0x14, 0xc8, 0x59, 0x8e,
	0x5c, 0xb6, 0x7b, 0xdd, 0x4a, 0x80, 0xc9, 0xa5, 0xb2, 0x4d, 0xb8, 0x35, 0xc9, 0x16, 0x76, 0x0d,
	0x39, 0xc1, 0x67, 0xfe, 0x35, 0xe4, 0x04, 0x9f, 0xa1, 0xf7, 0x60, 0xfa, 0x94, 0xd5, 0x71, 0x59,
	0x3d, 0x57, 0x42, 0x6b, 0xec, 0xcb, 0x6b, 0x02, 0xf4, 0x24, 0xf6, 0x58, 0x51, 0xab, 0xfc, 0x1a,
	0x16, 0xaa, 0xee, 0xf2, 0xfc, 0xfc, 0x10, 0x12, 0xd2, 0xfb, 0xec, 0x66, 0xce, 0x5c, 0x96, 0x19,
	0xe7, 0x32, 0xad, 0x8f, 0x54, 0x9f, 0xc3, 0xea, 0x40, 0x5f, 0xd1, 0xb1, 0x6d, 0xdc, 0xa2, 0xa6,
	0x63, 0xff, 0xac, 0x73, 0x03, 0xc3, 0xda, 0x78, 0x5d, 0xd2, 0xca, 0xdf, 0x40, 0xd2, 0x74, 0x0b,
	0xed, 0xb6, 0x87, 0x89, 0x6c, 0x20, 0xc4, 0xae, 0xad, 0xd4, 0x24, 0x51, 0x1b, 0xf0, 0x07, 0xbd,
	0x4d, 0x2c, 0xd0, 0xdb, 0xa8, 0x7f, 0xae, 0xc0, 0x9a, 0x38, 0xf2, 0xe4, 0x54, 0xa1, 0x7d, 0xf2,
	0x8e, 0x46, 0xa3, 0x12, 0xcc, 0x89, 0x9d, 0x25, 0x0f, 0x5f, 0x19, 0x8a, 0xd5, 0xb1, 0x3b, 0x51,
	0x4c, 0xad, 0xcd, 0xb6, 0x02, 0x23, 0x75, 0x1d, 0xee, 0x4c, 0x30, 0x49, 0xac, 0x5d, 0xfd, 0x2b,
	0x05, 0xe6, 0x4a, 0xfc, 0x4a, 0xc4, 0xb2, 0x66, 0x17, 0x9f, 0x5d, 0xde, 0x4a, 0x99, 0x3a, 0xb1,
	0x41, 0xea, 0x7c, 0x1c, 0xaa, 0x8d, 0x17, 0x9f, 0xa1, 0x81, 0xf3, 0x01, 0xc1, 0x54, 0x1b, 0x93,
	0x96, 0x2c, 0xb6, 0xfc, 0xb7, 0xfa, 0x5b, 0xc8, 0x8a, 0xc2, 0x19, 0x32, 0xd0, 0xf7, 0xa6, 0x2f,
	0xa1, 0x04, 0x24, 0xb2, 0x90, 0x61, 0xbd, 0x49, 0x14, 0x5e, 0xdd, 0x85, 0x1b, 0x11, 0x3c, 0x99,
	0x02, 0x79, 0x98, 0x3a, 0xc1, 0x67, 0x7e, 0x92, 0x86, 0x0b, 0x6a, 0x58, 0x82, 0xe3, 0xd4, 0x6d,
	0x71, 0xb1, 0x8f, 0xb2, 0xeb, 0xd2, 0xa9, 0xf9, 0x0c, 0x32, 0xa3, 0x3a, 0xa4, 0x3d, 0xef, 0x0d,
	0xb6, 0xe5, 0x64, 0x73, 0x18, 0x4c, 0xfd, 0x56, 0x81, 0x99, 0x42, 0xad, 0xf2, 0xff, 0x2b, 0x7a,
	0xbf, 0x86, 0x25, 0x11, 0x3d, 0x61, 0xd9, 0xa4, 0xb0, 0x2d, 0xc1, 0x22, 0x0b, 0x4d, 0x08, 0xa8,
	0x7e, 0x0a, 0x28, 0x48, 0x94, 0x8e, 0xb9, 0x17, 0x0a, 0xd4, 0x52, 0xb8, 0x13, 0x13, 0x50, 0x11,
	0xa1, 0xa7, 0x90, 0x66, 0x1d, 0x6b, 0x68, 0xee, 0x4b, 0x87, 0xe6, 0x09, 0x2c, 0x06, 0x84, 0xfb,
	0xcd, 0x40, 0x20, 0x26, 0x91, 0x33, 0xf3, 0x60, 0x2c, 0xc2, 0xc2, 0x0e, 0xa6, 0x7b, 0xe6, 0x29,
	0x3e, 0x34, 0xf1, 0x2b, 0xa2, 0xe1, 0x97, 0xaa, 0x06, 0x69, 0x7f, 0xbc, 0x2f, 0x6f, 0x24, 0x68,
	0xa5, 0x6f, 0x4b, 0x32, 0x14, 0x17, 0xdf, 0x3f, 0xb1, 0x81, 0x7f, 0xfa, 0x37, 0x9f, 0xf8, 0xe0,
	0xe6, 0xa3, 0xd6, 0xf8, 0xfa, 0x02, 0xd3, 0x10, 0x97, 0x5d, 0xf6, 0x2c, 0xf3, 0x14, 0xeb, 0xa7,
	0x8c, 0x22, 0x5d, 0x74, 0x3b, 0x64, 0xe8, 0xb0, 0x19, 0x5a, 0xd2, 0xf2, 0x35, 0xa8, 0xcf, 0x79,
	0x19, 0xf7, 0x11, 0xec, 0xd4, 0x60, 0x57, 0x31, 0x0d, 0xbf, 0x44, 0xbf, 0x85, 0xd9, 0xbe, 0x5e,
	0xbd, 0x6f, 0x35, 0x3f, 0xe0, 0x7d, 0x38, 0x3b, 0xe0, 0x7d, 0x55, 0x15, 0x7e, 0x5d, 0xbf, 0x1e,
	0xa9, 0x8c, 0xb8, 0xe8, 0x63, 0x48, 0xf8, 0xf7, 0x32, 0xe9, 0xcc, 0x0b, 0x6c, 0xec, 0xc3, 0xd9,
	0xbd, 0xc1, 0x7d, 0x6d, 0xe9, 0x2d, 0xa9, 0x4e, 0x3a, 0x29, 0xe5, 0xbe, 0xb6, 0xfc, 0x19, 0xd0,
	0x2a, 0xc4, 0x4f, 0x4d, 0x22, 0xd3, 0x77, 0x8e, 0x29, 0xe6, 0xcf, 0x5b, 0xf9, 0x43, 0x93, 0x68,
	0x8c, 0xa3, 0x2e, 0xc0, 0xdc, 0x0e, 0xa6, 0xf5, 0x96, 0x67, 0xba, 0x7c, 0x75, 0x2a, 0x85, 0x79,
	0x31, 0xfa, 0xa5, 0x62, 0x83, 0x54, 0x98, 0x3b, 0x36, 0x88, 0xde, 0xf7, 0x19, 0xdf, 0x17, 0x09,
	0x2d, 0x75, 0x6c, 0x10, 0x7f, 0x71, 0xea, 0x0e, 0xcc, 0x07, 0xcd, 0x20, 0x2e, 0x7a, 0x08, 0x57,
	0x89, 0x18, 0xca, 0xd0, 0xdd, 0x0c, 0xb9, 0x25, 0x6c, 0xa3, 0xe6, 0x63, 0xd5, 0x02, 0x2c, 0xf7,
	0x15, 0x05, 0x83, 0xf6, 0x6b, 0x48, 0x0a, 0xc8, 0x20, 0x62, 0xb3, 0xe7, 0x6f, 0x56, 0x13, 0x02,
	0x59, 0x29, 0x69, 0x09, 0xc1, 0xae, 0xb4, 0x55, 0x8b, 0xb7, 0x67, 0xc3, 0x2a, 0x88, 0x8b, 0x3e,
	0x1a, 0x09, 0xd5, 0x44, 0x9b, 0x06, 0x81, 0xca, 0x42, 0x62, 0x28, 0x48, 0xfd, 0xb1, 0xfa, 0x8f,
	0x0a, 0x2c, 0x15, 0x7a, 0xd4, 0x69, 0x39, 0x5d, 0xd7, 0xc2, 0x14, 0xfb, 0xbb, 0x73, 0x19, 0xa6,
	0x4d, 0xdb, 0xed, 0x51, 0xff, 0x0d, 0x8f, 0x0f, 0xd0, 0x6d, 0x80, 0x56, 0xcf, 0x23, 0x8e, 0xa7,
	0xbb, 0x0e, 0xf1, 0x5f, 0x0d, 0x05, 0xa5, 0xe6, 0x10, 0xf4, 0x14, 0x66, 0x0c, 0x7e, 0xa2, 0xcb,
	0xb7, 0x99, 0xf5, 0xf0, 0xbe, 0x0c, 0x4c, 0x53, 0xe0, 0x30, 0xfe, 0x4a, 0x23, 0x45, 0x86, 0xef,
	0xad, 0x53, 0x17, 0xdd, 0x5b, 0xd5, 0xbf, 0x53, 0x60, 0xae, 0x61, 0x34, 0xeb, 0xbd, 0x4e, 0x07,
	0x13, 0xae, 0xe2, 0x26, 0x24, 0xa9, 0xd1, 0xd4, 0x4d, 0xbb, 0x8d, 0x5f, 0x73, 0xc3, 0xe3, 0x5a,
	0x82, 0x1a, 0xcd, 0x0a, 0x1b, 0xa3, 0x47, 0x70, 0x1d, 0xbf, 0xc6, 0xad, 0x1e, 0x15, 0x2f, 0x74,
	0x47, 0x6c, 0x22, 0x82, 0x2d, 0xdc, 0xa2, 0xb2, 0xb5, 0xbf, 0x36, 0x60, 0x17, 0x18, 0xb7, 0xce,
	0x99, 0xa8, 0x0c, 0x29, 0xd2, 0x9f, 0x82, 0xe5, 0x32, 0xcb, 0x86, 0xf1, 0x2b, 0x1b, 0x98, 0xa3,
	0x05, 0xe5, 0xd4, 0xff, 0x56, 0x60, 0x25, 0x1a, 0x87, 0x3e, 0x82, 0xa9, 0x13, 0xd3, 0x16, 0x79,
	0x31, 0xc9, 0x69, 0x65, 0x9b, 0x9a, 0xf4, 0x6c, 0xd7, 0xb4, 0xdb, 0x1a, 0x17, 0xe8, 0xa7, 0x7b,
	0x2c, 0x90, 0xee, 0x6b, 0x90, 0x62, 0x5b, 0x81, 0xa5, 0x82, 0x1f, 0x88, 0xa4, 0x16, 0x24, 0xb1,
	0xcb, 0x79, 0xd7, 0xa0, 0xad, 0x63, 0xdc, 0x16, 0x9e, 0xc2, 0xe2, 0x95, 0x32, 0xae, 0xcd, 0x4b,
	0x72, 0x45, 0x50, 0xd1, 0x13, 0xbf, 0x9f, 0x9b, 0xe6, 0x86, 0xfd, 0xea, 0x02, 0xc3, 0x82, 0xbd,
	0x9c, 0xfa, 0x9d, 0x02, 0xcb, 0xe1, 0xbc, 0xea, 0x9f, 0x19, 0x0b, 0x47, 0x8e, 0xd7, 0x35, 0x28,
	0xe5, 0xf3, 0x0f, 0x52, 0x6c, 0xbe, 0x4f, 0xae, 0xf0, 0x5c, 0x5b, 0x87, 0x39, 0x93, 0xe8, 0x83,
	0x98, 0xc8, 0x28, 0xcd, 0x9a, 0xa4, 0xdc, 0xa7, 0xa1, 0x6d, 0x98, 0xa7, 0xc1, 0x14, 0xf0, 0xe3,
	0x13, 0x3e, 0xa5, 0x43, 0x59, 0xa2, 0x0d, 0x49, 0xa8, 0xff, 0xa3, 0x40, 0x26, 0x68, 0xea, 0x17,
	0x26, 0xb6, 0xda, 0x93, 0xf7, 0xc1, 0x36, 0xc0, 0x11, 0x43, 0x05, 0xdf, 0x4f, 0x2f, 0x15, 0xb7,
	0x24, 0x17, 0xe3, 0xcf, 0xa8, 0xbf, 0x07, 0xc8, 0xc3, 0x2f, 0x7b, 0xa6, 0xc7, 0x8e, 0x78, 0xaf,
	0xc3, 0x55, 0x09, 0xf3, 0x2f, 0xa9, 0x2b, 0xed, 0x8b, 0x17, 0xbc, 0x0e, 0xd3, 0x48, 0xde, 0x7d,
	0x0b, 0x35, 0xe1, 0x46, 0xc4, 0xca, 0x65, 0xa4, 0x86, 0x12, 0x5f, 0xf9, 0x99, 0x89, 0xbf, 0x0f,
	0x57, 0x5f, 0x78, 0x9d, 0x77, 0x6b, 0xaa, 0x6f, 0x40, 0xc2, 0xf1, 0x3a, 0x7a, 0x20, 0xb9, 0xaf,
	0x3a, 0x5e, 0x87, 0xb5, 0x96, 0xf7, 0xff, 0x56, 0x81, 0xd9, 0xe0, 0x2b, 0x2f, 0x9a, 0x07, 0x28,
	0x34, 0xf4, 0x83, 0xea, 0x6e, 0xf5, 0xc5, 0x97, 0xd5, 0xf4, 0x15, 0x84, 0x60, 0xbe, 0xd0, 0xd0,
	0xf7, 0x2a, 0xd5, 0x83, 0xdf, 0xd7, 0x0b, 0xfb, 0xa5, 0x47, 0x1f, 0xa6, 0x15, 0xb4, 0x04, 0x0b,
	0x85, 0x86, 0x5e, 0x2a, 0x68, 0x5f, 0x56, 0xaa, 0x92, 0x18, 0x43, 0x59, 0x58, 0x29, 0x34, 0xf4,
	0xe2, 0x8b, 0x6a, 0xa3, 0x50, 0xa9, 0x96, 0x35, 0xbd, 0x5e, 0x6e, 0xe8, 0x5f, 0x15, 0xf6, 0xf7,
	0xea, 0xe9, 0x2d, 0xb4, 0x0e, 0xab, 0x23, 0xbc, 0x46, 0x79, 0xbf, 0xb6, 0x57, 0x68, 0x94, 0x25,
	0xe8, 0x13, 0xb4, 0x06, 0xb7, 0x46, 0x40, 0xc1, 0x79, 0xdb, 0xf7, 0xff, 0x54, 0x81, 0xb9, 0xd0,
	0x13, 0x00, 0xb3, 0xb6, 0x58, 0x0f, 0x58, 0x2b, 0xc6, 0xcf, 0xca, 0x85, 0xbd, 0xc6, 0xb3, 0xaf,
	0xd2, 0x0a, 0x4a, 0xc3, 0x2c, 0xe7, 0xfb, 0x94, 0x18, 0xb3, 0xbd, 0x58, 0xd7, 0x4b, 0x95, 0x7a,
	0xf1, 0x45, 0xb5, 0x5a, 0x2e, 0x36, 0xca, 0xa5, 0x74, 0x1c, 0x2d, 0x40, 0x8a, 0xc1, 0x6a, 0xa5,
	0x42, 0xa3, 0x52, 0xdd, 0x49, 0x4f, 0x49, 0xb9, 0x01, 0x64, 0x1a, 0x2d, 0x43, 0xda, 0x87, 0x94,
	0xf5, 0x2f, 0x0a, 0x95, 0xbd, 0x72, 0x29, 0x3d, 0x73, 0x7f, 0x27, 0x5c, 0x85, 0x06, 0x75, 0x98,
	0xa9, 0x2c, 0x84, 0x1c, 0x39, 0x0b, 0x09, 0x46, 0x28, 0x97, 0x2a, 0x8d, 0xb4, 0xc2, 0xdd, 0x5c,
	0x68, 0xe8, 0xf5, 0xf2, 0x5e, 0xb9, 0xd8, 0x48, 0xc7, 0xee, 0x1f, 0x85, 0x15, 0x0d, 0xf2, 0x92,
	0x2b, 0x2a, 0xef, 0x06, 0x14, 0xa5, 0xe0, 0x2a, 0x23, 0xd4, 0x5e, 0x94, 0xd2, 0x8a, 0x3f, 0xa8,
	0x1f, 0x16, 0xd3, 0x31, 0xae, 0x94, 0x0d, 0x8a, 0x5a, 0xa5, 0xd6, 0x48, 0xc7, 0xd1, 0x22, 0xcc,
	0xb1, 0x71, 0xb5, 0xb0, 0x5f, 0xae, 0xd7, 0x0a, 0xc5, 0x72, 0x7a, 0xea, 0xbe, 0x0b, 0xd7, 0xc7,
	0x94, 0x1a, 0x31, 0x51, 0xd0, 0x99, 0x92, 0x50, 0x2b, 0x57, 0x4b, 0xcc, 0x2b, 0x8a, 0x4f, 0xd0,
	0x0e, 0xaa, 0x55, 0x46, 0x90, 0x13, 0xd6, 0x7d, 0x77, 0xc4, 0x79, 0xb2, 0x94, 0xeb, 0x7a, 0xa3,
	0xac, 0xed, 0x57, 0xaa, 0x05, 0xe6, 0xb8, 0xa9, 0xad, 0xe7, 0x90, 0x2a, 0xf4, 0xe8, 0x71, 0x1d,
	0x7b, 0xa7, 0x66, 0x0b, 0xa3, 0xa7, 0x30, 0xcd, 0xbf, 0xa6, 0xa1, 0xf0, 0xdb, 0x4b, 0xf0, 0xa3,
	0x5c, 0xf6, 0x7a, 0x14, 0xcb, 0xb5, 0xce, 0xb6, 0xfe, 0x58, 0x81, 0x8c, 0x68, 0xf5, 0xf8, 0xd7,
	0x32, 0xa6, 0xd7, 0xf1, 0xcc, 0x6f, 0x0c, 0x5e, 0x88, 0x8f, 0x61, 0x29, 0xe2, 0x33, 0x1a, 0xba,
	0x17, 0x52, 0x36, 0xfe, 0x33, 0x5c, 0x76, 0xe3, 0x62, 0xa0, 0xd8, 0xca, 0x5b, 0xff, 0xa4, 0xc0,
	0x42, 0x7f, 0xd3, 0x78, 0x46, 0xeb, 0x04, 0x7b, 0xa8, 0xc6, 0xaf, 0xc6, 0xc1, 0xaf, 0x48, 0x68,
	0x7d, 0x58, 0x61, 0xc4, 0x37, 0xa6, 0x6c, 0x26, 0xf2, 0x83, 0x4b, 0x1d, 0x53, 0xf4, 0x07, 0x5c,
	0x63, 0xf0, 0x03, 0xcb, 0xa8, 0xc6, 0x88, 0xef, 0x43, 0xd9, 0x5f, 0x4d, 0x06, 0xc9, 0x35, 0xfc,
	0xc3, 0x14, 0x2c, 0xca, 0xae, 0x39, 0xf0, 0x4e, 0x77, 0x08, 0x73, 0xa1, 0xcf, 0x25, 0xe8, 0x4e,
	0xf8, 0x4d, 0x23, 0xe2, 0x13, 0x4b, 0x56, 0x9d, 0x04, 0x91, 0xc5, 0xef, 0x2b, 0x7e, 0x23, 0x0c,
	0xce, 0xa4, 0x0e, 0x5b, 0x39, 0xfa, 0x82, 0x9e, 0x5d, 0x9f, 0x88, 0x91, 0xaa, 0x5f, 0xf1, 0x56,
	0x33, 0xf2, 0x15, 0x04, 0xbd, 0x37, 0x46, 0x41, 0xe4, 0xc3, 0x4b, 0xf6, 0xfd, 0x4b, 0xa2, 0xe5,
	0xc4, 0xdf, 0xc0, 0x8d, 0xb1, 0x6f, 0x10, 0x28, 0xac, 0xeb, 0xa2, 0xe7, 0x93, 0x6c, 0xfe, 0xb2,
	0x70, 0x39, 0xf7, 0x4b, 0x58, 0x89, 0xfe, 0xbc, 0x83, 0xee, 0x47, 0x68, 0x1a, 0xf3, 0x89, 0x2a,
	0xfb, 0x9b, 0x4b, 0x61, 0x65, 0xc2, 0xfc, 0x6b, 0x0c, 0xb2, 0xc2, 0x96, 0x50, 0x97, 0xbe, 0x6f,
	0xd8, 0x46, 0x07, 0x7b, 0x68, 0x1f, 0x66, 0x44, 0xe8, 0x87, 0x36, 0xdc, 0xf8, 0x57, 0x8e, 0xec,
	0x84, 0xde, 0x1f, 0x1d, 0xc0, 0x14, 0xdf, 0x43, 0x77, 0x87, 0xda, 0xa7, 0xe8, 0x07, 0x90, 0xec,
	0xef, 0x5c, 0x04, 0x93, 0x7e, 0xd3, 0x20, 0xbe, 0x83, 0x29, 0x1a, 0xdd, 0x22, 0x51, 0x4a, 0xef,
	0x5e, 0x80, 0x92, 0x3a, 0x1f, 0xc0, 0x4c, 0x09, 0xb3, 0x62, 0x8a, 0x86, 0x0f, 0xe1, 0xec, 0xca,
	0xc8, 0x13, 0x43, 0xb9, 0xeb, 0xd2, 0xb3, 0xad, 0x6f, 0x63, 0x30, 0x27, 0xfa, 0x6a, 0xdf, 0x7d,
	0xbf, 0xdb, 0x77, 0xdf, 0x5a, 0x84, 0xfb, 0x42, 0xad, 0x7e, 0x36, 0xaa, 0x3f, 0x47, 0x3b, 0xd2,
	0x61, 0xb9, 0x11, 0x4f, 0x84, 0x85, 0x57, 0xc7, 0xf2, 0xe5, 0x72, 0x4a, 0xc2, 0x45, 0xb7, 0x47,
	0x8a, 0x57, 0x48, 0x4d, 0x6e, 0x1c, 0xfb, 0xe7, 0x3b, 0xe5, 0x3f, 0x62, 0x90, 0x94, 0x4d, 0x57,
	0xc7, 0x43, 0xbb, 0x30, 0x1b, 0x7c, 0x03, 0x40, 0xb7, 0x86, 0x27, 0x0c, 0xbe, 0x42, 0x64, 0x6f,
	0x4f, 0xe0, 0x12, 0x17, 0xfd, 0x21, 0x3f, 0x1a, 0x86, 0x3b, 0xf6, 0xd1, 0x72, 0x1a, 0xf1, 0x40,
	0x30, 0x5a, 0x4e, 0x23, 0x1b, 0xff, 0x32, 0xc0, 0xa0, 0xe5, 0x45, 0xd9, 0x61, 0x99, 0x41, 0x4b,
	0x9e, 0xbd, 0x39, 0x96, 0x47, 0x5c, 0xf4, 0x35, 0x7f, 0x9c, 0x09, 0x77, 0xab, 0x43, 0x35, 0x38,
	0xaa, 0x21, 0xce, 0xaa, 0x17, 0x41, 0x88, 0xbb, 0xf5, 0x6f, 0x43, 0xbd, 0xa9, 0x7f, 0x22, 0xd7,
	0x61, 0x36, 0x48, 0x1e, 0x4a, 0xc0, 0x88, 0x6e, 0x36, 0x7b, 0x67, 0x02, 0x42, 0xc6, 0xbf, 0x09,
	0x8b, 0x23, 0x57, 0xe1, 0xa1, 0xcd, 0x3c, 0xae, 0x49, 0x18, 0xda, 0xcc, 0x63, 0x6f, 0xd4, 0x5b,
	0x65, 0x98, 0xaf, 0x79, 0xce, 0x91, 0x69, 0xf5, 0x97, 0xf2, 0x01, 0x8f, 0x82, 0x7f, 0x3f, 0x1e,
	0xc9, 0xbc, 0xe5, 0x90, 0x62, 0x09, 0xdb, 0xfe, 0xfc, 0xfb, 0xb7, 0xb9, 0x2b, 0x3f, 0xbc, 0xcd,
	0x5d, 0xf9, 0xe9, 0x6d, 0x4e, 0xf9, 0xa3, 0xf3, 0x9c, 0xf2, 0xdd, 0x79, 0x4e, 0xf9, 0x97, 0xf3,
	0x9c, 0xf2, 0xfd, 0x79, 0x4e, 0xf9, 0xcf, 0xf3, 0x9c, 0xf2, 0x5f, 0xe7, 0xb9, 0x2b, 0x3f, 0x9d,
	0xe7, 0x94, 0x3f, 0xfb, 0x31, 0x77, 0xe5, 0xfb, 0x1f, 0x73, 0x57, 0x7e, 0xf8, 0x31, 0x77, 0xe5,
	0x6b, 0x18, 0xfc, 0x2f, 0xab, 0xe6, 0x0c, 0xcf, 0xe4, 0x0f, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xfe, 0x5d, 0x8a, 0xf1, 0x84, 0x25, 0x00, 0x00,
}

func (x ArtifactType) String() string {
	s, ok := ArtifactType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ClusterStatus) String() string {
	s, ok := ClusterStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AutocompleteActionType) String() string {
	s, ok := AutocompleteActionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AutocompleteEntityKind) String() string {
	s, ok := AutocompleteEntityKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AutocompleteEntityState) String() string {
	s, ok := AutocompleteEntityState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginRequest)
	if !ok {
		that2, ok := that.(LoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	return true
}
func (this *LoginReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginReply)
	if !ok {
		that2, ok := that.(LoginReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.ExpiresAt != that1.ExpiresAt {
		return false
	}
	return true
}
func (this *GetImageCredentialsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetImageCredentialsRequest)
	if !ok {
		that2, ok := that.(GetImageCredentialsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetImageCredentialsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetImageCredentialsResponse)
	if !ok {
		that2, ok := that.(GetImageCredentialsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Creds != that1.Creds {
		return false
	}
	return true
}
func (this *ArtifactSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArtifactSet)
	if !ok {
		that2, ok := that.(ArtifactSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Artifact) != len(that1.Artifact) {
		return false
	}
	for i := range this.Artifact {
		if !this.Artifact[i].Equal(that1.Artifact[i]) {
			return false
		}
	}
	return true
}
func (this *Artifact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Artifact)
	if !ok {
		that2, ok := that.(Artifact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.CommitHash != that1.CommitHash {
		return false
	}
	if this.VersionStr != that1.VersionStr {
		return false
	}
	if len(this.AvailableArtifacts) != len(that1.AvailableArtifacts) {
		return false
	}
	for i := range this.AvailableArtifacts {
		if this.AvailableArtifacts[i] != that1.AvailableArtifacts[i] {
			return false
		}
	}
	if this.Changelog != that1.Changelog {
		return false
	}
	return true
}
func (this *GetArtifactListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetArtifactListRequest)
	if !ok {
		that2, ok := that.(GetArtifactListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ArtifactName != that1.ArtifactName {
		return false
	}
	if this.ArtifactType != that1.ArtifactType {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *GetDownloadLinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDownloadLinkRequest)
	if !ok {
		that2, ok := that.(GetDownloadLinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ArtifactName != that1.ArtifactName {
		return false
	}
	if this.VersionStr != that1.VersionStr {
		return false
	}
	if this.ArtifactType != that1.ArtifactType {
		return false
	}
	return true
}
func (this *GetDownloadLinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDownloadLinkResponse)
	if !ok {
		that2, ok := that.(GetDownloadLinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.SHA256 != that1.SHA256 {
		return false
	}
	if !this.ValidUntil.Equal(that1.ValidUntil) {
		return false
	}
	return true
}
func (this *CreateClusterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateClusterRequest)
	if !ok {
		that2, ok := that.(CreateClusterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateClusterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateClusterResponse)
	if !ok {
		that2, ok := that.(CreateClusterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClusterID.Equal(that1.ClusterID) {
		return false
	}
	return true
}
func (this *UpdateOrInstallClusterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrInstallClusterRequest)
	if !ok {
		that2, ok := that.(UpdateOrInstallClusterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClusterID.Equal(that1.ClusterID) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.RedeployEtcd != that1.RedeployEtcd {
		return false
	}
	return true
}
func (this *UpdateOrInstallClusterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrInstallClusterResponse)
	if !ok {
		that2, ok := that.(UpdateOrInstallClusterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UpdateStarted != that1.UpdateStarted {
		return false
	}
	return true
}
func (this *VizierConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierConfig)
	if !ok {
		that2, ok := that.(VizierConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PassthroughEnabled != that1.PassthroughEnabled {
		return false
	}
	if this.AutoUpdateEnabled != that1.AutoUpdateEnabled {
		return false
	}
	return true
}
func (this *VizierConfigUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierConfigUpdate)
	if !ok {
		that2, ok := that.(VizierConfigUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassthroughEnabled.Equal(that1.PassthroughEnabled) {
		return false
	}
	if !this.AutoUpdateEnabled.Equal(that1.AutoUpdateEnabled) {
		return false
	}
	return true
}
func (this *GetClusterInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterInfoRequest)
	if !ok {
		that2, ok := that.(GetClusterInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *K8SEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*K8SEvent)
	if !ok {
		that2, ok := that.(K8SEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.FirstTime.Equal(that1.FirstTime) {
		return false
	}
	if !this.LastTime.Equal(that1.LastTime) {
		return false
	}
	return true
}
func (this *PodStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatus)
	if !ok {
		that2, ok := that.(PodStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.StatusMessage != that1.StatusMessage {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if len(this.Containers) != len(that1.Containers) {
		return false
	}
	for i := range this.Containers {
		if !this.Containers[i].Equal(that1.Containers[i]) {
			return false
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	return true
}
func (this *ContainerStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerStatus)
	if !ok {
		that2, ok := that.(ContainerStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *ClusterInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterInfo)
	if !ok {
		that2, ok := that.(ClusterInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.LastHeartbeatNs != that1.LastHeartbeatNs {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if this.ClusterUID != that1.ClusterUID {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if this.PrettyClusterName != that1.PrettyClusterName {
		return false
	}
	if this.ClusterVersion != that1.ClusterVersion {
		return false
	}
	if this.VizierVersion != that1.VizierVersion {
		return false
	}
	if len(this.ControlPlanePodStatuses) != len(that1.ControlPlanePodStatuses) {
		return false
	}
	for i := range this.ControlPlanePodStatuses {
		if !this.ControlPlanePodStatuses[i].Equal(that1.ControlPlanePodStatuses[i]) {
			return false
		}
	}
	if this.NumNodes != that1.NumNodes {
		return false
	}
	if this.NumInstrumentedNodes != that1.NumInstrumentedNodes {
		return false
	}
	return true
}
func (this *GetClusterInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterInfoResponse)
	if !ok {
		that2, ok := that.(GetClusterInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if !this.Clusters[i].Equal(that1.Clusters[i]) {
			return false
		}
	}
	return true
}
func (this *GetClusterConnectionInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterConnectionInfoRequest)
	if !ok {
		that2, ok := that.(GetClusterConnectionInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetClusterConnectionInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterConnectionInfoResponse)
	if !ok {
		that2, ok := that.(GetClusterConnectionInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IPAddress != that1.IPAddress {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *UpdateClusterVizierConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateClusterVizierConfigRequest)
	if !ok {
		that2, ok := that.(UpdateClusterVizierConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.ConfigUpdate.Equal(that1.ConfigUpdate) {
		return false
	}
	return true
}
func (this *UpdateClusterVizierConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateClusterVizierConfigResponse)
	if !ok {
		that2, ok := that.(UpdateClusterVizierConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeploymentKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentKey)
	if !ok {
		that2, ok := that.(DeploymentKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	return true
}
func (this *CreateDeploymentKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateDeploymentKeyRequest)
	if !ok {
		that2, ok := that.(CreateDeploymentKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	return true
}
func (this *ListDeploymentKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDeploymentKeyRequest)
	if !ok {
		that2, ok := that.(ListDeploymentKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListDeploymentKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDeploymentKeyResponse)
	if !ok {
		that2, ok := that.(ListDeploymentKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *GetDeploymentKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeploymentKeyRequest)
	if !ok {
		that2, ok := that.(GetDeploymentKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetDeploymentKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeploymentKeyResponse)
	if !ok {
		that2, ok := that.(GetDeploymentKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	return true
}
func (this *APIKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIKey)
	if !ok {
		that2, ok := that.(APIKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	return true
}
func (this *CreateAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateAPIKeyRequest)
	if !ok {
		that2, ok := that.(CreateAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	return true
}
func (this *ListAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListAPIKeyRequest)
	if !ok {
		that2, ok := that.(ListAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListAPIKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListAPIKeyResponse)
	if !ok {
		that2, ok := that.(ListAPIKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *GetAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAPIKeyRequest)
	if !ok {
		that2, ok := that.(GetAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetAPIKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAPIKeyResponse)
	if !ok {
		that2, ok := that.(GetAPIKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	return true
}
func (this *GetLiveViewsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveViewsReq)
	if !ok {
		that2, ok := that.(GetLiveViewsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LiveViewMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LiveViewMetadata)
	if !ok {
		that2, ok := that.(LiveViewMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetLiveViewsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveViewsResp)
	if !ok {
		that2, ok := that.(GetLiveViewsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LiveViews) != len(that1.LiveViews) {
		return false
	}
	for i := range this.LiveViews {
		if !this.LiveViews[i].Equal(that1.LiveViews[i]) {
			return false
		}
	}
	return true
}
func (this *GetLiveViewContentsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveViewContentsReq)
	if !ok {
		that2, ok := that.(GetLiveViewContentsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LiveViewID != that1.LiveViewID {
		return false
	}
	return true
}
func (this *GetLiveViewContentsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveViewContentsResp)
	if !ok {
		that2, ok := that.(GetLiveViewContentsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.PxlContents != that1.PxlContents {
		return false
	}
	if !this.Vis.Equal(that1.Vis) {
		return false
	}
	return true
}
func (this *GetScriptsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScriptsReq)
	if !ok {
		that2, ok := that.(GetScriptsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ScriptMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScriptMetadata)
	if !ok {
		that2, ok := that.(ScriptMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.HasLiveView != that1.HasLiveView {
		return false
	}
	return true
}
func (this *GetScriptsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScriptsResp)
	if !ok {
		that2, ok := that.(GetScriptsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Scripts) != len(that1.Scripts) {
		return false
	}
	for i := range this.Scripts {
		if !this.Scripts[i].Equal(that1.Scripts[i]) {
			return false
		}
	}
	return true
}
func (this *GetScriptContentsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScriptContentsReq)
	if !ok {
		that2, ok := that.(GetScriptContentsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScriptID != that1.ScriptID {
		return false
	}
	return true
}
func (this *GetScriptContentsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetScriptContentsResp)
	if !ok {
		that2, ok := that.(GetScriptContentsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.Contents != that1.Contents {
		return false
	}
	return true
}
func (this *AutocompleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutocompleteRequest)
	if !ok {
		that2, ok := that.(AutocompleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Input != that1.Input {
		return false
	}
	if this.CursorPos != that1.CursorPos {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.ClusterUID != that1.ClusterUID {
		return false
	}
	return true
}
func (this *TabSuggestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TabSuggestion)
	if !ok {
		that2, ok := that.(TabSuggestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TabIndex != that1.TabIndex {
		return false
	}
	if this.ExecutableAfterSelect != that1.ExecutableAfterSelect {
		return false
	}
	if len(this.Suggestions) != len(that1.Suggestions) {
		return false
	}
	for i := range this.Suggestions {
		if !this.Suggestions[i].Equal(that1.Suggestions[i]) {
			return false
		}
	}
	return true
}
func (this *AutocompleteSuggestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutocompleteSuggestion)
	if !ok {
		that2, ok := that.(AutocompleteSuggestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.MatchedIndexes) != len(that1.MatchedIndexes) {
		return false
	}
	for i := range this.MatchedIndexes {
		if this.MatchedIndexes[i] != that1.MatchedIndexes[i] {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *AutocompleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutocompleteResponse)
	if !ok {
		that2, ok := that.(AutocompleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FormattedInput != that1.FormattedInput {
		return false
	}
	if this.IsExecutable != that1.IsExecutable {
		return false
	}
	if len(this.TabSuggestions) != len(that1.TabSuggestions) {
		return false
	}
	for i := range this.TabSuggestions {
		if !this.TabSuggestions[i].Equal(that1.TabSuggestions[i]) {
			return false
		}
	}
	return true
}
func (this *AutocompleteFieldRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutocompleteFieldRequest)
	if !ok {
		that2, ok := that.(AutocompleteFieldRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Input != that1.Input {
		return false
	}
	if this.FieldType != that1.FieldType {
		return false
	}
	if len(this.RequiredArgTypes) != len(that1.RequiredArgTypes) {
		return false
	}
	for i := range this.RequiredArgTypes {
		if this.RequiredArgTypes[i] != that1.RequiredArgTypes[i] {
			return false
		}
	}
	if this.ClusterUID != that1.ClusterUID {
		return false
	}
	return true
}
func (this *AutocompleteFieldResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutocompleteFieldResponse)
	if !ok {
		that2, ok := that.(AutocompleteFieldResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Suggestions) != len(that1.Suggestions) {
		return false
	}
	for i := range this.Suggestions {
		if !this.Suggestions[i].Equal(that1.Suggestions[i]) {
			return false
		}
	}
	return true
}
func (this *OrgInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrgInfo)
	if !ok {
		that2, ok := that.(OrgInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.OrgName != that1.OrgName {
		return false
	}
	return true
}
func (this *LoginRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.LoginRequest{")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloudapipb.LoginReply{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "ExpiresAt: "+fmt.Sprintf("%#v", this.ExpiresAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetImageCredentialsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloudapipb.GetImageCredentialsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetImageCredentialsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetImageCredentialsResponse{")
	s = append(s, "Creds: "+fmt.Sprintf("%#v", this.Creds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ArtifactSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloudapipb.ArtifactSet{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Artifact != nil {
		s = append(s, "Artifact: "+fmt.Sprintf("%#v", this.Artifact)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Artifact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cloudapipb.Artifact{")
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "CommitHash: "+fmt.Sprintf("%#v", this.CommitHash)+",\n")
	s = append(s, "VersionStr: "+fmt.Sprintf("%#v", this.VersionStr)+",\n")
	s = append(s, "AvailableArtifacts: "+fmt.Sprintf("%#v", this.AvailableArtifacts)+",\n")
	s = append(s, "Changelog: "+fmt.Sprintf("%#v", this.Changelog)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetArtifactListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloudapipb.GetArtifactListRequest{")
	s = append(s, "ArtifactName: "+fmt.Sprintf("%#v", this.ArtifactName)+",\n")
	s = append(s, "ArtifactType: "+fmt.Sprintf("%#v", this.ArtifactType)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDownloadLinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloudapipb.GetDownloadLinkRequest{")
	s = append(s, "ArtifactName: "+fmt.Sprintf("%#v", this.ArtifactName)+",\n")
	s = append(s, "VersionStr: "+fmt.Sprintf("%#v", this.VersionStr)+",\n")
	s = append(s, "ArtifactType: "+fmt.Sprintf("%#v", this.ArtifactType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDownloadLinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloudapipb.GetDownloadLinkResponse{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "SHA256: "+fmt.Sprintf("%#v", this.SHA256)+",\n")
	if this.ValidUntil != nil {
		s = append(s, "ValidUntil: "+fmt.Sprintf("%#v", this.ValidUntil)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateClusterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloudapipb.CreateClusterRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateClusterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.CreateClusterResponse{")
	if this.ClusterID != nil {
		s = append(s, "ClusterID: "+fmt.Sprintf("%#v", this.ClusterID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOrInstallClusterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloudapipb.UpdateOrInstallClusterRequest{")
	if this.ClusterID != nil {
		s = append(s, "ClusterID: "+fmt.Sprintf("%#v", this.ClusterID)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "RedeployEtcd: "+fmt.Sprintf("%#v", this.RedeployEtcd)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOrInstallClusterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.UpdateOrInstallClusterResponse{")
	s = append(s, "UpdateStarted: "+fmt.Sprintf("%#v", this.UpdateStarted)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloudapipb.VizierConfig{")
	s = append(s, "PassthroughEnabled: "+fmt.Sprintf("%#v", this.PassthroughEnabled)+",\n")
	s = append(s, "AutoUpdateEnabled: "+fmt.Sprintf("%#v", this.AutoUpdateEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierConfigUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloudapipb.VizierConfigUpdate{")
	if this.PassthroughEnabled != nil {
		s = append(s, "PassthroughEnabled: "+fmt.Sprintf("%#v", this.PassthroughEnabled)+",\n")
	}
	if this.AutoUpdateEnabled != nil {
		s = append(s, "AutoUpdateEnabled: "+fmt.Sprintf("%#v", this.AutoUpdateEnabled)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetClusterInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetClusterInfoRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *K8SEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloudapipb.K8SEvent{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.FirstTime != nil {
		s = append(s, "FirstTime: "+fmt.Sprintf("%#v", this.FirstTime)+",\n")
	}
	if this.LastTime != nil {
		s = append(s, "LastTime: "+fmt.Sprintf("%#v", this.LastTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&cloudapipb.PodStatus{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "StatusMessage: "+fmt.Sprintf("%#v", this.StatusMessage)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	if this.Containers != nil {
		s = append(s, "Containers: "+fmt.Sprintf("%#v", this.Containers)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContainerStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cloudapipb.ContainerStatus{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClusterInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&cloudapipb.ClusterInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "LastHeartbeatNs: "+fmt.Sprintf("%#v", this.LastHeartbeatNs)+",\n")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "ClusterUID: "+fmt.Sprintf("%#v", this.ClusterUID)+",\n")
	s = append(s, "ClusterName: "+fmt.Sprintf("%#v", this.ClusterName)+",\n")
	s = append(s, "PrettyClusterName: "+fmt.Sprintf("%#v", this.PrettyClusterName)+",\n")
	s = append(s, "ClusterVersion: "+fmt.Sprintf("%#v", this.ClusterVersion)+",\n")
	s = append(s, "VizierVersion: "+fmt.Sprintf("%#v", this.VizierVersion)+",\n")
	keysForControlPlanePodStatuses := make([]string, 0, len(this.ControlPlanePodStatuses))
	for k, _ := range this.ControlPlanePodStatuses {
		keysForControlPlanePodStatuses = append(keysForControlPlanePodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForControlPlanePodStatuses)
	mapStringForControlPlanePodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForControlPlanePodStatuses {
		mapStringForControlPlanePodStatuses += fmt.Sprintf("%#v: %#v,", k, this.ControlPlanePodStatuses[k])
	}
	mapStringForControlPlanePodStatuses += "}"
	if this.ControlPlanePodStatuses != nil {
		s = append(s, "ControlPlanePodStatuses: "+mapStringForControlPlanePodStatuses+",\n")
	}
	s = append(s, "NumNodes: "+fmt.Sprintf("%#v", this.NumNodes)+",\n")
	s = append(s, "NumInstrumentedNodes: "+fmt.Sprintf("%#v", this.NumInstrumentedNodes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetClusterInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetClusterInfoResponse{")
	if this.Clusters != nil {
		s = append(s, "Clusters: "+fmt.Sprintf("%#v", this.Clusters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetClusterConnectionInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetClusterConnectionInfoRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetClusterConnectionInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloudapipb.GetClusterConnectionInfoResponse{")
	s = append(s, "IPAddress: "+fmt.Sprintf("%#v", this.IPAddress)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateClusterVizierConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloudapipb.UpdateClusterVizierConfigRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.ConfigUpdate != nil {
		s = append(s, "ConfigUpdate: "+fmt.Sprintf("%#v", this.ConfigUpdate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateClusterVizierConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloudapipb.UpdateClusterVizierConfigResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloudapipb.DeploymentKey{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDeploymentKeyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.CreateDeploymentKeyRequest{")
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDeploymentKeyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloudapipb.ListDeploymentKeyRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDeploymentKeyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.ListDeploymentKeyResponse{")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeploymentKeyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetDeploymentKeyRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeploymentKeyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetDeploymentKeyResponse{")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloudapipb.APIKey{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateAPIKeyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.CreateAPIKeyRequest{")
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListAPIKeyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloudapipb.ListAPIKeyRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListAPIKeyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.ListAPIKeyResponse{")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAPIKeyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetAPIKeyRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAPIKeyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetAPIKeyResponse{")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLiveViewsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloudapipb.GetLiveViewsReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LiveViewMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloudapipb.LiveViewMetadata{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLiveViewsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetLiveViewsResp{")
	if this.LiveViews != nil {
		s = append(s, "LiveViews: "+fmt.Sprintf("%#v", this.LiveViews)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLiveViewContentsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetLiveViewContentsReq{")
	s = append(s, "LiveViewID: "+fmt.Sprintf("%#v", this.LiveViewID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLiveViewContentsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloudapipb.GetLiveViewContentsResp{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "PxlContents: "+fmt.Sprintf("%#v", this.PxlContents)+",\n")
	if this.Vis != nil {
		s = append(s, "Vis: "+fmt.Sprintf("%#v", this.Vis)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScriptsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloudapipb.GetScriptsReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScriptMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloudapipb.ScriptMetadata{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "HasLiveView: "+fmt.Sprintf("%#v", this.HasLiveView)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScriptsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetScriptsResp{")
	if this.Scripts != nil {
		s = append(s, "Scripts: "+fmt.Sprintf("%#v", this.Scripts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScriptContentsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.GetScriptContentsReq{")
	s = append(s, "ScriptID: "+fmt.Sprintf("%#v", this.ScriptID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetScriptContentsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloudapipb.GetScriptContentsResp{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "Contents: "+fmt.Sprintf("%#v", this.Contents)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutocompleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloudapipb.AutocompleteRequest{")
	s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	s = append(s, "CursorPos: "+fmt.Sprintf("%#v", this.CursorPos)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "ClusterUID: "+fmt.Sprintf("%#v", this.ClusterUID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TabSuggestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloudapipb.TabSuggestion{")
	s = append(s, "TabIndex: "+fmt.Sprintf("%#v", this.TabIndex)+",\n")
	s = append(s, "ExecutableAfterSelect: "+fmt.Sprintf("%#v", this.ExecutableAfterSelect)+",\n")
	if this.Suggestions != nil {
		s = append(s, "Suggestions: "+fmt.Sprintf("%#v", this.Suggestions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutocompleteSuggestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cloudapipb.AutocompleteSuggestion{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "MatchedIndexes: "+fmt.Sprintf("%#v", this.MatchedIndexes)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutocompleteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloudapipb.AutocompleteResponse{")
	s = append(s, "FormattedInput: "+fmt.Sprintf("%#v", this.FormattedInput)+",\n")
	s = append(s, "IsExecutable: "+fmt.Sprintf("%#v", this.IsExecutable)+",\n")
	if this.TabSuggestions != nil {
		s = append(s, "TabSuggestions: "+fmt.Sprintf("%#v", this.TabSuggestions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutocompleteFieldRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloudapipb.AutocompleteFieldRequest{")
	s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	s = append(s, "FieldType: "+fmt.Sprintf("%#v", this.FieldType)+",\n")
	s = append(s, "RequiredArgTypes: "+fmt.Sprintf("%#v", this.RequiredArgTypes)+",\n")
	s = append(s, "ClusterUID: "+fmt.Sprintf("%#v", this.ClusterUID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutocompleteFieldResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloudapipb.AutocompleteFieldResponse{")
	if this.Suggestions != nil {
		s = append(s, "Suggestions: "+fmt.Sprintf("%#v", this.Suggestions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrgInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloudapipb.OrgInfo{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "OrgName: "+fmt.Sprintf("%#v", this.OrgName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCloudapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/px.cloudapi.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (*UnimplementedAuthServiceServer) Login(ctx context.Context, req *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.cloudapi.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/cloudapipb/cloudapi.proto",
}

// VizierImageAuthorizationClient is the client API for VizierImageAuthorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VizierImageAuthorizationClient interface {
	GetImageCredentials(ctx context.Context, in *GetImageCredentialsRequest, opts ...grpc.CallOption) (*GetImageCredentialsResponse, error)
}

type vizierImageAuthorizationClient struct {
	cc *grpc.ClientConn
}

func NewVizierImageAuthorizationClient(cc *grpc.ClientConn) VizierImageAuthorizationClient {
	return &vizierImageAuthorizationClient{cc}
}

func (c *vizierImageAuthorizationClient) GetImageCredentials(ctx context.Context, in *GetImageCredentialsRequest, opts ...grpc.CallOption) (*GetImageCredentialsResponse, error) {
	out := new(GetImageCredentialsResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierImageAuthorization/GetImageCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VizierImageAuthorizationServer is the server API for VizierImageAuthorization service.
type VizierImageAuthorizationServer interface {
	GetImageCredentials(context.Context, *GetImageCredentialsRequest) (*GetImageCredentialsResponse, error)
}

// UnimplementedVizierImageAuthorizationServer can be embedded to have forward compatible implementations.
type UnimplementedVizierImageAuthorizationServer struct {
}

func (*UnimplementedVizierImageAuthorizationServer) GetImageCredentials(ctx context.Context, req *GetImageCredentialsRequest) (*GetImageCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageCredentials not implemented")
}

func RegisterVizierImageAuthorizationServer(s *grpc.Server, srv VizierImageAuthorizationServer) {
	s.RegisterService(&_VizierImageAuthorization_serviceDesc, srv)
}

func _VizierImageAuthorization_GetImageCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierImageAuthorizationServer).GetImageCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierImageAuthorization/GetImageCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierImageAuthorizationServer).GetImageCredentials(ctx, req.(*GetImageCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VizierImageAuthorization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.cloudapi.VizierImageAuthorization",
	HandlerType: (*VizierImageAuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImageCredentials",
			Handler:    _VizierImageAuthorization_GetImageCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/cloudapipb/cloudapi.proto",
}

// ArtifactTrackerClient is the client API for ArtifactTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArtifactTrackerClient interface {
	GetArtifactList(ctx context.Context, in *GetArtifactListRequest, opts ...grpc.CallOption) (*ArtifactSet, error)
	GetDownloadLink(ctx context.Context, in *GetDownloadLinkRequest, opts ...grpc.CallOption) (*GetDownloadLinkResponse, error)
}

type artifactTrackerClient struct {
	cc *grpc.ClientConn
}

func NewArtifactTrackerClient(cc *grpc.ClientConn) ArtifactTrackerClient {
	return &artifactTrackerClient{cc}
}

func (c *artifactTrackerClient) GetArtifactList(ctx context.Context, in *GetArtifactListRequest, opts ...grpc.CallOption) (*ArtifactSet, error) {
	out := new(ArtifactSet)
	err := c.cc.Invoke(ctx, "/px.cloudapi.ArtifactTracker/GetArtifactList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactTrackerClient) GetDownloadLink(ctx context.Context, in *GetDownloadLinkRequest, opts ...grpc.CallOption) (*GetDownloadLinkResponse, error) {
	out := new(GetDownloadLinkResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.ArtifactTracker/GetDownloadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactTrackerServer is the server API for ArtifactTracker service.
type ArtifactTrackerServer interface {
	GetArtifactList(context.Context, *GetArtifactListRequest) (*ArtifactSet, error)
	GetDownloadLink(context.Context, *GetDownloadLinkRequest) (*GetDownloadLinkResponse, error)
}

// UnimplementedArtifactTrackerServer can be embedded to have forward compatible implementations.
type UnimplementedArtifactTrackerServer struct {
}

func (*UnimplementedArtifactTrackerServer) GetArtifactList(ctx context.Context, req *GetArtifactListRequest) (*ArtifactSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactList not implemented")
}
func (*UnimplementedArtifactTrackerServer) GetDownloadLink(ctx context.Context, req *GetDownloadLinkRequest) (*GetDownloadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadLink not implemented")
}

func RegisterArtifactTrackerServer(s *grpc.Server, srv ArtifactTrackerServer) {
	s.RegisterService(&_ArtifactTracker_serviceDesc, srv)
}

func _ArtifactTracker_GetArtifactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactTrackerServer).GetArtifactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.ArtifactTracker/GetArtifactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactTrackerServer).GetArtifactList(ctx, req.(*GetArtifactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactTracker_GetDownloadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactTrackerServer).GetDownloadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.ArtifactTracker/GetDownloadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactTrackerServer).GetDownloadLink(ctx, req.(*GetDownloadLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArtifactTracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.cloudapi.ArtifactTracker",
	HandlerType: (*ArtifactTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtifactList",
			Handler:    _ArtifactTracker_GetArtifactList_Handler,
		},
		{
			MethodName: "GetDownloadLink",
			Handler:    _ArtifactTracker_GetDownloadLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/cloudapipb/cloudapi.proto",
}

// VizierClusterInfoClient is the client API for VizierClusterInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VizierClusterInfoClient interface {
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error)
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error)
	GetClusterConnectionInfo(ctx context.Context, in *GetClusterConnectionInfoRequest, opts ...grpc.CallOption) (*GetClusterConnectionInfoResponse, error)
	UpdateClusterVizierConfig(ctx context.Context, in *UpdateClusterVizierConfigRequest, opts ...grpc.CallOption) (*UpdateClusterVizierConfigResponse, error)
	UpdateOrInstallCluster(ctx context.Context, in *UpdateOrInstallClusterRequest, opts ...grpc.CallOption) (*UpdateOrInstallClusterResponse, error)
}

type vizierClusterInfoClient struct {
	cc *grpc.ClientConn
}

func NewVizierClusterInfoClient(cc *grpc.ClientConn) VizierClusterInfoClient {
	return &vizierClusterInfoClient{cc}
}

func (c *vizierClusterInfoClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error) {
	out := new(CreateClusterResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierClusterInfo/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierClusterInfoClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error) {
	out := new(GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierClusterInfo/GetClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierClusterInfoClient) GetClusterConnectionInfo(ctx context.Context, in *GetClusterConnectionInfoRequest, opts ...grpc.CallOption) (*GetClusterConnectionInfoResponse, error) {
	out := new(GetClusterConnectionInfoResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierClusterInfo/GetClusterConnectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierClusterInfoClient) UpdateClusterVizierConfig(ctx context.Context, in *UpdateClusterVizierConfigRequest, opts ...grpc.CallOption) (*UpdateClusterVizierConfigResponse, error) {
	out := new(UpdateClusterVizierConfigResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierClusterInfo/UpdateClusterVizierConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierClusterInfoClient) UpdateOrInstallCluster(ctx context.Context, in *UpdateOrInstallClusterRequest, opts ...grpc.CallOption) (*UpdateOrInstallClusterResponse, error) {
	out := new(UpdateOrInstallClusterResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierClusterInfo/UpdateOrInstallCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VizierClusterInfoServer is the server API for VizierClusterInfo service.
type VizierClusterInfoServer interface {
	CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error)
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error)
	GetClusterConnectionInfo(context.Context, *GetClusterConnectionInfoRequest) (*GetClusterConnectionInfoResponse, error)
	UpdateClusterVizierConfig(context.Context, *UpdateClusterVizierConfigRequest) (*UpdateClusterVizierConfigResponse, error)
	UpdateOrInstallCluster(context.Context, *UpdateOrInstallClusterRequest) (*UpdateOrInstallClusterResponse, error)
}

// UnimplementedVizierClusterInfoServer can be embedded to have forward compatible implementations.
type UnimplementedVizierClusterInfoServer struct {
}

func (*UnimplementedVizierClusterInfoServer) CreateCluster(ctx context.Context, req *CreateClusterRequest) (*CreateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (*UnimplementedVizierClusterInfoServer) GetClusterInfo(ctx context.Context, req *GetClusterInfoRequest) (*GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (*UnimplementedVizierClusterInfoServer) GetClusterConnectionInfo(ctx context.Context, req *GetClusterConnectionInfoRequest) (*GetClusterConnectionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConnectionInfo not implemented")
}
func (*UnimplementedVizierClusterInfoServer) UpdateClusterVizierConfig(ctx context.Context, req *UpdateClusterVizierConfigRequest) (*UpdateClusterVizierConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterVizierConfig not implemented")
}
func (*UnimplementedVizierClusterInfoServer) UpdateOrInstallCluster(ctx context.Context, req *UpdateOrInstallClusterRequest) (*UpdateOrInstallClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrInstallCluster not implemented")
}

func RegisterVizierClusterInfoServer(s *grpc.Server, srv VizierClusterInfoServer) {
	s.RegisterService(&_VizierClusterInfo_serviceDesc, srv)
}

func _VizierClusterInfo_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierClusterInfoServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierClusterInfo/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierClusterInfoServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierClusterInfo_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierClusterInfoServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierClusterInfo/GetClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierClusterInfoServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierClusterInfo_GetClusterConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterConnectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierClusterInfoServer).GetClusterConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierClusterInfo/GetClusterConnectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierClusterInfoServer).GetClusterConnectionInfo(ctx, req.(*GetClusterConnectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierClusterInfo_UpdateClusterVizierConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterVizierConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierClusterInfoServer).UpdateClusterVizierConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierClusterInfo/UpdateClusterVizierConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierClusterInfoServer).UpdateClusterVizierConfig(ctx, req.(*UpdateClusterVizierConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierClusterInfo_UpdateOrInstallCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrInstallClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierClusterInfoServer).UpdateOrInstallCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierClusterInfo/UpdateOrInstallCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierClusterInfoServer).UpdateOrInstallCluster(ctx, req.(*UpdateOrInstallClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VizierClusterInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.cloudapi.VizierClusterInfo",
	HandlerType: (*VizierClusterInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _VizierClusterInfo_CreateCluster_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _VizierClusterInfo_GetClusterInfo_Handler,
		},
		{
			MethodName: "GetClusterConnectionInfo",
			Handler:    _VizierClusterInfo_GetClusterConnectionInfo_Handler,
		},
		{
			MethodName: "UpdateClusterVizierConfig",
			Handler:    _VizierClusterInfo_UpdateClusterVizierConfig_Handler,
		},
		{
			MethodName: "UpdateOrInstallCluster",
			Handler:    _VizierClusterInfo_UpdateOrInstallCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/cloudapipb/cloudapi.proto",
}

// VizierDeploymentKeyManagerClient is the client API for VizierDeploymentKeyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VizierDeploymentKeyManagerClient interface {
	Create(ctx context.Context, in *CreateDeploymentKeyRequest, opts ...grpc.CallOption) (*DeploymentKey, error)
	List(ctx context.Context, in *ListDeploymentKeyRequest, opts ...grpc.CallOption) (*ListDeploymentKeyResponse, error)
	Get(ctx context.Context, in *GetDeploymentKeyRequest, opts ...grpc.CallOption) (*GetDeploymentKeyResponse, error)
	Delete(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*types.Empty, error)
}

type vizierDeploymentKeyManagerClient struct {
	cc *grpc.ClientConn
}

func NewVizierDeploymentKeyManagerClient(cc *grpc.ClientConn) VizierDeploymentKeyManagerClient {
	return &vizierDeploymentKeyManagerClient{cc}
}

func (c *vizierDeploymentKeyManagerClient) Create(ctx context.Context, in *CreateDeploymentKeyRequest, opts ...grpc.CallOption) (*DeploymentKey, error) {
	out := new(DeploymentKey)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierDeploymentKeyManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierDeploymentKeyManagerClient) List(ctx context.Context, in *ListDeploymentKeyRequest, opts ...grpc.CallOption) (*ListDeploymentKeyResponse, error) {
	out := new(ListDeploymentKeyResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierDeploymentKeyManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierDeploymentKeyManagerClient) Get(ctx context.Context, in *GetDeploymentKeyRequest, opts ...grpc.CallOption) (*GetDeploymentKeyResponse, error) {
	out := new(GetDeploymentKeyResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierDeploymentKeyManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vizierDeploymentKeyManagerClient) Delete(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/px.cloudapi.VizierDeploymentKeyManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VizierDeploymentKeyManagerServer is the server API for VizierDeploymentKeyManager service.
type VizierDeploymentKeyManagerServer interface {
	Create(context.Context, *CreateDeploymentKeyRequest) (*DeploymentKey, error)
	List(context.Context, *ListDeploymentKeyRequest) (*ListDeploymentKeyResponse, error)
	Get(context.Context, *GetDeploymentKeyRequest) (*GetDeploymentKeyResponse, error)
	Delete(context.Context, *uuidpb.UUID) (*types.Empty, error)
}

// UnimplementedVizierDeploymentKeyManagerServer can be embedded to have forward compatible implementations.
type UnimplementedVizierDeploymentKeyManagerServer struct {
}

func (*UnimplementedVizierDeploymentKeyManagerServer) Create(ctx context.Context, req *CreateDeploymentKeyRequest) (*DeploymentKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedVizierDeploymentKeyManagerServer) List(ctx context.Context, req *ListDeploymentKeyRequest) (*ListDeploymentKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedVizierDeploymentKeyManagerServer) Get(ctx context.Context, req *GetDeploymentKeyRequest) (*GetDeploymentKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedVizierDeploymentKeyManagerServer) Delete(ctx context.Context, req *uuidpb.UUID) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterVizierDeploymentKeyManagerServer(s *grpc.Server, srv VizierDeploymentKeyManagerServer) {
	s.RegisterService(&_VizierDeploymentKeyManager_serviceDesc, srv)
}

func _VizierDeploymentKeyManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierDeploymentKeyManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierDeploymentKeyManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierDeploymentKeyManagerServer).Create(ctx, req.(*CreateDeploymentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierDeploymentKeyManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierDeploymentKeyManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierDeploymentKeyManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierDeploymentKeyManagerServer).List(ctx, req.(*ListDeploymentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierDeploymentKeyManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierDeploymentKeyManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierDeploymentKeyManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierDeploymentKeyManagerServer).Get(ctx, req.(*GetDeploymentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VizierDeploymentKeyManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uuidpb.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VizierDeploymentKeyManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.VizierDeploymentKeyManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VizierDeploymentKeyManagerServer).Delete(ctx, req.(*uuidpb.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

var _VizierDeploymentKeyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.cloudapi.VizierDeploymentKeyManager",
	HandlerType: (*VizierDeploymentKeyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VizierDeploymentKeyManager_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VizierDeploymentKeyManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _VizierDeploymentKeyManager_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VizierDeploymentKeyManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/cloudapipb/cloudapi.proto",
}

// APIKeyManagerClient is the client API for APIKeyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIKeyManagerClient interface {
	Create(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	List(ctx context.Context, in *ListAPIKeyRequest, opts ...grpc.CallOption) (*ListAPIKeyResponse, error)
	Get(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*GetAPIKeyResponse, error)
	Delete(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*types.Empty, error)
}

type aPIKeyManagerClient struct {
	cc *grpc.ClientConn
}

func NewAPIKeyManagerClient(cc *grpc.ClientConn) APIKeyManagerClient {
	return &aPIKeyManagerClient{cc}
}

func (c *aPIKeyManagerClient) Create(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/px.cloudapi.APIKeyManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyManagerClient) List(ctx context.Context, in *ListAPIKeyRequest, opts ...grpc.CallOption) (*ListAPIKeyResponse, error) {
	out := new(ListAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.APIKeyManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyManagerClient) Get(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*GetAPIKeyResponse, error) {
	out := new(GetAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.APIKeyManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyManagerClient) Delete(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/px.cloudapi.APIKeyManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIKeyManagerServer is the server API for APIKeyManager service.
type APIKeyManagerServer interface {
	Create(context.Context, *CreateAPIKeyRequest) (*APIKey, error)
	List(context.Context, *ListAPIKeyRequest) (*ListAPIKeyResponse, error)
	Get(context.Context, *GetAPIKeyRequest) (*GetAPIKeyResponse, error)
	Delete(context.Context, *uuidpb.UUID) (*types.Empty, error)
}

// UnimplementedAPIKeyManagerServer can be embedded to have forward compatible implementations.
type UnimplementedAPIKeyManagerServer struct {
}

func (*UnimplementedAPIKeyManagerServer) Create(ctx context.Context, req *CreateAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAPIKeyManagerServer) List(ctx context.Context, req *ListAPIKeyRequest) (*ListAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedAPIKeyManagerServer) Get(ctx context.Context, req *GetAPIKeyRequest) (*GetAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAPIKeyManagerServer) Delete(ctx context.Context, req *uuidpb.UUID) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAPIKeyManagerServer(s *grpc.Server, srv APIKeyManagerServer) {
	s.RegisterService(&_APIKeyManager_serviceDesc, srv)
}

func _APIKeyManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.APIKeyManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyManagerServer).Create(ctx, req.(*CreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.APIKeyManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyManagerServer).List(ctx, req.(*ListAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.APIKeyManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyManagerServer).Get(ctx, req.(*GetAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uuidpb.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.APIKeyManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyManagerServer).Delete(ctx, req.(*uuidpb.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

var _APIKeyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.cloudapi.APIKeyManager",
	HandlerType: (*APIKeyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _APIKeyManager_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _APIKeyManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _APIKeyManager_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _APIKeyManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/cloudapipb/cloudapi.proto",
}

// ScriptMgrClient is the client API for ScriptMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScriptMgrClient interface {
	GetLiveViews(ctx context.Context, in *GetLiveViewsReq, opts ...grpc.CallOption) (*GetLiveViewsResp, error)
	GetLiveViewContents(ctx context.Context, in *GetLiveViewContentsReq, opts ...grpc.CallOption) (*GetLiveViewContentsResp, error)
	GetScripts(ctx context.Context, in *GetScriptsReq, opts ...grpc.CallOption) (*GetScriptsResp, error)
	GetScriptContents(ctx context.Context, in *GetScriptContentsReq, opts ...grpc.CallOption) (*GetScriptContentsResp, error)
}

type scriptMgrClient struct {
	cc *grpc.ClientConn
}

func NewScriptMgrClient(cc *grpc.ClientConn) ScriptMgrClient {
	return &scriptMgrClient{cc}
}

func (c *scriptMgrClient) GetLiveViews(ctx context.Context, in *GetLiveViewsReq, opts ...grpc.CallOption) (*GetLiveViewsResp, error) {
	out := new(GetLiveViewsResp)
	err := c.cc.Invoke(ctx, "/px.cloudapi.ScriptMgr/GetLiveViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptMgrClient) GetLiveViewContents(ctx context.Context, in *GetLiveViewContentsReq, opts ...grpc.CallOption) (*GetLiveViewContentsResp, error) {
	out := new(GetLiveViewContentsResp)
	err := c.cc.Invoke(ctx, "/px.cloudapi.ScriptMgr/GetLiveViewContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptMgrClient) GetScripts(ctx context.Context, in *GetScriptsReq, opts ...grpc.CallOption) (*GetScriptsResp, error) {
	out := new(GetScriptsResp)
	err := c.cc.Invoke(ctx, "/px.cloudapi.ScriptMgr/GetScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptMgrClient) GetScriptContents(ctx context.Context, in *GetScriptContentsReq, opts ...grpc.CallOption) (*GetScriptContentsResp, error) {
	out := new(GetScriptContentsResp)
	err := c.cc.Invoke(ctx, "/px.cloudapi.ScriptMgr/GetScriptContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScriptMgrServer is the server API for ScriptMgr service.
type ScriptMgrServer interface {
	GetLiveViews(context.Context, *GetLiveViewsReq) (*GetLiveViewsResp, error)
	GetLiveViewContents(context.Context, *GetLiveViewContentsReq) (*GetLiveViewContentsResp, error)
	GetScripts(context.Context, *GetScriptsReq) (*GetScriptsResp, error)
	GetScriptContents(context.Context, *GetScriptContentsReq) (*GetScriptContentsResp, error)
}

// UnimplementedScriptMgrServer can be embedded to have forward compatible implementations.
type UnimplementedScriptMgrServer struct {
}

func (*UnimplementedScriptMgrServer) GetLiveViews(ctx context.Context, req *GetLiveViewsReq) (*GetLiveViewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveViews not implemented")
}
func (*UnimplementedScriptMgrServer) GetLiveViewContents(ctx context.Context, req *GetLiveViewContentsReq) (*GetLiveViewContentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveViewContents not implemented")
}
func (*UnimplementedScriptMgrServer) GetScripts(ctx context.Context, req *GetScriptsReq) (*GetScriptsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScripts not implemented")
}
func (*UnimplementedScriptMgrServer) GetScriptContents(ctx context.Context, req *GetScriptContentsReq) (*GetScriptContentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptContents not implemented")
}

func RegisterScriptMgrServer(s *grpc.Server, srv ScriptMgrServer) {
	s.RegisterService(&_ScriptMgr_serviceDesc, srv)
}

func _ScriptMgr_GetLiveViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveViewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServer).GetLiveViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.ScriptMgr/GetLiveViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServer).GetLiveViews(ctx, req.(*GetLiveViewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptMgr_GetLiveViewContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveViewContentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServer).GetLiveViewContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.ScriptMgr/GetLiveViewContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServer).GetLiveViewContents(ctx, req.(*GetLiveViewContentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptMgr_GetScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServer).GetScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.ScriptMgr/GetScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServer).GetScripts(ctx, req.(*GetScriptsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptMgr_GetScriptContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptContentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptMgrServer).GetScriptContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.ScriptMgr/GetScriptContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptMgrServer).GetScriptContents(ctx, req.(*GetScriptContentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScriptMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.cloudapi.ScriptMgr",
	HandlerType: (*ScriptMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiveViews",
			Handler:    _ScriptMgr_GetLiveViews_Handler,
		},
		{
			MethodName: "GetLiveViewContents",
			Handler:    _ScriptMgr_GetLiveViewContents_Handler,
		},
		{
			MethodName: "GetScripts",
			Handler:    _ScriptMgr_GetScripts_Handler,
		},
		{
			MethodName: "GetScriptContents",
			Handler:    _ScriptMgr_GetScriptContents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/cloudapipb/cloudapi.proto",
}

// AutocompleteServiceClient is the client API for AutocompleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AutocompleteServiceClient interface {
	Autocomplete(ctx context.Context, in *AutocompleteRequest, opts ...grpc.CallOption) (*AutocompleteResponse, error)
	AutocompleteField(ctx context.Context, in *AutocompleteFieldRequest, opts ...grpc.CallOption) (*AutocompleteFieldResponse, error)
}

type autocompleteServiceClient struct {
	cc *grpc.ClientConn
}

func NewAutocompleteServiceClient(cc *grpc.ClientConn) AutocompleteServiceClient {
	return &autocompleteServiceClient{cc}
}

func (c *autocompleteServiceClient) Autocomplete(ctx context.Context, in *AutocompleteRequest, opts ...grpc.CallOption) (*AutocompleteResponse, error) {
	out := new(AutocompleteResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.AutocompleteService/Autocomplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autocompleteServiceClient) AutocompleteField(ctx context.Context, in *AutocompleteFieldRequest, opts ...grpc.CallOption) (*AutocompleteFieldResponse, error) {
	out := new(AutocompleteFieldResponse)
	err := c.cc.Invoke(ctx, "/px.cloudapi.AutocompleteService/AutocompleteField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutocompleteServiceServer is the server API for AutocompleteService service.
type AutocompleteServiceServer interface {
	Autocomplete(context.Context, *AutocompleteRequest) (*AutocompleteResponse, error)
	AutocompleteField(context.Context, *AutocompleteFieldRequest) (*AutocompleteFieldResponse, error)
}

// UnimplementedAutocompleteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAutocompleteServiceServer struct {
}

func (*UnimplementedAutocompleteServiceServer) Autocomplete(ctx context.Context, req *AutocompleteRequest) (*AutocompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Autocomplete not implemented")
}
func (*UnimplementedAutocompleteServiceServer) AutocompleteField(ctx context.Context, req *AutocompleteFieldRequest) (*AutocompleteFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutocompleteField not implemented")
}

func RegisterAutocompleteServiceServer(s *grpc.Server, srv AutocompleteServiceServer) {
	s.RegisterService(&_AutocompleteService_serviceDesc, srv)
}

func _AutocompleteService_Autocomplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutocompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutocompleteServiceServer).Autocomplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.AutocompleteService/Autocomplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutocompleteServiceServer).Autocomplete(ctx, req.(*AutocompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutocompleteService_AutocompleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutocompleteFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutocompleteServiceServer).AutocompleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.AutocompleteService/AutocompleteField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutocompleteServiceServer).AutocompleteField(ctx, req.(*AutocompleteFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutocompleteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.cloudapi.AutocompleteService",
	HandlerType: (*AutocompleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Autocomplete",
			Handler:    _AutocompleteService_Autocomplete_Handler,
		},
		{
			MethodName: "AutocompleteField",
			Handler:    _AutocompleteService_AutocompleteField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/cloudapipb/cloudapi.proto",
}

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileServiceClient interface {
	GetOrgInfo(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*OrgInfo, error)
}

type profileServiceClient struct {
	cc *grpc.ClientConn
}

func NewProfileServiceClient(cc *grpc.ClientConn) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) GetOrgInfo(ctx context.Context, in *uuidpb.UUID, opts ...grpc.CallOption) (*OrgInfo, error) {
	out := new(OrgInfo)
	err := c.cc.Invoke(ctx, "/px.cloudapi.ProfileService/GetOrgInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
type ProfileServiceServer interface {
	GetOrgInfo(context.Context, *uuidpb.UUID) (*OrgInfo, error)
}

// UnimplementedProfileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (*UnimplementedProfileServiceServer) GetOrgInfo(ctx context.Context, req *uuidpb.UUID) (*OrgInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgInfo not implemented")
}

func RegisterProfileServiceServer(s *grpc.Server, srv ProfileServiceServer) {
	s.RegisterService(&_ProfileService_serviceDesc, srv)
}

func _ProfileService_GetOrgInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uuidpb.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetOrgInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.cloudapi.ProfileService/GetOrgInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetOrgInfo(ctx, req.(*uuidpb.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.cloudapi.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrgInfo",
			Handler:    _ProfileService_GetOrgInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cloud/cloudapipb/cloudapi.proto",
}

func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetImageCredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetImageCredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetImageCredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetImageCredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetImageCredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetImageCredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creds) > 0 {
		i -= len(m.Creds)
		copy(dAtA[i:], m.Creds)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Creds)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArtifactSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArtifactSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArtifactSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Artifact) > 0 {
		for iNdEx := len(m.Artifact) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Artifact[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Artifact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Artifact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Artifact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Changelog) > 0 {
		i -= len(m.Changelog)
		copy(dAtA[i:], m.Changelog)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Changelog)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AvailableArtifacts) > 0 {
		dAtA2 := make([]byte, len(m.AvailableArtifacts)*10)
		var j1 int
		for _, num := range m.AvailableArtifacts {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCloudapi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VersionStr) > 0 {
		i -= len(m.VersionStr)
		copy(dAtA[i:], m.VersionStr)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.VersionStr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CommitHash) > 0 {
		i -= len(m.CommitHash)
		copy(dAtA[i:], m.CommitHash)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.CommitHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetArtifactListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArtifactListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArtifactListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.ArtifactType != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.ArtifactType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ArtifactName) > 0 {
		i -= len(m.ArtifactName)
		copy(dAtA[i:], m.ArtifactName)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ArtifactName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDownloadLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDownloadLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDownloadLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ArtifactType != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.ArtifactType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VersionStr) > 0 {
		i -= len(m.VersionStr)
		copy(dAtA[i:], m.VersionStr)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.VersionStr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ArtifactName) > 0 {
		i -= len(m.ArtifactName)
		copy(dAtA[i:], m.ArtifactName)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ArtifactName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDownloadLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDownloadLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDownloadLinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidUntil != nil {
		{
			size, err := m.ValidUntil.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SHA256) > 0 {
		i -= len(m.SHA256)
		copy(dAtA[i:], m.SHA256)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.SHA256)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClusterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterID != nil {
		{
			size, err := m.ClusterID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOrInstallClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrInstallClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOrInstallClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RedeployEtcd {
		i--
		if m.RedeployEtcd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClusterID != nil {
		{
			size, err := m.ClusterID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOrInstallClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrInstallClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOrInstallClusterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateStarted {
		i--
		if m.UpdateStarted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VizierConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoUpdateEnabled {
		i--
		if m.AutoUpdateEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PassthroughEnabled {
		i--
		if m.PassthroughEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VizierConfigUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoUpdateEnabled != nil {
		{
			size, err := m.AutoUpdateEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PassthroughEnabled != nil {
		{
			size, err := m.PassthroughEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetClusterInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClusterInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *K8SEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *K8SEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K8SEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastTime != nil {
		{
			size, err := m.LastTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FirstTime != nil {
		{
			size, err := m.FirstTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Containers) > 0 {
		for iNdEx := len(m.Containers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Containers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumInstrumentedNodes != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.NumInstrumentedNodes))
		i--
		dAtA[i] = 0x60
	}
	if m.NumNodes != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.NumNodes))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ControlPlanePodStatuses) > 0 {
		for k := range m.ControlPlanePodStatuses {
			v := m.ControlPlanePodStatuses[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCloudapi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCloudapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCloudapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.PrettyClusterName) > 0 {
		i -= len(m.PrettyClusterName)
		copy(dAtA[i:], m.PrettyClusterName)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.PrettyClusterName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VizierVersion) > 0 {
		i -= len(m.VizierVersion)
		copy(dAtA[i:], m.VizierVersion)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.VizierVersion)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ClusterVersion) > 0 {
		i -= len(m.ClusterVersion)
		copy(dAtA[i:], m.ClusterVersion)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ClusterVersion)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClusterUID) > 0 {
		i -= len(m.ClusterUID)
		copy(dAtA[i:], m.ClusterUID)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ClusterUID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastHeartbeatNs != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.LastHeartbeatNs))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetClusterInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClusterInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetClusterConnectionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterConnectionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClusterConnectionInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetClusterConnectionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterConnectionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClusterConnectionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IPAddress) > 0 {
		i -= len(m.IPAddress)
		copy(dAtA[i:], m.IPAddress)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.IPAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateClusterVizierConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClusterVizierConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClusterVizierConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigUpdate != nil {
		{
			size, err := m.ConfigUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateClusterVizierConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClusterVizierConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClusterVizierConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeploymentKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateDeploymentKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeploymentKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDeploymentKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDeploymentKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDeploymentKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDeploymentKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListDeploymentKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDeploymentKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDeploymentKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDeploymentKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeploymentKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeploymentKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeploymentKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeploymentKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeploymentKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAPIKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAPIKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListAPIKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAPIKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAPIKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAPIKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAPIKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPIKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAPIKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLiveViewsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveViewsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveViewsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LiveViewMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveViewMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiveViewMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLiveViewsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveViewsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveViewsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiveViews) > 0 {
		for iNdEx := len(m.LiveViews) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiveViews[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLiveViewContentsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveViewContentsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveViewContentsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiveViewID) > 0 {
		i -= len(m.LiveViewID)
		copy(dAtA[i:], m.LiveViewID)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.LiveViewID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLiveViewContentsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveViewContentsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveViewContentsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vis != nil {
		{
			size, err := m.Vis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PxlContents) > 0 {
		i -= len(m.PxlContents)
		copy(dAtA[i:], m.PxlContents)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.PxlContents)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetScriptsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScriptsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScriptsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ScriptMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScriptMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScriptMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasLiveView {
		i--
		if m.HasLiveView {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetScriptsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScriptsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScriptsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for iNdEx := len(m.Scripts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scripts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetScriptContentsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScriptContentsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScriptContentsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScriptID) > 0 {
		i -= len(m.ScriptID)
		copy(dAtA[i:], m.ScriptID)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ScriptID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetScriptContentsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScriptContentsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetScriptContentsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contents) > 0 {
		i -= len(m.Contents)
		copy(dAtA[i:], m.Contents)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Contents)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutocompleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocompleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutocompleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterUID) > 0 {
		i -= len(m.ClusterUID)
		copy(dAtA[i:], m.ClusterUID)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ClusterUID)))
		i--
		dAtA[i] = 0x22
	}
	if m.Action != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if m.CursorPos != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.CursorPos))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TabSuggestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabSuggestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TabSuggestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suggestions) > 0 {
		for iNdEx := len(m.Suggestions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Suggestions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ExecutableAfterSelect {
		i--
		if m.ExecutableAfterSelect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.TabIndex != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.TabIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AutocompleteSuggestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocompleteSuggestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutocompleteSuggestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MatchedIndexes) > 0 {
		dAtA32 := make([]byte, len(m.MatchedIndexes)*10)
		var j31 int
		for _, num1 := range m.MatchedIndexes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintCloudapi(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AutocompleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocompleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutocompleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TabSuggestions) > 0 {
		for iNdEx := len(m.TabSuggestions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TabSuggestions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsExecutable {
		i--
		if m.IsExecutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.FormattedInput) > 0 {
		i -= len(m.FormattedInput)
		copy(dAtA[i:], m.FormattedInput)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.FormattedInput)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutocompleteFieldRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocompleteFieldRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutocompleteFieldRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterUID) > 0 {
		i -= len(m.ClusterUID)
		copy(dAtA[i:], m.ClusterUID)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.ClusterUID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RequiredArgTypes) > 0 {
		dAtA34 := make([]byte, len(m.RequiredArgTypes)*10)
		var j33 int
		for _, num := range m.RequiredArgTypes {
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		i -= j33
		copy(dAtA[i:], dAtA34[:j33])
		i = encodeVarintCloudapi(dAtA, i, uint64(j33))
		i--
		dAtA[i] = 0x1a
	}
	if m.FieldType != 0 {
		i = encodeVarintCloudapi(dAtA, i, uint64(m.FieldType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutocompleteFieldResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocompleteFieldResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutocompleteFieldResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suggestions) > 0 {
		for iNdEx := len(m.Suggestions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Suggestions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCloudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrgInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrgInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrgInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgName) > 0 {
		i -= len(m.OrgName)
		copy(dAtA[i:], m.OrgName)
		i = encodeVarintCloudapi(dAtA, i, uint64(len(m.OrgName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCloudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCloudapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovCloudapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *LoginReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovCloudapi(uint64(m.ExpiresAt))
	}
	return n
}

func (m *GetImageCredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetImageCredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creds)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *ArtifactSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if len(m.Artifact) > 0 {
		for _, e := range m.Artifact {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *Artifact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.CommitHash)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.VersionStr)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if len(m.AvailableArtifacts) > 0 {
		l = 0
		for _, e := range m.AvailableArtifacts {
			l += sovCloudapi(uint64(e))
		}
		n += 1 + sovCloudapi(uint64(l)) + l
	}
	l = len(m.Changelog)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetArtifactListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ArtifactName)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.ArtifactType != 0 {
		n += 1 + sovCloudapi(uint64(m.ArtifactType))
	}
	if m.Limit != 0 {
		n += 1 + sovCloudapi(uint64(m.Limit))
	}
	return n
}

func (m *GetDownloadLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ArtifactName)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.VersionStr)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.ArtifactType != 0 {
		n += 1 + sovCloudapi(uint64(m.ArtifactType))
	}
	return n
}

func (m *GetDownloadLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.SHA256)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.ValidUntil != nil {
		l = m.ValidUntil.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *CreateClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateClusterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != nil {
		l = m.ClusterID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *UpdateOrInstallClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterID != nil {
		l = m.ClusterID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.RedeployEtcd {
		n += 2
	}
	return n
}

func (m *UpdateOrInstallClusterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateStarted {
		n += 2
	}
	return n
}

func (m *VizierConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassthroughEnabled {
		n += 2
	}
	if m.AutoUpdateEnabled {
		n += 2
	}
	return n
}

func (m *VizierConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassthroughEnabled != nil {
		l = m.PassthroughEnabled.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.AutoUpdateEnabled != nil {
		l = m.AutoUpdateEnabled.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetClusterInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *K8SEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.FirstTime != nil {
		l = m.FirstTime.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.LastTime != nil {
		l = m.LastTime.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *PodStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCloudapi(uint64(m.Status))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *ContainerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovCloudapi(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCloudapi(uint64(m.Status))
	}
	if m.LastHeartbeatNs != 0 {
		n += 1 + sovCloudapi(uint64(m.LastHeartbeatNs))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.ClusterUID)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.ClusterVersion)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.VizierVersion)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.PrettyClusterName)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if len(m.ControlPlanePodStatuses) > 0 {
		for k, v := range m.ControlPlanePodStatuses {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCloudapi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCloudapi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCloudapi(uint64(mapEntrySize))
		}
	}
	if m.NumNodes != 0 {
		n += 1 + sovCloudapi(uint64(m.NumNodes))
	}
	if m.NumInstrumentedNodes != 0 {
		n += 1 + sovCloudapi(uint64(m.NumInstrumentedNodes))
	}
	return n
}

func (m *GetClusterInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *GetClusterConnectionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetClusterConnectionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *UpdateClusterVizierConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.ConfigUpdate != nil {
		l = m.ConfigUpdate.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *UpdateClusterVizierConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeploymentKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *CreateDeploymentKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *ListDeploymentKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListDeploymentKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *GetDeploymentKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetDeploymentKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *APIKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *CreateAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *ListAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListAPIKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *GetAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetAPIKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetLiveViewsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LiveViewMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetLiveViewsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiveViews) > 0 {
		for _, e := range m.LiveViews {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *GetLiveViewContentsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LiveViewID)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetLiveViewContentsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.PxlContents)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.Vis != nil {
		l = m.Vis.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetScriptsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ScriptMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.HasLiveView {
		n += 2
	}
	return n
}

func (m *GetScriptsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scripts) > 0 {
		for _, e := range m.Scripts {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *GetScriptContentsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScriptID)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *GetScriptContentsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *AutocompleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.CursorPos != 0 {
		n += 1 + sovCloudapi(uint64(m.CursorPos))
	}
	if m.Action != 0 {
		n += 1 + sovCloudapi(uint64(m.Action))
	}
	l = len(m.ClusterUID)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *TabSuggestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabIndex != 0 {
		n += 1 + sovCloudapi(uint64(m.TabIndex))
	}
	if m.ExecutableAfterSelect {
		n += 2
	}
	if len(m.Suggestions) > 0 {
		for _, e := range m.Suggestions {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *AutocompleteSuggestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovCloudapi(uint64(m.Kind))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if len(m.MatchedIndexes) > 0 {
		l = 0
		for _, e := range m.MatchedIndexes {
			l += sovCloudapi(uint64(e))
		}
		n += 1 + sovCloudapi(uint64(l)) + l
	}
	if m.State != 0 {
		n += 1 + sovCloudapi(uint64(m.State))
	}
	return n
}

func (m *AutocompleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FormattedInput)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.IsExecutable {
		n += 2
	}
	if len(m.TabSuggestions) > 0 {
		for _, e := range m.TabSuggestions {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *AutocompleteFieldRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	if m.FieldType != 0 {
		n += 1 + sovCloudapi(uint64(m.FieldType))
	}
	if len(m.RequiredArgTypes) > 0 {
		l = 0
		for _, e := range m.RequiredArgTypes {
			l += sovCloudapi(uint64(e))
		}
		n += 1 + sovCloudapi(uint64(l)) + l
	}
	l = len(m.ClusterUID)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func (m *AutocompleteFieldResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Suggestions) > 0 {
		for _, e := range m.Suggestions {
			l = e.Size()
			n += 1 + l + sovCloudapi(uint64(l))
		}
	}
	return n
}

func (m *OrgInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovCloudapi(uint64(l))
	}
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovCloudapi(uint64(l))
	}
	return n
}

func sovCloudapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCloudapi(x uint64) (n int) {
	return sovCloudapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginRequest{`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginReply{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`ExpiresAt:` + fmt.Sprintf("%v", this.ExpiresAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetImageCredentialsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetImageCredentialsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetImageCredentialsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetImageCredentialsResponse{`,
		`Creds:` + fmt.Sprintf("%v", this.Creds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArtifactSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArtifact := "[]*Artifact{"
	for _, f := range this.Artifact {
		repeatedStringForArtifact += strings.Replace(f.String(), "Artifact", "Artifact", 1) + ","
	}
	repeatedStringForArtifact += "}"
	s := strings.Join([]string{`&ArtifactSet{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Artifact:` + repeatedStringForArtifact + `,`,
		`}`,
	}, "")
	return s
}
func (this *Artifact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Artifact{`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`CommitHash:` + fmt.Sprintf("%v", this.CommitHash) + `,`,
		`VersionStr:` + fmt.Sprintf("%v", this.VersionStr) + `,`,
		`AvailableArtifacts:` + fmt.Sprintf("%v", this.AvailableArtifacts) + `,`,
		`Changelog:` + fmt.Sprintf("%v", this.Changelog) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetArtifactListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetArtifactListRequest{`,
		`ArtifactName:` + fmt.Sprintf("%v", this.ArtifactName) + `,`,
		`ArtifactType:` + fmt.Sprintf("%v", this.ArtifactType) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDownloadLinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDownloadLinkRequest{`,
		`ArtifactName:` + fmt.Sprintf("%v", this.ArtifactName) + `,`,
		`VersionStr:` + fmt.Sprintf("%v", this.VersionStr) + `,`,
		`ArtifactType:` + fmt.Sprintf("%v", this.ArtifactType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDownloadLinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDownloadLinkResponse{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`SHA256:` + fmt.Sprintf("%v", this.SHA256) + `,`,
		`ValidUntil:` + strings.Replace(fmt.Sprintf("%v", this.ValidUntil), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateClusterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateClusterRequest{`,
		`}`,
	}, "")
	return s
}
func (this *CreateClusterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateClusterResponse{`,
		`ClusterID:` + strings.Replace(fmt.Sprintf("%v", this.ClusterID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOrInstallClusterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateOrInstallClusterRequest{`,
		`ClusterID:` + strings.Replace(fmt.Sprintf("%v", this.ClusterID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`RedeployEtcd:` + fmt.Sprintf("%v", this.RedeployEtcd) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOrInstallClusterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateOrInstallClusterResponse{`,
		`UpdateStarted:` + fmt.Sprintf("%v", this.UpdateStarted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierConfig{`,
		`PassthroughEnabled:` + fmt.Sprintf("%v", this.PassthroughEnabled) + `,`,
		`AutoUpdateEnabled:` + fmt.Sprintf("%v", this.AutoUpdateEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierConfigUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierConfigUpdate{`,
		`PassthroughEnabled:` + strings.Replace(fmt.Sprintf("%v", this.PassthroughEnabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`AutoUpdateEnabled:` + strings.Replace(fmt.Sprintf("%v", this.AutoUpdateEnabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClusterInfoRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *K8SEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&K8SEvent{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`FirstTime:` + strings.Replace(fmt.Sprintf("%v", this.FirstTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastTime:` + strings.Replace(fmt.Sprintf("%v", this.LastTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContainers := "[]*ContainerStatus{"
	for _, f := range this.Containers {
		repeatedStringForContainers += strings.Replace(f.String(), "ContainerStatus", "ContainerStatus", 1) + ","
	}
	repeatedStringForContainers += "}"
	repeatedStringForEvents := "[]*K8SEvent{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(fmt.Sprintf("%v", f), "K8SEvent", "K8SEvent", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&PodStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StatusMessage:` + fmt.Sprintf("%v", this.StatusMessage) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Containers:` + repeatedStringForContainers + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Events:` + repeatedStringForEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContainerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerStatus{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForControlPlanePodStatuses := make([]string, 0, len(this.ControlPlanePodStatuses))
	for k, _ := range this.ControlPlanePodStatuses {
		keysForControlPlanePodStatuses = append(keysForControlPlanePodStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForControlPlanePodStatuses)
	mapStringForControlPlanePodStatuses := "map[string]*PodStatus{"
	for _, k := range keysForControlPlanePodStatuses {
		mapStringForControlPlanePodStatuses += fmt.Sprintf("%v: %v,", k, this.ControlPlanePodStatuses[k])
	}
	mapStringForControlPlanePodStatuses += "}"
	s := strings.Join([]string{`&ClusterInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastHeartbeatNs:` + fmt.Sprintf("%v", this.LastHeartbeatNs) + `,`,
		`Config:` + strings.Replace(this.Config.String(), "VizierConfig", "VizierConfig", 1) + `,`,
		`ClusterUID:` + fmt.Sprintf("%v", this.ClusterUID) + `,`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`ClusterVersion:` + fmt.Sprintf("%v", this.ClusterVersion) + `,`,
		`VizierVersion:` + fmt.Sprintf("%v", this.VizierVersion) + `,`,
		`PrettyClusterName:` + fmt.Sprintf("%v", this.PrettyClusterName) + `,`,
		`ControlPlanePodStatuses:` + mapStringForControlPlanePodStatuses + `,`,
		`NumNodes:` + fmt.Sprintf("%v", this.NumNodes) + `,`,
		`NumInstrumentedNodes:` + fmt.Sprintf("%v", this.NumInstrumentedNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClusters := "[]*ClusterInfo{"
	for _, f := range this.Clusters {
		repeatedStringForClusters += strings.Replace(f.String(), "ClusterInfo", "ClusterInfo", 1) + ","
	}
	repeatedStringForClusters += "}"
	s := strings.Join([]string{`&GetClusterInfoResponse{`,
		`Clusters:` + repeatedStringForClusters + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterConnectionInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClusterConnectionInfoRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterConnectionInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClusterConnectionInfoResponse{`,
		`IPAddress:` + fmt.Sprintf("%v", this.IPAddress) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateClusterVizierConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateClusterVizierConfigRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`ConfigUpdate:` + strings.Replace(this.ConfigUpdate.String(), "VizierConfigUpdate", "VizierConfigUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateClusterVizierConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateClusterVizierConfigResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentKey{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeploymentKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDeploymentKeyRequest{`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDeploymentKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDeploymentKeyRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ListDeploymentKeyResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKeys := "[]*DeploymentKey{"
	for _, f := range this.Keys {
		repeatedStringForKeys += strings.Replace(f.String(), "DeploymentKey", "DeploymentKey", 1) + ","
	}
	repeatedStringForKeys += "}"
	s := strings.Join([]string{`&ListDeploymentKeyResponse{`,
		`Keys:` + repeatedStringForKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeploymentKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDeploymentKeyRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeploymentKeyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDeploymentKeyResponse{`,
		`Key:` + strings.Replace(this.Key.String(), "DeploymentKey", "DeploymentKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIKey{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateAPIKeyRequest{`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListAPIKeyRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ListAPIKeyResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKeys := "[]*APIKey{"
	for _, f := range this.Keys {
		repeatedStringForKeys += strings.Replace(f.String(), "APIKey", "APIKey", 1) + ","
	}
	repeatedStringForKeys += "}"
	s := strings.Join([]string{`&ListAPIKeyResponse{`,
		`Keys:` + repeatedStringForKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAPIKeyRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAPIKeyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAPIKeyResponse{`,
		`Key:` + strings.Replace(this.Key.String(), "APIKey", "APIKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLiveViewsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLiveViewsReq{`,
		`}`,
	}, "")
	return s
}
func (this *LiveViewMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LiveViewMetadata{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLiveViewsResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLiveViews := "[]*LiveViewMetadata{"
	for _, f := range this.LiveViews {
		repeatedStringForLiveViews += strings.Replace(f.String(), "LiveViewMetadata", "LiveViewMetadata", 1) + ","
	}
	repeatedStringForLiveViews += "}"
	s := strings.Join([]string{`&GetLiveViewsResp{`,
		`LiveViews:` + repeatedStringForLiveViews + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLiveViewContentsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLiveViewContentsReq{`,
		`LiveViewID:` + fmt.Sprintf("%v", this.LiveViewID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLiveViewContentsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLiveViewContentsResp{`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "LiveViewMetadata", "LiveViewMetadata", 1) + `,`,
		`PxlContents:` + fmt.Sprintf("%v", this.PxlContents) + `,`,
		`Vis:` + strings.Replace(fmt.Sprintf("%v", this.Vis), "Vis", "vispb.Vis", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScriptsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScriptsReq{`,
		`}`,
	}, "")
	return s
}
func (this *ScriptMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScriptMetadata{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`HasLiveView:` + fmt.Sprintf("%v", this.HasLiveView) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScriptsResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForScripts := "[]*ScriptMetadata{"
	for _, f := range this.Scripts {
		repeatedStringForScripts += strings.Replace(f.String(), "ScriptMetadata", "ScriptMetadata", 1) + ","
	}
	repeatedStringForScripts += "}"
	s := strings.Join([]string{`&GetScriptsResp{`,
		`Scripts:` + repeatedStringForScripts + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScriptContentsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScriptContentsReq{`,
		`ScriptID:` + fmt.Sprintf("%v", this.ScriptID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetScriptContentsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetScriptContentsResp{`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "ScriptMetadata", "ScriptMetadata", 1) + `,`,
		`Contents:` + fmt.Sprintf("%v", this.Contents) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutocompleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AutocompleteRequest{`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`CursorPos:` + fmt.Sprintf("%v", this.CursorPos) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`ClusterUID:` + fmt.Sprintf("%v", this.ClusterUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TabSuggestion) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSuggestions := "[]*AutocompleteSuggestion{"
	for _, f := range this.Suggestions {
		repeatedStringForSuggestions += strings.Replace(f.String(), "AutocompleteSuggestion", "AutocompleteSuggestion", 1) + ","
	}
	repeatedStringForSuggestions += "}"
	s := strings.Join([]string{`&TabSuggestion{`,
		`TabIndex:` + fmt.Sprintf("%v", this.TabIndex) + `,`,
		`ExecutableAfterSelect:` + fmt.Sprintf("%v", this.ExecutableAfterSelect) + `,`,
		`Suggestions:` + repeatedStringForSuggestions + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutocompleteSuggestion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AutocompleteSuggestion{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`MatchedIndexes:` + fmt.Sprintf("%v", this.MatchedIndexes) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutocompleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTabSuggestions := "[]*TabSuggestion{"
	for _, f := range this.TabSuggestions {
		repeatedStringForTabSuggestions += strings.Replace(f.String(), "TabSuggestion", "TabSuggestion", 1) + ","
	}
	repeatedStringForTabSuggestions += "}"
	s := strings.Join([]string{`&AutocompleteResponse{`,
		`FormattedInput:` + fmt.Sprintf("%v", this.FormattedInput) + `,`,
		`IsExecutable:` + fmt.Sprintf("%v", this.IsExecutable) + `,`,
		`TabSuggestions:` + repeatedStringForTabSuggestions + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutocompleteFieldRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AutocompleteFieldRequest{`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`FieldType:` + fmt.Sprintf("%v", this.FieldType) + `,`,
		`RequiredArgTypes:` + fmt.Sprintf("%v", this.RequiredArgTypes) + `,`,
		`ClusterUID:` + fmt.Sprintf("%v", this.ClusterUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutocompleteFieldResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSuggestions := "[]*AutocompleteSuggestion{"
	for _, f := range this.Suggestions {
		repeatedStringForSuggestions += strings.Replace(f.String(), "AutocompleteSuggestion", "AutocompleteSuggestion", 1) + ","
	}
	repeatedStringForSuggestions += "}"
	s := strings.Join([]string{`&AutocompleteFieldResponse{`,
		`Suggestions:` + repeatedStringForSuggestions + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrgInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrgInfo{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "UUID", "uuidpb.UUID", 1) + `,`,
		`OrgName:` + fmt.Sprintf("%v", this.OrgName) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCloudapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetImageCredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetImageCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetImageCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetImageCredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetImageCredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetImageCredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArtifactSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArtifactSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArtifactSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artifact = append(m.Artifact, &Artifact{})
			if err := m.Artifact[len(m.Artifact)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Artifact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Artifact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Artifact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v ArtifactType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ArtifactType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AvailableArtifacts = append(m.AvailableArtifacts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCloudapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCloudapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AvailableArtifacts) == 0 {
					m.AvailableArtifacts = make([]ArtifactType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ArtifactType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ArtifactType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AvailableArtifacts = append(m.AvailableArtifacts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableArtifacts", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changelog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changelog = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArtifactListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArtifactListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArtifactListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArtifactName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactType", wireType)
			}
			m.ArtifactType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArtifactType |= ArtifactType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDownloadLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDownloadLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDownloadLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArtifactName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactType", wireType)
			}
			m.ArtifactType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArtifactType |= ArtifactType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDownloadLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDownloadLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDownloadLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SHA256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SHA256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidUntil == nil {
				m.ValidUntil = &types.Timestamp{}
			}
			if err := m.ValidUntil.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterID == nil {
				m.ClusterID = &uuidpb.UUID{}
			}
			if err := m.ClusterID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrInstallClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrInstallClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrInstallClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterID == nil {
				m.ClusterID = &uuidpb.UUID{}
			}
			if err := m.ClusterID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeployEtcd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedeployEtcd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrInstallClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrInstallClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrInstallClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateStarted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateStarted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassthroughEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PassthroughEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdateEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpdateEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierConfigUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierConfigUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierConfigUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassthroughEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PassthroughEnabled == nil {
				m.PassthroughEnabled = &types.BoolValue{}
			}
			if err := m.PassthroughEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpdateEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoUpdateEnabled == nil {
				m.AutoUpdateEnabled = &types.BoolValue{}
			}
			if err := m.AutoUpdateEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *K8SEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: K8sEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: K8sEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstTime == nil {
				m.FirstTime = &types.Timestamp{}
			}
			if err := m.FirstTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTime == nil {
				m.LastTime = &types.Timestamp{}
			}
			if err := m.LastTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= metadatapb.PodPhase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &ContainerStatus{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &K8SEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= metadatapb.ContainerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ClusterStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatNs", wireType)
			}
			m.LastHeartbeatNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &VizierConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrettyClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrettyClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlanePodStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControlPlanePodStatuses == nil {
				m.ControlPlanePodStatuses = make(map[string]*PodStatus)
			}
			var mapkey string
			var mapvalue *PodStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCloudapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCloudapi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCloudapi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PodStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCloudapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ControlPlanePodStatuses[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNodes", wireType)
			}
			m.NumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInstrumentedNodes", wireType)
			}
			m.NumInstrumentedNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInstrumentedNodes |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &ClusterInfo{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterConnectionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterConnectionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterConnectionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterConnectionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterConnectionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterConnectionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClusterVizierConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClusterVizierConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClusterVizierConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigUpdate == nil {
				m.ConfigUpdate = &VizierConfigUpdate{}
			}
			if err := m.ConfigUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClusterVizierConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClusterVizierConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClusterVizierConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeploymentKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeploymentKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeploymentKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDeploymentKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDeploymentKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDeploymentKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDeploymentKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDeploymentKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDeploymentKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &DeploymentKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeploymentKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeploymentKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeploymentKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeploymentKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeploymentKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeploymentKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &DeploymentKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAPIKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAPIKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAPIKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &APIKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPIKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPIKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPIKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &APIKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveViewsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveViewsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveViewsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveViewMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveViewMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveViewMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveViewsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveViewsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveViewsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveViews", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveViews = append(m.LiveViews, &LiveViewMetadata{})
			if err := m.LiveViews[len(m.LiveViews)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveViewContentsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveViewContentsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveViewContentsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveViewID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveViewID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveViewContentsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveViewContentsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveViewContentsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &LiveViewMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PxlContents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PxlContents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vis == nil {
				m.Vis = &vispb.Vis{}
			}
			if err := m.Vis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScriptsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScriptsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScriptsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScriptMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLiveView", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLiveView = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScriptsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScriptsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScriptsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scripts = append(m.Scripts, &ScriptMetadata{})
			if err := m.Scripts[len(m.Scripts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScriptContentsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScriptContentsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScriptContentsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScriptContentsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScriptContentsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScriptContentsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ScriptMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocompleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocompleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocompleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorPos", wireType)
			}
			m.CursorPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CursorPos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= AutocompleteActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabSuggestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabSuggestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabSuggestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabIndex", wireType)
			}
			m.TabIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutableAfterSelect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecutableAfterSelect = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suggestions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suggestions = append(m.Suggestions, &AutocompleteSuggestion{})
			if err := m.Suggestions[len(m.Suggestions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocompleteSuggestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocompleteSuggestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocompleteSuggestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= AutocompleteEntityKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MatchedIndexes = append(m.MatchedIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCloudapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCloudapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MatchedIndexes) == 0 {
					m.MatchedIndexes = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MatchedIndexes = append(m.MatchedIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedIndexes", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AutocompleteEntityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocompleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocompleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocompleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormattedInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormattedInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExecutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExecutable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabSuggestions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabSuggestions = append(m.TabSuggestions, &TabSuggestion{})
			if err := m.TabSuggestions[len(m.TabSuggestions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocompleteFieldRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocompleteFieldRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocompleteFieldRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			m.FieldType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldType |= AutocompleteEntityKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v AutocompleteEntityKind
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AutocompleteEntityKind(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequiredArgTypes = append(m.RequiredArgTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCloudapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCloudapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.RequiredArgTypes) == 0 {
					m.RequiredArgTypes = make([]AutocompleteEntityKind, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AutocompleteEntityKind
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AutocompleteEntityKind(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequiredArgTypes = append(m.RequiredArgTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredArgTypes", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocompleteFieldResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocompleteFieldResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocompleteFieldResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suggestions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suggestions = append(m.Suggestions, &AutocompleteSuggestion{})
			if err := m.Suggestions[len(m.Suggestions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrgInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &uuidpb.UUID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCloudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCloudapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCloudapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCloudapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCloudapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCloudapi = fmt.Errorf("proto: unexpected end of group")
)
