package(default_visibility = ["//visibility:public"])

load("//bazel:cc_resource.bzl", "pl_bpf_cc_resource", "pl_cc_resource")
load("//bazel:pl_build_system.bzl", "pl_cc_binary", "pl_cc_library", "pl_cc_test")
load("@io_bazel_rules_docker//cc:image.bzl", "cc_image")
load("@io_bazel_rules_docker//container:container.bzl", "container_push")

pl_cc_library(
    name = "cc_library",
    srcs = glob(
        ["*.cc"],
        exclude = [
            "**/*_test.cc",
            "**/*_wrapper.cc",
        ],
    ),
    hdrs = glob(
        [
            "*.h",
            "bcc_bpf/*.h",
        ],
        exclude = [
            "**/*_mock.h",
        ],
    ),
    deps = [
        "//src/shared/types:cc_library",
        "//src/shared/types/proto:types_pl_cc_proto",
        "//src/common/grpcutils:cc_library",
        "//src/stirling/cgroups:cc_library",
        "//src/stirling/utils:cc_library",
        "//src/stirling/proto:stirling_pl_cc_proto",
        "//third_party:arrow",
        "@com_github_h2o_picohttpparser//:picohttpparser",
        "//src/common/zlib:cc_library",
        "//external:nghttp2",
        "//demos/applications/hipster_shop:cc_library",
    ] + select({
        "@bazel_tools//src/conditions:linux_x86_64": [
            ":bt_files",
            ":bcc_bpf_files",
            "//third_party/foreign_cc:bcc",
            "@com_llvm_lib//:llvm",
        ],
        "//conditions:default": [],
    }),
)

pl_cc_test(
    name = "bpf_program_test",
    srcs = ["bpf_program_test.cc"],
    tags = ["requires_bpf"],
    deps = [":cc_library"],
)

pl_cc_resource(
    name = "bt_files",
    srcs = [
        "bt/cpustat.bt",
        "bt/pidruntime.bt",
    ],
)

pl_bpf_cc_resource(
    name = "bcc_bpf_files",
    srcs = [
        "bcc_bpf/pidruntime.c",
        "bcc_bpf/socket_trace.c",
    ],
    hdrs = [
        ["bcc_bpf/pidruntime.h"],
        [
            "bcc_bpf/socket_trace.h",
            "bcc_bpf/log_event.h",
            "bcc_bpf/logging.h",
        ],
    ],
)

pl_cc_binary(
    name = "stirling_wrapper",
    srcs = ["stirling_wrapper.cc"],
    deps = [
        ":cc_library",
    ],
)

pl_cc_test(
    name = "info_class_manager_test",
    srcs = ["info_class_manager_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "data_table_test",
    srcs = ["data_table_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "pub_sub_manager_test",
    srcs = ["pub_sub_manager_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "source_registry_test",
    srcs = ["source_registry_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "stirling_component_test",
    srcs = ["stirling_component_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "stirling_test",
    size = "medium",
    srcs = ["stirling_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "stirling_bpf_test",
    srcs = ["stirling_bpf_test.cc"],
    tags = ["requires_bpf"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "http_parse_test",
    srcs = ["http_parse_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "mysql_parse_test",
    srcs = ["mysql_parse_test.cc"],
    deps = [":cc_library"],
)

cc_image(
    name = "stirling_wrapper_image",
    base = "//:pl_cc_bpf_debug_image",
    binary = ":stirling_wrapper",
)

container_push(
    name = "push_stirling_wrapper_image",
    format = "Docker",
    image = ":stirling_wrapper_image",
    registry = "gcr.io",
    repository = "pl-dev-infra/stirling_wrapper",
    tag = "{BUILD_USER}",
)

pl_cc_test(
    name = "socket_trace_connector_test",
    srcs = ["socket_trace_connector_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "connection_tracker_test",
    srcs = ["connection_tracker_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "types_test",
    srcs = ["types_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "socket_trace_bpf_test",
    timeout = "moderate",
    srcs = ["socket_trace_bpf_test.cc"],
    tags = ["requires_bpf"],
    deps = [
        ":cc_library",
        "//src/stirling/testing:cc_library",
    ],
)

pl_cc_test(
    name = "grpc_trace_bpf_test",
    srcs = ["grpc_trace_bpf_test.cc"],
    data = [
        "//src/stirling/testing:go_greeter_client",
        "//src/stirling/testing:go_greeter_server",
    ],
    tags = ["requires_bpf"],
    deps = [
        ":cc_library",
        "//src/common/subprocess:cc_library",
        "//src/common/testing:cc_library",
        "//src/stirling/testing:cc_library",
        "//src/stirling/testing/proto:greet_pl_cc_proto",
    ],
)

pl_cc_test(
    name = "grpc_test",
    srcs = ["grpc_test.cc"],
    deps = [
        ":cc_library",
        "//src/stirling/testing/proto:greet_pl_cc_proto",
    ],
)

pl_cc_test(
    name = "http2_test",
    srcs = ["http2_test.cc"],
    deps = [
        ":cc_library",
        "//src/common/testing:cc_library",
        "//src/stirling/testing:cc_library",
        "//src/stirling/testing/proto:greet_pl_cc_proto",
    ],
)

pl_cc_test(
    name = "event_parser_test",
    srcs = ["event_parser_test.cc"],
    deps = [":cc_library"],
)

# TODO(oazizi): Currently test needs to be run manually with sudo.
sh_test(
    name = "stirling_wrapper_kprobe_leak_test",
    srcs = ["stirling_wrapper_kprobe_leak_test.sh"],
    data = [":stirling_wrapper"],
    tags = ["requires_bpf"],
    deps = ["//src/stirling/scripts:kprobe_leak_test"],
)
