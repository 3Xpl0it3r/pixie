// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/stirling/proto/physical_ir.proto

package dynamictracingpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	proto1 "pixielabs.ai/pixielabs/src/stirling/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PhysicalProbe struct {
	Type            proto1.ProbeType         `protobuf:"varint,1,opt,name=type,proto3,enum=pl.stirling.dynamictracingpb.ProbeType" json:"type,omitempty"`
	TracePoint      *proto1.TracePoint       `protobuf:"bytes,2,opt,name=trace_point,json=tracePoint,proto3" json:"trace_point,omitempty"`
	Structs         []*proto1.Struct         `protobuf:"bytes,6,rep,name=structs,proto3" json:"structs,omitempty"`
	Vars            []*proto1.Variable       `protobuf:"bytes,7,rep,name=vars,proto3" json:"vars,omitempty"`
	StashMapActions []*proto1.StashMapAction `protobuf:"bytes,8,rep,name=stash_map_actions,json=stashMapActions,proto3" json:"stash_map_actions,omitempty"`
	OutputActions   []*proto1.OutputAction   `protobuf:"bytes,9,rep,name=output_actions,json=outputActions,proto3" json:"output_actions,omitempty"`
}

func (m *PhysicalProbe) Reset()      { *m = PhysicalProbe{} }
func (*PhysicalProbe) ProtoMessage() {}
func (*PhysicalProbe) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ced47f6dcbd64c2, []int{0}
}
func (m *PhysicalProbe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicalProbe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicalProbe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicalProbe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalProbe.Merge(m, src)
}
func (m *PhysicalProbe) XXX_Size() int {
	return m.Size()
}
func (m *PhysicalProbe) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalProbe.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalProbe proto.InternalMessageInfo

func (m *PhysicalProbe) GetType() proto1.ProbeType {
	if m != nil {
		return m.Type
	}
	return proto1.LOGICAL
}

func (m *PhysicalProbe) GetTracePoint() *proto1.TracePoint {
	if m != nil {
		return m.TracePoint
	}
	return nil
}

func (m *PhysicalProbe) GetStructs() []*proto1.Struct {
	if m != nil {
		return m.Structs
	}
	return nil
}

func (m *PhysicalProbe) GetVars() []*proto1.Variable {
	if m != nil {
		return m.Vars
	}
	return nil
}

func (m *PhysicalProbe) GetStashMapActions() []*proto1.StashMapAction {
	if m != nil {
		return m.StashMapActions
	}
	return nil
}

func (m *PhysicalProbe) GetOutputActions() []*proto1.OutputAction {
	if m != nil {
		return m.OutputActions
	}
	return nil
}

func init() {
	proto.RegisterType((*PhysicalProbe)(nil), "pl.stirling.dynamictracingpb.PhysicalProbe")
}

func init() {
	proto.RegisterFile("src/stirling/proto/physical_ir.proto", fileDescriptor_4ced47f6dcbd64c2)
}

var fileDescriptor_4ced47f6dcbd64c2 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xb1, 0x4a, 0x03, 0x31,
	0x18, 0xc7, 0x2f, 0xb6, 0xb4, 0x9a, 0xd2, 0xaa, 0x37, 0x1d, 0x2a, 0xa1, 0x48, 0xd1, 0x43, 0xe4,
	0x0a, 0x75, 0x53, 0x10, 0x74, 0x10, 0x1c, 0xc4, 0x7a, 0x16, 0x11, 0x97, 0x23, 0x77, 0x1e, 0x6d,
	0xe0, 0x7a, 0x09, 0xf9, 0x52, 0xe1, 0x36, 0x1f, 0xc1, 0xc7, 0xf0, 0x31, 0x1c, 0x1d, 0x3b, 0x76,
	0xb4, 0xe9, 0xe2, 0xd8, 0x47, 0x90, 0x86, 0xb6, 0xa8, 0xc8, 0xb9, 0xe5, 0x9f, 0xfc, 0x7f, 0xbf,
	0x7c, 0xc3, 0x87, 0x1b, 0x20, 0xa3, 0x26, 0x28, 0x26, 0x13, 0x96, 0x76, 0x9b, 0x42, 0x72, 0xc5,
	0x9b, 0xa2, 0x97, 0x01, 0x8b, 0x68, 0x12, 0x30, 0xe9, 0x99, 0x1b, 0x7b, 0x47, 0x24, 0xde, 0xa2,
	0xe4, 0x3d, 0x66, 0x29, 0xed, 0xb3, 0x48, 0x49, 0x1a, 0xb1, 0xb4, 0x2b, 0xc2, 0xad, 0xed, 0x3f,
	0x1c, 0x0b, 0x74, 0xf7, 0xad, 0x80, 0xab, 0xed, 0xb9, 0xb0, 0x2d, 0x79, 0x18, 0xdb, 0x27, 0xb8,
	0xa8, 0x32, 0x11, 0x3b, 0xa8, 0x8e, 0xdc, 0x5a, 0x6b, 0xdf, 0xcb, 0x73, 0x7b, 0x06, 0xe9, 0x64,
	0x22, 0xf6, 0x0d, 0x64, 0x5f, 0xe2, 0xca, 0xec, 0x31, 0x0e, 0x04, 0x67, 0xa9, 0x72, 0x56, 0xea,
	0xc8, 0xad, 0xb4, 0xdc, 0x7c, 0x47, 0x67, 0x06, 0xb4, 0x67, 0x7d, 0x1f, 0xab, 0xe5, 0xd9, 0x3e,
	0xc5, 0x65, 0x50, 0x72, 0x10, 0x29, 0x70, 0x4a, 0xf5, 0x82, 0x5b, 0x69, 0x35, 0xf2, 0x35, 0xb7,
	0xa6, 0xec, 0x2f, 0x20, 0xfb, 0x18, 0x17, 0x9f, 0xa8, 0x04, 0xa7, 0x6c, 0xe0, 0xbd, 0x7c, 0xf8,
	0x8e, 0x4a, 0x46, 0xc3, 0x24, 0xf6, 0x0d, 0x63, 0xdf, 0xe3, 0x4d, 0x50, 0x14, 0x7a, 0x41, 0x9f,
	0x8a, 0x80, 0x46, 0x8a, 0xf1, 0x14, 0x9c, 0x55, 0x23, 0x3a, 0xfc, 0x6f, 0x0a, 0x0a, 0xbd, 0x2b,
	0x2a, 0xce, 0x0c, 0xe4, 0xaf, 0xc3, 0x8f, 0x0c, 0xf6, 0x0d, 0xae, 0xf1, 0x81, 0x12, 0x03, 0xb5,
	0xd4, 0xae, 0x19, 0xed, 0x41, 0xbe, 0xf6, 0xda, 0x30, 0x73, 0x69, 0x95, 0x7f, 0x4b, 0x70, 0x7e,
	0x31, 0x1c, 0x13, 0x6b, 0x34, 0x26, 0xd6, 0x74, 0x4c, 0xd0, 0xb3, 0x26, 0xe8, 0x55, 0x13, 0xf4,
	0xae, 0x09, 0x1a, 0x6a, 0x82, 0x3e, 0x34, 0x41, 0x9f, 0x9a, 0x58, 0x53, 0x4d, 0xd0, 0xcb, 0x84,
	0x58, 0xc3, 0x09, 0xb1, 0x46, 0x13, 0x62, 0x3d, 0x6c, 0xfc, 0xfe, 0x23, 0x2c, 0x99, 0x8d, 0x38,
	0xfa, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x13, 0xc5, 0x9e, 0x6c, 0x74, 0x02, 0x00, 0x00,
}

func (this *PhysicalProbe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PhysicalProbe)
	if !ok {
		that2, ok := that.(PhysicalProbe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.TracePoint.Equal(that1.TracePoint) {
		return false
	}
	if len(this.Structs) != len(that1.Structs) {
		return false
	}
	for i := range this.Structs {
		if !this.Structs[i].Equal(that1.Structs[i]) {
			return false
		}
	}
	if len(this.Vars) != len(that1.Vars) {
		return false
	}
	for i := range this.Vars {
		if !this.Vars[i].Equal(that1.Vars[i]) {
			return false
		}
	}
	if len(this.StashMapActions) != len(that1.StashMapActions) {
		return false
	}
	for i := range this.StashMapActions {
		if !this.StashMapActions[i].Equal(that1.StashMapActions[i]) {
			return false
		}
	}
	if len(this.OutputActions) != len(that1.OutputActions) {
		return false
	}
	for i := range this.OutputActions {
		if !this.OutputActions[i].Equal(that1.OutputActions[i]) {
			return false
		}
	}
	return true
}
func (this *PhysicalProbe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dynamictracingpb.PhysicalProbe{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.TracePoint != nil {
		s = append(s, "TracePoint: "+fmt.Sprintf("%#v", this.TracePoint)+",\n")
	}
	if this.Structs != nil {
		s = append(s, "Structs: "+fmt.Sprintf("%#v", this.Structs)+",\n")
	}
	if this.Vars != nil {
		s = append(s, "Vars: "+fmt.Sprintf("%#v", this.Vars)+",\n")
	}
	if this.StashMapActions != nil {
		s = append(s, "StashMapActions: "+fmt.Sprintf("%#v", this.StashMapActions)+",\n")
	}
	if this.OutputActions != nil {
		s = append(s, "OutputActions: "+fmt.Sprintf("%#v", this.OutputActions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPhysicalIr(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PhysicalProbe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicalProbe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhysicalProbe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputActions) > 0 {
		for iNdEx := len(m.OutputActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutputActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPhysicalIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.StashMapActions) > 0 {
		for iNdEx := len(m.StashMapActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StashMapActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPhysicalIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Vars) > 0 {
		for iNdEx := len(m.Vars) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vars[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPhysicalIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Structs) > 0 {
		for iNdEx := len(m.Structs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Structs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPhysicalIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TracePoint != nil {
		{
			size, err := m.TracePoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPhysicalIr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintPhysicalIr(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhysicalIr(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhysicalIr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PhysicalProbe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPhysicalIr(uint64(m.Type))
	}
	if m.TracePoint != nil {
		l = m.TracePoint.Size()
		n += 1 + l + sovPhysicalIr(uint64(l))
	}
	if len(m.Structs) > 0 {
		for _, e := range m.Structs {
			l = e.Size()
			n += 1 + l + sovPhysicalIr(uint64(l))
		}
	}
	if len(m.Vars) > 0 {
		for _, e := range m.Vars {
			l = e.Size()
			n += 1 + l + sovPhysicalIr(uint64(l))
		}
	}
	if len(m.StashMapActions) > 0 {
		for _, e := range m.StashMapActions {
			l = e.Size()
			n += 1 + l + sovPhysicalIr(uint64(l))
		}
	}
	if len(m.OutputActions) > 0 {
		for _, e := range m.OutputActions {
			l = e.Size()
			n += 1 + l + sovPhysicalIr(uint64(l))
		}
	}
	return n
}

func sovPhysicalIr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhysicalIr(x uint64) (n int) {
	return sovPhysicalIr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PhysicalProbe) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStructs := "[]*Struct{"
	for _, f := range this.Structs {
		repeatedStringForStructs += strings.Replace(fmt.Sprintf("%v", f), "Struct", "proto1.Struct", 1) + ","
	}
	repeatedStringForStructs += "}"
	repeatedStringForVars := "[]*Variable{"
	for _, f := range this.Vars {
		repeatedStringForVars += strings.Replace(fmt.Sprintf("%v", f), "Variable", "proto1.Variable", 1) + ","
	}
	repeatedStringForVars += "}"
	repeatedStringForStashMapActions := "[]*StashMapAction{"
	for _, f := range this.StashMapActions {
		repeatedStringForStashMapActions += strings.Replace(fmt.Sprintf("%v", f), "StashMapAction", "proto1.StashMapAction", 1) + ","
	}
	repeatedStringForStashMapActions += "}"
	repeatedStringForOutputActions := "[]*OutputAction{"
	for _, f := range this.OutputActions {
		repeatedStringForOutputActions += strings.Replace(fmt.Sprintf("%v", f), "OutputAction", "proto1.OutputAction", 1) + ","
	}
	repeatedStringForOutputActions += "}"
	s := strings.Join([]string{`&PhysicalProbe{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`TracePoint:` + strings.Replace(fmt.Sprintf("%v", this.TracePoint), "TracePoint", "proto1.TracePoint", 1) + `,`,
		`Structs:` + repeatedStringForStructs + `,`,
		`Vars:` + repeatedStringForVars + `,`,
		`StashMapActions:` + repeatedStringForStashMapActions + `,`,
		`OutputActions:` + repeatedStringForOutputActions + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPhysicalIr(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PhysicalProbe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhysicalIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicalProbe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicalProbe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= proto1.ProbeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracePoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TracePoint == nil {
				m.TracePoint = &proto1.TracePoint{}
			}
			if err := m.TracePoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Structs = append(m.Structs, &proto1.Struct{})
			if err := m.Structs[len(m.Structs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vars = append(m.Vars, &proto1.Variable{})
			if err := m.Vars[len(m.Vars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StashMapActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StashMapActions = append(m.StashMapActions, &proto1.StashMapAction{})
			if err := m.StashMapActions[len(m.StashMapActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputActions = append(m.OutputActions, &proto1.OutputAction{})
			if err := m.OutputActions[len(m.OutputActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhysicalIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPhysicalIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhysicalIr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhysicalIr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhysicalIr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhysicalIr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhysicalIr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhysicalIr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhysicalIr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhysicalIr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhysicalIr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhysicalIr = fmt.Errorf("proto: unexpected end of group")
)
