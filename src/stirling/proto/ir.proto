syntax = "proto3";

package pl.stirling.dynamictracingpb;

option go_package = "dynamictracingpb";

enum BPFHelper {
  GOID = 0;
  TGID = 1;
  TGID_PID = 2;
}

enum ScalarType {
  INT32 = 0;
  INT64 = 1;
  DOUBLE = 2;
  // Same as char pointer.
  STRING = 3;
  VOID_POINTER = 4;
}

// Wraps an oneof field which can be either scalar or struct.
message VariableType {
  oneof type_oneof {
    ScalarType scalar = 2;
    string struct_type = 3;
  }
}

// Describe a BPF map.
// Corresponds to px.Map().
message Map {
  string name = 1;

  VariableType key_type = 2; // Exclusive to physical IR.
  VariableType value_type = 3; // Exclusive to physical IR.
}

// Describes a perf buffer to hold output data from BPF.
// Corresponds to px.Output().
message Output {
  string name = 1;

  VariableType type = 2;  // Exclusive to physical IR.
}

// Corresponds to inserting value(s) with key to a map.
// Multiple values are grouped together.
message MapStashAction {
  string map_name = 1;

  // The builtin to generate the key value.
  BPFHelper builtin = 2;

  // The name of the variable to be inserted into this map.
  string variable_name = 3;
}

message OutputAction {
  // The name of the output sink.
  string output_name = 1;

  // The IDs of the values to be submitted to output sink specified by the name.
  repeated string value_ids = 2;
}

message Argument {
  // Used to reference to this argument, and as the name of the column to hold the values of this
  // argument when this is exported to a table.
  string id = 1;

  // An expression that accesses a subfield of this argument.
  // For example, "foo" refers to an argument named "foo".
  // And "foo.bar" refers to the "bar" field of argument named "foo".
  //
  // NOTE: This should only be a accessor expression started with the name of an argument.
  string expr = 2;
}

message ReturnValue {
  // Used to reference to this return value, and as the name of the column to hold the values of
  // this argument when this is exported to a table.
  string id = 1;

  // The index to this return value. This is only meaningful for languages that support multiple
  // return values, like Go.
  uint32 index = 2;
}

message FunctionLatency {
  string id = 1;
}

// Describes where to attach a probe.
message TracePoint {
  string binary_path = 1;
  string function_symbol = 2;
}

enum ProbeType {
  // Only for logical IR.
  LOGICAL = 0;

  // Intermediate and physical IR uses this to specify a BPF entry probe.
  ENTRY = 1;
  // Intermediate and physical IR uses this to specify a BPF return probe.
  RETURN = 2;
}

// Corresponds to a logical probe.
message Probe {
  // Where to attach this probe.
  TracePoint trace_point = 1;

  ProbeType type = 2;

  // Input arguments of a function.
  repeated Argument args = 4;

  // Return values of a function.
  repeated ReturnValue ret_vals = 5;

  // Latency of a function.
  FunctionLatency function_latency = 6;

  // Inserts key and value into a map.
  //
  // The variable to be inserted into the map must be one of the above args, ret_vals,
  // and function_latency.
  repeated MapStashAction stash_map_actions = 7;

  // Writes a value to perf buffer.
  repeated OutputAction output_actions = 8;
}
