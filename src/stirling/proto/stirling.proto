syntax = "proto3";

package pl.stirling.stirlingpb;

option go_package = "stirlingpb";

import "src/shared/types/typespb/types.proto";

// Element stores a datum belonging to an InfoClass. For example,
// number_of_hits, number_of_misses, buffered, free_bytes
// in a file_system_cache would be elements in an
// InfoClass file_system_cache.
message Element {
  // name refers to the name of the Element such as user_percentage (Element)
  // for cpu usage (InfoClass).
  string name = 1;
  // The description of the column.
  string desc = 2;
  types.DataType type = 3;
  types.PatternType ptype = 4;
  types.SemanticType stype = 5;
  // If the type is INT64, and ptype is GENERAL_ENUM,
  // then this map can convert values to human readable strings.
  map<int64, string> decoder = 6;
}

message TableSchema {
  string name = 1;
  string desc = 5;
  repeated Element elements = 2;
  bool tabletized = 3;
  uint64 tabletization_key = 4;
}

enum SourceType {
  STATIC = 0;
  DYNAMIC = 1;
}

// InfoClass stores a set of Elements that share common timestamps (i.e., they are
// typically collected together). For example, cpu_usage which could comprise of
// Elements such as user%, system%, io%, that are collected together in the same
// BPF program.
message InfoClass {
  SourceType type = 1;
  // Unique identifier of the info class; used for Stirling to PEM communications.
  // This id is assigned by the data collector's config block when creating a Publish message.
  uint64 id = 2;
  TableSchema schema = 3;
  bool subscribed = 4;
  uint32 sampling_period_millis = 5;
  uint32 push_period_millis = 6;
}

// Publish message contains information on
// all the InfoClasses available
// to the Data Collector. Data Collector sends this
// message to an Agent so that an Agent can know what
// data is being collected.
message Publish {
  repeated InfoClass published_info_classes = 1;
}

// Subscribe message is sent by an agent in response to
// a Publish message from the Data Collector,
// An agent updates the ElementState in each Element of an
// InfoClass so that the Data Collector is aware of
// the data that the Agent wants.
message Subscribe {
  repeated InfoClass subscribed_info_classes = 1;
}
