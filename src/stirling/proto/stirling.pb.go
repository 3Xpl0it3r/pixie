// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/stirling/proto/stirling.proto

package stirlingpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	proto1 "pixielabs.ai/pixielabs/src/shared/types/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Element struct {
	Name    string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    proto1.DataType    `protobuf:"varint,2,opt,name=type,proto3,enum=pl.types.DataType" json:"type,omitempty"`
	Ptype   proto1.PatternType `protobuf:"varint,3,opt,name=ptype,proto3,enum=pl.types.PatternType" json:"ptype,omitempty"`
	Desc    string             `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Decoder map[int64]string   `protobuf:"bytes,5,rep,name=decoder,proto3" json:"decoder,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Element) Reset()      { *m = Element{} }
func (*Element) ProtoMessage() {}
func (*Element) Descriptor() ([]byte, []int) {
	return fileDescriptor_76a03eaf7e6ff887, []int{0}
}
func (m *Element) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Element) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Element.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Element) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Element.Merge(m, src)
}
func (m *Element) XXX_Size() int {
	return m.Size()
}
func (m *Element) XXX_DiscardUnknown() {
	xxx_messageInfo_Element.DiscardUnknown(m)
}

var xxx_messageInfo_Element proto.InternalMessageInfo

func (m *Element) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Element) GetType() proto1.DataType {
	if m != nil {
		return m.Type
	}
	return proto1.DATA_TYPE_UNKNOWN
}

func (m *Element) GetPtype() proto1.PatternType {
	if m != nil {
		return m.Ptype
	}
	return proto1.UNSPECIFIED
}

func (m *Element) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Element) GetDecoder() map[int64]string {
	if m != nil {
		return m.Decoder
	}
	return nil
}

type TableSchema struct {
	Name             string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Elements         []*Element `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
	Tabletized       bool       `protobuf:"varint,3,opt,name=tabletized,proto3" json:"tabletized,omitempty"`
	TabletizationKey uint64     `protobuf:"varint,4,opt,name=tabletization_key,json=tabletizationKey,proto3" json:"tabletization_key,omitempty"`
}

func (m *TableSchema) Reset()      { *m = TableSchema{} }
func (*TableSchema) ProtoMessage() {}
func (*TableSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_76a03eaf7e6ff887, []int{1}
}
func (m *TableSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSchema.Merge(m, src)
}
func (m *TableSchema) XXX_Size() int {
	return m.Size()
}
func (m *TableSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSchema.DiscardUnknown(m)
}

var xxx_messageInfo_TableSchema proto.InternalMessageInfo

func (m *TableSchema) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TableSchema) GetElements() []*Element {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *TableSchema) GetTabletized() bool {
	if m != nil {
		return m.Tabletized
	}
	return false
}

func (m *TableSchema) GetTabletizationKey() uint64 {
	if m != nil {
		return m.TabletizationKey
	}
	return 0
}

type InfoClass struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   uint64       `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Schema               *TableSchema `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Subscribed           bool         `protobuf:"varint,4,opt,name=subscribed,proto3" json:"subscribed,omitempty"`
	SamplingPeriodMillis uint32       `protobuf:"varint,5,opt,name=sampling_period_millis,json=samplingPeriodMillis,proto3" json:"sampling_period_millis,omitempty"`
	PushPeriodMillis     uint32       `protobuf:"varint,6,opt,name=push_period_millis,json=pushPeriodMillis,proto3" json:"push_period_millis,omitempty"`
}

func (m *InfoClass) Reset()      { *m = InfoClass{} }
func (*InfoClass) ProtoMessage() {}
func (*InfoClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_76a03eaf7e6ff887, []int{2}
}
func (m *InfoClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoClass.Merge(m, src)
}
func (m *InfoClass) XXX_Size() int {
	return m.Size()
}
func (m *InfoClass) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoClass.DiscardUnknown(m)
}

var xxx_messageInfo_InfoClass proto.InternalMessageInfo

func (m *InfoClass) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InfoClass) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *InfoClass) GetSchema() *TableSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *InfoClass) GetSubscribed() bool {
	if m != nil {
		return m.Subscribed
	}
	return false
}

func (m *InfoClass) GetSamplingPeriodMillis() uint32 {
	if m != nil {
		return m.SamplingPeriodMillis
	}
	return 0
}

func (m *InfoClass) GetPushPeriodMillis() uint32 {
	if m != nil {
		return m.PushPeriodMillis
	}
	return 0
}

type Publish struct {
	PublishedInfoClasses []*InfoClass `protobuf:"bytes,1,rep,name=published_info_classes,json=publishedInfoClasses,proto3" json:"published_info_classes,omitempty"`
}

func (m *Publish) Reset()      { *m = Publish{} }
func (*Publish) ProtoMessage() {}
func (*Publish) Descriptor() ([]byte, []int) {
	return fileDescriptor_76a03eaf7e6ff887, []int{3}
}
func (m *Publish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Publish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Publish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Publish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Publish.Merge(m, src)
}
func (m *Publish) XXX_Size() int {
	return m.Size()
}
func (m *Publish) XXX_DiscardUnknown() {
	xxx_messageInfo_Publish.DiscardUnknown(m)
}

var xxx_messageInfo_Publish proto.InternalMessageInfo

func (m *Publish) GetPublishedInfoClasses() []*InfoClass {
	if m != nil {
		return m.PublishedInfoClasses
	}
	return nil
}

type Subscribe struct {
	SubscribedInfoClasses []*InfoClass `protobuf:"bytes,1,rep,name=subscribed_info_classes,json=subscribedInfoClasses,proto3" json:"subscribed_info_classes,omitempty"`
}

func (m *Subscribe) Reset()      { *m = Subscribe{} }
func (*Subscribe) ProtoMessage() {}
func (*Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_76a03eaf7e6ff887, []int{4}
}
func (m *Subscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscribe.Merge(m, src)
}
func (m *Subscribe) XXX_Size() int {
	return m.Size()
}
func (m *Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Subscribe proto.InternalMessageInfo

func (m *Subscribe) GetSubscribedInfoClasses() []*InfoClass {
	if m != nil {
		return m.SubscribedInfoClasses
	}
	return nil
}

func init() {
	proto.RegisterType((*Element)(nil), "pl.stirling.stirlingpb.Element")
	proto.RegisterMapType((map[int64]string)(nil), "pl.stirling.stirlingpb.Element.DecoderEntry")
	proto.RegisterType((*TableSchema)(nil), "pl.stirling.stirlingpb.TableSchema")
	proto.RegisterType((*InfoClass)(nil), "pl.stirling.stirlingpb.InfoClass")
	proto.RegisterType((*Publish)(nil), "pl.stirling.stirlingpb.Publish")
	proto.RegisterType((*Subscribe)(nil), "pl.stirling.stirlingpb.Subscribe")
}

func init() { proto.RegisterFile("src/stirling/proto/stirling.proto", fileDescriptor_76a03eaf7e6ff887) }

var fileDescriptor_76a03eaf7e6ff887 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4f, 0x8b, 0xd3, 0x5e,
	0x14, 0xcd, 0x4b, 0xff, 0xdf, 0xfe, 0x7e, 0x43, 0x7d, 0x74, 0x6a, 0x98, 0xc5, 0xb3, 0x13, 0x41,
	0x0a, 0x33, 0xa4, 0x50, 0x5d, 0xc8, 0xcc, 0x46, 0x74, 0x46, 0x10, 0x11, 0xca, 0x9b, 0x01, 0xd1,
	0x4d, 0xc9, 0x9f, 0x57, 0xfb, 0x30, 0x4d, 0x42, 0x5e, 0x2a, 0xd4, 0x95, 0x6b, 0x57, 0x7e, 0x0c,
	0xc1, 0x2f, 0xe2, 0xb2, 0xcb, 0x59, 0xda, 0x74, 0xe3, 0xb2, 0x1f, 0x41, 0xde, 0x4b, 0x9b, 0x46,
	0xe9, 0x20, 0xb8, 0xbb, 0xef, 0x9e, 0x73, 0xee, 0x3d, 0xe7, 0x86, 0xc0, 0xb1, 0x88, 0xdd, 0xbe,
	0x48, 0x78, 0xec, 0xf3, 0xe0, 0x5d, 0x3f, 0x8a, 0xc3, 0x24, 0xcc, 0x9f, 0x96, 0x7a, 0xe2, 0x4e,
	0xe4, 0x5b, 0x79, 0x6b, 0x5b, 0x44, 0xce, 0x91, 0xa9, 0xa4, 0x13, 0x3b, 0x66, 0x5e, 0x3f, 0x99,
	0x47, 0x4c, 0x6c, 0xe4, 0xaa, 0xce, 0xb4, 0xe6, 0x67, 0x1d, 0x6a, 0x97, 0x3e, 0x9b, 0xb2, 0x20,
	0xc1, 0x18, 0xca, 0x81, 0x3d, 0x65, 0x06, 0xea, 0xa2, 0x5e, 0x83, 0xaa, 0x1a, 0x3f, 0x80, 0xb2,
	0xa4, 0x1b, 0x7a, 0x17, 0xf5, 0x0e, 0x06, 0xd8, 0x8a, 0x7c, 0x2b, 0x93, 0x5f, 0xd8, 0x89, 0x7d,
	0x3d, 0x8f, 0x18, 0x55, 0x38, 0x3e, 0x81, 0x4a, 0xa4, 0x88, 0x25, 0x45, 0x3c, 0xdc, 0x11, 0x87,
	0x76, 0x92, 0xb0, 0x38, 0x50, 0xdc, 0x8c, 0x23, 0x17, 0x79, 0x4c, 0xb8, 0x46, 0x39, 0x5b, 0x24,
	0x6b, 0xfc, 0x1c, 0x6a, 0x1e, 0x73, 0x43, 0x8f, 0xc5, 0x46, 0xa5, 0x5b, 0xea, 0x35, 0x07, 0xa7,
	0xd6, 0xfe, 0x58, 0xd6, 0xc6, 0xae, 0x75, 0x91, 0xd1, 0x2f, 0x83, 0x24, 0x9e, 0xd3, 0xad, 0xf8,
	0xe8, 0x0c, 0xfe, 0x2b, 0x02, 0xb8, 0x05, 0xa5, 0xf7, 0x6c, 0xae, 0x32, 0x95, 0xa8, 0x2c, 0x71,
	0x1b, 0x2a, 0x1f, 0x6c, 0x7f, 0x96, 0x65, 0x6a, 0xd0, 0xec, 0x71, 0xa6, 0x3f, 0x46, 0xe6, 0x37,
	0x04, 0xcd, 0x6b, 0xdb, 0xf1, 0xd9, 0x95, 0x3b, 0x61, 0x53, 0x7b, 0xef, 0x41, 0xce, 0xa1, 0xce,
	0x32, 0x03, 0xc2, 0xd0, 0x95, 0xd1, 0x7b, 0x7f, 0x31, 0x4a, 0x73, 0x01, 0x26, 0x00, 0x89, 0x9c,
	0x9f, 0xf0, 0x8f, 0xcc, 0x53, 0xa7, 0xaa, 0xd3, 0x42, 0x07, 0x9f, 0xc0, 0x9d, 0xed, 0xcb, 0x4e,
	0x78, 0x18, 0x8c, 0xa4, 0x75, 0x79, 0xa5, 0x32, 0x6d, 0xfd, 0x06, 0xbc, 0x64, 0x73, 0x73, 0x8d,
	0xa0, 0xf1, 0x22, 0x18, 0x87, 0xcf, 0x7c, 0x5b, 0x88, 0xbd, 0x5e, 0x0f, 0x40, 0xe7, 0x9e, 0x8a,
	0x59, 0xa6, 0x3a, 0xf7, 0xf0, 0x39, 0x54, 0x85, 0x4a, 0xa6, 0x56, 0x37, 0x07, 0xf7, 0x6f, 0x73,
	0x5e, 0x38, 0x02, 0xdd, 0x48, 0xa4, 0x77, 0x31, 0x73, 0x84, 0x1b, 0x73, 0x87, 0x79, 0xca, 0x54,
	0x9d, 0x16, 0x3a, 0xf8, 0x11, 0x74, 0x84, 0x3d, 0x8d, 0xe4, 0x84, 0x51, 0xc4, 0x62, 0x1e, 0x7a,
	0xa3, 0x29, 0xf7, 0x7d, 0x2e, 0x8c, 0x4a, 0x17, 0xf5, 0xfe, 0xa7, 0xed, 0x2d, 0x3a, 0x54, 0xe0,
	0x2b, 0x85, 0xe1, 0x53, 0xc0, 0xd1, 0x4c, 0x4c, 0xfe, 0x50, 0x54, 0x95, 0xa2, 0x25, 0x91, 0x22,
	0xdb, 0x74, 0xa0, 0x36, 0x9c, 0x39, 0x3e, 0x17, 0x13, 0xfc, 0x1a, 0x3a, 0x51, 0x56, 0x32, 0x6f,
	0xc4, 0x83, 0x71, 0x38, 0x72, 0xe5, 0x1d, 0x98, 0x30, 0x90, 0xfa, 0x2a, 0xc7, 0xb7, 0x65, 0xcb,
	0x4f, 0x46, 0xdb, 0xf9, 0x80, 0xbc, 0xc7, 0x84, 0x39, 0x86, 0xc6, 0xd5, 0x36, 0x15, 0x7e, 0x03,
	0x77, 0x77, 0x11, 0xff, 0x71, 0xcd, 0xe1, 0x6e, 0x42, 0x61, 0xcf, 0xd3, 0x27, 0x8b, 0x25, 0xd1,
	0x6e, 0x96, 0x44, 0x5b, 0x2f, 0x09, 0xfa, 0x94, 0x12, 0xf4, 0x35, 0x25, 0xe8, 0x7b, 0x4a, 0xd0,
	0x22, 0x25, 0xe8, 0x47, 0x4a, 0xd0, 0xcf, 0x94, 0x68, 0xeb, 0x94, 0xa0, 0x2f, 0x2b, 0xa2, 0x2d,
	0x56, 0x44, 0xbb, 0x59, 0x11, 0xed, 0x2d, 0xec, 0x56, 0x38, 0x55, 0xf5, 0x0b, 0x3f, 0xfc, 0x15,
	0x00, 0x00, 0xff, 0xff, 0xe8, 0x82, 0xc3, 0x0e, 0x23, 0x04, 0x00, 0x00,
}

func (this *Element) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Element)
	if !ok {
		that2, ok := that.(Element)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Ptype != that1.Ptype {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if len(this.Decoder) != len(that1.Decoder) {
		return false
	}
	for i := range this.Decoder {
		if this.Decoder[i] != that1.Decoder[i] {
			return false
		}
	}
	return true
}
func (this *TableSchema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TableSchema)
	if !ok {
		that2, ok := that.(TableSchema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Elements) != len(that1.Elements) {
		return false
	}
	for i := range this.Elements {
		if !this.Elements[i].Equal(that1.Elements[i]) {
			return false
		}
	}
	if this.Tabletized != that1.Tabletized {
		return false
	}
	if this.TabletizationKey != that1.TabletizationKey {
		return false
	}
	return true
}
func (this *InfoClass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InfoClass)
	if !ok {
		that2, ok := that.(InfoClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Schema.Equal(that1.Schema) {
		return false
	}
	if this.Subscribed != that1.Subscribed {
		return false
	}
	if this.SamplingPeriodMillis != that1.SamplingPeriodMillis {
		return false
	}
	if this.PushPeriodMillis != that1.PushPeriodMillis {
		return false
	}
	return true
}
func (this *Publish) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Publish)
	if !ok {
		that2, ok := that.(Publish)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PublishedInfoClasses) != len(that1.PublishedInfoClasses) {
		return false
	}
	for i := range this.PublishedInfoClasses {
		if !this.PublishedInfoClasses[i].Equal(that1.PublishedInfoClasses[i]) {
			return false
		}
	}
	return true
}
func (this *Subscribe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subscribe)
	if !ok {
		that2, ok := that.(Subscribe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SubscribedInfoClasses) != len(that1.SubscribedInfoClasses) {
		return false
	}
	for i := range this.SubscribedInfoClasses {
		if !this.SubscribedInfoClasses[i].Equal(that1.SubscribedInfoClasses[i]) {
			return false
		}
	}
	return true
}
func (this *Element) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&stirlingpb.Element{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Ptype: "+fmt.Sprintf("%#v", this.Ptype)+",\n")
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	keysForDecoder := make([]int64, 0, len(this.Decoder))
	for k, _ := range this.Decoder {
		keysForDecoder = append(keysForDecoder, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForDecoder)
	mapStringForDecoder := "map[int64]string{"
	for _, k := range keysForDecoder {
		mapStringForDecoder += fmt.Sprintf("%#v: %#v,", k, this.Decoder[k])
	}
	mapStringForDecoder += "}"
	if this.Decoder != nil {
		s = append(s, "Decoder: "+mapStringForDecoder+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TableSchema) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&stirlingpb.TableSchema{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Elements != nil {
		s = append(s, "Elements: "+fmt.Sprintf("%#v", this.Elements)+",\n")
	}
	s = append(s, "Tabletized: "+fmt.Sprintf("%#v", this.Tabletized)+",\n")
	s = append(s, "TabletizationKey: "+fmt.Sprintf("%#v", this.TabletizationKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InfoClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&stirlingpb.InfoClass{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Schema != nil {
		s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	}
	s = append(s, "Subscribed: "+fmt.Sprintf("%#v", this.Subscribed)+",\n")
	s = append(s, "SamplingPeriodMillis: "+fmt.Sprintf("%#v", this.SamplingPeriodMillis)+",\n")
	s = append(s, "PushPeriodMillis: "+fmt.Sprintf("%#v", this.PushPeriodMillis)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Publish) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&stirlingpb.Publish{")
	if this.PublishedInfoClasses != nil {
		s = append(s, "PublishedInfoClasses: "+fmt.Sprintf("%#v", this.PublishedInfoClasses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Subscribe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&stirlingpb.Subscribe{")
	if this.SubscribedInfoClasses != nil {
		s = append(s, "SubscribedInfoClasses: "+fmt.Sprintf("%#v", this.SubscribedInfoClasses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStirling(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Element) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Element) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Element) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Decoder) > 0 {
		for k := range m.Decoder {
			v := m.Decoder[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintStirling(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintStirling(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintStirling(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintStirling(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if m.Ptype != 0 {
		i = encodeVarintStirling(dAtA, i, uint64(m.Ptype))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintStirling(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStirling(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TableSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TabletizationKey != 0 {
		i = encodeVarintStirling(dAtA, i, uint64(m.TabletizationKey))
		i--
		dAtA[i] = 0x20
	}
	if m.Tabletized {
		i--
		if m.Tabletized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Elements) > 0 {
		for iNdEx := len(m.Elements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Elements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStirling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStirling(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfoClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PushPeriodMillis != 0 {
		i = encodeVarintStirling(dAtA, i, uint64(m.PushPeriodMillis))
		i--
		dAtA[i] = 0x30
	}
	if m.SamplingPeriodMillis != 0 {
		i = encodeVarintStirling(dAtA, i, uint64(m.SamplingPeriodMillis))
		i--
		dAtA[i] = 0x28
	}
	if m.Subscribed {
		i--
		if m.Subscribed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStirling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintStirling(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStirling(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Publish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Publish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Publish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublishedInfoClasses) > 0 {
		for iNdEx := len(m.PublishedInfoClasses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PublishedInfoClasses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStirling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Subscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subscribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscribedInfoClasses) > 0 {
		for iNdEx := len(m.SubscribedInfoClasses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubscribedInfoClasses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStirling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStirling(dAtA []byte, offset int, v uint64) int {
	offset -= sovStirling(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Element) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStirling(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovStirling(uint64(m.Type))
	}
	if m.Ptype != 0 {
		n += 1 + sovStirling(uint64(m.Ptype))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovStirling(uint64(l))
	}
	if len(m.Decoder) > 0 {
		for k, v := range m.Decoder {
			_ = k
			_ = v
			mapEntrySize := 1 + sovStirling(uint64(k)) + 1 + len(v) + sovStirling(uint64(len(v)))
			n += mapEntrySize + 1 + sovStirling(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TableSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStirling(uint64(l))
	}
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovStirling(uint64(l))
		}
	}
	if m.Tabletized {
		n += 2
	}
	if m.TabletizationKey != 0 {
		n += 1 + sovStirling(uint64(m.TabletizationKey))
	}
	return n
}

func (m *InfoClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStirling(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovStirling(uint64(m.Id))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovStirling(uint64(l))
	}
	if m.Subscribed {
		n += 2
	}
	if m.SamplingPeriodMillis != 0 {
		n += 1 + sovStirling(uint64(m.SamplingPeriodMillis))
	}
	if m.PushPeriodMillis != 0 {
		n += 1 + sovStirling(uint64(m.PushPeriodMillis))
	}
	return n
}

func (m *Publish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublishedInfoClasses) > 0 {
		for _, e := range m.PublishedInfoClasses {
			l = e.Size()
			n += 1 + l + sovStirling(uint64(l))
		}
	}
	return n
}

func (m *Subscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubscribedInfoClasses) > 0 {
		for _, e := range m.SubscribedInfoClasses {
			l = e.Size()
			n += 1 + l + sovStirling(uint64(l))
		}
	}
	return n
}

func sovStirling(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStirling(x uint64) (n int) {
	return sovStirling(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Element) String() string {
	if this == nil {
		return "nil"
	}
	keysForDecoder := make([]int64, 0, len(this.Decoder))
	for k, _ := range this.Decoder {
		keysForDecoder = append(keysForDecoder, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForDecoder)
	mapStringForDecoder := "map[int64]string{"
	for _, k := range keysForDecoder {
		mapStringForDecoder += fmt.Sprintf("%v: %v,", k, this.Decoder[k])
	}
	mapStringForDecoder += "}"
	s := strings.Join([]string{`&Element{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Ptype:` + fmt.Sprintf("%v", this.Ptype) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Decoder:` + mapStringForDecoder + `,`,
		`}`,
	}, "")
	return s
}
func (this *TableSchema) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForElements := "[]*Element{"
	for _, f := range this.Elements {
		repeatedStringForElements += strings.Replace(f.String(), "Element", "Element", 1) + ","
	}
	repeatedStringForElements += "}"
	s := strings.Join([]string{`&TableSchema{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Elements:` + repeatedStringForElements + `,`,
		`Tabletized:` + fmt.Sprintf("%v", this.Tabletized) + `,`,
		`TabletizationKey:` + fmt.Sprintf("%v", this.TabletizationKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InfoClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InfoClass{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Schema:` + strings.Replace(this.Schema.String(), "TableSchema", "TableSchema", 1) + `,`,
		`Subscribed:` + fmt.Sprintf("%v", this.Subscribed) + `,`,
		`SamplingPeriodMillis:` + fmt.Sprintf("%v", this.SamplingPeriodMillis) + `,`,
		`PushPeriodMillis:` + fmt.Sprintf("%v", this.PushPeriodMillis) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Publish) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPublishedInfoClasses := "[]*InfoClass{"
	for _, f := range this.PublishedInfoClasses {
		repeatedStringForPublishedInfoClasses += strings.Replace(f.String(), "InfoClass", "InfoClass", 1) + ","
	}
	repeatedStringForPublishedInfoClasses += "}"
	s := strings.Join([]string{`&Publish{`,
		`PublishedInfoClasses:` + repeatedStringForPublishedInfoClasses + `,`,
		`}`,
	}, "")
	return s
}
func (this *Subscribe) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubscribedInfoClasses := "[]*InfoClass{"
	for _, f := range this.SubscribedInfoClasses {
		repeatedStringForSubscribedInfoClasses += strings.Replace(f.String(), "InfoClass", "InfoClass", 1) + ","
	}
	repeatedStringForSubscribedInfoClasses += "}"
	s := strings.Join([]string{`&Subscribe{`,
		`SubscribedInfoClasses:` + repeatedStringForSubscribedInfoClasses + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStirling(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Element) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStirling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Element: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Element: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStirling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStirling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= proto1.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= proto1.PatternType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStirling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStirling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decoder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStirling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStirling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Decoder == nil {
				m.Decoder = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStirling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStirling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStirling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthStirling
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthStirling
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStirling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStirling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Decoder[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStirling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStirling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStirling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStirling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStirling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStirling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &Element{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tabletized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tabletized = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabletizationKey", wireType)
			}
			m.TabletizationKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabletizationKey |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStirling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStirling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStirling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStirling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStirling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStirling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &TableSchema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscribed = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplingPeriodMillis", wireType)
			}
			m.SamplingPeriodMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SamplingPeriodMillis |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushPeriodMillis", wireType)
			}
			m.PushPeriodMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushPeriodMillis |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStirling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Publish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStirling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Publish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Publish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedInfoClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStirling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStirling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublishedInfoClasses = append(m.PublishedInfoClasses, &InfoClass{})
			if err := m.PublishedInfoClasses[len(m.PublishedInfoClasses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStirling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStirling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribedInfoClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStirling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStirling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscribedInfoClasses = append(m.SubscribedInfoClasses, &InfoClass{})
			if err := m.SubscribedInfoClasses[len(m.SubscribedInfoClasses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStirling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStirling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStirling(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStirling
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStirling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStirling
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStirling
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStirling
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStirling        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStirling          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStirling = fmt.Errorf("proto: unexpected end of group")
)
