// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/stirling/proto/sock_event.proto

package sockeventpb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TrafficClass struct {
	Protocol uint32 `protobuf:"varint,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Role     uint32 `protobuf:"varint,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (m *TrafficClass) Reset()      { *m = TrafficClass{} }
func (*TrafficClass) ProtoMessage() {}
func (*TrafficClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e368d99c258dae, []int{0}
}
func (m *TrafficClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficClass.Merge(m, src)
}
func (m *TrafficClass) XXX_Size() int {
	return m.Size()
}
func (m *TrafficClass) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficClass.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficClass proto.InternalMessageInfo

func (m *TrafficClass) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *TrafficClass) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

type ConnID struct {
	Pid         uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	StartTimeNs uint64 `protobuf:"varint,2,opt,name=start_time_ns,json=startTimeNs,proto3" json:"start_time_ns,omitempty"`
	Fd          uint32 `protobuf:"varint,3,opt,name=fd,proto3" json:"fd,omitempty"`
	Generation  uint32 `protobuf:"varint,4,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (m *ConnID) Reset()      { *m = ConnID{} }
func (*ConnID) ProtoMessage() {}
func (*ConnID) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e368d99c258dae, []int{1}
}
func (m *ConnID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnID.Merge(m, src)
}
func (m *ConnID) XXX_Size() int {
	return m.Size()
}
func (m *ConnID) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnID.DiscardUnknown(m)
}

var xxx_messageInfo_ConnID proto.InternalMessageInfo

func (m *ConnID) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ConnID) GetStartTimeNs() uint64 {
	if m != nil {
		return m.StartTimeNs
	}
	return 0
}

func (m *ConnID) GetFd() uint32 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *ConnID) GetGeneration() uint32 {
	if m != nil {
		return m.Generation
	}
	return 0
}

type SocketDataEvent struct {
	Attr *SocketDataEvent_Attribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	Msg  []byte                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SocketDataEvent) Reset()      { *m = SocketDataEvent{} }
func (*SocketDataEvent) ProtoMessage() {}
func (*SocketDataEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e368d99c258dae, []int{2}
}
func (m *SocketDataEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocketDataEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocketDataEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocketDataEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocketDataEvent.Merge(m, src)
}
func (m *SocketDataEvent) XXX_Size() int {
	return m.Size()
}
func (m *SocketDataEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SocketDataEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SocketDataEvent proto.InternalMessageInfo

func (m *SocketDataEvent) GetAttr() *SocketDataEvent_Attribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *SocketDataEvent) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type SocketDataEvent_Attribute struct {
	TimestampNs  uint64        `protobuf:"varint,1,opt,name=timestamp_ns,json=timestampNs,proto3" json:"timestamp_ns,omitempty"`
	ConnId       *ConnID       `protobuf:"bytes,2,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
	TrafficClass *TrafficClass `protobuf:"bytes,3,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	Direction    uint32        `protobuf:"varint,4,opt,name=direction,proto3" json:"direction,omitempty"`
	SeqNum       uint64        `protobuf:"varint,5,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	MsgSize      uint32        `protobuf:"varint,6,opt,name=msg_size,json=msgSize,proto3" json:"msg_size,omitempty"`
}

func (m *SocketDataEvent_Attribute) Reset()      { *m = SocketDataEvent_Attribute{} }
func (*SocketDataEvent_Attribute) ProtoMessage() {}
func (*SocketDataEvent_Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e368d99c258dae, []int{2, 0}
}
func (m *SocketDataEvent_Attribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocketDataEvent_Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocketDataEvent_Attribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocketDataEvent_Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocketDataEvent_Attribute.Merge(m, src)
}
func (m *SocketDataEvent_Attribute) XXX_Size() int {
	return m.Size()
}
func (m *SocketDataEvent_Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_SocketDataEvent_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_SocketDataEvent_Attribute proto.InternalMessageInfo

func (m *SocketDataEvent_Attribute) GetTimestampNs() uint64 {
	if m != nil {
		return m.TimestampNs
	}
	return 0
}

func (m *SocketDataEvent_Attribute) GetConnId() *ConnID {
	if m != nil {
		return m.ConnId
	}
	return nil
}

func (m *SocketDataEvent_Attribute) GetTrafficClass() *TrafficClass {
	if m != nil {
		return m.TrafficClass
	}
	return nil
}

func (m *SocketDataEvent_Attribute) GetDirection() uint32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *SocketDataEvent_Attribute) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *SocketDataEvent_Attribute) GetMsgSize() uint32 {
	if m != nil {
		return m.MsgSize
	}
	return 0
}

func init() {
	proto.RegisterType((*TrafficClass)(nil), "pl.stirling.sockeventpb.TrafficClass")
	proto.RegisterType((*ConnID)(nil), "pl.stirling.sockeventpb.ConnID")
	proto.RegisterType((*SocketDataEvent)(nil), "pl.stirling.sockeventpb.SocketDataEvent")
	proto.RegisterType((*SocketDataEvent_Attribute)(nil), "pl.stirling.sockeventpb.SocketDataEvent.Attribute")
}

func init() {
	proto.RegisterFile("src/stirling/proto/sock_event.proto", fileDescriptor_02e368d99c258dae)
}

var fileDescriptor_02e368d99c258dae = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x6e, 0x70, 0xda, 0xe7, 0x04, 0xd0, 0x2d, 0x35, 0x15, 0x3a, 0x20, 0x08, 0x89,
	0xc9, 0x91, 0xc2, 0xc2, 0x84, 0x54, 0x5a, 0x90, 0xca, 0x90, 0xc1, 0xed, 0xc4, 0x62, 0x39, 0xf6,
	0xc5, 0x3a, 0x61, 0xdf, 0xb9, 0x77, 0x17, 0x86, 0x4e, 0x4c, 0xcc, 0x7c, 0x0c, 0x3e, 0x0a, 0x63,
	0xc6, 0x8e, 0xc4, 0x59, 0x18, 0x33, 0xf0, 0x01, 0xd0, 0xbd, 0x40, 0xb0, 0x2a, 0x65, 0x7b, 0xfe,
	0xbf, 0xf7, 0xb3, 0xdf, 0xff, 0xfd, 0x0d, 0xcf, 0x8d, 0xce, 0xc7, 0xc6, 0x0a, 0x5d, 0x09, 0x59,
	0x8e, 0x1b, 0xad, 0xac, 0x1a, 0x1b, 0x95, 0x7f, 0x4a, 0xf9, 0x67, 0x2e, 0x6d, 0x8c, 0x02, 0x3d,
	0x6e, 0xaa, 0xf8, 0xdf, 0x4c, 0xec, 0xba, 0xd8, 0x6c, 0x66, 0xa3, 0x37, 0x30, 0xb8, 0xd2, 0xd9,
	0x7c, 0x2e, 0xf2, 0xb3, 0x2a, 0x33, 0x86, 0x9e, 0xc0, 0x21, 0x12, 0xb9, 0xaa, 0x22, 0xf2, 0x94,
	0xbc, 0x1c, 0x26, 0xbb, 0x67, 0x4a, 0xa1, 0xa7, 0x55, 0xc5, 0x23, 0x1f, 0x75, 0xac, 0x47, 0x12,
	0x82, 0x33, 0x25, 0xe5, 0xc5, 0x39, 0x7d, 0x08, 0x07, 0x8d, 0x28, 0xfe, 0x42, 0xae, 0xa4, 0x23,
	0x18, 0x1a, 0x9b, 0x69, 0x9b, 0x5a, 0x51, 0xf3, 0x54, 0x1a, 0x04, 0x7b, 0x49, 0x88, 0xe2, 0x95,
	0xa8, 0xf9, 0xd4, 0xd0, 0xfb, 0xe0, 0xcf, 0x8b, 0xe8, 0x00, 0x21, 0x7f, 0x5e, 0x50, 0x06, 0x50,
	0x72, 0xc9, 0x75, 0x66, 0x85, 0x92, 0x51, 0x0f, 0xf5, 0x8e, 0x32, 0xfa, 0xed, 0xc3, 0x83, 0x4b,
	0xb7, 0xbf, 0x3d, 0xcf, 0x6c, 0xf6, 0xce, 0xb9, 0xa0, 0xef, 0xa1, 0x97, 0x59, 0xab, 0xf1, 0xd3,
	0xe1, 0x64, 0x12, 0xef, 0xf1, 0x1a, 0xdf, 0xe1, 0xe2, 0x53, 0x6b, 0xb5, 0x98, 0x2d, 0x2c, 0x4f,
	0x90, 0x77, 0x0e, 0x6a, 0x53, 0xe2, 0x96, 0x83, 0xc4, 0x95, 0x27, 0x5f, 0x7d, 0x38, 0xda, 0x4d,
	0xd1, 0x67, 0x30, 0x70, 0x4e, 0x8c, 0xcd, 0xea, 0xc6, 0xd9, 0x21, 0x5b, 0x3b, 0x3b, 0x6d, 0x6a,
	0xe8, 0x6b, 0xe8, 0xe7, 0x4a, 0xca, 0x54, 0x14, 0xf8, 0x9a, 0x70, 0xf2, 0x64, 0xef, 0x36, 0xdb,
	0xb3, 0x25, 0x81, 0x9b, 0xbf, 0x28, 0xe8, 0x07, 0x18, 0xda, 0x6d, 0x10, 0x69, 0xee, 0x92, 0xc0,
	0x9b, 0x84, 0x93, 0x17, 0x7b, 0xf9, 0x6e, 0x6c, 0xc9, 0xc0, 0x76, 0x43, 0x7c, 0x0c, 0x47, 0x85,
	0xd0, 0x3c, 0xef, 0xdc, 0xf0, 0xbf, 0x40, 0x8f, 0xa1, 0x6f, 0xf8, 0x75, 0x2a, 0x17, 0x75, 0x74,
	0x0f, 0x1d, 0x04, 0x86, 0x5f, 0x4f, 0x17, 0x35, 0x7d, 0x04, 0x87, 0xb5, 0x29, 0x53, 0x23, 0x6e,
	0x78, 0x14, 0x20, 0xd5, 0xaf, 0x4d, 0x79, 0x29, 0x6e, 0xf8, 0xdb, 0xd3, 0xe5, 0x8a, 0x79, 0xb7,
	0x2b, 0xe6, 0x6d, 0x56, 0x8c, 0x7c, 0x69, 0x19, 0xf9, 0xde, 0x32, 0xf2, 0xa3, 0x65, 0x64, 0xd9,
	0x32, 0xf2, 0xb3, 0x65, 0xe4, 0x57, 0xcb, 0xbc, 0x4d, 0xcb, 0xc8, 0xb7, 0x35, 0xf3, 0x96, 0x6b,
	0xe6, 0xdd, 0xae, 0x99, 0xf7, 0x31, 0xec, 0xec, 0x3b, 0x0b, 0xf0, 0x3f, 0x7a, 0xf5, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x95, 0x51, 0x5a, 0xd6, 0xb0, 0x02, 0x00, 0x00,
}

func (this *TrafficClass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficClass)
	if !ok {
		that2, ok := that.(TrafficClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.Role != that1.Role {
		return false
	}
	return true
}
func (this *ConnID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnID)
	if !ok {
		that2, ok := that.(ConnID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pid != that1.Pid {
		return false
	}
	if this.StartTimeNs != that1.StartTimeNs {
		return false
	}
	if this.Fd != that1.Fd {
		return false
	}
	if this.Generation != that1.Generation {
		return false
	}
	return true
}
func (this *SocketDataEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SocketDataEvent)
	if !ok {
		that2, ok := that.(SocketDataEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Attr.Equal(that1.Attr) {
		return false
	}
	if !bytes.Equal(this.Msg, that1.Msg) {
		return false
	}
	return true
}
func (this *SocketDataEvent_Attribute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SocketDataEvent_Attribute)
	if !ok {
		that2, ok := that.(SocketDataEvent_Attribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimestampNs != that1.TimestampNs {
		return false
	}
	if !this.ConnId.Equal(that1.ConnId) {
		return false
	}
	if !this.TrafficClass.Equal(that1.TrafficClass) {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	if this.SeqNum != that1.SeqNum {
		return false
	}
	if this.MsgSize != that1.MsgSize {
		return false
	}
	return true
}
func (this *TrafficClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sockeventpb.TrafficClass{")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConnID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sockeventpb.ConnID{")
	s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	s = append(s, "StartTimeNs: "+fmt.Sprintf("%#v", this.StartTimeNs)+",\n")
	s = append(s, "Fd: "+fmt.Sprintf("%#v", this.Fd)+",\n")
	s = append(s, "Generation: "+fmt.Sprintf("%#v", this.Generation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SocketDataEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sockeventpb.SocketDataEvent{")
	if this.Attr != nil {
		s = append(s, "Attr: "+fmt.Sprintf("%#v", this.Attr)+",\n")
	}
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SocketDataEvent_Attribute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&sockeventpb.SocketDataEvent_Attribute{")
	s = append(s, "TimestampNs: "+fmt.Sprintf("%#v", this.TimestampNs)+",\n")
	if this.ConnId != nil {
		s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	}
	if this.TrafficClass != nil {
		s = append(s, "TrafficClass: "+fmt.Sprintf("%#v", this.TrafficClass)+",\n")
	}
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "SeqNum: "+fmt.Sprintf("%#v", this.SeqNum)+",\n")
	s = append(s, "MsgSize: "+fmt.Sprintf("%#v", this.MsgSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSockEvent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TrafficClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficClass) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Protocol != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.Protocol))
	}
	if m.Role != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.Role))
	}
	return i, nil
}

func (m *ConnID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.Pid))
	}
	if m.StartTimeNs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.StartTimeNs))
	}
	if m.Fd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.Fd))
	}
	if m.Generation != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.Generation))
	}
	return i, nil
}

func (m *SocketDataEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocketDataEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Attr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.Attr.Size()))
		n1, err := m.Attr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *SocketDataEvent_Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocketDataEvent_Attribute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimestampNs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.TimestampNs))
	}
	if m.ConnId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.ConnId.Size()))
		n2, err := m.ConnId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.TrafficClass != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.TrafficClass.Size()))
		n3, err := m.TrafficClass.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Direction != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.Direction))
	}
	if m.SeqNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.SeqNum))
	}
	if m.MsgSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSockEvent(dAtA, i, uint64(m.MsgSize))
	}
	return i, nil
}

func encodeVarintSockEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TrafficClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovSockEvent(uint64(m.Protocol))
	}
	if m.Role != 0 {
		n += 1 + sovSockEvent(uint64(m.Role))
	}
	return n
}

func (m *ConnID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovSockEvent(uint64(m.Pid))
	}
	if m.StartTimeNs != 0 {
		n += 1 + sovSockEvent(uint64(m.StartTimeNs))
	}
	if m.Fd != 0 {
		n += 1 + sovSockEvent(uint64(m.Fd))
	}
	if m.Generation != 0 {
		n += 1 + sovSockEvent(uint64(m.Generation))
	}
	return n
}

func (m *SocketDataEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovSockEvent(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSockEvent(uint64(l))
	}
	return n
}

func (m *SocketDataEvent_Attribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimestampNs != 0 {
		n += 1 + sovSockEvent(uint64(m.TimestampNs))
	}
	if m.ConnId != nil {
		l = m.ConnId.Size()
		n += 1 + l + sovSockEvent(uint64(l))
	}
	if m.TrafficClass != nil {
		l = m.TrafficClass.Size()
		n += 1 + l + sovSockEvent(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovSockEvent(uint64(m.Direction))
	}
	if m.SeqNum != 0 {
		n += 1 + sovSockEvent(uint64(m.SeqNum))
	}
	if m.MsgSize != 0 {
		n += 1 + sovSockEvent(uint64(m.MsgSize))
	}
	return n
}

func sovSockEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSockEvent(x uint64) (n int) {
	return sovSockEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TrafficClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrafficClass{`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnID{`,
		`Pid:` + fmt.Sprintf("%v", this.Pid) + `,`,
		`StartTimeNs:` + fmt.Sprintf("%v", this.StartTimeNs) + `,`,
		`Fd:` + fmt.Sprintf("%v", this.Fd) + `,`,
		`Generation:` + fmt.Sprintf("%v", this.Generation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SocketDataEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SocketDataEvent{`,
		`Attr:` + strings.Replace(fmt.Sprintf("%v", this.Attr), "SocketDataEvent_Attribute", "SocketDataEvent_Attribute", 1) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SocketDataEvent_Attribute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SocketDataEvent_Attribute{`,
		`TimestampNs:` + fmt.Sprintf("%v", this.TimestampNs) + `,`,
		`ConnId:` + strings.Replace(fmt.Sprintf("%v", this.ConnId), "ConnID", "ConnID", 1) + `,`,
		`TrafficClass:` + strings.Replace(fmt.Sprintf("%v", this.TrafficClass), "TrafficClass", "TrafficClass", 1) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`SeqNum:` + fmt.Sprintf("%v", this.SeqNum) + `,`,
		`MsgSize:` + fmt.Sprintf("%v", this.MsgSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSockEvent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TrafficClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSockEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSockEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSockEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSockEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSockEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeNs", wireType)
			}
			m.StartTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeNs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fd", wireType)
			}
			m.Fd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generation", wireType)
			}
			m.Generation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Generation |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSockEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSockEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSockEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocketDataEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSockEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocketDataEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocketDataEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSockEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSockEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &SocketDataEvent_Attribute{}
			}
			if err := m.Attr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSockEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSockEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSockEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSockEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSockEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocketDataEvent_Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSockEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampNs", wireType)
			}
			m.TimestampNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampNs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSockEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSockEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnId == nil {
				m.ConnId = &ConnID{}
			}
			if err := m.ConnId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSockEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSockEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrafficClass == nil {
				m.TrafficClass = &TrafficClass{}
			}
			if err := m.TrafficClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSize", wireType)
			}
			m.MsgSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSockEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSockEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSockEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSockEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSockEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSockEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSockEvent
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSockEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSockEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSockEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSockEvent
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSockEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSockEvent   = fmt.Errorf("proto: integer overflow")
)
