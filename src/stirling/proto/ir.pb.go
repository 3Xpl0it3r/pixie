// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/stirling/proto/ir.proto

package dynamictracingpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BPFHelper int32

const (
	GOID     BPFHelper = 0
	TGID     BPFHelper = 1
	TGID_PID BPFHelper = 2
)

var BPFHelper_name = map[int32]string{
	0: "GOID",
	1: "TGID",
	2: "TGID_PID",
}

var BPFHelper_value = map[string]int32{
	"GOID":     0,
	"TGID":     1,
	"TGID_PID": 2,
}

func (BPFHelper) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{0}
}

type ScalarType int32

const (
	INT32        ScalarType = 0
	INT64        ScalarType = 1
	DOUBLE       ScalarType = 2
	STRING       ScalarType = 3
	VOID_POINTER ScalarType = 4
)

var ScalarType_name = map[int32]string{
	0: "INT32",
	1: "INT64",
	2: "DOUBLE",
	3: "STRING",
	4: "VOID_POINTER",
}

var ScalarType_value = map[string]int32{
	"INT32":        0,
	"INT64":        1,
	"DOUBLE":       2,
	"STRING":       3,
	"VOID_POINTER": 4,
}

func (ScalarType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{1}
}

type Register int32

const (
	SP Register = 0
)

var Register_name = map[int32]string{
	0: "SP",
}

var Register_value = map[string]int32{
	"SP": 0,
}

func (Register) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{2}
}

type Probe_Type int32

const (
	LOGICAL Probe_Type = 0
	ENTRY   Probe_Type = 1
	RETURN  Probe_Type = 2
)

var Probe_Type_name = map[int32]string{
	0: "LOGICAL",
	1: "ENTRY",
	2: "RETURN",
}

var Probe_Type_value = map[string]int32{
	"LOGICAL": 0,
	"ENTRY":   1,
	"RETURN":  2,
}

func (Probe_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{11, 0}
}

type ValueType struct {
	// Types that are valid to be assigned to TypeOneof:
	//	*ValueType_Scalar
	//	*ValueType_StructType
	TypeOneof isValueType_TypeOneof `protobuf_oneof:"type_oneof"`
}

func (m *ValueType) Reset()      { *m = ValueType{} }
func (*ValueType) ProtoMessage() {}
func (*ValueType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{0}
}
func (m *ValueType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueType.Merge(m, src)
}
func (m *ValueType) XXX_Size() int {
	return m.Size()
}
func (m *ValueType) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueType.DiscardUnknown(m)
}

var xxx_messageInfo_ValueType proto.InternalMessageInfo

type isValueType_TypeOneof interface {
	isValueType_TypeOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ValueType_Scalar struct {
	Scalar ScalarType `protobuf:"varint,2,opt,name=scalar,proto3,enum=pl.stirling.dynamictracingpb.ScalarType,oneof" json:"scalar,omitempty"`
}
type ValueType_StructType struct {
	StructType string `protobuf:"bytes,3,opt,name=struct_type,json=structType,proto3,oneof" json:"struct_type,omitempty"`
}

func (*ValueType_Scalar) isValueType_TypeOneof()     {}
func (*ValueType_StructType) isValueType_TypeOneof() {}

func (m *ValueType) GetTypeOneof() isValueType_TypeOneof {
	if m != nil {
		return m.TypeOneof
	}
	return nil
}

func (m *ValueType) GetScalar() ScalarType {
	if x, ok := m.GetTypeOneof().(*ValueType_Scalar); ok {
		return x.Scalar
	}
	return INT32
}

func (m *ValueType) GetStructType() string {
	if x, ok := m.GetTypeOneof().(*ValueType_StructType); ok {
		return x.StructType
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ValueType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ValueType_Scalar)(nil),
		(*ValueType_StructType)(nil),
	}
}

type Map struct {
	Name      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	KeyType   *ValueType `protobuf:"bytes,2,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	ValueType *ValueType `protobuf:"bytes,3,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
}

func (m *Map) Reset()      { *m = Map{} }
func (*Map) ProtoMessage() {}
func (*Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{1}
}
func (m *Map) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Map.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Map.Merge(m, src)
}
func (m *Map) XXX_Size() int {
	return m.Size()
}
func (m *Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Map proto.InternalMessageInfo

func (m *Map) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Map) GetKeyType() *ValueType {
	if m != nil {
		return m.KeyType
	}
	return nil
}

func (m *Map) GetValueType() *ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

type Output struct {
	Name string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type *ValueType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Output) Reset()      { *m = Output{} }
func (*Output) ProtoMessage() {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{2}
}
func (m *Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return m.Size()
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Output) GetType() *ValueType {
	if m != nil {
		return m.Type
	}
	return nil
}

type StashMapAction struct {
	MapName string `protobuf:"bytes,1,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
	// Types that are valid to be assigned to KeyOneof:
	//	*StashMapAction_Str
	//	*StashMapAction_Builtin
	KeyOneof isStashMapAction_KeyOneof `protobuf_oneof:"key_oneof"`
	ValueIds []string                  `protobuf:"bytes,4,rep,name=value_ids,json=valueIds,proto3" json:"value_ids,omitempty"`
}

func (m *StashMapAction) Reset()      { *m = StashMapAction{} }
func (*StashMapAction) ProtoMessage() {}
func (*StashMapAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{3}
}
func (m *StashMapAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StashMapAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StashMapAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StashMapAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StashMapAction.Merge(m, src)
}
func (m *StashMapAction) XXX_Size() int {
	return m.Size()
}
func (m *StashMapAction) XXX_DiscardUnknown() {
	xxx_messageInfo_StashMapAction.DiscardUnknown(m)
}

var xxx_messageInfo_StashMapAction proto.InternalMessageInfo

type isStashMapAction_KeyOneof interface {
	isStashMapAction_KeyOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StashMapAction_Str struct {
	Str string `protobuf:"bytes,2,opt,name=str,proto3,oneof" json:"str,omitempty"`
}
type StashMapAction_Builtin struct {
	Builtin BPFHelper `protobuf:"varint,3,opt,name=builtin,proto3,enum=pl.stirling.dynamictracingpb.BPFHelper,oneof" json:"builtin,omitempty"`
}

func (*StashMapAction_Str) isStashMapAction_KeyOneof()     {}
func (*StashMapAction_Builtin) isStashMapAction_KeyOneof() {}

func (m *StashMapAction) GetKeyOneof() isStashMapAction_KeyOneof {
	if m != nil {
		return m.KeyOneof
	}
	return nil
}

func (m *StashMapAction) GetMapName() string {
	if m != nil {
		return m.MapName
	}
	return ""
}

func (m *StashMapAction) GetStr() string {
	if x, ok := m.GetKeyOneof().(*StashMapAction_Str); ok {
		return x.Str
	}
	return ""
}

func (m *StashMapAction) GetBuiltin() BPFHelper {
	if x, ok := m.GetKeyOneof().(*StashMapAction_Builtin); ok {
		return x.Builtin
	}
	return GOID
}

func (m *StashMapAction) GetValueIds() []string {
	if m != nil {
		return m.ValueIds
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StashMapAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StashMapAction_Str)(nil),
		(*StashMapAction_Builtin)(nil),
	}
}

type OutputAction struct {
	OutputName string   `protobuf:"bytes,1,opt,name=output_name,json=outputName,proto3" json:"output_name,omitempty"`
	ValueIds   []string `protobuf:"bytes,2,rep,name=value_ids,json=valueIds,proto3" json:"value_ids,omitempty"`
}

func (m *OutputAction) Reset()      { *m = OutputAction{} }
func (*OutputAction) ProtoMessage() {}
func (*OutputAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{4}
}
func (m *OutputAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutputAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutputAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutputAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputAction.Merge(m, src)
}
func (m *OutputAction) XXX_Size() int {
	return m.Size()
}
func (m *OutputAction) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputAction.DiscardUnknown(m)
}

var xxx_messageInfo_OutputAction proto.InternalMessageInfo

func (m *OutputAction) GetOutputName() string {
	if m != nil {
		return m.OutputName
	}
	return ""
}

func (m *OutputAction) GetValueIds() []string {
	if m != nil {
		return m.ValueIds
	}
	return nil
}

type Argument struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Expr string `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (m *Argument) Reset()      { *m = Argument{} }
func (*Argument) ProtoMessage() {}
func (*Argument) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{5}
}
func (m *Argument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Argument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Argument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Argument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Argument.Merge(m, src)
}
func (m *Argument) XXX_Size() int {
	return m.Size()
}
func (m *Argument) XXX_DiscardUnknown() {
	xxx_messageInfo_Argument.DiscardUnknown(m)
}

var xxx_messageInfo_Argument proto.InternalMessageInfo

func (m *Argument) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Argument) GetExpr() string {
	if m != nil {
		return m.Expr
	}
	return ""
}

type ReturnValue struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *ReturnValue) Reset()      { *m = ReturnValue{} }
func (*ReturnValue) ProtoMessage() {}
func (*ReturnValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{6}
}
func (m *ReturnValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnValue.Merge(m, src)
}
func (m *ReturnValue) XXX_Size() int {
	return m.Size()
}
func (m *ReturnValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnValue.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnValue proto.InternalMessageInfo

func (m *ReturnValue) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReturnValue) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type FunctionLatency struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FunctionLatency) Reset()      { *m = FunctionLatency{} }
func (*FunctionLatency) ProtoMessage() {}
func (*FunctionLatency) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{7}
}
func (m *FunctionLatency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionLatency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionLatency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionLatency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionLatency.Merge(m, src)
}
func (m *FunctionLatency) XXX_Size() int {
	return m.Size()
}
func (m *FunctionLatency) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionLatency.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionLatency proto.InternalMessageInfo

func (m *FunctionLatency) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TracePoint struct {
	BinaryPath     string `protobuf:"bytes,1,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
	FunctionSymbol string `protobuf:"bytes,2,opt,name=function_symbol,json=functionSymbol,proto3" json:"function_symbol,omitempty"`
}

func (m *TracePoint) Reset()      { *m = TracePoint{} }
func (*TracePoint) ProtoMessage() {}
func (*TracePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{8}
}
func (m *TracePoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracePoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracePoint.Merge(m, src)
}
func (m *TracePoint) XXX_Size() int {
	return m.Size()
}
func (m *TracePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_TracePoint.DiscardUnknown(m)
}

var xxx_messageInfo_TracePoint proto.InternalMessageInfo

func (m *TracePoint) GetBinaryPath() string {
	if m != nil {
		return m.BinaryPath
	}
	return ""
}

func (m *TracePoint) GetFunctionSymbol() string {
	if m != nil {
		return m.FunctionSymbol
	}
	return ""
}

type Struct struct {
	Name   string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields []*Struct_Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *Struct) Reset()      { *m = Struct{} }
func (*Struct) ProtoMessage() {}
func (*Struct) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{9}
}
func (m *Struct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Struct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Struct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Struct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Struct.Merge(m, src)
}
func (m *Struct) XXX_Size() int {
	return m.Size()
}
func (m *Struct) XXX_DiscardUnknown() {
	xxx_messageInfo_Struct.DiscardUnknown(m)
}

var xxx_messageInfo_Struct proto.InternalMessageInfo

func (m *Struct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Struct) GetFields() []*Struct_Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Struct_Field struct {
	Name string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type *ValueType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Struct_Field) Reset()      { *m = Struct_Field{} }
func (*Struct_Field) ProtoMessage() {}
func (*Struct_Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{9, 0}
}
func (m *Struct_Field) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Struct_Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Struct_Field.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Struct_Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Struct_Field.Merge(m, src)
}
func (m *Struct_Field) XXX_Size() int {
	return m.Size()
}
func (m *Struct_Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Struct_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Struct_Field proto.InternalMessageInfo

func (m *Struct_Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Struct_Field) GetType() *ValueType {
	if m != nil {
		return m.Type
	}
	return nil
}

type Variable struct {
	Id   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type ScalarType `protobuf:"varint,2,opt,name=type,proto3,enum=pl.stirling.dynamictracingpb.ScalarType" json:"type,omitempty"`
	// Types that are valid to be assigned to BaseAddrOneof:
	//	*Variable_Register
	//	*Variable_Variable
	BaseAddrOneof isVariable_BaseAddrOneof `protobuf_oneof:"base_addr_oneof"`
	Offset        uint32                   `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *Variable) Reset()      { *m = Variable{} }
func (*Variable) ProtoMessage() {}
func (*Variable) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{10}
}
func (m *Variable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Variable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Variable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Variable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Variable.Merge(m, src)
}
func (m *Variable) XXX_Size() int {
	return m.Size()
}
func (m *Variable) XXX_DiscardUnknown() {
	xxx_messageInfo_Variable.DiscardUnknown(m)
}

var xxx_messageInfo_Variable proto.InternalMessageInfo

type isVariable_BaseAddrOneof interface {
	isVariable_BaseAddrOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Variable_Register struct {
	Register Register `protobuf:"varint,3,opt,name=register,proto3,enum=pl.stirling.dynamictracingpb.Register,oneof" json:"register,omitempty"`
}
type Variable_Variable struct {
	Variable string `protobuf:"bytes,4,opt,name=variable,proto3,oneof" json:"variable,omitempty"`
}

func (*Variable_Register) isVariable_BaseAddrOneof() {}
func (*Variable_Variable) isVariable_BaseAddrOneof() {}

func (m *Variable) GetBaseAddrOneof() isVariable_BaseAddrOneof {
	if m != nil {
		return m.BaseAddrOneof
	}
	return nil
}

func (m *Variable) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Variable) GetType() ScalarType {
	if m != nil {
		return m.Type
	}
	return INT32
}

func (m *Variable) GetRegister() Register {
	if x, ok := m.GetBaseAddrOneof().(*Variable_Register); ok {
		return x.Register
	}
	return SP
}

func (m *Variable) GetVariable() string {
	if x, ok := m.GetBaseAddrOneof().(*Variable_Variable); ok {
		return x.Variable
	}
	return ""
}

func (m *Variable) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Variable) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Variable_Register)(nil),
		(*Variable_Variable)(nil),
	}
}

type Probe struct {
	Type            Probe_Type        `protobuf:"varint,1,opt,name=type,proto3,enum=pl.stirling.dynamictracingpb.Probe_Type" json:"type,omitempty"`
	TracePoint      *TracePoint       `protobuf:"bytes,2,opt,name=trace_point,json=tracePoint,proto3" json:"trace_point,omitempty"`
	Args            []*Argument       `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	RetVals         []*ReturnValue    `protobuf:"bytes,4,rep,name=ret_vals,json=retVals,proto3" json:"ret_vals,omitempty"`
	FunctionLatency *FunctionLatency  `protobuf:"bytes,5,opt,name=function_latency,json=functionLatency,proto3" json:"function_latency,omitempty"`
	Structs         []*Struct         `protobuf:"bytes,6,rep,name=structs,proto3" json:"structs,omitempty"`
	Vars            []*Variable       `protobuf:"bytes,7,rep,name=vars,proto3" json:"vars,omitempty"`
	StashMapActions []*StashMapAction `protobuf:"bytes,8,rep,name=stash_map_actions,json=stashMapActions,proto3" json:"stash_map_actions,omitempty"`
	OutputActions   []*OutputAction   `protobuf:"bytes,9,rep,name=output_actions,json=outputActions,proto3" json:"output_actions,omitempty"`
}

func (m *Probe) Reset()      { *m = Probe{} }
func (*Probe) ProtoMessage() {}
func (*Probe) Descriptor() ([]byte, []int) {
	return fileDescriptor_7def418e304cd30c, []int{11}
}
func (m *Probe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Probe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Probe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Probe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Probe.Merge(m, src)
}
func (m *Probe) XXX_Size() int {
	return m.Size()
}
func (m *Probe) XXX_DiscardUnknown() {
	xxx_messageInfo_Probe.DiscardUnknown(m)
}

var xxx_messageInfo_Probe proto.InternalMessageInfo

func (m *Probe) GetType() Probe_Type {
	if m != nil {
		return m.Type
	}
	return LOGICAL
}

func (m *Probe) GetTracePoint() *TracePoint {
	if m != nil {
		return m.TracePoint
	}
	return nil
}

func (m *Probe) GetArgs() []*Argument {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Probe) GetRetVals() []*ReturnValue {
	if m != nil {
		return m.RetVals
	}
	return nil
}

func (m *Probe) GetFunctionLatency() *FunctionLatency {
	if m != nil {
		return m.FunctionLatency
	}
	return nil
}

func (m *Probe) GetStructs() []*Struct {
	if m != nil {
		return m.Structs
	}
	return nil
}

func (m *Probe) GetVars() []*Variable {
	if m != nil {
		return m.Vars
	}
	return nil
}

func (m *Probe) GetStashMapActions() []*StashMapAction {
	if m != nil {
		return m.StashMapActions
	}
	return nil
}

func (m *Probe) GetOutputActions() []*OutputAction {
	if m != nil {
		return m.OutputActions
	}
	return nil
}

func init() {
	proto.RegisterEnum("pl.stirling.dynamictracingpb.BPFHelper", BPFHelper_name, BPFHelper_value)
	proto.RegisterEnum("pl.stirling.dynamictracingpb.ScalarType", ScalarType_name, ScalarType_value)
	proto.RegisterEnum("pl.stirling.dynamictracingpb.Register", Register_name, Register_value)
	proto.RegisterEnum("pl.stirling.dynamictracingpb.Probe_Type", Probe_Type_name, Probe_Type_value)
	proto.RegisterType((*ValueType)(nil), "pl.stirling.dynamictracingpb.ValueType")
	proto.RegisterType((*Map)(nil), "pl.stirling.dynamictracingpb.Map")
	proto.RegisterType((*Output)(nil), "pl.stirling.dynamictracingpb.Output")
	proto.RegisterType((*StashMapAction)(nil), "pl.stirling.dynamictracingpb.StashMapAction")
	proto.RegisterType((*OutputAction)(nil), "pl.stirling.dynamictracingpb.OutputAction")
	proto.RegisterType((*Argument)(nil), "pl.stirling.dynamictracingpb.Argument")
	proto.RegisterType((*ReturnValue)(nil), "pl.stirling.dynamictracingpb.ReturnValue")
	proto.RegisterType((*FunctionLatency)(nil), "pl.stirling.dynamictracingpb.FunctionLatency")
	proto.RegisterType((*TracePoint)(nil), "pl.stirling.dynamictracingpb.TracePoint")
	proto.RegisterType((*Struct)(nil), "pl.stirling.dynamictracingpb.Struct")
	proto.RegisterType((*Struct_Field)(nil), "pl.stirling.dynamictracingpb.Struct.Field")
	proto.RegisterType((*Variable)(nil), "pl.stirling.dynamictracingpb.Variable")
	proto.RegisterType((*Probe)(nil), "pl.stirling.dynamictracingpb.Probe")
}

func init() { proto.RegisterFile("src/stirling/proto/ir.proto", fileDescriptor_7def418e304cd30c) }

var fileDescriptor_7def418e304cd30c = []byte{
	// 980 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x26, 0xf5, 0x4b, 0x8d, 0x1c, 0x99, 0x59, 0x14, 0x05, 0xdb, 0x04, 0xac, 0x43, 0x14, 0x8d,
	0x6b, 0x34, 0x32, 0x20, 0x17, 0x3d, 0xb4, 0x45, 0x01, 0x2b, 0xfe, 0x23, 0xa0, 0x48, 0xea, 0x4a,
	0x31, 0x9c, 0x5e, 0x88, 0x95, 0xb4, 0xb6, 0x89, 0x50, 0x24, 0xb1, 0xbb, 0x32, 0xa2, 0x5b, 0x1e,
	0xa1, 0x2f, 0x51, 0xa0, 0xa7, 0x3e, 0x40, 0x6f, 0xbd, 0xf5, 0xe8, 0x63, 0x8e, 0xb5, 0x7c, 0x68,
	0x8f, 0x79, 0x84, 0x62, 0x97, 0xa4, 0x2c, 0x3b, 0xad, 0xe5, 0x14, 0xbd, 0xcd, 0x0e, 0xf9, 0x7d,
	0xfa, 0xe6, 0xdb, 0x99, 0xa1, 0xe0, 0x01, 0x67, 0xc3, 0x4d, 0x2e, 0x7c, 0x16, 0xf8, 0xe1, 0xc9,
	0x66, 0xcc, 0x22, 0x11, 0x6d, 0xfa, 0xac, 0xae, 0x02, 0xf4, 0x30, 0x0e, 0xea, 0xd9, 0xb3, 0xfa,
	0x68, 0x1a, 0x92, 0xb1, 0x3f, 0x14, 0x8c, 0x0c, 0xfd, 0xf0, 0x24, 0x1e, 0x38, 0xaf, 0x75, 0xa8,
	0x1c, 0x92, 0x60, 0x42, 0xfb, 0xd3, 0x98, 0xa2, 0x26, 0x94, 0xf8, 0x90, 0x04, 0x84, 0x59, 0xb9,
	0x35, 0x7d, 0xbd, 0xd6, 0x58, 0xaf, 0xdf, 0x06, 0xae, 0xf7, 0xd4, 0xbb, 0x12, 0x79, 0xa0, 0xe1,
	0x14, 0x89, 0x1e, 0x41, 0x95, 0x0b, 0x36, 0x19, 0x0a, 0x4f, 0x4c, 0x63, 0x6a, 0xe5, 0xd7, 0xf4,
	0xf5, 0xca, 0x81, 0x86, 0x21, 0x49, 0xca, 0x97, 0x9b, 0x2b, 0x00, 0xf2, 0x99, 0x17, 0x85, 0x34,
	0x3a, 0x76, 0x7e, 0xd2, 0x21, 0xff, 0x8c, 0xc4, 0x08, 0x41, 0x21, 0x24, 0x63, 0x6a, 0xe9, 0x12,
	0x81, 0x55, 0x8c, 0x9a, 0x60, 0xbc, 0xa4, 0xd3, 0x84, 0x49, 0x4a, 0xaa, 0x36, 0x1e, 0xdf, 0x2e,
	0x69, 0x5e, 0x0b, 0x2e, 0xbf, 0xa4, 0x53, 0x55, 0xd4, 0x1e, 0xc0, 0x99, 0xcc, 0x5e, 0xe9, 0x79,
	0x0f, 0x96, 0xca, 0x59, 0x16, 0x3a, 0x2f, 0xa0, 0xd4, 0x99, 0x88, 0x78, 0x22, 0xfe, 0x51, 0xe9,
	0x37, 0x50, 0xf8, 0x2f, 0x2a, 0x15, 0xc8, 0xf9, 0x45, 0x87, 0x5a, 0x4f, 0x10, 0x7e, 0xfa, 0x8c,
	0xc4, 0xdb, 0x43, 0xe1, 0x47, 0x21, 0xfa, 0x08, 0x8c, 0x31, 0x89, 0xbd, 0x85, 0xdf, 0x29, 0x8f,
	0x49, 0xdc, 0x96, 0x3f, 0x85, 0x20, 0xcf, 0x45, 0x72, 0x45, 0xd2, 0x59, 0x79, 0x40, 0x4f, 0xa1,
	0x3c, 0x98, 0xf8, 0x81, 0xf0, 0x43, 0x55, 0x61, 0x6d, 0x99, 0x82, 0x66, 0x77, 0xef, 0x80, 0x06,
	0x31, 0x65, 0x07, 0x1a, 0xce, 0x90, 0xe8, 0x01, 0x24, 0xe5, 0x7a, 0xfe, 0x88, 0x5b, 0x85, 0xb5,
	0xfc, 0x7a, 0x05, 0x1b, 0x2a, 0xe1, 0x8e, 0x78, 0xb3, 0x0a, 0x15, 0x79, 0x15, 0xc9, 0x9d, 0xb5,
	0x60, 0x25, 0xf1, 0x22, 0x55, 0xfb, 0x09, 0x54, 0x23, 0x75, 0x5e, 0x14, 0x0c, 0x49, 0x4a, 0x69,
	0xbe, 0x46, 0x9d, 0xbb, 0x4e, 0xed, 0xd4, 0xc1, 0xd8, 0x66, 0x27, 0x93, 0x31, 0x0d, 0x05, 0xaa,
	0x41, 0xce, 0x1f, 0xa5, 0x04, 0x39, 0x7f, 0x24, 0xbd, 0xa6, 0xaf, 0xe2, 0xb4, 0x5a, 0xac, 0x62,
	0x67, 0x0b, 0xaa, 0x98, 0x8a, 0x09, 0x0b, 0x95, 0x8f, 0xef, 0x40, 0x3e, 0x80, 0xa2, 0x1f, 0x8e,
	0xe8, 0x2b, 0x85, 0xb9, 0x87, 0x93, 0x83, 0xf3, 0x08, 0x56, 0xf7, 0x26, 0xa1, 0x92, 0xdb, 0x22,
	0x82, 0x86, 0xc3, 0xe9, 0x4d, 0xa0, 0x73, 0x08, 0xd0, 0x67, 0x64, 0x48, 0xbb, 0x91, 0x1f, 0x0a,
	0x59, 0xd3, 0xc0, 0x0f, 0x09, 0x9b, 0x7a, 0x31, 0x11, 0xa7, 0x59, 0x4d, 0x49, 0xaa, 0x4b, 0xc4,
	0x29, 0x7a, 0x0c, 0xab, 0xc7, 0x29, 0xa3, 0xc7, 0xa7, 0xe3, 0x41, 0x14, 0xa4, 0x2a, 0x6b, 0x59,
	0xba, 0xa7, 0xb2, 0xce, 0xaf, 0x3a, 0x94, 0x7a, 0xaa, 0xfd, 0xff, 0xa5, 0xc9, 0x4b, 0xc7, 0x3e,
	0x0d, 0x52, 0x63, 0xaa, 0x8d, 0x8d, 0x25, 0x53, 0xa7, 0x98, 0xea, 0x7b, 0x12, 0x82, 0x53, 0xe4,
	0xc7, 0x47, 0x50, 0x54, 0x89, 0xff, 0xbf, 0x37, 0xff, 0xd4, 0xc1, 0x38, 0x24, 0xcc, 0x27, 0x83,
	0xe0, 0x5d, 0xab, 0xbf, 0x5d, 0x60, 0x7e, 0x8f, 0x75, 0x91, 0x50, 0xa3, 0x1d, 0x30, 0x18, 0x3d,
	0xf1, 0xb9, 0xa0, 0x2c, 0xed, 0xda, 0xcf, 0x6e, 0x67, 0xc0, 0xe9, 0xdb, 0x07, 0x1a, 0x9e, 0x23,
	0xd1, 0x43, 0x30, 0xce, 0x52, 0x7d, 0x56, 0x21, 0x9d, 0x89, 0x79, 0x06, 0x7d, 0x08, 0xa5, 0xe8,
	0xf8, 0x98, 0x53, 0x61, 0x15, 0x55, 0x37, 0xa4, 0xa7, 0xe6, 0x7d, 0x58, 0x1d, 0x10, 0x4e, 0x3d,
	0x32, 0x1a, 0xb1, 0xb4, 0xa9, 0x7f, 0x2b, 0x42, 0xb1, 0xcb, 0xa2, 0x01, 0x9d, 0x97, 0xa5, 0xdf,
	0xa5, 0x2c, 0x05, 0xa9, 0x2f, 0x94, 0xe5, 0x42, 0x55, 0x3e, 0xa5, 0x5e, 0x2c, 0xfb, 0x28, 0x75,
	0x7d, 0x09, 0xc9, 0x55, 0xdf, 0x61, 0x10, 0x57, 0x3d, 0xf8, 0x35, 0x14, 0x08, 0x3b, 0xe1, 0x56,
	0x5e, 0x35, 0xc6, 0x12, 0x77, 0xb2, 0x19, 0xc2, 0x0a, 0x93, 0xb8, 0x2b, 0xbc, 0x33, 0x12, 0x24,
	0xc3, 0x5c, 0x6d, 0x7c, 0xbe, 0xcc, 0xdd, 0xf9, 0x4c, 0xe1, 0x32, 0xa3, 0xe2, 0x90, 0x04, 0x1c,
	0x1d, 0x81, 0x39, 0x6f, 0xf2, 0x20, 0x99, 0x1b, 0xe5, 0x64, 0xb5, 0xf1, 0xe4, 0x76, 0xb6, 0x1b,
	0xc3, 0x86, 0xe7, 0xb3, 0x92, 0x4d, 0xdf, 0x77, 0x50, 0x4e, 0xbe, 0x09, 0xdc, 0x2a, 0x29, 0x79,
	0x9f, 0xde, 0xa5, 0xef, 0x71, 0x06, 0x92, 0xde, 0x9c, 0x11, 0xc6, 0xad, 0xf2, 0x5d, 0xbc, 0xc9,
	0x3a, 0x18, 0x2b, 0x0c, 0x3a, 0x82, 0xfb, 0x5c, 0xee, 0x5b, 0x4f, 0xee, 0x58, 0xa2, 0x64, 0x71,
	0xcb, 0x50, 0x44, 0x5f, 0x2c, 0x53, 0xb1, 0xb8, 0xa6, 0xf1, 0x2a, 0xbf, 0x76, 0xe6, 0xe8, 0x7b,
	0xa8, 0xa5, 0x9b, 0x30, 0xa3, 0xad, 0xdc, 0x65, 0xa8, 0x17, 0xb7, 0x29, 0xbe, 0x17, 0x2d, 0x9c,
	0xb8, 0xb3, 0x01, 0x05, 0xf5, 0x21, 0xab, 0x42, 0xb9, 0xd5, 0xd9, 0x77, 0x9f, 0x6e, 0xb7, 0x4c,
	0x0d, 0x55, 0xa0, 0xb8, 0xdb, 0xee, 0xe3, 0x17, 0xa6, 0x8e, 0x00, 0x4a, 0x78, 0xb7, 0xff, 0x1c,
	0xb7, 0xcd, 0xdc, 0xc6, 0x13, 0xa8, 0xcc, 0x57, 0x3b, 0x32, 0xa0, 0xb0, 0xdf, 0x71, 0x77, 0x4c,
	0x4d, 0x46, 0xfd, 0x7d, 0x77, 0xc7, 0xd4, 0xd1, 0x0a, 0x18, 0x32, 0xf2, 0xba, 0xee, 0x8e, 0x99,
	0xdb, 0x68, 0x01, 0x5c, 0x4d, 0xa5, 0xe4, 0x74, 0xdb, 0xfd, 0xad, 0x46, 0x42, 0xef, 0xb6, 0xfb,
	0x5f, 0x7d, 0x99, 0xd0, 0xef, 0x74, 0x9e, 0x37, 0x5b, 0xbb, 0x66, 0x4e, 0xc6, 0xbd, 0x3e, 0x76,
	0xdb, 0xfb, 0x66, 0x1e, 0x99, 0xb0, 0x72, 0xd8, 0x91, 0x4c, 0x1d, 0xb7, 0xdd, 0xdf, 0xc5, 0x66,
	0x61, 0x03, 0x81, 0x91, 0x4d, 0x28, 0x2a, 0x41, 0xae, 0xd7, 0x35, 0xb5, 0xe6, 0xde, 0xf9, 0x85,
	0xad, 0xbd, 0xb9, 0xb0, 0xb5, 0xb7, 0x17, 0xb6, 0xfe, 0x7a, 0x66, 0xeb, 0x3f, 0xcf, 0x6c, 0xfd,
	0xf7, 0x99, 0xad, 0x9f, 0xcf, 0x6c, 0xfd, 0x8f, 0x99, 0xad, 0xff, 0x35, 0xb3, 0xb5, 0xb7, 0x33,
	0x5b, 0xff, 0xf1, 0xd2, 0xd6, 0xce, 0x2f, 0x6d, 0xed, 0xcd, 0xa5, 0xad, 0xfd, 0x60, 0xde, 0x34,
	0x68, 0x50, 0x52, 0xff, 0x66, 0xb6, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xea, 0x3a, 0x22, 0x07,
	0xec, 0x08, 0x00, 0x00,
}

func (x BPFHelper) String() string {
	s, ok := BPFHelper_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ScalarType) String() string {
	s, ok := ScalarType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Register) String() string {
	s, ok := Register_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Probe_Type) String() string {
	s, ok := Probe_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ValueType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValueType)
	if !ok {
		that2, ok := that.(ValueType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TypeOneof == nil {
		if this.TypeOneof != nil {
			return false
		}
	} else if this.TypeOneof == nil {
		return false
	} else if !this.TypeOneof.Equal(that1.TypeOneof) {
		return false
	}
	return true
}
func (this *ValueType_Scalar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValueType_Scalar)
	if !ok {
		that2, ok := that.(ValueType_Scalar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Scalar != that1.Scalar {
		return false
	}
	return true
}
func (this *ValueType_StructType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValueType_StructType)
	if !ok {
		that2, ok := that.(ValueType_StructType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StructType != that1.StructType {
		return false
	}
	return true
}
func (this *Map) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Map)
	if !ok {
		that2, ok := that.(Map)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.KeyType.Equal(that1.KeyType) {
		return false
	}
	if !this.ValueType.Equal(that1.ValueType) {
		return false
	}
	return true
}
func (this *Output) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Output)
	if !ok {
		that2, ok := that.(Output)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *StashMapAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StashMapAction)
	if !ok {
		that2, ok := that.(StashMapAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapName != that1.MapName {
		return false
	}
	if that1.KeyOneof == nil {
		if this.KeyOneof != nil {
			return false
		}
	} else if this.KeyOneof == nil {
		return false
	} else if !this.KeyOneof.Equal(that1.KeyOneof) {
		return false
	}
	if len(this.ValueIds) != len(that1.ValueIds) {
		return false
	}
	for i := range this.ValueIds {
		if this.ValueIds[i] != that1.ValueIds[i] {
			return false
		}
	}
	return true
}
func (this *StashMapAction_Str) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StashMapAction_Str)
	if !ok {
		that2, ok := that.(StashMapAction_Str)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	return true
}
func (this *StashMapAction_Builtin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StashMapAction_Builtin)
	if !ok {
		that2, ok := that.(StashMapAction_Builtin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Builtin != that1.Builtin {
		return false
	}
	return true
}
func (this *OutputAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutputAction)
	if !ok {
		that2, ok := that.(OutputAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OutputName != that1.OutputName {
		return false
	}
	if len(this.ValueIds) != len(that1.ValueIds) {
		return false
	}
	for i := range this.ValueIds {
		if this.ValueIds[i] != that1.ValueIds[i] {
			return false
		}
	}
	return true
}
func (this *Argument) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Argument)
	if !ok {
		that2, ok := that.(Argument)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Expr != that1.Expr {
		return false
	}
	return true
}
func (this *ReturnValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReturnValue)
	if !ok {
		that2, ok := that.(ReturnValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	return true
}
func (this *FunctionLatency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FunctionLatency)
	if !ok {
		that2, ok := that.(FunctionLatency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *TracePoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TracePoint)
	if !ok {
		that2, ok := that.(TracePoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BinaryPath != that1.BinaryPath {
		return false
	}
	if this.FunctionSymbol != that1.FunctionSymbol {
		return false
	}
	return true
}
func (this *Struct) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Struct)
	if !ok {
		that2, ok := that.(Struct)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *Struct_Field) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Struct_Field)
	if !ok {
		that2, ok := that.(Struct_Field)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *Variable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Variable)
	if !ok {
		that2, ok := that.(Variable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.BaseAddrOneof == nil {
		if this.BaseAddrOneof != nil {
			return false
		}
	} else if this.BaseAddrOneof == nil {
		return false
	} else if !this.BaseAddrOneof.Equal(that1.BaseAddrOneof) {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *Variable_Register) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Variable_Register)
	if !ok {
		that2, ok := that.(Variable_Register)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Register != that1.Register {
		return false
	}
	return true
}
func (this *Variable_Variable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Variable_Variable)
	if !ok {
		that2, ok := that.(Variable_Variable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Variable != that1.Variable {
		return false
	}
	return true
}
func (this *Probe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Probe)
	if !ok {
		that2, ok := that.(Probe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.TracePoint.Equal(that1.TracePoint) {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(that1.Args[i]) {
			return false
		}
	}
	if len(this.RetVals) != len(that1.RetVals) {
		return false
	}
	for i := range this.RetVals {
		if !this.RetVals[i].Equal(that1.RetVals[i]) {
			return false
		}
	}
	if !this.FunctionLatency.Equal(that1.FunctionLatency) {
		return false
	}
	if len(this.Structs) != len(that1.Structs) {
		return false
	}
	for i := range this.Structs {
		if !this.Structs[i].Equal(that1.Structs[i]) {
			return false
		}
	}
	if len(this.Vars) != len(that1.Vars) {
		return false
	}
	for i := range this.Vars {
		if !this.Vars[i].Equal(that1.Vars[i]) {
			return false
		}
	}
	if len(this.StashMapActions) != len(that1.StashMapActions) {
		return false
	}
	for i := range this.StashMapActions {
		if !this.StashMapActions[i].Equal(that1.StashMapActions[i]) {
			return false
		}
	}
	if len(this.OutputActions) != len(that1.OutputActions) {
		return false
	}
	for i := range this.OutputActions {
		if !this.OutputActions[i].Equal(that1.OutputActions[i]) {
			return false
		}
	}
	return true
}
func (this *ValueType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dynamictracingpb.ValueType{")
	if this.TypeOneof != nil {
		s = append(s, "TypeOneof: "+fmt.Sprintf("%#v", this.TypeOneof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValueType_Scalar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dynamictracingpb.ValueType_Scalar{` +
		`Scalar:` + fmt.Sprintf("%#v", this.Scalar) + `}`}, ", ")
	return s
}
func (this *ValueType_StructType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dynamictracingpb.ValueType_StructType{` +
		`StructType:` + fmt.Sprintf("%#v", this.StructType) + `}`}, ", ")
	return s
}
func (this *Map) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dynamictracingpb.Map{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.KeyType != nil {
		s = append(s, "KeyType: "+fmt.Sprintf("%#v", this.KeyType)+",\n")
	}
	if this.ValueType != nil {
		s = append(s, "ValueType: "+fmt.Sprintf("%#v", this.ValueType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Output) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dynamictracingpb.Output{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StashMapAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dynamictracingpb.StashMapAction{")
	s = append(s, "MapName: "+fmt.Sprintf("%#v", this.MapName)+",\n")
	if this.KeyOneof != nil {
		s = append(s, "KeyOneof: "+fmt.Sprintf("%#v", this.KeyOneof)+",\n")
	}
	s = append(s, "ValueIds: "+fmt.Sprintf("%#v", this.ValueIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StashMapAction_Str) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dynamictracingpb.StashMapAction_Str{` +
		`Str:` + fmt.Sprintf("%#v", this.Str) + `}`}, ", ")
	return s
}
func (this *StashMapAction_Builtin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dynamictracingpb.StashMapAction_Builtin{` +
		`Builtin:` + fmt.Sprintf("%#v", this.Builtin) + `}`}, ", ")
	return s
}
func (this *OutputAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dynamictracingpb.OutputAction{")
	s = append(s, "OutputName: "+fmt.Sprintf("%#v", this.OutputName)+",\n")
	s = append(s, "ValueIds: "+fmt.Sprintf("%#v", this.ValueIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Argument) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dynamictracingpb.Argument{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Expr: "+fmt.Sprintf("%#v", this.Expr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReturnValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dynamictracingpb.ReturnValue{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FunctionLatency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dynamictracingpb.FunctionLatency{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TracePoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dynamictracingpb.TracePoint{")
	s = append(s, "BinaryPath: "+fmt.Sprintf("%#v", this.BinaryPath)+",\n")
	s = append(s, "FunctionSymbol: "+fmt.Sprintf("%#v", this.FunctionSymbol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Struct) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dynamictracingpb.Struct{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Struct_Field) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dynamictracingpb.Struct_Field{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Variable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dynamictracingpb.Variable{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.BaseAddrOneof != nil {
		s = append(s, "BaseAddrOneof: "+fmt.Sprintf("%#v", this.BaseAddrOneof)+",\n")
	}
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Variable_Register) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dynamictracingpb.Variable_Register{` +
		`Register:` + fmt.Sprintf("%#v", this.Register) + `}`}, ", ")
	return s
}
func (this *Variable_Variable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dynamictracingpb.Variable_Variable{` +
		`Variable:` + fmt.Sprintf("%#v", this.Variable) + `}`}, ", ")
	return s
}
func (this *Probe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dynamictracingpb.Probe{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.TracePoint != nil {
		s = append(s, "TracePoint: "+fmt.Sprintf("%#v", this.TracePoint)+",\n")
	}
	if this.Args != nil {
		s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	}
	if this.RetVals != nil {
		s = append(s, "RetVals: "+fmt.Sprintf("%#v", this.RetVals)+",\n")
	}
	if this.FunctionLatency != nil {
		s = append(s, "FunctionLatency: "+fmt.Sprintf("%#v", this.FunctionLatency)+",\n")
	}
	if this.Structs != nil {
		s = append(s, "Structs: "+fmt.Sprintf("%#v", this.Structs)+",\n")
	}
	if this.Vars != nil {
		s = append(s, "Vars: "+fmt.Sprintf("%#v", this.Vars)+",\n")
	}
	if this.StashMapActions != nil {
		s = append(s, "StashMapActions: "+fmt.Sprintf("%#v", this.StashMapActions)+",\n")
	}
	if this.OutputActions != nil {
		s = append(s, "OutputActions: "+fmt.Sprintf("%#v", this.OutputActions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIr(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ValueType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeOneof != nil {
		{
			size := m.TypeOneof.Size()
			i -= size
			if _, err := m.TypeOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueType_Scalar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueType_Scalar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintIr(dAtA, i, uint64(m.Scalar))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ValueType_StructType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueType_StructType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StructType)
	copy(dAtA[i:], m.StructType)
	i = encodeVarintIr(dAtA, i, uint64(len(m.StructType)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Map) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueType != nil {
		{
			size, err := m.ValueType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyType != nil {
		{
			size, err := m.KeyType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIr(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIr(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StashMapAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StashMapAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StashMapAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueIds) > 0 {
		for iNdEx := len(m.ValueIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValueIds[iNdEx])
			copy(dAtA[i:], m.ValueIds[iNdEx])
			i = encodeVarintIr(dAtA, i, uint64(len(m.ValueIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.KeyOneof != nil {
		{
			size := m.KeyOneof.Size()
			i -= size
			if _, err := m.KeyOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.MapName) > 0 {
		i -= len(m.MapName)
		copy(dAtA[i:], m.MapName)
		i = encodeVarintIr(dAtA, i, uint64(len(m.MapName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StashMapAction_Str) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StashMapAction_Str) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Str)
	copy(dAtA[i:], m.Str)
	i = encodeVarintIr(dAtA, i, uint64(len(m.Str)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *StashMapAction_Builtin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StashMapAction_Builtin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintIr(dAtA, i, uint64(m.Builtin))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *OutputAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutputAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueIds) > 0 {
		for iNdEx := len(m.ValueIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValueIds[iNdEx])
			copy(dAtA[i:], m.ValueIds[iNdEx])
			i = encodeVarintIr(dAtA, i, uint64(len(m.ValueIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OutputName) > 0 {
		i -= len(m.OutputName)
		copy(dAtA[i:], m.OutputName)
		i = encodeVarintIr(dAtA, i, uint64(len(m.OutputName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Argument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Argument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Argument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Expr) > 0 {
		i -= len(m.Expr)
		copy(dAtA[i:], m.Expr)
		i = encodeVarintIr(dAtA, i, uint64(len(m.Expr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIr(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReturnValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintIr(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIr(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FunctionLatency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionLatency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionLatency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIr(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TracePoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracePoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracePoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FunctionSymbol) > 0 {
		i -= len(m.FunctionSymbol)
		copy(dAtA[i:], m.FunctionSymbol)
		i = encodeVarintIr(dAtA, i, uint64(len(m.FunctionSymbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BinaryPath) > 0 {
		i -= len(m.BinaryPath)
		copy(dAtA[i:], m.BinaryPath)
		i = encodeVarintIr(dAtA, i, uint64(len(m.BinaryPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Struct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Struct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Struct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIr(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Struct_Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Struct_Field) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Struct_Field) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIr(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Variable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Variable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Variable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintIr(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x28
	}
	if m.BaseAddrOneof != nil {
		{
			size := m.BaseAddrOneof.Size()
			i -= size
			if _, err := m.BaseAddrOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintIr(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIr(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Variable_Register) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Variable_Register) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintIr(dAtA, i, uint64(m.Register))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *Variable_Variable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Variable_Variable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Variable)
	copy(dAtA[i:], m.Variable)
	i = encodeVarintIr(dAtA, i, uint64(len(m.Variable)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *Probe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Probe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Probe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputActions) > 0 {
		for iNdEx := len(m.OutputActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutputActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.StashMapActions) > 0 {
		for iNdEx := len(m.StashMapActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StashMapActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Vars) > 0 {
		for iNdEx := len(m.Vars) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vars[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Structs) > 0 {
		for iNdEx := len(m.Structs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Structs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.FunctionLatency != nil {
		{
			size, err := m.FunctionLatency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RetVals) > 0 {
		for iNdEx := len(m.RetVals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RetVals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIr(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TracePoint != nil {
		{
			size, err := m.TracePoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintIr(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIr(dAtA []byte, offset int, v uint64) int {
	offset -= sovIr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValueType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeOneof != nil {
		n += m.TypeOneof.Size()
	}
	return n
}

func (m *ValueType_Scalar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIr(uint64(m.Scalar))
	return n
}
func (m *ValueType_StructType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StructType)
	n += 1 + l + sovIr(uint64(l))
	return n
}
func (m *Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	if m.KeyType != nil {
		l = m.KeyType.Size()
		n += 1 + l + sovIr(uint64(l))
	}
	if m.ValueType != nil {
		l = m.ValueType.Size()
		n += 1 + l + sovIr(uint64(l))
	}
	return n
}

func (m *Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovIr(uint64(l))
	}
	return n
}

func (m *StashMapAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapName)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	if m.KeyOneof != nil {
		n += m.KeyOneof.Size()
	}
	if len(m.ValueIds) > 0 {
		for _, s := range m.ValueIds {
			l = len(s)
			n += 1 + l + sovIr(uint64(l))
		}
	}
	return n
}

func (m *StashMapAction_Str) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovIr(uint64(l))
	return n
}
func (m *StashMapAction_Builtin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIr(uint64(m.Builtin))
	return n
}
func (m *OutputAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutputName)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	if len(m.ValueIds) > 0 {
		for _, s := range m.ValueIds {
			l = len(s)
			n += 1 + l + sovIr(uint64(l))
		}
	}
	return n
}

func (m *Argument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	l = len(m.Expr)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	return n
}

func (m *ReturnValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovIr(uint64(m.Index))
	}
	return n
}

func (m *FunctionLatency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	return n
}

func (m *TracePoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BinaryPath)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	l = len(m.FunctionSymbol)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	return n
}

func (m *Struct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovIr(uint64(l))
		}
	}
	return n
}

func (m *Struct_Field) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovIr(uint64(l))
	}
	return n
}

func (m *Variable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIr(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovIr(uint64(m.Type))
	}
	if m.BaseAddrOneof != nil {
		n += m.BaseAddrOneof.Size()
	}
	if m.Offset != 0 {
		n += 1 + sovIr(uint64(m.Offset))
	}
	return n
}

func (m *Variable_Register) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovIr(uint64(m.Register))
	return n
}
func (m *Variable_Variable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Variable)
	n += 1 + l + sovIr(uint64(l))
	return n
}
func (m *Probe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovIr(uint64(m.Type))
	}
	if m.TracePoint != nil {
		l = m.TracePoint.Size()
		n += 1 + l + sovIr(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovIr(uint64(l))
		}
	}
	if len(m.RetVals) > 0 {
		for _, e := range m.RetVals {
			l = e.Size()
			n += 1 + l + sovIr(uint64(l))
		}
	}
	if m.FunctionLatency != nil {
		l = m.FunctionLatency.Size()
		n += 1 + l + sovIr(uint64(l))
	}
	if len(m.Structs) > 0 {
		for _, e := range m.Structs {
			l = e.Size()
			n += 1 + l + sovIr(uint64(l))
		}
	}
	if len(m.Vars) > 0 {
		for _, e := range m.Vars {
			l = e.Size()
			n += 1 + l + sovIr(uint64(l))
		}
	}
	if len(m.StashMapActions) > 0 {
		for _, e := range m.StashMapActions {
			l = e.Size()
			n += 1 + l + sovIr(uint64(l))
		}
	}
	if len(m.OutputActions) > 0 {
		for _, e := range m.OutputActions {
			l = e.Size()
			n += 1 + l + sovIr(uint64(l))
		}
	}
	return n
}

func sovIr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIr(x uint64) (n int) {
	return sovIr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ValueType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValueType{`,
		`TypeOneof:` + fmt.Sprintf("%v", this.TypeOneof) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValueType_Scalar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValueType_Scalar{`,
		`Scalar:` + fmt.Sprintf("%v", this.Scalar) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValueType_StructType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValueType_StructType{`,
		`StructType:` + fmt.Sprintf("%v", this.StructType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Map) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Map{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`KeyType:` + strings.Replace(this.KeyType.String(), "ValueType", "ValueType", 1) + `,`,
		`ValueType:` + strings.Replace(this.ValueType.String(), "ValueType", "ValueType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Output) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Output{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + strings.Replace(this.Type.String(), "ValueType", "ValueType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StashMapAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StashMapAction{`,
		`MapName:` + fmt.Sprintf("%v", this.MapName) + `,`,
		`KeyOneof:` + fmt.Sprintf("%v", this.KeyOneof) + `,`,
		`ValueIds:` + fmt.Sprintf("%v", this.ValueIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StashMapAction_Str) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StashMapAction_Str{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StashMapAction_Builtin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StashMapAction_Builtin{`,
		`Builtin:` + fmt.Sprintf("%v", this.Builtin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OutputAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutputAction{`,
		`OutputName:` + fmt.Sprintf("%v", this.OutputName) + `,`,
		`ValueIds:` + fmt.Sprintf("%v", this.ValueIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Argument) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Argument{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Expr:` + fmt.Sprintf("%v", this.Expr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReturnValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReturnValue{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FunctionLatency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FunctionLatency{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TracePoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TracePoint{`,
		`BinaryPath:` + fmt.Sprintf("%v", this.BinaryPath) + `,`,
		`FunctionSymbol:` + fmt.Sprintf("%v", this.FunctionSymbol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Struct) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Struct_Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "Struct_Field", "Struct_Field", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&Struct{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *Struct_Field) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Struct_Field{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + strings.Replace(this.Type.String(), "ValueType", "ValueType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Variable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Variable{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`BaseAddrOneof:` + fmt.Sprintf("%v", this.BaseAddrOneof) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Variable_Register) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Variable_Register{`,
		`Register:` + fmt.Sprintf("%v", this.Register) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Variable_Variable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Variable_Variable{`,
		`Variable:` + fmt.Sprintf("%v", this.Variable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Probe) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgs := "[]*Argument{"
	for _, f := range this.Args {
		repeatedStringForArgs += strings.Replace(f.String(), "Argument", "Argument", 1) + ","
	}
	repeatedStringForArgs += "}"
	repeatedStringForRetVals := "[]*ReturnValue{"
	for _, f := range this.RetVals {
		repeatedStringForRetVals += strings.Replace(f.String(), "ReturnValue", "ReturnValue", 1) + ","
	}
	repeatedStringForRetVals += "}"
	repeatedStringForStructs := "[]*Struct{"
	for _, f := range this.Structs {
		repeatedStringForStructs += strings.Replace(f.String(), "Struct", "Struct", 1) + ","
	}
	repeatedStringForStructs += "}"
	repeatedStringForVars := "[]*Variable{"
	for _, f := range this.Vars {
		repeatedStringForVars += strings.Replace(f.String(), "Variable", "Variable", 1) + ","
	}
	repeatedStringForVars += "}"
	repeatedStringForStashMapActions := "[]*StashMapAction{"
	for _, f := range this.StashMapActions {
		repeatedStringForStashMapActions += strings.Replace(f.String(), "StashMapAction", "StashMapAction", 1) + ","
	}
	repeatedStringForStashMapActions += "}"
	repeatedStringForOutputActions := "[]*OutputAction{"
	for _, f := range this.OutputActions {
		repeatedStringForOutputActions += strings.Replace(f.String(), "OutputAction", "OutputAction", 1) + ","
	}
	repeatedStringForOutputActions += "}"
	s := strings.Join([]string{`&Probe{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`TracePoint:` + strings.Replace(this.TracePoint.String(), "TracePoint", "TracePoint", 1) + `,`,
		`Args:` + repeatedStringForArgs + `,`,
		`RetVals:` + repeatedStringForRetVals + `,`,
		`FunctionLatency:` + strings.Replace(this.FunctionLatency.String(), "FunctionLatency", "FunctionLatency", 1) + `,`,
		`Structs:` + repeatedStringForStructs + `,`,
		`Vars:` + repeatedStringForVars + `,`,
		`StashMapActions:` + repeatedStringForStashMapActions + `,`,
		`OutputActions:` + repeatedStringForOutputActions + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIr(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ValueType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scalar", wireType)
			}
			var v ScalarType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ScalarType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TypeOneof = &ValueType_Scalar{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeOneof = &ValueType_StructType{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyType == nil {
				m.KeyType = &ValueType{}
			}
			if err := m.KeyType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueType == nil {
				m.ValueType = &ValueType{}
			}
			if err := m.ValueType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &ValueType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StashMapAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StashMapAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StashMapAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyOneof = &StashMapAction_Str{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builtin", wireType)
			}
			var v BPFHelper
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= BPFHelper(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOneof = &StashMapAction_Builtin{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueIds = append(m.ValueIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutputAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueIds = append(m.ValueIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Argument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Argument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Argument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionLatency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionLatency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionLatency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TracePoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracePoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracePoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Struct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Struct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Struct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Struct_Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Struct_Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &ValueType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Variable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Variable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Variable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ScalarType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Register", wireType)
			}
			var v Register
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Register(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BaseAddrOneof = &Variable_Register{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAddrOneof = &Variable_Variable{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Probe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Probe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Probe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Probe_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracePoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TracePoint == nil {
				m.TracePoint = &TracePoint{}
			}
			if err := m.TracePoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &Argument{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetVals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetVals = append(m.RetVals, &ReturnValue{})
			if err := m.RetVals[len(m.RetVals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionLatency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FunctionLatency == nil {
				m.FunctionLatency = &FunctionLatency{}
			}
			if err := m.FunctionLatency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Structs = append(m.Structs, &Struct{})
			if err := m.Structs[len(m.Structs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vars = append(m.Vars, &Variable{})
			if err := m.Vars[len(m.Vars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StashMapActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StashMapActions = append(m.StashMapActions, &StashMapAction{})
			if err := m.StashMapActions[len(m.StashMapActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputActions = append(m.OutputActions, &OutputAction{})
			if err := m.OutputActions[len(m.OutputActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIr = fmt.Errorf("proto: unexpected end of group")
)
