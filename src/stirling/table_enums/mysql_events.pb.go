// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/stirling/table_enums/mysql_events.proto

package mysqlpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Command int32

const (
	Sleep            Command = 0
	Quit             Command = 1
	InitDB           Command = 2
	Query            Command = 3
	FieldList        Command = 4
	CreateDB         Command = 5
	DropDB           Command = 6
	Refresh          Command = 7
	Shutdown         Command = 8
	Statistics       Command = 9
	ProcessInfo      Command = 10
	Connect          Command = 11
	ProcessKill      Command = 12
	Debug            Command = 13
	Ping             Command = 14
	Time             Command = 15
	DelayedInsert    Command = 16
	ChangeUser       Command = 17
	BinlogDump       Command = 18
	TableDump        Command = 19
	ConnectOut       Command = 20
	RegisterSlave    Command = 21
	StmtPrepare      Command = 22
	StmtExecute      Command = 23
	StmtSendLongData Command = 24
	StmtClose        Command = 25
	StmtReset        Command = 26
	SetOption        Command = 27
	StmtFetch        Command = 28
	Daemon           Command = 29
	BinlogDumpGTID   Command = 30
	ResetConnection  Command = 31
)

var Command_name = map[int32]string{
	0:  "Sleep",
	1:  "Quit",
	2:  "InitDB",
	3:  "Query",
	4:  "FieldList",
	5:  "CreateDB",
	6:  "DropDB",
	7:  "Refresh",
	8:  "Shutdown",
	9:  "Statistics",
	10: "ProcessInfo",
	11: "Connect",
	12: "ProcessKill",
	13: "Debug",
	14: "Ping",
	15: "Time",
	16: "DelayedInsert",
	17: "ChangeUser",
	18: "BinlogDump",
	19: "TableDump",
	20: "ConnectOut",
	21: "RegisterSlave",
	22: "StmtPrepare",
	23: "StmtExecute",
	24: "StmtSendLongData",
	25: "StmtClose",
	26: "StmtReset",
	27: "SetOption",
	28: "StmtFetch",
	29: "Daemon",
	30: "BinlogDumpGTID",
	31: "ResetConnection",
}

var Command_value = map[string]int32{
	"Sleep":            0,
	"Quit":             1,
	"InitDB":           2,
	"Query":            3,
	"FieldList":        4,
	"CreateDB":         5,
	"DropDB":           6,
	"Refresh":          7,
	"Shutdown":         8,
	"Statistics":       9,
	"ProcessInfo":      10,
	"Connect":          11,
	"ProcessKill":      12,
	"Debug":            13,
	"Ping":             14,
	"Time":             15,
	"DelayedInsert":    16,
	"ChangeUser":       17,
	"BinlogDump":       18,
	"TableDump":        19,
	"ConnectOut":       20,
	"RegisterSlave":    21,
	"StmtPrepare":      22,
	"StmtExecute":      23,
	"StmtSendLongData": 24,
	"StmtClose":        25,
	"StmtReset":        26,
	"SetOption":        27,
	"StmtFetch":        28,
	"Daemon":           29,
	"BinlogDumpGTID":   30,
	"ResetConnection":  31,
}

func (Command) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a00466d28f092f75, []int{0}
}

type RespStatus int32

const (
	Unknown RespStatus = 0
	None    RespStatus = 1
	OK      RespStatus = 2
	Err     RespStatus = 3
)

var RespStatus_name = map[int32]string{
	0: "Unknown",
	1: "None",
	2: "OK",
	3: "Err",
}

var RespStatus_value = map[string]int32{
	"Unknown": 0,
	"None":    1,
	"OK":      2,
	"Err":     3,
}

func (RespStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a00466d28f092f75, []int{1}
}

func init() {
	proto.RegisterEnum("pl.stirling.tableenums.mysqlpb.Command", Command_name, Command_value)
	proto.RegisterEnum("pl.stirling.tableenums.mysqlpb.RespStatus", RespStatus_name, RespStatus_value)
}

func init() {
	proto.RegisterFile("src/stirling/table_enums/mysql_events.proto", fileDescriptor_a00466d28f092f75)
}

var fileDescriptor_a00466d28f092f75 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x52, 0xcd, 0x52, 0x13, 0x41,
	0x10, 0xde, 0x25, 0x90, 0xc0, 0xf0, 0xd7, 0x0c, 0xf8, 0xaf, 0xe3, 0x1d, 0xab, 0xc2, 0x41, 0xaf,
	0x5e, 0x92, 0x05, 0x2b, 0x05, 0x25, 0x21, 0x1b, 0x2e, 0x5e, 0xa8, 0xcd, 0xa6, 0xd9, 0x4c, 0x39,
	0x3b, 0xb3, 0xce, 0xf4, 0xa2, 0xb9, 0xf9, 0x08, 0x3e, 0x86, 0x8f, 0xe2, 0x31, 0x47, 0x8e, 0x66,
	0x53, 0x56, 0x79, 0xe4, 0x11, 0xac, 0x59, 0x49, 0xe9, 0x6d, 0xbe, 0x9e, 0xaf, 0xbb, 0xbf, 0xfe,
	0xba, 0xd9, 0x2b, 0x67, 0xd3, 0x23, 0x47, 0xd2, 0x2a, 0xa9, 0xb3, 0x23, 0x4a, 0x46, 0x0a, 0xaf,
	0x50, 0x97, 0xb9, 0x3b, 0xca, 0xa7, 0xee, 0x93, 0xba, 0xc2, 0x1b, 0xd4, 0xe4, 0xda, 0x85, 0x35,
	0x64, 0xb8, 0x28, 0x54, 0x7b, 0xc9, 0x6d, 0xd7, 0xdc, 0x9a, 0xda, 0xae, 0xa9, 0xc5, 0xe8, 0xf0,
	0x57, 0x83, 0xb5, 0xba, 0x26, 0xcf, 0x13, 0x3d, 0xe6, 0x1b, 0x6c, 0x2d, 0x56, 0x88, 0x05, 0x04,
	0x7c, 0x9d, 0xad, 0x5e, 0x94, 0x92, 0x20, 0xe4, 0x8c, 0x35, 0x7b, 0x5a, 0x52, 0xd4, 0x81, 0x15,
	0x4f, 0xb8, 0x28, 0xd1, 0x4e, 0xa1, 0xc1, 0xb7, 0xd9, 0xc6, 0x89, 0x44, 0x35, 0x3e, 0x93, 0x8e,
	0x60, 0x95, 0x6f, 0xb1, 0xf5, 0xae, 0xc5, 0x84, 0x30, 0xea, 0xc0, 0x9a, 0xcf, 0x89, 0xac, 0x29,
	0xa2, 0x0e, 0x34, 0xf9, 0x26, 0x6b, 0x0d, 0xf0, 0xda, 0xa2, 0x9b, 0x40, 0xcb, 0xd3, 0xe2, 0x49,
	0x49, 0x63, 0xf3, 0x59, 0xc3, 0x3a, 0xdf, 0x61, 0x2c, 0xa6, 0x84, 0xa4, 0x23, 0x99, 0x3a, 0xd8,
	0xe0, 0xbb, 0x6c, 0xb3, 0x6f, 0x4d, 0x8a, 0xce, 0xf5, 0xf4, 0xb5, 0x01, 0xe6, 0x73, 0xbb, 0x46,
	0x6b, 0x4c, 0x09, 0x36, 0xff, 0xfb, 0x3d, 0x95, 0x4a, 0xc1, 0x96, 0x57, 0x13, 0xe1, 0xa8, 0xcc,
	0x60, 0xdb, 0xcb, 0xed, 0x4b, 0x9d, 0xc1, 0x8e, 0x7f, 0x0d, 0x65, 0x8e, 0xb0, 0xcb, 0xf7, 0xd8,
	0x76, 0x84, 0x2a, 0x99, 0xe2, 0xb8, 0xa7, 0x1d, 0x5a, 0x02, 0xf0, 0x0d, 0xbb, 0x93, 0x44, 0x67,
	0x78, 0xe9, 0xd0, 0xc2, 0x9e, 0xc7, 0x1d, 0xa9, 0x95, 0xc9, 0xa2, 0x32, 0x2f, 0x80, 0xfb, 0xa1,
	0x86, 0xde, 0xa2, 0x1a, 0xee, 0xd7, 0xf4, 0xbf, 0xed, 0xcf, 0x4b, 0x82, 0x03, 0x5f, 0x71, 0x80,
	0x99, 0x74, 0x84, 0x36, 0x56, 0xc9, 0x0d, 0xc2, 0x03, 0x2f, 0x2a, 0xa6, 0x9c, 0xfa, 0x16, 0x8b,
	0xc4, 0x22, 0x3c, 0x5c, 0x06, 0x8e, 0xbf, 0x60, 0x5a, 0x12, 0xc2, 0x23, 0x7e, 0xc0, 0xc0, 0x07,
	0x62, 0xd4, 0xe3, 0x33, 0xa3, 0xb3, 0x28, 0xa1, 0x04, 0x1e, 0xfb, 0x4e, 0x3e, 0xda, 0x55, 0xc6,
	0x21, 0x3c, 0x59, 0xc2, 0x01, 0x3a, 0x24, 0x78, 0x5a, 0x43, 0xa4, 0xf3, 0x82, 0xa4, 0xd1, 0xf0,
	0x6c, 0xf9, 0x7b, 0x82, 0x94, 0x4e, 0xe0, 0x79, 0xed, 0x6e, 0x82, 0xb9, 0xd1, 0xf0, 0x82, 0x73,
	0xb6, 0xf3, 0x6f, 0x82, 0x77, 0xc3, 0x5e, 0x04, 0x82, 0xef, 0xb3, 0xdd, 0xba, 0xd0, 0xbd, 0x76,
	0x5f, 0xe3, 0xe5, 0xe1, 0x1b, 0xc6, 0x06, 0xe8, 0x0a, 0xef, 0x77, 0xe9, 0xbc, 0xb1, 0x97, 0xfa,
	0xa3, 0xf6, 0x6b, 0xa8, 0x77, 0xfd, 0xde, 0x68, 0x84, 0x90, 0x37, 0xd9, 0xca, 0xf9, 0x29, 0xac,
	0xf0, 0x16, 0x6b, 0x1c, 0x5b, 0x0b, 0x8d, 0xce, 0xdb, 0xd9, 0x5c, 0x04, 0xb7, 0x73, 0x11, 0xdc,
	0xcd, 0x45, 0xf8, 0xb5, 0x12, 0xe1, 0xf7, 0x4a, 0x84, 0x3f, 0x2a, 0x11, 0xce, 0x2a, 0x11, 0xfe,
	0xac, 0x44, 0xf8, 0xbb, 0x12, 0xc1, 0x5d, 0x25, 0xc2, 0x6f, 0x0b, 0x11, 0xcc, 0x16, 0x22, 0xb8,
	0x5d, 0x88, 0xe0, 0x43, 0xeb, 0xfe, 0xb8, 0x46, 0xcd, 0xfa, 0x06, 0x5f, 0xff, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x1f, 0x4d, 0x2b, 0x27, 0xb2, 0x02, 0x00, 0x00,
}

func (x Command) String() string {
	s, ok := Command_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RespStatus) String() string {
	s, ok := RespStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
