// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/stirling/dynamic_tracing/ir/sharedpb/shared.proto

package sharedpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Language int32

const (
	AUTO   Language = 0
	C      Language = 1
	CPP    Language = 2
	GOLANG Language = 3
)

var Language_name = map[int32]string{
	0: "AUTO",
	1: "C",
	2: "CPP",
	3: "GOLANG",
}

var Language_value = map[string]int32{
	"AUTO":   0,
	"C":      1,
	"CPP":    2,
	"GOLANG": 3,
}

func (Language) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{0}
}

type BPFHelper int32

const (
	GOID            BPFHelper = 0
	TGID            BPFHelper = 1
	TGID_PID        BPFHelper = 2
	TGID_START_TIME BPFHelper = 3
	KTIME           BPFHelper = 4
)

var BPFHelper_name = map[int32]string{
	0: "GOID",
	1: "TGID",
	2: "TGID_PID",
	3: "TGID_START_TIME",
	4: "KTIME",
}

var BPFHelper_value = map[string]int32{
	"GOID":            0,
	"TGID":            1,
	"TGID_PID":        2,
	"TGID_START_TIME": 3,
	"KTIME":           4,
}

func (BPFHelper) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{1}
}

type ScalarType int32

const (
	UNKNOWN      ScalarType = 0
	BOOL         ScalarType = 100
	SHORT        ScalarType = 200
	USHORT       ScalarType = 201
	INT          ScalarType = 202
	UINT         ScalarType = 203
	LONG         ScalarType = 204
	ULONG        ScalarType = 205
	LONGLONG     ScalarType = 206
	ULONGLONG    ScalarType = 207
	INT8         ScalarType = 300
	INT16        ScalarType = 301
	INT32        ScalarType = 302
	INT64        ScalarType = 303
	UINT8        ScalarType = 304
	UINT16       ScalarType = 305
	UINT32       ScalarType = 306
	UINT64       ScalarType = 307
	CHAR         ScalarType = 400
	UCHAR        ScalarType = 401
	FLOAT        ScalarType = 500
	DOUBLE       ScalarType = 501
	VOID_POINTER ScalarType = 900
	STRING       ScalarType = 1000
	BYTE_ARRAY   ScalarType = 1001
	STRUCT_BLOB  ScalarType = 1100
)

var ScalarType_name = map[int32]string{
	0:    "UNKNOWN",
	100:  "BOOL",
	200:  "SHORT",
	201:  "USHORT",
	202:  "INT",
	203:  "UINT",
	204:  "LONG",
	205:  "ULONG",
	206:  "LONGLONG",
	207:  "ULONGLONG",
	300:  "INT8",
	301:  "INT16",
	302:  "INT32",
	303:  "INT64",
	304:  "UINT8",
	305:  "UINT16",
	306:  "UINT32",
	307:  "UINT64",
	400:  "CHAR",
	401:  "UCHAR",
	500:  "FLOAT",
	501:  "DOUBLE",
	900:  "VOID_POINTER",
	1000: "STRING",
	1001: "BYTE_ARRAY",
	1100: "STRUCT_BLOB",
}

var ScalarType_value = map[string]int32{
	"UNKNOWN":      0,
	"BOOL":         100,
	"SHORT":        200,
	"USHORT":       201,
	"INT":          202,
	"UINT":         203,
	"LONG":         204,
	"ULONG":        205,
	"LONGLONG":     206,
	"ULONGLONG":    207,
	"INT8":         300,
	"INT16":        301,
	"INT32":        302,
	"INT64":        303,
	"UINT8":        304,
	"UINT16":       305,
	"UINT32":       306,
	"UINT64":       307,
	"CHAR":         400,
	"UCHAR":        401,
	"FLOAT":        500,
	"DOUBLE":       501,
	"VOID_POINTER": 900,
	"STRING":       1000,
	"BYTE_ARRAY":   1001,
	"STRUCT_BLOB":  1100,
}

func (ScalarType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{2}
}

type Tracepoint_Type int32

const (
	LOGICAL Tracepoint_Type = 0
	ENTRY   Tracepoint_Type = 1
	RETURN  Tracepoint_Type = 2
)

var Tracepoint_Type_name = map[int32]string{
	0: "LOGICAL",
	1: "ENTRY",
	2: "RETURN",
}

var Tracepoint_Type_value = map[string]int32{
	"LOGICAL": 0,
	"ENTRY":   1,
	"RETURN":  2,
}

func (Tracepoint_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{0, 0}
}

type Condition_Op int32

const (
	NIL   Condition_Op = 0
	EQUAL Condition_Op = 1
)

var Condition_Op_name = map[int32]string{
	0: "NIL",
	1: "EQUAL",
}

var Condition_Op_value = map[string]int32{
	"NIL":   0,
	"EQUAL": 1,
}

func (Condition_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{5, 0}
}

type Tracepoint struct {
	Function *Tracepoint_Function `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	Symbol   string               `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Type     Tracepoint_Type      `protobuf:"varint,2,opt,name=type,proto3,enum=pl.stirling.dynamic_tracing.ir.shared.Tracepoint_Type" json:"type,omitempty"`
}

func (m *Tracepoint) Reset()      { *m = Tracepoint{} }
func (*Tracepoint) ProtoMessage() {}
func (*Tracepoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{0}
}
func (m *Tracepoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tracepoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tracepoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tracepoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracepoint.Merge(m, src)
}
func (m *Tracepoint) XXX_Size() int {
	return m.Size()
}
func (m *Tracepoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracepoint.DiscardUnknown(m)
}

var xxx_messageInfo_Tracepoint proto.InternalMessageInfo

func (m *Tracepoint) GetFunction() *Tracepoint_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (m *Tracepoint) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Tracepoint) GetType() Tracepoint_Type {
	if m != nil {
		return m.Type
	}
	return LOGICAL
}

type Tracepoint_Function struct {
	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParamTypes []string `protobuf:"bytes,2,rep,name=param_types,json=paramTypes,proto3" json:"param_types,omitempty"`
}

func (m *Tracepoint_Function) Reset()      { *m = Tracepoint_Function{} }
func (*Tracepoint_Function) ProtoMessage() {}
func (*Tracepoint_Function) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{0, 0}
}
func (m *Tracepoint_Function) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tracepoint_Function) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tracepoint_Function.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tracepoint_Function) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracepoint_Function.Merge(m, src)
}
func (m *Tracepoint_Function) XXX_Size() int {
	return m.Size()
}
func (m *Tracepoint_Function) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracepoint_Function.DiscardUnknown(m)
}

var xxx_messageInfo_Tracepoint_Function proto.InternalMessageInfo

func (m *Tracepoint_Function) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tracepoint_Function) GetParamTypes() []string {
	if m != nil {
		return m.ParamTypes
	}
	return nil
}

type UPID struct {
	Asid uint32 `protobuf:"varint,1,opt,name=asid,proto3" json:"asid,omitempty"`
	Pid  uint32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	TsNs uint64 `protobuf:"varint,3,opt,name=ts_ns,json=tsNs,proto3" json:"ts_ns,omitempty"`
}

func (m *UPID) Reset()      { *m = UPID{} }
func (*UPID) ProtoMessage() {}
func (*UPID) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{1}
}
func (m *UPID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UPID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UPID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UPID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UPID.Merge(m, src)
}
func (m *UPID) XXX_Size() int {
	return m.Size()
}
func (m *UPID) XXX_DiscardUnknown() {
	xxx_messageInfo_UPID.DiscardUnknown(m)
}

var xxx_messageInfo_UPID proto.InternalMessageInfo

func (m *UPID) GetAsid() uint32 {
	if m != nil {
		return m.Asid
	}
	return 0
}

func (m *UPID) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *UPID) GetTsNs() uint64 {
	if m != nil {
		return m.TsNs
	}
	return 0
}

type DeploymentSpec struct {
	// Types that are valid to be assigned to TargetOneof:
	//	*DeploymentSpec_Path
	//	*DeploymentSpec_Upid
	TargetOneof isDeploymentSpec_TargetOneof `protobuf_oneof:"target_oneof"`
	PathRegexp  string                       `protobuf:"bytes,4,opt,name=path_regexp,json=pathRegexp,proto3" json:"path_regexp,omitempty"`
	// Types that are valid to be assigned to SelectorOneof:
	//	*DeploymentSpec_PodName
	//	*DeploymentSpec_Upid1
	SelectorOneof isDeploymentSpec_SelectorOneof `protobuf_oneof:"selector_oneof"`
	SelectedUpids []*UPID                        `protobuf:"bytes,7,rep,name=selected_upids,json=selectedUpids,proto3" json:"selected_upids,omitempty"`
}

func (m *DeploymentSpec) Reset()      { *m = DeploymentSpec{} }
func (*DeploymentSpec) ProtoMessage() {}
func (*DeploymentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{2}
}
func (m *DeploymentSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentSpec.Merge(m, src)
}
func (m *DeploymentSpec) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentSpec proto.InternalMessageInfo

type isDeploymentSpec_TargetOneof interface {
	isDeploymentSpec_TargetOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDeploymentSpec_SelectorOneof interface {
	isDeploymentSpec_SelectorOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DeploymentSpec_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3,oneof" json:"path,omitempty"`
}
type DeploymentSpec_Upid struct {
	Upid *UPID `protobuf:"bytes,3,opt,name=upid,proto3,oneof" json:"upid,omitempty"`
}
type DeploymentSpec_PodName struct {
	PodName string `protobuf:"bytes,5,opt,name=pod_name,json=podName,proto3,oneof" json:"pod_name,omitempty"`
}
type DeploymentSpec_Upid1 struct {
	Upid1 *UPID `protobuf:"bytes,6,opt,name=upid1,proto3,oneof" json:"upid1,omitempty"`
}

func (*DeploymentSpec_Path) isDeploymentSpec_TargetOneof()      {}
func (*DeploymentSpec_Upid) isDeploymentSpec_TargetOneof()      {}
func (*DeploymentSpec_PodName) isDeploymentSpec_SelectorOneof() {}
func (*DeploymentSpec_Upid1) isDeploymentSpec_SelectorOneof()   {}

func (m *DeploymentSpec) GetTargetOneof() isDeploymentSpec_TargetOneof {
	if m != nil {
		return m.TargetOneof
	}
	return nil
}
func (m *DeploymentSpec) GetSelectorOneof() isDeploymentSpec_SelectorOneof {
	if m != nil {
		return m.SelectorOneof
	}
	return nil
}

func (m *DeploymentSpec) GetPath() string {
	if x, ok := m.GetTargetOneof().(*DeploymentSpec_Path); ok {
		return x.Path
	}
	return ""
}

func (m *DeploymentSpec) GetUpid() *UPID {
	if x, ok := m.GetTargetOneof().(*DeploymentSpec_Upid); ok {
		return x.Upid
	}
	return nil
}

func (m *DeploymentSpec) GetPathRegexp() string {
	if m != nil {
		return m.PathRegexp
	}
	return ""
}

func (m *DeploymentSpec) GetPodName() string {
	if x, ok := m.GetSelectorOneof().(*DeploymentSpec_PodName); ok {
		return x.PodName
	}
	return ""
}

func (m *DeploymentSpec) GetUpid1() *UPID {
	if x, ok := m.GetSelectorOneof().(*DeploymentSpec_Upid1); ok {
		return x.Upid1
	}
	return nil
}

func (m *DeploymentSpec) GetSelectedUpids() []*UPID {
	if m != nil {
		return m.SelectedUpids
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeploymentSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeploymentSpec_Path)(nil),
		(*DeploymentSpec_Upid)(nil),
		(*DeploymentSpec_PodName)(nil),
		(*DeploymentSpec_Upid1)(nil),
	}
}

type VariableType struct {
	// Types that are valid to be assigned to TypeOneof:
	//	*VariableType_Scalar
	//	*VariableType_StructType
	TypeOneof isVariableType_TypeOneof `protobuf_oneof:"type_oneof"`
}

func (m *VariableType) Reset()      { *m = VariableType{} }
func (*VariableType) ProtoMessage() {}
func (*VariableType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{3}
}
func (m *VariableType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VariableType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VariableType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VariableType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariableType.Merge(m, src)
}
func (m *VariableType) XXX_Size() int {
	return m.Size()
}
func (m *VariableType) XXX_DiscardUnknown() {
	xxx_messageInfo_VariableType.DiscardUnknown(m)
}

var xxx_messageInfo_VariableType proto.InternalMessageInfo

type isVariableType_TypeOneof interface {
	isVariableType_TypeOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VariableType_Scalar struct {
	Scalar ScalarType `protobuf:"varint,2,opt,name=scalar,proto3,enum=pl.stirling.dynamic_tracing.ir.shared.ScalarType,oneof" json:"scalar,omitempty"`
}
type VariableType_StructType struct {
	StructType string `protobuf:"bytes,3,opt,name=struct_type,json=structType,proto3,oneof" json:"struct_type,omitempty"`
}

func (*VariableType_Scalar) isVariableType_TypeOneof()     {}
func (*VariableType_StructType) isVariableType_TypeOneof() {}

func (m *VariableType) GetTypeOneof() isVariableType_TypeOneof {
	if m != nil {
		return m.TypeOneof
	}
	return nil
}

func (m *VariableType) GetScalar() ScalarType {
	if x, ok := m.GetTypeOneof().(*VariableType_Scalar); ok {
		return x.Scalar
	}
	return UNKNOWN
}

func (m *VariableType) GetStructType() string {
	if x, ok := m.GetTypeOneof().(*VariableType_StructType); ok {
		return x.StructType
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VariableType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VariableType_Scalar)(nil),
		(*VariableType_StructType)(nil),
	}
}

type Map struct {
	Name      string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	KeyType   *VariableType `protobuf:"bytes,2,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	ValueType *VariableType `protobuf:"bytes,3,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
}

func (m *Map) Reset()      { *m = Map{} }
func (*Map) ProtoMessage() {}
func (*Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{4}
}
func (m *Map) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Map.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Map.Merge(m, src)
}
func (m *Map) XXX_Size() int {
	return m.Size()
}
func (m *Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Map proto.InternalMessageInfo

func (m *Map) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Map) GetKeyType() *VariableType {
	if m != nil {
		return m.KeyType
	}
	return nil
}

func (m *Map) GetValueType() *VariableType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

type Condition struct {
	Op   Condition_Op `protobuf:"varint,1,opt,name=op,proto3,enum=pl.stirling.dynamic_tracing.ir.shared.Condition_Op" json:"op,omitempty"`
	Vars []string     `protobuf:"bytes,2,rep,name=vars,proto3" json:"vars,omitempty"`
}

func (m *Condition) Reset()      { *m = Condition{} }
func (*Condition) ProtoMessage() {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{5}
}
func (m *Condition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return m.Size()
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetOp() Condition_Op {
	if m != nil {
		return m.Op
	}
	return NIL
}

func (m *Condition) GetVars() []string {
	if m != nil {
		return m.Vars
	}
	return nil
}

type Printk struct {
	// Types that are valid to be assigned to ContentOneof:
	//	*Printk_Text
	//	*Printk_Scalar
	ContentOneof isPrintk_ContentOneof `protobuf_oneof:"content_oneof"`
}

func (m *Printk) Reset()      { *m = Printk{} }
func (*Printk) ProtoMessage() {}
func (*Printk) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{6}
}
func (m *Printk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Printk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Printk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Printk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Printk.Merge(m, src)
}
func (m *Printk) XXX_Size() int {
	return m.Size()
}
func (m *Printk) XXX_DiscardUnknown() {
	xxx_messageInfo_Printk.DiscardUnknown(m)
}

var xxx_messageInfo_Printk proto.InternalMessageInfo

type isPrintk_ContentOneof interface {
	isPrintk_ContentOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Printk_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type Printk_Scalar struct {
	Scalar string `protobuf:"bytes,2,opt,name=scalar,proto3,oneof" json:"scalar,omitempty"`
}

func (*Printk_Text) isPrintk_ContentOneof()   {}
func (*Printk_Scalar) isPrintk_ContentOneof() {}

func (m *Printk) GetContentOneof() isPrintk_ContentOneof {
	if m != nil {
		return m.ContentOneof
	}
	return nil
}

func (m *Printk) GetText() string {
	if x, ok := m.GetContentOneof().(*Printk_Text); ok {
		return x.Text
	}
	return ""
}

func (m *Printk) GetScalar() string {
	if x, ok := m.GetContentOneof().(*Printk_Scalar); ok {
		return x.Scalar
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Printk) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Printk_Text)(nil),
		(*Printk_Scalar)(nil),
	}
}

type FunctionLatency struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FunctionLatency) Reset()      { *m = FunctionLatency{} }
func (*FunctionLatency) ProtoMessage() {}
func (*FunctionLatency) Descriptor() ([]byte, []int) {
	return fileDescriptor_b26f0b8c46516e82, []int{7}
}
func (m *FunctionLatency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionLatency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionLatency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionLatency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionLatency.Merge(m, src)
}
func (m *FunctionLatency) XXX_Size() int {
	return m.Size()
}
func (m *FunctionLatency) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionLatency.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionLatency proto.InternalMessageInfo

func (m *FunctionLatency) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("pl.stirling.dynamic_tracing.ir.shared.Language", Language_name, Language_value)
	proto.RegisterEnum("pl.stirling.dynamic_tracing.ir.shared.BPFHelper", BPFHelper_name, BPFHelper_value)
	proto.RegisterEnum("pl.stirling.dynamic_tracing.ir.shared.ScalarType", ScalarType_name, ScalarType_value)
	proto.RegisterEnum("pl.stirling.dynamic_tracing.ir.shared.Tracepoint_Type", Tracepoint_Type_name, Tracepoint_Type_value)
	proto.RegisterEnum("pl.stirling.dynamic_tracing.ir.shared.Condition_Op", Condition_Op_name, Condition_Op_value)
	proto.RegisterType((*Tracepoint)(nil), "pl.stirling.dynamic_tracing.ir.shared.Tracepoint")
	proto.RegisterType((*Tracepoint_Function)(nil), "pl.stirling.dynamic_tracing.ir.shared.Tracepoint.Function")
	proto.RegisterType((*UPID)(nil), "pl.stirling.dynamic_tracing.ir.shared.UPID")
	proto.RegisterType((*DeploymentSpec)(nil), "pl.stirling.dynamic_tracing.ir.shared.DeploymentSpec")
	proto.RegisterType((*VariableType)(nil), "pl.stirling.dynamic_tracing.ir.shared.VariableType")
	proto.RegisterType((*Map)(nil), "pl.stirling.dynamic_tracing.ir.shared.Map")
	proto.RegisterType((*Condition)(nil), "pl.stirling.dynamic_tracing.ir.shared.Condition")
	proto.RegisterType((*Printk)(nil), "pl.stirling.dynamic_tracing.ir.shared.Printk")
	proto.RegisterType((*FunctionLatency)(nil), "pl.stirling.dynamic_tracing.ir.shared.FunctionLatency")
}

func init() {
	proto.RegisterFile("src/stirling/dynamic_tracing/ir/sharedpb/shared.proto", fileDescriptor_b26f0b8c46516e82)
}

var fileDescriptor_b26f0b8c46516e82 = []byte{
	// 1061 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6f, 0xe3, 0xc4,
	0x1b, 0xce, 0xd8, 0xce, 0xd7, 0x9b, 0x36, 0x9d, 0xdf, 0xec, 0x4f, 0x28, 0x02, 0xc9, 0x74, 0x23,
	0x21, 0x55, 0x45, 0x4a, 0x69, 0xbb, 0x54, 0x88, 0xcb, 0x2a, 0x5f, 0x4d, 0x4d, 0x53, 0x3b, 0x4c,
	0xec, 0xa2, 0x72, 0xb1, 0xa6, 0xc9, 0x6c, 0x6b, 0x35, 0xb5, 0x2d, 0xdb, 0x59, 0x35, 0x17, 0xc4,
	0x81, 0x23, 0x87, 0xe5, 0xbf, 0xe0, 0xc0, 0x37, 0xe2, 0xc8, 0x7d, 0x81, 0x05, 0x7a, 0xdc, 0x03,
	0x07, 0x9a, 0x5e, 0x96, 0xdb, 0x1e, 0xe0, 0x8e, 0x66, 0xf2, 0x51, 0x40, 0x1c, 0x52, 0x6e, 0xcf,
	0xf3, 0x7a, 0xde, 0xe7, 0xfd, 0x9a, 0x77, 0x0c, 0xaf, 0xc7, 0x51, 0x6f, 0x23, 0x4e, 0xbc, 0x68,
	0xe0, 0xf9, 0x27, 0x1b, 0xfd, 0x91, 0xcf, 0xce, 0xbd, 0x9e, 0x9b, 0x44, 0xac, 0x27, 0xb8, 0x17,
	0x6d, 0xc4, 0xa7, 0x2c, 0xe2, 0xfd, 0xf0, 0x78, 0x0a, 0x2a, 0x61, 0x14, 0x24, 0x01, 0x79, 0x25,
	0x1c, 0x54, 0x66, 0x5e, 0x95, 0x7f, 0x78, 0x55, 0xbc, 0xa8, 0x32, 0x39, 0x5c, 0xfe, 0x46, 0x01,
	0xb0, 0x23, 0xd6, 0xe3, 0x61, 0xe0, 0xf9, 0x09, 0x39, 0x84, 0xdc, 0x83, 0xa1, 0xdf, 0x4b, 0xbc,
	0xc0, 0x2f, 0xa9, 0xab, 0x68, 0xad, 0xb0, 0xf5, 0x66, 0x65, 0x21, 0xa1, 0xca, 0x8d, 0x48, 0x65,
	0x77, 0xaa, 0x40, 0xe7, 0x5a, 0xe4, 0x05, 0xc8, 0xc4, 0xa3, 0xf3, 0xe3, 0x60, 0x50, 0x42, 0xab,
	0x68, 0x2d, 0x4f, 0xa7, 0x8c, 0xbc, 0x05, 0x5a, 0x32, 0x0a, 0x79, 0x49, 0x59, 0x45, 0x6b, 0xc5,
	0xad, 0x9d, 0xdb, 0xc7, 0xb2, 0x47, 0x21, 0xa7, 0x52, 0xe3, 0xc5, 0xfb, 0x90, 0x9b, 0x45, 0x26,
	0x04, 0x34, 0x9f, 0x9d, 0xf3, 0x69, 0x34, 0x89, 0xc9, 0xcb, 0x50, 0x08, 0x59, 0xc4, 0xce, 0x5d,
	0x71, 0x3a, 0x2e, 0x29, 0xab, 0xea, 0x5a, 0x9e, 0x82, 0x34, 0x09, 0x95, 0xb8, 0xbc, 0x0e, 0x9a,
	0x00, 0xa4, 0x00, 0xd9, 0xb6, 0xd5, 0x32, 0xea, 0xd5, 0x36, 0x4e, 0x91, 0x3c, 0xa4, 0x9b, 0xa6,
	0x4d, 0x8f, 0x30, 0x22, 0x00, 0x19, 0xda, 0xb4, 0x1d, 0x6a, 0x62, 0xa5, 0x5c, 0x05, 0xcd, 0xe9,
	0x18, 0x0d, 0x11, 0x88, 0xc5, 0x5e, 0x5f, 0x06, 0x5a, 0xa6, 0x12, 0x13, 0x0c, 0x6a, 0xe8, 0xf5,
	0x65, 0x4d, 0xcb, 0x54, 0x40, 0x72, 0x07, 0xd2, 0x49, 0xec, 0xfa, 0xb1, 0xec, 0xa9, 0x46, 0xb5,
	0x24, 0x36, 0xe3, 0xf2, 0x58, 0x81, 0x62, 0x83, 0x87, 0x83, 0x60, 0x74, 0xce, 0xfd, 0xa4, 0x1b,
	0xf2, 0x1e, 0xf9, 0x3f, 0x68, 0x21, 0x4b, 0x4e, 0x27, 0x69, 0xef, 0xa5, 0xa8, 0x64, 0xa4, 0x0a,
	0xda, 0x50, 0x08, 0x4e, 0x06, 0xf2, 0xea, 0x82, 0x4d, 0x12, 0xe9, 0x09, 0x09, 0xe1, 0x3a, 0xa9,
	0x3d, 0x39, 0x75, 0x23, 0x7e, 0xc2, 0x2f, 0xc2, 0x92, 0x26, 0xdb, 0x02, 0xc2, 0x44, 0xa5, 0x85,
	0xbc, 0x04, 0xb9, 0x30, 0xe8, 0xbb, 0xb2, 0x69, 0x69, 0x19, 0x1d, 0xd1, 0x6c, 0x18, 0xf4, 0x4d,
	0xd1, 0xb9, 0x3a, 0xa4, 0x85, 0xca, 0x66, 0x29, 0x73, 0xfb, 0x0c, 0x10, 0x9d, 0xf8, 0x12, 0x0a,
	0xc5, 0x98, 0x0f, 0x78, 0x2f, 0xe1, 0x7d, 0x57, 0x58, 0xe2, 0x52, 0x76, 0x55, 0xbd, 0xa5, 0x1a,
	0x5d, 0x9e, 0x49, 0x38, 0x42, 0xa1, 0x56, 0x84, 0xa5, 0x84, 0x45, 0x27, 0x3c, 0x71, 0x03, 0x9f,
	0x07, 0x0f, 0x6a, 0x78, 0x16, 0x23, 0x88, 0x26, 0x96, 0xf2, 0x87, 0x08, 0x96, 0x0e, 0x59, 0xe4,
	0xb1, 0xe3, 0x01, 0x97, 0xc3, 0xdd, 0x87, 0x4c, 0xdc, 0x63, 0x03, 0x16, 0x4d, 0xef, 0xdc, 0xe6,
	0x82, 0xe1, 0xbb, 0xd2, 0x49, 0x48, 0xec, 0xa5, 0xe8, 0x54, 0x82, 0xdc, 0x85, 0x42, 0x9c, 0x44,
	0xc3, 0x5e, 0x22, 0xef, 0x94, 0x1c, 0x90, 0x18, 0x1b, 0x4c, 0x8c, 0xe2, 0x70, 0x6d, 0x09, 0x40,
	0x7c, 0x9b, 0xa6, 0xf3, 0x2d, 0x02, 0xf5, 0x80, 0x85, 0xff, 0x7a, 0x3f, 0x4d, 0xc8, 0x9d, 0xf1,
	0x91, 0x3b, 0xdf, 0x87, 0xc2, 0xd6, 0xf6, 0x82, 0xb9, 0xfd, 0xb5, 0x40, 0x9a, 0x3d, 0xe3, 0x23,
	0x59, 0x29, 0x05, 0x78, 0xc8, 0x06, 0x43, 0x7e, 0x93, 0xdb, 0x7f, 0x54, 0xcc, 0x4b, 0x19, 0x01,
	0xcb, 0xef, 0x41, 0xbe, 0x1e, 0xf8, 0x7d, 0x4f, 0x2e, 0x59, 0x1d, 0x94, 0x20, 0x94, 0x25, 0x14,
	0x17, 0x16, 0x9e, 0x7b, 0x57, 0xac, 0x90, 0x2a, 0x81, 0xec, 0xc4, 0x43, 0x16, 0xcd, 0xd6, 0x51,
	0xe2, 0x72, 0x09, 0x14, 0x2b, 0x24, 0x59, 0x50, 0x4d, 0x63, 0xb6, 0x82, 0x6f, 0x3b, 0xd5, 0x36,
	0x46, 0x65, 0x03, 0x32, 0x9d, 0xc8, 0xf3, 0x93, 0x33, 0xb1, 0x2a, 0x09, 0xbf, 0x48, 0x6e, 0x56,
	0x45, 0x30, 0x52, 0xfa, 0xdb, 0x74, 0xf3, 0x37, 0xa3, 0xaa, 0xad, 0xc0, 0x72, 0x2f, 0xf0, 0x13,
	0xee, 0x4f, 0xef, 0x4a, 0xf9, 0x2e, 0xac, 0xcc, 0x9e, 0x8b, 0x36, 0x4b, 0xb8, 0xdf, 0x1b, 0x91,
	0x22, 0x28, 0xd3, 0x55, 0xce, 0x53, 0xc5, 0xeb, 0xaf, 0xbf, 0x06, 0xb9, 0x36, 0xf3, 0x4f, 0x86,
	0xec, 0x84, 0x93, 0x1c, 0x68, 0x55, 0xc7, 0xb6, 0x70, 0x8a, 0xa4, 0x01, 0xd5, 0x31, 0x12, 0xe9,
	0xd5, 0x3b, 0x1d, 0xac, 0x88, 0x67, 0xa1, 0x65, 0xb5, 0xab, 0x66, 0x0b, 0xab, 0xeb, 0x07, 0x90,
	0xaf, 0x75, 0x76, 0xf7, 0xf8, 0x20, 0xe4, 0x91, 0x70, 0x69, 0x59, 0x46, 0x03, 0xa7, 0x04, 0xb2,
	0x5b, 0x46, 0x03, 0x23, 0xb2, 0x04, 0x39, 0x81, 0xdc, 0x8e, 0xd1, 0xc0, 0x0a, 0xb9, 0x03, 0x2b,
	0x92, 0x75, 0xed, 0x2a, 0xb5, 0x5d, 0xdb, 0x38, 0x68, 0x62, 0x55, 0x94, 0xbb, 0x2f, 0xa1, 0xb6,
	0xfe, 0x8b, 0x02, 0x70, 0x73, 0xf1, 0xc4, 0xc3, 0xe4, 0x98, 0xfb, 0xa6, 0xf5, 0x8e, 0x39, 0xd1,
	0xac, 0x59, 0x56, 0x1b, 0xf7, 0x09, 0x40, 0xba, 0xbb, 0x67, 0x51, 0x1b, 0x3f, 0x46, 0xa4, 0x00,
	0x19, 0x67, 0x42, 0xbe, 0x43, 0x24, 0x07, 0xaa, 0x61, 0xda, 0xf8, 0x7b, 0x44, 0xf2, 0xa0, 0x39,
	0x02, 0xfe, 0x20, 0x61, 0xdb, 0x32, 0x5b, 0xf8, 0x89, 0x78, 0xd0, 0xd2, 0x8e, 0xc4, 0x3f, 0x22,
	0xb2, 0x0c, 0x39, 0x01, 0x25, 0xfd, 0x09, 0x91, 0x22, 0xe4, 0x9d, 0x39, 0xff, 0x59, 0x7a, 0x19,
	0xa6, 0xfd, 0x06, 0xfe, 0x44, 0xd4, 0x9b, 0x36, 0x4c, 0x7b, 0x73, 0x07, 0x7f, 0x3a, 0xc3, 0xdb,
	0x5b, 0xf8, 0xb3, 0x19, 0xde, 0xb9, 0x87, 0x3f, 0x97, 0xd8, 0x91, 0xe7, 0xbf, 0x50, 0x64, 0x4a,
	0x13, 0x87, 0x2f, 0xe7, 0x64, 0x7b, 0x0b, 0x7f, 0x35, 0x27, 0x3b, 0xf7, 0xf0, 0xd7, 0x8a, 0x88,
	0x50, 0xdf, 0xab, 0x52, 0xfc, 0x48, 0x95, 0xde, 0x12, 0x7f, 0x24, 0xf1, 0x6e, 0xdb, 0xaa, 0xda,
	0xf8, 0x77, 0x55, 0x9c, 0x6f, 0x58, 0x4e, 0xad, 0xdd, 0xc4, 0x7f, 0xa8, 0xe4, 0x7f, 0xb0, 0x74,
	0x68, 0x89, 0x4e, 0x5a, 0x86, 0x69, 0x37, 0x29, 0xfe, 0x20, 0x2b, 0xbe, 0x77, 0x6d, 0x6a, 0x98,
	0x2d, 0xfc, 0x2c, 0x4b, 0x56, 0x00, 0x6a, 0x47, 0x76, 0xd3, 0xad, 0x52, 0x5a, 0x3d, 0xc2, 0xbf,
	0x65, 0x09, 0x86, 0x42, 0xd7, 0xa6, 0x4e, 0xdd, 0x76, 0x6b, 0x6d, 0xab, 0x86, 0x9f, 0xe4, 0x6a,
	0xc3, 0xcb, 0x2b, 0x3d, 0xf5, 0xf4, 0x4a, 0x4f, 0x3d, 0xbf, 0xd2, 0xd1, 0xfb, 0x63, 0x1d, 0x7d,
	0x3c, 0xd6, 0xd1, 0xe3, 0xb1, 0x8e, 0x2e, 0xc7, 0x3a, 0xfa, 0x75, 0xac, 0xa3, 0x67, 0x63, 0x3d,
	0xf5, 0x7c, 0xac, 0xa3, 0x47, 0xd7, 0x7a, 0xea, 0xf2, 0x5a, 0x4f, 0x3d, 0xbd, 0xd6, 0x53, 0xef,
	0xde, 0x0f, 0xbd, 0x0b, 0x8f, 0x0f, 0xd8, 0x71, 0x5c, 0x61, 0xde, 0xc6, 0x9c, 0x6c, 0x2c, 0xfa,
	0x9f, 0x3e, 0xce, 0xc8, 0x3f, 0xf4, 0xf6, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0xc4, 0x98,
	0x9f, 0xda, 0x07, 0x00, 0x00,
}

func (x Language) String() string {
	s, ok := Language_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BPFHelper) String() string {
	s, ok := BPFHelper_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ScalarType) String() string {
	s, ok := ScalarType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Tracepoint_Type) String() string {
	s, ok := Tracepoint_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Condition_Op) String() string {
	s, ok := Condition_Op_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Tracepoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tracepoint)
	if !ok {
		that2, ok := that.(Tracepoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Function.Equal(that1.Function) {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Tracepoint_Function) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tracepoint_Function)
	if !ok {
		that2, ok := that.(Tracepoint_Function)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ParamTypes) != len(that1.ParamTypes) {
		return false
	}
	for i := range this.ParamTypes {
		if this.ParamTypes[i] != that1.ParamTypes[i] {
			return false
		}
	}
	return true
}
func (this *UPID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UPID)
	if !ok {
		that2, ok := that.(UPID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Asid != that1.Asid {
		return false
	}
	if this.Pid != that1.Pid {
		return false
	}
	if this.TsNs != that1.TsNs {
		return false
	}
	return true
}
func (this *DeploymentSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentSpec)
	if !ok {
		that2, ok := that.(DeploymentSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TargetOneof == nil {
		if this.TargetOneof != nil {
			return false
		}
	} else if this.TargetOneof == nil {
		return false
	} else if !this.TargetOneof.Equal(that1.TargetOneof) {
		return false
	}
	if this.PathRegexp != that1.PathRegexp {
		return false
	}
	if that1.SelectorOneof == nil {
		if this.SelectorOneof != nil {
			return false
		}
	} else if this.SelectorOneof == nil {
		return false
	} else if !this.SelectorOneof.Equal(that1.SelectorOneof) {
		return false
	}
	if len(this.SelectedUpids) != len(that1.SelectedUpids) {
		return false
	}
	for i := range this.SelectedUpids {
		if !this.SelectedUpids[i].Equal(that1.SelectedUpids[i]) {
			return false
		}
	}
	return true
}
func (this *DeploymentSpec_Path) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentSpec_Path)
	if !ok {
		that2, ok := that.(DeploymentSpec_Path)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *DeploymentSpec_Upid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentSpec_Upid)
	if !ok {
		that2, ok := that.(DeploymentSpec_Upid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Upid.Equal(that1.Upid) {
		return false
	}
	return true
}
func (this *DeploymentSpec_PodName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentSpec_PodName)
	if !ok {
		that2, ok := that.(DeploymentSpec_PodName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PodName != that1.PodName {
		return false
	}
	return true
}
func (this *DeploymentSpec_Upid1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentSpec_Upid1)
	if !ok {
		that2, ok := that.(DeploymentSpec_Upid1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Upid1.Equal(that1.Upid1) {
		return false
	}
	return true
}
func (this *VariableType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VariableType)
	if !ok {
		that2, ok := that.(VariableType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TypeOneof == nil {
		if this.TypeOneof != nil {
			return false
		}
	} else if this.TypeOneof == nil {
		return false
	} else if !this.TypeOneof.Equal(that1.TypeOneof) {
		return false
	}
	return true
}
func (this *VariableType_Scalar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VariableType_Scalar)
	if !ok {
		that2, ok := that.(VariableType_Scalar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Scalar != that1.Scalar {
		return false
	}
	return true
}
func (this *VariableType_StructType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VariableType_StructType)
	if !ok {
		that2, ok := that.(VariableType_StructType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StructType != that1.StructType {
		return false
	}
	return true
}
func (this *Map) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Map)
	if !ok {
		that2, ok := that.(Map)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.KeyType.Equal(that1.KeyType) {
		return false
	}
	if !this.ValueType.Equal(that1.ValueType) {
		return false
	}
	return true
}
func (this *Condition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Condition)
	if !ok {
		that2, ok := that.(Condition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if len(this.Vars) != len(that1.Vars) {
		return false
	}
	for i := range this.Vars {
		if this.Vars[i] != that1.Vars[i] {
			return false
		}
	}
	return true
}
func (this *Printk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Printk)
	if !ok {
		that2, ok := that.(Printk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ContentOneof == nil {
		if this.ContentOneof != nil {
			return false
		}
	} else if this.ContentOneof == nil {
		return false
	} else if !this.ContentOneof.Equal(that1.ContentOneof) {
		return false
	}
	return true
}
func (this *Printk_Text) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Printk_Text)
	if !ok {
		that2, ok := that.(Printk_Text)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *Printk_Scalar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Printk_Scalar)
	if !ok {
		that2, ok := that.(Printk_Scalar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Scalar != that1.Scalar {
		return false
	}
	return true
}
func (this *FunctionLatency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FunctionLatency)
	if !ok {
		that2, ok := that.(FunctionLatency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Tracepoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sharedpb.Tracepoint{")
	if this.Function != nil {
		s = append(s, "Function: "+fmt.Sprintf("%#v", this.Function)+",\n")
	}
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tracepoint_Function) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sharedpb.Tracepoint_Function{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ParamTypes: "+fmt.Sprintf("%#v", this.ParamTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UPID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sharedpb.UPID{")
	s = append(s, "Asid: "+fmt.Sprintf("%#v", this.Asid)+",\n")
	s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	s = append(s, "TsNs: "+fmt.Sprintf("%#v", this.TsNs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&sharedpb.DeploymentSpec{")
	if this.TargetOneof != nil {
		s = append(s, "TargetOneof: "+fmt.Sprintf("%#v", this.TargetOneof)+",\n")
	}
	s = append(s, "PathRegexp: "+fmt.Sprintf("%#v", this.PathRegexp)+",\n")
	if this.SelectorOneof != nil {
		s = append(s, "SelectorOneof: "+fmt.Sprintf("%#v", this.SelectorOneof)+",\n")
	}
	if this.SelectedUpids != nil {
		s = append(s, "SelectedUpids: "+fmt.Sprintf("%#v", this.SelectedUpids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentSpec_Path) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedpb.DeploymentSpec_Path{` +
		`Path:` + fmt.Sprintf("%#v", this.Path) + `}`}, ", ")
	return s
}
func (this *DeploymentSpec_Upid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedpb.DeploymentSpec_Upid{` +
		`Upid:` + fmt.Sprintf("%#v", this.Upid) + `}`}, ", ")
	return s
}
func (this *DeploymentSpec_PodName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedpb.DeploymentSpec_PodName{` +
		`PodName:` + fmt.Sprintf("%#v", this.PodName) + `}`}, ", ")
	return s
}
func (this *DeploymentSpec_Upid1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedpb.DeploymentSpec_Upid1{` +
		`Upid1:` + fmt.Sprintf("%#v", this.Upid1) + `}`}, ", ")
	return s
}
func (this *VariableType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sharedpb.VariableType{")
	if this.TypeOneof != nil {
		s = append(s, "TypeOneof: "+fmt.Sprintf("%#v", this.TypeOneof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VariableType_Scalar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedpb.VariableType_Scalar{` +
		`Scalar:` + fmt.Sprintf("%#v", this.Scalar) + `}`}, ", ")
	return s
}
func (this *VariableType_StructType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedpb.VariableType_StructType{` +
		`StructType:` + fmt.Sprintf("%#v", this.StructType) + `}`}, ", ")
	return s
}
func (this *Map) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sharedpb.Map{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.KeyType != nil {
		s = append(s, "KeyType: "+fmt.Sprintf("%#v", this.KeyType)+",\n")
	}
	if this.ValueType != nil {
		s = append(s, "ValueType: "+fmt.Sprintf("%#v", this.ValueType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Condition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sharedpb.Condition{")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "Vars: "+fmt.Sprintf("%#v", this.Vars)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Printk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sharedpb.Printk{")
	if this.ContentOneof != nil {
		s = append(s, "ContentOneof: "+fmt.Sprintf("%#v", this.ContentOneof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Printk_Text) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedpb.Printk_Text{` +
		`Text:` + fmt.Sprintf("%#v", this.Text) + `}`}, ", ")
	return s
}
func (this *Printk_Scalar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sharedpb.Printk_Scalar{` +
		`Scalar:` + fmt.Sprintf("%#v", this.Scalar) + `}`}, ", ")
	return s
}
func (this *FunctionLatency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sharedpb.FunctionLatency{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringShared(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Tracepoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tracepoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tracepoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Function != nil {
		{
			size, err := m.Function.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintShared(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tracepoint_Function) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tracepoint_Function) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tracepoint_Function) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamTypes) > 0 {
		for iNdEx := len(m.ParamTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ParamTypes[iNdEx])
			copy(dAtA[i:], m.ParamTypes[iNdEx])
			i = encodeVarintShared(dAtA, i, uint64(len(m.ParamTypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintShared(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UPID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UPID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UPID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TsNs != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.TsNs))
		i--
		dAtA[i] = 0x18
	}
	if m.Pid != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.Asid != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Asid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SelectedUpids) > 0 {
		for iNdEx := len(m.SelectedUpids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelectedUpids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShared(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.SelectorOneof != nil {
		{
			size := m.SelectorOneof.Size()
			i -= size
			if _, err := m.SelectorOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.PathRegexp) > 0 {
		i -= len(m.PathRegexp)
		copy(dAtA[i:], m.PathRegexp)
		i = encodeVarintShared(dAtA, i, uint64(len(m.PathRegexp)))
		i--
		dAtA[i] = 0x22
	}
	if m.TargetOneof != nil {
		{
			size := m.TargetOneof.Size()
			i -= size
			if _, err := m.TargetOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentSpec_Path) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentSpec_Path) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintShared(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *DeploymentSpec_Upid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentSpec_Upid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Upid != nil {
		{
			size, err := m.Upid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DeploymentSpec_PodName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentSpec_PodName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PodName)
	copy(dAtA[i:], m.PodName)
	i = encodeVarintShared(dAtA, i, uint64(len(m.PodName)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *DeploymentSpec_Upid1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentSpec_Upid1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Upid1 != nil {
		{
			size, err := m.Upid1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VariableType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VariableType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VariableType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeOneof != nil {
		{
			size := m.TypeOneof.Size()
			i -= size
			if _, err := m.TypeOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VariableType_Scalar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VariableType_Scalar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintShared(dAtA, i, uint64(m.Scalar))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *VariableType_StructType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VariableType_StructType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StructType)
	copy(dAtA[i:], m.StructType)
	i = encodeVarintShared(dAtA, i, uint64(len(m.StructType)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Map) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueType != nil {
		{
			size, err := m.ValueType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyType != nil {
		{
			size, err := m.KeyType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintShared(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Condition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Condition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vars) > 0 {
		for iNdEx := len(m.Vars) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Vars[iNdEx])
			copy(dAtA[i:], m.Vars[iNdEx])
			i = encodeVarintShared(dAtA, i, uint64(len(m.Vars[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Op != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Printk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Printk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Printk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContentOneof != nil {
		{
			size := m.ContentOneof.Size()
			i -= size
			if _, err := m.ContentOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Printk_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Printk_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintShared(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Printk_Scalar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Printk_Scalar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Scalar)
	copy(dAtA[i:], m.Scalar)
	i = encodeVarintShared(dAtA, i, uint64(len(m.Scalar)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *FunctionLatency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionLatency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionLatency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintShared(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintShared(dAtA []byte, offset int, v uint64) int {
	offset -= sovShared(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tracepoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovShared(uint64(m.Type))
	}
	if m.Function != nil {
		l = m.Function.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	return n
}

func (m *Tracepoint_Function) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	if len(m.ParamTypes) > 0 {
		for _, s := range m.ParamTypes {
			l = len(s)
			n += 1 + l + sovShared(uint64(l))
		}
	}
	return n
}

func (m *UPID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asid != 0 {
		n += 1 + sovShared(uint64(m.Asid))
	}
	if m.Pid != 0 {
		n += 1 + sovShared(uint64(m.Pid))
	}
	if m.TsNs != 0 {
		n += 1 + sovShared(uint64(m.TsNs))
	}
	return n
}

func (m *DeploymentSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetOneof != nil {
		n += m.TargetOneof.Size()
	}
	l = len(m.PathRegexp)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	if m.SelectorOneof != nil {
		n += m.SelectorOneof.Size()
	}
	if len(m.SelectedUpids) > 0 {
		for _, e := range m.SelectedUpids {
			l = e.Size()
			n += 1 + l + sovShared(uint64(l))
		}
	}
	return n
}

func (m *DeploymentSpec_Path) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovShared(uint64(l))
	return n
}
func (m *DeploymentSpec_Upid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Upid != nil {
		l = m.Upid.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	return n
}
func (m *DeploymentSpec_PodName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodName)
	n += 1 + l + sovShared(uint64(l))
	return n
}
func (m *DeploymentSpec_Upid1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Upid1 != nil {
		l = m.Upid1.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	return n
}
func (m *VariableType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeOneof != nil {
		n += m.TypeOneof.Size()
	}
	return n
}

func (m *VariableType_Scalar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovShared(uint64(m.Scalar))
	return n
}
func (m *VariableType_StructType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StructType)
	n += 1 + l + sovShared(uint64(l))
	return n
}
func (m *Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	if m.KeyType != nil {
		l = m.KeyType.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	if m.ValueType != nil {
		l = m.ValueType.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	return n
}

func (m *Condition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovShared(uint64(m.Op))
	}
	if len(m.Vars) > 0 {
		for _, s := range m.Vars {
			l = len(s)
			n += 1 + l + sovShared(uint64(l))
		}
	}
	return n
}

func (m *Printk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContentOneof != nil {
		n += m.ContentOneof.Size()
	}
	return n
}

func (m *Printk_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovShared(uint64(l))
	return n
}
func (m *Printk_Scalar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Scalar)
	n += 1 + l + sovShared(uint64(l))
	return n
}
func (m *FunctionLatency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	return n
}

func sovShared(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShared(x uint64) (n int) {
	return sovShared(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Tracepoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tracepoint{`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Function:` + strings.Replace(fmt.Sprintf("%v", this.Function), "Tracepoint_Function", "Tracepoint_Function", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tracepoint_Function) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tracepoint_Function{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParamTypes:` + fmt.Sprintf("%v", this.ParamTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UPID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UPID{`,
		`Asid:` + fmt.Sprintf("%v", this.Asid) + `,`,
		`Pid:` + fmt.Sprintf("%v", this.Pid) + `,`,
		`TsNs:` + fmt.Sprintf("%v", this.TsNs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSelectedUpids := "[]*UPID{"
	for _, f := range this.SelectedUpids {
		repeatedStringForSelectedUpids += strings.Replace(f.String(), "UPID", "UPID", 1) + ","
	}
	repeatedStringForSelectedUpids += "}"
	s := strings.Join([]string{`&DeploymentSpec{`,
		`TargetOneof:` + fmt.Sprintf("%v", this.TargetOneof) + `,`,
		`PathRegexp:` + fmt.Sprintf("%v", this.PathRegexp) + `,`,
		`SelectorOneof:` + fmt.Sprintf("%v", this.SelectorOneof) + `,`,
		`SelectedUpids:` + repeatedStringForSelectedUpids + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentSpec_Path) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentSpec_Path{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentSpec_Upid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentSpec_Upid{`,
		`Upid:` + strings.Replace(fmt.Sprintf("%v", this.Upid), "UPID", "UPID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentSpec_PodName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentSpec_PodName{`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentSpec_Upid1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentSpec_Upid1{`,
		`Upid1:` + strings.Replace(fmt.Sprintf("%v", this.Upid1), "UPID", "UPID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VariableType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VariableType{`,
		`TypeOneof:` + fmt.Sprintf("%v", this.TypeOneof) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VariableType_Scalar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VariableType_Scalar{`,
		`Scalar:` + fmt.Sprintf("%v", this.Scalar) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VariableType_StructType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VariableType_StructType{`,
		`StructType:` + fmt.Sprintf("%v", this.StructType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Map) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Map{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`KeyType:` + strings.Replace(this.KeyType.String(), "VariableType", "VariableType", 1) + `,`,
		`ValueType:` + strings.Replace(this.ValueType.String(), "VariableType", "VariableType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Condition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Condition{`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Vars:` + fmt.Sprintf("%v", this.Vars) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Printk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Printk{`,
		`ContentOneof:` + fmt.Sprintf("%v", this.ContentOneof) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Printk_Text) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Printk_Text{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Printk_Scalar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Printk_Scalar{`,
		`Scalar:` + fmt.Sprintf("%v", this.Scalar) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FunctionLatency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FunctionLatency{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringShared(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Tracepoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tracepoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tracepoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Tracepoint_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Function == nil {
				m.Function = &Tracepoint_Function{}
			}
			if err := m.Function.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tracepoint_Function) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Function: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Function: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamTypes = append(m.ParamTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UPID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UPID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UPID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asid", wireType)
			}
			m.Asid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Asid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsNs", wireType)
			}
			m.TsNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsNs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetOneof = &DeploymentSpec_Path{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UPID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TargetOneof = &DeploymentSpec_Upid{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathRegexp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathRegexp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectorOneof = &DeploymentSpec_PodName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upid1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UPID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SelectorOneof = &DeploymentSpec_Upid1{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedUpids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectedUpids = append(m.SelectedUpids, &UPID{})
			if err := m.SelectedUpids[len(m.SelectedUpids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VariableType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VariableType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VariableType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scalar", wireType)
			}
			var v ScalarType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ScalarType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TypeOneof = &VariableType_Scalar{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeOneof = &VariableType_StructType{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyType == nil {
				m.KeyType = &VariableType{}
			}
			if err := m.KeyType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueType == nil {
				m.ValueType = &VariableType{}
			}
			if err := m.ValueType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= Condition_Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vars = append(m.Vars, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Printk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Printk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Printk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentOneof = &Printk_Text{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scalar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentOneof = &Printk_Scalar{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionLatency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionLatency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionLatency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShared(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShared
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShared
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShared
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShared
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShared        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShared          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShared = fmt.Errorf("proto: unexpected end of group")
)
