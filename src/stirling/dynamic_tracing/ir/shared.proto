syntax = "proto3";

package pl.stirling.dynamic_tracing.ir.shared;

import "src/shared/types/proto/types.proto";

// Describes where to attach a probe.
message TracePoint {
  string symbol = 1;

  enum Type {
    // Only for logical IR.
    LOGICAL = 0;

    // Intermediate and physical IR uses this to specify a BPF entry probe.
    ENTRY = 1;

    // Intermediate and physical IR uses this to specify a BPF return probe.
    RETURN = 2;
  }

  // This has to be LOGICAL for logical IR.
  Type type = 2;
}

message BinarySpec {
  oneof target_oneof {
    // The path of the executable file.
    string path = 1;

    // The UPID of a running process.
    pl.types.UPID upid = 3;
  }

  enum Language {
    // Automatically infer the language (default).
    AUTO = 0;
    C = 1;
    CPP = 2;
    GOLANG = 3;
  }

  // The language in which the binary was written.
  // For now, must manually specify the language, so please avoid AUTO.
  Language language = 2;
}

// All enum values must be consecutive, as they are used as array index in codegen.
enum BPFHelper {
  GOID = 0;
  TGID = 1;
  TGID_PID = 2;
  TGID_START_TIME = 3;

  // Return the kernel time in nanoseconds.
  KTIME = 4;
}

enum ScalarType {
  BOOL = 0;
  INT = 1;
  INT8 = 2;
  INT16 = 3;
  INT32 = 4;
  INT64 = 5;
  UINT = 6;
  UINT8 = 7;
  UINT16 = 8;
  UINT32 = 9;
  UINT64 = 10;
  FLOAT = 11;
  DOUBLE = 12;
  VOID_POINTER = 13;
}

// Wraps an oneof field which can be either scalar or struct.
message VariableType {
  oneof type_oneof {
    ScalarType scalar = 2;
    string struct_type = 3;
  }
}

// Describe a BPF map.
// Corresponds to px.Map().
message Map {
  string name = 1;

  // TODO(yzhao): Remove the following 2 lines and create PerfBuffer in physical.proto with them.
  VariableType key_type = 2; // Exclusive to physical IR.
  VariableType value_type = 3; // Exclusive to physical IR.
}

// Describes the structure of the data Output.
// Corresponds to px.Output().
message Output {
  string name = 1;

  repeated string fields = 2;

  // TODO(yzhao): Remove this and create PerfBuffer in physical.proto with it.
  VariableType type = 3;  // Exclusive to physical IR.
}

// Describes a condition to be checked.
message Condition {
  enum Op {
    // NIL means this condition should be ignored.
    NIL = 0;
    EQUAL = 1;
  }

  // Describes the operation performed on the variables listed below.
  Op op = 1;

  // List variables used in the operation.
  repeated string vars = 2;
}

// bpf_trace_printk() on a text.
message Printk {
  oneof content_oneof {
    // A piece of hardcoded text.
    string text = 1;

    // Another ScalarVariable, cannot be StructVariable.
    string scalar = 2;
  }
}
