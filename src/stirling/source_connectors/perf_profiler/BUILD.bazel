package(default_visibility = ["//visibility:public"])

load("//bazel:pl_build_system.bzl", "pl_cc_binary", "pl_cc_library", "pl_cc_test", "pl_cc_test_library")

pl_cc_library(
    name = "cc_library",
    srcs = glob(
        ["*.cc"],
        exclude = [
            "**/*_test.cc",
            "predictable_stack_traces_app.cc",
        ],
    ),
    hdrs = glob(["*.h"]),
    deps = [
        "//src/stirling/bpf_tools:cc_library",
        "//src/stirling/core:cc_library",
        "//src/stirling/source_connectors/perf_profiler/bcc_bpf:profiler",
        "//src/stirling/source_connectors/perf_profiler/bcc_bpf_intf:cc_library",
        "//src/stirling/utils:cc_library",
    ],
)

# We build predictable_stack_traces_app with clang++ regardless of the bazel config.
# This is test data, so we want deterministic debug symbols.
genrule(
    name = "predictable_stack_traces_app_cpp",
    srcs = ["predictable_stack_traces_app.cc"],
    outs = ["predictable_stack_traces_app"],
    # -O0: Disables optimization which in turn disables inlining.
    # -g: Produces dwarf information.
    cmd = "clang++ -O0 -g -o $@ $<",
)

pl_cc_test(
    name = "symbolizer_test",
    srcs = ["symbolizer_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "perf_profiler_test",
    timeout = "moderate",
    srcs = ["perf_profiler_test.cc"],
    data = [":predictable_stack_traces_app_cpp"],
    tags = [
        "exclusive",
        "no_asan",
        "requires_bpf",
    ],
    deps = [
        ":cc_library",
        "//src/common/exec:cc_library",
        "//src/common/testing/test_utils:cc_library",
        "//src/stirling/testing:cc_library",
    ],
)
