// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/data_collector/proto/canonical_message.proto

package canonical

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Canonical struct {
	TimeStamp            int64    `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	Data1                float64  `protobuf:"fixed64,2,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2                int64    `protobuf:"varint,3,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Canonical) Reset()      { *m = Canonical{} }
func (*Canonical) ProtoMessage() {}
func (*Canonical) Descriptor() ([]byte, []int) {
	return fileDescriptor_canonical_message_ce31c3f2b8165f6a, []int{0}
}
func (m *Canonical) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Canonical) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Canonical.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Canonical) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Canonical.Merge(dst, src)
}
func (m *Canonical) XXX_Size() int {
	return m.Size()
}
func (m *Canonical) XXX_DiscardUnknown() {
	xxx_messageInfo_Canonical.DiscardUnknown(m)
}

var xxx_messageInfo_Canonical proto.InternalMessageInfo

func (m *Canonical) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Canonical) GetData1() float64 {
	if m != nil {
		return m.Data1
	}
	return 0
}

func (m *Canonical) GetData2() int64 {
	if m != nil {
		return m.Data2
	}
	return 0
}

type CanonicalRepeatedColumn struct {
	TimeStamp            []int64   `protobuf:"varint,1,rep,packed,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Data1                []float64 `protobuf:"fixed64,2,rep,packed,name=data1" json:"data1,omitempty"`
	Data2                []int64   `protobuf:"varint,3,rep,packed,name=data2" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CanonicalRepeatedColumn) Reset()      { *m = CanonicalRepeatedColumn{} }
func (*CanonicalRepeatedColumn) ProtoMessage() {}
func (*CanonicalRepeatedColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_canonical_message_ce31c3f2b8165f6a, []int{1}
}
func (m *CanonicalRepeatedColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanonicalRepeatedColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanonicalRepeatedColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CanonicalRepeatedColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanonicalRepeatedColumn.Merge(dst, src)
}
func (m *CanonicalRepeatedColumn) XXX_Size() int {
	return m.Size()
}
func (m *CanonicalRepeatedColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_CanonicalRepeatedColumn.DiscardUnknown(m)
}

var xxx_messageInfo_CanonicalRepeatedColumn proto.InternalMessageInfo

func (m *CanonicalRepeatedColumn) GetTimeStamp() []int64 {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

func (m *CanonicalRepeatedColumn) GetData1() []float64 {
	if m != nil {
		return m.Data1
	}
	return nil
}

func (m *CanonicalRepeatedColumn) GetData2() []int64 {
	if m != nil {
		return m.Data2
	}
	return nil
}

type CanonincalStream struct {
	DataStream           []*Canonical `protobuf:"bytes,1,rep,name=data_stream,json=dataStream" json:"data_stream,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CanonincalStream) Reset()      { *m = CanonincalStream{} }
func (*CanonincalStream) ProtoMessage() {}
func (*CanonincalStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_canonical_message_ce31c3f2b8165f6a, []int{2}
}
func (m *CanonincalStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanonincalStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanonincalStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CanonincalStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanonincalStream.Merge(dst, src)
}
func (m *CanonincalStream) XXX_Size() int {
	return m.Size()
}
func (m *CanonincalStream) XXX_DiscardUnknown() {
	xxx_messageInfo_CanonincalStream.DiscardUnknown(m)
}

var xxx_messageInfo_CanonincalStream proto.InternalMessageInfo

func (m *CanonincalStream) GetDataStream() []*Canonical {
	if m != nil {
		return m.DataStream
	}
	return nil
}

func init() {
	proto.RegisterType((*Canonical)(nil), "pl.canonical_message.Canonical")
	proto.RegisterType((*CanonicalRepeatedColumn)(nil), "pl.canonical_message.CanonicalRepeatedColumn")
	proto.RegisterType((*CanonincalStream)(nil), "pl.canonical_message.CanonincalStream")
}
func (this *Canonical) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Canonical)
	if !ok {
		that2, ok := that.(Canonical)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeStamp != that1.TimeStamp {
		return false
	}
	if this.Data1 != that1.Data1 {
		return false
	}
	if this.Data2 != that1.Data2 {
		return false
	}
	return true
}
func (this *CanonicalRepeatedColumn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CanonicalRepeatedColumn)
	if !ok {
		that2, ok := that.(CanonicalRepeatedColumn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TimeStamp) != len(that1.TimeStamp) {
		return false
	}
	for i := range this.TimeStamp {
		if this.TimeStamp[i] != that1.TimeStamp[i] {
			return false
		}
	}
	if len(this.Data1) != len(that1.Data1) {
		return false
	}
	for i := range this.Data1 {
		if this.Data1[i] != that1.Data1[i] {
			return false
		}
	}
	if len(this.Data2) != len(that1.Data2) {
		return false
	}
	for i := range this.Data2 {
		if this.Data2[i] != that1.Data2[i] {
			return false
		}
	}
	return true
}
func (this *CanonincalStream) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CanonincalStream)
	if !ok {
		that2, ok := that.(CanonincalStream)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DataStream) != len(that1.DataStream) {
		return false
	}
	for i := range this.DataStream {
		if !this.DataStream[i].Equal(that1.DataStream[i]) {
			return false
		}
	}
	return true
}
func (this *Canonical) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&canonical.Canonical{")
	s = append(s, "TimeStamp: "+fmt.Sprintf("%#v", this.TimeStamp)+",\n")
	s = append(s, "Data1: "+fmt.Sprintf("%#v", this.Data1)+",\n")
	s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CanonicalRepeatedColumn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&canonical.CanonicalRepeatedColumn{")
	s = append(s, "TimeStamp: "+fmt.Sprintf("%#v", this.TimeStamp)+",\n")
	s = append(s, "Data1: "+fmt.Sprintf("%#v", this.Data1)+",\n")
	s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CanonincalStream) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&canonical.CanonincalStream{")
	if this.DataStream != nil {
		s = append(s, "DataStream: "+fmt.Sprintf("%#v", this.DataStream)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCanonicalMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Canonical) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Canonical) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeStamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCanonicalMessage(dAtA, i, uint64(m.TimeStamp))
	}
	if m.Data1 != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Data1))))
		i += 8
	}
	if m.Data2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCanonicalMessage(dAtA, i, uint64(m.Data2))
	}
	return i, nil
}

func (m *CanonicalRepeatedColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanonicalRepeatedColumn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TimeStamp) > 0 {
		dAtA2 := make([]byte, len(m.TimeStamp)*10)
		var j1 int
		for _, num1 := range m.TimeStamp {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCanonicalMessage(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Data1) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCanonicalMessage(dAtA, i, uint64(len(m.Data1)*8))
		for _, num := range m.Data1 {
			f3 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f3))
			i += 8
		}
	}
	if len(m.Data2) > 0 {
		dAtA5 := make([]byte, len(m.Data2)*10)
		var j4 int
		for _, num1 := range m.Data2 {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCanonicalMessage(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func (m *CanonincalStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanonincalStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DataStream) > 0 {
		for _, msg := range m.DataStream {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCanonicalMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCanonicalMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Canonical) Size() (n int) {
	var l int
	_ = l
	if m.TimeStamp != 0 {
		n += 1 + sovCanonicalMessage(uint64(m.TimeStamp))
	}
	if m.Data1 != 0 {
		n += 9
	}
	if m.Data2 != 0 {
		n += 1 + sovCanonicalMessage(uint64(m.Data2))
	}
	return n
}

func (m *CanonicalRepeatedColumn) Size() (n int) {
	var l int
	_ = l
	if len(m.TimeStamp) > 0 {
		l = 0
		for _, e := range m.TimeStamp {
			l += sovCanonicalMessage(uint64(e))
		}
		n += 1 + sovCanonicalMessage(uint64(l)) + l
	}
	if len(m.Data1) > 0 {
		n += 1 + sovCanonicalMessage(uint64(len(m.Data1)*8)) + len(m.Data1)*8
	}
	if len(m.Data2) > 0 {
		l = 0
		for _, e := range m.Data2 {
			l += sovCanonicalMessage(uint64(e))
		}
		n += 1 + sovCanonicalMessage(uint64(l)) + l
	}
	return n
}

func (m *CanonincalStream) Size() (n int) {
	var l int
	_ = l
	if len(m.DataStream) > 0 {
		for _, e := range m.DataStream {
			l = e.Size()
			n += 1 + l + sovCanonicalMessage(uint64(l))
		}
	}
	return n
}

func sovCanonicalMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCanonicalMessage(x uint64) (n int) {
	return sovCanonicalMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Canonical) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Canonical{`,
		`TimeStamp:` + fmt.Sprintf("%v", this.TimeStamp) + `,`,
		`Data1:` + fmt.Sprintf("%v", this.Data1) + `,`,
		`Data2:` + fmt.Sprintf("%v", this.Data2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CanonicalRepeatedColumn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CanonicalRepeatedColumn{`,
		`TimeStamp:` + fmt.Sprintf("%v", this.TimeStamp) + `,`,
		`Data1:` + fmt.Sprintf("%v", this.Data1) + `,`,
		`Data2:` + fmt.Sprintf("%v", this.Data2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CanonincalStream) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CanonincalStream{`,
		`DataStream:` + strings.Replace(fmt.Sprintf("%v", this.DataStream), "Canonical", "Canonical", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCanonicalMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Canonical) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCanonicalMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Canonical: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Canonical: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCanonicalMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Data1 = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			m.Data2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCanonicalMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Data2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCanonicalMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCanonicalMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanonicalRepeatedColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCanonicalMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanonicalRepeatedColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanonicalRepeatedColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCanonicalMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TimeStamp = append(m.TimeStamp, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCanonicalMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCanonicalMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCanonicalMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TimeStamp = append(m.TimeStamp, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Data1 = append(m.Data1, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCanonicalMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCanonicalMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Data1 = append(m.Data1, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data1", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCanonicalMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data2 = append(m.Data2, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCanonicalMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCanonicalMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCanonicalMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data2 = append(m.Data2, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCanonicalMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCanonicalMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanonincalStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCanonicalMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanonincalStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanonincalStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCanonicalMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCanonicalMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataStream = append(m.DataStream, &Canonical{})
			if err := m.DataStream[len(m.DataStream)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCanonicalMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCanonicalMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCanonicalMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCanonicalMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCanonicalMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCanonicalMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCanonicalMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCanonicalMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCanonicalMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCanonicalMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCanonicalMessage   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("src/data_collector/proto/canonical_message.proto", fileDescriptor_canonical_message_ce31c3f2b8165f6a)
}

var fileDescriptor_canonical_message_ce31c3f2b8165f6a = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x28, 0x2e, 0x4a, 0xd6,
	0x4f, 0x49, 0x2c, 0x49, 0x8c, 0x4f, 0xce, 0xcf, 0xc9, 0x49, 0x4d, 0x2e, 0xc9, 0x2f, 0xd2, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0x4e, 0xcc, 0xcb, 0xcf, 0xcb, 0x4c, 0x4e, 0xcc, 0x89, 0xcf,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x03, 0x8b, 0x0b, 0x89, 0x14, 0xe4, 0xe8, 0x61, 0xc8,
	0x29, 0x85, 0x71, 0x71, 0x3a, 0xc3, 0x04, 0x85, 0x64, 0xb9, 0xb8, 0x4a, 0x32, 0x73, 0x53, 0xe3,
	0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x38, 0x41, 0x22, 0xc1,
	0x20, 0x01, 0x21, 0x11, 0x2e, 0x56, 0x90, 0x8d, 0x86, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x8c, 0x41,
	0x10, 0x0e, 0x4c, 0xd4, 0x48, 0x82, 0x19, 0xac, 0x1e, 0xc2, 0x51, 0x4a, 0xe1, 0x12, 0x87, 0x9b,
	0x1b, 0x94, 0x5a, 0x90, 0x9a, 0x58, 0x92, 0x9a, 0xe2, 0x9c, 0x9f, 0x53, 0x9a, 0x9b, 0x87, 0x61,
	0x0b, 0x33, 0x4e, 0x5b, 0x98, 0xb1, 0xda, 0xc2, 0x8c, 0xb0, 0x25, 0x84, 0x4b, 0x00, 0x62, 0x4b,
	0x5e, 0x72, 0x62, 0x4e, 0x70, 0x49, 0x51, 0x6a, 0x62, 0xae, 0x90, 0x03, 0x17, 0x37, 0x38, 0x5c,
	0x8a, 0xc1, 0x5c, 0xb0, 0xf9, 0xdc, 0x46, 0xf2, 0x7a, 0xd8, 0x7c, 0xaf, 0x87, 0x70, 0x22, 0x17,
	0x48, 0x0f, 0xc4, 0x04, 0x27, 0xf3, 0x0b, 0x0f, 0xe5, 0x18, 0x6e, 0x3c, 0x94, 0x63, 0xf8, 0xf0,
	0x50, 0x8e, 0xb1, 0xe1, 0x91, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72, 0x0c, 0x1f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x10, 0xc5, 0x09, 0x37, 0x36, 0x89, 0x0d, 0x1c, 0xd2, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x90, 0xfa, 0x64, 0xf0, 0x9d, 0x01, 0x00, 0x00,
}
