import px

###############################################################
# The following can be edited to k8s object and name to match.
###############################################################
# The Kubernetes object to filter on.
#    Options are ['pod', 'service']
k8s_object = 'pod'

# If you want to filter the object by name, enter the partial
# or full name here.
match_name = ''
###############################################################

t1 = px.DataFrame(table='http_events', start_time='-30s')

t1[k8s_object] = t1.ctx[k8s_object]
t1.http_resp_latency_ms = t1.http_resp_latency_ns / 1.0E6
t1.failure = t1.http_resp_status >= 400
t1.range_group = t1.time_ - px.modulo(t1.time_, 1000000000)

t1 = t1[px.contains(t1[k8s_object], match_name)]

quantiles_agg = t1.groupby(k8s_object).agg(
    latency_quantiles=('http_resp_latency_ms', px.quantiles),
    errors=('failure', px.mean),
    throughput_total=('http_resp_status', px.count),
)

quantiles_agg.latency_p50 = px.pluck(quantiles_agg.latency_quantiles, 'p50')
quantiles_agg.latency_p90 = px.pluck(quantiles_agg.latency_quantiles, 'p90')
quantiles_agg.latency_p99 = px.pluck(quantiles_agg.latency_quantiles, 'p99')

# The Range aggregate to calcualte the requests per second.
range_agg = t1.groupby([k8s_object, 'range_group']).agg(
    requests_per_window=('http_resp_status', px.count),
)

rps_table = range_agg.groupby(k8s_object).agg(
    rps=('requests_per_window', px.mean))

joined_table = quantiles_agg.merge(rps_table,
                                   how='inner',
                                   left_on=[k8s_object],
                                   right_on=[k8s_object],
                                   suffixes=['', '_x'])

joined_table['latency(p50)'] = joined_table.latency_p50
joined_table['latency(p90)'] = joined_table.latency_p90
joined_table['latency(p99)'] = joined_table.latency_p99
joined_table['throughput (rps)'] = joined_table.rps
joined_table['throughput total'] = joined_table.throughput_total

joined_table = joined_table[[
    k8s_object,
    'latency(p50)',
    'latency(p90)',
    'latency(p99)',
    'errors',
    'throughput (rps)',
    'throughput total']]
joined_table = joined_table[joined_table[k8s_object] != '']
px.display(joined_table)
