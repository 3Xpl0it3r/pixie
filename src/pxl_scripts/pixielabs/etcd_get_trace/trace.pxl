import pxtrace
import px


md_process_upid = "0000000f-001f-54c9-0000-0000004cdb55"
table_name = 'key_trace3'
tp_name = table_name


@pxtrace.probe("pixielabs.ai/pixielabs/src/vizier/services/metadata/"
               "controllers/kvstore.(*EtcdStore).Get")
def probe_func():
    return [{'key': pxtrace.ArgExpr("key")},
            {'latency': pxtrace.FunctionLatency()}]


pxtrace.UpsertTracepoint(table_name,
                         table_name,
                         probe_func,
                         px.uint128(md_process_upid),
                         "30m")


def raw_table():
    return px.DataFrame(table_name)


def prep_table(table: str):
    df = px.DataFrame(table)
    df.latency_ms = df.latency / 1000.0 / 1000.0
    return df


def latency_quantiles_overall():
    df = prep_table(table_name)
    df = df.groupby('key').agg(latency_quantiles=('latency_ms', px.quantiles))
    return df


def latency_quantiles_time_series():
    df = prep_table(table_name)
    df.time_ = px.bin(df.time_, px.seconds(10))
    df = df.groupby(['time_', 'key']).agg(latency_quantiles=('latency_ms', px.quantiles))
    df.latency_p50 = px.pluck_float64(df.latency_quantiles, 'p50')
    df.latency_p90 = px.pluck_float64(df.latency_quantiles, 'p90')
    df.latency_p99 = px.pluck_float64(df.latency_quantiles, 'p99')
    return df
