// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/shared/types/proto/types.proto

package typespb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataType int32

const (
	DATA_TYPE_UNKNOWN DataType = 0
	BOOLEAN           DataType = 1
	INT64             DataType = 2
	UINT128           DataType = 3
	FLOAT64           DataType = 4
	STRING            DataType = 5
	TIME64NS          DataType = 6
	DURATION64NS      DataType = 7
)

var DataType_name = map[int32]string{
	0: "DATA_TYPE_UNKNOWN",
	1: "BOOLEAN",
	2: "INT64",
	3: "UINT128",
	4: "FLOAT64",
	5: "STRING",
	6: "TIME64NS",
	7: "DURATION64NS",
}

var DataType_value = map[string]int32{
	"DATA_TYPE_UNKNOWN": 0,
	"BOOLEAN":           1,
	"INT64":             2,
	"UINT128":           3,
	"FLOAT64":           4,
	"STRING":            5,
	"TIME64NS":          6,
	"DURATION64NS":      7,
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a0f3bae72116e90, []int{0}
}

type PatternType int32

const (
	UNSPECIFIED    PatternType = 0
	GENERAL        PatternType = 100
	GENERAL_ENUM   PatternType = 101
	STRUCTURED     PatternType = 200
	METRIC_COUNTER PatternType = 300
	METRIC_GAUGE   PatternType = 301
)

var PatternType_name = map[int32]string{
	0:   "UNSPECIFIED",
	100: "GENERAL",
	101: "GENERAL_ENUM",
	200: "STRUCTURED",
	300: "METRIC_COUNTER",
	301: "METRIC_GAUGE",
}

var PatternType_value = map[string]int32{
	"UNSPECIFIED":    0,
	"GENERAL":        100,
	"GENERAL_ENUM":   101,
	"STRUCTURED":     200,
	"METRIC_COUNTER": 300,
	"METRIC_GAUGE":   301,
}

func (PatternType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a0f3bae72116e90, []int{1}
}

type SemanticType int32

const (
	ST_UNSPECIFIED  SemanticType = 0
	ST_NONE         SemanticType = 1
	ST_AGENT_UID    SemanticType = 100
	ST_UPID         SemanticType = 200
	ST_SERVICE_NAME SemanticType = 300
)

var SemanticType_name = map[int32]string{
	0:   "ST_UNSPECIFIED",
	1:   "ST_NONE",
	100: "ST_AGENT_UID",
	200: "ST_UPID",
	300: "ST_SERVICE_NAME",
}

var SemanticType_value = map[string]int32{
	"ST_UNSPECIFIED":  0,
	"ST_NONE":         1,
	"ST_AGENT_UID":    100,
	"ST_UPID":         200,
	"ST_SERVICE_NAME": 300,
}

func (SemanticType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a0f3bae72116e90, []int{2}
}

type UInt128 struct {
	Low  uint64 `protobuf:"varint,1,opt,name=low,proto3" json:"low,omitempty"`
	High uint64 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (m *UInt128) Reset()      { *m = UInt128{} }
func (*UInt128) ProtoMessage() {}
func (*UInt128) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a0f3bae72116e90, []int{0}
}
func (m *UInt128) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UInt128) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UInt128.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UInt128) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UInt128.Merge(m, src)
}
func (m *UInt128) XXX_Size() int {
	return m.Size()
}
func (m *UInt128) XXX_DiscardUnknown() {
	xxx_messageInfo_UInt128.DiscardUnknown(m)
}

var xxx_messageInfo_UInt128 proto.InternalMessageInfo

func (m *UInt128) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *UInt128) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

func init() {
	proto.RegisterEnum("pl.types.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("pl.types.PatternType", PatternType_name, PatternType_value)
	proto.RegisterEnum("pl.types.SemanticType", SemanticType_name, SemanticType_value)
	proto.RegisterType((*UInt128)(nil), "pl.types.UInt128")
}

func init() { proto.RegisterFile("src/shared/types/proto/types.proto", fileDescriptor_6a0f3bae72116e90) }

var fileDescriptor_6a0f3bae72116e90 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x3f, 0x4f, 0xdb, 0x40,
	0x18, 0xc6, 0x7d, 0x06, 0x92, 0xf4, 0x8d, 0x05, 0xc7, 0xb5, 0x95, 0x98, 0x4e, 0x15, 0x53, 0x95,
	0x81, 0x08, 0x8a, 0x10, 0x4b, 0x87, 0xc3, 0x3e, 0xac, 0x53, 0x93, 0x73, 0x74, 0x7f, 0x5a, 0xb5,
	0xcb, 0xc9, 0x10, 0xab, 0x41, 0xa2, 0x89, 0x95, 0x58, 0xad, 0x98, 0xda, 0x8f, 0xd0, 0x8f, 0xd1,
	0x81, 0x7e, 0x0f, 0xc6, 0x8c, 0x8c, 0x8d, 0xb3, 0x74, 0xe4, 0x23, 0x54, 0x3e, 0xd8, 0xba, 0x3d,
	0xcf, 0xef, 0xbd, 0xd3, 0xef, 0x95, 0x5e, 0xd8, 0x5f, 0xcc, 0x2f, 0xfb, 0x8b, 0x49, 0x3e, 0x2f,
	0xc6, 0xfd, 0xea, 0xa6, 0x2c, 0x16, 0xfd, 0x72, 0x3e, 0xab, 0x66, 0x8f, 0xf9, 0xc0, 0x67, 0xd2,
	0x29, 0xaf, 0x0f, 0x7c, 0xdf, 0xef, 0x43, 0xdb, 0x8a, 0x69, 0x75, 0x78, 0x74, 0x4a, 0x30, 0x6c,
	0x5c, 0xcf, 0xbe, 0xed, 0xa1, 0x57, 0xe8, 0xf5, 0xa6, 0x6a, 0x22, 0x21, 0xb0, 0x39, 0xb9, 0xfa,
	0x3c, 0xd9, 0x0b, 0x3d, 0xf2, 0xb9, 0xf7, 0x1d, 0x3a, 0x49, 0x5e, 0xe5, 0xe6, 0xa6, 0x2c, 0xc8,
	0x4b, 0xd8, 0x4d, 0x98, 0x61, 0xce, 0x7c, 0x1c, 0x71, 0x67, 0xe5, 0x3b, 0x99, 0x7d, 0x90, 0x38,
	0x20, 0x5d, 0x68, 0x9f, 0x65, 0xd9, 0x80, 0x33, 0x89, 0x11, 0x79, 0x06, 0x5b, 0x42, 0x9a, 0x93,
	0x63, 0x1c, 0x36, 0xdc, 0x0a, 0x69, 0x0e, 0x8f, 0x4e, 0xf1, 0x46, 0x53, 0xce, 0x07, 0x19, 0x6b,
	0x26, 0x9b, 0x04, 0xa0, 0xa5, 0x8d, 0x12, 0x32, 0xc5, 0x5b, 0x24, 0x82, 0x8e, 0x11, 0x43, 0x7e,
	0x72, 0x2c, 0x35, 0x6e, 0x11, 0x0c, 0x51, 0x62, 0x15, 0x33, 0x22, 0x93, 0x9e, 0xb4, 0x7b, 0x5f,
	0xa1, 0x3b, 0xca, 0xab, 0xaa, 0x98, 0x4f, 0xfd, 0x0e, 0x3b, 0xd0, 0xb5, 0x52, 0x8f, 0x78, 0x2c,
	0xce, 0x05, 0x4f, 0x1e, 0xed, 0x29, 0x97, 0x5c, 0xb1, 0x01, 0x1e, 0x37, 0xdf, 0x9f, 0x8a, 0xe3,
	0xd2, 0x0e, 0x71, 0xf3, 0x1e, 0xb4, 0x51, 0x36, 0x36, 0x56, 0xf1, 0x04, 0xdf, 0x21, 0xf2, 0x1c,
	0xb6, 0x87, 0xdc, 0x28, 0x11, 0xbb, 0x38, 0xb3, 0xd2, 0x70, 0x85, 0x6f, 0x43, 0xb2, 0x0b, 0xd1,
	0x13, 0x4c, 0x99, 0x4d, 0x39, 0xfe, 0x1d, 0xf6, 0x0a, 0x88, 0x74, 0xf1, 0x25, 0x9f, 0x56, 0x57,
	0x97, 0x5e, 0x4c, 0x60, 0x5b, 0x1b, 0xf7, 0x9f, 0x5b, 0x1b, 0x27, 0x33, 0xc9, 0x31, 0x6a, 0xdc,
	0xda, 0x38, 0x96, 0x72, 0x69, 0x9c, 0x15, 0x09, 0x1e, 0x93, 0xc8, 0x8f, 0xed, 0x48, 0x78, 0xf1,
	0x0b, 0xd8, 0xd1, 0xc6, 0x69, 0xae, 0xde, 0x8b, 0x98, 0x3b, 0xc9, 0x86, 0x1c, 0xdf, 0x86, 0x67,
	0x6f, 0x97, 0x2b, 0x1a, 0xdc, 0xaf, 0x68, 0xf0, 0xb0, 0xa2, 0xe8, 0x47, 0x4d, 0xd1, 0xaf, 0x9a,
	0xa2, 0xbb, 0x9a, 0xa2, 0x65, 0x4d, 0xd1, 0x9f, 0x9a, 0xa2, 0xbf, 0x35, 0x0d, 0x1e, 0x6a, 0x8a,
	0x7e, 0xae, 0x69, 0xb0, 0x5c, 0xd3, 0xe0, 0x7e, 0x4d, 0x83, 0x4f, 0x6d, 0x7f, 0xcd, 0xf2, 0xe2,
	0xa2, 0xe5, 0x0f, 0xfc, 0xe6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0x9f, 0xf1, 0xd6, 0x06,
	0x02, 0x00, 0x00,
}

func (x DataType) String() string {
	s, ok := DataType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PatternType) String() string {
	s, ok := PatternType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SemanticType) String() string {
	s, ok := SemanticType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UInt128) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UInt128)
	if !ok {
		that2, ok := that.(UInt128)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Low != that1.Low {
		return false
	}
	if this.High != that1.High {
		return false
	}
	return true
}
func (this *UInt128) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&typespb.UInt128{")
	s = append(s, "Low: "+fmt.Sprintf("%#v", this.Low)+",\n")
	s = append(s, "High: "+fmt.Sprintf("%#v", this.High)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UInt128) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UInt128) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UInt128) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.High != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.High))
		i--
		dAtA[i] = 0x10
	}
	if m.Low != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Low))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UInt128) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Low != 0 {
		n += 1 + sovTypes(uint64(m.Low))
	}
	if m.High != 0 {
		n += 1 + sovTypes(uint64(m.High))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UInt128) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UInt128{`,
		`Low:` + fmt.Sprintf("%v", this.Low) + `,`,
		`High:` + fmt.Sprintf("%v", this.High) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UInt128) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UInt128: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UInt128: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)
