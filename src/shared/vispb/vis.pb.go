// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/shared/vispb/vis.proto

package pl_vispb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PXType int32

const (
	PX_UNKNOWN PXType = 0
	PX_BOOLEAN PXType = 1
	PX_INT64   PXType = 2
	PX_FLOAT64 PXType = 3
	PX_STRING  PXType = 4
	PX_SERVICE PXType = 1000
)

var PXType_name = map[int32]string{
	0:    "PX_UNKNOWN",
	1:    "PX_BOOLEAN",
	2:    "PX_INT64",
	3:    "PX_FLOAT64",
	4:    "PX_STRING",
	1000: "PX_SERVICE",
}

var PXType_value = map[string]int32{
	"PX_UNKNOWN": 0,
	"PX_BOOLEAN": 1,
	"PX_INT64":   2,
	"PX_FLOAT64": 3,
	"PX_STRING":  4,
	"PX_SERVICE": 1000,
}

func (PXType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{0}
}

type TimeseriesChart_Timeseries_Mode int32

const (
	MODE_UNKNOWN TimeseriesChart_Timeseries_Mode = 0
	MODE_BAR     TimeseriesChart_Timeseries_Mode = 1
	MODE_LINE    TimeseriesChart_Timeseries_Mode = 2
	MODE_POINT   TimeseriesChart_Timeseries_Mode = 3
)

var TimeseriesChart_Timeseries_Mode_name = map[int32]string{
	0: "MODE_UNKNOWN",
	1: "MODE_BAR",
	2: "MODE_LINE",
	3: "MODE_POINT",
}

var TimeseriesChart_Timeseries_Mode_value = map[string]int32{
	"MODE_UNKNOWN": 0,
	"MODE_BAR":     1,
	"MODE_LINE":    2,
	"MODE_POINT":   3,
}

func (TimeseriesChart_Timeseries_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{4, 0, 0}
}

type Vis struct {
	Variables []*Vis_Variable `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty"`
	Widgets   []*Widget       `protobuf:"bytes,2,rep,name=widgets,proto3" json:"widgets,omitempty"`
}

func (m *Vis) Reset()      { *m = Vis{} }
func (*Vis) ProtoMessage() {}
func (*Vis) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{0}
}
func (m *Vis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vis.Merge(m, src)
}
func (m *Vis) XXX_Size() int {
	return m.Size()
}
func (m *Vis) XXX_DiscardUnknown() {
	xxx_messageInfo_Vis.DiscardUnknown(m)
}

var xxx_messageInfo_Vis proto.InternalMessageInfo

func (m *Vis) GetVariables() []*Vis_Variable {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *Vis) GetWidgets() []*Widget {
	if m != nil {
		return m.Widgets
	}
	return nil
}

type Vis_Variable struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type PXType `protobuf:"varint,2,opt,name=type,proto3,enum=pl.vispb.PXType" json:"type,omitempty"`
}

func (m *Vis_Variable) Reset()      { *m = Vis_Variable{} }
func (*Vis_Variable) ProtoMessage() {}
func (*Vis_Variable) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{0, 0}
}
func (m *Vis_Variable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vis_Variable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vis_Variable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vis_Variable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vis_Variable.Merge(m, src)
}
func (m *Vis_Variable) XXX_Size() int {
	return m.Size()
}
func (m *Vis_Variable) XXX_DiscardUnknown() {
	xxx_messageInfo_Vis_Variable.DiscardUnknown(m)
}

var xxx_messageInfo_Vis_Variable proto.InternalMessageInfo

func (m *Vis_Variable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vis_Variable) GetType() PXType {
	if m != nil {
		return m.Type
	}
	return PX_UNKNOWN
}

type Widget struct {
	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Position    *Widget_Position `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Func        *Widget_Func     `protobuf:"bytes,3,opt,name=func,proto3" json:"func,omitempty"`
	DisplaySpec *types.Any       `protobuf:"bytes,4,opt,name=display_spec,json=displaySpec,proto3" json:"display_spec,omitempty"`
}

func (m *Widget) Reset()      { *m = Widget{} }
func (*Widget) ProtoMessage() {}
func (*Widget) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{1}
}
func (m *Widget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Widget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Widget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Widget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Widget.Merge(m, src)
}
func (m *Widget) XXX_Size() int {
	return m.Size()
}
func (m *Widget) XXX_DiscardUnknown() {
	xxx_messageInfo_Widget.DiscardUnknown(m)
}

var xxx_messageInfo_Widget proto.InternalMessageInfo

func (m *Widget) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Widget) GetPosition() *Widget_Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Widget) GetFunc() *Widget_Func {
	if m != nil {
		return m.Func
	}
	return nil
}

func (m *Widget) GetDisplaySpec() *types.Any {
	if m != nil {
		return m.DisplaySpec
	}
	return nil
}

type Widget_Position struct {
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	W int32 `protobuf:"varint,3,opt,name=w,proto3" json:"w,omitempty"`
	H int32 `protobuf:"varint,4,opt,name=h,proto3" json:"h,omitempty"`
}

func (m *Widget_Position) Reset()      { *m = Widget_Position{} }
func (*Widget_Position) ProtoMessage() {}
func (*Widget_Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{1, 0}
}
func (m *Widget_Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Widget_Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Widget_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Widget_Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Widget_Position.Merge(m, src)
}
func (m *Widget_Position) XXX_Size() int {
	return m.Size()
}
func (m *Widget_Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Widget_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Widget_Position proto.InternalMessageInfo

func (m *Widget_Position) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Widget_Position) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Widget_Position) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *Widget_Position) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

type Widget_Func struct {
	Name string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args []*Widget_Func_FuncArg `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *Widget_Func) Reset()      { *m = Widget_Func{} }
func (*Widget_Func) ProtoMessage() {}
func (*Widget_Func) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{1, 1}
}
func (m *Widget_Func) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Widget_Func) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Widget_Func.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Widget_Func) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Widget_Func.Merge(m, src)
}
func (m *Widget_Func) XXX_Size() int {
	return m.Size()
}
func (m *Widget_Func) XXX_DiscardUnknown() {
	xxx_messageInfo_Widget_Func.DiscardUnknown(m)
}

var xxx_messageInfo_Widget_Func proto.InternalMessageInfo

func (m *Widget_Func) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Widget_Func) GetArgs() []*Widget_Func_FuncArg {
	if m != nil {
		return m.Args
	}
	return nil
}

type Widget_Func_FuncArg struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Input:
	//	*Widget_Func_FuncArg_Value
	//	*Widget_Func_FuncArg_Variable
	Input isWidget_Func_FuncArg_Input `protobuf_oneof:"input"`
}

func (m *Widget_Func_FuncArg) Reset()      { *m = Widget_Func_FuncArg{} }
func (*Widget_Func_FuncArg) ProtoMessage() {}
func (*Widget_Func_FuncArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{1, 1, 0}
}
func (m *Widget_Func_FuncArg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Widget_Func_FuncArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Widget_Func_FuncArg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Widget_Func_FuncArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Widget_Func_FuncArg.Merge(m, src)
}
func (m *Widget_Func_FuncArg) XXX_Size() int {
	return m.Size()
}
func (m *Widget_Func_FuncArg) XXX_DiscardUnknown() {
	xxx_messageInfo_Widget_Func_FuncArg.DiscardUnknown(m)
}

var xxx_messageInfo_Widget_Func_FuncArg proto.InternalMessageInfo

type isWidget_Func_FuncArg_Input interface {
	isWidget_Func_FuncArg_Input()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Widget_Func_FuncArg_Value struct {
	Value string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}
type Widget_Func_FuncArg_Variable struct {
	Variable string `protobuf:"bytes,3,opt,name=variable,proto3,oneof" json:"variable,omitempty"`
}

func (*Widget_Func_FuncArg_Value) isWidget_Func_FuncArg_Input()    {}
func (*Widget_Func_FuncArg_Variable) isWidget_Func_FuncArg_Input() {}

func (m *Widget_Func_FuncArg) GetInput() isWidget_Func_FuncArg_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Widget_Func_FuncArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Widget_Func_FuncArg) GetValue() string {
	if x, ok := m.GetInput().(*Widget_Func_FuncArg_Value); ok {
		return x.Value
	}
	return ""
}

func (m *Widget_Func_FuncArg) GetVariable() string {
	if x, ok := m.GetInput().(*Widget_Func_FuncArg_Variable); ok {
		return x.Variable
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Widget_Func_FuncArg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Widget_Func_FuncArg_Value)(nil),
		(*Widget_Func_FuncArg_Variable)(nil),
	}
}

type Axis struct {
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *Axis) Reset()      { *m = Axis{} }
func (*Axis) ProtoMessage() {}
func (*Axis) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{2}
}
func (m *Axis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Axis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Axis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Axis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Axis.Merge(m, src)
}
func (m *Axis) XXX_Size() int {
	return m.Size()
}
func (m *Axis) XXX_DiscardUnknown() {
	xxx_messageInfo_Axis.DiscardUnknown(m)
}

var xxx_messageInfo_Axis proto.InternalMessageInfo

func (m *Axis) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type BarChart struct {
	Bar   *BarChart_Bar `protobuf:"bytes,1,opt,name=bar,proto3" json:"bar,omitempty"`
	Title string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XAxis *Axis         `protobuf:"bytes,3,opt,name=x_axis,json=xAxis,proto3" json:"x_axis,omitempty"`
	YAxis *Axis         `protobuf:"bytes,4,opt,name=y_axis,json=yAxis,proto3" json:"y_axis,omitempty"`
}

func (m *BarChart) Reset()      { *m = BarChart{} }
func (*BarChart) ProtoMessage() {}
func (*BarChart) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{3}
}
func (m *BarChart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BarChart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BarChart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BarChart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BarChart.Merge(m, src)
}
func (m *BarChart) XXX_Size() int {
	return m.Size()
}
func (m *BarChart) XXX_DiscardUnknown() {
	xxx_messageInfo_BarChart.DiscardUnknown(m)
}

var xxx_messageInfo_BarChart proto.InternalMessageInfo

func (m *BarChart) GetBar() *BarChart_Bar {
	if m != nil {
		return m.Bar
	}
	return nil
}

func (m *BarChart) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BarChart) GetXAxis() *Axis {
	if m != nil {
		return m.XAxis
	}
	return nil
}

func (m *BarChart) GetYAxis() *Axis {
	if m != nil {
		return m.YAxis
	}
	return nil
}

type BarChart_Bar struct {
	Value   string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	StackBy string `protobuf:"bytes,3,opt,name=stack_by,json=stackBy,proto3" json:"stack_by,omitempty"`
	GroupBy string `protobuf:"bytes,4,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
}

func (m *BarChart_Bar) Reset()      { *m = BarChart_Bar{} }
func (*BarChart_Bar) ProtoMessage() {}
func (*BarChart_Bar) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{3, 0}
}
func (m *BarChart_Bar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BarChart_Bar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BarChart_Bar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BarChart_Bar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BarChart_Bar.Merge(m, src)
}
func (m *BarChart_Bar) XXX_Size() int {
	return m.Size()
}
func (m *BarChart_Bar) XXX_DiscardUnknown() {
	xxx_messageInfo_BarChart_Bar.DiscardUnknown(m)
}

var xxx_messageInfo_BarChart_Bar proto.InternalMessageInfo

func (m *BarChart_Bar) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *BarChart_Bar) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *BarChart_Bar) GetStackBy() string {
	if m != nil {
		return m.StackBy
	}
	return ""
}

func (m *BarChart_Bar) GetGroupBy() string {
	if m != nil {
		return m.GroupBy
	}
	return ""
}

type TimeseriesChart struct {
	Timeseries []*TimeseriesChart_Timeseries `protobuf:"bytes,1,rep,name=timeseries,proto3" json:"timeseries,omitempty"`
	Title      string                        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XAxis      *Axis                         `protobuf:"bytes,3,opt,name=x_axis,json=xAxis,proto3" json:"x_axis,omitempty"`
	YAxis      *Axis                         `protobuf:"bytes,4,opt,name=y_axis,json=yAxis,proto3" json:"y_axis,omitempty"`
}

func (m *TimeseriesChart) Reset()      { *m = TimeseriesChart{} }
func (*TimeseriesChart) ProtoMessage() {}
func (*TimeseriesChart) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{4}
}
func (m *TimeseriesChart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeseriesChart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeseriesChart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeseriesChart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeseriesChart.Merge(m, src)
}
func (m *TimeseriesChart) XXX_Size() int {
	return m.Size()
}
func (m *TimeseriesChart) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeseriesChart.DiscardUnknown(m)
}

var xxx_messageInfo_TimeseriesChart proto.InternalMessageInfo

func (m *TimeseriesChart) GetTimeseries() []*TimeseriesChart_Timeseries {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

func (m *TimeseriesChart) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TimeseriesChart) GetXAxis() *Axis {
	if m != nil {
		return m.XAxis
	}
	return nil
}

func (m *TimeseriesChart) GetYAxis() *Axis {
	if m != nil {
		return m.YAxis
	}
	return nil
}

type TimeseriesChart_Timeseries struct {
	Value         string                          `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Series        string                          `protobuf:"bytes,2,opt,name=series,proto3" json:"series,omitempty"`
	StackBySeries bool                            `protobuf:"varint,3,opt,name=stack_by_series,json=stackBySeries,proto3" json:"stack_by_series,omitempty"`
	Mode          TimeseriesChart_Timeseries_Mode `protobuf:"varint,4,opt,name=mode,proto3,enum=pl.vispb.TimeseriesChart_Timeseries_Mode" json:"mode,omitempty"`
}

func (m *TimeseriesChart_Timeseries) Reset()      { *m = TimeseriesChart_Timeseries{} }
func (*TimeseriesChart_Timeseries) ProtoMessage() {}
func (*TimeseriesChart_Timeseries) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{4, 0}
}
func (m *TimeseriesChart_Timeseries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeseriesChart_Timeseries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeseriesChart_Timeseries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeseriesChart_Timeseries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeseriesChart_Timeseries.Merge(m, src)
}
func (m *TimeseriesChart_Timeseries) XXX_Size() int {
	return m.Size()
}
func (m *TimeseriesChart_Timeseries) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeseriesChart_Timeseries.DiscardUnknown(m)
}

var xxx_messageInfo_TimeseriesChart_Timeseries proto.InternalMessageInfo

func (m *TimeseriesChart_Timeseries) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TimeseriesChart_Timeseries) GetSeries() string {
	if m != nil {
		return m.Series
	}
	return ""
}

func (m *TimeseriesChart_Timeseries) GetStackBySeries() bool {
	if m != nil {
		return m.StackBySeries
	}
	return false
}

func (m *TimeseriesChart_Timeseries) GetMode() TimeseriesChart_Timeseries_Mode {
	if m != nil {
		return m.Mode
	}
	return MODE_UNKNOWN
}

type VegaChart struct {
	Spec string `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *VegaChart) Reset()      { *m = VegaChart{} }
func (*VegaChart) ProtoMessage() {}
func (*VegaChart) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{5}
}
func (m *VegaChart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VegaChart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VegaChart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VegaChart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VegaChart.Merge(m, src)
}
func (m *VegaChart) XXX_Size() int {
	return m.Size()
}
func (m *VegaChart) XXX_DiscardUnknown() {
	xxx_messageInfo_VegaChart.DiscardUnknown(m)
}

var xxx_messageInfo_VegaChart proto.InternalMessageInfo

func (m *VegaChart) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

type Table struct {
}

func (m *Table) Reset()      { *m = Table{} }
func (*Table) ProtoMessage() {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_afbb78807ac88c00, []int{6}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return m.Size()
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("pl.vispb.PXType", PXType_name, PXType_value)
	proto.RegisterEnum("pl.vispb.TimeseriesChart_Timeseries_Mode", TimeseriesChart_Timeseries_Mode_name, TimeseriesChart_Timeseries_Mode_value)
	proto.RegisterType((*Vis)(nil), "pl.vispb.Vis")
	proto.RegisterType((*Vis_Variable)(nil), "pl.vispb.Vis.Variable")
	proto.RegisterType((*Widget)(nil), "pl.vispb.Widget")
	proto.RegisterType((*Widget_Position)(nil), "pl.vispb.Widget.Position")
	proto.RegisterType((*Widget_Func)(nil), "pl.vispb.Widget.Func")
	proto.RegisterType((*Widget_Func_FuncArg)(nil), "pl.vispb.Widget.Func.FuncArg")
	proto.RegisterType((*Axis)(nil), "pl.vispb.Axis")
	proto.RegisterType((*BarChart)(nil), "pl.vispb.BarChart")
	proto.RegisterType((*BarChart_Bar)(nil), "pl.vispb.BarChart.Bar")
	proto.RegisterType((*TimeseriesChart)(nil), "pl.vispb.TimeseriesChart")
	proto.RegisterType((*TimeseriesChart_Timeseries)(nil), "pl.vispb.TimeseriesChart.Timeseries")
	proto.RegisterType((*VegaChart)(nil), "pl.vispb.VegaChart")
	proto.RegisterType((*Table)(nil), "pl.vispb.Table")
}

func init() { proto.RegisterFile("src/shared/vispb/vis.proto", fileDescriptor_afbb78807ac88c00) }

var fileDescriptor_afbb78807ac88c00 = []byte{
	// 817 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xf6, 0xc4, 0x76, 0xe2, 0xbc, 0x76, 0x5b, 0x6b, 0xb4, 0x54, 0x69, 0xb4, 0x98, 0xca, 0xda,
	0x45, 0xdd, 0x3d, 0xb8, 0xa2, 0x14, 0x38, 0x71, 0x88, 0xb7, 0x59, 0x88, 0xe8, 0x3a, 0xd1, 0x34,
	0x64, 0x73, 0x40, 0xb2, 0x9c, 0x64, 0xea, 0x5a, 0xb8, 0xb1, 0x65, 0x3b, 0x6d, 0x7c, 0x83, 0x7f,
	0xc0, 0xaf, 0x40, 0x20, 0xc4, 0xff, 0xe0, 0xd8, 0xe3, 0x1e, 0x69, 0x7a, 0xe9, 0x71, 0x7f, 0x02,
	0x9a, 0x19, 0x3b, 0xc9, 0x2e, 0x39, 0x70, 0xe2, 0x92, 0xf8, 0x7b, 0xef, 0x7b, 0xdf, 0xfb, 0xde,
	0x1b, 0x8f, 0xa1, 0x99, 0x26, 0xe3, 0xa3, 0xf4, 0xd2, 0x4b, 0xe8, 0xe4, 0xe8, 0x3a, 0x48, 0xe3,
	0x11, 0xfb, 0xb5, 0xe2, 0x24, 0xca, 0x22, 0xac, 0xc5, 0xa1, 0xc5, 0x63, 0xcd, 0x7d, 0x3f, 0x8a,
	0xfc, 0x90, 0x1e, 0xf1, 0xf8, 0x68, 0x76, 0x71, 0xe4, 0x4d, 0x73, 0x41, 0x32, 0xff, 0x44, 0x20,
	0x0f, 0x82, 0x14, 0x9f, 0x40, 0xfd, 0xda, 0x4b, 0x02, 0x6f, 0x14, 0xd2, 0xb4, 0x81, 0x0e, 0xe4,
	0xc3, 0xad, 0xe3, 0x3d, 0xab, 0x14, 0xb0, 0x06, 0x41, 0x6a, 0x0d, 0x8a, 0x34, 0x59, 0x11, 0xf1,
	0x0b, 0xa8, 0xdd, 0x04, 0x13, 0x9f, 0x66, 0x69, 0xa3, 0xc2, 0x6b, 0xf4, 0x55, 0xcd, 0x1b, 0x9e,
	0x20, 0x25, 0xa1, 0x79, 0x0a, 0x5a, 0x29, 0x81, 0x31, 0x28, 0x53, 0xef, 0x8a, 0x36, 0xd0, 0x01,
	0x3a, 0xac, 0x13, 0xfe, 0x8c, 0x9f, 0x82, 0x92, 0xe5, 0x31, 0x6d, 0x54, 0x0e, 0xd0, 0xe1, 0xce,
	0xba, 0x50, 0x6f, 0xd8, 0xcf, 0x63, 0x4a, 0x78, 0xd6, 0xfc, 0x5d, 0x86, 0xaa, 0x50, 0xde, 0x28,
	0xf2, 0x05, 0x68, 0x71, 0x94, 0x06, 0x59, 0x10, 0x4d, 0xb9, 0xd0, 0xd6, 0xf1, 0xfe, 0x87, 0x8e,
	0xac, 0x5e, 0x41, 0x20, 0x4b, 0x2a, 0x7e, 0x0e, 0xca, 0xc5, 0x6c, 0x3a, 0x6e, 0xc8, 0xbc, 0xe4,
	0xa3, 0x7f, 0x95, 0xbc, 0x9a, 0x4d, 0xc7, 0x84, 0x53, 0xf0, 0x57, 0xb0, 0x3d, 0x09, 0xd2, 0x38,
	0xf4, 0x72, 0x37, 0x8d, 0xe9, 0xb8, 0xa1, 0xf0, 0x92, 0xc7, 0x96, 0x58, 0xb1, 0x55, 0xae, 0xd8,
	0x6a, 0x4d, 0x73, 0xb2, 0x55, 0x30, 0xcf, 0x63, 0x3a, 0x6e, 0xda, 0xa0, 0x95, 0x9d, 0xf1, 0x36,
	0xa0, 0x39, 0xf7, 0xad, 0x12, 0x34, 0x67, 0x28, 0xe7, 0x6e, 0x55, 0x82, 0x72, 0x86, 0x6e, 0xb8,
	0x11, 0x95, 0xa0, 0x1b, 0x86, 0x2e, 0x79, 0x0f, 0x95, 0xa0, 0xcb, 0xe6, 0x1f, 0x08, 0x14, 0xe6,
	0x65, 0xe3, 0xec, 0x9f, 0x81, 0xe2, 0x25, 0x7e, 0x79, 0x12, 0x1f, 0x6f, 0x1c, 0x82, 0xff, 0xb4,
	0x12, 0x9f, 0x70, 0x6a, 0xf3, 0x07, 0xa8, 0x15, 0x81, 0x8d, 0x8a, 0x7b, 0xa0, 0x5e, 0x7b, 0xe1,
	0x4c, 0x9c, 0x49, 0xfd, 0x5b, 0x89, 0x08, 0x88, 0x9f, 0x80, 0x56, 0xbe, 0x03, 0xdc, 0x29, 0x4b,
	0x2d, 0x23, 0x76, 0x0d, 0xd4, 0x60, 0x1a, 0xcf, 0x32, 0xf3, 0x09, 0x28, 0xad, 0x79, 0x90, 0xe2,
	0xc7, 0xa0, 0x86, 0xde, 0x88, 0x86, 0x85, 0xb6, 0x00, 0xe6, 0xcf, 0x15, 0xd0, 0x6c, 0x2f, 0x79,
	0x79, 0xe9, 0x25, 0x19, 0x3e, 0x04, 0x79, 0xe4, 0x25, 0x9c, 0xf0, 0xde, 0x8b, 0x57, 0x12, 0xd8,
	0x03, 0x61, 0x14, 0x26, 0x96, 0x05, 0x59, 0x58, 0x78, 0x22, 0x02, 0xe0, 0x67, 0x50, 0x9d, 0xbb,
	0xde, 0x3c, 0x48, 0x8b, 0x23, 0xdc, 0x59, 0x49, 0x30, 0x0b, 0x44, 0x9d, 0x73, 0x27, 0xcf, 0xa0,
	0x9a, 0x0b, 0x9a, 0xb2, 0x99, 0x96, 0xb3, 0xbf, 0xa6, 0x0f, 0xb2, 0x2d, 0x5a, 0x89, 0xf1, 0x0b,
	0xdf, 0x62, 0xf8, 0xe5, 0x34, 0x95, 0xb5, 0x69, 0xf0, 0x3e, 0x68, 0x69, 0xe6, 0x8d, 0x7f, 0x74,
	0x47, 0xb9, 0x58, 0x09, 0xa9, 0x71, 0x6c, 0xe7, 0x2c, 0xe5, 0x27, 0xd1, 0x2c, 0x66, 0x29, 0x45,
	0xa4, 0x38, 0xb6, 0x73, 0xf3, 0x57, 0x19, 0x76, 0xfb, 0xc1, 0x15, 0x4d, 0x69, 0x12, 0xd0, 0x54,
	0xac, 0xe2, 0x14, 0x20, 0x5b, 0x86, 0x8a, 0xab, 0xf8, 0x74, 0xe5, 0xf3, 0x03, 0xfa, 0x1a, 0x26,
	0x6b, 0x75, 0xff, 0xcb, 0x9a, 0x1e, 0x10, 0x40, 0xff, 0xbd, 0x96, 0x1b, 0xd6, 0xb5, 0x07, 0xd5,
	0x62, 0x14, 0xe1, 0xa4, 0x40, 0xf8, 0x53, 0xd8, 0x2d, 0x17, 0xe6, 0x16, 0x04, 0xe6, 0x49, 0x23,
	0x8f, 0x8a, 0xbd, 0x9d, 0x0b, 0xde, 0xd7, 0xa0, 0x5c, 0x45, 0x13, 0xca, 0x9d, 0xec, 0x1c, 0x3f,
	0xff, 0x2f, 0x8b, 0xb0, 0x5e, 0x47, 0x13, 0x4a, 0x78, 0x99, 0xd9, 0x06, 0x85, 0x21, 0xac, 0xc3,
	0xf6, 0xeb, 0xee, 0x69, 0xdb, 0xfd, 0xde, 0xf9, 0xce, 0xe9, 0xbe, 0x71, 0x74, 0x09, 0x6f, 0x83,
	0xc6, 0x23, 0x76, 0x8b, 0xe8, 0x08, 0x3f, 0x82, 0x3a, 0x47, 0x67, 0x1d, 0xa7, 0xad, 0x57, 0xf0,
	0x0e, 0x00, 0x87, 0xbd, 0x6e, 0xc7, 0xe9, 0xeb, 0xb2, 0xf9, 0x09, 0xd4, 0x07, 0xd4, 0xf7, 0xc4,
	0x09, 0x61, 0x50, 0xf8, 0xd5, 0x2f, 0xae, 0x0a, 0x7b, 0x36, 0x6b, 0xa0, 0xf6, 0xd9, 0xdb, 0xff,
	0xe2, 0x02, 0xaa, 0xe2, 0x83, 0xc5, 0x34, 0x7a, 0xc3, 0xb5, 0x86, 0x02, 0xdb, 0xdd, 0xee, 0x59,
	0xbb, 0xe5, 0xe8, 0x88, 0x19, 0xe8, 0x0d, 0xdd, 0x8e, 0xd3, 0xff, 0xf2, 0x44, 0x74, 0xec, 0x0d,
	0xdd, 0x57, 0x67, 0xdd, 0x16, 0xc3, 0x32, 0x33, 0xd4, 0x1b, 0xba, 0xe7, 0x7d, 0xd2, 0x71, 0xbe,
	0xd1, 0x15, 0xbc, 0xcb, 0xd3, 0xe7, 0x6d, 0x32, 0xe8, 0xbc, 0x6c, 0xeb, 0x0f, 0x35, 0xfb, 0xe4,
	0xf6, 0xce, 0x90, 0xde, 0xde, 0x19, 0xd2, 0xbb, 0x3b, 0x03, 0xfd, 0xb4, 0x30, 0xd0, 0x6f, 0x0b,
	0x03, 0xfd, 0xb5, 0x30, 0xd0, 0xed, 0xc2, 0x40, 0x7f, 0x2f, 0x0c, 0xf4, 0xb0, 0x30, 0xa4, 0x77,
	0x0b, 0x03, 0xfd, 0x72, 0x6f, 0x48, 0xb7, 0xf7, 0x86, 0xf4, 0xf6, 0xde, 0x90, 0x46, 0x55, 0xfe,
	0x7d, 0xfa, 0xfc, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xce, 0xb2, 0xa9, 0x38, 0x06, 0x00,
	0x00,
}

func (x PXType) String() string {
	s, ok := PXType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TimeseriesChart_Timeseries_Mode) String() string {
	s, ok := TimeseriesChart_Timeseries_Mode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Vis) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vis)
	if !ok {
		that2, ok := that.(Vis)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Variables) != len(that1.Variables) {
		return false
	}
	for i := range this.Variables {
		if !this.Variables[i].Equal(that1.Variables[i]) {
			return false
		}
	}
	if len(this.Widgets) != len(that1.Widgets) {
		return false
	}
	for i := range this.Widgets {
		if !this.Widgets[i].Equal(that1.Widgets[i]) {
			return false
		}
	}
	return true
}
func (this *Vis_Variable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vis_Variable)
	if !ok {
		that2, ok := that.(Vis_Variable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Widget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Widget)
	if !ok {
		that2, ok := that.(Widget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Position.Equal(that1.Position) {
		return false
	}
	if !this.Func.Equal(that1.Func) {
		return false
	}
	if !this.DisplaySpec.Equal(that1.DisplaySpec) {
		return false
	}
	return true
}
func (this *Widget_Position) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Widget_Position)
	if !ok {
		that2, ok := that.(Widget_Position)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	if this.W != that1.W {
		return false
	}
	if this.H != that1.H {
		return false
	}
	return true
}
func (this *Widget_Func) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Widget_Func)
	if !ok {
		that2, ok := that.(Widget_Func)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(that1.Args[i]) {
			return false
		}
	}
	return true
}
func (this *Widget_Func_FuncArg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Widget_Func_FuncArg)
	if !ok {
		that2, ok := that.(Widget_Func_FuncArg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.Input == nil {
		if this.Input != nil {
			return false
		}
	} else if this.Input == nil {
		return false
	} else if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *Widget_Func_FuncArg_Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Widget_Func_FuncArg_Value)
	if !ok {
		that2, ok := that.(Widget_Func_FuncArg_Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Widget_Func_FuncArg_Variable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Widget_Func_FuncArg_Variable)
	if !ok {
		that2, ok := that.(Widget_Func_FuncArg_Variable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Variable != that1.Variable {
		return false
	}
	return true
}
func (this *Axis) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Axis)
	if !ok {
		that2, ok := that.(Axis)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	return true
}
func (this *BarChart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BarChart)
	if !ok {
		that2, ok := that.(BarChart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bar.Equal(that1.Bar) {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.XAxis.Equal(that1.XAxis) {
		return false
	}
	if !this.YAxis.Equal(that1.YAxis) {
		return false
	}
	return true
}
func (this *BarChart_Bar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BarChart_Bar)
	if !ok {
		that2, ok := that.(BarChart_Bar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.StackBy != that1.StackBy {
		return false
	}
	if this.GroupBy != that1.GroupBy {
		return false
	}
	return true
}
func (this *TimeseriesChart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeseriesChart)
	if !ok {
		that2, ok := that.(TimeseriesChart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Timeseries) != len(that1.Timeseries) {
		return false
	}
	for i := range this.Timeseries {
		if !this.Timeseries[i].Equal(that1.Timeseries[i]) {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.XAxis.Equal(that1.XAxis) {
		return false
	}
	if !this.YAxis.Equal(that1.YAxis) {
		return false
	}
	return true
}
func (this *TimeseriesChart_Timeseries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeseriesChart_Timeseries)
	if !ok {
		that2, ok := that.(TimeseriesChart_Timeseries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Series != that1.Series {
		return false
	}
	if this.StackBySeries != that1.StackBySeries {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *VegaChart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VegaChart)
	if !ok {
		that2, ok := that.(VegaChart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Spec != that1.Spec {
		return false
	}
	return true
}
func (this *Table) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table)
	if !ok {
		that2, ok := that.(Table)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Vis) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pl_vispb.Vis{")
	if this.Variables != nil {
		s = append(s, "Variables: "+fmt.Sprintf("%#v", this.Variables)+",\n")
	}
	if this.Widgets != nil {
		s = append(s, "Widgets: "+fmt.Sprintf("%#v", this.Widgets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vis_Variable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pl_vispb.Vis_Variable{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Widget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pl_vispb.Widget{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Position != nil {
		s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	}
	if this.Func != nil {
		s = append(s, "Func: "+fmt.Sprintf("%#v", this.Func)+",\n")
	}
	if this.DisplaySpec != nil {
		s = append(s, "DisplaySpec: "+fmt.Sprintf("%#v", this.DisplaySpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Widget_Position) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pl_vispb.Widget_Position{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "H: "+fmt.Sprintf("%#v", this.H)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Widget_Func) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pl_vispb.Widget_Func{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Args != nil {
		s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Widget_Func_FuncArg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pl_vispb.Widget_Func_FuncArg{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Widget_Func_FuncArg_Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_vispb.Widget_Func_FuncArg_Value{` +
		`Value:` + fmt.Sprintf("%#v", this.Value) + `}`}, ", ")
	return s
}
func (this *Widget_Func_FuncArg_Variable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pl_vispb.Widget_Func_FuncArg_Variable{` +
		`Variable:` + fmt.Sprintf("%#v", this.Variable) + `}`}, ", ")
	return s
}
func (this *Axis) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_vispb.Axis{")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BarChart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pl_vispb.BarChart{")
	if this.Bar != nil {
		s = append(s, "Bar: "+fmt.Sprintf("%#v", this.Bar)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.XAxis != nil {
		s = append(s, "XAxis: "+fmt.Sprintf("%#v", this.XAxis)+",\n")
	}
	if this.YAxis != nil {
		s = append(s, "YAxis: "+fmt.Sprintf("%#v", this.YAxis)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BarChart_Bar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pl_vispb.BarChart_Bar{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "StackBy: "+fmt.Sprintf("%#v", this.StackBy)+",\n")
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimeseriesChart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pl_vispb.TimeseriesChart{")
	if this.Timeseries != nil {
		s = append(s, "Timeseries: "+fmt.Sprintf("%#v", this.Timeseries)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.XAxis != nil {
		s = append(s, "XAxis: "+fmt.Sprintf("%#v", this.XAxis)+",\n")
	}
	if this.YAxis != nil {
		s = append(s, "YAxis: "+fmt.Sprintf("%#v", this.YAxis)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimeseriesChart_Timeseries) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pl_vispb.TimeseriesChart_Timeseries{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Series: "+fmt.Sprintf("%#v", this.Series)+",\n")
	s = append(s, "StackBySeries: "+fmt.Sprintf("%#v", this.StackBySeries)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VegaChart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pl_vispb.VegaChart{")
	s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Table) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pl_vispb.Table{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVis(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Vis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Widgets) > 0 {
		for iNdEx := len(m.Widgets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Widgets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Variables) > 0 {
		for iNdEx := len(m.Variables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Variables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vis_Variable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vis_Variable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vis_Variable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintVis(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Widget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Widget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Widget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisplaySpec != nil {
		{
			size, err := m.DisplaySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Func != nil {
		{
			size, err := m.Func.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Widget_Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Widget_Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Widget_Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.H != 0 {
		i = encodeVarintVis(dAtA, i, uint64(m.H))
		i--
		dAtA[i] = 0x20
	}
	if m.W != 0 {
		i = encodeVarintVis(dAtA, i, uint64(m.W))
		i--
		dAtA[i] = 0x18
	}
	if m.Y != 0 {
		i = encodeVarintVis(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintVis(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Widget_Func) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Widget_Func) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Widget_Func) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Widget_Func_FuncArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Widget_Func_FuncArg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Widget_Func_FuncArg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size := m.Input.Size()
			i -= size
			if _, err := m.Input.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Widget_Func_FuncArg_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Widget_Func_FuncArg_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintVis(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Widget_Func_FuncArg_Variable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Widget_Func_FuncArg_Variable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Variable)
	copy(dAtA[i:], m.Variable)
	i = encodeVarintVis(dAtA, i, uint64(len(m.Variable)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Axis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Axis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Axis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BarChart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarChart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BarChart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.YAxis != nil {
		{
			size, err := m.YAxis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.XAxis != nil {
		{
			size, err := m.XAxis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Bar != nil {
		{
			size, err := m.Bar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BarChart_Bar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarChart_Bar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BarChart_Bar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupBy) > 0 {
		i -= len(m.GroupBy)
		copy(dAtA[i:], m.GroupBy)
		i = encodeVarintVis(dAtA, i, uint64(len(m.GroupBy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StackBy) > 0 {
		i -= len(m.StackBy)
		copy(dAtA[i:], m.StackBy)
		i = encodeVarintVis(dAtA, i, uint64(len(m.StackBy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeseriesChart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeseriesChart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeseriesChart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.YAxis != nil {
		{
			size, err := m.YAxis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.XAxis != nil {
		{
			size, err := m.XAxis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Timeseries) > 0 {
		for iNdEx := len(m.Timeseries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Timeseries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TimeseriesChart_Timeseries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeseriesChart_Timeseries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeseriesChart_Timeseries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		i = encodeVarintVis(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x20
	}
	if m.StackBySeries {
		i--
		if m.StackBySeries {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Series) > 0 {
		i -= len(m.Series)
		copy(dAtA[i:], m.Series)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Series)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VegaChart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VegaChart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VegaChart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spec) > 0 {
		i -= len(m.Spec)
		copy(dAtA[i:], m.Spec)
		i = encodeVarintVis(dAtA, i, uint64(len(m.Spec)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintVis(dAtA []byte, offset int, v uint64) int {
	offset -= sovVis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Variables) > 0 {
		for _, e := range m.Variables {
			l = e.Size()
			n += 1 + l + sovVis(uint64(l))
		}
	}
	if len(m.Widgets) > 0 {
		for _, e := range m.Widgets {
			l = e.Size()
			n += 1 + l + sovVis(uint64(l))
		}
	}
	return n
}

func (m *Vis_Variable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovVis(uint64(m.Type))
	}
	return n
}

func (m *Widget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovVis(uint64(l))
	}
	if m.Func != nil {
		l = m.Func.Size()
		n += 1 + l + sovVis(uint64(l))
	}
	if m.DisplaySpec != nil {
		l = m.DisplaySpec.Size()
		n += 1 + l + sovVis(uint64(l))
	}
	return n
}

func (m *Widget_Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovVis(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovVis(uint64(m.Y))
	}
	if m.W != 0 {
		n += 1 + sovVis(uint64(m.W))
	}
	if m.H != 0 {
		n += 1 + sovVis(uint64(m.H))
	}
	return n
}

func (m *Widget_Func) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovVis(uint64(l))
		}
	}
	return n
}

func (m *Widget_Func_FuncArg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	if m.Input != nil {
		n += m.Input.Size()
	}
	return n
}

func (m *Widget_Func_FuncArg_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	n += 1 + l + sovVis(uint64(l))
	return n
}
func (m *Widget_Func_FuncArg_Variable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Variable)
	n += 1 + l + sovVis(uint64(l))
	return n
}
func (m *Axis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	return n
}

func (m *BarChart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bar != nil {
		l = m.Bar.Size()
		n += 1 + l + sovVis(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	if m.XAxis != nil {
		l = m.XAxis.Size()
		n += 1 + l + sovVis(uint64(l))
	}
	if m.YAxis != nil {
		l = m.YAxis.Size()
		n += 1 + l + sovVis(uint64(l))
	}
	return n
}

func (m *BarChart_Bar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	l = len(m.StackBy)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	l = len(m.GroupBy)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	return n
}

func (m *TimeseriesChart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Timeseries) > 0 {
		for _, e := range m.Timeseries {
			l = e.Size()
			n += 1 + l + sovVis(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	if m.XAxis != nil {
		l = m.XAxis.Size()
		n += 1 + l + sovVis(uint64(l))
	}
	if m.YAxis != nil {
		l = m.YAxis.Size()
		n += 1 + l + sovVis(uint64(l))
	}
	return n
}

func (m *TimeseriesChart_Timeseries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	l = len(m.Series)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	if m.StackBySeries {
		n += 2
	}
	if m.Mode != 0 {
		n += 1 + sovVis(uint64(m.Mode))
	}
	return n
}

func (m *VegaChart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovVis(uint64(l))
	}
	return n
}

func (m *Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovVis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVis(x uint64) (n int) {
	return sovVis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Vis) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVariables := "[]*Vis_Variable{"
	for _, f := range this.Variables {
		repeatedStringForVariables += strings.Replace(fmt.Sprintf("%v", f), "Vis_Variable", "Vis_Variable", 1) + ","
	}
	repeatedStringForVariables += "}"
	repeatedStringForWidgets := "[]*Widget{"
	for _, f := range this.Widgets {
		repeatedStringForWidgets += strings.Replace(f.String(), "Widget", "Widget", 1) + ","
	}
	repeatedStringForWidgets += "}"
	s := strings.Join([]string{`&Vis{`,
		`Variables:` + repeatedStringForVariables + `,`,
		`Widgets:` + repeatedStringForWidgets + `,`,
		`}`,
	}, "")
	return s
}
func (this *Vis_Variable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Vis_Variable{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Widget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Widget{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Position:` + strings.Replace(fmt.Sprintf("%v", this.Position), "Widget_Position", "Widget_Position", 1) + `,`,
		`Func:` + strings.Replace(fmt.Sprintf("%v", this.Func), "Widget_Func", "Widget_Func", 1) + `,`,
		`DisplaySpec:` + strings.Replace(fmt.Sprintf("%v", this.DisplaySpec), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Widget_Position) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Widget_Position{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`H:` + fmt.Sprintf("%v", this.H) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Widget_Func) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgs := "[]*Widget_Func_FuncArg{"
	for _, f := range this.Args {
		repeatedStringForArgs += strings.Replace(fmt.Sprintf("%v", f), "Widget_Func_FuncArg", "Widget_Func_FuncArg", 1) + ","
	}
	repeatedStringForArgs += "}"
	s := strings.Join([]string{`&Widget_Func{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Args:` + repeatedStringForArgs + `,`,
		`}`,
	}, "")
	return s
}
func (this *Widget_Func_FuncArg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Widget_Func_FuncArg{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Widget_Func_FuncArg_Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Widget_Func_FuncArg_Value{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Widget_Func_FuncArg_Variable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Widget_Func_FuncArg_Variable{`,
		`Variable:` + fmt.Sprintf("%v", this.Variable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Axis) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Axis{`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BarChart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BarChart{`,
		`Bar:` + strings.Replace(fmt.Sprintf("%v", this.Bar), "BarChart_Bar", "BarChart_Bar", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`XAxis:` + strings.Replace(this.XAxis.String(), "Axis", "Axis", 1) + `,`,
		`YAxis:` + strings.Replace(this.YAxis.String(), "Axis", "Axis", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BarChart_Bar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BarChart_Bar{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`StackBy:` + fmt.Sprintf("%v", this.StackBy) + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimeseriesChart) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTimeseries := "[]*TimeseriesChart_Timeseries{"
	for _, f := range this.Timeseries {
		repeatedStringForTimeseries += strings.Replace(fmt.Sprintf("%v", f), "TimeseriesChart_Timeseries", "TimeseriesChart_Timeseries", 1) + ","
	}
	repeatedStringForTimeseries += "}"
	s := strings.Join([]string{`&TimeseriesChart{`,
		`Timeseries:` + repeatedStringForTimeseries + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`XAxis:` + strings.Replace(this.XAxis.String(), "Axis", "Axis", 1) + `,`,
		`YAxis:` + strings.Replace(this.YAxis.String(), "Axis", "Axis", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimeseriesChart_Timeseries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeseriesChart_Timeseries{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Series:` + fmt.Sprintf("%v", this.Series) + `,`,
		`StackBySeries:` + fmt.Sprintf("%v", this.StackBySeries) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VegaChart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VegaChart{`,
		`Spec:` + fmt.Sprintf("%v", this.Spec) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Table{`,
		`}`,
	}, "")
	return s
}
func valueToStringVis(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Vis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Variables = append(m.Variables, &Vis_Variable{})
			if err := m.Variables[len(m.Variables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Widgets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Widgets = append(m.Widgets, &Widget{})
			if err := m.Widgets[len(m.Widgets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vis_Variable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Variable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Variable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PXType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Widget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Widget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Widget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Widget_Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Func == nil {
				m.Func = &Widget_Func{}
			}
			if err := m.Func.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplaySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplaySpec == nil {
				m.DisplaySpec = &types.Any{}
			}
			if err := m.DisplaySpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Widget_Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			m.W = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.W |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			m.H = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.H |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Widget_Func) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Func: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Func: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &Widget_Func_FuncArg{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Widget_Func_FuncArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuncArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuncArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = &Widget_Func_FuncArg_Value{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = &Widget_Func_FuncArg_Variable{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Axis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Axis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Axis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarChart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarChart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarChart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bar == nil {
				m.Bar = &BarChart_Bar{}
			}
			if err := m.Bar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAxis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XAxis == nil {
				m.XAxis = &Axis{}
			}
			if err := m.XAxis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YAxis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YAxis == nil {
				m.YAxis = &Axis{}
			}
			if err := m.YAxis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarChart_Bar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeseriesChart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeseriesChart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeseriesChart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeseries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeseries = append(m.Timeseries, &TimeseriesChart_Timeseries{})
			if err := m.Timeseries[len(m.Timeseries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAxis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XAxis == nil {
				m.XAxis = &Axis{}
			}
			if err := m.XAxis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YAxis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YAxis == nil {
				m.YAxis = &Axis{}
			}
			if err := m.YAxis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeseriesChart_Timeseries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timeseries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timeseries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackBySeries", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StackBySeries = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= TimeseriesChart_Timeseries_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VegaChart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VegaChart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VegaChart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVis = fmt.Errorf("proto: unexpected end of group")
)
