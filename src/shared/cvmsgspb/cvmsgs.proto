////////////////////////////////////////////////////////////
// This file has the message based interface between cloud
// and viziers.
// All messages that should up on the message bus between them
// should be in this file.
//
// IMPORTANT: Care should be taken in modifying this file or moving messages,
// since it can change the type signature and break the API.
////////////////////////////////////////////////////////////
syntax = "proto3";

package pl.cvmsgspb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "src/shared/k8s/metadatapb/metadata.proto";
import "src/vizier/vizierpb/vizier.proto";
import "src/common/uuid/proto/uuid.proto";

import "google/protobuf/wrappers.proto";

option go_package = "pixielabs.ai/pixielabs/src/shared/cvmsgspb/messagespb;cvmsgspb";

// MetadataUpdate carries streaming updates from Vizier to cloud.
message MetadataUpdate {
    pl.shared.k8s.metadatapb.ResourceUpdate update = 1;
}

// Message to register a new Vizier.
message RegisterVizierRequest {
    // The ID for this Vizier.
    uuidpb.UUID vizier_id = 1 [
                              (gogoproto.customname) = "VizierID"
                              ];
    // The key that this cluster is using.
    string jwt_key = 2;
    // Address of the proxy service. Format should be fully specified address including protocol,port.
    // ex: https://123.123.123.123:4040
    string address = 3;
    VizierClusterInfo cluster_info = 4;
}

// VizierClusterInfo contains information describing a user's Vizier and the cluster that it is running on.
// This information is stored in Pixie Cloud, where it may be used for purposes such as debugging.
message VizierClusterInfo {
    // A unique ID for the cluster. This is typically the kube-system namespace UID.
    string cluster_uid = 1 [
      (gogoproto.customname) = "ClusterUID"
      ];
    // The name of the cluster. The return value of "kubectl config current-context".
    // This could be empty if the user has not deployed through the CLI.
    string cluster_name = 2;
    // The version of the K8s cluster. For example: v1.14.10-gke.27. This could be empty if
    // the user has not deployed through the CLI.
    string cluster_version = 3;
    // The version of the deployed Vizier.
    string vizier_version = 4;
}

// Acknowledge the registration of a new Vizier.
message RegisterVizierAck {
    enum RegistrationStatus {
        ST_UNKNOWN = 0;
        ST_OK = 1;
        // Failed because the cluster has not been registered into the cloud.
        ST_FAILED_NOT_FOUND = 2;
    }
    RegistrationStatus status = 1;
}

enum VizierStatus {
    VZ_ST_UNKNOWN = 0;
    VZ_ST_HEALTHY = 1;
    VZ_ST_UNHEALTHY = 2;
    VZ_ST_DISCONNECTED = 3;
    VZ_ST_UPDATING = 4;
    VZ_ST_CONNECTED = 5;
    VZ_ST_UPDATE_FAILED = 6;
}

message VizierHeartbeat {
    // The ID for this Vizier.
    uuidpb.UUID vizier_id = 1 [
                              (gogoproto.customname) = "VizierID"
                              ];
    // The current unix time in ns on the machine.
    int64 time = 2;
    // The sequence number of the HB.
    int64 sequence_number = 3;
    // Address of the proxy service.
    string address = 4;
    // Port of the proxy service.
    int32 port = 5;
    // Map of pod name to pod status. This only includes pods that are part of the
    // vizier control plane. Data-plane pods, such as PEMs or Kelvin can be fetched
    // by running the agents script.
    // Ex: {
    //   vizier-query-broker-z26d8: { name: vizier-query-broker-z26d8, status: RUNNING },
    //   vizier-metadata-7b668797b9-bjsvd: { name: vizier-metadata-7b668797b9-bjsvd, status: FAILED }
    // }
    map<string, PodStatus> pod_statuses = 6;
    // The last time the pod statuses were updated.
    int64 pod_statuses_last_updated = 7;
    // The status of vizier at the time of the heartbeat. For backwards compatibility,
    // if status is VZ_ST_UNKNOWN, then we assume the vizier is healthy.
    VizierStatus status = 8;
    // Whether the cluster is in bootstrap mode and needs to be deployed/updated.
    bool bootstrap_mode = 9;
    // The version to update/deploy, if in bootstrap mode.
    string bootstrap_version = 10;
    // The total number of nodes (instrumented & non-instrumented) on the cluster this Vizier is on.
    int32 num_nodes = 11;
}

// PodStatus represents a pod's status at a moment in time. Currently this message
// only contains name and status, but could contain more information that could
// help debug in the future.
message PodStatus {
    // The name of the pod. Ex: vizier-pem-z26d8
    string name = 1;
    // The status of the pod.
    pl.shared.k8s.metadatapb.PodPhase status = 2;
    // The message for why the pod is in its current status.
    string status_message = 3;
    // A brief CamelCase message indicating details about why the pod is in this state.
    string reason = 4;
    // The containers running in the pod.
    repeated ContainerStatus containers = 5;
}

// ContainerStatus represents pa container's status at a moment in time.
message ContainerStatus {
    // The name of the container.
    string name = 1;
    // The current state of the container.
    pl.shared.k8s.metadatapb.ContainerState state = 2;
     // The message for why the container is in its current status.
    string message = 3;
    // A brief CamelCase message indicating details about why the container is in this state.
    string reason = 4;
}

message VizierHeartbeatAck {
    enum HeartbeatStatus {
        HB_UNKNOWN = 0;
        HB_OK = 1;
        HB_ERROR = 2;
    }
    HeartbeatStatus status = 1;
    // The current unix time in ns on the machine.
    int64 time = 2;
    // The sequence number of the incoming HB.
    int64 sequence_number = 3;
    // Error message only set if HeartbeatStatus is not OK.
    string error_message = 4;
}

message VizierConfig {
    bool passthrough_enabled = 1;
}

message VizierConfigUpdate {
    google.protobuf.BoolValue passthrough_enabled = 1;
}

message VizierInfo {
    // The ID for this Vizier.
    uuidpb.UUID vizier_id = 1 [
                              (gogoproto.customname) = "VizierID",
                              (gogoproto.moretags) = "db:vizier_id"
                              ];
    VizierStatus status = 2;
    // Time in ns since the last heart beat. Negative number implies heartbeat never received.
    int64 last_heartbeat_ns = 3 [
                                (gogoproto.moretags) = "db:last_heartbeat"
                                ];
    VizierConfig config = 4;
    // A unique ID for the cluster. This is typically the kube-system namespace UID.
    string cluster_uid = 5 [
      (gogoproto.customname) = "ClusterUID"
      ];
    // The name of the cluster. The return value of "kubectl config current-context".
    // This could be empty if the user has not deployed through the CLI.
    string cluster_name = 6;
    // The version of the K8s cluster. For example: v1.14.10-gke.27. This could be empty if
    // the user has not deployed through the CLI.
    string cluster_version = 7;
    // The version of the deployed Vizier.
    string vizier_version = 8;
}

message UpdateVizierConfigRequest {
    uuidpb.UUID vizier_id = 1 [
                              (gogoproto.customname) = "VizierID",
                              (gogoproto.moretags) = "db:vizier_id"
                              ];
    VizierConfigUpdate config_update = 2;
}

message UpdateVizierConfigResponse {}

// UpdateOrInstallVizierRequest is a request to install/update a vizier.
message UpdateOrInstallVizierRequest {
  // The ID of the vizier to upgrade/install.
  pl.uuidpb.UUID vizier_id = 1 [
                        (gogoproto.customname) = "VizierID"
                        ];
  // The version to upgrade/install the cluster as. If no version is specified, we assume we should
  // upgrade to the latest version.
  string version = 2;
  // The token the Vizier should use to make authenticated requests to the cloud.
  string token = 3;
  // Whether or not this upgrade should restart the etcd operator.
  bool redeploy_etcd = 4;
}

// UpdateOrInstallVizierResponse is a response to an UpdateOrInstallVizierRequest.
message UpdateOrInstallVizierResponse {
  // Whether the vizier intall/update was started successfully.
  bool update_started = 1;
}

// Information require to connect to a vizier cluster.
message VizierConnectionInfo {
    string ip_address = 1 [
                          (gogoproto.customname) = "IPAddress",
                          (gogoproto.moretags) = "db:ip_address"
                          ];
    string token = 2;
}

message VizierSSLCertRequest {
    uuidpb.UUID vizier_id = 1 [
                              (gogoproto.customname) = "VizierID"
                              ];
}

message VizierSSLCertResponse {
    string key = 1;
    string cert = 2;
}

// MetadataRequest is the message used by cloud to request a specific metadata from Vizier.
message MetadataRequest {
    // The earliest resource version to get. This can be left blank if requesting updates
    // since the beginning of time.
    string from = 1;

    // The last resource version to get. This value is not inclusive and should not be left blank.
    string to = 2;
    // The channel which the response should be sent on.
    string topic = 3;
}

// MetadataResponse happens in response to a MetadataRequest and is used by Vizier to respond to metadata
// requests from cloud.
message MetadataResponse {
    repeated pl.shared.k8s.metadatapb.ResourceUpdate updates = 1;
}

// LogMessage carries log messages from Vizier to the cloud.
message VLogMessage {
    // JSON data generated by fluent-bit.
    bytes data = 1;
}

// C2VAPIStreamRequest calls a Vizier's public stream API remotely from the cloud. Only streaming methods are permitted.
message C2VAPIStreamRequest {
    // The request ID is a GUID for the request. The reply will in the string .reply_<request_id>.
    string request_id = 1 [(gogoproto.customname) = "RequestID"];
    // The token to when making the request.
    string token = 2;
    // The request.
    oneof msg {
        pl.api.vizierpb.ExecuteScriptRequest exec_req = 3;
        pl.api.vizierpb.HealthCheckRequest hc_req = 4;
        C2VAPIStreamCancel cancel_req = 5;
    }
}

// C2VAPIStreamCancel cancels the pending request and terminates.
message C2VAPIStreamCancel {
}

message V2CAPIStreamResponse {
    // The request ID is a GUID for the request.
    string request_id = 1 [(gogoproto.customname) = "RequestID"];

    oneof msg {
        pl.api.vizierpb.ExecuteScriptResponse exec_resp = 2;
        pl.api.vizierpb.HealthCheckResponse hc_resp = 3;
        pl.api.vizierpb.Status status = 4;
    }
}


// V2CMessage is an envelope message for the top-level v2c.* NATS channel on the cloud side.
message V2CMessage {
    // This is the ID of the vizier that we track.
    string vizier_id = 1 [(gogoproto.customname) = "VizierID"];
    // This is the ID of K8s cluster as known to K8s. If this changes, we know
    // that the cluster has been updated.
    string cluster_uid = 2 [(gogoproto.customname) = "VizierID"];
    // This is an opaque monotonically increasing number that updates for each restart of cloud connector.
    int64 session_id = 3;
    google.protobuf.Any msg = 4;
}

// C2VMessage is the envelope message for the top-level c2v.* NATS channel on the cloud side.
message C2VMessage {
    string vizier_id = 1 [(gogoproto.customname) = "VizierID"];
    google.protobuf.Any msg = 2;
}
