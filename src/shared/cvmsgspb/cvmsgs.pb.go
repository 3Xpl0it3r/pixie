// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/shared/cvmsgspb/cvmsgs.proto

package cvmsgspb
  
import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	proto1 "pixielabs.ai/pixielabs/src/common/uuid/proto"
	metadatapb "pixielabs.ai/pixielabs/src/shared/k8s/metadatapb"
	vizierpb "pixielabs.ai/pixielabs/src/vizier/vizierpb"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegisterVizierAck_RegistrationStatus int32

const (
	ST_UNKNOWN          RegisterVizierAck_RegistrationStatus = 0
	ST_OK               RegisterVizierAck_RegistrationStatus = 1
	ST_FAILED_NOT_FOUND RegisterVizierAck_RegistrationStatus = 2
)

var RegisterVizierAck_RegistrationStatus_name = map[int32]string{
	0: "ST_UNKNOWN",
	1: "ST_OK",
	2: "ST_FAILED_NOT_FOUND",
}

var RegisterVizierAck_RegistrationStatus_value = map[string]int32{
	"ST_UNKNOWN":          0,
	"ST_OK":               1,
	"ST_FAILED_NOT_FOUND": 2,
}

func (RegisterVizierAck_RegistrationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{3, 0}
}

type VizierHeartbeatAck_HeartbeatStatus int32

const (
	HB_UNKNOWN VizierHeartbeatAck_HeartbeatStatus = 0
	HB_OK      VizierHeartbeatAck_HeartbeatStatus = 1
	HB_ERROR   VizierHeartbeatAck_HeartbeatStatus = 2
)

var VizierHeartbeatAck_HeartbeatStatus_name = map[int32]string{
	0: "HB_UNKNOWN",
	1: "HB_OK",
	2: "HB_ERROR",
}

var VizierHeartbeatAck_HeartbeatStatus_value = map[string]int32{
	"HB_UNKNOWN": 0,
	"HB_OK":      1,
	"HB_ERROR":   2,
}

func (VizierHeartbeatAck_HeartbeatStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{5, 0}
}

type VizierInfo_Status int32

const (
	VZ_ST_UNKNOWN      VizierInfo_Status = 0
	VZ_ST_HEALTHY      VizierInfo_Status = 1
	VZ_ST_UNHEALTHY    VizierInfo_Status = 2
	VZ_ST_DISCONNECTED VizierInfo_Status = 3
)

var VizierInfo_Status_name = map[int32]string{
	0: "VZ_ST_UNKNOWN",
	1: "VZ_ST_HEALTHY",
	2: "VZ_ST_UNHEALTHY",
	3: "VZ_ST_DISCONNECTED",
}

var VizierInfo_Status_value = map[string]int32{
	"VZ_ST_UNKNOWN":      0,
	"VZ_ST_HEALTHY":      1,
	"VZ_ST_UNHEALTHY":    2,
	"VZ_ST_DISCONNECTED": 3,
}

func (VizierInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{8, 0}
}

type MetadataUpdate struct {
	Update *metadatapb.ResourceUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
}

func (m *MetadataUpdate) Reset()      { *m = MetadataUpdate{} }
func (*MetadataUpdate) ProtoMessage() {}
func (*MetadataUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{0}
}
func (m *MetadataUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataUpdate.Merge(m, src)
}
func (m *MetadataUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MetadataUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataUpdate proto.InternalMessageInfo

func (m *MetadataUpdate) GetUpdate() *metadatapb.ResourceUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type RegisterVizierRequest struct {
	VizierID    *proto1.UUID       `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	JwtKey      string             `protobuf:"bytes,2,opt,name=jwt_key,json=jwtKey,proto3" json:"jwt_key,omitempty"`
	Address     string             `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	ClusterInfo *VizierClusterInfo `protobuf:"bytes,4,opt,name=cluster_info,json=clusterInfo,proto3" json:"cluster_info,omitempty"`
}

func (m *RegisterVizierRequest) Reset()      { *m = RegisterVizierRequest{} }
func (*RegisterVizierRequest) ProtoMessage() {}
func (*RegisterVizierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{1}
}
func (m *RegisterVizierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterVizierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterVizierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterVizierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterVizierRequest.Merge(m, src)
}
func (m *RegisterVizierRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterVizierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterVizierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterVizierRequest proto.InternalMessageInfo

func (m *RegisterVizierRequest) GetVizierID() *proto1.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *RegisterVizierRequest) GetJwtKey() string {
	if m != nil {
		return m.JwtKey
	}
	return ""
}

func (m *RegisterVizierRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisterVizierRequest) GetClusterInfo() *VizierClusterInfo {
	if m != nil {
		return m.ClusterInfo
	}
	return nil
}

type VizierClusterInfo struct {
	ClusterUID     string `protobuf:"bytes,1,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
	ClusterName    string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	ClusterVersion string `protobuf:"bytes,3,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
	VizierVersion  string `protobuf:"bytes,4,opt,name=vizier_version,json=vizierVersion,proto3" json:"vizier_version,omitempty"`
}

func (m *VizierClusterInfo) Reset()      { *m = VizierClusterInfo{} }
func (*VizierClusterInfo) ProtoMessage() {}
func (*VizierClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{2}
}
func (m *VizierClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierClusterInfo.Merge(m, src)
}
func (m *VizierClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *VizierClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VizierClusterInfo proto.InternalMessageInfo

func (m *VizierClusterInfo) GetClusterUID() string {
	if m != nil {
		return m.ClusterUID
	}
	return ""
}

func (m *VizierClusterInfo) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *VizierClusterInfo) GetClusterVersion() string {
	if m != nil {
		return m.ClusterVersion
	}
	return ""
}

func (m *VizierClusterInfo) GetVizierVersion() string {
	if m != nil {
		return m.VizierVersion
	}
	return ""
}

type RegisterVizierAck struct {
	Status RegisterVizierAck_RegistrationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pl.cvmsgspb.RegisterVizierAck_RegistrationStatus" json:"status,omitempty"`
}

func (m *RegisterVizierAck) Reset()      { *m = RegisterVizierAck{} }
func (*RegisterVizierAck) ProtoMessage() {}
func (*RegisterVizierAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{3}
}
func (m *RegisterVizierAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterVizierAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterVizierAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterVizierAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterVizierAck.Merge(m, src)
}
func (m *RegisterVizierAck) XXX_Size() int {
	return m.Size()
}
func (m *RegisterVizierAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterVizierAck.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterVizierAck proto.InternalMessageInfo

func (m *RegisterVizierAck) GetStatus() RegisterVizierAck_RegistrationStatus {
	if m != nil {
		return m.Status
	}
	return ST_UNKNOWN
}

type VizierHeartbeat struct {
	VizierID       *proto1.UUID `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	Time           int64        `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	SequenceNumber int64        `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Address        string       `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Port           int32        `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *VizierHeartbeat) Reset()      { *m = VizierHeartbeat{} }
func (*VizierHeartbeat) ProtoMessage() {}
func (*VizierHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{4}
}
func (m *VizierHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierHeartbeat.Merge(m, src)
}
func (m *VizierHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *VizierHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_VizierHeartbeat proto.InternalMessageInfo

func (m *VizierHeartbeat) GetVizierID() *proto1.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *VizierHeartbeat) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *VizierHeartbeat) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *VizierHeartbeat) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *VizierHeartbeat) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type VizierHeartbeatAck struct {
	Status         VizierHeartbeatAck_HeartbeatStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pl.cvmsgspb.VizierHeartbeatAck_HeartbeatStatus" json:"status,omitempty"`
	Time           int64                              `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	SequenceNumber int64                              `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ErrorMessage   string                             `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *VizierHeartbeatAck) Reset()      { *m = VizierHeartbeatAck{} }
func (*VizierHeartbeatAck) ProtoMessage() {}
func (*VizierHeartbeatAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{5}
}
func (m *VizierHeartbeatAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierHeartbeatAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierHeartbeatAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierHeartbeatAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierHeartbeatAck.Merge(m, src)
}
func (m *VizierHeartbeatAck) XXX_Size() int {
	return m.Size()
}
func (m *VizierHeartbeatAck) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierHeartbeatAck.DiscardUnknown(m)
}

var xxx_messageInfo_VizierHeartbeatAck proto.InternalMessageInfo

func (m *VizierHeartbeatAck) GetStatus() VizierHeartbeatAck_HeartbeatStatus {
	if m != nil {
		return m.Status
	}
	return HB_UNKNOWN
}

func (m *VizierHeartbeatAck) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *VizierHeartbeatAck) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *VizierHeartbeatAck) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type VizierConfig struct {
	PassthroughEnabled bool `protobuf:"varint,1,opt,name=passthrough_enabled,json=passthroughEnabled,proto3" json:"passthrough_enabled,omitempty"`
}

func (m *VizierConfig) Reset()      { *m = VizierConfig{} }
func (*VizierConfig) ProtoMessage() {}
func (*VizierConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{6}
}
func (m *VizierConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierConfig.Merge(m, src)
}
func (m *VizierConfig) XXX_Size() int {
	return m.Size()
}
func (m *VizierConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VizierConfig proto.InternalMessageInfo

func (m *VizierConfig) GetPassthroughEnabled() bool {
	if m != nil {
		return m.PassthroughEnabled
	}
	return false
}

type VizierConfigUpdate struct {
	PassthroughEnabled *types.BoolValue `protobuf:"bytes,1,opt,name=passthrough_enabled,json=passthroughEnabled,proto3" json:"passthrough_enabled,omitempty"`
}

func (m *VizierConfigUpdate) Reset()      { *m = VizierConfigUpdate{} }
func (*VizierConfigUpdate) ProtoMessage() {}
func (*VizierConfigUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{7}
}
func (m *VizierConfigUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierConfigUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierConfigUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierConfigUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierConfigUpdate.Merge(m, src)
}
func (m *VizierConfigUpdate) XXX_Size() int {
	return m.Size()
}
func (m *VizierConfigUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierConfigUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_VizierConfigUpdate proto.InternalMessageInfo

func (m *VizierConfigUpdate) GetPassthroughEnabled() *types.BoolValue {
	if m != nil {
		return m.PassthroughEnabled
	}
	return nil
}

type VizierInfo struct {
	VizierID        *proto1.UUID      `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty" db:vizier_id`
	Status          VizierInfo_Status `protobuf:"varint,2,opt,name=status,proto3,enum=pl.cvmsgspb.VizierInfo_Status" json:"status,omitempty"`
	LastHeartbeatNs int64             `protobuf:"varint,3,opt,name=last_heartbeat_ns,json=lastHeartbeatNs,proto3" json:"last_heartbeat_ns,omitempty" db:last_heartbeat`
	Config          *VizierConfig     `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *VizierInfo) Reset()      { *m = VizierInfo{} }
func (*VizierInfo) ProtoMessage() {}
func (*VizierInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{8}
}
func (m *VizierInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierInfo.Merge(m, src)
}
func (m *VizierInfo) XXX_Size() int {
	return m.Size()
}
func (m *VizierInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VizierInfo proto.InternalMessageInfo

func (m *VizierInfo) GetVizierID() *proto1.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *VizierInfo) GetStatus() VizierInfo_Status {
	if m != nil {
		return m.Status
	}
	return VZ_ST_UNKNOWN
}

func (m *VizierInfo) GetLastHeartbeatNs() int64 {
	if m != nil {
		return m.LastHeartbeatNs
	}
	return 0
}

func (m *VizierInfo) GetConfig() *VizierConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type UpdateVizierConfigRequest struct {
	VizierID     *proto1.UUID        `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty" db:vizier_id`
	ConfigUpdate *VizierConfigUpdate `protobuf:"bytes,2,opt,name=config_update,json=configUpdate,proto3" json:"config_update,omitempty"`
}

func (m *UpdateVizierConfigRequest) Reset()      { *m = UpdateVizierConfigRequest{} }
func (*UpdateVizierConfigRequest) ProtoMessage() {}
func (*UpdateVizierConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{9}
}
func (m *UpdateVizierConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVizierConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVizierConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVizierConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVizierConfigRequest.Merge(m, src)
}
func (m *UpdateVizierConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVizierConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVizierConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVizierConfigRequest proto.InternalMessageInfo

func (m *UpdateVizierConfigRequest) GetVizierID() *proto1.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

func (m *UpdateVizierConfigRequest) GetConfigUpdate() *VizierConfigUpdate {
	if m != nil {
		return m.ConfigUpdate
	}
	return nil
}

type UpdateVizierConfigResponse struct {
}

func (m *UpdateVizierConfigResponse) Reset()      { *m = UpdateVizierConfigResponse{} }
func (*UpdateVizierConfigResponse) ProtoMessage() {}
func (*UpdateVizierConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{10}
}
func (m *UpdateVizierConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateVizierConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateVizierConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateVizierConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVizierConfigResponse.Merge(m, src)
}
func (m *UpdateVizierConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateVizierConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVizierConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVizierConfigResponse proto.InternalMessageInfo

type VizierConnectionInfo struct {
	IPAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty" db:ip_address`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *VizierConnectionInfo) Reset()      { *m = VizierConnectionInfo{} }
func (*VizierConnectionInfo) ProtoMessage() {}
func (*VizierConnectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{11}
}
func (m *VizierConnectionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierConnectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierConnectionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierConnectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierConnectionInfo.Merge(m, src)
}
func (m *VizierConnectionInfo) XXX_Size() int {
	return m.Size()
}
func (m *VizierConnectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierConnectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VizierConnectionInfo proto.InternalMessageInfo

func (m *VizierConnectionInfo) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *VizierConnectionInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VizierSSLCertRequest struct {
	VizierID *proto1.UUID `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
}

func (m *VizierSSLCertRequest) Reset()      { *m = VizierSSLCertRequest{} }
func (*VizierSSLCertRequest) ProtoMessage() {}
func (*VizierSSLCertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{12}
}
func (m *VizierSSLCertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierSSLCertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierSSLCertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierSSLCertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierSSLCertRequest.Merge(m, src)
}
func (m *VizierSSLCertRequest) XXX_Size() int {
	return m.Size()
}
func (m *VizierSSLCertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierSSLCertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VizierSSLCertRequest proto.InternalMessageInfo

func (m *VizierSSLCertRequest) GetVizierID() *proto1.UUID {
	if m != nil {
		return m.VizierID
	}
	return nil
}

type VizierSSLCertResponse struct {
	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Cert string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (m *VizierSSLCertResponse) Reset()      { *m = VizierSSLCertResponse{} }
func (*VizierSSLCertResponse) ProtoMessage() {}
func (*VizierSSLCertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{13}
}
func (m *VizierSSLCertResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizierSSLCertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizierSSLCertResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizierSSLCertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizierSSLCertResponse.Merge(m, src)
}
func (m *VizierSSLCertResponse) XXX_Size() int {
	return m.Size()
}
func (m *VizierSSLCertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VizierSSLCertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VizierSSLCertResponse proto.InternalMessageInfo

func (m *VizierSSLCertResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *VizierSSLCertResponse) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

type MetadataRequest struct {
	From  string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To    string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *MetadataRequest) Reset()      { *m = MetadataRequest{} }
func (*MetadataRequest) ProtoMessage() {}
func (*MetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{14}
}
func (m *MetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRequest.Merge(m, src)
}
func (m *MetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRequest proto.InternalMessageInfo

func (m *MetadataRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MetadataRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MetadataRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type MetadataResponse struct {
	Updates []*metadatapb.ResourceUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (m *MetadataResponse) Reset()      { *m = MetadataResponse{} }
func (*MetadataResponse) ProtoMessage() {}
func (*MetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{15}
}
func (m *MetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataResponse.Merge(m, src)
}
func (m *MetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataResponse proto.InternalMessageInfo

func (m *MetadataResponse) GetUpdates() []*metadatapb.ResourceUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

type VLogMessage struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *VLogMessage) Reset()      { *m = VLogMessage{} }
func (*VLogMessage) ProtoMessage() {}
func (*VLogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{16}
}
func (m *VLogMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VLogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VLogMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VLogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VLogMessage.Merge(m, src)
}
func (m *VLogMessage) XXX_Size() int {
	return m.Size()
}
func (m *VLogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VLogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VLogMessage proto.InternalMessageInfo

func (m *VLogMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2VAPIStreamRequest struct {
	RequestID string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*C2VAPIStreamRequest_ExecReq
	//	*C2VAPIStreamRequest_HcReq
	//	*C2VAPIStreamRequest_CancelReq
	Msg isC2VAPIStreamRequest_Msg `protobuf_oneof:"msg"`
}

func (m *C2VAPIStreamRequest) Reset()      { *m = C2VAPIStreamRequest{} }
func (*C2VAPIStreamRequest) ProtoMessage() {}
func (*C2VAPIStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{17}
}
func (m *C2VAPIStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2VAPIStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2VAPIStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2VAPIStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2VAPIStreamRequest.Merge(m, src)
}
func (m *C2VAPIStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *C2VAPIStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_C2VAPIStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_C2VAPIStreamRequest proto.InternalMessageInfo

type isC2VAPIStreamRequest_Msg interface {
	isC2VAPIStreamRequest_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type C2VAPIStreamRequest_ExecReq struct {
	ExecReq *vizierpb.ExecuteScriptRequest `protobuf:"bytes,3,opt,name=exec_req,json=execReq,proto3,oneof" json:"exec_req,omitempty"`
}
type C2VAPIStreamRequest_HcReq struct {
	HcReq *vizierpb.HealthCheckRequest `protobuf:"bytes,4,opt,name=hc_req,json=hcReq,proto3,oneof" json:"hc_req,omitempty"`
}
type C2VAPIStreamRequest_CancelReq struct {
	CancelReq *C2VAPIStreamCancel `protobuf:"bytes,5,opt,name=cancel_req,json=cancelReq,proto3,oneof" json:"cancel_req,omitempty"`
}

func (*C2VAPIStreamRequest_ExecReq) isC2VAPIStreamRequest_Msg()   {}
func (*C2VAPIStreamRequest_HcReq) isC2VAPIStreamRequest_Msg()     {}
func (*C2VAPIStreamRequest_CancelReq) isC2VAPIStreamRequest_Msg() {}

func (m *C2VAPIStreamRequest) GetMsg() isC2VAPIStreamRequest_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *C2VAPIStreamRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *C2VAPIStreamRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *C2VAPIStreamRequest) GetExecReq() *vizierpb.ExecuteScriptRequest {
	if x, ok := m.GetMsg().(*C2VAPIStreamRequest_ExecReq); ok {
		return x.ExecReq
	}
	return nil
}

func (m *C2VAPIStreamRequest) GetHcReq() *vizierpb.HealthCheckRequest {
	if x, ok := m.GetMsg().(*C2VAPIStreamRequest_HcReq); ok {
		return x.HcReq
	}
	return nil
}

func (m *C2VAPIStreamRequest) GetCancelReq() *C2VAPIStreamCancel {
	if x, ok := m.GetMsg().(*C2VAPIStreamRequest_CancelReq); ok {
		return x.CancelReq
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*C2VAPIStreamRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*C2VAPIStreamRequest_ExecReq)(nil),
		(*C2VAPIStreamRequest_HcReq)(nil),
		(*C2VAPIStreamRequest_CancelReq)(nil),
	}
}

type C2VAPIStreamCancel struct {
}

func (m *C2VAPIStreamCancel) Reset()      { *m = C2VAPIStreamCancel{} }
func (*C2VAPIStreamCancel) ProtoMessage() {}
func (*C2VAPIStreamCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{18}
}
func (m *C2VAPIStreamCancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2VAPIStreamCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2VAPIStreamCancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2VAPIStreamCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2VAPIStreamCancel.Merge(m, src)
}
func (m *C2VAPIStreamCancel) XXX_Size() int {
	return m.Size()
}
func (m *C2VAPIStreamCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_C2VAPIStreamCancel.DiscardUnknown(m)
}

var xxx_messageInfo_C2VAPIStreamCancel proto.InternalMessageInfo

type V2CAPIStreamResponse struct {
	RequestID string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*V2CAPIStreamResponse_ExecResp
	//	*V2CAPIStreamResponse_HcResp
	//	*V2CAPIStreamResponse_Status
	Msg isV2CAPIStreamResponse_Msg `protobuf_oneof:"msg"`
}

func (m *V2CAPIStreamResponse) Reset()      { *m = V2CAPIStreamResponse{} }
func (*V2CAPIStreamResponse) ProtoMessage() {}
func (*V2CAPIStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{19}
}
func (m *V2CAPIStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2CAPIStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2CAPIStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2CAPIStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2CAPIStreamResponse.Merge(m, src)
}
func (m *V2CAPIStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *V2CAPIStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_V2CAPIStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_V2CAPIStreamResponse proto.InternalMessageInfo

type isV2CAPIStreamResponse_Msg interface {
	isV2CAPIStreamResponse_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type V2CAPIStreamResponse_ExecResp struct {
	ExecResp *vizierpb.ExecuteScriptResponse `protobuf:"bytes,2,opt,name=exec_resp,json=execResp,proto3,oneof" json:"exec_resp,omitempty"`
}
type V2CAPIStreamResponse_HcResp struct {
	HcResp *vizierpb.HealthCheckResponse `protobuf:"bytes,3,opt,name=hc_resp,json=hcResp,proto3,oneof" json:"hc_resp,omitempty"`
}
type V2CAPIStreamResponse_Status struct {
	Status *vizierpb.Status `protobuf:"bytes,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (*V2CAPIStreamResponse_ExecResp) isV2CAPIStreamResponse_Msg() {}
func (*V2CAPIStreamResponse_HcResp) isV2CAPIStreamResponse_Msg()   {}
func (*V2CAPIStreamResponse_Status) isV2CAPIStreamResponse_Msg()   {}

func (m *V2CAPIStreamResponse) GetMsg() isV2CAPIStreamResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *V2CAPIStreamResponse) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *V2CAPIStreamResponse) GetExecResp() *vizierpb.ExecuteScriptResponse {
	if x, ok := m.GetMsg().(*V2CAPIStreamResponse_ExecResp); ok {
		return x.ExecResp
	}
	return nil
}

func (m *V2CAPIStreamResponse) GetHcResp() *vizierpb.HealthCheckResponse {
	if x, ok := m.GetMsg().(*V2CAPIStreamResponse_HcResp); ok {
		return x.HcResp
	}
	return nil
}

func (m *V2CAPIStreamResponse) GetStatus() *vizierpb.Status {
	if x, ok := m.GetMsg().(*V2CAPIStreamResponse_Status); ok {
		return x.Status
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*V2CAPIStreamResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*V2CAPIStreamResponse_ExecResp)(nil),
		(*V2CAPIStreamResponse_HcResp)(nil),
		(*V2CAPIStreamResponse_Status)(nil),
	}
}

type V2CMessage struct {
	VizierID  string     `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	VizierID_ string     `protobuf:"bytes,2,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
	SessionId int64      `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Msg       *types.Any `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *V2CMessage) Reset()      { *m = V2CMessage{} }
func (*V2CMessage) ProtoMessage() {}
func (*V2CMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{20}
}
func (m *V2CMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2CMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2CMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2CMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2CMessage.Merge(m, src)
}
func (m *V2CMessage) XXX_Size() int {
	return m.Size()
}
func (m *V2CMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_V2CMessage.DiscardUnknown(m)
}

var xxx_messageInfo_V2CMessage proto.InternalMessageInfo

func (m *V2CMessage) GetVizierID() string {
	if m != nil {
		return m.VizierID
	}
	return ""
}

func (m *V2CMessage) GetVizierID_() string {
	if m != nil {
		return m.VizierID_
	}
	return ""
}

func (m *V2CMessage) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *V2CMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type C2VMessage struct {
	VizierID string     `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	Msg      *types.Any `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *C2VMessage) Reset()      { *m = C2VMessage{} }
func (*C2VMessage) ProtoMessage() {}
func (*C2VMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{21}
}
func (m *C2VMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2VMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2VMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2VMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2VMessage.Merge(m, src)
}
func (m *C2VMessage) XXX_Size() int {
	return m.Size()
}
func (m *C2VMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_C2VMessage.DiscardUnknown(m)
}

var xxx_messageInfo_C2VMessage proto.InternalMessageInfo

func (m *C2VMessage) GetVizierID() string {
	if m != nil {
		return m.VizierID
	}
	return ""
}

func (m *C2VMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterEnum("pl.cvmsgspb.RegisterVizierAck_RegistrationStatus", RegisterVizierAck_RegistrationStatus_name, RegisterVizierAck_RegistrationStatus_value)
	proto.RegisterEnum("pl.cvmsgspb.VizierHeartbeatAck_HeartbeatStatus", VizierHeartbeatAck_HeartbeatStatus_name, VizierHeartbeatAck_HeartbeatStatus_value)
	proto.RegisterEnum("pl.cvmsgspb.VizierInfo_Status", VizierInfo_Status_name, VizierInfo_Status_value)
	proto.RegisterType((*MetadataUpdate)(nil), "pl.cvmsgspb.MetadataUpdate")
	proto.RegisterType((*RegisterVizierRequest)(nil), "pl.cvmsgspb.RegisterVizierRequest")
	proto.RegisterType((*VizierClusterInfo)(nil), "pl.cvmsgspb.VizierClusterInfo")
	proto.RegisterType((*RegisterVizierAck)(nil), "pl.cvmsgspb.RegisterVizierAck")
	proto.RegisterType((*VizierHeartbeat)(nil), "pl.cvmsgspb.VizierHeartbeat")
	proto.RegisterType((*VizierHeartbeatAck)(nil), "pl.cvmsgspb.VizierHeartbeatAck")
	proto.RegisterType((*VizierConfig)(nil), "pl.cvmsgspb.VizierConfig")
	proto.RegisterType((*VizierConfigUpdate)(nil), "pl.cvmsgspb.VizierConfigUpdate")
	proto.RegisterType((*VizierInfo)(nil), "pl.cvmsgspb.VizierInfo")
	proto.RegisterType((*UpdateVizierConfigRequest)(nil), "pl.cvmsgspb.UpdateVizierConfigRequest")
	proto.RegisterType((*UpdateVizierConfigResponse)(nil), "pl.cvmsgspb.UpdateVizierConfigResponse")
	proto.RegisterType((*VizierConnectionInfo)(nil), "pl.cvmsgspb.VizierConnectionInfo")
	proto.RegisterType((*VizierSSLCertRequest)(nil), "pl.cvmsgspb.VizierSSLCertRequest")
	proto.RegisterType((*VizierSSLCertResponse)(nil), "pl.cvmsgspb.VizierSSLCertResponse")
	proto.RegisterType((*MetadataRequest)(nil), "pl.cvmsgspb.MetadataRequest")
	proto.RegisterType((*MetadataResponse)(nil), "pl.cvmsgspb.MetadataResponse")
	proto.RegisterType((*VLogMessage)(nil), "pl.cvmsgspb.VLogMessage")
	proto.RegisterType((*C2VAPIStreamRequest)(nil), "pl.cvmsgspb.C2VAPIStreamRequest")
	proto.RegisterType((*C2VAPIStreamCancel)(nil), "pl.cvmsgspb.C2VAPIStreamCancel")
	proto.RegisterType((*V2CAPIStreamResponse)(nil), "pl.cvmsgspb.V2CAPIStreamResponse")
	proto.RegisterType((*V2CMessage)(nil), "pl.cvmsgspb.V2CMessage")
	proto.RegisterType((*C2VMessage)(nil), "pl.cvmsgspb.C2VMessage")
}

func init() { proto.RegisterFile("src/shared/cvmsgspb/cvmsgs.proto", fileDescriptor_5a48c2306678667b) }

var fileDescriptor_5a48c2306678667b = []byte{
	// 1453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x73, 0xd3, 0x46,
	0x14, 0xb7, 0xec, 0xc4, 0x89, 0x5f, 0x1c, 0xc7, 0xd9, 0x84, 0x12, 0x32, 0x54, 0x09, 0xa2, 0xd0,
	0x74, 0xa6, 0xc8, 0x83, 0x3b, 0xd3, 0x61, 0xd2, 0x52, 0xf0, 0x3f, 0x6a, 0x37, 0xc1, 0x61, 0xd6,
	0x89, 0x3b, 0xa5, 0x07, 0x8d, 0x24, 0x6f, 0x6c, 0x11, 0x5b, 0x52, 0xb4, 0x12, 0x90, 0x9e, 0x7a,
	0xea, 0xb9, 0x1f, 0xa2, 0x07, 0x2e, 0x9c, 0xdb, 0x8f, 0xd0, 0xde, 0x38, 0x72, 0xca, 0x14, 0xe7,
	0xd2, 0x23, 0xc3, 0xb5, 0x97, 0x8e, 0x76, 0x57, 0x8e, 0x1d, 0x9b, 0x52, 0x0a, 0x27, 0xbf, 0x7d,
	0xfb, 0x7b, 0xff, 0x7e, 0x6f, 0xf5, 0x76, 0x0d, 0xeb, 0xd4, 0x33, 0x73, 0xb4, 0xa3, 0x7b, 0xa4,
	0x95, 0x33, 0x1f, 0xf6, 0x68, 0x9b, 0xba, 0x86, 0x10, 0x54, 0xd7, 0x73, 0x7c, 0x07, 0xcd, 0xb9,
	0x5d, 0x35, 0xda, 0x59, 0xbd, 0xd6, 0xb6, 0xfc, 0x4e, 0x60, 0xa8, 0xa6, 0xd3, 0xcb, 0xb5, 0x9d,
	0xb6, 0x93, 0x63, 0x18, 0x23, 0xd8, 0x67, 0x2b, 0xb6, 0x60, 0x12, 0xb7, 0x5d, 0xbd, 0xd0, 0x76,
	0x9c, 0x76, 0x97, 0x9c, 0xa2, 0x74, 0xfb, 0x48, 0x6c, 0x6d, 0x0c, 0x05, 0x3e, 0xb8, 0x41, 0x73,
	0x3d, 0xe2, 0xeb, 0x2d, 0xdd, 0xd7, 0x5d, 0x63, 0x20, 0x0a, 0x24, 0x4b, 0xf1, 0xa1, 0xf5, 0x83,
	0x45, 0x3c, 0xf1, 0xe3, 0x1a, 0x42, 0x18, 0x46, 0x98, 0x4e, 0xaf, 0xe7, 0xd8, 0xb9, 0x20, 0xb0,
	0x5a, 0x3c, 0x1e, 0x13, 0x05, 0x42, 0x3e, 0x9b, 0xc8, 0x23, 0x4f, 0x77, 0x5d, 0xe2, 0x89, 0x22,
	0x15, 0x0c, 0x99, 0xbb, 0x22, 0xea, 0x9e, 0xdb, 0xd2, 0x7d, 0x82, 0x6e, 0x43, 0x32, 0x60, 0xd2,
	0x8a, 0xb4, 0x2e, 0x6d, 0xcc, 0xe5, 0x37, 0x54, 0xb7, 0xab, 0xf2, 0x7c, 0xd5, 0x83, 0x1b, 0x54,
	0x3d, 0xcd, 0x57, 0xc5, 0x84, 0x3a, 0x81, 0x67, 0x12, 0x6e, 0x89, 0x85, 0x9d, 0xf2, 0x87, 0x04,
	0xe7, 0x30, 0x69, 0x5b, 0xd4, 0x27, 0x5e, 0x93, 0xa5, 0x8b, 0xc9, 0x61, 0x40, 0xa8, 0x8f, 0x36,
	0x21, 0xc5, 0xf3, 0xd7, 0xac, 0x96, 0x70, 0xbf, 0x10, 0xba, 0x0f, 0x13, 0x76, 0x0d, 0x75, 0x6f,
	0xaf, 0x56, 0x2e, 0xa6, 0xfb, 0xc7, 0x6b, 0xb3, 0xdc, 0xac, 0x56, 0xc6, 0xb3, 0x1c, 0x5f, 0x6b,
	0xa1, 0xf3, 0x30, 0xf3, 0xe0, 0x91, 0xaf, 0x1d, 0x90, 0xa3, 0x95, 0xf8, 0xba, 0xb4, 0x91, 0xc2,
	0xc9, 0x07, 0x8f, 0xfc, 0x2d, 0x72, 0x84, 0x56, 0x60, 0x46, 0x6f, 0xb5, 0x3c, 0x42, 0xe9, 0x4a,
	0x82, 0x6d, 0x44, 0x4b, 0x54, 0x80, 0xb4, 0xd9, 0x0d, 0xc2, 0x34, 0x34, 0xcb, 0xde, 0x77, 0x56,
	0xa6, 0x58, 0x44, 0x59, 0x1d, 0x6a, 0xac, 0xca, 0x23, 0x95, 0x38, 0xac, 0x66, 0xef, 0x3b, 0x78,
	0xce, 0x3c, 0x5d, 0x28, 0xbf, 0x4a, 0xb0, 0x38, 0x06, 0x41, 0x39, 0x88, 0x40, 0x5a, 0x20, 0x2a,
	0x49, 0x15, 0x33, 0xfd, 0xe3, 0x35, 0x10, 0xa8, 0xbd, 0x5a, 0x19, 0x83, 0x80, 0xec, 0x59, 0x2d,
	0x74, 0xe9, 0x34, 0x13, 0x5b, 0xef, 0x11, 0x51, 0x41, 0xe4, 0xa4, 0xae, 0xf7, 0x08, 0xfa, 0x18,
	0x16, 0x22, 0xc8, 0x43, 0xe2, 0x51, 0xcb, 0xb1, 0x45, 0x39, 0x19, 0xa1, 0x6e, 0x72, 0x2d, 0xba,
	0x02, 0x19, 0x41, 0x62, 0x84, 0x9b, 0x62, 0xb8, 0x79, 0xae, 0x15, 0x30, 0xe5, 0x89, 0x04, 0x8b,
	0xa3, 0x5d, 0x28, 0x98, 0x07, 0xa8, 0x06, 0x49, 0xea, 0xeb, 0x7e, 0x40, 0x59, 0xd2, 0x99, 0xfc,
	0xf5, 0x11, 0x32, 0xc6, 0xf0, 0x42, 0xe3, 0xe9, 0xbe, 0xe5, 0xd8, 0x0d, 0x66, 0x88, 0x85, 0x03,
	0xa5, 0x0a, 0x68, 0x7c, 0x17, 0x65, 0x00, 0x1a, 0xbb, 0xda, 0x5e, 0x7d, 0xab, 0xbe, 0xf3, 0x6d,
	0x3d, 0x1b, 0x43, 0x29, 0x98, 0x6e, 0xec, 0x6a, 0x3b, 0x5b, 0x59, 0x09, 0x9d, 0x87, 0xa5, 0xc6,
	0xae, 0x76, 0xa7, 0x50, 0xdb, 0xae, 0x94, 0xb5, 0xfa, 0xce, 0xae, 0x76, 0x67, 0x67, 0xaf, 0x5e,
	0xce, 0xc6, 0x95, 0xdf, 0x24, 0x58, 0xe0, 0x21, 0xab, 0x44, 0xf7, 0x7c, 0x83, 0xe8, 0xef, 0x76,
	0x54, 0x10, 0x4c, 0xf9, 0x96, 0x60, 0x39, 0x81, 0x99, 0x1c, 0xd2, 0x4b, 0xc3, 0x53, 0x68, 0x9b,
	0x44, 0xb3, 0x83, 0x9e, 0x41, 0x3c, 0x46, 0x6f, 0x02, 0x67, 0x22, 0x75, 0x9d, 0x69, 0x87, 0x8f,
	0xd3, 0xd4, 0xe8, 0x71, 0x42, 0x30, 0xe5, 0x3a, 0x9e, 0xbf, 0x32, 0xbd, 0x2e, 0x6d, 0x4c, 0x63,
	0x26, 0x2b, 0x7f, 0x4b, 0x80, 0xce, 0xa4, 0x1e, 0xd2, 0xfc, 0xf5, 0x19, 0x9a, 0x73, 0x13, 0xce,
	0xdc, 0xb0, 0x81, 0x3a, 0x58, 0x8c, 0x92, 0xfc, 0x6e, 0xa5, 0x5c, 0x86, 0x79, 0xe2, 0x79, 0x8e,
	0xa7, 0xf5, 0x08, 0xa5, 0x7a, 0x9b, 0x88, 0x82, 0xd2, 0x4c, 0x79, 0x97, 0xeb, 0x94, 0x4d, 0x58,
	0x38, 0x13, 0x3c, 0xec, 0x61, 0xb5, 0x38, 0xda, 0xc3, 0x6a, 0x91, 0xf7, 0x30, 0x0d, 0xb3, 0xd5,
	0xa2, 0x56, 0xc1, 0x78, 0x07, 0x67, 0xe3, 0xca, 0x2d, 0x48, 0x8b, 0x8f, 0xc3, 0xb1, 0xf7, 0xad,
	0x36, 0xca, 0xc1, 0x92, 0xab, 0x53, 0xea, 0x77, 0x3c, 0x27, 0x68, 0x77, 0x34, 0x62, 0xeb, 0x46,
	0x97, 0xf0, 0xf6, 0xcd, 0x62, 0x34, 0xb4, 0x55, 0xe1, 0x3b, 0x8a, 0x1e, 0xb1, 0xc7, 0x1d, 0x88,
	0x11, 0xb4, 0xf5, 0x7a, 0x37, 0x73, 0xf9, 0x55, 0x95, 0x8f, 0x34, 0x35, 0x1a, 0x69, 0x6a, 0xd1,
	0x71, 0xba, 0x4d, 0xbd, 0x1b, 0x90, 0x89, 0x21, 0x4e, 0xe2, 0x00, 0xe2, 0x8c, 0x84, 0x9f, 0xee,
	0x37, 0xff, 0xe1, 0x5c, 0x5d, 0x1c, 0x3e, 0x57, 0xaf, 0x8e, 0xd7, 0xd2, 0x2d, 0x63, 0x73, 0x60,
	0x34, 0x74, 0xce, 0x3e, 0x1f, 0x74, 0x39, 0xce, 0xba, 0x3c, 0x69, 0xb2, 0x84, 0x41, 0xd5, 0x33,
	0x4d, 0x2d, 0xc0, 0x62, 0x57, 0xa7, 0xbe, 0xd6, 0x89, 0x78, 0xd7, 0x6c, 0x3e, 0xbb, 0x12, 0xc5,
	0x73, 0xaf, 0x8e, 0xd7, 0x16, 0x5b, 0xc6, 0xe6, 0xe8, 0x3e, 0x5e, 0x08, 0xd7, 0x83, 0x36, 0xd5,
	0x29, 0xba, 0x0e, 0x49, 0x93, 0x51, 0x26, 0x86, 0xda, 0x85, 0x49, 0x43, 0x8d, 0x01, 0xb0, 0x00,
	0x2a, 0xdf, 0x43, 0x52, 0xf4, 0x77, 0x11, 0xe6, 0x9b, 0xf7, 0xb5, 0x91, 0xcf, 0x74, 0xa0, 0xaa,
	0x56, 0x0a, 0xdb, 0xbb, 0xd5, 0xef, 0xb2, 0x12, 0x5a, 0x82, 0x85, 0x08, 0x15, 0x29, 0xe3, 0xe8,
	0x03, 0x40, 0x5c, 0x59, 0xae, 0x35, 0x4a, 0x3b, 0xf5, 0x7a, 0xa5, 0xb4, 0x5b, 0x29, 0x67, 0x13,
	0xca, 0x53, 0x09, 0x2e, 0xf0, 0xee, 0x8d, 0xc4, 0x16, 0x73, 0xff, 0x7d, 0x92, 0x5e, 0x86, 0x79,
	0x5e, 0x90, 0x26, 0xae, 0xa9, 0x38, 0xf3, 0xb7, 0xf6, 0x5a, 0x02, 0xc4, 0xed, 0x94, 0x36, 0x87,
	0x56, 0xca, 0x45, 0x58, 0x9d, 0x94, 0x2e, 0x75, 0x1d, 0x9b, 0x12, 0xe5, 0x00, 0x96, 0x07, 0x7a,
	0x9b, 0x98, 0xe1, 0x78, 0x63, 0x87, 0xe7, 0x26, 0x80, 0xe5, 0x6a, 0xd1, 0x78, 0xe0, 0x63, 0x5f,
	0xee, 0x1f, 0xaf, 0xa5, 0x6a, 0xf7, 0x0a, 0x5c, 0xf9, 0xea, 0x78, 0x6d, 0xbe, 0x65, 0x6c, 0x9e,
	0xa2, 0x70, 0xca, 0x72, 0xc5, 0x1e, 0x5a, 0x86, 0x69, 0xdf, 0x39, 0x20, 0xb6, 0x18, 0xff, 0x7c,
	0xa1, 0xe0, 0x28, 0x58, 0xa3, 0xb1, 0x5d, 0x22, 0x9e, 0xff, 0x1e, 0x2e, 0x4b, 0xe5, 0x26, 0x9c,
	0x3b, 0xe3, 0x93, 0x57, 0x86, 0xb2, 0x90, 0x08, 0x6f, 0x50, 0x96, 0x3a, 0x0e, 0xc5, 0x70, 0xc2,
	0x98, 0xc4, 0xf3, 0x45, 0x4e, 0x4c, 0x56, 0xb6, 0x60, 0x21, 0x7a, 0x15, 0x44, 0xd9, 0x20, 0x98,
	0xda, 0xf7, 0x9c, 0x9e, 0xb0, 0x64, 0x32, 0xca, 0x40, 0xdc, 0x77, 0x84, 0x61, 0xdc, 0x77, 0x78,
	0x7d, 0xae, 0x65, 0x8a, 0x8b, 0x8b, 0x2f, 0x94, 0x26, 0x64, 0x4f, 0x9d, 0x89, 0x34, 0x8a, 0x30,
	0xc3, 0xbb, 0x17, 0xb2, 0x98, 0x78, 0xab, 0x57, 0x46, 0x64, 0xa8, 0x5c, 0x82, 0xb9, 0xe6, 0xb6,
	0xd3, 0x16, 0x73, 0x2c, 0x4c, 0x30, 0x34, 0x60, 0x09, 0xa6, 0x31, 0x93, 0x95, 0x5f, 0xe2, 0xb0,
	0x54, 0xca, 0x37, 0x0b, 0xf7, 0x6a, 0x0d, 0xdf, 0x23, 0x7a, 0x2f, 0x2a, 0xe6, 0x53, 0x00, 0x8f,
	0x8b, 0xda, 0xe0, 0xfa, 0x9e, 0x0f, 0xfb, 0x28, 0x00, 0xb5, 0x32, 0x4e, 0x09, 0x40, 0xad, 0x35,
	0xb9, 0x6d, 0xa8, 0x08, 0xb3, 0xe4, 0x31, 0x31, 0x35, 0x8f, 0x1c, 0xb2, 0x7a, 0xe7, 0xf2, 0x57,
	0xc2, 0x1a, 0x74, 0xd7, 0x52, 0xa3, 0xc7, 0x9a, 0x5a, 0x79, 0x4c, 0xcc, 0xc0, 0x27, 0x0d, 0xd3,
	0xb3, 0xdc, 0xa8, 0xaf, 0xd5, 0x18, 0x9e, 0x09, 0x0d, 0x31, 0x39, 0x44, 0x5f, 0x42, 0xb2, 0xc3,
	0x3d, 0xf0, 0xaf, 0xf8, 0xf2, 0x98, 0x87, 0x2a, 0xd1, 0xbb, 0x7e, 0xa7, 0xd4, 0x21, 0xe6, 0xc1,
	0xa9, 0xfd, 0x74, 0x87, 0x59, 0xdf, 0x06, 0x30, 0x75, 0xdb, 0x24, 0x5d, 0xe6, 0x61, 0x7a, 0xc2,
	0x67, 0x30, 0x5c, 0x7b, 0x89, 0x41, 0xab, 0x31, 0x9c, 0xe2, 0x46, 0x98, 0x1c, 0x16, 0xa7, 0x21,
	0xd1, 0xa3, 0x6d, 0x65, 0x19, 0xd0, 0x38, 0x52, 0xf9, 0x29, 0x0e, 0xcb, 0xcd, 0x7c, 0x69, 0x88,
	0x3c, 0xd1, 0xbc, 0xb7, 0x63, 0xaf, 0x02, 0x29, 0xc1, 0x13, 0x75, 0xc5, 0xb7, 0x7a, 0xf5, 0x4d,
	0x44, 0xf1, 0x40, 0xd5, 0x18, 0x9e, 0xe5, 0x4c, 0x51, 0x17, 0xdd, 0x82, 0x99, 0x8e, 0x70, 0xc2,
	0xd9, 0xfe, 0xe8, 0xdf, 0xb9, 0x1a, 0xb8, 0x48, 0x76, 0xb8, 0x83, 0xeb, 0x83, 0x61, 0xcd, 0xb9,
	0x3e, 0x3f, 0x66, 0xcf, 0xa7, 0x63, 0x68, 0xc2, 0x81, 0x11, 0x3d, 0x4f, 0x25, 0x80, 0x66, 0xbe,
	0x14, 0x1d, 0xb4, 0x4f, 0xce, 0x7e, 0x97, 0xa9, 0xd7, 0x3e, 0x44, 0xae, 0x8d, 0xbe, 0x13, 0xe3,
	0x13, 0xc0, 0xc3, 0xaf, 0xc4, 0x0f, 0x01, 0x28, 0xa1, 0xe1, 0xeb, 0x2d, 0x74, 0xcd, 0xef, 0xf4,
	0x94, 0xd0, 0xd4, 0x5a, 0xe8, 0x2a, 0x4b, 0x47, 0xa4, 0xbf, 0x3c, 0x76, 0x0d, 0x16, 0xec, 0x23,
	0xcc, 0xf2, 0xd5, 0x00, 0x4a, 0xf9, 0xe6, 0xff, 0x48, 0x57, 0x04, 0x88, 0xbf, 0x21, 0x40, 0xd1,
	0x7f, 0xf6, 0x42, 0x8e, 0x3d, 0x7f, 0x21, 0xc7, 0x5e, 0xbe, 0x90, 0xa5, 0x1f, 0xfb, 0xb2, 0xf4,
	0xa4, 0x2f, 0x4b, 0xbf, 0xf7, 0x65, 0xe9, 0x59, 0x5f, 0x96, 0xfe, 0xec, 0xcb, 0xd2, 0x5f, 0x7d,
	0x39, 0xf6, 0xb2, 0x2f, 0x4b, 0x3f, 0x9f, 0xc8, 0xb1, 0x67, 0x27, 0x72, 0xec, 0xf9, 0x89, 0x1c,
	0xbb, 0xff, 0x95, 0x6b, 0x3d, 0xb6, 0x48, 0x57, 0x37, 0xa8, 0xaa, 0x5b, 0xb9, 0xc1, 0x22, 0x37,
	0xe9, 0x8f, 0x98, 0x78, 0xb0, 0x50, 0xd7, 0xf8, 0x22, 0xd2, 0x19, 0x49, 0x96, 0xc8, 0x67, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x00, 0xdd, 0x84, 0x60, 0xba, 0x0d, 0x00, 0x00,
}

func (x RegisterVizierAck_RegistrationStatus) String() string {
	s, ok := RegisterVizierAck_RegistrationStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VizierHeartbeatAck_HeartbeatStatus) String() string {
	s, ok := VizierHeartbeatAck_HeartbeatStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VizierInfo_Status) String() string {
	s, ok := VizierInfo_Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MetadataUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataUpdate)
	if !ok {
		that2, ok := that.(MetadataUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	return true
}
func (this *RegisterVizierRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterVizierRequest)
	if !ok {
		that2, ok := that.(RegisterVizierRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if this.JwtKey != that1.JwtKey {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.ClusterInfo.Equal(that1.ClusterInfo) {
		return false
	}
	return true
}
func (this *VizierClusterInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierClusterInfo)
	if !ok {
		that2, ok := that.(VizierClusterInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterUID != that1.ClusterUID {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if this.ClusterVersion != that1.ClusterVersion {
		return false
	}
	if this.VizierVersion != that1.VizierVersion {
		return false
	}
	return true
}
func (this *RegisterVizierAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterVizierAck)
	if !ok {
		that2, ok := that.(RegisterVizierAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *VizierHeartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierHeartbeat)
	if !ok {
		that2, ok := that.(VizierHeartbeat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *VizierHeartbeatAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierHeartbeatAck)
	if !ok {
		that2, ok := that.(VizierHeartbeatAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *VizierConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierConfig)
	if !ok {
		that2, ok := that.(VizierConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PassthroughEnabled != that1.PassthroughEnabled {
		return false
	}
	return true
}
func (this *VizierConfigUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierConfigUpdate)
	if !ok {
		that2, ok := that.(VizierConfigUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassthroughEnabled.Equal(that1.PassthroughEnabled) {
		return false
	}
	return true
}
func (this *VizierInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierInfo)
	if !ok {
		that2, ok := that.(VizierInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.LastHeartbeatNs != that1.LastHeartbeatNs {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *UpdateVizierConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateVizierConfigRequest)
	if !ok {
		that2, ok := that.(UpdateVizierConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	if !this.ConfigUpdate.Equal(that1.ConfigUpdate) {
		return false
	}
	return true
}
func (this *UpdateVizierConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateVizierConfigResponse)
	if !ok {
		that2, ok := that.(UpdateVizierConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VizierConnectionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierConnectionInfo)
	if !ok {
		that2, ok := that.(VizierConnectionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IPAddress != that1.IPAddress {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *VizierSSLCertRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierSSLCertRequest)
	if !ok {
		that2, ok := that.(VizierSSLCertRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierID.Equal(that1.VizierID) {
		return false
	}
	return true
}
func (this *VizierSSLCertResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizierSSLCertResponse)
	if !ok {
		that2, ok := that.(VizierSSLCertResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Cert != that1.Cert {
		return false
	}
	return true
}
func (this *MetadataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataRequest)
	if !ok {
		that2, ok := that.(MetadataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *MetadataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataResponse)
	if !ok {
		that2, ok := that.(MetadataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Updates) != len(that1.Updates) {
		return false
	}
	for i := range this.Updates {
		if !this.Updates[i].Equal(that1.Updates[i]) {
			return false
		}
	}
	return true
}
func (this *VLogMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VLogMessage)
	if !ok {
		that2, ok := that.(VLogMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest_ExecReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest_ExecReq)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest_ExecReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecReq.Equal(that1.ExecReq) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest_HcReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest_HcReq)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest_HcReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HcReq.Equal(that1.HcReq) {
		return false
	}
	return true
}
func (this *C2VAPIStreamRequest_CancelReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamRequest_CancelReq)
	if !ok {
		that2, ok := that.(C2VAPIStreamRequest_CancelReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelReq.Equal(that1.CancelReq) {
		return false
	}
	return true
}
func (this *C2VAPIStreamCancel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VAPIStreamCancel)
	if !ok {
		that2, ok := that.(C2VAPIStreamCancel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse_ExecResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse_ExecResp)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse_ExecResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecResp.Equal(that1.ExecResp) {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse_HcResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse_HcResp)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse_HcResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HcResp.Equal(that1.HcResp) {
		return false
	}
	return true
}
func (this *V2CAPIStreamResponse_Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CAPIStreamResponse_Status)
	if !ok {
		that2, ok := that.(V2CAPIStreamResponse_Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *V2CMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CMessage)
	if !ok {
		that2, ok := that.(V2CMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VizierID != that1.VizierID {
		return false
	}
	if this.VizierID != that1.VizierID {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *C2VMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VMessage)
	if !ok {
		that2, ok := that.(C2VMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VizierID != that1.VizierID {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *MetadataUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.MetadataUpdate{")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterVizierRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.RegisterVizierRequest{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	s = append(s, "JwtKey: "+fmt.Sprintf("%#v", this.JwtKey)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.ClusterInfo != nil {
		s = append(s, "ClusterInfo: "+fmt.Sprintf("%#v", this.ClusterInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierClusterInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.VizierClusterInfo{")
	s = append(s, "ClusterUID: "+fmt.Sprintf("%#v", this.ClusterUID)+",\n")
	s = append(s, "ClusterName: "+fmt.Sprintf("%#v", this.ClusterName)+",\n")
	s = append(s, "ClusterVersion: "+fmt.Sprintf("%#v", this.ClusterVersion)+",\n")
	s = append(s, "VizierVersion: "+fmt.Sprintf("%#v", this.VizierVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterVizierAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.RegisterVizierAck{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierHeartbeat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cvmsgspb.VizierHeartbeat{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierHeartbeatAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.VizierHeartbeatAck{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.VizierConfig{")
	s = append(s, "PassthroughEnabled: "+fmt.Sprintf("%#v", this.PassthroughEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierConfigUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.VizierConfigUpdate{")
	if this.PassthroughEnabled != nil {
		s = append(s, "PassthroughEnabled: "+fmt.Sprintf("%#v", this.PassthroughEnabled)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.VizierInfo{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "LastHeartbeatNs: "+fmt.Sprintf("%#v", this.LastHeartbeatNs)+",\n")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateVizierConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cvmsgspb.UpdateVizierConfigRequest{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	if this.ConfigUpdate != nil {
		s = append(s, "ConfigUpdate: "+fmt.Sprintf("%#v", this.ConfigUpdate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateVizierConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cvmsgspb.UpdateVizierConfigResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierConnectionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cvmsgspb.VizierConnectionInfo{")
	s = append(s, "IPAddress: "+fmt.Sprintf("%#v", this.IPAddress)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierSSLCertRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.VizierSSLCertRequest{")
	if this.VizierID != nil {
		s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizierSSLCertResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cvmsgspb.VizierSSLCertResponse{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetadataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cvmsgspb.MetadataRequest{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetadataResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.MetadataResponse{")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VLogMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.VLogMessage{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2VAPIStreamRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cvmsgspb.C2VAPIStreamRequest{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2VAPIStreamRequest_ExecReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.C2VAPIStreamRequest_ExecReq{` +
		`ExecReq:` + fmt.Sprintf("%#v", this.ExecReq) + `}`}, ", ")
	return s
}
func (this *C2VAPIStreamRequest_HcReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.C2VAPIStreamRequest_HcReq{` +
		`HcReq:` + fmt.Sprintf("%#v", this.HcReq) + `}`}, ", ")
	return s
}
func (this *C2VAPIStreamRequest_CancelReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.C2VAPIStreamRequest_CancelReq{` +
		`CancelReq:` + fmt.Sprintf("%#v", this.CancelReq) + `}`}, ", ")
	return s
}
func (this *C2VAPIStreamCancel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cvmsgspb.C2VAPIStreamCancel{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *V2CAPIStreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.V2CAPIStreamResponse{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *V2CAPIStreamResponse_ExecResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.V2CAPIStreamResponse_ExecResp{` +
		`ExecResp:` + fmt.Sprintf("%#v", this.ExecResp) + `}`}, ", ")
	return s
}
func (this *V2CAPIStreamResponse_HcResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.V2CAPIStreamResponse_HcResp{` +
		`HcResp:` + fmt.Sprintf("%#v", this.HcResp) + `}`}, ", ")
	return s
}
func (this *V2CAPIStreamResponse_Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&cvmsgspb.V2CAPIStreamResponse_Status{` +
		`Status:` + fmt.Sprintf("%#v", this.Status) + `}`}, ", ")
	return s
}
func (this *V2CMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.V2CMessage{")
	s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2VMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cvmsgspb.C2VMessage{")
	s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCvmsgs(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MetadataUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		{
			size, err := m.Update.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterVizierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterVizierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterVizierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterInfo != nil {
		{
			size, err := m.ClusterInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JwtKey) > 0 {
		i -= len(m.JwtKey)
		copy(dAtA[i:], m.JwtKey)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.JwtKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VizierClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VizierVersion) > 0 {
		i -= len(m.VizierVersion)
		copy(dAtA[i:], m.VizierVersion)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterVersion) > 0 {
		i -= len(m.ClusterVersion)
		copy(dAtA[i:], m.ClusterVersion)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ClusterVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterUID) > 0 {
		i -= len(m.ClusterUID)
		copy(dAtA[i:], m.ClusterUID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ClusterUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterVizierAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterVizierAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterVizierAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VizierHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Time != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VizierHeartbeatAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierHeartbeatAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierHeartbeatAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x22
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Time != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VizierConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PassthroughEnabled {
		i--
		if m.PassthroughEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VizierConfigUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PassthroughEnabled != nil {
		{
			size, err := m.PassthroughEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VizierInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LastHeartbeatNs != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.LastHeartbeatNs))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVizierConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVizierConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVizierConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigUpdate != nil {
		{
			size, err := m.ConfigUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateVizierConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateVizierConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateVizierConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VizierConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierConnectionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IPAddress) > 0 {
		i -= len(m.IPAddress)
		copy(dAtA[i:], m.IPAddress)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.IPAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VizierSSLCertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierSSLCertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierSSLCertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VizierID != nil {
		{
			size, err := m.VizierID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VizierSSLCertResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizierSSLCertResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizierSSLCertResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCvmsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VLogMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VLogMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VLogMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2VAPIStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2VAPIStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2VAPIStreamRequest_ExecReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest_ExecReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecReq != nil {
		{
			size, err := m.ExecReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *C2VAPIStreamRequest_HcReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest_HcReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HcReq != nil {
		{
			size, err := m.HcReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *C2VAPIStreamRequest_CancelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamRequest_CancelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelReq != nil {
		{
			size, err := m.CancelReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *C2VAPIStreamCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2VAPIStreamCancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VAPIStreamCancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *V2CAPIStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2CAPIStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *V2CAPIStreamResponse_ExecResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse_ExecResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExecResp != nil {
		{
			size, err := m.ExecResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *V2CAPIStreamResponse_HcResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse_HcResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HcResp != nil {
		{
			size, err := m.HcResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *V2CAPIStreamResponse_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CAPIStreamResponse_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *V2CMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2CMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SessionId != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VizierID) > 0 {
		i -= len(m.VizierID)
		copy(dAtA[i:], m.VizierID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VizierID) > 0 {
		i -= len(m.VizierID)
		copy(dAtA[i:], m.VizierID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2VMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2VMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VizierID) > 0 {
		i -= len(m.VizierID)
		copy(dAtA[i:], m.VizierID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCvmsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovCvmsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetadataUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *RegisterVizierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.JwtKey)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.ClusterInfo != nil {
		l = m.ClusterInfo.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *VizierClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterUID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.ClusterVersion)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.VizierVersion)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *RegisterVizierAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCvmsgs(uint64(m.Status))
	}
	return n
}

func (m *VizierHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovCvmsgs(uint64(m.Time))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovCvmsgs(uint64(m.SequenceNumber))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovCvmsgs(uint64(m.Port))
	}
	return n
}

func (m *VizierHeartbeatAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCvmsgs(uint64(m.Status))
	}
	if m.Time != 0 {
		n += 1 + sovCvmsgs(uint64(m.Time))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovCvmsgs(uint64(m.SequenceNumber))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *VizierConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassthroughEnabled {
		n += 2
	}
	return n
}

func (m *VizierConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassthroughEnabled != nil {
		l = m.PassthroughEnabled.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *VizierInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCvmsgs(uint64(m.Status))
	}
	if m.LastHeartbeatNs != 0 {
		n += 1 + sovCvmsgs(uint64(m.LastHeartbeatNs))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *UpdateVizierConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.ConfigUpdate != nil {
		l = m.ConfigUpdate.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *UpdateVizierConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VizierConnectionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *VizierSSLCertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierID != nil {
		l = m.VizierID.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *VizierSSLCertResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *MetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *MetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovCvmsgs(uint64(l))
		}
	}
	return n
}

func (m *VLogMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *C2VAPIStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *C2VAPIStreamRequest_ExecReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecReq != nil {
		l = m.ExecReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *C2VAPIStreamRequest_HcReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HcReq != nil {
		l = m.HcReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *C2VAPIStreamRequest_CancelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelReq != nil {
		l = m.CancelReq.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *C2VAPIStreamCancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *V2CAPIStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *V2CAPIStreamResponse_ExecResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecResp != nil {
		l = m.ExecResp.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *V2CAPIStreamResponse_HcResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HcResp != nil {
		l = m.HcResp.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *V2CAPIStreamResponse_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}
func (m *V2CMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VizierID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.VizierID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovCvmsgs(uint64(m.SessionId))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *C2VMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VizierID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func sovCvmsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCvmsgs(x uint64) (n int) {
	return sovCvmsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MetadataUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetadataUpdate{`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "ResourceUpdate", "metadatapb.ResourceUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterVizierRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterVizierRequest{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "proto1.UUID", 1) + `,`,
		`JwtKey:` + fmt.Sprintf("%v", this.JwtKey) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`ClusterInfo:` + strings.Replace(this.ClusterInfo.String(), "VizierClusterInfo", "VizierClusterInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierClusterInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierClusterInfo{`,
		`ClusterUID:` + fmt.Sprintf("%v", this.ClusterUID) + `,`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`ClusterVersion:` + fmt.Sprintf("%v", this.ClusterVersion) + `,`,
		`VizierVersion:` + fmt.Sprintf("%v", this.VizierVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterVizierAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterVizierAck{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierHeartbeat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierHeartbeat{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "proto1.UUID", 1) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierHeartbeatAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierHeartbeatAck{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierConfig{`,
		`PassthroughEnabled:` + fmt.Sprintf("%v", this.PassthroughEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierConfigUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierConfigUpdate{`,
		`PassthroughEnabled:` + strings.Replace(fmt.Sprintf("%v", this.PassthroughEnabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierInfo{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "proto1.UUID", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastHeartbeatNs:` + fmt.Sprintf("%v", this.LastHeartbeatNs) + `,`,
		`Config:` + strings.Replace(this.Config.String(), "VizierConfig", "VizierConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateVizierConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateVizierConfigRequest{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "proto1.UUID", 1) + `,`,
		`ConfigUpdate:` + strings.Replace(this.ConfigUpdate.String(), "VizierConfigUpdate", "VizierConfigUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateVizierConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateVizierConfigResponse{`,
		`}`,
	}, "")
	return s
}
func (this *VizierConnectionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierConnectionInfo{`,
		`IPAddress:` + fmt.Sprintf("%v", this.IPAddress) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierSSLCertRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierSSLCertRequest{`,
		`VizierID:` + strings.Replace(fmt.Sprintf("%v", this.VizierID), "UUID", "proto1.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizierSSLCertResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizierSSLCertResponse{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Cert:` + fmt.Sprintf("%v", this.Cert) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetadataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetadataRequest{`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetadataResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdates := "[]*ResourceUpdate{"
	for _, f := range this.Updates {
		repeatedStringForUpdates += strings.Replace(fmt.Sprintf("%v", f), "ResourceUpdate", "metadatapb.ResourceUpdate", 1) + ","
	}
	repeatedStringForUpdates += "}"
	s := strings.Join([]string{`&MetadataResponse{`,
		`Updates:` + repeatedStringForUpdates + `,`,
		`}`,
	}, "")
	return s
}
func (this *VLogMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VLogMessage{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest_ExecReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest_ExecReq{`,
		`ExecReq:` + strings.Replace(fmt.Sprintf("%v", this.ExecReq), "ExecuteScriptRequest", "vizierpb.ExecuteScriptRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest_HcReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest_HcReq{`,
		`HcReq:` + strings.Replace(fmt.Sprintf("%v", this.HcReq), "HealthCheckRequest", "vizierpb.HealthCheckRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamRequest_CancelReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamRequest_CancelReq{`,
		`CancelReq:` + strings.Replace(fmt.Sprintf("%v", this.CancelReq), "C2VAPIStreamCancel", "C2VAPIStreamCancel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VAPIStreamCancel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VAPIStreamCancel{`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse_ExecResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse_ExecResp{`,
		`ExecResp:` + strings.Replace(fmt.Sprintf("%v", this.ExecResp), "ExecuteScriptResponse", "vizierpb.ExecuteScriptResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse_HcResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse_HcResp{`,
		`HcResp:` + strings.Replace(fmt.Sprintf("%v", this.HcResp), "HealthCheckResponse", "vizierpb.HealthCheckResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CAPIStreamResponse_Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CAPIStreamResponse_Status{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "vizierpb.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CMessage{`,
		`VizierID:` + fmt.Sprintf("%v", this.VizierID) + `,`,
		`VizierID:` + fmt.Sprintf("%v", this.VizierID) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VMessage{`,
		`VizierID:` + fmt.Sprintf("%v", this.VizierID) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCvmsgs(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MetadataUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &metadatapb.ResourceUpdate{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterVizierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterVizierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterVizierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &proto1.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterInfo == nil {
				m.ClusterInfo = &VizierClusterInfo{}
			}
			if err := m.ClusterInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterVizierAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterVizierAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterVizierAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RegisterVizierAck_RegistrationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &proto1.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierHeartbeatAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierHeartbeatAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierHeartbeatAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VizierHeartbeatAck_HeartbeatStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassthroughEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PassthroughEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierConfigUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierConfigUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierConfigUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassthroughEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PassthroughEnabled == nil {
				m.PassthroughEnabled = &types.BoolValue{}
			}
			if err := m.PassthroughEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &proto1.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VizierInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatNs", wireType)
			}
			m.LastHeartbeatNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeartbeatNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &VizierConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVizierConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVizierConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVizierConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &proto1.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigUpdate == nil {
				m.ConfigUpdate = &VizierConfigUpdate{}
			}
			if err := m.ConfigUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVizierConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVizierConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVizierConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierSSLCertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierSSLCertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierSSLCertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierID == nil {
				m.VizierID = &proto1.UUID{}
			}
			if err := m.VizierID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizierSSLCertResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizierSSLCertResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizierSSLCertResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &metadatapb.ResourceUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VLogMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VLogMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VLogMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2VAPIStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2VAPIStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2VAPIStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.ExecuteScriptRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &C2VAPIStreamRequest_ExecReq{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HcReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.HealthCheckRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &C2VAPIStreamRequest_HcReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &C2VAPIStreamCancel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &C2VAPIStreamRequest_CancelReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2VAPIStreamCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2VAPIStreamCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2VAPIStreamCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V2CAPIStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: V2CAPIStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: V2CAPIStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.ExecuteScriptResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &V2CAPIStreamResponse_ExecResp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HcResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.HealthCheckResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &V2CAPIStreamResponse_HcResp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &vizierpb.Status{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &V2CAPIStreamResponse_Status{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V2CMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: V2CMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: V2CMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2VMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2VMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2VMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCvmsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCvmsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCvmsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCvmsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCvmsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCvmsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCvmsgs = fmt.Errorf("proto: unexpected end of group")
)
