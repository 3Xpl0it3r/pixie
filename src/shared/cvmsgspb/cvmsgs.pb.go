// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/shared/cvmsgspb/cvmsgs.proto

package cvmsgspb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	metadatapb "pixielabs.ai/pixielabs/src/shared/k8s/metadatapb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MetadataUpdate struct {
	Update *metadatapb.ResourceUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
}

func (m *MetadataUpdate) Reset()      { *m = MetadataUpdate{} }
func (*MetadataUpdate) ProtoMessage() {}
func (*MetadataUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{0}
}
func (m *MetadataUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataUpdate.Merge(m, src)
}
func (m *MetadataUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MetadataUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataUpdate proto.InternalMessageInfo

func (m *MetadataUpdate) GetUpdate() *metadatapb.ResourceUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type MetadataRequest struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *MetadataRequest) Reset()      { *m = MetadataRequest{} }
func (*MetadataRequest) ProtoMessage() {}
func (*MetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{1}
}
func (m *MetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRequest.Merge(m, src)
}
func (m *MetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRequest proto.InternalMessageInfo

func (m *MetadataRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MetadataRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type MetadataResponse struct {
	Updates []*metadatapb.ResourceUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (m *MetadataResponse) Reset()      { *m = MetadataResponse{} }
func (*MetadataResponse) ProtoMessage() {}
func (*MetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{2}
}
func (m *MetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataResponse.Merge(m, src)
}
func (m *MetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataResponse proto.InternalMessageInfo

func (m *MetadataResponse) GetUpdates() []*metadatapb.ResourceUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

type VLogMessage struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *VLogMessage) Reset()      { *m = VLogMessage{} }
func (*VLogMessage) ProtoMessage() {}
func (*VLogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{3}
}
func (m *VLogMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VLogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VLogMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VLogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VLogMessage.Merge(m, src)
}
func (m *VLogMessage) XXX_Size() int {
	return m.Size()
}
func (m *VLogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VLogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VLogMessage proto.InternalMessageInfo

func (m *VLogMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type V2CMessage struct {
	VizierID  string     `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	VizierID_ string     `protobuf:"bytes,2,opt,name=cluster_uid,json=clusterUid,proto3" json:"cluster_uid,omitempty"`
	SessionId int64      `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Msg       *types.Any `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *V2CMessage) Reset()      { *m = V2CMessage{} }
func (*V2CMessage) ProtoMessage() {}
func (*V2CMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{4}
}
func (m *V2CMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2CMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2CMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2CMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2CMessage.Merge(m, src)
}
func (m *V2CMessage) XXX_Size() int {
	return m.Size()
}
func (m *V2CMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_V2CMessage.DiscardUnknown(m)
}

var xxx_messageInfo_V2CMessage proto.InternalMessageInfo

func (m *V2CMessage) GetVizierID() string {
	if m != nil {
		return m.VizierID
	}
	return ""
}

func (m *V2CMessage) GetVizierID_() string {
	if m != nil {
		return m.VizierID_
	}
	return ""
}

func (m *V2CMessage) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *V2CMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type C2VMessage struct {
	VizierID string     `protobuf:"bytes,1,opt,name=vizier_id,json=vizierId,proto3" json:"vizier_id,omitempty"`
	Msg      *types.Any `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *C2VMessage) Reset()      { *m = C2VMessage{} }
func (*C2VMessage) ProtoMessage() {}
func (*C2VMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a48c2306678667b, []int{5}
}
func (m *C2VMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2VMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2VMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2VMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2VMessage.Merge(m, src)
}
func (m *C2VMessage) XXX_Size() int {
	return m.Size()
}
func (m *C2VMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_C2VMessage.DiscardUnknown(m)
}

var xxx_messageInfo_C2VMessage proto.InternalMessageInfo

func (m *C2VMessage) GetVizierID() string {
	if m != nil {
		return m.VizierID
	}
	return ""
}

func (m *C2VMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*MetadataUpdate)(nil), "pl.cvmsgspb.MetadataUpdate")
	proto.RegisterType((*MetadataRequest)(nil), "pl.cvmsgspb.MetadataRequest")
	proto.RegisterType((*MetadataResponse)(nil), "pl.cvmsgspb.MetadataResponse")
	proto.RegisterType((*VLogMessage)(nil), "pl.cvmsgspb.VLogMessage")
	proto.RegisterType((*V2CMessage)(nil), "pl.cvmsgspb.V2CMessage")
	proto.RegisterType((*C2VMessage)(nil), "pl.cvmsgspb.C2VMessage")
}

func init() { proto.RegisterFile("src/shared/cvmsgspb/cvmsgs.proto", fileDescriptor_5a48c2306678667b) }

var fileDescriptor_5a48c2306678667b = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcf, 0x6b, 0x13, 0x41,
	0x18, 0xdd, 0x49, 0x4a, 0x6d, 0xbe, 0x94, 0x2a, 0x8b, 0x87, 0x58, 0x70, 0x8c, 0x7b, 0x90, 0x78,
	0xe8, 0x2c, 0x44, 0x84, 0x82, 0x20, 0x9a, 0x7a, 0x09, 0xd8, 0xcb, 0x42, 0xf7, 0xe0, 0x25, 0xec,
	0x8f, 0xe9, 0x76, 0xe8, 0x6e, 0x66, 0xdc, 0x6f, 0xb6, 0x58, 0x4f, 0xfe, 0x09, 0xfe, 0x19, 0x5e,
	0xfc, 0x3f, 0x3c, 0xe6, 0xd8, 0x93, 0x98, 0xcd, 0xc5, 0x63, 0xff, 0x04, 0xc9, 0xcc, 0x6e, 0x23,
	0x22, 0x88, 0xbd, 0xbd, 0xef, 0x7d, 0xef, 0xbd, 0xef, 0x25, 0xc3, 0xc2, 0x10, 0xcb, 0xc4, 0xc7,
	0xb3, 0xa8, 0xe4, 0xa9, 0x9f, 0x5c, 0x14, 0x98, 0xa1, 0x8a, 0x1b, 0xc0, 0x54, 0x29, 0xb5, 0x74,
	0xfb, 0x2a, 0x67, 0xed, 0x66, 0xff, 0x20, 0x13, 0xfa, 0xac, 0x8a, 0x59, 0x22, 0x0b, 0x3f, 0x93,
	0x99, 0xf4, 0x8d, 0x26, 0xae, 0x4e, 0xcd, 0x64, 0x06, 0x83, 0xac, 0x77, 0xff, 0x41, 0x26, 0x65,
	0x96, 0xf3, 0x8d, 0x2a, 0x9a, 0x5f, 0x36, 0xab, 0xd1, 0x6f, 0x87, 0xcf, 0x0f, 0xd1, 0x2f, 0xb8,
	0x8e, 0xd2, 0x48, 0x47, 0x2a, 0xbe, 0x81, 0x56, 0xe9, 0x05, 0xb0, 0x77, 0xdc, 0x30, 0x27, 0x2a,
	0x8d, 0x34, 0x77, 0x5f, 0xc1, 0x76, 0x65, 0xd0, 0x80, 0x0c, 0xc9, 0xa8, 0x3f, 0x1e, 0x31, 0x95,
	0x33, 0x9b, 0xc5, 0xce, 0x0f, 0x91, 0x6d, 0xb2, 0x58, 0xc0, 0x51, 0x56, 0x65, 0xc2, 0xad, 0x33,
	0x68, 0x7c, 0xde, 0x73, 0xb8, 0xdb, 0x66, 0x06, 0xfc, 0x7d, 0xc5, 0x51, 0xbb, 0x2e, 0x6c, 0x9d,
	0x96, 0xb2, 0x30, 0x91, 0xbd, 0xc0, 0x60, 0x77, 0x0f, 0x3a, 0x5a, 0x0e, 0x3a, 0x86, 0xe9, 0x68,
	0xe9, 0x85, 0x70, 0x6f, 0x63, 0x43, 0x25, 0xe7, 0xc8, 0xdd, 0x09, 0xdc, 0xb1, 0xa1, 0x38, 0x20,
	0xc3, 0xee, 0x7f, 0xb5, 0x69, 0x8d, 0xde, 0x63, 0xe8, 0x87, 0x6f, 0x65, 0x76, 0xcc, 0x11, 0xa3,
	0x8c, 0xaf, 0xab, 0xac, 0x0d, 0xa6, 0xca, 0x6e, 0x60, 0xb0, 0xf7, 0x95, 0x00, 0x84, 0xe3, 0xa3,
	0x56, 0xf2, 0x14, 0x7a, 0x17, 0xe2, 0xa3, 0xe0, 0xe5, 0x4c, 0xa4, 0xb6, 0xf2, 0x64, 0xb7, 0xfe,
	0xfe, 0x68, 0x27, 0x34, 0xe4, 0xf4, 0x4d, 0xb0, 0x63, 0xd7, 0xd3, 0xd4, 0x3d, 0x80, 0x7e, 0x92,
	0x57, 0xa8, 0x79, 0x39, 0xab, 0x44, 0x6a, 0x7f, 0xcd, 0x1f, 0x62, 0x68, 0x04, 0x27, 0x22, 0x75,
	0x1f, 0x02, 0x20, 0x47, 0x14, 0x72, 0xbe, 0x8e, 0xee, 0x0e, 0xc9, 0xa8, 0x1b, 0xf4, 0x1a, 0x66,
	0x9a, 0xba, 0x4f, 0xa0, 0x5b, 0x60, 0x36, 0xd8, 0x32, 0x7f, 0xfc, 0x7d, 0x66, 0x1f, 0x98, 0xb5,
	0x0f, 0xcc, 0x5e, 0xcf, 0x2f, 0x83, 0xb5, 0xc0, 0x9b, 0x01, 0x1c, 0x8d, 0xc3, 0x5b, 0xd4, 0x6d,
	0x0e, 0x74, 0xfe, 0x71, 0x60, 0xa2, 0x17, 0x4b, 0xea, 0x5c, 0x2d, 0xa9, 0x73, 0xbd, 0xa4, 0xe4,
	0x53, 0x4d, 0xc9, 0x97, 0x9a, 0x92, 0x6f, 0x35, 0x25, 0x8b, 0x9a, 0x92, 0x1f, 0x35, 0x25, 0x3f,
	0x6b, 0xea, 0x5c, 0xd7, 0x94, 0x7c, 0x5e, 0x51, 0x67, 0xb1, 0xa2, 0xce, 0xd5, 0x8a, 0x3a, 0xef,
	0x5e, 0x2a, 0xf1, 0x41, 0xf0, 0x3c, 0x8a, 0x91, 0x45, 0xc2, 0xbf, 0x19, 0xfc, 0xbf, 0x7d, 0x06,
	0x85, 0x2d, 0x8f, 0x2a, 0x7e, 0xd1, 0x72, 0xf1, 0xb6, 0x29, 0xf2, 0xec, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x15, 0xdb, 0x52, 0x26, 0x38, 0x03, 0x00, 0x00,
}

func (this *MetadataUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataUpdate)
	if !ok {
		that2, ok := that.(MetadataUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	return true
}
func (this *MetadataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataRequest)
	if !ok {
		that2, ok := that.(MetadataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	return true
}
func (this *MetadataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetadataResponse)
	if !ok {
		that2, ok := that.(MetadataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Updates) != len(that1.Updates) {
		return false
	}
	for i := range this.Updates {
		if !this.Updates[i].Equal(that1.Updates[i]) {
			return false
		}
	}
	return true
}
func (this *VLogMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VLogMessage)
	if !ok {
		that2, ok := that.(VLogMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *V2CMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*V2CMessage)
	if !ok {
		that2, ok := that.(V2CMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VizierID != that1.VizierID {
		return false
	}
	if this.VizierID != that1.VizierID {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *C2VMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2VMessage)
	if !ok {
		that2, ok := that.(C2VMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VizierID != that1.VizierID {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *MetadataUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.MetadataUpdate{")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetadataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cvmsgspb.MetadataRequest{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetadataResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.MetadataResponse{")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VLogMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cvmsgspb.VLogMessage{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *V2CMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cvmsgspb.V2CMessage{")
	s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2VMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cvmsgspb.C2VMessage{")
	s = append(s, "VizierID: "+fmt.Sprintf("%#v", this.VizierID)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCvmsgs(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MetadataUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		{
			size, err := m.Update.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCvmsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VLogMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VLogMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VLogMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *V2CMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2CMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2CMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SessionId != 0 {
		i = encodeVarintCvmsgs(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VizierID) > 0 {
		i -= len(m.VizierID)
		copy(dAtA[i:], m.VizierID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VizierID) > 0 {
		i -= len(m.VizierID)
		copy(dAtA[i:], m.VizierID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2VMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2VMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2VMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvmsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VizierID) > 0 {
		i -= len(m.VizierID)
		copy(dAtA[i:], m.VizierID)
		i = encodeVarintCvmsgs(dAtA, i, uint64(len(m.VizierID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCvmsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovCvmsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetadataUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *MetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *MetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovCvmsgs(uint64(l))
		}
	}
	return n
}

func (m *VLogMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *V2CMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VizierID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	l = len(m.VizierID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovCvmsgs(uint64(m.SessionId))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func (m *C2VMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VizierID)
	if l > 0 {
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovCvmsgs(uint64(l))
	}
	return n
}

func sovCvmsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCvmsgs(x uint64) (n int) {
	return sovCvmsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MetadataUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetadataUpdate{`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "ResourceUpdate", "metadatapb.ResourceUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetadataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetadataRequest{`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetadataResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdates := "[]*ResourceUpdate{"
	for _, f := range this.Updates {
		repeatedStringForUpdates += strings.Replace(fmt.Sprintf("%v", f), "ResourceUpdate", "metadatapb.ResourceUpdate", 1) + ","
	}
	repeatedStringForUpdates += "}"
	s := strings.Join([]string{`&MetadataResponse{`,
		`Updates:` + repeatedStringForUpdates + `,`,
		`}`,
	}, "")
	return s
}
func (this *VLogMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VLogMessage{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *V2CMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&V2CMessage{`,
		`VizierID:` + fmt.Sprintf("%v", this.VizierID) + `,`,
		`VizierID:` + fmt.Sprintf("%v", this.VizierID) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2VMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2VMessage{`,
		`VizierID:` + fmt.Sprintf("%v", this.VizierID) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCvmsgs(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MetadataUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &metadatapb.ResourceUpdate{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &metadatapb.ResourceUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VLogMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VLogMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VLogMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V2CMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: V2CMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: V2CMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2VMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2VMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2VMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VizierID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvmsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvmsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCvmsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCvmsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCvmsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCvmsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCvmsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCvmsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCvmsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCvmsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCvmsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCvmsgs = fmt.Errorf("proto: unexpected end of group")
)
