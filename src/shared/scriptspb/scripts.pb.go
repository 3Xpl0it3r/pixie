// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/shared/scriptspb/scripts.proto

package scriptspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	proto2 "pixielabs.ai/pixielabs/src/common/base/proto"
	proto1 "pixielabs.ai/pixielabs/src/shared/types/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FuncArgsSpec struct {
	Args []*FuncArgsSpec_Arg `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *FuncArgsSpec) Reset()      { *m = FuncArgsSpec{} }
func (*FuncArgsSpec) ProtoMessage() {}
func (*FuncArgsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aa89baec43fda2f, []int{0}
}
func (m *FuncArgsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FuncArgsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FuncArgsSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FuncArgsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FuncArgsSpec.Merge(m, src)
}
func (m *FuncArgsSpec) XXX_Size() int {
	return m.Size()
}
func (m *FuncArgsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FuncArgsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FuncArgsSpec proto.InternalMessageInfo

func (m *FuncArgsSpec) GetArgs() []*FuncArgsSpec_Arg {
	if m != nil {
		return m.Args
	}
	return nil
}

type FuncArgsSpec_Arg struct {
	DataType     proto1.DataType     `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=pl.types.DataType" json:"data_type,omitempty"`
	SemanticType proto1.SemanticType `protobuf:"varint,2,opt,name=semantic_type,json=semanticType,proto3,enum=pl.types.SemanticType" json:"semantic_type,omitempty"`
	Name         string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	DefaultValue string              `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (m *FuncArgsSpec_Arg) Reset()      { *m = FuncArgsSpec_Arg{} }
func (*FuncArgsSpec_Arg) ProtoMessage() {}
func (*FuncArgsSpec_Arg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aa89baec43fda2f, []int{0, 0}
}
func (m *FuncArgsSpec_Arg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FuncArgsSpec_Arg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FuncArgsSpec_Arg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FuncArgsSpec_Arg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FuncArgsSpec_Arg.Merge(m, src)
}
func (m *FuncArgsSpec_Arg) XXX_Size() int {
	return m.Size()
}
func (m *FuncArgsSpec_Arg) XXX_DiscardUnknown() {
	xxx_messageInfo_FuncArgsSpec_Arg.DiscardUnknown(m)
}

var xxx_messageInfo_FuncArgsSpec_Arg proto.InternalMessageInfo

func (m *FuncArgsSpec_Arg) GetDataType() proto1.DataType {
	if m != nil {
		return m.DataType
	}
	return proto1.DATA_TYPE_UNKNOWN
}

func (m *FuncArgsSpec_Arg) GetSemanticType() proto1.SemanticType {
	if m != nil {
		return m.SemanticType
	}
	return proto1.ST_UNSPECIFIED
}

func (m *FuncArgsSpec_Arg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FuncArgsSpec_Arg) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

type VizSpec struct {
	VegaSpec string `protobuf:"bytes,1,opt,name=vega_spec,json=vegaSpec,proto3" json:"vega_spec,omitempty"`
}

func (m *VizSpec) Reset()      { *m = VizSpec{} }
func (*VizSpec) ProtoMessage() {}
func (*VizSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aa89baec43fda2f, []int{1}
}
func (m *VizSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizSpec.Merge(m, src)
}
func (m *VizSpec) XXX_Size() int {
	return m.Size()
}
func (m *VizSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VizSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VizSpec proto.InternalMessageInfo

func (m *VizSpec) GetVegaSpec() string {
	if m != nil {
		return m.VegaSpec
	}
	return ""
}

type VizFuncsInfo struct {
	DocStringMap map[string]string        `protobuf:"bytes,1,rep,name=doc_string_map,json=docStringMap,proto3" json:"doc_string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VizSpecMap   map[string]*VizSpec      `protobuf:"bytes,2,rep,name=viz_spec_map,json=vizSpecMap,proto3" json:"viz_spec_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FnArgsMap    map[string]*FuncArgsSpec `protobuf:"bytes,3,rep,name=fn_args_map,json=fnArgsMap,proto3" json:"fn_args_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *VizFuncsInfo) Reset()      { *m = VizFuncsInfo{} }
func (*VizFuncsInfo) ProtoMessage() {}
func (*VizFuncsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aa89baec43fda2f, []int{2}
}
func (m *VizFuncsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizFuncsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizFuncsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizFuncsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizFuncsInfo.Merge(m, src)
}
func (m *VizFuncsInfo) XXX_Size() int {
	return m.Size()
}
func (m *VizFuncsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VizFuncsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VizFuncsInfo proto.InternalMessageInfo

func (m *VizFuncsInfo) GetDocStringMap() map[string]string {
	if m != nil {
		return m.DocStringMap
	}
	return nil
}

func (m *VizFuncsInfo) GetVizSpecMap() map[string]*VizSpec {
	if m != nil {
		return m.VizSpecMap
	}
	return nil
}

func (m *VizFuncsInfo) GetFnArgsMap() map[string]*FuncArgsSpec {
	if m != nil {
		return m.FnArgsMap
	}
	return nil
}

type VizFuncsInfoResult struct {
	Status *proto2.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Info   *VizFuncsInfo  `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *VizFuncsInfoResult) Reset()      { *m = VizFuncsInfoResult{} }
func (*VizFuncsInfoResult) ProtoMessage() {}
func (*VizFuncsInfoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aa89baec43fda2f, []int{3}
}
func (m *VizFuncsInfoResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VizFuncsInfoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VizFuncsInfoResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VizFuncsInfoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VizFuncsInfoResult.Merge(m, src)
}
func (m *VizFuncsInfoResult) XXX_Size() int {
	return m.Size()
}
func (m *VizFuncsInfoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VizFuncsInfoResult.DiscardUnknown(m)
}

var xxx_messageInfo_VizFuncsInfoResult proto.InternalMessageInfo

func (m *VizFuncsInfoResult) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VizFuncsInfoResult) GetInfo() *VizFuncsInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type MainFuncSpecResult struct {
	Status       *proto2.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	MainFuncSpec *FuncArgsSpec  `protobuf:"bytes,2,opt,name=main_func_spec,json=mainFuncSpec,proto3" json:"main_func_spec,omitempty"`
}

func (m *MainFuncSpecResult) Reset()      { *m = MainFuncSpecResult{} }
func (*MainFuncSpecResult) ProtoMessage() {}
func (*MainFuncSpecResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aa89baec43fda2f, []int{4}
}
func (m *MainFuncSpecResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainFuncSpecResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainFuncSpecResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainFuncSpecResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainFuncSpecResult.Merge(m, src)
}
func (m *MainFuncSpecResult) XXX_Size() int {
	return m.Size()
}
func (m *MainFuncSpecResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MainFuncSpecResult.DiscardUnknown(m)
}

var xxx_messageInfo_MainFuncSpecResult proto.InternalMessageInfo

func (m *MainFuncSpecResult) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MainFuncSpecResult) GetMainFuncSpec() *FuncArgsSpec {
	if m != nil {
		return m.MainFuncSpec
	}
	return nil
}

func init() {
	proto.RegisterType((*FuncArgsSpec)(nil), "pl.shared.scriptspb.FuncArgsSpec")
	proto.RegisterType((*FuncArgsSpec_Arg)(nil), "pl.shared.scriptspb.FuncArgsSpec.Arg")
	proto.RegisterType((*VizSpec)(nil), "pl.shared.scriptspb.VizSpec")
	proto.RegisterType((*VizFuncsInfo)(nil), "pl.shared.scriptspb.VizFuncsInfo")
	proto.RegisterMapType((map[string]string)(nil), "pl.shared.scriptspb.VizFuncsInfo.DocStringMapEntry")
	proto.RegisterMapType((map[string]*FuncArgsSpec)(nil), "pl.shared.scriptspb.VizFuncsInfo.FnArgsMapEntry")
	proto.RegisterMapType((map[string]*VizSpec)(nil), "pl.shared.scriptspb.VizFuncsInfo.VizSpecMapEntry")
	proto.RegisterType((*VizFuncsInfoResult)(nil), "pl.shared.scriptspb.VizFuncsInfoResult")
	proto.RegisterType((*MainFuncSpecResult)(nil), "pl.shared.scriptspb.MainFuncSpecResult")
}

func init() { proto.RegisterFile("src/shared/scriptspb/scripts.proto", fileDescriptor_4aa89baec43fda2f) }

var fileDescriptor_4aa89baec43fda2f = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0x25, 0x69, 0x69, 0x5e, 0xdc, 0x00, 0x57, 0x84, 0xa2, 0x80, 0x4e, 0x25, 0x08, 0x54,
	0x09, 0xc9, 0x86, 0x54, 0x15, 0x3f, 0x3a, 0xa0, 0xa2, 0x52, 0xc4, 0x50, 0x09, 0x39, 0xa8, 0x12,
	0x30, 0x58, 0x17, 0xe7, 0x12, 0x4e, 0x8d, 0xcf, 0x27, 0xdf, 0x25, 0x6a, 0x3a, 0x31, 0xb3, 0xc0,
	0x9f, 0xc1, 0xc0, 0x1f, 0xc2, 0xd8, 0xb1, 0x23, 0x75, 0x17, 0xc6, 0x8e, 0x8c, 0xc8, 0x67, 0xd7,
	0xb8, 0x10, 0x28, 0x62, 0x7b, 0xf7, 0xdd, 0xf7, 0x7d, 0xef, 0x7b, 0xcf, 0x3f, 0xa0, 0xad, 0x22,
	0xdf, 0x51, 0x6f, 0x69, 0xc4, 0xfa, 0x8e, 0xf2, 0x23, 0x2e, 0xb5, 0x92, 0xbd, 0xd3, 0xca, 0x96,
	0x51, 0xa8, 0x43, 0xbc, 0x24, 0x47, 0x76, 0x4a, 0xb1, 0x73, 0x4a, 0xab, 0x28, 0xd4, 0x53, 0xc9,
	0x94, 0x63, 0xc8, 0x69, 0x9d, 0x0a, 0x53, 0x8e, 0x1f, 0x06, 0x41, 0x28, 0x9c, 0x1e, 0x55, 0x2c,
	0xa3, 0x28, 0x4d, 0xf5, 0x38, 0xe3, 0xb4, 0xbf, 0x23, 0xb0, 0xb6, 0xc6, 0xc2, 0xdf, 0x88, 0x86,
	0xaa, 0x2b, 0x99, 0x8f, 0x1f, 0x42, 0x95, 0x46, 0x43, 0xd5, 0x44, 0xcb, 0x95, 0x95, 0x7a, 0xe7,
	0x96, 0x3d, 0xa3, 0xb9, 0x5d, 0x14, 0xd8, 0x1b, 0xd1, 0xd0, 0x35, 0x92, 0xd6, 0x67, 0x04, 0x95,
	0x8d, 0x68, 0x88, 0x1d, 0xa8, 0xf5, 0xa9, 0xa6, 0x5e, 0x92, 0xa5, 0x89, 0x96, 0xd1, 0x4a, 0xa3,
	0x83, 0x13, 0x9f, 0x34, 0xdb, 0x26, 0xd5, 0xf4, 0xe5, 0x54, 0x32, 0x77, 0xa1, 0x9f, 0x55, 0x78,
	0x1d, 0x16, 0x15, 0x0b, 0xa8, 0xd0, 0xdc, 0x4f, 0x45, 0x65, 0x23, 0xba, 0xfa, 0x53, 0xd4, 0xcd,
	0xae, 0x8d, 0xd0, 0x52, 0x85, 0x13, 0xc6, 0x50, 0x15, 0x34, 0x60, 0xcd, 0xca, 0x32, 0x5a, 0xa9,
	0xb9, 0xa6, 0xc6, 0x37, 0x61, 0xb1, 0xcf, 0x06, 0x74, 0x3c, 0xd2, 0xde, 0x84, 0x8e, 0xc6, 0xac,
	0x39, 0x67, 0x2e, 0xad, 0x0c, 0xdc, 0x49, 0xb0, 0xf6, 0x6d, 0xb8, 0xb0, 0xc3, 0xf7, 0xcd, 0xd0,
	0xd7, 0xa0, 0x36, 0x61, 0x43, 0xea, 0x29, 0xc9, 0x7c, 0x93, 0xb8, 0xe6, 0x2e, 0x24, 0x40, 0x72,
	0xd9, 0xfe, 0x50, 0x05, 0x6b, 0x87, 0xef, 0x27, 0x43, 0xab, 0xe7, 0x62, 0x10, 0xe2, 0x57, 0xd0,
	0xe8, 0x87, 0xbe, 0xa7, 0x74, 0xc4, 0xc5, 0xd0, 0x0b, 0xa8, 0xcc, 0x96, 0xb5, 0x3a, 0x73, 0x59,
	0x45, 0xa9, 0xbd, 0x19, 0xfa, 0x5d, 0x23, 0xdb, 0xa6, 0xf2, 0xa9, 0xd0, 0xd1, 0xd4, 0xb5, 0xfa,
	0x05, 0x08, 0x77, 0xc1, 0x9a, 0xf0, 0x7d, 0x93, 0xc3, 0x18, 0x97, 0x8d, 0xf1, 0xbd, 0xf3, 0x8d,
	0xb3, 0x49, 0x72, 0x5b, 0x98, 0xe4, 0x00, 0x7e, 0x01, 0xf5, 0x81, 0xf0, 0x92, 0x47, 0x64, 0x3c,
	0x2b, 0xc6, 0xf3, 0xee, 0xf9, 0x9e, 0x5b, 0x22, 0x79, 0xc8, 0xb9, 0x65, 0x6d, 0x70, 0x7a, 0x6e,
	0x3d, 0x86, 0xcb, 0xbf, 0x4d, 0x82, 0x2f, 0x41, 0x65, 0x97, 0x4d, 0xb3, 0xf5, 0x25, 0x25, 0xbe,
	0x02, 0x73, 0xe9, 0xfa, 0xcb, 0x06, 0x4b, 0x0f, 0x8f, 0xca, 0x0f, 0x50, 0xeb, 0x0d, 0x5c, 0xfc,
	0x25, 0xf1, 0x0c, 0x79, 0xa7, 0x28, 0xaf, 0x77, 0xae, 0xff, 0x29, 0x71, 0x62, 0x53, 0x34, 0xf7,
	0xa0, 0x71, 0x36, 0xfa, 0x0c, 0xef, 0xfb, 0x67, 0xbd, 0x6f, 0x9c, 0xfb, 0x9e, 0x17, 0x1a, 0xb4,
	0xf7, 0x00, 0x17, 0x17, 0xe5, 0x32, 0x35, 0x1e, 0x69, 0x7c, 0x07, 0xe6, 0xd3, 0x4f, 0xcb, 0xf4,
	0xa9, 0x77, 0x96, 0x8c, 0xa7, 0x41, 0x64, 0xcf, 0xee, 0x9a, 0xc2, 0xcd, 0x28, 0x78, 0x0d, 0xaa,
	0x5c, 0x0c, 0xc2, 0xbf, 0xb6, 0x3f, 0xd3, 0xc3, 0xd0, 0xdb, 0xef, 0x11, 0xe0, 0x6d, 0xca, 0x45,
	0x82, 0x9b, 0x54, 0xff, 0xd1, 0xfa, 0x19, 0x34, 0x02, 0xca, 0x85, 0x37, 0x18, 0x0b, 0x3f, 0x7d,
	0xe3, 0xff, 0x79, 0x07, 0x56, 0x50, 0xe8, 0xfd, 0x64, 0xf7, 0xe0, 0x88, 0x94, 0x0e, 0x8f, 0x48,
	0xe9, 0xe4, 0x88, 0xa0, 0x77, 0x31, 0x41, 0x9f, 0x62, 0x82, 0xbe, 0xc4, 0x04, 0x1d, 0xc4, 0x04,
	0x7d, 0x8d, 0x09, 0xfa, 0x16, 0x93, 0xd2, 0x49, 0x4c, 0xd0, 0xc7, 0x63, 0x52, 0x3a, 0x38, 0x26,
	0xa5, 0xc3, 0x63, 0x52, 0x7a, 0xbd, 0x26, 0xf9, 0x1e, 0x67, 0x23, 0xda, 0x53, 0x36, 0xe5, 0x4e,
	0x7e, 0x70, 0x66, 0xfd, 0x09, 0xd7, 0xf3, 0xaa, 0x37, 0x6f, 0xfe, 0x57, 0xab, 0x3f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x48, 0x7a, 0x69, 0x07, 0x32, 0x05, 0x00, 0x00,
}

func (this *FuncArgsSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FuncArgsSpec)
	if !ok {
		that2, ok := that.(FuncArgsSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(that1.Args[i]) {
			return false
		}
	}
	return true
}
func (this *FuncArgsSpec_Arg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FuncArgsSpec_Arg)
	if !ok {
		that2, ok := that.(FuncArgsSpec_Arg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DataType != that1.DataType {
		return false
	}
	if this.SemanticType != that1.SemanticType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DefaultValue != that1.DefaultValue {
		return false
	}
	return true
}
func (this *VizSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizSpec)
	if !ok {
		that2, ok := that.(VizSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VegaSpec != that1.VegaSpec {
		return false
	}
	return true
}
func (this *VizFuncsInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizFuncsInfo)
	if !ok {
		that2, ok := that.(VizFuncsInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DocStringMap) != len(that1.DocStringMap) {
		return false
	}
	for i := range this.DocStringMap {
		if this.DocStringMap[i] != that1.DocStringMap[i] {
			return false
		}
	}
	if len(this.VizSpecMap) != len(that1.VizSpecMap) {
		return false
	}
	for i := range this.VizSpecMap {
		if !this.VizSpecMap[i].Equal(that1.VizSpecMap[i]) {
			return false
		}
	}
	if len(this.FnArgsMap) != len(that1.FnArgsMap) {
		return false
	}
	for i := range this.FnArgsMap {
		if !this.FnArgsMap[i].Equal(that1.FnArgsMap[i]) {
			return false
		}
	}
	return true
}
func (this *VizFuncsInfoResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VizFuncsInfoResult)
	if !ok {
		that2, ok := that.(VizFuncsInfoResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *MainFuncSpecResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainFuncSpecResult)
	if !ok {
		that2, ok := that.(MainFuncSpecResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.MainFuncSpec.Equal(that1.MainFuncSpec) {
		return false
	}
	return true
}
func (this *FuncArgsSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scriptspb.FuncArgsSpec{")
	if this.Args != nil {
		s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FuncArgsSpec_Arg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&scriptspb.FuncArgsSpec_Arg{")
	s = append(s, "DataType: "+fmt.Sprintf("%#v", this.DataType)+",\n")
	s = append(s, "SemanticType: "+fmt.Sprintf("%#v", this.SemanticType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scriptspb.VizSpec{")
	s = append(s, "VegaSpec: "+fmt.Sprintf("%#v", this.VegaSpec)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizFuncsInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&scriptspb.VizFuncsInfo{")
	keysForDocStringMap := make([]string, 0, len(this.DocStringMap))
	for k, _ := range this.DocStringMap {
		keysForDocStringMap = append(keysForDocStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDocStringMap)
	mapStringForDocStringMap := "map[string]string{"
	for _, k := range keysForDocStringMap {
		mapStringForDocStringMap += fmt.Sprintf("%#v: %#v,", k, this.DocStringMap[k])
	}
	mapStringForDocStringMap += "}"
	if this.DocStringMap != nil {
		s = append(s, "DocStringMap: "+mapStringForDocStringMap+",\n")
	}
	keysForVizSpecMap := make([]string, 0, len(this.VizSpecMap))
	for k, _ := range this.VizSpecMap {
		keysForVizSpecMap = append(keysForVizSpecMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVizSpecMap)
	mapStringForVizSpecMap := "map[string]*VizSpec{"
	for _, k := range keysForVizSpecMap {
		mapStringForVizSpecMap += fmt.Sprintf("%#v: %#v,", k, this.VizSpecMap[k])
	}
	mapStringForVizSpecMap += "}"
	if this.VizSpecMap != nil {
		s = append(s, "VizSpecMap: "+mapStringForVizSpecMap+",\n")
	}
	keysForFnArgsMap := make([]string, 0, len(this.FnArgsMap))
	for k, _ := range this.FnArgsMap {
		keysForFnArgsMap = append(keysForFnArgsMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFnArgsMap)
	mapStringForFnArgsMap := "map[string]*FuncArgsSpec{"
	for _, k := range keysForFnArgsMap {
		mapStringForFnArgsMap += fmt.Sprintf("%#v: %#v,", k, this.FnArgsMap[k])
	}
	mapStringForFnArgsMap += "}"
	if this.FnArgsMap != nil {
		s = append(s, "FnArgsMap: "+mapStringForFnArgsMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VizFuncsInfoResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&scriptspb.VizFuncsInfoResult{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MainFuncSpecResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&scriptspb.MainFuncSpecResult{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.MainFuncSpec != nil {
		s = append(s, "MainFuncSpec: "+fmt.Sprintf("%#v", this.MainFuncSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringScripts(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FuncArgsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FuncArgsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FuncArgsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScripts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FuncArgsSpec_Arg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FuncArgsSpec_Arg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FuncArgsSpec_Arg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintScripts(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScripts(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SemanticType != 0 {
		i = encodeVarintScripts(dAtA, i, uint64(m.SemanticType))
		i--
		dAtA[i] = 0x10
	}
	if m.DataType != 0 {
		i = encodeVarintScripts(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VizSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VegaSpec) > 0 {
		i -= len(m.VegaSpec)
		copy(dAtA[i:], m.VegaSpec)
		i = encodeVarintScripts(dAtA, i, uint64(len(m.VegaSpec)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VizFuncsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizFuncsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizFuncsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FnArgsMap) > 0 {
		for k := range m.FnArgsMap {
			v := m.FnArgsMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScripts(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintScripts(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintScripts(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.VizSpecMap) > 0 {
		for k := range m.VizSpecMap {
			v := m.VizSpecMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScripts(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintScripts(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintScripts(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DocStringMap) > 0 {
		for k := range m.DocStringMap {
			v := m.DocStringMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintScripts(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintScripts(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintScripts(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VizFuncsInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VizFuncsInfoResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VizFuncsInfoResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScripts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScripts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MainFuncSpecResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainFuncSpecResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainFuncSpecResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MainFuncSpec != nil {
		{
			size, err := m.MainFuncSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScripts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScripts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintScripts(dAtA []byte, offset int, v uint64) int {
	offset -= sovScripts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FuncArgsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovScripts(uint64(l))
		}
	}
	return n
}

func (m *FuncArgsSpec_Arg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovScripts(uint64(m.DataType))
	}
	if m.SemanticType != 0 {
		n += 1 + sovScripts(uint64(m.SemanticType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScripts(uint64(l))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovScripts(uint64(l))
	}
	return n
}

func (m *VizSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VegaSpec)
	if l > 0 {
		n += 1 + l + sovScripts(uint64(l))
	}
	return n
}

func (m *VizFuncsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DocStringMap) > 0 {
		for k, v := range m.DocStringMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovScripts(uint64(len(k))) + 1 + len(v) + sovScripts(uint64(len(v)))
			n += mapEntrySize + 1 + sovScripts(uint64(mapEntrySize))
		}
	}
	if len(m.VizSpecMap) > 0 {
		for k, v := range m.VizSpecMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScripts(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovScripts(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovScripts(uint64(mapEntrySize))
		}
	}
	if len(m.FnArgsMap) > 0 {
		for k, v := range m.FnArgsMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScripts(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovScripts(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovScripts(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *VizFuncsInfoResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovScripts(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovScripts(uint64(l))
	}
	return n
}

func (m *MainFuncSpecResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovScripts(uint64(l))
	}
	if m.MainFuncSpec != nil {
		l = m.MainFuncSpec.Size()
		n += 1 + l + sovScripts(uint64(l))
	}
	return n
}

func sovScripts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScripts(x uint64) (n int) {
	return sovScripts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FuncArgsSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgs := "[]*FuncArgsSpec_Arg{"
	for _, f := range this.Args {
		repeatedStringForArgs += strings.Replace(fmt.Sprintf("%v", f), "FuncArgsSpec_Arg", "FuncArgsSpec_Arg", 1) + ","
	}
	repeatedStringForArgs += "}"
	s := strings.Join([]string{`&FuncArgsSpec{`,
		`Args:` + repeatedStringForArgs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FuncArgsSpec_Arg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FuncArgsSpec_Arg{`,
		`DataType:` + fmt.Sprintf("%v", this.DataType) + `,`,
		`SemanticType:` + fmt.Sprintf("%v", this.SemanticType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizSpec{`,
		`VegaSpec:` + fmt.Sprintf("%v", this.VegaSpec) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizFuncsInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForDocStringMap := make([]string, 0, len(this.DocStringMap))
	for k, _ := range this.DocStringMap {
		keysForDocStringMap = append(keysForDocStringMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDocStringMap)
	mapStringForDocStringMap := "map[string]string{"
	for _, k := range keysForDocStringMap {
		mapStringForDocStringMap += fmt.Sprintf("%v: %v,", k, this.DocStringMap[k])
	}
	mapStringForDocStringMap += "}"
	keysForVizSpecMap := make([]string, 0, len(this.VizSpecMap))
	for k, _ := range this.VizSpecMap {
		keysForVizSpecMap = append(keysForVizSpecMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVizSpecMap)
	mapStringForVizSpecMap := "map[string]*VizSpec{"
	for _, k := range keysForVizSpecMap {
		mapStringForVizSpecMap += fmt.Sprintf("%v: %v,", k, this.VizSpecMap[k])
	}
	mapStringForVizSpecMap += "}"
	keysForFnArgsMap := make([]string, 0, len(this.FnArgsMap))
	for k, _ := range this.FnArgsMap {
		keysForFnArgsMap = append(keysForFnArgsMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFnArgsMap)
	mapStringForFnArgsMap := "map[string]*FuncArgsSpec{"
	for _, k := range keysForFnArgsMap {
		mapStringForFnArgsMap += fmt.Sprintf("%v: %v,", k, this.FnArgsMap[k])
	}
	mapStringForFnArgsMap += "}"
	s := strings.Join([]string{`&VizFuncsInfo{`,
		`DocStringMap:` + mapStringForDocStringMap + `,`,
		`VizSpecMap:` + mapStringForVizSpecMap + `,`,
		`FnArgsMap:` + mapStringForFnArgsMap + `,`,
		`}`,
	}, "")
	return s
}
func (this *VizFuncsInfoResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VizFuncsInfoResult{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`Info:` + strings.Replace(this.Info.String(), "VizFuncsInfo", "VizFuncsInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MainFuncSpecResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MainFuncSpecResult{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`MainFuncSpec:` + strings.Replace(this.MainFuncSpec.String(), "FuncArgsSpec", "FuncArgsSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringScripts(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FuncArgsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuncArgsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuncArgsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &FuncArgsSpec_Arg{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScripts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FuncArgsSpec_Arg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= proto1.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemanticType", wireType)
			}
			m.SemanticType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SemanticType |= proto1.SemanticType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScripts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VegaSpec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VegaSpec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScripts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizFuncsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizFuncsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizFuncsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocStringMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DocStringMap == nil {
				m.DocStringMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScripts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScripts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthScripts
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthScripts
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScripts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthScripts
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthScripts
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScripts(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScripts
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DocStringMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizSpecMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizSpecMap == nil {
				m.VizSpecMap = make(map[string]*VizSpec)
			}
			var mapkey string
			var mapvalue *VizSpec
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScripts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScripts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthScripts
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthScripts
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScripts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScripts
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScripts
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VizSpec{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScripts(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScripts
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VizSpecMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FnArgsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FnArgsMap == nil {
				m.FnArgsMap = make(map[string]*FuncArgsSpec)
			}
			var mapkey string
			var mapvalue *FuncArgsSpec
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScripts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScripts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthScripts
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthScripts
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScripts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScripts
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScripts
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FuncArgsSpec{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScripts(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScripts
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FnArgsMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScripts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VizFuncsInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VizFuncsInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VizFuncsInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &VizFuncsInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScripts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainFuncSpecResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainFuncSpecResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainFuncSpecResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainFuncSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MainFuncSpec == nil {
				m.MainFuncSpec = &FuncArgsSpec{}
			}
			if err := m.MainFuncSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScripts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScripts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScripts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScripts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScripts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScripts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScripts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScripts = fmt.Errorf("proto: unexpected end of group")
)
