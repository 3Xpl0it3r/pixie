// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/carnot/planpb/plan.proto

package planpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	proto1 "pixielabs.ai/pixielabs/src/shared/types/proto"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OperatorType int32

const (
	OPERATOR_TYPE_UNKNOWN       OperatorType = 0
	MEMORY_SOURCE_OPERATOR      OperatorType = 1000
	MAP_OPERATOR                OperatorType = 2000
	BLOCKING_AGGREGATE_OPERATOR OperatorType = 2100
	FILTER_OPERATOR             OperatorType = 2200
	LIMIT_OPERATOR              OperatorType = 2300
	ZIP_OPERATOR                OperatorType = 2400
	MEMORY_SINK_OPERATOR        OperatorType = 9000
)

var OperatorType_name = map[int32]string{
	0:    "OPERATOR_TYPE_UNKNOWN",
	1000: "MEMORY_SOURCE_OPERATOR",
	2000: "MAP_OPERATOR",
	2100: "BLOCKING_AGGREGATE_OPERATOR",
	2200: "FILTER_OPERATOR",
	2300: "LIMIT_OPERATOR",
	2400: "ZIP_OPERATOR",
	9000: "MEMORY_SINK_OPERATOR",
}

var OperatorType_value = map[string]int32{
	"OPERATOR_TYPE_UNKNOWN":       0,
	"MEMORY_SOURCE_OPERATOR":      1000,
	"MAP_OPERATOR":                2000,
	"BLOCKING_AGGREGATE_OPERATOR": 2100,
	"FILTER_OPERATOR":             2200,
	"LIMIT_OPERATOR":              2300,
	"ZIP_OPERATOR":                2400,
	"MEMORY_SINK_OPERATOR":        9000,
}

func (OperatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{0}
}

type Plan struct {
	Dag   *DAG            `protobuf:"bytes,1,opt,name=dag,proto3" json:"dag,omitempty"`
	Nodes []*PlanFragment `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *Plan) Reset()      { *m = Plan{} }
func (*Plan) ProtoMessage() {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{0}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return m.Size()
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetDag() *DAG {
	if m != nil {
		return m.Dag
	}
	return nil
}

func (m *Plan) GetNodes() []*PlanFragment {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type PlanFragment struct {
	Id    uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Dag   *DAG        `protobuf:"bytes,2,opt,name=dag,proto3" json:"dag,omitempty"`
	Nodes []*PlanNode `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *PlanFragment) Reset()      { *m = PlanFragment{} }
func (*PlanFragment) ProtoMessage() {}
func (*PlanFragment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{1}
}
func (m *PlanFragment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlanFragment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlanFragment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlanFragment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanFragment.Merge(m, src)
}
func (m *PlanFragment) XXX_Size() int {
	return m.Size()
}
func (m *PlanFragment) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanFragment.DiscardUnknown(m)
}

var xxx_messageInfo_PlanFragment proto.InternalMessageInfo

func (m *PlanFragment) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlanFragment) GetDag() *DAG {
	if m != nil {
		return m.Dag
	}
	return nil
}

func (m *PlanFragment) GetNodes() []*PlanNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type DAG struct {
	Nodes []*DAG_DAGNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *DAG) Reset()      { *m = DAG{} }
func (*DAG) ProtoMessage() {}
func (*DAG) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{2}
}
func (m *DAG) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DAG) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DAG.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DAG) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DAG.Merge(m, src)
}
func (m *DAG) XXX_Size() int {
	return m.Size()
}
func (m *DAG) XXX_DiscardUnknown() {
	xxx_messageInfo_DAG.DiscardUnknown(m)
}

var xxx_messageInfo_DAG proto.InternalMessageInfo

func (m *DAG) GetNodes() []*DAG_DAGNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type DAG_DAGNode struct {
	Id         uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SortedDeps []uint64 `protobuf:"varint,2,rep,packed,name=sorted_deps,json=sortedDeps,proto3" json:"sorted_deps,omitempty"`
}

func (m *DAG_DAGNode) Reset()      { *m = DAG_DAGNode{} }
func (*DAG_DAGNode) ProtoMessage() {}
func (*DAG_DAGNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{2, 0}
}
func (m *DAG_DAGNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DAG_DAGNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DAG_DAGNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DAG_DAGNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DAG_DAGNode.Merge(m, src)
}
func (m *DAG_DAGNode) XXX_Size() int {
	return m.Size()
}
func (m *DAG_DAGNode) XXX_DiscardUnknown() {
	xxx_messageInfo_DAG_DAGNode.DiscardUnknown(m)
}

var xxx_messageInfo_DAG_DAGNode proto.InternalMessageInfo

func (m *DAG_DAGNode) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DAG_DAGNode) GetSortedDeps() []uint64 {
	if m != nil {
		return m.SortedDeps
	}
	return nil
}

type PlanNode struct {
	Id uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Op *Operator `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
}

func (m *PlanNode) Reset()      { *m = PlanNode{} }
func (*PlanNode) ProtoMessage() {}
func (*PlanNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{3}
}
func (m *PlanNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlanNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlanNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlanNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanNode.Merge(m, src)
}
func (m *PlanNode) XXX_Size() int {
	return m.Size()
}
func (m *PlanNode) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanNode.DiscardUnknown(m)
}

var xxx_messageInfo_PlanNode proto.InternalMessageInfo

func (m *PlanNode) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlanNode) GetOp() *Operator {
	if m != nil {
		return m.Op
	}
	return nil
}

type Operator struct {
	OpType OperatorType `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=pl.carnot.planpb.OperatorType" json:"op_type,omitempty"`
	// Types that are valid to be assigned to Op:
	//	*Operator_MemSourceOp
	//	*Operator_MapOp
	//	*Operator_BlockingAggOp
	//	*Operator_MemSinkOp
	//	*Operator_FilterOp
	//	*Operator_LimitOp
	//	*Operator_ZipOp
	Op isOperator_Op `protobuf_oneof:"op"`
}

func (m *Operator) Reset()      { *m = Operator{} }
func (*Operator) ProtoMessage() {}
func (*Operator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{4}
}
func (m *Operator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operator.Merge(m, src)
}
func (m *Operator) XXX_Size() int {
	return m.Size()
}
func (m *Operator) XXX_DiscardUnknown() {
	xxx_messageInfo_Operator.DiscardUnknown(m)
}

var xxx_messageInfo_Operator proto.InternalMessageInfo

type isOperator_Op interface {
	isOperator_Op()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Operator_MemSourceOp struct {
	MemSourceOp *MemorySourceOperator `protobuf:"bytes,2,opt,name=mem_source_op,json=memSourceOp,proto3,oneof"`
}
type Operator_MapOp struct {
	MapOp *MapOperator `protobuf:"bytes,3,opt,name=map_op,json=mapOp,proto3,oneof"`
}
type Operator_BlockingAggOp struct {
	BlockingAggOp *BlockingAggregateOperator `protobuf:"bytes,4,opt,name=blocking_agg_op,json=blockingAggOp,proto3,oneof"`
}
type Operator_MemSinkOp struct {
	MemSinkOp *MemorySinkOperator `protobuf:"bytes,5,opt,name=mem_sink_op,json=memSinkOp,proto3,oneof"`
}
type Operator_FilterOp struct {
	FilterOp *FilterOperator `protobuf:"bytes,6,opt,name=filter_op,json=filterOp,proto3,oneof"`
}
type Operator_LimitOp struct {
	LimitOp *LimitOperator `protobuf:"bytes,7,opt,name=limit_op,json=limitOp,proto3,oneof"`
}
type Operator_ZipOp struct {
	ZipOp *ZipOperator `protobuf:"bytes,8,opt,name=zip_op,json=zipOp,proto3,oneof"`
}

func (*Operator_MemSourceOp) isOperator_Op()   {}
func (*Operator_MapOp) isOperator_Op()         {}
func (*Operator_BlockingAggOp) isOperator_Op() {}
func (*Operator_MemSinkOp) isOperator_Op()     {}
func (*Operator_FilterOp) isOperator_Op()      {}
func (*Operator_LimitOp) isOperator_Op()       {}
func (*Operator_ZipOp) isOperator_Op()         {}

func (m *Operator) GetOp() isOperator_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *Operator) GetOpType() OperatorType {
	if m != nil {
		return m.OpType
	}
	return OPERATOR_TYPE_UNKNOWN
}

func (m *Operator) GetMemSourceOp() *MemorySourceOperator {
	if x, ok := m.GetOp().(*Operator_MemSourceOp); ok {
		return x.MemSourceOp
	}
	return nil
}

func (m *Operator) GetMapOp() *MapOperator {
	if x, ok := m.GetOp().(*Operator_MapOp); ok {
		return x.MapOp
	}
	return nil
}

func (m *Operator) GetBlockingAggOp() *BlockingAggregateOperator {
	if x, ok := m.GetOp().(*Operator_BlockingAggOp); ok {
		return x.BlockingAggOp
	}
	return nil
}

func (m *Operator) GetMemSinkOp() *MemorySinkOperator {
	if x, ok := m.GetOp().(*Operator_MemSinkOp); ok {
		return x.MemSinkOp
	}
	return nil
}

func (m *Operator) GetFilterOp() *FilterOperator {
	if x, ok := m.GetOp().(*Operator_FilterOp); ok {
		return x.FilterOp
	}
	return nil
}

func (m *Operator) GetLimitOp() *LimitOperator {
	if x, ok := m.GetOp().(*Operator_LimitOp); ok {
		return x.LimitOp
	}
	return nil
}

func (m *Operator) GetZipOp() *ZipOperator {
	if x, ok := m.GetOp().(*Operator_ZipOp); ok {
		return x.ZipOp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Operator) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Operator_OneofMarshaler, _Operator_OneofUnmarshaler, _Operator_OneofSizer, []interface{}{
		(*Operator_MemSourceOp)(nil),
		(*Operator_MapOp)(nil),
		(*Operator_BlockingAggOp)(nil),
		(*Operator_MemSinkOp)(nil),
		(*Operator_FilterOp)(nil),
		(*Operator_LimitOp)(nil),
		(*Operator_ZipOp)(nil),
	}
}

func _Operator_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Operator)
	// op
	switch x := m.Op.(type) {
	case *Operator_MemSourceOp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemSourceOp); err != nil {
			return err
		}
	case *Operator_MapOp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MapOp); err != nil {
			return err
		}
	case *Operator_BlockingAggOp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockingAggOp); err != nil {
			return err
		}
	case *Operator_MemSinkOp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemSinkOp); err != nil {
			return err
		}
	case *Operator_FilterOp:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FilterOp); err != nil {
			return err
		}
	case *Operator_LimitOp:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LimitOp); err != nil {
			return err
		}
	case *Operator_ZipOp:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZipOp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Operator.Op has unexpected type %T", x)
	}
	return nil
}

func _Operator_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Operator)
	switch tag {
	case 2: // op.mem_source_op
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MemorySourceOperator)
		err := b.DecodeMessage(msg)
		m.Op = &Operator_MemSourceOp{msg}
		return true, err
	case 3: // op.map_op
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MapOperator)
		err := b.DecodeMessage(msg)
		m.Op = &Operator_MapOp{msg}
		return true, err
	case 4: // op.blocking_agg_op
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockingAggregateOperator)
		err := b.DecodeMessage(msg)
		m.Op = &Operator_BlockingAggOp{msg}
		return true, err
	case 5: // op.mem_sink_op
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MemorySinkOperator)
		err := b.DecodeMessage(msg)
		m.Op = &Operator_MemSinkOp{msg}
		return true, err
	case 6: // op.filter_op
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FilterOperator)
		err := b.DecodeMessage(msg)
		m.Op = &Operator_FilterOp{msg}
		return true, err
	case 7: // op.limit_op
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LimitOperator)
		err := b.DecodeMessage(msg)
		m.Op = &Operator_LimitOp{msg}
		return true, err
	case 8: // op.zip_op
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZipOperator)
		err := b.DecodeMessage(msg)
		m.Op = &Operator_ZipOp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Operator_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Operator)
	// op
	switch x := m.Op.(type) {
	case *Operator_MemSourceOp:
		s := proto.Size(x.MemSourceOp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operator_MapOp:
		s := proto.Size(x.MapOp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operator_BlockingAggOp:
		s := proto.Size(x.BlockingAggOp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operator_MemSinkOp:
		s := proto.Size(x.MemSinkOp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operator_FilterOp:
		s := proto.Size(x.FilterOp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operator_LimitOp:
		s := proto.Size(x.LimitOp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operator_ZipOp:
		s := proto.Size(x.ZipOp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MemorySourceOperator struct {
	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ColumnIdxs  []int64           `protobuf:"varint,2,rep,packed,name=column_idxs,json=columnIdxs,proto3" json:"column_idxs,omitempty"`
	ColumnNames []string          `protobuf:"bytes,3,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	ColumnTypes []proto1.DataType `protobuf:"varint,4,rep,packed,name=column_types,json=columnTypes,proto3,enum=pl.types.DataType" json:"column_types,omitempty"`
	StartTime   *types.Int64Value `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StopTime    *types.Int64Value `protobuf:"bytes,6,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
}

func (m *MemorySourceOperator) Reset()      { *m = MemorySourceOperator{} }
func (*MemorySourceOperator) ProtoMessage() {}
func (*MemorySourceOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{5}
}
func (m *MemorySourceOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemorySourceOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemorySourceOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemorySourceOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemorySourceOperator.Merge(m, src)
}
func (m *MemorySourceOperator) XXX_Size() int {
	return m.Size()
}
func (m *MemorySourceOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MemorySourceOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MemorySourceOperator proto.InternalMessageInfo

func (m *MemorySourceOperator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MemorySourceOperator) GetColumnIdxs() []int64 {
	if m != nil {
		return m.ColumnIdxs
	}
	return nil
}

func (m *MemorySourceOperator) GetColumnNames() []string {
	if m != nil {
		return m.ColumnNames
	}
	return nil
}

func (m *MemorySourceOperator) GetColumnTypes() []proto1.DataType {
	if m != nil {
		return m.ColumnTypes
	}
	return nil
}

func (m *MemorySourceOperator) GetStartTime() *types.Int64Value {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *MemorySourceOperator) GetStopTime() *types.Int64Value {
	if m != nil {
		return m.StopTime
	}
	return nil
}

type MemorySinkOperator struct {
	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ColumnTypes []proto1.DataType `protobuf:"varint,2,rep,packed,name=column_types,json=columnTypes,proto3,enum=pl.types.DataType" json:"column_types,omitempty"`
	ColumnNames []string          `protobuf:"bytes,3,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
}

func (m *MemorySinkOperator) Reset()      { *m = MemorySinkOperator{} }
func (*MemorySinkOperator) ProtoMessage() {}
func (*MemorySinkOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{6}
}
func (m *MemorySinkOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemorySinkOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemorySinkOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemorySinkOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemorySinkOperator.Merge(m, src)
}
func (m *MemorySinkOperator) XXX_Size() int {
	return m.Size()
}
func (m *MemorySinkOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MemorySinkOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MemorySinkOperator proto.InternalMessageInfo

func (m *MemorySinkOperator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MemorySinkOperator) GetColumnTypes() []proto1.DataType {
	if m != nil {
		return m.ColumnTypes
	}
	return nil
}

func (m *MemorySinkOperator) GetColumnNames() []string {
	if m != nil {
		return m.ColumnNames
	}
	return nil
}

type MapOperator struct {
	Expressions []*ScalarExpression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
	ColumnNames []string            `protobuf:"bytes,2,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
}

func (m *MapOperator) Reset()      { *m = MapOperator{} }
func (*MapOperator) ProtoMessage() {}
func (*MapOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{7}
}
func (m *MapOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapOperator.Merge(m, src)
}
func (m *MapOperator) XXX_Size() int {
	return m.Size()
}
func (m *MapOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MapOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MapOperator proto.InternalMessageInfo

func (m *MapOperator) GetExpressions() []*ScalarExpression {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *MapOperator) GetColumnNames() []string {
	if m != nil {
		return m.ColumnNames
	}
	return nil
}

type BlockingAggregateOperator struct {
	Values     []*AggregateExpression `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Groups     []*Column              `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	GroupNames []string               `protobuf:"bytes,3,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	ValueNames []string               `protobuf:"bytes,4,rep,name=value_names,json=valueNames,proto3" json:"value_names,omitempty"`
}

func (m *BlockingAggregateOperator) Reset()      { *m = BlockingAggregateOperator{} }
func (*BlockingAggregateOperator) ProtoMessage() {}
func (*BlockingAggregateOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{8}
}
func (m *BlockingAggregateOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockingAggregateOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockingAggregateOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockingAggregateOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockingAggregateOperator.Merge(m, src)
}
func (m *BlockingAggregateOperator) XXX_Size() int {
	return m.Size()
}
func (m *BlockingAggregateOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockingAggregateOperator.DiscardUnknown(m)
}

var xxx_messageInfo_BlockingAggregateOperator proto.InternalMessageInfo

func (m *BlockingAggregateOperator) GetValues() []*AggregateExpression {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *BlockingAggregateOperator) GetGroups() []*Column {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *BlockingAggregateOperator) GetGroupNames() []string {
	if m != nil {
		return m.GroupNames
	}
	return nil
}

func (m *BlockingAggregateOperator) GetValueNames() []string {
	if m != nil {
		return m.ValueNames
	}
	return nil
}

type FilterOperator struct {
	Expression *ScalarExpression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Columns    []*Column         `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *FilterOperator) Reset()      { *m = FilterOperator{} }
func (*FilterOperator) ProtoMessage() {}
func (*FilterOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{9}
}
func (m *FilterOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterOperator.Merge(m, src)
}
func (m *FilterOperator) XXX_Size() int {
	return m.Size()
}
func (m *FilterOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterOperator.DiscardUnknown(m)
}

var xxx_messageInfo_FilterOperator proto.InternalMessageInfo

func (m *FilterOperator) GetExpression() *ScalarExpression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (m *FilterOperator) GetColumns() []*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

type LimitOperator struct {
	Limit   int64     `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Columns []*Column `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *LimitOperator) Reset()      { *m = LimitOperator{} }
func (*LimitOperator) ProtoMessage() {}
func (*LimitOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{10}
}
func (m *LimitOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOperator.Merge(m, src)
}
func (m *LimitOperator) XXX_Size() int {
	return m.Size()
}
func (m *LimitOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOperator.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOperator proto.InternalMessageInfo

func (m *LimitOperator) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *LimitOperator) GetColumns() []*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

type ZipOperator struct {
	ColumnNames    []string                     `protobuf:"bytes,1,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	ColumnMappings []*ZipOperator_ColumnMapping `protobuf:"bytes,2,rep,name=column_mappings,json=columnMappings,proto3" json:"column_mappings,omitempty"`
}

func (m *ZipOperator) Reset()      { *m = ZipOperator{} }
func (*ZipOperator) ProtoMessage() {}
func (*ZipOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{11}
}
func (m *ZipOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZipOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZipOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZipOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZipOperator.Merge(m, src)
}
func (m *ZipOperator) XXX_Size() int {
	return m.Size()
}
func (m *ZipOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_ZipOperator.DiscardUnknown(m)
}

var xxx_messageInfo_ZipOperator proto.InternalMessageInfo

func (m *ZipOperator) GetColumnNames() []string {
	if m != nil {
		return m.ColumnNames
	}
	return nil
}

func (m *ZipOperator) GetColumnMappings() []*ZipOperator_ColumnMapping {
	if m != nil {
		return m.ColumnMappings
	}
	return nil
}

type ZipOperator_ColumnMapping struct {
	OutputColumnIndexes []int64 `protobuf:"varint,1,rep,packed,name=output_column_indexes,json=outputColumnIndexes,proto3" json:"output_column_indexes,omitempty"`
	HasTimeColumn       bool    `protobuf:"varint,2,opt,name=has_time_column,json=hasTimeColumn,proto3" json:"has_time_column,omitempty"`
	TimeColumnIndex     int64   `protobuf:"varint,3,opt,name=time_column_index,json=timeColumnIndex,proto3" json:"time_column_index,omitempty"`
}

func (m *ZipOperator_ColumnMapping) Reset()      { *m = ZipOperator_ColumnMapping{} }
func (*ZipOperator_ColumnMapping) ProtoMessage() {}
func (*ZipOperator_ColumnMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{11, 0}
}
func (m *ZipOperator_ColumnMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZipOperator_ColumnMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZipOperator_ColumnMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZipOperator_ColumnMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZipOperator_ColumnMapping.Merge(m, src)
}
func (m *ZipOperator_ColumnMapping) XXX_Size() int {
	return m.Size()
}
func (m *ZipOperator_ColumnMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_ZipOperator_ColumnMapping.DiscardUnknown(m)
}

var xxx_messageInfo_ZipOperator_ColumnMapping proto.InternalMessageInfo

func (m *ZipOperator_ColumnMapping) GetOutputColumnIndexes() []int64 {
	if m != nil {
		return m.OutputColumnIndexes
	}
	return nil
}

func (m *ZipOperator_ColumnMapping) GetHasTimeColumn() bool {
	if m != nil {
		return m.HasTimeColumn
	}
	return false
}

func (m *ZipOperator_ColumnMapping) GetTimeColumnIndex() int64 {
	if m != nil {
		return m.TimeColumnIndex
	}
	return 0
}

type ScalarExpression struct {
	// Types that are valid to be assigned to Value:
	//	*ScalarExpression_Constant
	//	*ScalarExpression_Column
	//	*ScalarExpression_Func
	Value isScalarExpression_Value `protobuf_oneof:"value"`
}

func (m *ScalarExpression) Reset()      { *m = ScalarExpression{} }
func (*ScalarExpression) ProtoMessage() {}
func (*ScalarExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{12}
}
func (m *ScalarExpression) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScalarExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScalarExpression.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScalarExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalarExpression.Merge(m, src)
}
func (m *ScalarExpression) XXX_Size() int {
	return m.Size()
}
func (m *ScalarExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalarExpression.DiscardUnknown(m)
}

var xxx_messageInfo_ScalarExpression proto.InternalMessageInfo

type isScalarExpression_Value interface {
	isScalarExpression_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ScalarExpression_Constant struct {
	Constant *ScalarValue `protobuf:"bytes,1,opt,name=constant,proto3,oneof"`
}
type ScalarExpression_Column struct {
	Column *Column `protobuf:"bytes,2,opt,name=column,proto3,oneof"`
}
type ScalarExpression_Func struct {
	Func *ScalarFunc `protobuf:"bytes,3,opt,name=func,proto3,oneof"`
}

func (*ScalarExpression_Constant) isScalarExpression_Value() {}
func (*ScalarExpression_Column) isScalarExpression_Value()   {}
func (*ScalarExpression_Func) isScalarExpression_Value()     {}

func (m *ScalarExpression) GetValue() isScalarExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ScalarExpression) GetConstant() *ScalarValue {
	if x, ok := m.GetValue().(*ScalarExpression_Constant); ok {
		return x.Constant
	}
	return nil
}

func (m *ScalarExpression) GetColumn() *Column {
	if x, ok := m.GetValue().(*ScalarExpression_Column); ok {
		return x.Column
	}
	return nil
}

func (m *ScalarExpression) GetFunc() *ScalarFunc {
	if x, ok := m.GetValue().(*ScalarExpression_Func); ok {
		return x.Func
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ScalarExpression) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ScalarExpression_OneofMarshaler, _ScalarExpression_OneofUnmarshaler, _ScalarExpression_OneofSizer, []interface{}{
		(*ScalarExpression_Constant)(nil),
		(*ScalarExpression_Column)(nil),
		(*ScalarExpression_Func)(nil),
	}
}

func _ScalarExpression_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ScalarExpression)
	// value
	switch x := m.Value.(type) {
	case *ScalarExpression_Constant:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Constant); err != nil {
			return err
		}
	case *ScalarExpression_Column:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Column); err != nil {
			return err
		}
	case *ScalarExpression_Func:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Func); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ScalarExpression.Value has unexpected type %T", x)
	}
	return nil
}

func _ScalarExpression_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ScalarExpression)
	switch tag {
	case 1: // value.constant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScalarValue)
		err := b.DecodeMessage(msg)
		m.Value = &ScalarExpression_Constant{msg}
		return true, err
	case 2: // value.column
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Column)
		err := b.DecodeMessage(msg)
		m.Value = &ScalarExpression_Column{msg}
		return true, err
	case 3: // value.func
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScalarFunc)
		err := b.DecodeMessage(msg)
		m.Value = &ScalarExpression_Func{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ScalarExpression_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ScalarExpression)
	// value
	switch x := m.Value.(type) {
	case *ScalarExpression_Constant:
		s := proto.Size(x.Constant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ScalarExpression_Column:
		s := proto.Size(x.Column)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ScalarExpression_Func:
		s := proto.Size(x.Func)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ScalarValue struct {
	DataType proto1.DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=pl.types.DataType" json:"data_type,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ScalarValue_BoolValue
	//	*ScalarValue_Int64Value
	//	*ScalarValue_Float64Value
	//	*ScalarValue_StringValue
	//	*ScalarValue_Time64NsValue
	Value isScalarValue_Value `protobuf_oneof:"value"`
}

func (m *ScalarValue) Reset()      { *m = ScalarValue{} }
func (*ScalarValue) ProtoMessage() {}
func (*ScalarValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{13}
}
func (m *ScalarValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScalarValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScalarValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScalarValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalarValue.Merge(m, src)
}
func (m *ScalarValue) XXX_Size() int {
	return m.Size()
}
func (m *ScalarValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalarValue.DiscardUnknown(m)
}

var xxx_messageInfo_ScalarValue proto.InternalMessageInfo

type isScalarValue_Value interface {
	isScalarValue_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ScalarValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}
type ScalarValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3,oneof"`
}
type ScalarValue_Float64Value struct {
	Float64Value float64 `protobuf:"fixed64,4,opt,name=float64_value,json=float64Value,proto3,oneof"`
}
type ScalarValue_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof"`
}
type ScalarValue_Time64NsValue struct {
	Time64NsValue int64 `protobuf:"varint,6,opt,name=time64_ns_value,json=time64NsValue,proto3,oneof"`
}

func (*ScalarValue_BoolValue) isScalarValue_Value()     {}
func (*ScalarValue_Int64Value) isScalarValue_Value()    {}
func (*ScalarValue_Float64Value) isScalarValue_Value()  {}
func (*ScalarValue_StringValue) isScalarValue_Value()   {}
func (*ScalarValue_Time64NsValue) isScalarValue_Value() {}

func (m *ScalarValue) GetValue() isScalarValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ScalarValue) GetDataType() proto1.DataType {
	if m != nil {
		return m.DataType
	}
	return proto1.DATA_TYPE_UNKNOWN
}

func (m *ScalarValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*ScalarValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *ScalarValue) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*ScalarValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *ScalarValue) GetFloat64Value() float64 {
	if x, ok := m.GetValue().(*ScalarValue_Float64Value); ok {
		return x.Float64Value
	}
	return 0
}

func (m *ScalarValue) GetStringValue() string {
	if x, ok := m.GetValue().(*ScalarValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *ScalarValue) GetTime64NsValue() int64 {
	if x, ok := m.GetValue().(*ScalarValue_Time64NsValue); ok {
		return x.Time64NsValue
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ScalarValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ScalarValue_OneofMarshaler, _ScalarValue_OneofUnmarshaler, _ScalarValue_OneofSizer, []interface{}{
		(*ScalarValue_BoolValue)(nil),
		(*ScalarValue_Int64Value)(nil),
		(*ScalarValue_Float64Value)(nil),
		(*ScalarValue_StringValue)(nil),
		(*ScalarValue_Time64NsValue)(nil),
	}
}

func _ScalarValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ScalarValue)
	// value
	switch x := m.Value.(type) {
	case *ScalarValue_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *ScalarValue_Int64Value:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int64Value))
	case *ScalarValue_Float64Value:
		_ = b.EncodeVarint(4<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.Float64Value))
	case *ScalarValue_StringValue:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StringValue)
	case *ScalarValue_Time64NsValue:
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Time64NsValue))
	case nil:
	default:
		return fmt.Errorf("ScalarValue.Value has unexpected type %T", x)
	}
	return nil
}

func _ScalarValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ScalarValue)
	switch tag {
	case 2: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ScalarValue_BoolValue{x != 0}
		return true, err
	case 3: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ScalarValue_Int64Value{int64(x)}
		return true, err
	case 4: // value.float64_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &ScalarValue_Float64Value{math.Float64frombits(x)}
		return true, err
	case 5: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ScalarValue_StringValue{x}
		return true, err
	case 6: // value.time64_ns_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ScalarValue_Time64NsValue{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _ScalarValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ScalarValue)
	// value
	switch x := m.Value.(type) {
	case *ScalarValue_BoolValue:
		n += 1 // tag and wire
		n += 1
	case *ScalarValue_Int64Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *ScalarValue_Float64Value:
		n += 1 // tag and wire
		n += 8
	case *ScalarValue_StringValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *ScalarValue_Time64NsValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Time64NsValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ScalarFunc struct {
	Name          string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InitArgs      []*ScalarValue      `protobuf:"bytes,2,rep,name=init_args,json=initArgs,proto3" json:"init_args,omitempty"`
	Args          []*ScalarExpression `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Id            int64               `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	ArgsDataTypes []proto1.DataType   `protobuf:"varint,5,rep,packed,name=args_data_types,json=argsDataTypes,proto3,enum=pl.types.DataType" json:"args_data_types,omitempty"`
}

func (m *ScalarFunc) Reset()      { *m = ScalarFunc{} }
func (*ScalarFunc) ProtoMessage() {}
func (*ScalarFunc) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{14}
}
func (m *ScalarFunc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScalarFunc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScalarFunc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScalarFunc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalarFunc.Merge(m, src)
}
func (m *ScalarFunc) XXX_Size() int {
	return m.Size()
}
func (m *ScalarFunc) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalarFunc.DiscardUnknown(m)
}

var xxx_messageInfo_ScalarFunc proto.InternalMessageInfo

func (m *ScalarFunc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScalarFunc) GetInitArgs() []*ScalarValue {
	if m != nil {
		return m.InitArgs
	}
	return nil
}

func (m *ScalarFunc) GetArgs() []*ScalarExpression {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ScalarFunc) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ScalarFunc) GetArgsDataTypes() []proto1.DataType {
	if m != nil {
		return m.ArgsDataTypes
	}
	return nil
}

type AggregateExpression struct {
	Name          string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	InitArgs      []*ScalarValue             `protobuf:"bytes,4,rep,name=init_args,json=initArgs,proto3" json:"init_args,omitempty"`
	Args          []*AggregateExpression_Arg `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	Id            int64                      `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	ArgsDataTypes []proto1.DataType          `protobuf:"varint,7,rep,packed,name=args_data_types,json=argsDataTypes,proto3,enum=pl.types.DataType" json:"args_data_types,omitempty"`
}

func (m *AggregateExpression) Reset()      { *m = AggregateExpression{} }
func (*AggregateExpression) ProtoMessage() {}
func (*AggregateExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{15}
}
func (m *AggregateExpression) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateExpression.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateExpression.Merge(m, src)
}
func (m *AggregateExpression) XXX_Size() int {
	return m.Size()
}
func (m *AggregateExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateExpression.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateExpression proto.InternalMessageInfo

func (m *AggregateExpression) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AggregateExpression) GetInitArgs() []*ScalarValue {
	if m != nil {
		return m.InitArgs
	}
	return nil
}

func (m *AggregateExpression) GetArgs() []*AggregateExpression_Arg {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *AggregateExpression) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AggregateExpression) GetArgsDataTypes() []proto1.DataType {
	if m != nil {
		return m.ArgsDataTypes
	}
	return nil
}

type AggregateExpression_Arg struct {
	// Types that are valid to be assigned to Value:
	//	*AggregateExpression_Arg_Constant
	//	*AggregateExpression_Arg_Column
	Value isAggregateExpression_Arg_Value `protobuf_oneof:"value"`
}

func (m *AggregateExpression_Arg) Reset()      { *m = AggregateExpression_Arg{} }
func (*AggregateExpression_Arg) ProtoMessage() {}
func (*AggregateExpression_Arg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{15, 0}
}
func (m *AggregateExpression_Arg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateExpression_Arg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateExpression_Arg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateExpression_Arg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateExpression_Arg.Merge(m, src)
}
func (m *AggregateExpression_Arg) XXX_Size() int {
	return m.Size()
}
func (m *AggregateExpression_Arg) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateExpression_Arg.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateExpression_Arg proto.InternalMessageInfo

type isAggregateExpression_Arg_Value interface {
	isAggregateExpression_Arg_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AggregateExpression_Arg_Constant struct {
	Constant *ScalarValue `protobuf:"bytes,1,opt,name=constant,proto3,oneof"`
}
type AggregateExpression_Arg_Column struct {
	Column *Column `protobuf:"bytes,2,opt,name=column,proto3,oneof"`
}

func (*AggregateExpression_Arg_Constant) isAggregateExpression_Arg_Value() {}
func (*AggregateExpression_Arg_Column) isAggregateExpression_Arg_Value()   {}

func (m *AggregateExpression_Arg) GetValue() isAggregateExpression_Arg_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AggregateExpression_Arg) GetConstant() *ScalarValue {
	if x, ok := m.GetValue().(*AggregateExpression_Arg_Constant); ok {
		return x.Constant
	}
	return nil
}

func (m *AggregateExpression_Arg) GetColumn() *Column {
	if x, ok := m.GetValue().(*AggregateExpression_Arg_Column); ok {
		return x.Column
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AggregateExpression_Arg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AggregateExpression_Arg_OneofMarshaler, _AggregateExpression_Arg_OneofUnmarshaler, _AggregateExpression_Arg_OneofSizer, []interface{}{
		(*AggregateExpression_Arg_Constant)(nil),
		(*AggregateExpression_Arg_Column)(nil),
	}
}

func _AggregateExpression_Arg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AggregateExpression_Arg)
	// value
	switch x := m.Value.(type) {
	case *AggregateExpression_Arg_Constant:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Constant); err != nil {
			return err
		}
	case *AggregateExpression_Arg_Column:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Column); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AggregateExpression_Arg.Value has unexpected type %T", x)
	}
	return nil
}

func _AggregateExpression_Arg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AggregateExpression_Arg)
	switch tag {
	case 1: // value.constant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScalarValue)
		err := b.DecodeMessage(msg)
		m.Value = &AggregateExpression_Arg_Constant{msg}
		return true, err
	case 2: // value.column
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Column)
		err := b.DecodeMessage(msg)
		m.Value = &AggregateExpression_Arg_Column{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AggregateExpression_Arg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AggregateExpression_Arg)
	// value
	switch x := m.Value.(type) {
	case *AggregateExpression_Arg_Constant:
		s := proto.Size(x.Constant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AggregateExpression_Arg_Column:
		s := proto.Size(x.Column)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Column struct {
	Node  uint64 `protobuf:"varint,1,opt,name=node,proto3" json:"node,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *Column) Reset()      { *m = Column{} }
func (*Column) ProtoMessage() {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5dcfc8666ec3f33, []int{16}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(m, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

func (m *Column) GetNode() uint64 {
	if m != nil {
		return m.Node
	}
	return 0
}

func (m *Column) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterEnum("pl.carnot.planpb.OperatorType", OperatorType_name, OperatorType_value)
	proto.RegisterType((*Plan)(nil), "pl.carnot.planpb.Plan")
	proto.RegisterType((*PlanFragment)(nil), "pl.carnot.planpb.PlanFragment")
	proto.RegisterType((*DAG)(nil), "pl.carnot.planpb.DAG")
	proto.RegisterType((*DAG_DAGNode)(nil), "pl.carnot.planpb.DAG.DAGNode")
	proto.RegisterType((*PlanNode)(nil), "pl.carnot.planpb.PlanNode")
	proto.RegisterType((*Operator)(nil), "pl.carnot.planpb.Operator")
	proto.RegisterType((*MemorySourceOperator)(nil), "pl.carnot.planpb.MemorySourceOperator")
	proto.RegisterType((*MemorySinkOperator)(nil), "pl.carnot.planpb.MemorySinkOperator")
	proto.RegisterType((*MapOperator)(nil), "pl.carnot.planpb.MapOperator")
	proto.RegisterType((*BlockingAggregateOperator)(nil), "pl.carnot.planpb.BlockingAggregateOperator")
	proto.RegisterType((*FilterOperator)(nil), "pl.carnot.planpb.FilterOperator")
	proto.RegisterType((*LimitOperator)(nil), "pl.carnot.planpb.LimitOperator")
	proto.RegisterType((*ZipOperator)(nil), "pl.carnot.planpb.ZipOperator")
	proto.RegisterType((*ZipOperator_ColumnMapping)(nil), "pl.carnot.planpb.ZipOperator.ColumnMapping")
	proto.RegisterType((*ScalarExpression)(nil), "pl.carnot.planpb.ScalarExpression")
	proto.RegisterType((*ScalarValue)(nil), "pl.carnot.planpb.ScalarValue")
	proto.RegisterType((*ScalarFunc)(nil), "pl.carnot.planpb.ScalarFunc")
	proto.RegisterType((*AggregateExpression)(nil), "pl.carnot.planpb.AggregateExpression")
	proto.RegisterType((*AggregateExpression_Arg)(nil), "pl.carnot.planpb.AggregateExpression.Arg")
	proto.RegisterType((*Column)(nil), "pl.carnot.planpb.Column")
}

func init() { proto.RegisterFile("src/carnot/planpb/plan.proto", fileDescriptor_e5dcfc8666ec3f33) }

var fileDescriptor_e5dcfc8666ec3f33 = []byte{
	// 1438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xbb, 0x6f, 0xdb, 0xd6,
	0x17, 0x16, 0xf5, 0xd6, 0x91, 0x65, 0xd9, 0x37, 0xce, 0x0f, 0x8e, 0x93, 0xd0, 0x8e, 0x7e, 0x4d,
	0xea, 0x26, 0x80, 0x1c, 0x28, 0xa9, 0x5b, 0xb8, 0x09, 0x0a, 0x39, 0x96, 0x6c, 0x21, 0x96, 0x64,
	0xdc, 0x28, 0x2d, 0x92, 0x85, 0xb8, 0x16, 0x69, 0x86, 0x88, 0xf8, 0x00, 0x49, 0xa5, 0x76, 0x96,
	0x3e, 0xa6, 0x8e, 0xdd, 0x5a, 0xa0, 0x4b, 0x97, 0x02, 0xf9, 0x03, 0xfa, 0x07, 0x74, 0xec, 0x54,
	0x78, 0xe8, 0x90, 0x31, 0x51, 0x96, 0x8c, 0xe9, 0xde, 0xa1, 0xb8, 0x0f, 0x4a, 0xb4, 0x29, 0xd9,
	0x6e, 0x87, 0x0e, 0x82, 0xc8, 0x73, 0xbf, 0xef, 0x3b, 0x8f, 0x7b, 0xee, 0xb9, 0x84, 0x4b, 0x9e,
	0xdb, 0x5d, 0xe9, 0x12, 0xd7, 0xb2, 0xfd, 0x15, 0xa7, 0x47, 0x2c, 0x67, 0x97, 0xfd, 0x95, 0x1d,
	0xd7, 0xf6, 0x6d, 0x34, 0xe3, 0xf4, 0xca, 0x7c, 0xb1, 0xcc, 0x17, 0x17, 0x64, 0xdd, 0xb6, 0xf5,
	0x9e, 0xb6, 0xc2, 0xd6, 0x77, 0xfb, 0x7b, 0x2b, 0x5f, 0xb8, 0xc4, 0x71, 0x34, 0xd7, 0xe3, 0x8c,
	0x85, 0x12, 0xd5, 0xf3, 0x9e, 0x10, 0x57, 0x53, 0x57, 0xfc, 0x03, 0x47, 0xf3, 0x38, 0x92, 0x3f,
	0x73, 0x4c, 0x49, 0x83, 0xe4, 0x4e, 0x8f, 0x58, 0xe8, 0x7d, 0x48, 0xa8, 0x44, 0x9f, 0x97, 0x96,
	0xa4, 0xe5, 0x7c, 0xe5, 0x7c, 0xf9, 0xb8, 0xaf, 0xf2, 0x46, 0x75, 0x13, 0x53, 0x04, 0xba, 0x0d,
	0x29, 0xcb, 0x56, 0x35, 0x6f, 0x3e, 0xbe, 0x94, 0x58, 0xce, 0x57, 0xe4, 0x28, 0x94, 0xea, 0xd5,
	0x5d, 0xa2, 0x9b, 0x9a, 0xe5, 0x63, 0x0e, 0x2e, 0x1d, 0xc0, 0x54, 0xd8, 0x8c, 0xa6, 0x21, 0x6e,
	0xa8, 0xcc, 0x5b, 0x12, 0xc7, 0x0d, 0x35, 0x70, 0x1f, 0x3f, 0xd5, 0xfd, 0xcd, 0xc0, 0x7d, 0x82,
	0xb9, 0x5f, 0x18, 0xef, 0xbe, 0x65, 0xab, 0x5a, 0xe0, 0xfa, 0x19, 0x24, 0x36, 0xaa, 0x9b, 0xe8,
	0x56, 0x40, 0x94, 0x18, 0xf1, 0xf2, 0x58, 0x1f, 0xf4, 0x17, 0xe2, 0x2e, 0xac, 0x41, 0x46, 0x58,
	0x22, 0x11, 0x2f, 0x42, 0xde, 0xb3, 0x5d, 0x5f, 0x53, 0x15, 0x55, 0x73, 0x78, 0x35, 0x92, 0x18,
	0xb8, 0x69, 0x43, 0x73, 0xbc, 0x52, 0x1d, 0xb2, 0x41, 0x28, 0x11, 0xf2, 0x75, 0x88, 0xdb, 0x8e,
	0xc8, 0x76, 0x4c, 0x0a, 0x6d, 0x47, 0x73, 0x89, 0x6f, 0xbb, 0x38, 0x6e, 0x3b, 0xa5, 0x9f, 0x93,
	0x90, 0x0d, 0x0c, 0xe8, 0x23, 0xc8, 0xd8, 0x8e, 0x42, 0x37, 0x90, 0xa9, 0x4d, 0x8f, 0xab, 0x7f,
	0x00, 0xee, 0x1c, 0x38, 0x1a, 0x4e, 0xdb, 0x0e, 0xfd, 0x47, 0xdb, 0x50, 0x30, 0x35, 0x53, 0xf1,
	0xec, 0xbe, 0xdb, 0xd5, 0x94, 0xa1, 0xf3, 0x6b, 0x51, 0x7a, 0x53, 0x33, 0x6d, 0xf7, 0xe0, 0x01,
	0x03, 0x06, 0x52, 0x5b, 0x31, 0x9c, 0x37, 0x35, 0x33, 0x30, 0xa2, 0x55, 0x48, 0x9b, 0xc4, 0xa1,
	0x32, 0x09, 0x26, 0x33, 0xa6, 0x9a, 0x4d, 0xe2, 0x84, 0xd8, 0x29, 0x93, 0xbe, 0xa2, 0x87, 0x50,
	0xdc, 0xed, 0xd9, 0xdd, 0xa7, 0x86, 0xa5, 0x2b, 0x44, 0xd7, 0xa9, 0x40, 0x92, 0x09, 0xdc, 0x88,
	0x0a, 0xac, 0x0b, 0x60, 0x55, 0xd7, 0x5d, 0x4d, 0x27, 0x7e, 0x38, 0x98, 0xc2, 0xee, 0x68, 0xb1,
	0xed, 0xa0, 0x3a, 0xe4, 0x59, 0x72, 0x86, 0xf5, 0x94, 0x4a, 0xa6, 0x98, 0xe4, 0x7b, 0x13, 0x53,
	0x33, 0xac, 0xa7, 0x21, 0xad, 0x1c, 0x4d, 0x8c, 0x99, 0xd0, 0xa7, 0x90, 0xdb, 0x33, 0x7a, 0xbe,
	0xe6, 0x52, 0x95, 0x34, 0x53, 0x59, 0x8a, 0xaa, 0xd4, 0x19, 0x24, 0xa4, 0x90, 0xdd, 0x13, 0x16,
	0x74, 0x07, 0xb2, 0x3d, 0xc3, 0x34, 0x7c, 0xca, 0xcf, 0x30, 0xfe, 0x62, 0x94, 0xbf, 0x4d, 0x11,
	0x21, 0x7a, 0xa6, 0xc7, 0x0d, 0xb4, 0xaa, 0xcf, 0x0d, 0x56, 0xd5, 0xec, 0xa4, 0xaa, 0x3e, 0x36,
	0x8e, 0x54, 0xf5, 0x39, 0x7d, 0x5d, 0x4f, 0xd2, 0x6e, 0x2a, 0xfd, 0x18, 0x87, 0xb9, 0x71, 0x7b,
	0x87, 0x10, 0x24, 0x2d, 0x62, 0xf2, 0x86, 0xc9, 0x61, 0xf6, 0x4c, 0xbb, 0xb7, 0x6b, 0xf7, 0xfa,
	0xa6, 0xa5, 0x18, 0xea, 0x3e, 0xef, 0xde, 0x04, 0x06, 0x6e, 0x6a, 0xa8, 0xfb, 0x1e, 0xba, 0x02,
	0x53, 0x02, 0x40, 0xf1, 0xfc, 0xb8, 0xe5, 0xb0, 0x20, 0xb5, 0xa8, 0x09, 0x7d, 0x38, 0x84, 0xb0,
	0x81, 0x32, 0x9f, 0x5c, 0x4a, 0x2c, 0x4f, 0x57, 0x10, 0x0d, 0x9a, 0x4f, 0x98, 0x0d, 0xe2, 0x13,
	0xd6, 0x84, 0x82, 0x46, 0x9f, 0x3d, 0xb4, 0x06, 0xe0, 0xf9, 0xc4, 0xf5, 0x15, 0xdf, 0x30, 0x35,
	0xb1, 0x57, 0x17, 0xcb, 0x7c, 0x94, 0x95, 0x83, 0x51, 0x56, 0x6e, 0x58, 0xfe, 0xea, 0xed, 0xcf,
	0x48, 0xaf, 0xaf, 0xe1, 0x1c, 0x83, 0x77, 0x0c, 0x53, 0x43, 0x1f, 0x43, 0xce, 0xf3, 0xe9, 0x01,
	0xa0, 0xd4, 0xf4, 0xe9, 0xd4, 0x2c, 0x45, 0x53, 0x66, 0xe9, 0x1b, 0x09, 0x50, 0x74, 0xfb, 0xc7,
	0xd6, 0xe6, 0x78, 0x5e, 0xf1, 0xb3, 0xe5, 0x75, 0x7a, 0xc5, 0x4a, 0xcf, 0x20, 0x1f, 0x3a, 0x16,
	0x68, 0x03, 0xf2, 0xda, 0xbe, 0xe3, 0x6a, 0x9e, 0x67, 0xd8, 0x56, 0x30, 0x98, 0x4a, 0xd1, 0x4d,
	0x7f, 0xd0, 0x25, 0x3d, 0xe2, 0xd6, 0x86, 0x50, 0x1c, 0xa6, 0x45, 0xfc, 0xc6, 0xa3, 0x7e, 0x7f,
	0x97, 0xe0, 0xc2, 0xc4, 0xe3, 0x84, 0xee, 0x42, 0xfa, 0x19, 0xad, 0x56, 0x10, 0xc1, 0xd5, 0x68,
	0x04, 0x43, 0x52, 0x28, 0x08, 0x41, 0x42, 0x37, 0x21, 0xad, 0xbb, 0x76, 0xdf, 0x09, 0x6e, 0x84,
	0xf9, 0x28, 0xfd, 0x1e, 0x8b, 0x05, 0x0b, 0x1c, 0x6d, 0x3e, 0xf6, 0x74, 0xa4, 0x50, 0xc0, 0x4c,
	0xbc, 0xb3, 0x16, 0x21, 0xcf, 0xc4, 0x05, 0x20, 0xc9, 0x01, 0xcc, 0xc4, 0x13, 0xfa, 0x56, 0x82,
	0xe9, 0xa3, 0xc7, 0x10, 0xad, 0x03, 0x8c, 0xaa, 0x22, 0xee, 0xb1, 0xb3, 0xd4, 0x32, 0xc4, 0x42,
	0x15, 0xc8, 0xf0, 0xb2, 0x9d, 0x9e, 0x4b, 0x00, 0x2c, 0x3d, 0x82, 0xc2, 0x91, 0x03, 0x8d, 0xe6,
	0x20, 0xc5, 0x0e, 0x34, 0x8b, 0x21, 0x81, 0xf9, 0xcb, 0xbf, 0x92, 0xfe, 0x29, 0x0e, 0xf9, 0xd0,
	0x81, 0x8f, 0xec, 0xb4, 0x14, 0x3d, 0x93, 0x1d, 0x28, 0x0a, 0x88, 0x49, 0x1c, 0xc7, 0xb0, 0xf4,
	0xc0, 0xdd, 0x8d, 0x13, 0x67, 0x89, 0x70, 0xdd, 0xe4, 0x1c, 0x3c, 0xdd, 0x0d, 0xbf, 0x7a, 0x0b,
	0xdf, 0x4b, 0x50, 0x38, 0x82, 0x40, 0x15, 0x38, 0x6f, 0xf7, 0x7d, 0xa7, 0xef, 0x2b, 0xc1, 0x18,
	0xb1, 0x54, 0x6d, 0x5f, 0xc4, 0x94, 0xc0, 0xe7, 0xf8, 0x22, 0xe7, 0x34, 0xf8, 0x12, 0xba, 0x06,
	0xc5, 0x27, 0xc4, 0x63, 0x67, 0x57, 0xb0, 0xd8, 0x25, 0x94, 0xc5, 0x85, 0x27, 0xc4, 0xa3, 0x87,
	0x94, 0xc3, 0xd1, 0x75, 0x98, 0x0d, 0x61, 0xb8, 0x32, 0xbb, 0x67, 0x12, 0xb8, 0xe8, 0x0f, 0x61,
	0x4c, 0xb5, 0xf4, 0xab, 0x04, 0x33, 0xc7, 0xb7, 0x14, 0x7d, 0x02, 0xd9, 0xae, 0x6d, 0x79, 0x3e,
	0xb1, 0x7c, 0xd1, 0x08, 0x97, 0x27, 0x35, 0x02, 0x1b, 0x13, 0x74, 0x84, 0x07, 0x04, 0x54, 0x81,
	0x74, 0x28, 0xb8, 0x13, 0xf6, 0x69, 0x2b, 0x86, 0x05, 0x12, 0x55, 0x20, 0xb9, 0xd7, 0xb7, 0xba,
	0xe2, 0x32, 0xbc, 0x34, 0xc9, 0x59, 0xbd, 0x6f, 0x75, 0xb7, 0x62, 0x98, 0x61, 0xd7, 0x33, 0x90,
	0x62, 0x0d, 0x5d, 0xfa, 0x3a, 0x0e, 0xf9, 0x50, 0x30, 0x68, 0x05, 0x72, 0x2a, 0xf1, 0x49, 0xf8,
	0x92, 0x1f, 0x37, 0x7b, 0xb2, 0xaa, 0x78, 0x42, 0x8b, 0x00, 0xbb, 0xb6, 0xdd, 0x53, 0x98, 0x1c,
	0x2f, 0x29, 0xbd, 0xd6, 0xa8, 0x8d, 0x2b, 0x5e, 0x81, 0xbc, 0x41, 0x67, 0xa2, 0x40, 0xb0, 0x52,
	0x6e, 0xc5, 0x30, 0x18, 0xc3, 0x41, 0x89, 0xae, 0x42, 0x61, 0xaf, 0x67, 0x93, 0x11, 0x88, 0x5e,
	0xcb, 0xd2, 0x56, 0x0c, 0x4f, 0x09, 0x33, 0x87, 0xfd, 0x1f, 0xa6, 0x3c, 0xdf, 0xa5, 0xb7, 0x37,
	0x47, 0xd1, 0xe9, 0x9d, 0xa3, 0x1f, 0x07, 0xdc, 0xca, 0x41, 0xcb, 0xc0, 0xb6, 0x69, 0xf5, 0xb6,
	0x62, 0x79, 0x02, 0x97, 0x16, 0x2e, 0x0b, 0x7c, 0xa1, 0xe5, 0x31, 0xe4, 0xa8, 0x06, 0xaf, 0x24,
	0x80, 0x51, 0x8d, 0xc6, 0x4e, 0xe5, 0x35, 0xc8, 0x19, 0x96, 0xe1, 0x2b, 0xc4, 0x1d, 0xf6, 0xf4,
	0xc9, 0xbb, 0x8a, 0xb3, 0x14, 0x5f, 0x75, 0x75, 0x0f, 0xad, 0x42, 0x92, 0xd1, 0x12, 0x67, 0x9e,
	0xb0, 0x0c, 0x2f, 0x3e, 0xdb, 0x92, 0xac, 0xf5, 0xe8, 0x67, 0xdb, 0x1a, 0x14, 0xa9, 0x5d, 0x19,
	0xee, 0x8f, 0x37, 0x9f, 0x9a, 0x78, 0x39, 0x14, 0x28, 0x34, 0x78, 0xf3, 0x4a, 0x7f, 0xc6, 0xe1,
	0xdc, 0x98, 0x31, 0x3a, 0xcc, 0x35, 0x31, 0x29, 0xd7, 0xe4, 0x3f, 0xcb, 0xf5, 0xae, 0xc8, 0x35,
	0xc5, 0x68, 0x1f, 0x9c, 0x69, 0x96, 0x97, 0xab, 0xae, 0x7e, 0x24, 0xe5, 0xf4, 0x49, 0x29, 0x67,
	0xce, 0x98, 0xf2, 0xc2, 0x97, 0x90, 0xa8, 0xba, 0xfa, 0x7f, 0x7e, 0x1c, 0x47, 0x6d, 0x55, 0x81,
	0xb4, 0x98, 0x29, 0xb4, 0xca, 0xb6, 0xaa, 0x89, 0x4f, 0x70, 0xf6, 0x4c, 0x07, 0x35, 0x9f, 0x2d,
	0x71, 0x66, 0xe4, 0x2f, 0xd7, 0xff, 0x90, 0x60, 0x2a, 0xfc, 0x05, 0x8d, 0x2e, 0xc0, 0xf9, 0xf6,
	0x4e, 0x0d, 0x57, 0x3b, 0x6d, 0xac, 0x74, 0x1e, 0xed, 0xd4, 0x94, 0x87, 0xad, 0xfb, 0xad, 0xf6,
	0xe7, 0xad, 0x99, 0x18, 0xba, 0x08, 0xff, 0x6b, 0xd6, 0x9a, 0x6d, 0xfc, 0x48, 0x79, 0xd0, 0x7e,
	0x88, 0xef, 0xd5, 0x94, 0x00, 0x38, 0xf3, 0x36, 0x83, 0x66, 0x61, 0xaa, 0x59, 0xdd, 0x19, 0x99,
	0x0e, 0x8b, 0x68, 0x09, 0x2e, 0xae, 0x6f, 0xb7, 0xef, 0xdd, 0x6f, 0xb4, 0x36, 0x95, 0xea, 0xe6,
	0x26, 0xae, 0x6d, 0x56, 0x3b, 0x21, 0xd2, 0x2f, 0x33, 0x68, 0x0e, 0x8a, 0xf5, 0xc6, 0x76, 0xa7,
	0x86, 0x47, 0xd6, 0x1f, 0x66, 0xd1, 0x39, 0x98, 0xde, 0x6e, 0x34, 0x1b, 0x9d, 0x91, 0xf1, 0xaf,
	0x59, 0xaa, 0xff, 0xb8, 0x11, 0xd2, 0x7f, 0x85, 0xd0, 0x05, 0x98, 0x0b, 0xe2, 0x69, 0xb4, 0xee,
	0x8f, 0x96, 0x5e, 0xd4, 0xd7, 0xef, 0x1c, 0xbe, 0x96, 0x63, 0x2f, 0x5f, 0xcb, 0xb1, 0x77, 0xaf,
	0x65, 0xe9, 0xab, 0x81, 0x2c, 0xbd, 0x18, 0xc8, 0xd2, 0x6f, 0x03, 0x59, 0x3a, 0x1c, 0xc8, 0xd2,
	0xab, 0x81, 0x2c, 0xbd, 0x1d, 0xc8, 0xb1, 0x77, 0x03, 0x59, 0xfa, 0xee, 0x8d, 0x1c, 0x3b, 0x7c,
	0x23, 0xc7, 0x5e, 0xbe, 0x91, 0x63, 0x8f, 0xd3, 0xbc, 0xc4, 0xbb, 0x69, 0xf6, 0x71, 0x75, 0xeb,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x80, 0xdd, 0xda, 0xa2, 0x0e, 0x00, 0x00,
}

func (x OperatorType) String() string {
	s, ok := OperatorType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Plan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Plan)
	if !ok {
		that2, ok := that.(Plan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Dag.Equal(that1.Dag) {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *PlanFragment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlanFragment)
	if !ok {
		that2, ok := that.(PlanFragment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Dag.Equal(that1.Dag) {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *DAG) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DAG)
	if !ok {
		that2, ok := that.(DAG)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *DAG_DAGNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DAG_DAGNode)
	if !ok {
		that2, ok := that.(DAG_DAGNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.SortedDeps) != len(that1.SortedDeps) {
		return false
	}
	for i := range this.SortedDeps {
		if this.SortedDeps[i] != that1.SortedDeps[i] {
			return false
		}
	}
	return true
}
func (this *PlanNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlanNode)
	if !ok {
		that2, ok := that.(PlanNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Op.Equal(that1.Op) {
		return false
	}
	return true
}
func (this *Operator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Operator)
	if !ok {
		that2, ok := that.(Operator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OpType != that1.OpType {
		return false
	}
	if that1.Op == nil {
		if this.Op != nil {
			return false
		}
	} else if this.Op == nil {
		return false
	} else if !this.Op.Equal(that1.Op) {
		return false
	}
	return true
}
func (this *Operator_MemSourceOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Operator_MemSourceOp)
	if !ok {
		that2, ok := that.(Operator_MemSourceOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MemSourceOp.Equal(that1.MemSourceOp) {
		return false
	}
	return true
}
func (this *Operator_MapOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Operator_MapOp)
	if !ok {
		that2, ok := that.(Operator_MapOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MapOp.Equal(that1.MapOp) {
		return false
	}
	return true
}
func (this *Operator_BlockingAggOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Operator_BlockingAggOp)
	if !ok {
		that2, ok := that.(Operator_BlockingAggOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockingAggOp.Equal(that1.BlockingAggOp) {
		return false
	}
	return true
}
func (this *Operator_MemSinkOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Operator_MemSinkOp)
	if !ok {
		that2, ok := that.(Operator_MemSinkOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MemSinkOp.Equal(that1.MemSinkOp) {
		return false
	}
	return true
}
func (this *Operator_FilterOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Operator_FilterOp)
	if !ok {
		that2, ok := that.(Operator_FilterOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FilterOp.Equal(that1.FilterOp) {
		return false
	}
	return true
}
func (this *Operator_LimitOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Operator_LimitOp)
	if !ok {
		that2, ok := that.(Operator_LimitOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LimitOp.Equal(that1.LimitOp) {
		return false
	}
	return true
}
func (this *Operator_ZipOp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Operator_ZipOp)
	if !ok {
		that2, ok := that.(Operator_ZipOp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ZipOp.Equal(that1.ZipOp) {
		return false
	}
	return true
}
func (this *MemorySourceOperator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MemorySourceOperator)
	if !ok {
		that2, ok := that.(MemorySourceOperator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ColumnIdxs) != len(that1.ColumnIdxs) {
		return false
	}
	for i := range this.ColumnIdxs {
		if this.ColumnIdxs[i] != that1.ColumnIdxs[i] {
			return false
		}
	}
	if len(this.ColumnNames) != len(that1.ColumnNames) {
		return false
	}
	for i := range this.ColumnNames {
		if this.ColumnNames[i] != that1.ColumnNames[i] {
			return false
		}
	}
	if len(this.ColumnTypes) != len(that1.ColumnTypes) {
		return false
	}
	for i := range this.ColumnTypes {
		if this.ColumnTypes[i] != that1.ColumnTypes[i] {
			return false
		}
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.StopTime.Equal(that1.StopTime) {
		return false
	}
	return true
}
func (this *MemorySinkOperator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MemorySinkOperator)
	if !ok {
		that2, ok := that.(MemorySinkOperator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ColumnTypes) != len(that1.ColumnTypes) {
		return false
	}
	for i := range this.ColumnTypes {
		if this.ColumnTypes[i] != that1.ColumnTypes[i] {
			return false
		}
	}
	if len(this.ColumnNames) != len(that1.ColumnNames) {
		return false
	}
	for i := range this.ColumnNames {
		if this.ColumnNames[i] != that1.ColumnNames[i] {
			return false
		}
	}
	return true
}
func (this *MapOperator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapOperator)
	if !ok {
		that2, ok := that.(MapOperator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Expressions) != len(that1.Expressions) {
		return false
	}
	for i := range this.Expressions {
		if !this.Expressions[i].Equal(that1.Expressions[i]) {
			return false
		}
	}
	if len(this.ColumnNames) != len(that1.ColumnNames) {
		return false
	}
	for i := range this.ColumnNames {
		if this.ColumnNames[i] != that1.ColumnNames[i] {
			return false
		}
	}
	return true
}
func (this *BlockingAggregateOperator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockingAggregateOperator)
	if !ok {
		that2, ok := that.(BlockingAggregateOperator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.GroupNames) != len(that1.GroupNames) {
		return false
	}
	for i := range this.GroupNames {
		if this.GroupNames[i] != that1.GroupNames[i] {
			return false
		}
	}
	if len(this.ValueNames) != len(that1.ValueNames) {
		return false
	}
	for i := range this.ValueNames {
		if this.ValueNames[i] != that1.ValueNames[i] {
			return false
		}
	}
	return true
}
func (this *FilterOperator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterOperator)
	if !ok {
		that2, ok := that.(FilterOperator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Expression.Equal(that1.Expression) {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	return true
}
func (this *LimitOperator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LimitOperator)
	if !ok {
		that2, ok := that.(LimitOperator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	return true
}
func (this *ZipOperator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZipOperator)
	if !ok {
		that2, ok := that.(ZipOperator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ColumnNames) != len(that1.ColumnNames) {
		return false
	}
	for i := range this.ColumnNames {
		if this.ColumnNames[i] != that1.ColumnNames[i] {
			return false
		}
	}
	if len(this.ColumnMappings) != len(that1.ColumnMappings) {
		return false
	}
	for i := range this.ColumnMappings {
		if !this.ColumnMappings[i].Equal(that1.ColumnMappings[i]) {
			return false
		}
	}
	return true
}
func (this *ZipOperator_ColumnMapping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZipOperator_ColumnMapping)
	if !ok {
		that2, ok := that.(ZipOperator_ColumnMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OutputColumnIndexes) != len(that1.OutputColumnIndexes) {
		return false
	}
	for i := range this.OutputColumnIndexes {
		if this.OutputColumnIndexes[i] != that1.OutputColumnIndexes[i] {
			return false
		}
	}
	if this.HasTimeColumn != that1.HasTimeColumn {
		return false
	}
	if this.TimeColumnIndex != that1.TimeColumnIndex {
		return false
	}
	return true
}
func (this *ScalarExpression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarExpression)
	if !ok {
		that2, ok := that.(ScalarExpression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *ScalarExpression_Constant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarExpression_Constant)
	if !ok {
		that2, ok := that.(ScalarExpression_Constant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Constant.Equal(that1.Constant) {
		return false
	}
	return true
}
func (this *ScalarExpression_Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarExpression_Column)
	if !ok {
		that2, ok := that.(ScalarExpression_Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Column.Equal(that1.Column) {
		return false
	}
	return true
}
func (this *ScalarExpression_Func) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarExpression_Func)
	if !ok {
		that2, ok := that.(ScalarExpression_Func)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Func.Equal(that1.Func) {
		return false
	}
	return true
}
func (this *ScalarValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue)
	if !ok {
		that2, ok := that.(ScalarValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DataType != that1.DataType {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *ScalarValue_BoolValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_BoolValue)
	if !ok {
		that2, ok := that.(ScalarValue_BoolValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoolValue != that1.BoolValue {
		return false
	}
	return true
}
func (this *ScalarValue_Int64Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_Int64Value)
	if !ok {
		that2, ok := that.(ScalarValue_Int64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int64Value != that1.Int64Value {
		return false
	}
	return true
}
func (this *ScalarValue_Float64Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_Float64Value)
	if !ok {
		that2, ok := that.(ScalarValue_Float64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Float64Value != that1.Float64Value {
		return false
	}
	return true
}
func (this *ScalarValue_StringValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_StringValue)
	if !ok {
		that2, ok := that.(ScalarValue_StringValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StringValue != that1.StringValue {
		return false
	}
	return true
}
func (this *ScalarValue_Time64NsValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarValue_Time64NsValue)
	if !ok {
		that2, ok := that.(ScalarValue_Time64NsValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time64NsValue != that1.Time64NsValue {
		return false
	}
	return true
}
func (this *ScalarFunc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarFunc)
	if !ok {
		that2, ok := that.(ScalarFunc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.InitArgs) != len(that1.InitArgs) {
		return false
	}
	for i := range this.InitArgs {
		if !this.InitArgs[i].Equal(that1.InitArgs[i]) {
			return false
		}
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(that1.Args[i]) {
			return false
		}
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.ArgsDataTypes) != len(that1.ArgsDataTypes) {
		return false
	}
	for i := range this.ArgsDataTypes {
		if this.ArgsDataTypes[i] != that1.ArgsDataTypes[i] {
			return false
		}
	}
	return true
}
func (this *AggregateExpression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregateExpression)
	if !ok {
		that2, ok := that.(AggregateExpression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.InitArgs) != len(that1.InitArgs) {
		return false
	}
	for i := range this.InitArgs {
		if !this.InitArgs[i].Equal(that1.InitArgs[i]) {
			return false
		}
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(that1.Args[i]) {
			return false
		}
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.ArgsDataTypes) != len(that1.ArgsDataTypes) {
		return false
	}
	for i := range this.ArgsDataTypes {
		if this.ArgsDataTypes[i] != that1.ArgsDataTypes[i] {
			return false
		}
	}
	return true
}
func (this *AggregateExpression_Arg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregateExpression_Arg)
	if !ok {
		that2, ok := that.(AggregateExpression_Arg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *AggregateExpression_Arg_Constant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregateExpression_Arg_Constant)
	if !ok {
		that2, ok := that.(AggregateExpression_Arg_Constant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Constant.Equal(that1.Constant) {
		return false
	}
	return true
}
func (this *AggregateExpression_Arg_Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregateExpression_Arg_Column)
	if !ok {
		that2, ok := that.(AggregateExpression_Arg_Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Column.Equal(that1.Column) {
		return false
	}
	return true
}
func (this *Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column)
	if !ok {
		that2, ok := that.(Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Node != that1.Node {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	return true
}
func (this *Plan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&planpb.Plan{")
	if this.Dag != nil {
		s = append(s, "Dag: "+fmt.Sprintf("%#v", this.Dag)+",\n")
	}
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlanFragment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&planpb.PlanFragment{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Dag != nil {
		s = append(s, "Dag: "+fmt.Sprintf("%#v", this.Dag)+",\n")
	}
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DAG) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&planpb.DAG{")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DAG_DAGNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&planpb.DAG_DAGNode{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SortedDeps: "+fmt.Sprintf("%#v", this.SortedDeps)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlanNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&planpb.PlanNode{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Op != nil {
		s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Operator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&planpb.Operator{")
	s = append(s, "OpType: "+fmt.Sprintf("%#v", this.OpType)+",\n")
	if this.Op != nil {
		s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Operator_MemSourceOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.Operator_MemSourceOp{` +
		`MemSourceOp:` + fmt.Sprintf("%#v", this.MemSourceOp) + `}`}, ", ")
	return s
}
func (this *Operator_MapOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.Operator_MapOp{` +
		`MapOp:` + fmt.Sprintf("%#v", this.MapOp) + `}`}, ", ")
	return s
}
func (this *Operator_BlockingAggOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.Operator_BlockingAggOp{` +
		`BlockingAggOp:` + fmt.Sprintf("%#v", this.BlockingAggOp) + `}`}, ", ")
	return s
}
func (this *Operator_MemSinkOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.Operator_MemSinkOp{` +
		`MemSinkOp:` + fmt.Sprintf("%#v", this.MemSinkOp) + `}`}, ", ")
	return s
}
func (this *Operator_FilterOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.Operator_FilterOp{` +
		`FilterOp:` + fmt.Sprintf("%#v", this.FilterOp) + `}`}, ", ")
	return s
}
func (this *Operator_LimitOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.Operator_LimitOp{` +
		`LimitOp:` + fmt.Sprintf("%#v", this.LimitOp) + `}`}, ", ")
	return s
}
func (this *Operator_ZipOp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.Operator_ZipOp{` +
		`ZipOp:` + fmt.Sprintf("%#v", this.ZipOp) + `}`}, ", ")
	return s
}
func (this *MemorySourceOperator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&planpb.MemorySourceOperator{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ColumnIdxs: "+fmt.Sprintf("%#v", this.ColumnIdxs)+",\n")
	s = append(s, "ColumnNames: "+fmt.Sprintf("%#v", this.ColumnNames)+",\n")
	s = append(s, "ColumnTypes: "+fmt.Sprintf("%#v", this.ColumnTypes)+",\n")
	if this.StartTime != nil {
		s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	}
	if this.StopTime != nil {
		s = append(s, "StopTime: "+fmt.Sprintf("%#v", this.StopTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MemorySinkOperator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&planpb.MemorySinkOperator{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ColumnTypes: "+fmt.Sprintf("%#v", this.ColumnTypes)+",\n")
	s = append(s, "ColumnNames: "+fmt.Sprintf("%#v", this.ColumnNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MapOperator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&planpb.MapOperator{")
	if this.Expressions != nil {
		s = append(s, "Expressions: "+fmt.Sprintf("%#v", this.Expressions)+",\n")
	}
	s = append(s, "ColumnNames: "+fmt.Sprintf("%#v", this.ColumnNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockingAggregateOperator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&planpb.BlockingAggregateOperator{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "GroupNames: "+fmt.Sprintf("%#v", this.GroupNames)+",\n")
	s = append(s, "ValueNames: "+fmt.Sprintf("%#v", this.ValueNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FilterOperator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&planpb.FilterOperator{")
	if this.Expression != nil {
		s = append(s, "Expression: "+fmt.Sprintf("%#v", this.Expression)+",\n")
	}
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LimitOperator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&planpb.LimitOperator{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZipOperator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&planpb.ZipOperator{")
	s = append(s, "ColumnNames: "+fmt.Sprintf("%#v", this.ColumnNames)+",\n")
	if this.ColumnMappings != nil {
		s = append(s, "ColumnMappings: "+fmt.Sprintf("%#v", this.ColumnMappings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ZipOperator_ColumnMapping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&planpb.ZipOperator_ColumnMapping{")
	s = append(s, "OutputColumnIndexes: "+fmt.Sprintf("%#v", this.OutputColumnIndexes)+",\n")
	s = append(s, "HasTimeColumn: "+fmt.Sprintf("%#v", this.HasTimeColumn)+",\n")
	s = append(s, "TimeColumnIndex: "+fmt.Sprintf("%#v", this.TimeColumnIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScalarExpression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&planpb.ScalarExpression{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScalarExpression_Constant) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.ScalarExpression_Constant{` +
		`Constant:` + fmt.Sprintf("%#v", this.Constant) + `}`}, ", ")
	return s
}
func (this *ScalarExpression_Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.ScalarExpression_Column{` +
		`Column:` + fmt.Sprintf("%#v", this.Column) + `}`}, ", ")
	return s
}
func (this *ScalarExpression_Func) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.ScalarExpression_Func{` +
		`Func:` + fmt.Sprintf("%#v", this.Func) + `}`}, ", ")
	return s
}
func (this *ScalarValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&planpb.ScalarValue{")
	s = append(s, "DataType: "+fmt.Sprintf("%#v", this.DataType)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScalarValue_BoolValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.ScalarValue_BoolValue{` +
		`BoolValue:` + fmt.Sprintf("%#v", this.BoolValue) + `}`}, ", ")
	return s
}
func (this *ScalarValue_Int64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.ScalarValue_Int64Value{` +
		`Int64Value:` + fmt.Sprintf("%#v", this.Int64Value) + `}`}, ", ")
	return s
}
func (this *ScalarValue_Float64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.ScalarValue_Float64Value{` +
		`Float64Value:` + fmt.Sprintf("%#v", this.Float64Value) + `}`}, ", ")
	return s
}
func (this *ScalarValue_StringValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.ScalarValue_StringValue{` +
		`StringValue:` + fmt.Sprintf("%#v", this.StringValue) + `}`}, ", ")
	return s
}
func (this *ScalarValue_Time64NsValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.ScalarValue_Time64NsValue{` +
		`Time64NsValue:` + fmt.Sprintf("%#v", this.Time64NsValue) + `}`}, ", ")
	return s
}
func (this *ScalarFunc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&planpb.ScalarFunc{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.InitArgs != nil {
		s = append(s, "InitArgs: "+fmt.Sprintf("%#v", this.InitArgs)+",\n")
	}
	if this.Args != nil {
		s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ArgsDataTypes: "+fmt.Sprintf("%#v", this.ArgsDataTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AggregateExpression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&planpb.AggregateExpression{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.InitArgs != nil {
		s = append(s, "InitArgs: "+fmt.Sprintf("%#v", this.InitArgs)+",\n")
	}
	if this.Args != nil {
		s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ArgsDataTypes: "+fmt.Sprintf("%#v", this.ArgsDataTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AggregateExpression_Arg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&planpb.AggregateExpression_Arg{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AggregateExpression_Arg_Constant) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.AggregateExpression_Arg_Constant{` +
		`Constant:` + fmt.Sprintf("%#v", this.Constant) + `}`}, ", ")
	return s
}
func (this *AggregateExpression_Arg_Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&planpb.AggregateExpression_Arg_Column{` +
		`Column:` + fmt.Sprintf("%#v", this.Column) + `}`}, ", ")
	return s
}
func (this *Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&planpb.Column{")
	s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPlan(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dag != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Dag.Size()))
		n1, err := m.Dag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlanFragment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanFragment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Id))
	}
	if m.Dag != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Dag.Size()))
		n2, err := m.Dag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DAG) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DAG) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DAG_DAGNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DAG_DAGNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Id))
	}
	if len(m.SortedDeps) > 0 {
		dAtA4 := make([]byte, len(m.SortedDeps)*10)
		var j3 int
		for _, num := range m.SortedDeps {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *PlanNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Id))
	}
	if m.Op != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Op.Size()))
		n5, err := m.Op.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *Operator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.OpType))
	}
	if m.Op != nil {
		nn6, err := m.Op.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *Operator_MemSourceOp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MemSourceOp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.MemSourceOp.Size()))
		n7, err := m.MemSourceOp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Operator_MapOp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MapOp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.MapOp.Size()))
		n8, err := m.MapOp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Operator_BlockingAggOp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BlockingAggOp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.BlockingAggOp.Size()))
		n9, err := m.BlockingAggOp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Operator_MemSinkOp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MemSinkOp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.MemSinkOp.Size()))
		n10, err := m.MemSinkOp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Operator_FilterOp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FilterOp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.FilterOp.Size()))
		n11, err := m.FilterOp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Operator_LimitOp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LimitOp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.LimitOp.Size()))
		n12, err := m.LimitOp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Operator_ZipOp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ZipOp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.ZipOp.Size()))
		n13, err := m.ZipOp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *MemorySourceOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemorySourceOperator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ColumnIdxs) > 0 {
		dAtA15 := make([]byte, len(m.ColumnIdxs)*10)
		var j14 int
		for _, num1 := range m.ColumnIdxs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ColumnTypes) > 0 {
		dAtA17 := make([]byte, len(m.ColumnTypes)*10)
		var j16 int
		for _, num := range m.ColumnTypes {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlan(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if m.StartTime != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.StartTime.Size()))
		n18, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.StopTime != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.StopTime.Size()))
		n19, err := m.StopTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *MemorySinkOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemorySinkOperator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ColumnTypes) > 0 {
		dAtA21 := make([]byte, len(m.ColumnTypes)*10)
		var j20 int
		for _, num := range m.ColumnTypes {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(j20))
		i += copy(dAtA[i:], dAtA21[:j20])
	}
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MapOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapOperator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Expressions) > 0 {
		for _, msg := range m.Expressions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *BlockingAggregateOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockingAggregateOperator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GroupNames) > 0 {
		for _, s := range m.GroupNames {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ValueNames) > 0 {
		for _, s := range m.ValueNames {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *FilterOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterOperator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Expression != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Expression.Size()))
		n22, err := m.Expression.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LimitOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOperator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Limit))
	}
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ZipOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZipOperator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ColumnMappings) > 0 {
		for _, msg := range m.ColumnMappings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ZipOperator_ColumnMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZipOperator_ColumnMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OutputColumnIndexes) > 0 {
		dAtA24 := make([]byte, len(m.OutputColumnIndexes)*10)
		var j23 int
		for _, num1 := range m.OutputColumnIndexes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(j23))
		i += copy(dAtA[i:], dAtA24[:j23])
	}
	if m.HasTimeColumn {
		dAtA[i] = 0x10
		i++
		if m.HasTimeColumn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TimeColumnIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.TimeColumnIndex))
	}
	return i, nil
}

func (m *ScalarExpression) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScalarExpression) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn25, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn25
	}
	return i, nil
}

func (m *ScalarExpression_Constant) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Constant != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Constant.Size()))
		n26, err := m.Constant.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *ScalarExpression_Column) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Column != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Column.Size()))
		n27, err := m.Column.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *ScalarExpression_Func) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Func != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Func.Size()))
		n28, err := m.Func.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *ScalarValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScalarValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.DataType))
	}
	if m.Value != nil {
		nn29, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn29
	}
	return i, nil
}

func (m *ScalarValue_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ScalarValue_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintPlan(dAtA, i, uint64(m.Int64Value))
	return i, nil
}
func (m *ScalarValue_Float64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x21
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float64Value))))
	i += 8
	return i, nil
}
func (m *ScalarValue_StringValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPlan(dAtA, i, uint64(len(m.StringValue)))
	i += copy(dAtA[i:], m.StringValue)
	return i, nil
}
func (m *ScalarValue_Time64NsValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	i = encodeVarintPlan(dAtA, i, uint64(m.Time64NsValue))
	return i, nil
}
func (m *ScalarFunc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScalarFunc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.InitArgs) > 0 {
		for _, msg := range m.InitArgs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Args) > 0 {
		for _, msg := range m.Args {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Id))
	}
	if len(m.ArgsDataTypes) > 0 {
		dAtA31 := make([]byte, len(m.ArgsDataTypes)*10)
		var j30 int
		for _, num := range m.ArgsDataTypes {
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(j30))
		i += copy(dAtA[i:], dAtA31[:j30])
	}
	return i, nil
}

func (m *AggregateExpression) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateExpression) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.InitArgs) > 0 {
		for _, msg := range m.InitArgs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Args) > 0 {
		for _, msg := range m.Args {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Id))
	}
	if len(m.ArgsDataTypes) > 0 {
		dAtA33 := make([]byte, len(m.ArgsDataTypes)*10)
		var j32 int
		for _, num := range m.ArgsDataTypes {
			for num >= 1<<7 {
				dAtA33[j32] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j32++
			}
			dAtA33[j32] = uint8(num)
			j32++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPlan(dAtA, i, uint64(j32))
		i += copy(dAtA[i:], dAtA33[:j32])
	}
	return i, nil
}

func (m *AggregateExpression_Arg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateExpression_Arg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn34, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn34
	}
	return i, nil
}

func (m *AggregateExpression_Arg_Constant) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Constant != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Constant.Size()))
		n35, err := m.Constant.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *AggregateExpression_Arg_Column) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Column != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Column.Size()))
		n36, err := m.Column.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Node))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPlan(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func encodeVarintPlan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Plan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dag != nil {
		l = m.Dag.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	return n
}

func (m *PlanFragment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlan(uint64(m.Id))
	}
	if m.Dag != nil {
		l = m.Dag.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	return n
}

func (m *DAG) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	return n
}

func (m *DAG_DAGNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlan(uint64(m.Id))
	}
	if len(m.SortedDeps) > 0 {
		l = 0
		for _, e := range m.SortedDeps {
			l += sovPlan(uint64(e))
		}
		n += 1 + sovPlan(uint64(l)) + l
	}
	return n
}

func (m *PlanNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlan(uint64(m.Id))
	}
	if m.Op != nil {
		l = m.Op.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}

func (m *Operator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpType != 0 {
		n += 1 + sovPlan(uint64(m.OpType))
	}
	if m.Op != nil {
		n += m.Op.Size()
	}
	return n
}

func (m *Operator_MemSourceOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemSourceOp != nil {
		l = m.MemSourceOp.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *Operator_MapOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapOp != nil {
		l = m.MapOp.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *Operator_BlockingAggOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockingAggOp != nil {
		l = m.BlockingAggOp.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *Operator_MemSinkOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemSinkOp != nil {
		l = m.MemSinkOp.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *Operator_FilterOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterOp != nil {
		l = m.FilterOp.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *Operator_LimitOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LimitOp != nil {
		l = m.LimitOp.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *Operator_ZipOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZipOp != nil {
		l = m.ZipOp.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *MemorySourceOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.ColumnIdxs) > 0 {
		l = 0
		for _, e := range m.ColumnIdxs {
			l += sovPlan(uint64(e))
		}
		n += 1 + sovPlan(uint64(l)) + l
	}
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			l = len(s)
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if len(m.ColumnTypes) > 0 {
		l = 0
		for _, e := range m.ColumnTypes {
			l += sovPlan(uint64(e))
		}
		n += 1 + sovPlan(uint64(l)) + l
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	if m.StopTime != nil {
		l = m.StopTime.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}

func (m *MemorySinkOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.ColumnTypes) > 0 {
		l = 0
		for _, e := range m.ColumnTypes {
			l += sovPlan(uint64(e))
		}
		n += 1 + sovPlan(uint64(l)) + l
	}
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			l = len(s)
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	return n
}

func (m *MapOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Expressions) > 0 {
		for _, e := range m.Expressions {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			l = len(s)
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	return n
}

func (m *BlockingAggregateOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if len(m.GroupNames) > 0 {
		for _, s := range m.GroupNames {
			l = len(s)
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if len(m.ValueNames) > 0 {
		for _, s := range m.ValueNames {
			l = len(s)
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	return n
}

func (m *FilterOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expression != nil {
		l = m.Expression.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	return n
}

func (m *LimitOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovPlan(uint64(m.Limit))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	return n
}

func (m *ZipOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ColumnNames) > 0 {
		for _, s := range m.ColumnNames {
			l = len(s)
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if len(m.ColumnMappings) > 0 {
		for _, e := range m.ColumnMappings {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	return n
}

func (m *ZipOperator_ColumnMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutputColumnIndexes) > 0 {
		l = 0
		for _, e := range m.OutputColumnIndexes {
			l += sovPlan(uint64(e))
		}
		n += 1 + sovPlan(uint64(l)) + l
	}
	if m.HasTimeColumn {
		n += 2
	}
	if m.TimeColumnIndex != 0 {
		n += 1 + sovPlan(uint64(m.TimeColumnIndex))
	}
	return n
}

func (m *ScalarExpression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *ScalarExpression_Constant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constant != nil {
		l = m.Constant.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *ScalarExpression_Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Column != nil {
		l = m.Column.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *ScalarExpression_Func) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Func != nil {
		l = m.Func.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *ScalarValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovPlan(uint64(m.DataType))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *ScalarValue_BoolValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ScalarValue_Int64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPlan(uint64(m.Int64Value))
	return n
}
func (m *ScalarValue_Float64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *ScalarValue_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovPlan(uint64(l))
	return n
}
func (m *ScalarValue_Time64NsValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPlan(uint64(m.Time64NsValue))
	return n
}
func (m *ScalarFunc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.InitArgs) > 0 {
		for _, e := range m.InitArgs {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if m.Id != 0 {
		n += 1 + sovPlan(uint64(m.Id))
	}
	if len(m.ArgsDataTypes) > 0 {
		l = 0
		for _, e := range m.ArgsDataTypes {
			l += sovPlan(uint64(e))
		}
		n += 1 + sovPlan(uint64(l)) + l
	}
	return n
}

func (m *AggregateExpression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlan(uint64(l))
	}
	if len(m.InitArgs) > 0 {
		for _, e := range m.InitArgs {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovPlan(uint64(l))
		}
	}
	if m.Id != 0 {
		n += 1 + sovPlan(uint64(m.Id))
	}
	if len(m.ArgsDataTypes) > 0 {
		l = 0
		for _, e := range m.ArgsDataTypes {
			l += sovPlan(uint64(e))
		}
		n += 1 + sovPlan(uint64(l)) + l
	}
	return n
}

func (m *AggregateExpression_Arg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *AggregateExpression_Arg_Constant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constant != nil {
		l = m.Constant.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *AggregateExpression_Arg_Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Column != nil {
		l = m.Column.Size()
		n += 1 + l + sovPlan(uint64(l))
	}
	return n
}
func (m *Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != 0 {
		n += 1 + sovPlan(uint64(m.Node))
	}
	if m.Index != 0 {
		n += 1 + sovPlan(uint64(m.Index))
	}
	return n
}

func sovPlan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPlan(x uint64) (n int) {
	return sovPlan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Plan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Plan{`,
		`Dag:` + strings.Replace(fmt.Sprintf("%v", this.Dag), "DAG", "DAG", 1) + `,`,
		`Nodes:` + strings.Replace(fmt.Sprintf("%v", this.Nodes), "PlanFragment", "PlanFragment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlanFragment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlanFragment{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Dag:` + strings.Replace(fmt.Sprintf("%v", this.Dag), "DAG", "DAG", 1) + `,`,
		`Nodes:` + strings.Replace(fmt.Sprintf("%v", this.Nodes), "PlanNode", "PlanNode", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DAG) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DAG{`,
		`Nodes:` + strings.Replace(fmt.Sprintf("%v", this.Nodes), "DAG_DAGNode", "DAG_DAGNode", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DAG_DAGNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DAG_DAGNode{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SortedDeps:` + fmt.Sprintf("%v", this.SortedDeps) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlanNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlanNode{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Op:` + strings.Replace(fmt.Sprintf("%v", this.Op), "Operator", "Operator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Operator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Operator{`,
		`OpType:` + fmt.Sprintf("%v", this.OpType) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Operator_MemSourceOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Operator_MemSourceOp{`,
		`MemSourceOp:` + strings.Replace(fmt.Sprintf("%v", this.MemSourceOp), "MemorySourceOperator", "MemorySourceOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Operator_MapOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Operator_MapOp{`,
		`MapOp:` + strings.Replace(fmt.Sprintf("%v", this.MapOp), "MapOperator", "MapOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Operator_BlockingAggOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Operator_BlockingAggOp{`,
		`BlockingAggOp:` + strings.Replace(fmt.Sprintf("%v", this.BlockingAggOp), "BlockingAggregateOperator", "BlockingAggregateOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Operator_MemSinkOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Operator_MemSinkOp{`,
		`MemSinkOp:` + strings.Replace(fmt.Sprintf("%v", this.MemSinkOp), "MemorySinkOperator", "MemorySinkOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Operator_FilterOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Operator_FilterOp{`,
		`FilterOp:` + strings.Replace(fmt.Sprintf("%v", this.FilterOp), "FilterOperator", "FilterOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Operator_LimitOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Operator_LimitOp{`,
		`LimitOp:` + strings.Replace(fmt.Sprintf("%v", this.LimitOp), "LimitOperator", "LimitOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Operator_ZipOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Operator_ZipOp{`,
		`ZipOp:` + strings.Replace(fmt.Sprintf("%v", this.ZipOp), "ZipOperator", "ZipOperator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MemorySourceOperator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MemorySourceOperator{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ColumnIdxs:` + fmt.Sprintf("%v", this.ColumnIdxs) + `,`,
		`ColumnNames:` + fmt.Sprintf("%v", this.ColumnNames) + `,`,
		`ColumnTypes:` + fmt.Sprintf("%v", this.ColumnTypes) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Int64Value", "types.Int64Value", 1) + `,`,
		`StopTime:` + strings.Replace(fmt.Sprintf("%v", this.StopTime), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MemorySinkOperator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MemorySinkOperator{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ColumnTypes:` + fmt.Sprintf("%v", this.ColumnTypes) + `,`,
		`ColumnNames:` + fmt.Sprintf("%v", this.ColumnNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MapOperator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MapOperator{`,
		`Expressions:` + strings.Replace(fmt.Sprintf("%v", this.Expressions), "ScalarExpression", "ScalarExpression", 1) + `,`,
		`ColumnNames:` + fmt.Sprintf("%v", this.ColumnNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockingAggregateOperator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockingAggregateOperator{`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "AggregateExpression", "AggregateExpression", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Column", "Column", 1) + `,`,
		`GroupNames:` + fmt.Sprintf("%v", this.GroupNames) + `,`,
		`ValueNames:` + fmt.Sprintf("%v", this.ValueNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilterOperator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilterOperator{`,
		`Expression:` + strings.Replace(fmt.Sprintf("%v", this.Expression), "ScalarExpression", "ScalarExpression", 1) + `,`,
		`Columns:` + strings.Replace(fmt.Sprintf("%v", this.Columns), "Column", "Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LimitOperator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LimitOperator{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Columns:` + strings.Replace(fmt.Sprintf("%v", this.Columns), "Column", "Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZipOperator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZipOperator{`,
		`ColumnNames:` + fmt.Sprintf("%v", this.ColumnNames) + `,`,
		`ColumnMappings:` + strings.Replace(fmt.Sprintf("%v", this.ColumnMappings), "ZipOperator_ColumnMapping", "ZipOperator_ColumnMapping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ZipOperator_ColumnMapping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ZipOperator_ColumnMapping{`,
		`OutputColumnIndexes:` + fmt.Sprintf("%v", this.OutputColumnIndexes) + `,`,
		`HasTimeColumn:` + fmt.Sprintf("%v", this.HasTimeColumn) + `,`,
		`TimeColumnIndex:` + fmt.Sprintf("%v", this.TimeColumnIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarExpression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarExpression{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarExpression_Constant) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarExpression_Constant{`,
		`Constant:` + strings.Replace(fmt.Sprintf("%v", this.Constant), "ScalarValue", "ScalarValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarExpression_Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarExpression_Column{`,
		`Column:` + strings.Replace(fmt.Sprintf("%v", this.Column), "Column", "Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarExpression_Func) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarExpression_Func{`,
		`Func:` + strings.Replace(fmt.Sprintf("%v", this.Func), "ScalarFunc", "ScalarFunc", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue{`,
		`DataType:` + fmt.Sprintf("%v", this.DataType) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_BoolValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_BoolValue{`,
		`BoolValue:` + fmt.Sprintf("%v", this.BoolValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_Int64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_Int64Value{`,
		`Int64Value:` + fmt.Sprintf("%v", this.Int64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_Float64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_Float64Value{`,
		`Float64Value:` + fmt.Sprintf("%v", this.Float64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_StringValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_StringValue{`,
		`StringValue:` + fmt.Sprintf("%v", this.StringValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarValue_Time64NsValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarValue_Time64NsValue{`,
		`Time64NsValue:` + fmt.Sprintf("%v", this.Time64NsValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarFunc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarFunc{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`InitArgs:` + strings.Replace(fmt.Sprintf("%v", this.InitArgs), "ScalarValue", "ScalarValue", 1) + `,`,
		`Args:` + strings.Replace(fmt.Sprintf("%v", this.Args), "ScalarExpression", "ScalarExpression", 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ArgsDataTypes:` + fmt.Sprintf("%v", this.ArgsDataTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregateExpression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregateExpression{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`InitArgs:` + strings.Replace(fmt.Sprintf("%v", this.InitArgs), "ScalarValue", "ScalarValue", 1) + `,`,
		`Args:` + strings.Replace(fmt.Sprintf("%v", this.Args), "AggregateExpression_Arg", "AggregateExpression_Arg", 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ArgsDataTypes:` + fmt.Sprintf("%v", this.ArgsDataTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregateExpression_Arg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregateExpression_Arg{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregateExpression_Arg_Constant) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregateExpression_Arg_Constant{`,
		`Constant:` + strings.Replace(fmt.Sprintf("%v", this.Constant), "ScalarValue", "ScalarValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregateExpression_Arg_Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregateExpression_Arg_Column{`,
		`Column:` + strings.Replace(fmt.Sprintf("%v", this.Column), "Column", "Column", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column{`,
		`Node:` + fmt.Sprintf("%v", this.Node) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPlan(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dag == nil {
				m.Dag = &DAG{}
			}
			if err := m.Dag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &PlanFragment{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlanFragment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanFragment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanFragment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dag == nil {
				m.Dag = &DAG{}
			}
			if err := m.Dag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &PlanNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DAG) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DAG: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DAG: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &DAG_DAGNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DAG_DAGNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DAGNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DAGNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SortedDeps = append(m.SortedDeps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlan
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlan
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SortedDeps) == 0 {
					m.SortedDeps = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SortedDeps = append(m.SortedDeps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SortedDeps", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlanNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Op == nil {
				m.Op = &Operator{}
			}
			if err := m.Op.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= OperatorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemSourceOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MemorySourceOperator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operator_MemSourceOp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MapOperator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operator_MapOp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingAggOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BlockingAggregateOperator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operator_BlockingAggOp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemSinkOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MemorySinkOperator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operator_MemSinkOp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FilterOperator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operator_FilterOp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LimitOperator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operator_LimitOp{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipOp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ZipOperator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operator_ZipOp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemorySourceOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemorySourceOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemorySourceOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnIdxs = append(m.ColumnIdxs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlan
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlan
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ColumnIdxs) == 0 {
					m.ColumnIdxs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnIdxs = append(m.ColumnIdxs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIdxs", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnNames = append(m.ColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v proto1.DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= proto1.DataType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnTypes = append(m.ColumnTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlan
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlan
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ColumnTypes) == 0 {
					m.ColumnTypes = make([]proto1.DataType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v proto1.DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= proto1.DataType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnTypes = append(m.ColumnTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnTypes", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Int64Value{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StopTime == nil {
				m.StopTime = &types.Int64Value{}
			}
			if err := m.StopTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemorySinkOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemorySinkOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemorySinkOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v proto1.DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= proto1.DataType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ColumnTypes = append(m.ColumnTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlan
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlan
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ColumnTypes) == 0 {
					m.ColumnTypes = make([]proto1.DataType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v proto1.DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= proto1.DataType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ColumnTypes = append(m.ColumnTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnTypes", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnNames = append(m.ColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expressions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expressions = append(m.Expressions, &ScalarExpression{})
			if err := m.Expressions[len(m.Expressions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnNames = append(m.ColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockingAggregateOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockingAggregateOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockingAggregateOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &AggregateExpression{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Column{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupNames = append(m.GroupNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueNames = append(m.ValueNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expression == nil {
				m.Expression = &ScalarExpression{}
			}
			if err := m.Expression.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Column{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Column{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZipOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZipOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZipOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnNames = append(m.ColumnNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnMappings = append(m.ColumnMappings, &ZipOperator_ColumnMapping{})
			if err := m.ColumnMappings[len(m.ColumnMappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZipOperator_ColumnMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OutputColumnIndexes = append(m.OutputColumnIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlan
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlan
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OutputColumnIndexes) == 0 {
					m.OutputColumnIndexes = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OutputColumnIndexes = append(m.OutputColumnIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputColumnIndexes", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasTimeColumn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasTimeColumn = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeColumnIndex", wireType)
			}
			m.TimeColumnIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeColumnIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScalarExpression) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScalarExpression: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScalarExpression: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScalarValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ScalarExpression_Constant{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Column{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ScalarExpression_Column{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScalarFunc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ScalarExpression_Func{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScalarValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScalarValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScalarValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= proto1.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &ScalarValue_BoolValue{b}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &ScalarValue_Int64Value{v}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &ScalarValue_Float64Value{float64(math.Float64frombits(v))}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &ScalarValue_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time64NsValue", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &ScalarValue_Time64NsValue{v}
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScalarFunc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScalarFunc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScalarFunc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitArgs = append(m.InitArgs, &ScalarValue{})
			if err := m.InitArgs[len(m.InitArgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &ScalarExpression{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v proto1.DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= proto1.DataType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ArgsDataTypes = append(m.ArgsDataTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlan
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlan
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ArgsDataTypes) == 0 {
					m.ArgsDataTypes = make([]proto1.DataType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v proto1.DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= proto1.DataType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ArgsDataTypes = append(m.ArgsDataTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgsDataTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateExpression) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateExpression: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateExpression: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitArgs = append(m.InitArgs, &ScalarValue{})
			if err := m.InitArgs[len(m.InitArgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &AggregateExpression_Arg{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v proto1.DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= proto1.DataType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ArgsDataTypes = append(m.ArgsDataTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlan
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlan
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ArgsDataTypes) == 0 {
					m.ArgsDataTypes = make([]proto1.DataType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v proto1.DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= proto1.DataType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ArgsDataTypes = append(m.ArgsDataTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgsDataTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateExpression_Arg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScalarValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AggregateExpression_Arg_Constant{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Column{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AggregateExpression_Arg_Column{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			m.Node = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Node |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlan
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPlan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPlan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPlan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPlan
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPlan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlan   = fmt.Errorf("proto: integer overflow")
)
