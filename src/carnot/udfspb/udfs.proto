syntax = "proto3";
import "src/shared/types/proto/types.proto";
import "src/table_store/proto/schema.proto";
import "src/carnot/planpb/plan.proto";

package pl.carnot.udfspb;

option go_package = "udfspb";

// UDASpec stores the specification of a single UDA.
message UDASpec {
  // The name of the function.
  string name = 1;
  // Will be an empty list if there is no init function.
  repeated pl.types.DataType init_arg_types = 2;
  // The argument types of the update function. UDAs are allowed to overload based on
  // these types.
  repeated pl.types.DataType update_arg_types = 3;
  // The argument types of the finalize return.
  pl.types.DataType finalize_type = 4;
}

// ScalarUDFSpec stores the specification of a single UDF.
message ScalarUDFSpec {
  // The name of the function.
  string name = 1;
  // Will be an empty list if there is no init function.
  repeated pl.types.DataType init_arg_types = 2;
  // The argument types of the exec args. UDFs are allowed to overload based on
  // these types.
  repeated pl.types.DataType exec_arg_types = 3;
  // The return type of the exec function.
  pl.types.DataType return_type = 4;
}

// UDFInfo stores all the registered UDF/UDAs in the system.
message UDFInfo {
  // A list of the UDAs.
  repeated UDASpec udas = 1;
  // A list of the ScalarUDFs.
  repeated ScalarUDFSpec scalar_udfs = 2;
  // A description of the UDTFs.
  repeated UDTFSourceSpec udtfs = 3;
  // A list of type inference rules for semantic types.
  repeated SemanticInferenceRule semantic_type_rules = 4;
}

// The type of the table func to write.
enum UDTFSourceExecutor {
  UDTF_UNSPECIFIED = 0;
  UDTF_ALL_AGENTS = 1;
  UDTF_ALL_PEM = 2;
  UDTF_ALL_KELVIN = 3;
  UDTF_SUBSET_PEM = 4;
  UDTF_SUBSET_KELVIN = 5;
  UDTF_ONE_KELVIN = 6;
}

// UDTFSourceSpec stores the information necessary to execute a UDTFSource.
message UDTFSourceSpec {
  // Argument object that contains name, and arg_type and the list.
  message Arg {
    string name = 1;
    pl.types.DataType arg_type = 2;
    pl.types.SemanticType semantic_type = 3;
    // Optional value.
    pl.carnot.planpb.ScalarValue default_value = 4;
  }

  // Name of the UDTFSource.
  string name = 1;
  // The types of the arguments of the UDTFSource. Must be the same length as arg_names.
  repeated Arg args = 2;
  // Which agents the table function should execute on.
  UDTFSourceExecutor executor = 3;
  // The relation that this UDTF generates.
  pl.table_store.schemapb.Relation relation = 4;
}

enum UDFExecType {
  SCALAR_UDF = 0;
  UDA = 1;
}

message SemanticInferenceRule {
  string name = 1;
  UDFExecType udf_exec_type = 2;
  // Note that for all arg types (init, update or exec), ST_UNSPECIFIED will match any semantic type.
  repeated pl.types.SemanticType init_arg_types = 3;
  // If this applies to a UDA then this will only have update_arg_types.
  // If it applies to a UDF then this will only have exec_arg_types.
  repeated pl.types.SemanticType update_arg_types = 4;
  repeated pl.types.SemanticType exec_arg_types = 5;

  // This might turn into a repeated or something in the future, if we support non-scalar udfs/udas.
  pl.types.SemanticType output_type = 6;
}
