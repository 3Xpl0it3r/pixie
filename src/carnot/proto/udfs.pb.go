// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/carnot/proto/udfs.proto

package carnotpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "pixielabs.ai/pixielabs/src/carnot/proto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UDASpec struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InitArgTypes         []proto1.DataType `protobuf:"varint,2,rep,packed,name=init_arg_types,json=initArgTypes,enum=pl.carnot.carnotpb.DataType" json:"init_arg_types,omitempty"`
	UpdateArgTypes       []proto1.DataType `protobuf:"varint,3,rep,packed,name=update_arg_types,json=updateArgTypes,enum=pl.carnot.carnotpb.DataType" json:"update_arg_types,omitempty"`
	FinalizeType         proto1.DataType   `protobuf:"varint,4,opt,name=finalize_type,json=finalizeType,proto3,enum=pl.carnot.carnotpb.DataType" json:"finalize_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UDASpec) Reset()      { *m = UDASpec{} }
func (*UDASpec) ProtoMessage() {}
func (*UDASpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_udfs_61ddd779d402f111, []int{0}
}
func (m *UDASpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UDASpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UDASpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UDASpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDASpec.Merge(dst, src)
}
func (m *UDASpec) XXX_Size() int {
	return m.Size()
}
func (m *UDASpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UDASpec.DiscardUnknown(m)
}

var xxx_messageInfo_UDASpec proto.InternalMessageInfo

func (m *UDASpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UDASpec) GetInitArgTypes() []proto1.DataType {
	if m != nil {
		return m.InitArgTypes
	}
	return nil
}

func (m *UDASpec) GetUpdateArgTypes() []proto1.DataType {
	if m != nil {
		return m.UpdateArgTypes
	}
	return nil
}

func (m *UDASpec) GetFinalizeType() proto1.DataType {
	if m != nil {
		return m.FinalizeType
	}
	return proto1.DATA_TYPE_UNKNOWN
}

type ScalarUDFSpec struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InitArgTypes         []proto1.DataType `protobuf:"varint,2,rep,packed,name=init_arg_types,json=initArgTypes,enum=pl.carnot.carnotpb.DataType" json:"init_arg_types,omitempty"`
	ExecArgTypes         []proto1.DataType `protobuf:"varint,3,rep,packed,name=exec_arg_types,json=execArgTypes,enum=pl.carnot.carnotpb.DataType" json:"exec_arg_types,omitempty"`
	ReturnType           proto1.DataType   `protobuf:"varint,4,opt,name=return_type,json=returnType,proto3,enum=pl.carnot.carnotpb.DataType" json:"return_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ScalarUDFSpec) Reset()      { *m = ScalarUDFSpec{} }
func (*ScalarUDFSpec) ProtoMessage() {}
func (*ScalarUDFSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_udfs_61ddd779d402f111, []int{1}
}
func (m *ScalarUDFSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScalarUDFSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScalarUDFSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ScalarUDFSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalarUDFSpec.Merge(dst, src)
}
func (m *ScalarUDFSpec) XXX_Size() int {
	return m.Size()
}
func (m *ScalarUDFSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalarUDFSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ScalarUDFSpec proto.InternalMessageInfo

func (m *ScalarUDFSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScalarUDFSpec) GetInitArgTypes() []proto1.DataType {
	if m != nil {
		return m.InitArgTypes
	}
	return nil
}

func (m *ScalarUDFSpec) GetExecArgTypes() []proto1.DataType {
	if m != nil {
		return m.ExecArgTypes
	}
	return nil
}

func (m *ScalarUDFSpec) GetReturnType() proto1.DataType {
	if m != nil {
		return m.ReturnType
	}
	return proto1.DATA_TYPE_UNKNOWN
}

type UDFInfo struct {
	Udas                 []*UDASpec       `protobuf:"bytes,1,rep,name=udas" json:"udas,omitempty"`
	ScalarUdfs           []*ScalarUDFSpec `protobuf:"bytes,2,rep,name=scalar_udfs,json=scalarUdfs" json:"scalar_udfs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UDFInfo) Reset()      { *m = UDFInfo{} }
func (*UDFInfo) ProtoMessage() {}
func (*UDFInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_udfs_61ddd779d402f111, []int{2}
}
func (m *UDFInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UDFInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UDFInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UDFInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDFInfo.Merge(dst, src)
}
func (m *UDFInfo) XXX_Size() int {
	return m.Size()
}
func (m *UDFInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UDFInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UDFInfo proto.InternalMessageInfo

func (m *UDFInfo) GetUdas() []*UDASpec {
	if m != nil {
		return m.Udas
	}
	return nil
}

func (m *UDFInfo) GetScalarUdfs() []*ScalarUDFSpec {
	if m != nil {
		return m.ScalarUdfs
	}
	return nil
}

func init() {
	proto.RegisterType((*UDASpec)(nil), "pl.carnot.carnotpb.UDASpec")
	proto.RegisterType((*ScalarUDFSpec)(nil), "pl.carnot.carnotpb.ScalarUDFSpec")
	proto.RegisterType((*UDFInfo)(nil), "pl.carnot.carnotpb.UDFInfo")
}
func (this *UDASpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDASpec)
	if !ok {
		that2, ok := that.(UDASpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.InitArgTypes) != len(that1.InitArgTypes) {
		return false
	}
	for i := range this.InitArgTypes {
		if this.InitArgTypes[i] != that1.InitArgTypes[i] {
			return false
		}
	}
	if len(this.UpdateArgTypes) != len(that1.UpdateArgTypes) {
		return false
	}
	for i := range this.UpdateArgTypes {
		if this.UpdateArgTypes[i] != that1.UpdateArgTypes[i] {
			return false
		}
	}
	if this.FinalizeType != that1.FinalizeType {
		return false
	}
	return true
}
func (this *ScalarUDFSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScalarUDFSpec)
	if !ok {
		that2, ok := that.(ScalarUDFSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.InitArgTypes) != len(that1.InitArgTypes) {
		return false
	}
	for i := range this.InitArgTypes {
		if this.InitArgTypes[i] != that1.InitArgTypes[i] {
			return false
		}
	}
	if len(this.ExecArgTypes) != len(that1.ExecArgTypes) {
		return false
	}
	for i := range this.ExecArgTypes {
		if this.ExecArgTypes[i] != that1.ExecArgTypes[i] {
			return false
		}
	}
	if this.ReturnType != that1.ReturnType {
		return false
	}
	return true
}
func (this *UDFInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDFInfo)
	if !ok {
		that2, ok := that.(UDFInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Udas) != len(that1.Udas) {
		return false
	}
	for i := range this.Udas {
		if !this.Udas[i].Equal(that1.Udas[i]) {
			return false
		}
	}
	if len(this.ScalarUdfs) != len(that1.ScalarUdfs) {
		return false
	}
	for i := range this.ScalarUdfs {
		if !this.ScalarUdfs[i].Equal(that1.ScalarUdfs[i]) {
			return false
		}
	}
	return true
}
func (this *UDASpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&carnotpb.UDASpec{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "InitArgTypes: "+fmt.Sprintf("%#v", this.InitArgTypes)+",\n")
	s = append(s, "UpdateArgTypes: "+fmt.Sprintf("%#v", this.UpdateArgTypes)+",\n")
	s = append(s, "FinalizeType: "+fmt.Sprintf("%#v", this.FinalizeType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScalarUDFSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&carnotpb.ScalarUDFSpec{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "InitArgTypes: "+fmt.Sprintf("%#v", this.InitArgTypes)+",\n")
	s = append(s, "ExecArgTypes: "+fmt.Sprintf("%#v", this.ExecArgTypes)+",\n")
	s = append(s, "ReturnType: "+fmt.Sprintf("%#v", this.ReturnType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UDFInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&carnotpb.UDFInfo{")
	if this.Udas != nil {
		s = append(s, "Udas: "+fmt.Sprintf("%#v", this.Udas)+",\n")
	}
	if this.ScalarUdfs != nil {
		s = append(s, "ScalarUdfs: "+fmt.Sprintf("%#v", this.ScalarUdfs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUdfs(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UDASpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UDASpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUdfs(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.InitArgTypes) > 0 {
		dAtA2 := make([]byte, len(m.InitArgTypes)*10)
		var j1 int
		for _, num := range m.InitArgTypes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUdfs(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.UpdateArgTypes) > 0 {
		dAtA4 := make([]byte, len(m.UpdateArgTypes)*10)
		var j3 int
		for _, num := range m.UpdateArgTypes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUdfs(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.FinalizeType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUdfs(dAtA, i, uint64(m.FinalizeType))
	}
	return i, nil
}

func (m *ScalarUDFSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScalarUDFSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUdfs(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.InitArgTypes) > 0 {
		dAtA6 := make([]byte, len(m.InitArgTypes)*10)
		var j5 int
		for _, num := range m.InitArgTypes {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUdfs(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.ExecArgTypes) > 0 {
		dAtA8 := make([]byte, len(m.ExecArgTypes)*10)
		var j7 int
		for _, num := range m.ExecArgTypes {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUdfs(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.ReturnType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUdfs(dAtA, i, uint64(m.ReturnType))
	}
	return i, nil
}

func (m *UDFInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UDFInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Udas) > 0 {
		for _, msg := range m.Udas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUdfs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ScalarUdfs) > 0 {
		for _, msg := range m.ScalarUdfs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUdfs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintUdfs(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UDASpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUdfs(uint64(l))
	}
	if len(m.InitArgTypes) > 0 {
		l = 0
		for _, e := range m.InitArgTypes {
			l += sovUdfs(uint64(e))
		}
		n += 1 + sovUdfs(uint64(l)) + l
	}
	if len(m.UpdateArgTypes) > 0 {
		l = 0
		for _, e := range m.UpdateArgTypes {
			l += sovUdfs(uint64(e))
		}
		n += 1 + sovUdfs(uint64(l)) + l
	}
	if m.FinalizeType != 0 {
		n += 1 + sovUdfs(uint64(m.FinalizeType))
	}
	return n
}

func (m *ScalarUDFSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUdfs(uint64(l))
	}
	if len(m.InitArgTypes) > 0 {
		l = 0
		for _, e := range m.InitArgTypes {
			l += sovUdfs(uint64(e))
		}
		n += 1 + sovUdfs(uint64(l)) + l
	}
	if len(m.ExecArgTypes) > 0 {
		l = 0
		for _, e := range m.ExecArgTypes {
			l += sovUdfs(uint64(e))
		}
		n += 1 + sovUdfs(uint64(l)) + l
	}
	if m.ReturnType != 0 {
		n += 1 + sovUdfs(uint64(m.ReturnType))
	}
	return n
}

func (m *UDFInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Udas) > 0 {
		for _, e := range m.Udas {
			l = e.Size()
			n += 1 + l + sovUdfs(uint64(l))
		}
	}
	if len(m.ScalarUdfs) > 0 {
		for _, e := range m.ScalarUdfs {
			l = e.Size()
			n += 1 + l + sovUdfs(uint64(l))
		}
	}
	return n
}

func sovUdfs(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUdfs(x uint64) (n int) {
	return sovUdfs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UDASpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDASpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`InitArgTypes:` + fmt.Sprintf("%v", this.InitArgTypes) + `,`,
		`UpdateArgTypes:` + fmt.Sprintf("%v", this.UpdateArgTypes) + `,`,
		`FinalizeType:` + fmt.Sprintf("%v", this.FinalizeType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScalarUDFSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScalarUDFSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`InitArgTypes:` + fmt.Sprintf("%v", this.InitArgTypes) + `,`,
		`ExecArgTypes:` + fmt.Sprintf("%v", this.ExecArgTypes) + `,`,
		`ReturnType:` + fmt.Sprintf("%v", this.ReturnType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDFInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDFInfo{`,
		`Udas:` + strings.Replace(fmt.Sprintf("%v", this.Udas), "UDASpec", "UDASpec", 1) + `,`,
		`ScalarUdfs:` + strings.Replace(fmt.Sprintf("%v", this.ScalarUdfs), "ScalarUDFSpec", "ScalarUDFSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUdfs(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UDASpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UDASpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UDASpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUdfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v proto1.DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUdfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (proto1.DataType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InitArgTypes = append(m.InitArgTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUdfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUdfs
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v proto1.DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUdfs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (proto1.DataType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InitArgTypes = append(m.InitArgTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InitArgTypes", wireType)
			}
		case 3:
			if wireType == 0 {
				var v proto1.DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUdfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (proto1.DataType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UpdateArgTypes = append(m.UpdateArgTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUdfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUdfs
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v proto1.DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUdfs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (proto1.DataType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UpdateArgTypes = append(m.UpdateArgTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateArgTypes", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizeType", wireType)
			}
			m.FinalizeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizeType |= (proto1.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUdfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScalarUDFSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScalarUDFSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScalarUDFSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUdfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v proto1.DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUdfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (proto1.DataType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InitArgTypes = append(m.InitArgTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUdfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUdfs
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v proto1.DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUdfs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (proto1.DataType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InitArgTypes = append(m.InitArgTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InitArgTypes", wireType)
			}
		case 3:
			if wireType == 0 {
				var v proto1.DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUdfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (proto1.DataType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExecArgTypes = append(m.ExecArgTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUdfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUdfs
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v proto1.DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUdfs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (proto1.DataType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExecArgTypes = append(m.ExecArgTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecArgTypes", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnType", wireType)
			}
			m.ReturnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnType |= (proto1.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUdfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UDFInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UDFInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UDFInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdfs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Udas = append(m.Udas, &UDASpec{})
			if err := m.Udas[len(m.Udas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalarUdfs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdfs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScalarUdfs = append(m.ScalarUdfs, &ScalarUDFSpec{})
			if err := m.ScalarUdfs[len(m.ScalarUdfs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUdfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUdfs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUdfs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUdfs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUdfs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUdfs
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUdfs
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUdfs(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUdfs = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUdfs   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("src/carnot/proto/udfs.proto", fileDescriptor_udfs_61ddd779d402f111) }

var fileDescriptor_udfs_61ddd779d402f111 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0x87, 0x73, 0xb6, 0xf8, 0xe7, 0xd2, 0x06, 0xb9, 0x29, 0xd8, 0x72, 0xc4, 0x4e, 0x9d, 0x12,
	0xa8, 0xe0, 0xe6, 0xd0, 0x50, 0x0a, 0xae, 0xa9, 0x5d, 0x5c, 0xca, 0x35, 0xb9, 0x94, 0x40, 0x4d,
	0x8e, 0xcb, 0x05, 0xac, 0x83, 0xf8, 0x11, 0xfc, 0x18, 0x7e, 0x14, 0xc7, 0x8e, 0x8e, 0xf6, 0x5c,
	0x44, 0x1c, 0xfa, 0x11, 0x24, 0x97, 0xb4, 0x28, 0x2d, 0x58, 0x07, 0xa7, 0xbc, 0x2f, 0xc9, 0xf3,
	0xe4, 0x7e, 0xef, 0xbd, 0xb0, 0x91, 0x72, 0xdf, 0xf1, 0x09, 0x8f, 0x13, 0xe1, 0x30, 0x9e, 0x88,
	0xc4, 0xc9, 0x82, 0x30, 0xb5, 0x55, 0x89, 0x10, 0x9b, 0xda, 0xc5, 0xbb, 0xf2, 0xc1, 0xc6, 0x27,
	0xcd, 0x0d, 0x40, 0xcc, 0x18, 0x2d, 0x89, 0xd6, 0x27, 0x80, 0x07, 0xc3, 0x5e, 0x77, 0xc0, 0xa8,
	0x8f, 0x10, 0xac, 0xc6, 0xe4, 0x86, 0x9a, 0xc0, 0x02, 0xed, 0x23, 0x4f, 0xd5, 0xc8, 0x85, 0x46,
	0x14, 0x47, 0x62, 0x44, 0xf8, 0x64, 0xa4, 0x38, 0x73, 0xcf, 0xaa, 0xb4, 0x8d, 0x4e, 0xd3, 0xde,
	0xfc, 0x95, 0xdd, 0x23, 0x82, 0x5c, 0xcd, 0x18, 0xf5, 0x6a, 0x39, 0xd3, 0xe5, 0x93, 0xbc, 0x49,
	0x51, 0x1f, 0x1e, 0x67, 0x2c, 0x20, 0x82, 0x7e, 0xb3, 0x54, 0x76, 0xb0, 0x18, 0x05, 0xb5, 0xf6,
	0x74, 0x61, 0x3d, 0x8c, 0x62, 0x32, 0x8d, 0xee, 0xa8, 0xb2, 0x98, 0x55, 0x0b, 0xfc, 0x7e, 0x94,
	0x15, 0x92, 0x77, 0xad, 0x0f, 0x00, 0xeb, 0x03, 0x9f, 0x4c, 0x09, 0x1f, 0xf6, 0xfa, 0xff, 0x1a,
	0xda, 0x85, 0x06, 0xbd, 0xa5, 0xfe, 0x1f, 0x23, 0xd7, 0x72, 0x66, 0xed, 0xb8, 0x80, 0x3a, 0xa7,
	0x22, 0xe3, 0xf1, 0xee, 0x71, 0x61, 0x01, 0xa8, 0xb0, 0xf7, 0xf9, 0xd5, 0xf6, 0x2f, 0xe3, 0x30,
	0x41, 0x0e, 0xac, 0x66, 0x01, 0x49, 0x4d, 0x60, 0x55, 0xda, 0x7a, 0xa7, 0xb1, 0x4d, 0x51, 0x6e,
	0x81, 0xa7, 0x3e, 0x44, 0x2e, 0xd4, 0x53, 0x35, 0xa7, 0x51, 0xbe, 0x5e, 0x2a, 0xbf, 0xde, 0x39,
	0xdd, 0xc6, 0xfd, 0x18, 0xa7, 0x07, 0x0b, 0x6a, 0x18, 0x84, 0xa9, 0x7b, 0x3e, 0x5f, 0x60, 0xed,
	0x65, 0x81, 0xb5, 0xe5, 0x02, 0x83, 0x07, 0x89, 0xc1, 0x93, 0xc4, 0xe0, 0x59, 0x62, 0x30, 0x97,
	0x18, 0xbc, 0x4a, 0x0c, 0xde, 0x25, 0xd6, 0x96, 0x12, 0x83, 0xc7, 0x37, 0xac, 0x5d, 0x1f, 0xae,
	0x8c, 0xe3, 0x7d, 0xb5, 0x9a, 0x67, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xce, 0xe3, 0x45, 0xd5,
	0xeb, 0x02, 0x00, 0x00,
}
