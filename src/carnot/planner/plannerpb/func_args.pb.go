// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/carnot/planner/plannerpb/func_args.proto

package plannerpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	planpb "pixielabs.ai/pixielabs/src/carnot/planpb"
	proto2 "pixielabs.ai/pixielabs/src/common/base/proto"
	proto1 "pixielabs.ai/pixielabs/src/shared/types/proto"
	ir "pixielabs.ai/pixielabs/src/stirling/dynamic_tracing/ir"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryRequest struct {
	QueryStr  string                        `protobuf:"bytes,1,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
	ExecFuncs []*QueryRequest_FuncToExecute `protobuf:"bytes,3,rep,name=exec_funcs,json=execFuncs,proto3" json:"exec_funcs,omitempty"`
}

func (m *QueryRequest) Reset()      { *m = QueryRequest{} }
func (*QueryRequest) ProtoMessage() {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{0}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

func (m *QueryRequest) GetExecFuncs() []*QueryRequest_FuncToExecute {
	if m != nil {
		return m.ExecFuncs
	}
	return nil
}

type QueryRequest_FuncToExecute struct {
	FuncName          string                                 `protobuf:"bytes,1,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	ArgValues         []*QueryRequest_FuncToExecute_ArgValue `protobuf:"bytes,2,rep,name=arg_values,json=argValues,proto3" json:"arg_values,omitempty"`
	OutputTablePrefix string                                 `protobuf:"bytes,3,opt,name=output_table_prefix,json=outputTablePrefix,proto3" json:"output_table_prefix,omitempty"`
}

func (m *QueryRequest_FuncToExecute) Reset()      { *m = QueryRequest_FuncToExecute{} }
func (*QueryRequest_FuncToExecute) ProtoMessage() {}
func (*QueryRequest_FuncToExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{0, 0}
}
func (m *QueryRequest_FuncToExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest_FuncToExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest_FuncToExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest_FuncToExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest_FuncToExecute.Merge(m, src)
}
func (m *QueryRequest_FuncToExecute) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest_FuncToExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest_FuncToExecute.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest_FuncToExecute proto.InternalMessageInfo

func (m *QueryRequest_FuncToExecute) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *QueryRequest_FuncToExecute) GetArgValues() []*QueryRequest_FuncToExecute_ArgValue {
	if m != nil {
		return m.ArgValues
	}
	return nil
}

func (m *QueryRequest_FuncToExecute) GetOutputTablePrefix() string {
	if m != nil {
		return m.OutputTablePrefix
	}
	return ""
}

type QueryRequest_FuncToExecute_ArgValue struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryRequest_FuncToExecute_ArgValue) Reset()      { *m = QueryRequest_FuncToExecute_ArgValue{} }
func (*QueryRequest_FuncToExecute_ArgValue) ProtoMessage() {}
func (*QueryRequest_FuncToExecute_ArgValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{0, 0, 0}
}
func (m *QueryRequest_FuncToExecute_ArgValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest_FuncToExecute_ArgValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest_FuncToExecute_ArgValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest_FuncToExecute_ArgValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest_FuncToExecute_ArgValue.Merge(m, src)
}
func (m *QueryRequest_FuncToExecute_ArgValue) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest_FuncToExecute_ArgValue) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest_FuncToExecute_ArgValue.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest_FuncToExecute_ArgValue proto.InternalMessageInfo

func (m *QueryRequest_FuncToExecute_ArgValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryRequest_FuncToExecute_ArgValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryFlagsSpec struct {
	Flags []*QueryFlagsSpec_Flag `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
}

func (m *QueryFlagsSpec) Reset()      { *m = QueryFlagsSpec{} }
func (*QueryFlagsSpec) ProtoMessage() {}
func (*QueryFlagsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{1}
}
func (m *QueryFlagsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlagsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlagsSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlagsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlagsSpec.Merge(m, src)
}
func (m *QueryFlagsSpec) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlagsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlagsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlagsSpec proto.InternalMessageInfo

func (m *QueryFlagsSpec) GetFlags() []*QueryFlagsSpec_Flag {
	if m != nil {
		return m.Flags
	}
	return nil
}

type QueryFlagsSpec_Flag struct {
	DataType     proto1.DataType     `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=pl.types.DataType" json:"data_type,omitempty"`
	SemanticType proto1.SemanticType `protobuf:"varint,2,opt,name=semantic_type,json=semanticType,proto3,enum=pl.types.SemanticType" json:"semantic_type,omitempty"`
	Name         string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description  string              `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DefaultValue *planpb.ScalarValue `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (m *QueryFlagsSpec_Flag) Reset()      { *m = QueryFlagsSpec_Flag{} }
func (*QueryFlagsSpec_Flag) ProtoMessage() {}
func (*QueryFlagsSpec_Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{1, 0}
}
func (m *QueryFlagsSpec_Flag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFlagsSpec_Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFlagsSpec_Flag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFlagsSpec_Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFlagsSpec_Flag.Merge(m, src)
}
func (m *QueryFlagsSpec_Flag) XXX_Size() int {
	return m.Size()
}
func (m *QueryFlagsSpec_Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFlagsSpec_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFlagsSpec_Flag proto.InternalMessageInfo

func (m *QueryFlagsSpec_Flag) GetDataType() proto1.DataType {
	if m != nil {
		return m.DataType
	}
	return proto1.DATA_TYPE_UNKNOWN
}

func (m *QueryFlagsSpec_Flag) GetSemanticType() proto1.SemanticType {
	if m != nil {
		return m.SemanticType
	}
	return proto1.ST_UNSPECIFIED
}

func (m *QueryFlagsSpec_Flag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryFlagsSpec_Flag) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *QueryFlagsSpec_Flag) GetDefaultValue() *planpb.ScalarValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

type GetAvailableFlagsResult struct {
	QueryFlags *QueryFlagsSpec `protobuf:"bytes,1,opt,name=query_flags,json=queryFlags,proto3" json:"query_flags,omitempty"`
	Status     *proto2.Status  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GetAvailableFlagsResult) Reset()      { *m = GetAvailableFlagsResult{} }
func (*GetAvailableFlagsResult) ProtoMessage() {}
func (*GetAvailableFlagsResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{2}
}
func (m *GetAvailableFlagsResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAvailableFlagsResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAvailableFlagsResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAvailableFlagsResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableFlagsResult.Merge(m, src)
}
func (m *GetAvailableFlagsResult) XXX_Size() int {
	return m.Size()
}
func (m *GetAvailableFlagsResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableFlagsResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableFlagsResult proto.InternalMessageInfo

func (m *GetAvailableFlagsResult) GetQueryFlags() *QueryFlagsSpec {
	if m != nil {
		return m.QueryFlags
	}
	return nil
}

func (m *GetAvailableFlagsResult) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CompileMutationsRequest struct {
	QueryStr string `protobuf:"bytes,1,opt,name=query_str,json=queryStr,proto3" json:"query_str,omitempty"`
}

func (m *CompileMutationsRequest) Reset()      { *m = CompileMutationsRequest{} }
func (*CompileMutationsRequest) ProtoMessage() {}
func (*CompileMutationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{3}
}
func (m *CompileMutationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompileMutationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompileMutationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompileMutationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompileMutationsRequest.Merge(m, src)
}
func (m *CompileMutationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompileMutationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompileMutationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompileMutationsRequest proto.InternalMessageInfo

func (m *CompileMutationsRequest) GetQueryStr() string {
	if m != nil {
		return m.QueryStr
	}
	return ""
}

type DeleteTracepoint struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteTracepoint) Reset()      { *m = DeleteTracepoint{} }
func (*DeleteTracepoint) ProtoMessage() {}
func (*DeleteTracepoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{4}
}
func (m *DeleteTracepoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTracepoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTracepoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTracepoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTracepoint.Merge(m, src)
}
func (m *DeleteTracepoint) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTracepoint) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTracepoint.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTracepoint proto.InternalMessageInfo

func (m *DeleteTracepoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CompileMutation struct {
	// Types that are valid to be assigned to Mutation:
	//	*CompileMutation_Trace
	//	*CompileMutation_DeleteTracepoint
	Mutation isCompileMutation_Mutation `protobuf_oneof:"mutation"`
}

func (m *CompileMutation) Reset()      { *m = CompileMutation{} }
func (*CompileMutation) ProtoMessage() {}
func (*CompileMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{5}
}
func (m *CompileMutation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompileMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompileMutation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompileMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompileMutation.Merge(m, src)
}
func (m *CompileMutation) XXX_Size() int {
	return m.Size()
}
func (m *CompileMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_CompileMutation.DiscardUnknown(m)
}

var xxx_messageInfo_CompileMutation proto.InternalMessageInfo

type isCompileMutation_Mutation interface {
	isCompileMutation_Mutation()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CompileMutation_Trace struct {
	Trace *ir.Program `protobuf:"bytes,2,opt,name=trace,proto3,oneof" json:"trace,omitempty"`
}
type CompileMutation_DeleteTracepoint struct {
	DeleteTracepoint *DeleteTracepoint `protobuf:"bytes,3,opt,name=delete_tracepoint,json=deleteTracepoint,proto3,oneof" json:"delete_tracepoint,omitempty"`
}

func (*CompileMutation_Trace) isCompileMutation_Mutation()            {}
func (*CompileMutation_DeleteTracepoint) isCompileMutation_Mutation() {}

func (m *CompileMutation) GetMutation() isCompileMutation_Mutation {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *CompileMutation) GetTrace() *ir.Program {
	if x, ok := m.GetMutation().(*CompileMutation_Trace); ok {
		return x.Trace
	}
	return nil
}

func (m *CompileMutation) GetDeleteTracepoint() *DeleteTracepoint {
	if x, ok := m.GetMutation().(*CompileMutation_DeleteTracepoint); ok {
		return x.DeleteTracepoint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CompileMutation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CompileMutation_Trace)(nil),
		(*CompileMutation_DeleteTracepoint)(nil),
	}
}

type CompileMutationsResponse struct {
	Status    *proto2.Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Mutations []*CompileMutation `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
}

func (m *CompileMutationsResponse) Reset()      { *m = CompileMutationsResponse{} }
func (*CompileMutationsResponse) ProtoMessage() {}
func (*CompileMutationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_382d495688ef31c6, []int{6}
}
func (m *CompileMutationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompileMutationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompileMutationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompileMutationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompileMutationsResponse.Merge(m, src)
}
func (m *CompileMutationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompileMutationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompileMutationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompileMutationsResponse proto.InternalMessageInfo

func (m *CompileMutationsResponse) GetStatus() *proto2.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CompileMutationsResponse) GetMutations() []*CompileMutation {
	if m != nil {
		return m.Mutations
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "pl.carnot.planner.plannerpb.QueryRequest")
	proto.RegisterType((*QueryRequest_FuncToExecute)(nil), "pl.carnot.planner.plannerpb.QueryRequest.FuncToExecute")
	proto.RegisterType((*QueryRequest_FuncToExecute_ArgValue)(nil), "pl.carnot.planner.plannerpb.QueryRequest.FuncToExecute.ArgValue")
	proto.RegisterType((*QueryFlagsSpec)(nil), "pl.carnot.planner.plannerpb.QueryFlagsSpec")
	proto.RegisterType((*QueryFlagsSpec_Flag)(nil), "pl.carnot.planner.plannerpb.QueryFlagsSpec.Flag")
	proto.RegisterType((*GetAvailableFlagsResult)(nil), "pl.carnot.planner.plannerpb.GetAvailableFlagsResult")
	proto.RegisterType((*CompileMutationsRequest)(nil), "pl.carnot.planner.plannerpb.CompileMutationsRequest")
	proto.RegisterType((*DeleteTracepoint)(nil), "pl.carnot.planner.plannerpb.DeleteTracepoint")
	proto.RegisterType((*CompileMutation)(nil), "pl.carnot.planner.plannerpb.CompileMutation")
	proto.RegisterType((*CompileMutationsResponse)(nil), "pl.carnot.planner.plannerpb.CompileMutationsResponse")
}

func init() {
	proto.RegisterFile("src/carnot/planner/plannerpb/func_args.proto", fileDescriptor_382d495688ef31c6)
}

var fileDescriptor_382d495688ef31c6 = []byte{
	// 779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xf6, 0xe4, 0xa3, 0x4a, 0xde, 0xb4, 0xa5, 0x9d, 0x22, 0x6a, 0xa5, 0x60, 0x45, 0x3e, 0xa0,
	0x4a, 0x6d, 0x6d, 0x14, 0x10, 0x1c, 0x38, 0x40, 0x4b, 0x69, 0xab, 0x0a, 0x50, 0x71, 0xa2, 0x1e,
	0x10, 0x92, 0x35, 0xb1, 0x27, 0xc1, 0x92, 0xbf, 0x3a, 0x33, 0xae, 0x9a, 0x1b, 0x3f, 0x01, 0x09,
	0x7e, 0x04, 0x3f, 0x84, 0x03, 0xdc, 0x7a, 0xec, 0x91, 0xa6, 0x17, 0x4e, 0xa8, 0xd2, 0xfe, 0x80,
	0x5d, 0xcd, 0x8c, 0x93, 0x66, 0xb3, 0xab, 0x76, 0x77, 0x4f, 0x7e, 0x3f, 0x1f, 0x3f, 0xef, 0x33,
	0x33, 0x2f, 0xec, 0x72, 0x16, 0xb8, 0x01, 0x61, 0x69, 0x26, 0xdc, 0x3c, 0x26, 0x69, 0x4a, 0xd9,
	0xf4, 0x9b, 0x0f, 0xdc, 0x61, 0x91, 0x06, 0x3e, 0x61, 0x23, 0xee, 0xe4, 0x2c, 0x13, 0x19, 0xde,
	0xca, 0x63, 0x47, 0x17, 0x3b, 0x65, 0x91, 0x33, 0x2b, 0x6e, 0xdb, 0x0a, 0x2a, 0x4b, 0x92, 0x2c,
	0x75, 0x07, 0x84, 0x53, 0x57, 0xf5, 0xb8, 0x5c, 0x10, 0x51, 0x94, 0x00, 0xba, 0x86, 0xff, 0x42,
	0x18, 0x0d, 0x5d, 0x31, 0xce, 0x29, 0x2f, 0x8b, 0x94, 0x5d, 0xd6, 0x7c, 0xb8, 0x40, 0x29, 0x1f,
	0xa8, 0x4f, 0x99, 0xdd, 0x53, 0x08, 0x22, 0x62, 0x71, 0x94, 0x8e, 0xdc, 0x70, 0x9c, 0x92, 0x24,
	0x0a, 0x7c, 0xc1, 0x48, 0x20, 0xfd, 0x88, 0xb9, 0x71, 0x36, 0x8a, 0x02, 0x12, 0xeb, 0x72, 0xfb,
	0x79, 0x05, 0x96, 0x7f, 0x2c, 0x28, 0x1b, 0x7b, 0xf4, 0xa2, 0xa0, 0x5c, 0xe0, 0x2d, 0x68, 0x5e,
	0x48, 0xdf, 0xe7, 0x82, 0x99, 0xa8, 0x83, 0xb6, 0x9b, 0x5e, 0x43, 0x05, 0x7a, 0x82, 0xe1, 0x73,
	0x00, 0x7a, 0x45, 0x03, 0x5f, 0xce, 0xcd, 0xcd, 0x6a, 0xa7, 0xba, 0xdd, 0xea, 0x7e, 0xe1, 0x3c,
	0x32, 0xb4, 0x33, 0x8f, 0xed, 0x1c, 0x15, 0x69, 0xd0, 0xcf, 0xbe, 0xbd, 0xa2, 0x41, 0x21, 0xa8,
	0xd7, 0x94, 0x50, 0x32, 0xc4, 0xdb, 0xcf, 0x10, 0xac, 0xbc, 0x94, 0x94, 0x34, 0x94, 0xb8, 0x29,
	0x49, 0xe8, 0x94, 0x86, 0x0c, 0xfc, 0x40, 0x12, 0x8a, 0x7d, 0x00, 0xc2, 0x46, 0xfe, 0x25, 0x89,
	0x0b, 0xca, 0xcd, 0x8a, 0xa2, 0xf1, 0xf5, 0x3b, 0xd2, 0x70, 0xf6, 0xd9, 0xe8, 0x5c, 0x02, 0x79,
	0x4d, 0x52, 0x5a, 0x1c, 0x3b, 0xb0, 0x91, 0x15, 0x22, 0x2f, 0x84, 0x2f, 0xc8, 0x20, 0xa6, 0x7e,
	0xce, 0xe8, 0x30, 0xba, 0x32, 0xab, 0x8a, 0xc7, 0xba, 0x4e, 0xf5, 0x65, 0xe6, 0x4c, 0x25, 0xda,
	0x9f, 0x41, 0x63, 0x0a, 0x83, 0x31, 0xd4, 0xe6, 0x48, 0x2b, 0x1b, 0xbf, 0x0f, 0x75, 0x45, 0xd6,
	0xac, 0xa8, 0xa0, 0x76, 0x4e, 0x6b, 0x8d, 0xca, 0x5a, 0xd5, 0xfe, 0xa7, 0x02, 0xab, 0x8a, 0xde,
	0x51, 0x4c, 0x46, 0xbc, 0x97, 0xd3, 0x00, 0x1f, 0x41, 0x7d, 0x28, 0x1d, 0x13, 0xa9, 0xd1, 0x3e,
	0x79, 0x7a, 0xb4, 0x59, 0xaf, 0x23, 0x2d, 0x4f, 0xb7, 0xb7, 0xff, 0x47, 0x50, 0x93, 0x3e, 0x76,
	0xa1, 0x19, 0x12, 0x41, 0x7c, 0x79, 0x8d, 0x14, 0xb1, 0xd5, 0x2e, 0x96, 0xa0, 0xfa, 0x5a, 0x1d,
	0x12, 0x41, 0xfa, 0xe3, 0x9c, 0x7a, 0x8d, 0xb0, 0xb4, 0xf0, 0x97, 0xb0, 0xc2, 0x69, 0x42, 0x52,
	0x21, 0xef, 0x8e, 0x6c, 0xaa, 0xa8, 0xa6, 0x0f, 0x1e, 0x9a, 0x7a, 0x65, 0x5a, 0x35, 0x2e, 0xf3,
	0x39, 0x6f, 0xa6, 0x40, 0x75, 0x4e, 0x81, 0x0e, 0xb4, 0x42, 0xca, 0x03, 0x16, 0xe5, 0x22, 0xca,
	0x52, 0xb3, 0xa6, 0x52, 0xf3, 0x21, 0x7c, 0x00, 0x2b, 0x21, 0x1d, 0x92, 0x22, 0x16, 0xfa, 0x60,
	0xcd, 0x7a, 0x07, 0x6d, 0xb7, 0xba, 0x1f, 0x2d, 0x0c, 0x9f, 0x0f, 0x9c, 0x5e, 0x40, 0x62, 0xc2,
	0xf4, 0xa1, 0x2d, 0x97, 0x3d, 0xca, 0xb3, 0xff, 0x40, 0xb0, 0x79, 0x4c, 0xc5, 0xfe, 0x25, 0x89,
	0x62, 0x79, 0x3c, 0x4a, 0x16, 0x8f, 0xf2, 0x22, 0x16, 0xf8, 0x3b, 0x68, 0xe9, 0x8b, 0x3d, 0x95,
	0x56, 0xa2, 0xef, 0xbc, 0x85, 0xb4, 0x1e, 0x5c, 0xcc, 0x7c, 0xbc, 0x03, 0x4b, 0xfa, 0xe1, 0x2a,
	0x65, 0x5a, 0xdd, 0x0d, 0x09, 0xa4, 0x23, 0x92, 0xa1, 0x32, 0xbc, 0xb2, 0xc4, 0xfe, 0x1c, 0x36,
	0xbf, 0xc9, 0x92, 0x3c, 0x8a, 0xe9, 0xf7, 0x85, 0x20, 0x72, 0x5a, 0xfe, 0x26, 0xcf, 0xcd, 0xfe,
	0x18, 0xd6, 0x0e, 0x69, 0x4c, 0x05, 0xed, 0x33, 0x12, 0xd0, 0x3c, 0x8b, 0x52, 0xf1, 0xba, 0xeb,
	0x65, 0xff, 0x85, 0xe0, 0xbd, 0x85, 0x1f, 0xe0, 0x63, 0xa8, 0xcb, 0x47, 0x4f, 0x4b, 0x7e, 0xae,
	0xe6, 0xa7, 0xd7, 0x82, 0xb3, 0xb0, 0x16, 0x9c, 0x88, 0x39, 0xd3, 0xb5, 0x70, 0xc6, 0xb2, 0x11,
	0x23, 0xc9, 0x89, 0xe1, 0xe9, 0x7e, 0xfc, 0x33, 0xac, 0x87, 0x8a, 0x84, 0xaa, 0xd6, 0x2c, 0xd4,
	0xd1, 0xb6, 0xba, 0x7b, 0x8f, 0xaa, 0xb7, 0x48, 0xfd, 0xc4, 0xf0, 0xd6, 0xc2, 0x85, 0xd8, 0x01,
	0x40, 0x23, 0x29, 0x29, 0xdb, 0xbf, 0x23, 0x30, 0x5f, 0xd5, 0x89, 0xe7, 0x59, 0xca, 0xe9, 0x9c,
	0xe0, 0xe8, 0x49, 0xc1, 0xf1, 0x29, 0x34, 0xa7, 0xa8, 0xd3, 0xfd, 0xb0, 0xfb, 0x28, 0xd7, 0x85,
	0xdf, 0x7a, 0x0f, 0xed, 0x07, 0x5f, 0x5d, 0xdf, 0x5a, 0xc6, 0xcd, 0xad, 0x65, 0xdc, 0xdf, 0x5a,
	0xe8, 0xd7, 0x89, 0x85, 0xfe, 0x9c, 0x58, 0xe8, 0xef, 0x89, 0x85, 0xae, 0x27, 0x16, 0xfa, 0x77,
	0x62, 0xa1, 0xff, 0x26, 0x96, 0x71, 0x3f, 0xb1, 0xd0, 0x6f, 0x77, 0x96, 0x71, 0x7d, 0x67, 0x19,
	0x37, 0x77, 0x96, 0xf1, 0x53, 0x73, 0x86, 0x3d, 0x58, 0x52, 0x9b, 0xf6, 0xd3, 0x17, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x5a, 0x90, 0x9f, 0x0a, 0x4b, 0x06, 0x00, 0x00,
}

func (this *QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest)
	if !ok {
		that2, ok := that.(QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	if len(this.ExecFuncs) != len(that1.ExecFuncs) {
		return false
	}
	for i := range this.ExecFuncs {
		if !this.ExecFuncs[i].Equal(that1.ExecFuncs[i]) {
			return false
		}
	}
	return true
}
func (this *QueryRequest_FuncToExecute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest_FuncToExecute)
	if !ok {
		that2, ok := that.(QueryRequest_FuncToExecute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FuncName != that1.FuncName {
		return false
	}
	if len(this.ArgValues) != len(that1.ArgValues) {
		return false
	}
	for i := range this.ArgValues {
		if !this.ArgValues[i].Equal(that1.ArgValues[i]) {
			return false
		}
	}
	if this.OutputTablePrefix != that1.OutputTablePrefix {
		return false
	}
	return true
}
func (this *QueryRequest_FuncToExecute_ArgValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest_FuncToExecute_ArgValue)
	if !ok {
		that2, ok := that.(QueryRequest_FuncToExecute_ArgValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *QueryFlagsSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryFlagsSpec)
	if !ok {
		that2, ok := that.(QueryFlagsSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Flags) != len(that1.Flags) {
		return false
	}
	for i := range this.Flags {
		if !this.Flags[i].Equal(that1.Flags[i]) {
			return false
		}
	}
	return true
}
func (this *QueryFlagsSpec_Flag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryFlagsSpec_Flag)
	if !ok {
		that2, ok := that.(QueryFlagsSpec_Flag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DataType != that1.DataType {
		return false
	}
	if this.SemanticType != that1.SemanticType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.DefaultValue.Equal(that1.DefaultValue) {
		return false
	}
	return true
}
func (this *GetAvailableFlagsResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAvailableFlagsResult)
	if !ok {
		that2, ok := that.(GetAvailableFlagsResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryFlags.Equal(that1.QueryFlags) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *CompileMutationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutationsRequest)
	if !ok {
		that2, ok := that.(CompileMutationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryStr != that1.QueryStr {
		return false
	}
	return true
}
func (this *DeleteTracepoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteTracepoint)
	if !ok {
		that2, ok := that.(DeleteTracepoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CompileMutation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutation)
	if !ok {
		that2, ok := that.(CompileMutation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Mutation == nil {
		if this.Mutation != nil {
			return false
		}
	} else if this.Mutation == nil {
		return false
	} else if !this.Mutation.Equal(that1.Mutation) {
		return false
	}
	return true
}
func (this *CompileMutation_Trace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutation_Trace)
	if !ok {
		that2, ok := that.(CompileMutation_Trace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *CompileMutation_DeleteTracepoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutation_DeleteTracepoint)
	if !ok {
		that2, ok := that.(CompileMutation_DeleteTracepoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeleteTracepoint.Equal(that1.DeleteTracepoint) {
		return false
	}
	return true
}
func (this *CompileMutationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompileMutationsResponse)
	if !ok {
		that2, ok := that.(CompileMutationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if len(this.Mutations) != len(that1.Mutations) {
		return false
	}
	for i := range this.Mutations {
		if !this.Mutations[i].Equal(that1.Mutations[i]) {
			return false
		}
	}
	return true
}
func (this *QueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.QueryRequest{")
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	if this.ExecFuncs != nil {
		s = append(s, "ExecFuncs: "+fmt.Sprintf("%#v", this.ExecFuncs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRequest_FuncToExecute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&plannerpb.QueryRequest_FuncToExecute{")
	s = append(s, "FuncName: "+fmt.Sprintf("%#v", this.FuncName)+",\n")
	if this.ArgValues != nil {
		s = append(s, "ArgValues: "+fmt.Sprintf("%#v", this.ArgValues)+",\n")
	}
	s = append(s, "OutputTablePrefix: "+fmt.Sprintf("%#v", this.OutputTablePrefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRequest_FuncToExecute_ArgValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.QueryRequest_FuncToExecute_ArgValue{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryFlagsSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&plannerpb.QueryFlagsSpec{")
	if this.Flags != nil {
		s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryFlagsSpec_Flag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&plannerpb.QueryFlagsSpec_Flag{")
	s = append(s, "DataType: "+fmt.Sprintf("%#v", this.DataType)+",\n")
	s = append(s, "SemanticType: "+fmt.Sprintf("%#v", this.SemanticType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.DefaultValue != nil {
		s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAvailableFlagsResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.GetAvailableFlagsResult{")
	if this.QueryFlags != nil {
		s = append(s, "QueryFlags: "+fmt.Sprintf("%#v", this.QueryFlags)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompileMutationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&plannerpb.CompileMutationsRequest{")
	s = append(s, "QueryStr: "+fmt.Sprintf("%#v", this.QueryStr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteTracepoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&plannerpb.DeleteTracepoint{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompileMutation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.CompileMutation{")
	if this.Mutation != nil {
		s = append(s, "Mutation: "+fmt.Sprintf("%#v", this.Mutation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompileMutation_Trace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&plannerpb.CompileMutation_Trace{` +
		`Trace:` + fmt.Sprintf("%#v", this.Trace) + `}`}, ", ")
	return s
}
func (this *CompileMutation_DeleteTracepoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&plannerpb.CompileMutation_DeleteTracepoint{` +
		`DeleteTracepoint:` + fmt.Sprintf("%#v", this.DeleteTracepoint) + `}`}, ", ")
	return s
}
func (this *CompileMutationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&plannerpb.CompileMutationsResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.Mutations != nil {
		s = append(s, "Mutations: "+fmt.Sprintf("%#v", this.Mutations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFuncArgs(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecFuncs) > 0 {
		for iNdEx := len(m.ExecFuncs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecFuncs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFuncArgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.QueryStr) > 0 {
		i -= len(m.QueryStr)
		copy(dAtA[i:], m.QueryStr)
		i = encodeVarintFuncArgs(dAtA, i, uint64(len(m.QueryStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest_FuncToExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest_FuncToExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest_FuncToExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputTablePrefix) > 0 {
		i -= len(m.OutputTablePrefix)
		copy(dAtA[i:], m.OutputTablePrefix)
		i = encodeVarintFuncArgs(dAtA, i, uint64(len(m.OutputTablePrefix)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArgValues) > 0 {
		for iNdEx := len(m.ArgValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ArgValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFuncArgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FuncName) > 0 {
		i -= len(m.FuncName)
		copy(dAtA[i:], m.FuncName)
		i = encodeVarintFuncArgs(dAtA, i, uint64(len(m.FuncName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest_FuncToExecute_ArgValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest_FuncToExecute_ArgValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest_FuncToExecute_ArgValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFuncArgs(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFuncArgs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFlagsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlagsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlagsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Flags) > 0 {
		for iNdEx := len(m.Flags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFuncArgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFlagsSpec_Flag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFlagsSpec_Flag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFlagsSpec_Flag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultValue != nil {
		{
			size, err := m.DefaultValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFuncArgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFuncArgs(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFuncArgs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SemanticType != 0 {
		i = encodeVarintFuncArgs(dAtA, i, uint64(m.SemanticType))
		i--
		dAtA[i] = 0x10
	}
	if m.DataType != 0 {
		i = encodeVarintFuncArgs(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAvailableFlagsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAvailableFlagsResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAvailableFlagsResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFuncArgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.QueryFlags != nil {
		{
			size, err := m.QueryFlags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFuncArgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompileMutationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompileMutationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryStr) > 0 {
		i -= len(m.QueryStr)
		copy(dAtA[i:], m.QueryStr)
		i = encodeVarintFuncArgs(dAtA, i, uint64(len(m.QueryStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTracepoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTracepoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTracepoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFuncArgs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompileMutation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompileMutation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mutation != nil {
		{
			size := m.Mutation.Size()
			i -= size
			if _, err := m.Mutation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompileMutation_Trace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutation_Trace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Trace != nil {
		{
			size, err := m.Trace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFuncArgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CompileMutation_DeleteTracepoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutation_DeleteTracepoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteTracepoint != nil {
		{
			size, err := m.DeleteTracepoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFuncArgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CompileMutationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompileMutationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompileMutationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mutations) > 0 {
		for iNdEx := len(m.Mutations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mutations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFuncArgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFuncArgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFuncArgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovFuncArgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	if len(m.ExecFuncs) > 0 {
		for _, e := range m.ExecFuncs {
			l = e.Size()
			n += 1 + l + sovFuncArgs(uint64(l))
		}
	}
	return n
}

func (m *QueryRequest_FuncToExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FuncName)
	if l > 0 {
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	if len(m.ArgValues) > 0 {
		for _, e := range m.ArgValues {
			l = e.Size()
			n += 1 + l + sovFuncArgs(uint64(l))
		}
	}
	l = len(m.OutputTablePrefix)
	if l > 0 {
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	return n
}

func (m *QueryRequest_FuncToExecute_ArgValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	return n
}

func (m *QueryFlagsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Flags) > 0 {
		for _, e := range m.Flags {
			l = e.Size()
			n += 1 + l + sovFuncArgs(uint64(l))
		}
	}
	return n
}

func (m *QueryFlagsSpec_Flag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovFuncArgs(uint64(m.DataType))
	}
	if m.SemanticType != 0 {
		n += 1 + sovFuncArgs(uint64(m.SemanticType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	if m.DefaultValue != nil {
		l = m.DefaultValue.Size()
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	return n
}

func (m *GetAvailableFlagsResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryFlags != nil {
		l = m.QueryFlags.Size()
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	return n
}

func (m *CompileMutationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryStr)
	if l > 0 {
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	return n
}

func (m *DeleteTracepoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	return n
}

func (m *CompileMutation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mutation != nil {
		n += m.Mutation.Size()
	}
	return n
}

func (m *CompileMutation_Trace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	return n
}
func (m *CompileMutation_DeleteTracepoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteTracepoint != nil {
		l = m.DeleteTracepoint.Size()
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	return n
}
func (m *CompileMutationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovFuncArgs(uint64(l))
	}
	if len(m.Mutations) > 0 {
		for _, e := range m.Mutations {
			l = e.Size()
			n += 1 + l + sovFuncArgs(uint64(l))
		}
	}
	return n
}

func sovFuncArgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFuncArgs(x uint64) (n int) {
	return sovFuncArgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecFuncs := "[]*QueryRequest_FuncToExecute{"
	for _, f := range this.ExecFuncs {
		repeatedStringForExecFuncs += strings.Replace(fmt.Sprintf("%v", f), "QueryRequest_FuncToExecute", "QueryRequest_FuncToExecute", 1) + ","
	}
	repeatedStringForExecFuncs += "}"
	s := strings.Join([]string{`&QueryRequest{`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`ExecFuncs:` + repeatedStringForExecFuncs + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRequest_FuncToExecute) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgValues := "[]*QueryRequest_FuncToExecute_ArgValue{"
	for _, f := range this.ArgValues {
		repeatedStringForArgValues += strings.Replace(fmt.Sprintf("%v", f), "QueryRequest_FuncToExecute_ArgValue", "QueryRequest_FuncToExecute_ArgValue", 1) + ","
	}
	repeatedStringForArgValues += "}"
	s := strings.Join([]string{`&QueryRequest_FuncToExecute{`,
		`FuncName:` + fmt.Sprintf("%v", this.FuncName) + `,`,
		`ArgValues:` + repeatedStringForArgValues + `,`,
		`OutputTablePrefix:` + fmt.Sprintf("%v", this.OutputTablePrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRequest_FuncToExecute_ArgValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRequest_FuncToExecute_ArgValue{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryFlagsSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFlags := "[]*QueryFlagsSpec_Flag{"
	for _, f := range this.Flags {
		repeatedStringForFlags += strings.Replace(fmt.Sprintf("%v", f), "QueryFlagsSpec_Flag", "QueryFlagsSpec_Flag", 1) + ","
	}
	repeatedStringForFlags += "}"
	s := strings.Join([]string{`&QueryFlagsSpec{`,
		`Flags:` + repeatedStringForFlags + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryFlagsSpec_Flag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryFlagsSpec_Flag{`,
		`DataType:` + fmt.Sprintf("%v", this.DataType) + `,`,
		`SemanticType:` + fmt.Sprintf("%v", this.SemanticType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`DefaultValue:` + strings.Replace(fmt.Sprintf("%v", this.DefaultValue), "ScalarValue", "planpb.ScalarValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAvailableFlagsResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAvailableFlagsResult{`,
		`QueryFlags:` + strings.Replace(this.QueryFlags.String(), "QueryFlagsSpec", "QueryFlagsSpec", 1) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompileMutationsRequest{`,
		`QueryStr:` + fmt.Sprintf("%v", this.QueryStr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteTracepoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteTracepoint{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompileMutation{`,
		`Mutation:` + fmt.Sprintf("%v", this.Mutation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutation_Trace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompileMutation_Trace{`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Program", "ir.Program", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutation_DeleteTracepoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompileMutation_DeleteTracepoint{`,
		`DeleteTracepoint:` + strings.Replace(fmt.Sprintf("%v", this.DeleteTracepoint), "DeleteTracepoint", "DeleteTracepoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompileMutationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMutations := "[]*CompileMutation{"
	for _, f := range this.Mutations {
		repeatedStringForMutations += strings.Replace(f.String(), "CompileMutation", "CompileMutation", 1) + ","
	}
	repeatedStringForMutations += "}"
	s := strings.Join([]string{`&CompileMutationsResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto2.Status", 1) + `,`,
		`Mutations:` + repeatedStringForMutations + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFuncArgs(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFuncs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecFuncs = append(m.ExecFuncs, &QueryRequest_FuncToExecute{})
			if err := m.ExecFuncs[len(m.ExecFuncs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest_FuncToExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuncToExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuncToExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuncName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArgValues = append(m.ArgValues, &QueryRequest_FuncToExecute_ArgValue{})
			if err := m.ArgValues[len(m.ArgValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputTablePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputTablePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest_FuncToExecute_ArgValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlagsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFlagsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFlagsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flags = append(m.Flags, &QueryFlagsSpec_Flag{})
			if err := m.Flags[len(m.Flags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFlagsSpec_Flag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= proto1.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemanticType", wireType)
			}
			m.SemanticType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SemanticType |= proto1.SemanticType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultValue == nil {
				m.DefaultValue = &planpb.ScalarValue{}
			}
			if err := m.DefaultValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAvailableFlagsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAvailableFlagsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAvailableFlagsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryFlags == nil {
				m.QueryFlags = &QueryFlagsSpec{}
			}
			if err := m.QueryFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompileMutationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompileMutationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompileMutationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTracepoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTracepoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTracepoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompileMutation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompileMutation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompileMutation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ir.Program{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Mutation = &CompileMutation_Trace{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTracepoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteTracepoint{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Mutation = &CompileMutation_DeleteTracepoint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompileMutationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompileMutationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompileMutationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto2.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFuncArgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mutations = append(m.Mutations, &CompileMutation{})
			if err := m.Mutations[len(m.Mutations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFuncArgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFuncArgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFuncArgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFuncArgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFuncArgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFuncArgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFuncArgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFuncArgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFuncArgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFuncArgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFuncArgs = fmt.Errorf("proto: unexpected end of group")
)
