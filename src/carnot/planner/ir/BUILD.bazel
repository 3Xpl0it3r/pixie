# gazelle:ignore
package(default_visibility = ["//visibility:public"])

load("//bazel:pl_build_system.bzl", "pl_cc_library", "pl_cc_test", "pl_cc_test_library", "pl_linkopts")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

pl_cc_library(
    name = "cc_library",
    srcs = glob(
        [
            "*.cc",
            "*.h",
            "ir_nodes.inl",
            "expressions.inl",
            "operators.inl",
        ],
        exclude = [
            "**/*_test.cc",
            "**/*_test_utils.h",
        ],
    ),
    hdrs = ["ir_nodes.h"],
    deps = [
        "//src/carnot/dag:cc_library",
        "//src/carnot/planner/compiler_error_context:cc_library",
        "//src/carnot/planner/compiler_state:cc_library",
        "//src/carnot/planner/compilerpb:compiler_status_pl_cc_proto",
        "//src/carnot/planner/distributedpb:distributed_plan_pl_cc_proto",
        "//src/carnot/planner/types:cc_library",
        "//src/carnot/planpb:plan_pl_cc_proto",
        "//src/shared/metadata:cc_library",
        "//src/shared/metadatapb:metadata_pl_cc_proto",
        "//third_party:libpypa",
    ],
)

pl_cc_test(
    name = "ir_nodes_test",
    srcs = ["ir_nodes_test.cc"],
    deps = [
        "//src/carnot/planner/compiler:test_utils",
    ],
)

pl_cc_test(
    name = "pattern_match_test",
    srcs = ["pattern_match_test.cc"],
    deps = [
        ":cc_library",
        "//src/carnot/planner/compiler:test_utils",
    ],
)

pl_cc_test(
    name = "type_resolution_test",
    srcs = ["type_resolution_test.cc"],
    deps = [
        ":cc_library",
        "//src/carnot/planner/compiler:test_utils",
        "//src/carnot/udf_exporter:cc_library",
    ],
)
