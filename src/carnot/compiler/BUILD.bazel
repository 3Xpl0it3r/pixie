# gazelle:ignore
package(default_visibility = ["//visibility:public"])

load("//bazel:pl_build_system.bzl", "pl_cc_library", "pl_cc_test", "pl_cc_test_library", "pl_linkopts")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

pl_cc_library(
    name = "cc_library",
    srcs = glob(
        [
            "*.cc",
            "*.h",
        ],
        exclude = [
            "**/*_test.cc",
            "**/*_test_utils.h",
            "compiler_export.cc",
            "compiler_export.h",
        ],
    ),
    hdrs = ["compiler.h"],
    deps = [
        "//src/carnot/compiler/compilerpb:compiler_status_pl_cc_proto",
        "//src/carnot/compiler/distributedpb:distributed_plan_pl_cc_proto",
        "//src/carnot/metadatapb:metadata_pl_cc_proto",
        "//src/carnot/plan:cc_library",
        "//src/carnot/planpb:plan_pl_cc_proto",
        "//src/carnot/udf:cc_library",
        "//third_party:libpypa",
        "//src/carnot/compiler/ir:cc_library",
        "//src/carnot/compiler/compiler_error_context:cc_library",
    ],
)

pl_cc_test_library(
    name = "test_utils",
    hdrs = glob(["*_test_utils.h"]),
    deps = [
        ":cc_library",
    ],
)

pl_cc_test(
    name = "ast_visitor_test",
    srcs = ["ast_visitor_test.cc"],
    deps = [
        ":cc_library",
        ":test_utils",
    ],
)

pl_cc_test(
    name = "string_reader_test",
    srcs = ["string_reader_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "registry_info_test",
    srcs = ["registry_info_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "ir_verifier_test",
    srcs = ["ir_verifier_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "compiler_test",
    srcs = ["compiler_test.cc"],
    deps = [
        ":cc_library",
        "//src/carnot/funcs/metadata:cc_library",
        "//src/carnot/planpb:plan_testutils",
        "//src/carnot/udf_exporter:cc_library",
    ],
)

pl_cc_test(
    name = "analyzer_test",
    srcs = ["analyzer_test.cc"],
    deps = [":cc_library"],
)

pl_cc_test(
    name = "rules_test",
    srcs = ["rules_test.cc"],
    deps = [
        ":cc_library",
        "//src/carnot/udf_exporter:cc_library",
    ],
)

pl_cc_test(
    name = "rule_executor_test",
    srcs = ["rule_executor_test.cc"],
    deps = [
        ":cc_library",
        "//src/carnot/udf_exporter:cc_library",
    ],
)

pl_cc_test(
    name = "metadata_handler_test",
    srcs = ["metadata_handler_test.cc"],
    deps = [
        ":cc_library",
    ],
)

pl_cc_test(
    name = "distributed_planner_test",
    srcs = ["distributed_planner_test.cc"],
    deps = [
        ":cc_library",
        "//src/carnot/udf_exporter:cc_library",
    ],
)

pl_cc_test(
    name = "distributed_plan_test",
    srcs = ["distributed_plan_test.cc"],
    deps = [
        ":cc_library",
    ],
)

pl_cc_test(
    name = "distributed_splitter_test",
    srcs = ["distributed_splitter_test.cc"],
    deps = [
        ":cc_library",
        "//src/carnot/udf_exporter:cc_library",
    ],
)

pl_cc_test(
    name = "grpc_source_conversion_test",
    srcs = ["grpc_source_conversion_test.cc"],
    deps = [
        ":cc_library",
    ],
)

pl_cc_test(
    name = "distributed_coordinator_test",
    srcs = ["distributed_coordinator_test.cc"],
    deps = [
        ":cc_library",
        "//src/carnot/udf_exporter:cc_library",
    ],
)

pl_cc_test(
    name = "distributed_stitcher_test",
    srcs = ["distributed_stitcher_test.cc"],
    deps = [
        ":cc_library",
        "//src/carnot/udf_exporter:cc_library",
    ],
)

go_library(
    name = "go_default_library",
    srcs = ["compiler_error_context.go"],
    importpath = "pixielabs.ai/pixielabs/src/carnot/compiler",
    deps = [
        "//src/carnot/compiler/compilerpb:compiler_status_pl_go_proto",
        "//src/common/base/proto:status_pl_go_proto",
        "//src/table_store/proto:schema_pl_go_proto",
        "@com_github_gogo_protobuf//proto:go_default_library",
        "@com_github_gogo_protobuf//types:go_default_library",
    ],
)

pl_cc_test(
    name = "tablet_rules_test",
    srcs = ["tablet_rules_test.cc"],
    deps = [
        ":cc_library",
    ],
)
