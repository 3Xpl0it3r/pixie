// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/carnot/compiler/compilerpb/compiler_status.proto

package compilerpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "pixielabs.ai/pixielabs/src/carnot/proto"
import proto1 "pixielabs.ai/pixielabs/src/common/base/proto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CompilerErrorType int32

const (
	UNKNOWN CompilerErrorType = 0
	LINECOL CompilerErrorType = 1
)

var CompilerErrorType_name = map[int32]string{
	0: "UNKNOWN",
	1: "LINECOL",
}
var CompilerErrorType_value = map[string]int32{
	"UNKNOWN": 0,
	"LINECOL": 1,
}

func (CompilerErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_compiler_status_5dfc841eb738e919, []int{0}
}

type LineColError struct {
	Line    uint64 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column  uint64 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *LineColError) Reset()      { *m = LineColError{} }
func (*LineColError) ProtoMessage() {}
func (*LineColError) Descriptor() ([]byte, []int) {
	return fileDescriptor_compiler_status_5dfc841eb738e919, []int{0}
}
func (m *LineColError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LineColError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LineColError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LineColError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LineColError.Merge(dst, src)
}
func (m *LineColError) XXX_Size() int {
	return m.Size()
}
func (m *LineColError) XXX_DiscardUnknown() {
	xxx_messageInfo_LineColError.DiscardUnknown(m)
}

var xxx_messageInfo_LineColError proto.InternalMessageInfo

func (m *LineColError) GetLine() uint64 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *LineColError) GetColumn() uint64 {
	if m != nil {
		return m.Column
	}
	return 0
}

func (m *LineColError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CompilerError struct {
	Type CompilerErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=pl.carnot.compiler.compilerpb.CompilerErrorType" json:"type,omitempty"`
	// Types that are valid to be assigned to Error:
	//	*CompilerError_LineColError
	Error isCompilerError_Error `protobuf_oneof:"error"`
}

func (m *CompilerError) Reset()      { *m = CompilerError{} }
func (*CompilerError) ProtoMessage() {}
func (*CompilerError) Descriptor() ([]byte, []int) {
	return fileDescriptor_compiler_status_5dfc841eb738e919, []int{1}
}
func (m *CompilerError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilerError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilerError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CompilerError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilerError.Merge(dst, src)
}
func (m *CompilerError) XXX_Size() int {
	return m.Size()
}
func (m *CompilerError) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilerError.DiscardUnknown(m)
}

var xxx_messageInfo_CompilerError proto.InternalMessageInfo

type isCompilerError_Error interface {
	isCompilerError_Error()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CompilerError_LineColError struct {
	LineColError *LineColError `protobuf:"bytes,2,opt,name=line_col_error,json=lineColError,proto3,oneof"`
}

func (*CompilerError_LineColError) isCompilerError_Error() {}

func (m *CompilerError) GetError() isCompilerError_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CompilerError) GetType() CompilerErrorType {
	if m != nil {
		return m.Type
	}
	return UNKNOWN
}

func (m *CompilerError) GetLineColError() *LineColError {
	if x, ok := m.GetError().(*CompilerError_LineColError); ok {
		return x.LineColError
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CompilerError) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CompilerError_OneofMarshaler, _CompilerError_OneofUnmarshaler, _CompilerError_OneofSizer, []interface{}{
		(*CompilerError_LineColError)(nil),
	}
}

func _CompilerError_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CompilerError)
	// error
	switch x := m.Error.(type) {
	case *CompilerError_LineColError:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LineColError); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CompilerError.Error has unexpected type %T", x)
	}
	return nil
}

func _CompilerError_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CompilerError)
	switch tag {
	case 2: // error.line_col_error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LineColError)
		err := b.DecodeMessage(msg)
		m.Error = &CompilerError_LineColError{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CompilerError_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CompilerError)
	// error
	switch x := m.Error.(type) {
	case *CompilerError_LineColError:
		s := proto.Size(x.LineColError)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CompilerResult struct {
	Status      *proto1.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LogicalPlan *proto2.Plan   `protobuf:"bytes,2,opt,name=logical_plan,json=logicalPlan,proto3" json:"logical_plan,omitempty"`
}

func (m *CompilerResult) Reset()      { *m = CompilerResult{} }
func (*CompilerResult) ProtoMessage() {}
func (*CompilerResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_compiler_status_5dfc841eb738e919, []int{2}
}
func (m *CompilerResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilerResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilerResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CompilerResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilerResult.Merge(dst, src)
}
func (m *CompilerResult) XXX_Size() int {
	return m.Size()
}
func (m *CompilerResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilerResult.DiscardUnknown(m)
}

var xxx_messageInfo_CompilerResult proto.InternalMessageInfo

func (m *CompilerResult) GetStatus() *proto1.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CompilerResult) GetLogicalPlan() *proto2.Plan {
	if m != nil {
		return m.LogicalPlan
	}
	return nil
}

type CompilerErrorGroup struct {
	Errors []*CompilerError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *CompilerErrorGroup) Reset()      { *m = CompilerErrorGroup{} }
func (*CompilerErrorGroup) ProtoMessage() {}
func (*CompilerErrorGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_compiler_status_5dfc841eb738e919, []int{3}
}
func (m *CompilerErrorGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilerErrorGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilerErrorGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CompilerErrorGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilerErrorGroup.Merge(dst, src)
}
func (m *CompilerErrorGroup) XXX_Size() int {
	return m.Size()
}
func (m *CompilerErrorGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilerErrorGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CompilerErrorGroup proto.InternalMessageInfo

func (m *CompilerErrorGroup) GetErrors() []*CompilerError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*LineColError)(nil), "pl.carnot.compiler.compilerpb.LineColError")
	proto.RegisterType((*CompilerError)(nil), "pl.carnot.compiler.compilerpb.CompilerError")
	proto.RegisterType((*CompilerResult)(nil), "pl.carnot.compiler.compilerpb.CompilerResult")
	proto.RegisterType((*CompilerErrorGroup)(nil), "pl.carnot.compiler.compilerpb.CompilerErrorGroup")
	proto.RegisterEnum("pl.carnot.compiler.compilerpb.CompilerErrorType", CompilerErrorType_name, CompilerErrorType_value)
}
func (x CompilerErrorType) String() string {
	s, ok := CompilerErrorType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LineColError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LineColError)
	if !ok {
		that2, ok := that.(LineColError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Line != that1.Line {
		return false
	}
	if this.Column != that1.Column {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *CompilerError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompilerError)
	if !ok {
		that2, ok := that.(CompilerError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Error == nil {
		if this.Error != nil {
			return false
		}
	} else if this.Error == nil {
		return false
	} else if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *CompilerError_LineColError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompilerError_LineColError)
	if !ok {
		that2, ok := that.(CompilerError_LineColError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LineColError.Equal(that1.LineColError) {
		return false
	}
	return true
}
func (this *CompilerResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompilerResult)
	if !ok {
		that2, ok := that.(CompilerResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.LogicalPlan.Equal(that1.LogicalPlan) {
		return false
	}
	return true
}
func (this *CompilerErrorGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompilerErrorGroup)
	if !ok {
		that2, ok := that.(CompilerErrorGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if !this.Errors[i].Equal(that1.Errors[i]) {
			return false
		}
	}
	return true
}
func (this *LineColError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&compilerpb.LineColError{")
	s = append(s, "Line: "+fmt.Sprintf("%#v", this.Line)+",\n")
	s = append(s, "Column: "+fmt.Sprintf("%#v", this.Column)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompilerError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&compilerpb.CompilerError{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompilerError_LineColError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&compilerpb.CompilerError_LineColError{` +
		`LineColError:` + fmt.Sprintf("%#v", this.LineColError) + `}`}, ", ")
	return s
}
func (this *CompilerResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&compilerpb.CompilerResult{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.LogicalPlan != nil {
		s = append(s, "LogicalPlan: "+fmt.Sprintf("%#v", this.LogicalPlan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompilerErrorGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&compilerpb.CompilerErrorGroup{")
	if this.Errors != nil {
		s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCompilerStatus(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LineColError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LineColError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Line != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompilerStatus(dAtA, i, uint64(m.Line))
	}
	if m.Column != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompilerStatus(dAtA, i, uint64(m.Column))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCompilerStatus(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *CompilerError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilerError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompilerStatus(dAtA, i, uint64(m.Type))
	}
	if m.Error != nil {
		nn1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *CompilerError_LineColError) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LineColError != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompilerStatus(dAtA, i, uint64(m.LineColError.Size()))
		n2, err := m.LineColError.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *CompilerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilerResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompilerStatus(dAtA, i, uint64(m.Status.Size()))
		n3, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.LogicalPlan != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompilerStatus(dAtA, i, uint64(m.LogicalPlan.Size()))
		n4, err := m.LogicalPlan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CompilerErrorGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilerErrorGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for _, msg := range m.Errors {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCompilerStatus(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCompilerStatus(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LineColError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Line != 0 {
		n += 1 + sovCompilerStatus(uint64(m.Line))
	}
	if m.Column != 0 {
		n += 1 + sovCompilerStatus(uint64(m.Column))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCompilerStatus(uint64(l))
	}
	return n
}

func (m *CompilerError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCompilerStatus(uint64(m.Type))
	}
	if m.Error != nil {
		n += m.Error.Size()
	}
	return n
}

func (m *CompilerError_LineColError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LineColError != nil {
		l = m.LineColError.Size()
		n += 1 + l + sovCompilerStatus(uint64(l))
	}
	return n
}
func (m *CompilerResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCompilerStatus(uint64(l))
	}
	if m.LogicalPlan != nil {
		l = m.LogicalPlan.Size()
		n += 1 + l + sovCompilerStatus(uint64(l))
	}
	return n
}

func (m *CompilerErrorGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovCompilerStatus(uint64(l))
		}
	}
	return n
}

func sovCompilerStatus(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCompilerStatus(x uint64) (n int) {
	return sovCompilerStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LineColError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LineColError{`,
		`Line:` + fmt.Sprintf("%v", this.Line) + `,`,
		`Column:` + fmt.Sprintf("%v", this.Column) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompilerError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompilerError{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompilerError_LineColError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompilerError_LineColError{`,
		`LineColError:` + strings.Replace(fmt.Sprintf("%v", this.LineColError), "LineColError", "LineColError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompilerResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompilerResult{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "proto1.Status", 1) + `,`,
		`LogicalPlan:` + strings.Replace(fmt.Sprintf("%v", this.LogicalPlan), "Plan", "proto2.Plan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompilerErrorGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompilerErrorGroup{`,
		`Errors:` + strings.Replace(fmt.Sprintf("%v", this.Errors), "CompilerError", "CompilerError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCompilerStatus(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LineColError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompilerStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LineColError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LineColError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			m.Column = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Column |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompilerStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompilerStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompilerStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompilerError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompilerStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilerError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilerError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CompilerErrorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineColError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompilerStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LineColError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &CompilerError_LineColError{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompilerStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompilerStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompilerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompilerStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompilerStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &proto1.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompilerStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogicalPlan == nil {
				m.LogicalPlan = &proto2.Plan{}
			}
			if err := m.LogicalPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompilerStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompilerStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompilerErrorGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompilerStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilerErrorGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilerErrorGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompilerStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &CompilerError{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompilerStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompilerStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompilerStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompilerStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompilerStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCompilerStatus
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompilerStatus
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompilerStatus(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompilerStatus = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompilerStatus   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("src/carnot/compiler/compilerpb/compiler_status.proto", fileDescriptor_compiler_status_5dfc841eb738e919)
}

var fileDescriptor_compiler_status_5dfc841eb738e919 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0x9e, 0xb1, 0xeb, 0x2e, 0xbe, 0xac, 0x4b, 0x1d, 0x41, 0x42, 0xc5, 0xa1, 0xe4, 0xb4, 0x58,
	0x9d, 0xc8, 0xea, 0xcd, 0x8b, 0x74, 0x5b, 0x54, 0x5c, 0x52, 0x99, 0x56, 0x84, 0x5e, 0x42, 0x12,
	0x86, 0x12, 0x98, 0x64, 0x86, 0x49, 0x72, 0xa8, 0x27, 0x7f, 0x82, 0x3f, 0xc3, 0xbb, 0x7f, 0xc2,
	0xe3, 0x1e, 0x7b, 0x74, 0xb3, 0x17, 0x8f, 0xfd, 0x09, 0x92, 0x49, 0xb6, 0x4d, 0x11, 0x94, 0x9e,
	0xf2, 0xbe, 0x79, 0xef, 0xfb, 0xde, 0xf7, 0x3e, 0x02, 0xaf, 0x0a, 0x93, 0xf8, 0x49, 0x64, 0x72,
	0x55, 0xfa, 0x89, 0xca, 0x74, 0x2a, 0x85, 0xb9, 0x2a, 0x74, 0x7c, 0x55, 0x86, 0x45, 0x19, 0x95,
	0x55, 0xc1, 0xb4, 0x51, 0xa5, 0x22, 0x4f, 0xb4, 0x64, 0x2d, 0x89, 0x6d, 0x06, 0xd8, 0x35, 0x69,
	0xc7, 0xb3, 0xa2, 0x2a, 0xcb, 0x54, 0xee, 0xc7, 0x51, 0x21, 0x7c, 0xcb, 0xf2, 0xfb, 0x12, 0x3b,
	0x8f, 0x7b, 0x8b, 0xdb, 0xb6, 0x96, 0x51, 0xde, 0x36, 0xbd, 0x13, 0x18, 0x2f, 0xd2, 0x5c, 0xcc,
	0x95, 0x3c, 0x34, 0x46, 0x19, 0x42, 0x60, 0x20, 0xd3, 0x5c, 0xb8, 0x78, 0x17, 0x4f, 0x07, 0xdc,
	0xd6, 0xe4, 0x11, 0x0c, 0x13, 0x25, 0xab, 0x2c, 0x77, 0xef, 0xd8, 0xd7, 0x0e, 0x11, 0x17, 0x46,
	0x99, 0x28, 0x8a, 0xe8, 0x4c, 0xb8, 0x5b, 0xbb, 0x78, 0x7a, 0x8f, 0x6f, 0xa0, 0xf7, 0x03, 0xc3,
	0xfd, 0x79, 0xe7, 0xb2, 0xd5, 0x3d, 0x80, 0x41, 0x79, 0xae, 0x5b, 0xdd, 0xc9, 0xec, 0x05, 0xfb,
	0xe7, 0x59, 0xec, 0x06, 0xf7, 0xe4, 0x5c, 0x0b, 0x6e, 0xd9, 0xe4, 0x18, 0x26, 0x8d, 0xa3, 0x30,
	0x51, 0x32, 0x14, 0x4d, 0xcf, 0x3a, 0x72, 0x66, 0x7b, 0xff, 0xd1, 0xeb, 0x9f, 0xf8, 0x0e, 0xf1,
	0xb1, 0xec, 0xe1, 0xfd, 0x11, 0xdc, 0xb5, 0x5a, 0xde, 0x17, 0x98, 0x6c, 0x16, 0x73, 0x51, 0x54,
	0xb2, 0x24, 0x7b, 0x30, 0x6c, 0xa3, 0xb4, 0xbe, 0x9d, 0xd9, 0xc3, 0x66, 0x4f, 0xfb, 0xa2, 0x63,
	0x76, 0x6c, 0x0b, 0xde, 0x8d, 0x90, 0xd7, 0x30, 0x96, 0xea, 0x2c, 0x4d, 0x22, 0x19, 0x36, 0x01,
	0x77, 0xd6, 0xdc, 0xbe, 0x35, 0xfb, 0xd1, 0x31, 0xfb, 0x28, 0xa3, 0x9c, 0x3b, 0xdd, 0x74, 0x03,
	0xbc, 0x53, 0x20, 0x37, 0x8e, 0x7e, 0x6b, 0x54, 0xa5, 0xc9, 0x01, 0x0c, 0xad, 0xb5, 0x66, 0xff,
	0xd6, 0xd4, 0x99, 0x3d, 0xbb, 0x4d, 0x6e, 0xbc, 0xe3, 0x3e, 0x7d, 0x0e, 0x0f, 0xfe, 0x0a, 0x94,
	0x38, 0x30, 0xfa, 0x14, 0x7c, 0x08, 0x8e, 0x3e, 0x07, 0xdb, 0xa8, 0x01, 0x8b, 0xf7, 0xc1, 0xe1,
	0xfc, 0x68, 0xb1, 0x8d, 0xf7, 0xdf, 0x2c, 0x57, 0x14, 0x5d, 0xac, 0x28, 0xba, 0x5c, 0x51, 0xfc,
	0xb5, 0xa6, 0xf8, 0x7b, 0x4d, 0xf1, 0xcf, 0x9a, 0xe2, 0x65, 0x4d, 0xf1, 0xaf, 0x9a, 0xe2, 0xdf,
	0x35, 0x45, 0x97, 0x35, 0xc5, 0xdf, 0xd6, 0x14, 0x2d, 0xd7, 0x14, 0x5d, 0xac, 0x29, 0x3a, 0x85,
	0x6b, 0x1b, 0xf1, 0xd0, 0xfe, 0x5b, 0x2f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x32, 0x73,
	0x1c, 0xf3, 0x02, 0x00, 0x00,
}
