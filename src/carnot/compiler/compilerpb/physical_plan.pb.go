// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/carnot/compiler/compilerpb/physical_plan.proto

package compilerpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	planpb "pixielabs.ai/pixielabs/src/carnot/planpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CarnotInfo struct {
	QueryBrokerAddress   string `protobuf:"bytes,1,opt,name=query_broker_address,json=queryBrokerAddress,proto3" json:"query_broker_address,omitempty"`
	HasGrpcServer        bool   `protobuf:"varint,2,opt,name=has_grpc_server,json=hasGrpcServer,proto3" json:"has_grpc_server,omitempty"`
	GrpcAddress          string `protobuf:"bytes,3,opt,name=grpc_address,json=grpcAddress,proto3" json:"grpc_address,omitempty"`
	HasDataStore         bool   `protobuf:"varint,4,opt,name=has_data_store,json=hasDataStore,proto3" json:"has_data_store,omitempty"`
	ProcessesData        bool   `protobuf:"varint,5,opt,name=processes_data,json=processesData,proto3" json:"processes_data,omitempty"`
	AcceptsRemoteSources bool   `protobuf:"varint,6,opt,name=accepts_remote_sources,json=acceptsRemoteSources,proto3" json:"accepts_remote_sources,omitempty"`
}

func (m *CarnotInfo) Reset()      { *m = CarnotInfo{} }
func (*CarnotInfo) ProtoMessage() {}
func (*CarnotInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f74b560597036a5, []int{0}
}
func (m *CarnotInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CarnotInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CarnotInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CarnotInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CarnotInfo.Merge(m, src)
}
func (m *CarnotInfo) XXX_Size() int {
	return m.Size()
}
func (m *CarnotInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CarnotInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CarnotInfo proto.InternalMessageInfo

func (m *CarnotInfo) GetQueryBrokerAddress() string {
	if m != nil {
		return m.QueryBrokerAddress
	}
	return ""
}

func (m *CarnotInfo) GetHasGrpcServer() bool {
	if m != nil {
		return m.HasGrpcServer
	}
	return false
}

func (m *CarnotInfo) GetGrpcAddress() string {
	if m != nil {
		return m.GrpcAddress
	}
	return ""
}

func (m *CarnotInfo) GetHasDataStore() bool {
	if m != nil {
		return m.HasDataStore
	}
	return false
}

func (m *CarnotInfo) GetProcessesData() bool {
	if m != nil {
		return m.ProcessesData
	}
	return false
}

func (m *CarnotInfo) GetAcceptsRemoteSources() bool {
	if m != nil {
		return m.AcceptsRemoteSources
	}
	return false
}

type PhysicalState struct {
	CarnotInfo []*CarnotInfo `protobuf:"bytes,1,rep,name=carnot_info,json=carnotInfo,proto3" json:"carnot_info,omitempty"`
}

func (m *PhysicalState) Reset()      { *m = PhysicalState{} }
func (*PhysicalState) ProtoMessage() {}
func (*PhysicalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f74b560597036a5, []int{1}
}
func (m *PhysicalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalState.Merge(m, src)
}
func (m *PhysicalState) XXX_Size() int {
	return m.Size()
}
func (m *PhysicalState) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalState.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalState proto.InternalMessageInfo

func (m *PhysicalState) GetCarnotInfo() []*CarnotInfo {
	if m != nil {
		return m.CarnotInfo
	}
	return nil
}

type PhysicalPlan struct {
	QbAddressToPlan  map[string]*planpb.Plan `protobuf:"bytes,1,rep,name=qb_address_to_plan,json=qbAddressToPlan,proto3" json:"qb_address_to_plan,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	QbAddressToDagId map[string]uint64       `protobuf:"bytes,2,rep,name=qb_address_to_dag_id,json=qbAddressToDagId,proto3" json:"qb_address_to_dag_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Dag              *planpb.DAG             `protobuf:"bytes,3,opt,name=dag,proto3" json:"dag,omitempty"`
}

func (m *PhysicalPlan) Reset()      { *m = PhysicalPlan{} }
func (*PhysicalPlan) ProtoMessage() {}
func (*PhysicalPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f74b560597036a5, []int{2}
}
func (m *PhysicalPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicalPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicalPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicalPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalPlan.Merge(m, src)
}
func (m *PhysicalPlan) XXX_Size() int {
	return m.Size()
}
func (m *PhysicalPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalPlan.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalPlan proto.InternalMessageInfo

func (m *PhysicalPlan) GetQbAddressToPlan() map[string]*planpb.Plan {
	if m != nil {
		return m.QbAddressToPlan
	}
	return nil
}

func (m *PhysicalPlan) GetQbAddressToDagId() map[string]uint64 {
	if m != nil {
		return m.QbAddressToDagId
	}
	return nil
}

func (m *PhysicalPlan) GetDag() *planpb.DAG {
	if m != nil {
		return m.Dag
	}
	return nil
}

func init() {
	proto.RegisterType((*CarnotInfo)(nil), "pl.carnot.compiler.compilerpb.CarnotInfo")
	proto.RegisterType((*PhysicalState)(nil), "pl.carnot.compiler.compilerpb.PhysicalState")
	proto.RegisterType((*PhysicalPlan)(nil), "pl.carnot.compiler.compilerpb.PhysicalPlan")
	proto.RegisterMapType((map[string]uint64)(nil), "pl.carnot.compiler.compilerpb.PhysicalPlan.QbAddressToDagIdEntry")
	proto.RegisterMapType((map[string]*planpb.Plan)(nil), "pl.carnot.compiler.compilerpb.PhysicalPlan.QbAddressToPlanEntry")
}

func init() {
	proto.RegisterFile("src/carnot/compiler/compilerpb/physical_plan.proto", fileDescriptor_4f74b560597036a5)
}

var fileDescriptor_4f74b560597036a5 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcb, 0x6e, 0x13, 0x3f,
	0x18, 0xc5, 0xc7, 0x49, 0x5b, 0xfd, 0xff, 0x5f, 0x7a, 0x93, 0x95, 0x56, 0xa3, 0x08, 0xac, 0x10,
	0x71, 0x09, 0x12, 0x9a, 0xa0, 0xc0, 0x02, 0xb1, 0x6a, 0xda, 0xa0, 0xaa, 0xac, 0xca, 0x84, 0x55,
	0x59, 0x58, 0x8e, 0xc7, 0x4d, 0xa2, 0x4e, 0xc6, 0x13, 0xdb, 0xa9, 0x94, 0x1d, 0x0f, 0xc0, 0x82,
	0xc7, 0xe0, 0x19, 0x78, 0x02, 0x96, 0x59, 0x76, 0x49, 0x26, 0x1b, 0x96, 0x7d, 0x04, 0x34, 0x9e,
	0xdc, 0x0a, 0x11, 0x48, 0xec, 0x9c, 0xef, 0x9c, 0xef, 0x77, 0x92, 0x63, 0x07, 0xea, 0x5a, 0xf1,
	0x1a, 0x67, 0x2a, 0x92, 0xa6, 0xc6, 0x65, 0x3f, 0xee, 0x85, 0x42, 0x2d, 0x0e, 0x71, 0xbb, 0x16,
	0x77, 0x47, 0xba, 0xc7, 0x59, 0x48, 0xe3, 0x90, 0x45, 0x5e, 0xac, 0xa4, 0x91, 0xf8, 0x7e, 0x1c,
	0x7a, 0xd9, 0x8a, 0x37, 0x77, 0x7a, 0xcb, 0x95, 0xd2, 0xbd, 0x15, 0x64, 0xba, 0x95, 0x52, 0x16,
	0xcb, 0x95, 0x4f, 0x39, 0x80, 0x13, 0x2b, 0x9e, 0x45, 0x97, 0x12, 0x3f, 0x87, 0xe2, 0x60, 0x28,
	0xd4, 0x88, 0xb6, 0x95, 0xbc, 0x12, 0x8a, 0xb2, 0x20, 0x50, 0x42, 0x6b, 0x17, 0x95, 0x51, 0xf5,
	0x7f, 0x1f, 0x5b, 0xed, 0xd8, 0x4a, 0x8d, 0x4c, 0xc1, 0x8f, 0x61, 0xaf, 0xcb, 0x34, 0xed, 0xa8,
	0x98, 0x53, 0x2d, 0xd4, 0xb5, 0x50, 0x6e, 0xae, 0x8c, 0xaa, 0xff, 0xf9, 0x3b, 0x5d, 0xa6, 0x4f,
	0x55, 0xcc, 0x5b, 0x76, 0x88, 0x1f, 0xc0, 0xb6, 0xf5, 0xcc, 0x89, 0x79, 0x4b, 0x2c, 0xa4, 0xb3,
	0x39, 0xea, 0x21, 0xec, 0xa6, 0xa8, 0x80, 0x19, 0x46, 0xb5, 0x91, 0x4a, 0xb8, 0x1b, 0x96, 0xb4,
	0xdd, 0x65, 0xba, 0xc9, 0x0c, 0x6b, 0xa5, 0x33, 0xfc, 0x08, 0x76, 0x63, 0x25, 0xb9, 0xd0, 0x5a,
	0x64, 0x5e, 0x77, 0x33, 0xcb, 0x5b, 0x4c, 0x53, 0x2f, 0x7e, 0x09, 0x87, 0x8c, 0x73, 0x11, 0x1b,
	0x4d, 0x95, 0xe8, 0x4b, 0x23, 0xa8, 0x96, 0x43, 0xc5, 0x85, 0x76, 0xb7, 0xac, 0xbd, 0x38, 0x53,
	0x7d, 0x2b, 0xb6, 0x32, 0xad, 0xf2, 0x01, 0x76, 0xce, 0x67, 0x15, 0xb7, 0x0c, 0x33, 0x02, 0xbf,
	0x85, 0x42, 0xd6, 0x1d, 0xed, 0x45, 0x97, 0xd2, 0x45, 0xe5, 0x7c, 0xb5, 0x50, 0x7f, 0xea, 0xfd,
	0xb1, 0x72, 0x6f, 0x59, 0xa8, 0x0f, 0x7c, 0x71, 0xae, 0x7c, 0xcd, 0xc3, 0xf6, 0x9c, 0x7e, 0x1e,
	0xb2, 0x08, 0xf7, 0x01, 0x0f, 0xda, 0xf3, 0x46, 0xa8, 0x91, 0xf6, 0x56, 0x67, 0x19, 0x47, 0x7f,
	0xc9, 0x58, 0x05, 0x79, 0xef, 0xda, 0xb3, 0x0e, 0xdf, 0xcb, 0xf4, 0xf3, 0x9b, 0xc8, 0xa8, 0x91,
	0xbf, 0x37, 0xb8, 0x3b, 0xc5, 0x03, 0x28, 0xde, 0x8d, 0x0b, 0x58, 0x87, 0xf6, 0x02, 0x37, 0x67,
	0x03, 0x1b, 0xff, 0x18, 0xd8, 0x64, 0x9d, 0xb3, 0x20, 0x4b, 0xdc, 0x1f, 0xfc, 0x32, 0xc6, 0x4f,
	0x20, 0x1f, 0xb0, 0x8e, 0xbd, 0xec, 0x42, 0xfd, 0x60, 0x25, 0x21, 0x7b, 0x89, 0x5e, 0xb3, 0x71,
	0xea, 0xa7, 0x8e, 0xd2, 0x05, 0x14, 0xd7, 0xfd, 0x08, 0xbc, 0x0f, 0xf9, 0x2b, 0x31, 0x9a, 0xbd,
	0xbf, 0xf4, 0x88, 0x9f, 0xc1, 0xe6, 0x35, 0x0b, 0x87, 0xc2, 0x3e, 0xb3, 0x42, 0xfd, 0xf0, 0x77,
	0x68, 0xba, 0xed, 0x67, 0xa6, 0xd7, 0xb9, 0x57, 0xa8, 0x74, 0x02, 0x07, 0x6b, 0xbf, 0xef, 0x1a,
	0x78, 0x71, 0x15, 0xbe, 0xb1, 0x02, 0x39, 0x3e, 0x1a, 0x4f, 0x88, 0x73, 0x33, 0x21, 0xce, 0xed,
	0x84, 0xa0, 0x8f, 0x09, 0x41, 0x5f, 0x12, 0x82, 0xbe, 0x25, 0x04, 0x8d, 0x13, 0x82, 0xbe, 0x27,
	0x04, 0xfd, 0x48, 0x88, 0x73, 0x9b, 0x10, 0xf4, 0x79, 0x4a, 0x9c, 0xf1, 0x94, 0x38, 0x37, 0x53,
	0xe2, 0x5c, 0xc0, 0xb2, 0xc0, 0xf6, 0x96, 0xfd, 0xc7, 0xbd, 0xf8, 0x19, 0x00, 0x00, 0xff, 0xff,
	0xc9, 0x37, 0x03, 0xe7, 0xe4, 0x03, 0x00, 0x00,
}

func (this *CarnotInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CarnotInfo)
	if !ok {
		that2, ok := that.(CarnotInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryBrokerAddress != that1.QueryBrokerAddress {
		return false
	}
	if this.HasGrpcServer != that1.HasGrpcServer {
		return false
	}
	if this.GrpcAddress != that1.GrpcAddress {
		return false
	}
	if this.HasDataStore != that1.HasDataStore {
		return false
	}
	if this.ProcessesData != that1.ProcessesData {
		return false
	}
	if this.AcceptsRemoteSources != that1.AcceptsRemoteSources {
		return false
	}
	return true
}
func (this *PhysicalState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PhysicalState)
	if !ok {
		that2, ok := that.(PhysicalState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CarnotInfo) != len(that1.CarnotInfo) {
		return false
	}
	for i := range this.CarnotInfo {
		if !this.CarnotInfo[i].Equal(that1.CarnotInfo[i]) {
			return false
		}
	}
	return true
}
func (this *PhysicalPlan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PhysicalPlan)
	if !ok {
		that2, ok := that.(PhysicalPlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.QbAddressToPlan) != len(that1.QbAddressToPlan) {
		return false
	}
	for i := range this.QbAddressToPlan {
		if !this.QbAddressToPlan[i].Equal(that1.QbAddressToPlan[i]) {
			return false
		}
	}
	if len(this.QbAddressToDagId) != len(that1.QbAddressToDagId) {
		return false
	}
	for i := range this.QbAddressToDagId {
		if this.QbAddressToDagId[i] != that1.QbAddressToDagId[i] {
			return false
		}
	}
	if !this.Dag.Equal(that1.Dag) {
		return false
	}
	return true
}
func (this *CarnotInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&compilerpb.CarnotInfo{")
	s = append(s, "QueryBrokerAddress: "+fmt.Sprintf("%#v", this.QueryBrokerAddress)+",\n")
	s = append(s, "HasGrpcServer: "+fmt.Sprintf("%#v", this.HasGrpcServer)+",\n")
	s = append(s, "GrpcAddress: "+fmt.Sprintf("%#v", this.GrpcAddress)+",\n")
	s = append(s, "HasDataStore: "+fmt.Sprintf("%#v", this.HasDataStore)+",\n")
	s = append(s, "ProcessesData: "+fmt.Sprintf("%#v", this.ProcessesData)+",\n")
	s = append(s, "AcceptsRemoteSources: "+fmt.Sprintf("%#v", this.AcceptsRemoteSources)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhysicalState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&compilerpb.PhysicalState{")
	if this.CarnotInfo != nil {
		s = append(s, "CarnotInfo: "+fmt.Sprintf("%#v", this.CarnotInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhysicalPlan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&compilerpb.PhysicalPlan{")
	keysForQbAddressToPlan := make([]string, 0, len(this.QbAddressToPlan))
	for k, _ := range this.QbAddressToPlan {
		keysForQbAddressToPlan = append(keysForQbAddressToPlan, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQbAddressToPlan)
	mapStringForQbAddressToPlan := "map[string]*planpb.Plan{"
	for _, k := range keysForQbAddressToPlan {
		mapStringForQbAddressToPlan += fmt.Sprintf("%#v: %#v,", k, this.QbAddressToPlan[k])
	}
	mapStringForQbAddressToPlan += "}"
	if this.QbAddressToPlan != nil {
		s = append(s, "QbAddressToPlan: "+mapStringForQbAddressToPlan+",\n")
	}
	keysForQbAddressToDagId := make([]string, 0, len(this.QbAddressToDagId))
	for k, _ := range this.QbAddressToDagId {
		keysForQbAddressToDagId = append(keysForQbAddressToDagId, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQbAddressToDagId)
	mapStringForQbAddressToDagId := "map[string]uint64{"
	for _, k := range keysForQbAddressToDagId {
		mapStringForQbAddressToDagId += fmt.Sprintf("%#v: %#v,", k, this.QbAddressToDagId[k])
	}
	mapStringForQbAddressToDagId += "}"
	if this.QbAddressToDagId != nil {
		s = append(s, "QbAddressToDagId: "+mapStringForQbAddressToDagId+",\n")
	}
	if this.Dag != nil {
		s = append(s, "Dag: "+fmt.Sprintf("%#v", this.Dag)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPhysicalPlan(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CarnotInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CarnotInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueryBrokerAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPhysicalPlan(dAtA, i, uint64(len(m.QueryBrokerAddress)))
		i += copy(dAtA[i:], m.QueryBrokerAddress)
	}
	if m.HasGrpcServer {
		dAtA[i] = 0x10
		i++
		if m.HasGrpcServer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.GrpcAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPhysicalPlan(dAtA, i, uint64(len(m.GrpcAddress)))
		i += copy(dAtA[i:], m.GrpcAddress)
	}
	if m.HasDataStore {
		dAtA[i] = 0x20
		i++
		if m.HasDataStore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ProcessesData {
		dAtA[i] = 0x28
		i++
		if m.ProcessesData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AcceptsRemoteSources {
		dAtA[i] = 0x30
		i++
		if m.AcceptsRemoteSources {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PhysicalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicalState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CarnotInfo) > 0 {
		for _, msg := range m.CarnotInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPhysicalPlan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PhysicalPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicalPlan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QbAddressToPlan) > 0 {
		for k, _ := range m.QbAddressToPlan {
			dAtA[i] = 0xa
			i++
			v := m.QbAddressToPlan[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPhysicalPlan(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovPhysicalPlan(uint64(len(k))) + msgSize
			i = encodeVarintPhysicalPlan(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPhysicalPlan(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPhysicalPlan(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if len(m.QbAddressToDagId) > 0 {
		for k, _ := range m.QbAddressToDagId {
			dAtA[i] = 0x12
			i++
			v := m.QbAddressToDagId[k]
			mapSize := 1 + len(k) + sovPhysicalPlan(uint64(len(k))) + 1 + sovPhysicalPlan(uint64(v))
			i = encodeVarintPhysicalPlan(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPhysicalPlan(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintPhysicalPlan(dAtA, i, uint64(v))
		}
	}
	if m.Dag != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPhysicalPlan(dAtA, i, uint64(m.Dag.Size()))
		n2, err := m.Dag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintPhysicalPlan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CarnotInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryBrokerAddress)
	if l > 0 {
		n += 1 + l + sovPhysicalPlan(uint64(l))
	}
	if m.HasGrpcServer {
		n += 2
	}
	l = len(m.GrpcAddress)
	if l > 0 {
		n += 1 + l + sovPhysicalPlan(uint64(l))
	}
	if m.HasDataStore {
		n += 2
	}
	if m.ProcessesData {
		n += 2
	}
	if m.AcceptsRemoteSources {
		n += 2
	}
	return n
}

func (m *PhysicalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CarnotInfo) > 0 {
		for _, e := range m.CarnotInfo {
			l = e.Size()
			n += 1 + l + sovPhysicalPlan(uint64(l))
		}
	}
	return n
}

func (m *PhysicalPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QbAddressToPlan) > 0 {
		for k, v := range m.QbAddressToPlan {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPhysicalPlan(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPhysicalPlan(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPhysicalPlan(uint64(mapEntrySize))
		}
	}
	if len(m.QbAddressToDagId) > 0 {
		for k, v := range m.QbAddressToDagId {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPhysicalPlan(uint64(len(k))) + 1 + sovPhysicalPlan(uint64(v))
			n += mapEntrySize + 1 + sovPhysicalPlan(uint64(mapEntrySize))
		}
	}
	if m.Dag != nil {
		l = m.Dag.Size()
		n += 1 + l + sovPhysicalPlan(uint64(l))
	}
	return n
}

func sovPhysicalPlan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPhysicalPlan(x uint64) (n int) {
	return sovPhysicalPlan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CarnotInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarnotInfo{`,
		`QueryBrokerAddress:` + fmt.Sprintf("%v", this.QueryBrokerAddress) + `,`,
		`HasGrpcServer:` + fmt.Sprintf("%v", this.HasGrpcServer) + `,`,
		`GrpcAddress:` + fmt.Sprintf("%v", this.GrpcAddress) + `,`,
		`HasDataStore:` + fmt.Sprintf("%v", this.HasDataStore) + `,`,
		`ProcessesData:` + fmt.Sprintf("%v", this.ProcessesData) + `,`,
		`AcceptsRemoteSources:` + fmt.Sprintf("%v", this.AcceptsRemoteSources) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalState{`,
		`CarnotInfo:` + strings.Replace(fmt.Sprintf("%v", this.CarnotInfo), "CarnotInfo", "CarnotInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalPlan) String() string {
	if this == nil {
		return "nil"
	}
	keysForQbAddressToPlan := make([]string, 0, len(this.QbAddressToPlan))
	for k, _ := range this.QbAddressToPlan {
		keysForQbAddressToPlan = append(keysForQbAddressToPlan, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQbAddressToPlan)
	mapStringForQbAddressToPlan := "map[string]*planpb.Plan{"
	for _, k := range keysForQbAddressToPlan {
		mapStringForQbAddressToPlan += fmt.Sprintf("%v: %v,", k, this.QbAddressToPlan[k])
	}
	mapStringForQbAddressToPlan += "}"
	keysForQbAddressToDagId := make([]string, 0, len(this.QbAddressToDagId))
	for k, _ := range this.QbAddressToDagId {
		keysForQbAddressToDagId = append(keysForQbAddressToDagId, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQbAddressToDagId)
	mapStringForQbAddressToDagId := "map[string]uint64{"
	for _, k := range keysForQbAddressToDagId {
		mapStringForQbAddressToDagId += fmt.Sprintf("%v: %v,", k, this.QbAddressToDagId[k])
	}
	mapStringForQbAddressToDagId += "}"
	s := strings.Join([]string{`&PhysicalPlan{`,
		`QbAddressToPlan:` + mapStringForQbAddressToPlan + `,`,
		`QbAddressToDagId:` + mapStringForQbAddressToDagId + `,`,
		`Dag:` + strings.Replace(fmt.Sprintf("%v", this.Dag), "DAG", "planpb.DAG", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPhysicalPlan(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CarnotInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhysicalPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarnotInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarnotInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryBrokerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryBrokerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasGrpcServer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasGrpcServer = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasDataStore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasDataStore = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessesData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessesData = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptsRemoteSources", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AcceptsRemoteSources = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPhysicalPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhysicalPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarnotInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarnotInfo = append(m.CarnotInfo, &CarnotInfo{})
			if err := m.CarnotInfo[len(m.CarnotInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhysicalPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicalPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhysicalPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicalPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicalPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QbAddressToPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QbAddressToPlan == nil {
				m.QbAddressToPlan = make(map[string]*planpb.Plan)
			}
			var mapkey string
			var mapvalue *planpb.Plan
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhysicalPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhysicalPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPhysicalPlan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPhysicalPlan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhysicalPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPhysicalPlan
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPhysicalPlan
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &planpb.Plan{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPhysicalPlan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPhysicalPlan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QbAddressToPlan[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QbAddressToDagId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QbAddressToDagId == nil {
				m.QbAddressToDagId = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhysicalPlan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhysicalPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPhysicalPlan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPhysicalPlan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhysicalPlan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPhysicalPlan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPhysicalPlan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.QbAddressToDagId[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dag == nil {
				m.Dag = &planpb.DAG{}
			}
			if err := m.Dag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhysicalPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPhysicalPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhysicalPlan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhysicalPlan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhysicalPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhysicalPlan
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPhysicalPlan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPhysicalPlan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPhysicalPlan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPhysicalPlan
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPhysicalPlan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhysicalPlan   = fmt.Errorf("proto: integer overflow")
)
