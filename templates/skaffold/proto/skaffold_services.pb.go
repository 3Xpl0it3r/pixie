// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: templates/skaffold/proto/skaffold_services.proto

package skaffold_services

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ServiceConfig struct {
	Deployment               string `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	PushArtifacts            bool   `protobuf:"varint,2,opt,name=push_artifacts,json=pushArtifacts,proto3" json:"push_artifacts,omitempty"`
	BazelServicesProxyTarget string `protobuf:"bytes,3,opt,name=bazel_services_proxy_target,json=bazelServicesProxyTarget,proto3" json:"bazel_services_proxy_target,omitempty"`
	ExternalAddress          string `protobuf:"bytes,4,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
	HasCloudIngress          bool   `protobuf:"varint,5,opt,name=has_cloud_ingress,json=hasCloudIngress,proto3" json:"has_cloud_ingress,omitempty"`
	LoadBalancerIP           string `protobuf:"bytes,6,opt,name=load_balancer_ip,json=loadBalancerIp,proto3" json:"load_balancer_ip,omitempty"`
}

func (m *ServiceConfig) Reset()      { *m = ServiceConfig{} }
func (*ServiceConfig) ProtoMessage() {}
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d33cda22078f711d, []int{0}
}
func (m *ServiceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConfig.Merge(m, src)
}
func (m *ServiceConfig) XXX_Size() int {
	return m.Size()
}
func (m *ServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConfig proto.InternalMessageInfo

func (m *ServiceConfig) GetDeployment() string {
	if m != nil {
		return m.Deployment
	}
	return ""
}

func (m *ServiceConfig) GetPushArtifacts() bool {
	if m != nil {
		return m.PushArtifacts
	}
	return false
}

func (m *ServiceConfig) GetBazelServicesProxyTarget() string {
	if m != nil {
		return m.BazelServicesProxyTarget
	}
	return ""
}

func (m *ServiceConfig) GetExternalAddress() string {
	if m != nil {
		return m.ExternalAddress
	}
	return ""
}

func (m *ServiceConfig) GetHasCloudIngress() bool {
	if m != nil {
		return m.HasCloudIngress
	}
	return false
}

func (m *ServiceConfig) GetLoadBalancerIP() string {
	if m != nil {
		return m.LoadBalancerIP
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceConfig)(nil), "skaffold_services.ServiceConfig")
}

func init() {
	proto.RegisterFile("templates/skaffold/proto/skaffold_services.proto", fileDescriptor_d33cda22078f711d)
}

var fileDescriptor_d33cda22078f711d = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x8b, 0x13, 0x31,
	0x18, 0x86, 0x27, 0xab, 0x2e, 0x1a, 0xd8, 0xee, 0x6e, 0x4e, 0x83, 0x42, 0x5c, 0x04, 0x61, 0x15,
	0xec, 0x08, 0x1e, 0x57, 0x0f, 0x6d, 0x4f, 0x05, 0x0f, 0xa5, 0x7a, 0xf2, 0x12, 0xbe, 0x99, 0xc9,
	0xcc, 0x04, 0xd3, 0x49, 0x4c, 0x32, 0xd2, 0x7a, 0xf2, 0x27, 0xf8, 0x33, 0xc4, 0x5f, 0xe2, 0xb1,
	0xc7, 0x9e, 0xc4, 0xa6, 0x17, 0x8f, 0xfd, 0x09, 0x32, 0x99, 0xb6, 0x14, 0x7a, 0xcb, 0xfb, 0x7c,
	0xef, 0xf7, 0xe6, 0x83, 0x17, 0xbf, 0x76, 0x7c, 0xa6, 0x25, 0x38, 0x6e, 0x13, 0xfb, 0x19, 0x8a,
	0x42, 0xc9, 0x3c, 0xd1, 0x46, 0x39, 0x75, 0x90, 0xcc, 0x72, 0xf3, 0x55, 0x64, 0xdc, 0xf6, 0x03,
	0x27, 0xd7, 0x27, 0x83, 0xc7, 0xaf, 0x4a, 0xe1, 0xaa, 0x26, 0xed, 0x67, 0x6a, 0x96, 0x94, 0xaa,
	0x54, 0x5d, 0x42, 0xda, 0x14, 0x41, 0x75, 0x71, 0xed, 0xab, 0x4b, 0x78, 0xf6, 0xeb, 0x0c, 0x5f,
	0x7c, 0xe8, 0x76, 0x47, 0xaa, 0x2e, 0x44, 0x49, 0x28, 0xc6, 0x39, 0xd7, 0x52, 0x2d, 0x66, 0xbc,
	0x76, 0x31, 0xba, 0x41, 0xb7, 0x8f, 0xa6, 0x47, 0x84, 0x3c, 0xc7, 0x3d, 0xdd, 0xd8, 0x8a, 0x81,
	0x71, 0xa2, 0x80, 0xcc, 0xd9, 0xf8, 0xec, 0x06, 0xdd, 0x3e, 0x9c, 0x5e, 0xb4, 0x74, 0xb0, 0x87,
	0xe4, 0x1d, 0x7e, 0x92, 0xc2, 0x37, 0x2e, 0x0f, 0x97, 0x31, 0x6d, 0xd4, 0x7c, 0xc1, 0x1c, 0x98,
	0x92, 0xbb, 0xf8, 0x5e, 0xc8, 0x8d, 0x83, 0x65, 0xf7, 0xbf, 0x9d, 0xb4, 0x86, 0x8f, 0x61, 0x4e,
	0x5e, 0xe0, 0x2b, 0x3e, 0x77, 0xdc, 0xd4, 0x20, 0x19, 0xe4, 0xb9, 0xe1, 0xd6, 0xc6, 0xf7, 0xc3,
	0xce, 0xe5, 0x9e, 0x0f, 0x3a, 0x4c, 0x5e, 0xe2, 0xeb, 0x0a, 0x2c, 0xcb, 0xa4, 0x6a, 0x72, 0x26,
	0xea, 0x32, 0x78, 0x1f, 0x84, 0x9b, 0x2e, 0x2b, 0xb0, 0xa3, 0x96, 0x8f, 0x3b, 0x4c, 0xde, 0xe2,
	0x2b, 0xa9, 0x20, 0x67, 0x29, 0x48, 0xa8, 0x33, 0x6e, 0x98, 0xd0, 0xf1, 0x79, 0x1b, 0x3b, 0x24,
	0xfe, 0xcf, 0xd3, 0xde, 0x7b, 0x05, 0xf9, 0x70, 0x37, 0x1a, 0x4f, 0xa6, 0x3d, 0x79, 0xac, 0xf5,
	0xf0, 0xcb, 0x72, 0x4d, 0xa3, 0xd5, 0x9a, 0x46, 0xdb, 0x35, 0x45, 0xdf, 0x3d, 0x45, 0x3f, 0x3d,
	0x45, 0xbf, 0x3d, 0x45, 0x4b, 0x4f, 0xd1, 0x5f, 0x4f, 0xd1, 0x3f, 0x4f, 0xa3, 0xad, 0xa7, 0xe8,
	0xc7, 0x86, 0x46, 0xcb, 0x0d, 0x8d, 0x56, 0x1b, 0x1a, 0x7d, 0xba, 0xd3, 0x62, 0x2e, 0xb8, 0x84,
	0xd4, 0xf6, 0x41, 0x24, 0x07, 0x91, 0x9c, 0xb6, 0x7d, 0x77, 0x52, 0x67, 0x7a, 0x1e, 0x6a, 0x7a,
	0xf3, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xc7, 0x6f, 0x15, 0x1c, 0x02, 0x00, 0x00,
}

func (this *ServiceConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceConfig)
	if !ok {
		that2, ok := that.(ServiceConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Deployment != that1.Deployment {
		return false
	}
	if this.PushArtifacts != that1.PushArtifacts {
		return false
	}
	if this.BazelServicesProxyTarget != that1.BazelServicesProxyTarget {
		return false
	}
	if this.ExternalAddress != that1.ExternalAddress {
		return false
	}
	if this.HasCloudIngress != that1.HasCloudIngress {
		return false
	}
	if this.LoadBalancerIP != that1.LoadBalancerIP {
		return false
	}
	return true
}
func (this *ServiceConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&skaffold_services.ServiceConfig{")
	s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	s = append(s, "PushArtifacts: "+fmt.Sprintf("%#v", this.PushArtifacts)+",\n")
	s = append(s, "BazelServicesProxyTarget: "+fmt.Sprintf("%#v", this.BazelServicesProxyTarget)+",\n")
	s = append(s, "ExternalAddress: "+fmt.Sprintf("%#v", this.ExternalAddress)+",\n")
	s = append(s, "HasCloudIngress: "+fmt.Sprintf("%#v", this.HasCloudIngress)+",\n")
	s = append(s, "LoadBalancerIP: "+fmt.Sprintf("%#v", this.LoadBalancerIP)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSkaffoldServices(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServiceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Deployment) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSkaffoldServices(dAtA, i, uint64(len(m.Deployment)))
		i += copy(dAtA[i:], m.Deployment)
	}
	if m.PushArtifacts {
		dAtA[i] = 0x10
		i++
		if m.PushArtifacts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.BazelServicesProxyTarget) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSkaffoldServices(dAtA, i, uint64(len(m.BazelServicesProxyTarget)))
		i += copy(dAtA[i:], m.BazelServicesProxyTarget)
	}
	if len(m.ExternalAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSkaffoldServices(dAtA, i, uint64(len(m.ExternalAddress)))
		i += copy(dAtA[i:], m.ExternalAddress)
	}
	if m.HasCloudIngress {
		dAtA[i] = 0x28
		i++
		if m.HasCloudIngress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.LoadBalancerIP) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSkaffoldServices(dAtA, i, uint64(len(m.LoadBalancerIP)))
		i += copy(dAtA[i:], m.LoadBalancerIP)
	}
	return i, nil
}

func encodeVarintSkaffoldServices(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServiceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Deployment)
	if l > 0 {
		n += 1 + l + sovSkaffoldServices(uint64(l))
	}
	if m.PushArtifacts {
		n += 2
	}
	l = len(m.BazelServicesProxyTarget)
	if l > 0 {
		n += 1 + l + sovSkaffoldServices(uint64(l))
	}
	l = len(m.ExternalAddress)
	if l > 0 {
		n += 1 + l + sovSkaffoldServices(uint64(l))
	}
	if m.HasCloudIngress {
		n += 2
	}
	l = len(m.LoadBalancerIP)
	if l > 0 {
		n += 1 + l + sovSkaffoldServices(uint64(l))
	}
	return n
}

func sovSkaffoldServices(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSkaffoldServices(x uint64) (n int) {
	return sovSkaffoldServices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServiceConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceConfig{`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`PushArtifacts:` + fmt.Sprintf("%v", this.PushArtifacts) + `,`,
		`BazelServicesProxyTarget:` + fmt.Sprintf("%v", this.BazelServicesProxyTarget) + `,`,
		`ExternalAddress:` + fmt.Sprintf("%v", this.ExternalAddress) + `,`,
		`HasCloudIngress:` + fmt.Sprintf("%v", this.HasCloudIngress) + `,`,
		`LoadBalancerIP:` + fmt.Sprintf("%v", this.LoadBalancerIP) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSkaffoldServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServiceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkaffoldServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkaffoldServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushArtifacts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkaffoldServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PushArtifacts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BazelServicesProxyTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkaffoldServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BazelServicesProxyTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkaffoldServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasCloudIngress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkaffoldServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasCloudIngress = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkaffoldServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkaffoldServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkaffoldServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSkaffoldServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSkaffoldServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkaffoldServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkaffoldServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSkaffoldServices
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSkaffoldServices
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSkaffoldServices
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSkaffoldServices(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSkaffoldServices
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSkaffoldServices = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSkaffoldServices   = fmt.Errorf("proto: integer overflow")
)
