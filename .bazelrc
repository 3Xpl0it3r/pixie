# Global bazelrc file, see https://docs.bazel.build/versions/master/guide.html#bazelrc.

# This is to flush bazel cache for new version of clang/gcc.
build --action_env=CLANG_COMPILER_VERSION=9.0_2

# Get version information into the build.
build --workspace_status_command=bazel/get_workspace_status

# Some of our dependencies still need Python 2.x.
build --host_force_python=PY2

# Limit memory for JVM to reduce runaway usage.
startup --host_jvm_args=-Xmx1g

# For all builds, by default, exclude tests that require root or BPF privileges.
# To run a test that was filtered out:
# bazel test //path/to:test --test_tag_filter=
# Which reset the filter to empty.
build --test_tag_filters=-requires_root,-requires_bpf,-disabled

# Sets the default Apple platform to macOS.
build --apple_platform_type=macos

# Build for Clang:
build:clang --linkopt -fuse-ld=lld
build:clang --action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
build:clang --action_env=BAZEL_LINKOPTS=-lm:-static-libgcc
# We need this to ensure that external projects are built with
# C++17 support. This is needed in some libraries like absl which
# have different behavior with C++17.
build:clang --action_env=BAZEL_CXXOPTS=-std=c++17
build:clang --action_env=BAZEL_COMPILER=clang
build:clang --action_env=CC=clang
build:clang --action_env=CXX=clang++

# Build for Clang using Libc++.
build:libc++ --action_env=CXXFLAGS=-stdlib=libc++
build:libc++ --action_env=LDFLAGS=-stdlib=libc++
build:libc++ --action_env=BAZEL_CXXOPTS=-std=c++17:-stdlib=libc++
build:libc++ --action_env=BAZEL_LINKLIBS=-l%:libc++.a:-l%:libc++abi.a:-lm
build:libc++ --action_env=CC=/opt/clang-9.0-libc++/bin/clang
build:libc++ --action_env=CXX=/opt/clang-9.0-libc++/bin/clang++
build:libc++ --define use_libcpp=1
# TODO(zasgar): Remove this in next diff.
build:libc++ --copt -D_LIBCPP_NO_EXPERIMENTAL_DEPRECATION_WARNING_FILESYSTEM

# Build for GCC.
build:gcc --action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
build:gcc --action_env=BAZEL_LINKOPTS=-lm:-static-libgcc
# We need this to ensure that external projects are built with
# C++17 support. This is needed in some libraries like absl which
# have different behavior with C++17.
build:gcc --action_env=BAZEL_CXXOPTS=-std=c++17
build:gcc --action_env=BAZEL_COMPILER=gcc
build:gcc --action_env=CC=/usr/bin/gcc-9
build:gcc --action_env=CXX=/usr/bin/g++-9
build:gcc --cxxopt -Wno-error=sign-compare

# Default build opts:
build --config=clang

# Default mac config. Same as clang except we can't statically link,
# and mac does not use libstdc++.
build:macos --config=clang
build:macos --action_env=BAZEL_LINKLIBS
build:macos --action_env=BAZEL_LINKOPTS

# bazel build --config asan ...
build:asan --config=clang
build:asan --define PL_CONFIG_ASAN=1
build:asan --copt -D__SANITIZE_ADDRESS__
build:asan --copt -fsanitize=address,undefined
build:asan --linkopt -fsanitize=address,undefined
build:asan --copt -fno-sanitize=vptr
build:asan --linkopt -fno-sanitize=vptr
build:asan --copt -fno-sanitize-recover=all
build:asan --linkopt -ldl
build:asan --define tcmalloc=disabled
build:asan --build_tag_filters=-no_asan
build:asan --test_tag_filters=-no_asan,-requires_root,-requires_bpf,-disabled
build:asan --define signal_trace=disabled
build:asan --copt -DADDRESS_SANITIZER=1
build:asan --test_env=ASAN_SYMBOLIZER_PATH
build:asan --test_env=ASAN_OPTIONS=handle_abort=1:allow_addr2line=true
build:asan --define tcmalloc=disabled
# Clang-9 requires additional linkopts to make sure ubsan is linked in correctly.
build:asan --linkopt=-L/opt/clang-9.0/lib/clang/9.0.0/lib/linux
build:asan --linkopt=-l:libclang_rt.ubsan_standalone-x86_64.a
build:asan --linkopt=-l:libclang_rt.ubsan_standalone_cxx-x86_64.a

# bazel build --config msan
build:msan --define PL_CONFIG_MSAN=1
build:msan --copt -fsanitize=memory
build:msan --linkopt -fsanitize=memory
build:msan --define tcmalloc=disabled
build:msan --build_tag_filters=-no_msan
build:msan --test_tag_filters=-no_msan,-requires_root,-requires_bpf,-disabled
build:msan --copt -fsanitize-memory-track-origins=2
build:msan --define tcmalloc=disabled

# bazel build --config tsan
build:tsan --config=clang
build:tsan --define PL_CONFIG_TSAN=1
build:tsan --copt -fsanitize=thread
build:tsan --linkopt -fsanitize=thread
build:tsan --define tcmalloc=disabled
build:tsan --build_tag_filters=-no_tsan
build:tsan --test_tag_filters=-no_tsan,-requires_root,-requires_bpf,-disabled
build:tsan --define tcmalloc=disabled

# Note that we are lumping tests that require root into the BPF tests below
# to minimize number of configs.
# If there are ever a lot of tests with requires_root set, a new config is warranted.

# bazel build --config bpf
build:bpf --config=clang
build:bpf --build_tag_filters=requires_bpf,requires_root
build:bpf --test_tag_filters=requires_bpf,requires_root,-disabled

# bazel build --config bpf_asan
# Need to repeat the negative build_tag_filters from config=asan,
# because the positive build_tag_filters here can re-enable such tests.
build:bpf_asan --config=asan
build:bpf_asan --build_tag_filters=requires_bpf,requires_root,-no_asan
build:bpf_asan --test_tag_filters=requires_bpf,requires_root,-no_asan,-disabled

# bazel build --config bpf_tsan
# Need to repeat the negative build_tag_filters from config=tsan,
# because the positive build_tag_filters here can re-enable such tests.
build:bpf_tsan --config=tsan
build:bpf_tsan --build_tag_filters=requires_bpf,requires_root,-no_tsan
build:bpf_tsan --test_tag_filters=requires_bpf,requires_root,-no_tsan,-disabled

coverage --config=gcc
coverage --cxxopt -fprofile-arcs
coverage --cxxopt -ftest-coverage
coverage --instrument_test_targets
coverage --define PL_COVERAGE=true

# Use stable GIT build tag by default.
build --define BUNDLE_VERSION={STABLE_BUILD_TAG}

# Import other bazelrc files
try-import %workspace%/jenkins.bazelrc
try-import %workspace%/user.bazelrc
