diff -Naur nats.c/CMakeLists.txt nats.c.new/CMakeLists.txt
--- nats.c/CMakeLists.txt	2019-06-13 16:41:48.470277065 -0700
+++ nats.c.new/CMakeLists.txt	2019-06-14 10:43:01.388887215 -0700
@@ -172,11 +172,4 @@
 # Add the project directories
 
 add_subdirectory(src)
-add_subdirectory(examples)
-add_subdirectory(examples/getstarted)
-if(NATS_BUILD_STREAMING)
-  add_subdirectory(examples/stan)
-endif()
-add_subdirectory(test)
-add_subdirectory(test/dylib)
 #----------------------------
diff -Naur nats.c/CMakeLists.txt~ nats.c.new/CMakeLists.txt~
--- nats.c/CMakeLists.txt~	1969-12-31 16:00:00.000000000 -0800
+++ nats.c.new/CMakeLists.txt~	2019-06-14 10:36:53.338166775 -0700
@@ -0,0 +1,182 @@
+cmake_minimum_required(VERSION 2.8)
+
+project(cnats)
+include(CTest)
+
+# Uncomment to have the build process verbose
+#set(CMAKE_VERBOSE_MAKEFILE TRUE)
+
+# Uncomment to have the executable moved to 'build' instead of their respective 'build/xxx' directories
+#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
+
+option(NATS_UPDATE_VERSION "Update the version file" OFF)
+option(NATS_UPDATE_DOC "Update the doc template file" OFF)
+option(NATS_COVERAGE "Code coverage" OFF)
+option(NATS_COVERAGE_UPLOAD "Upload the generated coveralls json" OFF)
+option(NATS_BUILD_NO_SPIN "Enable if spin code does not compile on your arch" OFF)
+option(NATS_BUILD_WITH_TLS "Build with TLS support" ON)
+option(NATS_BUILD_WITH_TLS_CLIENT_METHOD "Use TLS_client_method()" OFF)
+option(NATS_BUILD_EXAMPLES "Build examples" ON)
+option(NATS_BUILD_LIBUV_EXAMPLE "Build libuv examples" OFF)
+option(NATS_BUILD_LIBEVENT_EXAMPLE "Build libevent examples" OFF)
+option(NATS_BUILD_STATIC_EXAMPLES "Statically link examples" OFF)
+option(NATS_BUILD_STREAMING "Build NATS Streaming" ON)
+option(NATS_BUILD_NO_PREFIX_CONNSTS "No prefix for connection status enum" OFF)
+option(NATS_COMPILER_HARDENING "Compiler hardening flags" OFF)
+
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/coveralls-cmake/cmake)
+
+if(NATS_COVERAGE)
+  include(Coveralls)
+  coveralls_turn_on_coverage()
+endif(NATS_COVERAGE)
+
+if(NATS_BUILD_WITH_TLS)
+  find_package(OpenSSL REQUIRED)
+endif(NATS_BUILD_WITH_TLS)
+
+set(LIBUV_DIR "/usr/local/" CACHE PATH "Libuv install directory")
+set(LIBEVENT_DIR "/usr/local/" CACHE PATH "Libevent install directory")
+
+set(NATS_DOC_PROJECT_NAME "NATS C Client")
+if(NATS_BUILD_STREAMING)
+  set(PROTOBUF_DIR "${PROJECT_SOURCE_DIR}/pbuf")
+  add_definitions(-DNATS_HAS_STREAMING)
+  set(NATS_DOC_INCLUDE_STREAMING "NATS_HAS_STREAMING")
+  set(NATS_DOC_PROJECT_NAME "NATS C Client with Streaming support")
+endif(NATS_BUILD_STREAMING)
+
+if(NATS_BUILD_NO_PREFIX_CONNSTS)
+  add_definitions(-DNATS_CONN_STATUS_NO_PREFIX)
+endif(NATS_BUILD_NO_PREFIX_CONNSTS)
+
+# Platform specific settings
+if(UNIX)
+  #---------------------------------------------------------------------------
+  # Define NATS cache variables that override the CMAKE and MEMCHECK variables
+  #---------------------------------------------------------------------------
+  include(GNUInstallDirs)
+
+  set(NATS_LIBDIR ${CMAKE_INSTALL_LIBDIR})
+  set(NATS_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR})
+
+  set(NATS_BUILD_TYPE Release CACHE STRING "Build type: Release, Debug, RelWithDebInfo, MinRelSize")
+  set(CMAKE_BUILD_TYPE ${NATS_BUILD_TYPE} CACHE INTERNAL "")
+
+  set(NATS_BUILD_ARCH "64" CACHE STRING "32 for 32bits builds")
+
+  find_program(MEMORYCHECK_COMMAND valgrind)
+  set(NATS_MEMCHECK_CMD_OPTS "--leak-check=full --track-fds=yes --show-reachable=yes --num-callers=50" CACHE STRING "Memcheck options")
+  set(MEMORYCHECK_COMMAND_OPTIONS ${NATS_MEMCHECK_CMD_OPTS} CACHE INTERNAL "")
+
+  set(NATS_COMMON_C_FLAGS "-std=c99 -pedantic")
+  
+  # Some compiler hardening flags.
+  if(NATS_COMPILER_HARDENING)
+     set(NATS_COMMON_C_FLAGS "${NATS_COMMON_C_FLAGS} -fPIE -fstack-protector-all -D_FORTIFY_SOURCE=2 -O1")
+     # Works only with GCC.
+     if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
+       set(NATS_COMMON_C_FLAGS "${NATS_COMMON_C_FLAGS} -Wl,-z,relro,-z,now -pie")
+     endif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
+  endif(NATS_COMPILER_HARDENING)
+
+  if(NATS_BUILD_TYPE MATCHES "Debug")
+    set(NATS_COMMON_C_FLAGS "${NATS_COMMON_C_FLAGS} -ggdb")    
+  endif(NATS_BUILD_TYPE MATCHES "Debug")
+  
+  set(NATS_WARNINGS "-Wall -W -Wno-unused-variable -Wno-unused-parameter -Wno-unused-function -Wstrict-prototypes -Wwrite-strings")
+  set(NATS_PLATFORM_INCLUDE "unix")
+  
+  if(APPLE)
+    set(CMAKE_MACOSX_RPATH OFF)
+    set(NATS_OS "DARWIN")
+    if(NATS_BUILD_STREAMING)
+      set(NATS_PROTOBUF_LIB "${PROTOBUF_DIR}/lib/darwin/libprotobuf-c.a")
+    endif(NATS_BUILD_STREAMING)
+  else(APPLE)
+    set(NATS_OS "LINUX")
+    set(NATS_USE_PTHREAD "-pthread")
+    set(NATS_EXTRA_LIB "rt")
+    if(NATS_BUILD_STREAMING)
+      set(NATS_PROTOBUF_LIB "${PROTOBUF_DIR}/lib/linux/libprotobuf-c.so")
+    endif(NATS_BUILD_STREAMING)
+  endif(APPLE)
+  if (${NATS_BUILD_ARCH} MATCHES "32")
+    if(NOT APPLE)
+      message("-----------------------------------------------------------")
+      message("If build fails, you probably need to install libc6-dev-i386")
+      message("apt-get install libc6-dev-i386")
+      message("-----------------------------------------------------------")
+    endif(NOT APPLE)
+      
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
+    set(CMAKE_C_LINKER_FLAGS "${CMAKE_C_LINKER_FLAGS} -m32")
+  endif(${NATS_BUILD_ARCH} MATCHES "32")
+  
+elseif(WIN32)
+  set(NATS_LIBDIR "lib")
+  set(NATS_INCLUDE_DIR "include")
+  set(NATS_EXTRA_LIB "Ws2_32")
+  set(NATS_OS "_WIN32")
+  set(NATS_PLATFORM_INCLUDE "win")
+  if(NATS_BUILD_STREAMING)
+    set(NATS_PROTOBUF_LIB "${PROTOBUF_DIR}/lib/win/protobuf-c.lib")
+  endif(NATS_BUILD_STREAMING)
+endif(UNIX)
+
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NATS_COMMON_C_FLAGS} ${NATS_USE_PTHREAD} ${NATS_WARNINGS}")
+
+if(UNIX)
+  if(APPLE)
+  else(APPLE)
+    add_definitions(-D_GNU_SOURCE)
+    if(NATS_BUILD_NO_SPIN)
+      add_definitions(-DNATS_NO_SPIN)
+    endif(NATS_BUILD_NO_SPIN)
+  endif(APPLE)
+endif(UNIX)
+add_definitions(-D${NATS_OS})
+add_definitions(-D_REENTRANT)
+if(NATS_BUILD_WITH_TLS)
+  add_definitions(-DNATS_HAS_TLS)
+  if(NATS_BUILD_WITH_TLS_CLIENT_METHOD)
+    add_definitions(-DNATS_USE_TLS_CLIENT_METHOD)
+  endif(NATS_BUILD_WITH_TLS_CLIENT_METHOD)
+endif(NATS_BUILD_WITH_TLS)
+
+
+#------------
+# Versionning and Doc
+
+set(NATS_VERSION_MAJOR  1)
+set(NATS_VERSION_MINOR  8)
+set(NATS_VERSION_PATCH  0)
+set(NATS_VERSION_SUFFIX "")
+
+set(NATS_VERSION_REQUIRED_NUMBER 0x010100)
+
+if(NATS_UPDATE_VERSION OR NATS_UPDATE_DOC)
+configure_file(
+	${CMAKE_CURRENT_SOURCE_DIR}/src/version.h.in
+	${CMAKE_CURRENT_SOURCE_DIR}/src/version.h
+	@ONLY)
+
+configure_file(
+	${CMAKE_SOURCE_DIR}/doc/DoxyFile.NATS.Client.in
+	${CMAKE_SOURCE_DIR}/doc/DoxyFile.NATS.Client
+	@ONLY)
+endif(NATS_UPDATE_VERSION OR NATS_UPDATE_DOC)
+#------------
+
+#----------------------------
+# Add the project directories
+
+add_subdirectory(src)
+add_subdirectory(examples)
+add_subdirectory(examples/getstarted)
+if(NATS_BUILD_STREAMING)
+  add_subdirectory(examples/stan)
+endif()
+add_subdirectory(test)
+add_subdirectory(test/dylib)
+#----------------------------
diff -Naur nats.c/src/CMakeLists.txt nats.c.new/src/CMakeLists.txt
--- nats.c/src/CMakeLists.txt	2019-06-14 10:36:45.754111546 -0700
+++ nats.c.new/src/CMakeLists.txt	2019-06-14 10:41:50.492358168 -0700
@@ -29,18 +29,15 @@
 # --------------------------------------
 # Create the shared and static libraries
 # --------------------------------------
-add_library(nats SHARED ${SOURCES} ${PS_SOURCES} ${S_SOURCES})
-target_link_libraries(nats ${NATS_OPENSSL_LIBS} ${NATS_EXTRA_LIB} ${NATS_PROTOBUF_LIB})
 add_library(nats_static STATIC ${SOURCES} ${PS_SOURCES} ${S_SOURCES})
 target_link_libraries(nats_static ${NATS_OPENSSL_LIBS} ${NATS_PROTOBUF_LIB})
-set_target_properties(nats nats_static PROPERTIES
+set_target_properties(nats_static PROPERTIES
   VERSION ${NATS_VERSION_MAJOR}.${NATS_VERSION_MINOR}.${NATS_VERSION_PATCH}
   SOVERSION ${NATS_VERSION_MAJOR}.${NATS_VERSION_MINOR})
 
 # --------------------------------------
 # Install the libraries and header files
 # --------------------------------------
-install(TARGETS nats DESTINATION ${NATS_LIBDIR})
 install(TARGETS nats_static ARCHIVE DESTINATION ${NATS_LIBDIR})
 install(FILES deprnats.h DESTINATION ${NATS_INCLUDE_DIR} RENAME nats.h)
 install(FILES nats.h status.h version.h DESTINATION ${NATS_INCLUDE_DIR}/nats)
diff -Naur nats.c/src/CMakeLists.txt~ nats.c.new/src/CMakeLists.txt~
--- nats.c/src/CMakeLists.txt~	1969-12-31 16:00:00.000000000 -0800
+++ nats.c.new/src/CMakeLists.txt~	2019-06-14 10:37:03.910243832 -0700
@@ -0,0 +1,60 @@
+#------------------------
+# Add the sub-directories
+#------------------------
+include_directories(include)
+include_directories(${NATS_PLATFORM_INCLUDE})
+
+if(NATS_BUILD_WITH_TLS)
+  include_directories(${OPENSSL_INCLUDE_DIR})
+  set(NATS_OPENSSL_LIBS "${OPENSSL_LIBRARIES}")
+endif(NATS_BUILD_WITH_TLS)
+
+if(NATS_BUILD_STREAMING)
+  include_directories(${PROTOBUF_DIR}/include)
+  include_directories(stan)
+endif(NATS_BUILD_STREAMING)
+
+#---------------------------------------
+# Grab all files in 'src' and 'src/unix'
+# or 'src/win' depending on the platform
+#---------------------------------------
+file(GLOB SOURCES "*.c")
+file(GLOB PS_SOURCES "${NATS_PLATFORM_INCLUDE}/*.c")
+
+# Add stan directory if building with Streaming support
+if(NATS_BUILD_STREAMING)
+  file(GLOB S_SOURCES "stan/*.c")
+endif(NATS_BUILD_STREAMING)
+
+# --------------------------------------
+# Create the shared and static libraries
+# --------------------------------------
+add_library(nats SHARED ${SOURCES} ${PS_SOURCES} ${S_SOURCES})
+target_link_libraries(nats ${NATS_OPENSSL_LIBS} ${NATS_EXTRA_LIB} ${NATS_PROTOBUF_LIB})
+add_library(nats_static STATIC ${SOURCES} ${PS_SOURCES} ${S_SOURCES})
+target_link_libraries(nats_static ${NATS_OPENSSL_LIBS} ${NATS_PROTOBUF_LIB})
+set_target_properties(nats nats_static PROPERTIES
+  VERSION ${NATS_VERSION_MAJOR}.${NATS_VERSION_MINOR}.${NATS_VERSION_PATCH}
+  SOVERSION ${NATS_VERSION_MAJOR}.${NATS_VERSION_MINOR})
+
+# --------------------------------------
+# Install the libraries and header files
+# --------------------------------------
+install(TARGETS nats_static ARCHIVE DESTINATION ${NATS_LIBDIR})
+install(FILES deprnats.h DESTINATION ${NATS_INCLUDE_DIR} RENAME nats.h)
+install(FILES nats.h status.h version.h DESTINATION ${NATS_INCLUDE_DIR}/nats)
+install(FILES adapters/libevent.h adapters/libuv.h DESTINATION ${NATS_INCLUDE_DIR}/nats/adapters)
+
+# --------------------------------------
+# Setup the coveralls target and tell it
+# to gather coverage data for all the
+# lib sources.
+# --------------------------------------
+if(NATS_COVERAGE)
+	set(COVERAGE_SRCS ${SOURCES} ${S_SOURCES})
+	list(REMOVE_ITEM COVERAGE_SRCS "${PROJECT_SOURCE_DIR}/src/stan/protocol.pb-c.c")
+	coveralls_setup(
+        "${COVERAGE_SRCS}"
+        ${NATS_COVERAGE_UPLOAD}
+        "${PROJECT_SOURCE_DIR}/coveralls-cmake/cmake")
+endif(NATS_COVERAGE)
