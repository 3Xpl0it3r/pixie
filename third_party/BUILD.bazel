load("//bazel:pl_build_system.bzl", "pl_cc_binary", "pl_cc_library", "pl_cc_test")
load("//bazel:flex_bison.bzl", "genbison", "genflex")

licenses(["notice"])

pl_cc_library(
    name = "arrow",
    # This list is copied from ARROW_SRCS in
    # https://github.com/apache/arrow/blob/master/cpp/src/arrow/CMakeLists.txt.
    # When updating Arrow, make sure to update this list to ensure that any new files are included.
    #
    # Also make sure to re-generate the following generated files, and include them in the repo.
    #    cpp/src/arrow/ipc/File_generated.h
    #    cpp/src/arrow/ipc/Message_generated.h
    #    cpp/src/arrow/ipc/Schema_generated.h
    #    cpp/src/arrow/ipc/Tensor_generated.h
    #    cpp/src/arrow/ipc/feather_generated.h
    # Try "cmake .; make arrow_dependencies" to do this.
    # Apologies for the hack!
    srcs = [
        "arrow/cpp/src/arrow/array.cc",
        "arrow/cpp/src/arrow/array/builder_adaptive.cc",
        "arrow/cpp/src/arrow/array/builder_base.cc",
        "arrow/cpp/src/arrow/array/builder_binary.cc",
        "arrow/cpp/src/arrow/array/builder_decimal.cc",
        "arrow/cpp/src/arrow/array/builder_dict.cc",
        "arrow/cpp/src/arrow/array/builder_nested.cc",
        "arrow/cpp/src/arrow/array/builder_primitive.cc",
        "arrow/cpp/src/arrow/buffer.cc",
        "arrow/cpp/src/arrow/builder.cc",
        "arrow/cpp/src/arrow/compare.cc",
        "arrow/cpp/src/arrow/io/buffered.cc",
        "arrow/cpp/src/arrow/io/compressed.cc",
        "arrow/cpp/src/arrow/io/file.cc",
        "arrow/cpp/src/arrow/io/interfaces.cc",
        "arrow/cpp/src/arrow/io/memory.cc",
        "arrow/cpp/src/arrow/io/readahead.cc",
        "arrow/cpp/src/arrow/ipc/dictionary.cc",
        "arrow/cpp/src/arrow/ipc/feather.cc",
        "arrow/cpp/src/arrow/ipc/message.cc",
        "arrow/cpp/src/arrow/ipc/metadata-internal.cc",
        "arrow/cpp/src/arrow/ipc/reader.cc",
        "arrow/cpp/src/arrow/ipc/writer.cc",
        "arrow/cpp/src/arrow/memory_pool.cc",
        "arrow/cpp/src/arrow/pretty_print.cc",
        "arrow/cpp/src/arrow/record_batch.cc",
        "arrow/cpp/src/arrow/status.cc",
        "arrow/cpp/src/arrow/table.cc",
        "arrow/cpp/src/arrow/table_builder.cc",
        "arrow/cpp/src/arrow/tensor.cc",
        "arrow/cpp/src/arrow/type.cc",
        "arrow/cpp/src/arrow/util/bit-util.cc",
        "arrow/cpp/src/arrow/util/compression.cc",
        "arrow/cpp/src/arrow/util/cpu-info.cc",
        "arrow/cpp/src/arrow/util/decimal.cc",
        "arrow/cpp/src/arrow/util/int-util.cc",
        "arrow/cpp/src/arrow/util/io-util.cc",
        "arrow/cpp/src/arrow/util/key_value_metadata.cc",
        "arrow/cpp/src/arrow/util/logging.cc",
        "arrow/cpp/src/arrow/util/task-group.cc",
        "arrow/cpp/src/arrow/util/thread-pool.cc",
        "arrow/cpp/src/arrow/util/trie.cc",
        "arrow/cpp/src/arrow/util/utf8.cc",
        "arrow/cpp/src/arrow/visitor.cc",
    ],
    hdrs = glob([
        "arrow/cpp/src/arrow/*.h",
        "arrow/cpp/src/arrow/**/*.h",
        "arrow/cpp/src/arrow/*.hpp",
        "arrow/cpp/src/arrow/**/*.hpp",
    ]),
    copts = [
        "-Wno-unused-parameter",
        "-Wno-overloaded-virtual",
    ],
    includes = [
        "arrow/cpp/src",
    ],
    visibility = ["//visibility:public"],
    deps = ["@com_google_flatbuffers//:flatbuffers"],
)

pl_cc_library(
    name = "libpypa",
    srcs = [
        "libpypa/src/pypa/ast/ast.cc",
        "libpypa/src/pypa/ast/dump.cc",
        "libpypa/src/pypa/filebuf.cc",
        "libpypa/src/pypa/lexer/lexer.cc",
        "libpypa/src/pypa/parser/make_string.cc",
        "libpypa/src/pypa/parser/parser.cc",
        "libpypa/src/pypa/parser/symbol_table.cc",
    ],
    hdrs = glob([
        "libpypa/src/**/*.hh",
        "libpypa/src/**/*.inl",
    ]),
    copts = [
        "-Wno-unused-local-typedef",
        "-Wno-unused-parameter",
    ],
    includes = ["libpypa/src"],
    linkopts = [
        "-lm",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_double_conversion//:double-conversion",
    ],
)

# See README.md for special instructions on re-building bpftrace.
pl_cc_library(
    name = "bpftrace",
    srcs = glob(
        ["bpftrace/src/*.cpp"],
        exclude = ["bpftrace/src/main.cpp"],
    ),
    hdrs = glob([
        "bpftrace/src/*.h",
    ]),
    copts = [
        "-w",
        "-Ithird_party/bpftrace/src/arch",
        "-Ithird_party/bpftrace/src/ast",
        "-Ithird_party/bpftrace/src",
    ],
    includes = [
        "bpftrace/src",
        "bpftrace/src/arch",
        "bpftrace/src/ast",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":bpftrace-arch",
        ":bpftrace-ast",
    ],
    tags = ["linux_only"],
)

pl_cc_library(
    name = "bpftrace-arch",
    srcs = [
        "bpftrace/src/arch/x86_64.cpp",
    ],
    hdrs = glob([
        "bpftrace/src/arch/*.h",
    ]),
    copts = [
        "-w",
    ],
    visibility = ["//visibility:private"],
)

pl_cc_library(
    name = "bpftrace-ast",
    srcs = glob([
        "bpftrace/src/ast/*.cpp",
    ]),
    hdrs = glob([
        "bpftrace/src/*.h",
        "bpftrace/src/ast/*.h",
        "bpftrace/src/arch/*.h",
    ]),
    copts = [
        "-w",
        "-Ithird_party/bpftrace/src/ast",
        "-Ithird_party/bpftrace/src",
    ],
    visibility = ["//visibility:private"],
    deps = [
        ":bpftrace-parser",
        "@com_iovisor_bcc//:bcc",
        "@com_llvm_lib//:llvm",
    ],
    tags = ["linux_only"],    
)

pl_cc_library(
    name = "bpftrace-parser",
    srcs = [
        ":bpftrace-bison",
        ":bpftrace-flex",
    ],
    hdrs = glob([
        "bpftrace/src/*.h",
        "bpftrace/src/ast/*.h",
        ":bpftrace-bison",
    ]),
    copts = [
        "-w",
        "-Ithird_party/bpftrace/src",
        "-Ithird_party/bpftrace/src/ast",
        "-I.",
    ],
    #Hacky, but otherwise can't find parser.tab.hh.
    includes = ["."],
    tags = ["linux_only"],    
)

genbison(
    name = "bpftrace-bison",
    src = "bpftrace/src/parser.yy",
    extra_outs = [
        "stack.hh",
        "location.hh",
        "position.hh",
    ],
    header_out = "parser.tab.hh",
    source_out = "parser.tab.cc",
)

genflex(
    name = "bpftrace-flex",
    src = "bpftrace/src/lexer.l",
    out = "lex.yy.cc",
    includes = [":bpftrace-bison"],
)
