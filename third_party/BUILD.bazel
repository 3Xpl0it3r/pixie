load("//bazel:pl_build_system.bzl", "pl_cc_binary", "pl_cc_library", "pl_cc_test")
load("//bazel:flex_bison.bzl", "genbison", "genflex")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

licenses(["notice"])

exports_files([
    "libpypa/COPYING",
    "arrow/LICENSE.txt",
])

filegroup(
    name = "bcc_source",
    srcs = glob(["bcc/**"]),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "clang_tidy_stub",
    srcs = ["clang_tidy_stub.cc"],
    visibility = ["//visibility:public"],
)

pl_cc_library(
    name = "arrow",
    # This list is copied from ARROW_SRCS in
    # https://github.com/apache/arrow/blob/master/cpp/src/arrow/CMakeLists.txt.
    # When updating Arrow, make sure to update this list to ensure that any new files are included.
    #
    # Also make sure to re-generate the following generated files, and include them in the repo.
    #    cpp/src/arrow/ipc/File_generated.h
    #    cpp/src/arrow/ipc/Message_generated.h
    #    cpp/src/arrow/ipc/Schema_generated.h
    #    cpp/src/arrow/ipc/Tensor_generated.h
    #    cpp/src/arrow/ipc/feather_generated.h
    # Try "cmake .; make arrow_dependencies" to do this.
    # Apologies for the hack!
    srcs = [
        "arrow/cpp/src/arrow/array.cc",
        "arrow/cpp/src/arrow/array/builder_adaptive.cc",
        "arrow/cpp/src/arrow/array/builder_base.cc",
        "arrow/cpp/src/arrow/array/builder_binary.cc",
        "arrow/cpp/src/arrow/array/builder_decimal.cc",
        "arrow/cpp/src/arrow/array/builder_dict.cc",
        "arrow/cpp/src/arrow/array/builder_nested.cc",
        "arrow/cpp/src/arrow/array/builder_primitive.cc",
        "arrow/cpp/src/arrow/array/builder_union.cc",
        "arrow/cpp/src/arrow/array/concatenate.cc",
        "arrow/cpp/src/arrow/buffer.cc",
        "arrow/cpp/src/arrow/builder.cc",
        "arrow/cpp/src/arrow/compare.cc",
        "arrow/cpp/src/arrow/extension_type.cc",
        "arrow/cpp/src/arrow/memory_pool.cc",
        "arrow/cpp/src/arrow/pretty_print.cc",
        "arrow/cpp/src/arrow/record_batch.cc",
        "arrow/cpp/src/arrow/result.cc",
        "arrow/cpp/src/arrow/scalar.cc",
        "arrow/cpp/src/arrow/sparse_tensor.cc",
        "arrow/cpp/src/arrow/status.cc",
        "arrow/cpp/src/arrow/table.cc",
        "arrow/cpp/src/arrow/table_builder.cc",
        "arrow/cpp/src/arrow/tensor.cc",
        "arrow/cpp/src/arrow/testing/util.cc",
        "arrow/cpp/src/arrow/type.cc",
        "arrow/cpp/src/arrow/util/basic_decimal.cc",
        "arrow/cpp/src/arrow/util/bit-util.cc",
        "arrow/cpp/src/arrow/util/compression.cc",
        "arrow/cpp/src/arrow/util/cpu-info.cc",
        "arrow/cpp/src/arrow/util/decimal.cc",
        "arrow/cpp/src/arrow/util/int-util.cc",
        "arrow/cpp/src/arrow/util/key_value_metadata.cc",
        "arrow/cpp/src/arrow/util/logging.cc",
        "arrow/cpp/src/arrow/util/memory.cc",
        "arrow/cpp/src/arrow/util/string_builder.cc",
        "arrow/cpp/src/arrow/util/task-group.cc",
        "arrow/cpp/src/arrow/util/thread-pool.cc",
        "arrow/cpp/src/arrow/util/trie.cc",
        "arrow/cpp/src/arrow/util/utf8.cc",
        "arrow/cpp/src/arrow/util/util.cc",
        "arrow/cpp/src/arrow/vendored/datetime/tz.cpp",
        "arrow/cpp/src/arrow/visitor.cc",
    ],
    hdrs = glob(
        [
            "arrow/cpp/src/arrow/*.h",
            "arrow/cpp/src/arrow/**/*.h",
            "arrow/cpp/src/arrow/*.hpp",
            "arrow/cpp/src/arrow/**/*.hpp",
        ],
        exclude = ["arrow/cpp/src/arrow/io/hdfs-internal.h"],
    ),
    copts = [
        "-Wno-unused-parameter",
        "-Wno-overloaded-virtual",
    ],
    includes = [
        "arrow/cpp/src",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_tencent_rapidjson//:rapidjson",
        "@com_google_flatbuffers//:flatbuffers",
    ],
)

pl_cc_library(
    name = "libpypa",
    srcs = [
        "libpypa/src/pypa/ast/ast.cc",
        "libpypa/src/pypa/ast/dump.cc",
        "libpypa/src/pypa/filebuf.cc",
        "libpypa/src/pypa/lexer/lexer.cc",
        "libpypa/src/pypa/parser/make_string.cc",
        "libpypa/src/pypa/parser/parser.cc",
        "libpypa/src/pypa/parser/symbol_table.cc",
    ],
    hdrs = glob([
        "libpypa/src/**/*.hh",
        "libpypa/src/**/*.inl",
    ]),
    copts = [
        "-Wno-unused-local-typedef",
        "-Wno-unused-parameter",
    ],
    includes = ["libpypa/src"],
    linkopts = [
        "-lm",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_double_conversion//:double-conversion",
    ],
)

pl_cc_library(
    name = "aes-min",
    srcs = ["aes-min/aes-min.c"],
    hdrs = ["aes-min/aes-min.h"],
    copts = [
        "-Wno-unused-function",
    ],
    visibility = ["//visibility:public"],
)

go_library(
    name = "glice_api_library",
    srcs = ["glice/api/repo.go"],
    importpath = "github.com/ribice/glice/api",
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_fatih_color//:go_default_library",
        "@com_github_google_go_github//github:go_default_library",
        "@org_golang_x_oauth2//:go_default_library",
    ],
)

go_library(
    name = "glice_library",
    srcs = [
        "glice/main.go",
        "glice/other.go",
    ],
    importpath = "github.com/ribice/glice",
    visibility = ["//visibility:private"],
    deps = [
        ":glice_api_library",
        "@com_github_fatih_color//:go_default_library",
        "@com_github_keighl_metabolize//:go_default_library",
        "@com_github_olekukonko_tablewriter//:go_default_library",
    ],
)

go_binary(
    name = "glice",
    embed = [":glice_library"],
    visibility = ["//visibility:public"],
)
