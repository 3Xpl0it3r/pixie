# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

load("@rules_cc//cc:defs.bzl", "cc_library")
load("//bazel:flex_bison.bzl", "genbison", "genflex")

licenses(["notice"])

exports_files([
    "libpypa/COPYING",
    "arrow/LICENSE.txt",
])

filegroup(
    name = "bcc_source",
    srcs = glob(["bcc/**"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "bpftrace_source",
    srcs = glob(["bpftrace/**"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "libbpf_source",
    srcs = glob(["bcc/src/cc/libbpf/**"]),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "clang_tidy_stub",
    srcs = ["clang_tidy_stub.cc"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "libpypa",
    srcs = [
        "libpypa/src/pypa/ast/ast.cc",
        "libpypa/src/pypa/ast/dump.cc",
        "libpypa/src/pypa/filebuf.cc",
        "libpypa/src/pypa/lexer/lexer.cc",
        "libpypa/src/pypa/parser/make_string.cc",
        "libpypa/src/pypa/parser/parser.cc",
        "libpypa/src/pypa/parser/symbol_table.cc",
    ],
    hdrs = glob([
        "libpypa/src/**/*.hh",
        "libpypa/src/**/*.inl",
    ]),
    copts = [
        "-Wno-unused-local-typedef",
        "-Wno-unused-parameter",
    ],
    includes = ["libpypa/src"],
    linkopts = [
        "-lm",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_double_conversion//:double-conversion",
    ],
)

cc_library(
    name = "dnsparser",
    srcs = glob([
        "dnsparser/src/*.cpp",
        "dnsparser/src/*.h",
    ]),
    hdrs = ["dnsparser/include/dnsparser.h"],
    copts = [
        "-Wno-unused-parameter",
    ],
    includes = [
        "dnsparser/include",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "elfio",
    hdrs = glob(["ELFIO/elfio/*.hpp"]),
    includes = ["ELFIO"],
    visibility = ["//visibility:public"],
)

# See README.md for special instructions on re-building bpftrace.
cc_library(
    name = "bpftrace",
    srcs = glob(
        ["bpftrace/src/*.cpp"],
        exclude = [
            "bpftrace/src/main.cpp",
            "bpftrace/src/bfd-disasm.cpp",
        ],
    ),
    hdrs = glob([
        "bpftrace/src/*.h",
    ]),
    copts = [
        "-w",
        "-Ithird_party/bpftrace/src/arch",
        "-Ithird_party/bpftrace/src/ast",
        "-Ithird_party/bpftrace/src",
    ],
    defines = [
        "HAVE_NAME_TO_HANDLE_AT=1",
        "HAVE_BCC_PROG_LOAD=1",
        "HAVE_BCC_CREATE_MAP=1",
        "HAVE_BCC_ELF_FOREACH_SYM=1",
        "HAVE_BCC_KFUNC=1",
        "HAVE_BCC_USDT_ADDSEM=1",
        "LIBBCC_ATTACH_KPROBE_SIX_ARGS_SIGNATURE=1",
    ],
    includes = [
        "bpftrace/src",
        "bpftrace/src/arch",
        "bpftrace/src/ast",
    ],
    tags = ["linux_only"],
    visibility = ["//visibility:public"],
    deps = [
        ":bpftrace-arch",
        ":bpftrace-ast",
    ],
)

cc_library(
    name = "bpftrace-arch",
    srcs = [
        "bpftrace/src/arch/x86_64.cpp",
    ],
    hdrs = glob([
        "bpftrace/src/arch/*.h",
    ]),
    copts = [
        "-w",
    ],
    visibility = ["//visibility:private"],
)

cc_library(
    name = "bpftrace-ast",
    srcs = glob([
        "bpftrace/src/ast/*.cpp",
    ]),
    hdrs = glob([
        "bpftrace/src/*.h",
        "bpftrace/src/ast/*.h",
        "bpftrace/src/arch/*.h",
    ]),
    copts = [
        "-w",
        "-Ithird_party/bpftrace/src/ast",
        "-Ithird_party/bpftrace/src",
    ],
    tags = ["linux_only"],
    visibility = ["//visibility:private"],
    deps = [
        ":bpftrace-parser",
        "//third_party/foreign_cc:bcc",
        "@com_llvm_lib//:llvm",
    ],
)

cc_library(
    name = "bpftrace-parser",
    srcs = [
        ":bpftrace-bison",
        ":bpftrace-flex",
    ],
    hdrs = glob([
        "bpftrace/src/*.h",
        "bpftrace/src/libbpf/*.h",
        "bpftrace/src/ast/*.h",
        ":bpftrace-bison",
    ]),
    copts = [
        "-w",
        "-Ithird_party/bpftrace/src",
        "-Ithird_party/bpftrace/src/ast",
        "-I.",
    ],
    #Hacky, but otherwise can't find parser.tab.hh.
    includes = ["."],
    tags = ["linux_only"],
    deps = [
        "//third_party/foreign_cc:bcc",
    ],
)

genbison(
    name = "bpftrace-bison",
    src = "bpftrace/src/parser.yy",
    extra_outs = [
        "stack.hh",
        "location.hh",
        "position.hh",
    ],
    header_out = "parser.tab.hh",
    source_out = "parser.tab.cc",
    tags = ["linux_only"],
)

genflex(
    name = "bpftrace-flex",
    src = "bpftrace/src/lexer.l",
    out = "lex.yy.cc",
    includes = [":bpftrace-bison"],
    tags = ["linux_only"],
)
