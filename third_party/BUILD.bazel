load("@io_bazel_rules_go//go:def.bzl", "go_library")
load("@rules_cc//cc:defs.bzl", "cc_library")
load("//bazel:flex_bison.bzl", "genbison", "genflex")

licenses(["notice"])

exports_files([
    "libpypa/COPYING",
    "arrow/LICENSE.txt",
])

filegroup(
    name = "bcc_source",
    srcs = glob(["bcc/**"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "bpftrace_source",
    srcs = glob(["bpftrace/**"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "libbpf_source",
    srcs = glob(["bcc/src/cc/libbpf/**"]),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "clang_tidy_stub",
    srcs = ["clang_tidy_stub.cc"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "arrow",
    # This list is copied from ARROW_SRCS in
    # https://github.com/apache/arrow/blob/master/cpp/src/arrow/CMakeLists.txt.
    # When updating Arrow, make sure to update this list to ensure that any new files are included.
    #
    # Also make sure to re-generate the following generated files, and include them in the repo.
    #    cpp/src/arrow/ipc/File_generated.h
    #    cpp/src/arrow/ipc/Message_generated.h
    #    cpp/src/arrow/ipc/Schema_generated.h
    #    cpp/src/arrow/ipc/Tensor_generated.h
    #    cpp/src/arrow/ipc/feather_generated.h
    # Try "cmake .; make arrow_dependencies" to do this.
    # Apologies for the hack!
    srcs = [
        "arrow/cpp/src/arrow/array.cc",
        "arrow/cpp/src/arrow/array/builder_adaptive.cc",
        "arrow/cpp/src/arrow/array/builder_base.cc",
        "arrow/cpp/src/arrow/array/builder_binary.cc",
        "arrow/cpp/src/arrow/array/builder_decimal.cc",
        "arrow/cpp/src/arrow/array/builder_dict.cc",
        "arrow/cpp/src/arrow/array/builder_nested.cc",
        "arrow/cpp/src/arrow/array/builder_primitive.cc",
        "arrow/cpp/src/arrow/array/builder_union.cc",
        "arrow/cpp/src/arrow/array/concatenate.cc",
        "arrow/cpp/src/arrow/buffer.cc",
        "arrow/cpp/src/arrow/builder.cc",
        "arrow/cpp/src/arrow/compare.cc",
        "arrow/cpp/src/arrow/extension_type.cc",
        "arrow/cpp/src/arrow/memory_pool.cc",
        "arrow/cpp/src/arrow/pretty_print.cc",
        "arrow/cpp/src/arrow/record_batch.cc",
        "arrow/cpp/src/arrow/result.cc",
        "arrow/cpp/src/arrow/scalar.cc",
        "arrow/cpp/src/arrow/sparse_tensor.cc",
        "arrow/cpp/src/arrow/status.cc",
        "arrow/cpp/src/arrow/table.cc",
        "arrow/cpp/src/arrow/table_builder.cc",
        "arrow/cpp/src/arrow/tensor.cc",
        "arrow/cpp/src/arrow/testing/util.cc",
        "arrow/cpp/src/arrow/type.cc",
        "arrow/cpp/src/arrow/util/basic_decimal.cc",
        "arrow/cpp/src/arrow/util/bit-util.cc",
        "arrow/cpp/src/arrow/util/compression.cc",
        "arrow/cpp/src/arrow/util/cpu-info.cc",
        "arrow/cpp/src/arrow/util/decimal.cc",
        "arrow/cpp/src/arrow/util/int-util.cc",
        "arrow/cpp/src/arrow/util/key_value_metadata.cc",
        "arrow/cpp/src/arrow/util/logging.cc",
        "arrow/cpp/src/arrow/util/memory.cc",
        "arrow/cpp/src/arrow/util/string_builder.cc",
        "arrow/cpp/src/arrow/util/task-group.cc",
        "arrow/cpp/src/arrow/util/thread-pool.cc",
        "arrow/cpp/src/arrow/util/trie.cc",
        "arrow/cpp/src/arrow/util/utf8.cc",
        "arrow/cpp/src/arrow/util/util.cc",
        "arrow/cpp/src/arrow/vendored/datetime/tz.cpp",
        "arrow/cpp/src/arrow/visitor.cc",
    ],
    hdrs = glob(
        [
            "arrow/cpp/src/arrow/*.h",
            "arrow/cpp/src/arrow/**/*.h",
            "arrow/cpp/src/arrow/*.hpp",
            "arrow/cpp/src/arrow/**/*.hpp",
        ],
        exclude = ["arrow/cpp/src/arrow/io/hdfs-internal.h"],
    ),
    copts = [
        "-Wno-unused-parameter",
        "-Wno-overloaded-virtual",
        "-Wno-deprecated-declarations",
    ],
    includes = [
        "arrow/cpp/src",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_tencent_rapidjson//:rapidjson",
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/strings",
        "@com_google_flatbuffers//:flatbuffers",
    ],
)

cc_library(
    name = "libpypa",
    srcs = [
        "libpypa/src/pypa/ast/ast.cc",
        "libpypa/src/pypa/ast/dump.cc",
        "libpypa/src/pypa/filebuf.cc",
        "libpypa/src/pypa/lexer/lexer.cc",
        "libpypa/src/pypa/parser/make_string.cc",
        "libpypa/src/pypa/parser/parser.cc",
        "libpypa/src/pypa/parser/symbol_table.cc",
    ],
    hdrs = glob([
        "libpypa/src/**/*.hh",
        "libpypa/src/**/*.inl",
    ]),
    copts = [
        "-Wno-unused-local-typedef",
        "-Wno-unused-parameter",
    ],
    includes = ["libpypa/src"],
    linkopts = [
        "-lm",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_double_conversion//:double-conversion",
    ],
)

cc_library(
    name = "dnsparser",
    srcs = glob([
        "dnsparser/src/*.cpp",
        "dnsparser/src/*.h",
    ]),
    hdrs = ["dnsparser/include/dnsparser.h"],
    copts = [
        "-Wno-unused-parameter",
    ],
    includes = [
        "dnsparser/include",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "aes-min",
    srcs = ["aes-min/aes-min.c"],
    hdrs = ["aes-min/aes-min.h"],
    copts = [
        "-Wno-unused-function",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "elfio",
    hdrs = glob(["ELFIO/elfio/*.hpp"]),
    includes = ["ELFIO"],
    visibility = ["//visibility:public"],
)

# See README.md for special instructions on re-building bpftrace.
cc_library(
    name = "bpftrace",
    srcs = glob(
        ["bpftrace/src/*.cpp"],
        exclude = [
            "bpftrace/src/main.cpp",
            "bpftrace/src/bfd-disasm.cpp",
        ],
    ),
    hdrs = glob([
        "bpftrace/src/*.h",
    ]),
    copts = [
        "-w",
        "-Ithird_party/bpftrace/src/arch",
        "-Ithird_party/bpftrace/src/ast",
        "-Ithird_party/bpftrace/src",
    ],
    defines = [
        "HAVE_NAME_TO_HANDLE_AT=1",
        "HAVE_BCC_PROG_LOAD=1",
        "HAVE_BCC_CREATE_MAP=1",
        "HAVE_BCC_ELF_FOREACH_SYM=1",
        "HAVE_BCC_KFUNC=1",
        "HAVE_BCC_USDT_ADDSEM=1",
        "LIBBCC_ATTACH_KPROBE_SIX_ARGS_SIGNATURE=1",
    ],
    includes = [
        "bpftrace/src",
        "bpftrace/src/arch",
        "bpftrace/src/ast",
    ],
    tags = ["linux_only"],
    visibility = ["//visibility:public"],
    deps = [
        ":bpftrace-arch",
        ":bpftrace-ast",
    ],
)

cc_library(
    name = "bpftrace-arch",
    srcs = [
        "bpftrace/src/arch/x86_64.cpp",
    ],
    hdrs = glob([
        "bpftrace/src/arch/*.h",
    ]),
    copts = [
        "-w",
    ],
    visibility = ["//visibility:private"],
)

cc_library(
    name = "bpftrace-ast",
    srcs = glob([
        "bpftrace/src/ast/*.cpp",
    ]),
    hdrs = glob([
        "bpftrace/src/*.h",
        "bpftrace/src/ast/*.h",
        "bpftrace/src/arch/*.h",
    ]),
    copts = [
        "-w",
        "-Ithird_party/bpftrace/src/ast",
        "-Ithird_party/bpftrace/src",
    ],
    tags = ["linux_only"],
    visibility = ["//visibility:private"],
    deps = [
        ":bpftrace-parser",
        "//third_party/foreign_cc:bcc",
        "@com_llvm_lib//:llvm",
    ],
)

cc_library(
    name = "bpftrace-parser",
    srcs = [
        ":bpftrace-bison",
        ":bpftrace-flex",
    ],
    hdrs = glob([
        "bpftrace/src/*.h",
        "bpftrace/src/libbpf/*.h",
        "bpftrace/src/ast/*.h",
        ":bpftrace-bison",
    ]),
    copts = [
        "-w",
        "-Ithird_party/bpftrace/src",
        "-Ithird_party/bpftrace/src/ast",
        "-I.",
    ],
    #Hacky, but otherwise can't find parser.tab.hh.
    includes = ["."],
    tags = ["linux_only"],
    deps = [
        "//third_party/foreign_cc:bcc",
    ],
)

genbison(
    name = "bpftrace-bison",
    src = "bpftrace/src/parser.yy",
    extra_outs = [
        "stack.hh",
        "location.hh",
        "position.hh",
    ],
    header_out = "parser.tab.hh",
    source_out = "parser.tab.cc",
    tags = ["linux_only"],
)

genflex(
    name = "bpftrace-flex",
    src = "bpftrace/src/lexer.l",
    out = "lex.yy.cc",
    includes = [":bpftrace-bison"],
    tags = ["linux_only"],
)
