licenses(["notice"])

package(default_visibility = ["//visibility:public"])

load("@rules_foreign_cc//tools/build_defs:configure.bzl", "configure_make")
load("@rules_foreign_cc//tools/build_defs:cmake.bzl", "cmake_external")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@package_bundle//file:packages.bzl", "packages")

configure_make(
    name = "gperftools_build",
    configure_options = [
        "--enable-shared=no",
        "--disable-frame-pointers",
        "--enable-libunwind",
    ],
    lib_source = "@com_github_gperftools_gperftools//:all",
    linkopts = ["-lpthread"],
    make_commands = ["make install-libLTLIBRARIES install-perftoolsincludeHEADERS"],
    static_libraries = select({
        "//bazel:debug_tcmalloc": ["libtcmalloc_debug.a"],
        "//conditions:default": ["libtcmalloc_and_profiler.a"],
    }),
)

# Workaround for https://github.com/bazelbuild/rules_foreign_cc/issues/227
cc_library(
    name = "gperftools",
    deps = [
        "gperftools_build",
    ],
)

cmake_external(
    name = "natsc",
    cache_entries = {
        "NATS_BUILD_STREAMING": "OFF",
        # This forces nats to link against boringssl instead of openssl.
        # Since some of our services use both GRPC and nats, this lets
        # us have a single SSL library.
        "CMAKE_SYSTEM_PREFIX_PATH": "$EXT_BUILD_DEPS",
    },
    generate_crosstool_file = True,
    lib_name = "libnats_static",
    lib_source = "@com_github_nats_io_natsc//:all",
    make_commands = [
        "make nats_static",
        "make install",
    ],
    deps = ["@boringssl//:ssl"],
)

cmake_external(
    name = "libuv",
    cache_entries = {
        "BUILD_TESTING": "OFF",
        "USING_UV_SHARE": "OFF",
        "BUILDING_UV_SHARED": "OFF",
    },
    generate_crosstool_file = True,
    lib_name = "libuv_a",
    lib_source = "@com_github_libuv_libuv//:all",
    make_commands = [
        "make uv_a",
        "make install",
    ],
)

cmake_external(
    name = "libarchive",
    cache_entries = {
        "ENABLE_CNG": "OFF",
        "ENABLE_TAR": "OFF",
        "ENABLE_TAR_SHARED": "OFF",
        "ENABLE_CPIO": "OFF",
        "ENABLE_CPIO_SHARED": "OFF",
        "ENABLE_CAT": "OFF",
        "ENABLE_CAT_SHARED": "OFF",
        "ENABLE_TEST": "OFF",
    },
    generate_crosstool_file = True,
    lib_name = "libarchive",
    lib_source = "@com_github_libarchive_libarchive//:all",
)

cmake_external(
    name = "bcc",
    generate_crosstool_file = True,
    lib_name = "libbcc_static",
    lib_source = "//third_party:bcc_source",
    # These link opts are dependencies of bcc.
    linkopts = [
        # ELF binary parsing.
        "-lelf",
    ],
    make_commands = [
        "make -j ${nproc} -C src/cc install",
    ],
    static_libraries = [
        "libapi-static.a",
        "libbcc.a",
        "libbcc_bpf.a",
        "libbcc-loader-static.a",
        "libb_frontend.a",
        "libclang_frontend.a",
        "libusdt-static.a",
    ],
)

cmake_external(
    name = "nghttp2",
    cache_entries = {
        "WITH_JEMALLOC": "OFF",
        "ENABLE_LIB_ONLY": "On",
        "ENABLE_SHARED_LIB": "OFF",
        "ENABLE_STATIC_LIB": "ON",
        # This forces nghttp2 to link against boringssl instead of openssl.
        # Since some of our services use both GRPC and nats, this lets
        # us have a single SSL library.
        "CMAKE_SYSTEM_PREFIX_PATH": "$EXT_BUILD_DEPS",
        # For debugging, uncomment the following line to enable debug print of nghttp2.
        # "DEBUGBUILD": "ON",
    },
    generate_crosstool_file = True,
    lib_name = "libnghttp2",
    lib_source = "@com_github_nghttp2_nghttp2//:all",
    deps = ["@boringssl//:ssl"],
)

cmake_external(
    name = "fluentbit",
    binaries = ["fluent-bit"],
    cache_entries = {
        "FLB_EXAMPLES": "No",
        "FLB_LUAJIT": "No",
        "FLB_JEMALLOC": "No",
    },
    generate_crosstool_file = True,
    install_prefix = ".",
    lib_name = "fluent-bit",
    lib_source = "@com_github_fluent_fluentbit//:all",
    make_commands = ["make -j${nproc} fluent-bit-bin"],
)

filegroup(
    name = "fluentbit_binary",
    srcs = [":fluentbit"],
    output_group = "fluent-bit",
)

container_image(
    name = "fluentbit_base_image",
    base = "//:pl_cc_base_image",
    debs = [
        packages["libc6"],
        packages["zlib1g"],
        packages["libsasl2-2"],
        packages["libssl1.1"],
        packages["libgcc1"],
    ],
    files = [":fluentbit_binary"],
    visibility = ["//visibility:public"],
)
