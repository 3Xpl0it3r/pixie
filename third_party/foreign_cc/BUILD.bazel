# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

load("@rules_cc//cc:defs.bzl", "cc_library")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake", "configure_make", "make")

licenses(["notice"])

package(default_visibility = ["//visibility:public"])

configure_make(
    name = "gperftools_build",
    configure_options = [
        "--enable-shared=no",
        "--disable-frame-pointers",
        "--enable-libunwind",
    ],
    lib_source = "@com_github_gperftools_gperftools//:all",
    linkopts = ["-lpthread"],
    make_commands = ["make install-libLTLIBRARIES install-perftoolsincludeHEADERS"],
    out_static_libs = select({
        "//bazel:debug_tcmalloc": ["libtcmalloc_debug.a"],
        "//conditions:default": ["libtcmalloc_and_profiler.a"],
    }),
)

# Workaround for https://github.com/bazelbuild/rules_foreign_cc/issues/227
cc_library(
    name = "gperftools",
    deps = [
        "gperftools_build",
    ],
)

cmake(
    name = "natsc",
    cache_entries = {
        # This forces nats to link against boringssl instead of openssl.
        # Since some of our services use both GRPC and nats, this lets
        # us have a single SSL library.
        "CMAKE_SYSTEM_PREFIX_PATH": "$EXT_BUILD_DEPS",
        "NATS_BUILD_STREAMING": "OFF",
    },
    generate_crosstool_file = True,
    lib_name = "libnats_static",
    lib_source = "@com_github_nats_io_natsc//:all",
    make_commands = [
        "make nats_static",
        "make install",
    ],
    deps = ["@boringssl//:ssl"],
)

cmake(
    name = "libuv",
    cache_entries = {
        "BUILDING_UV_SHARED": "OFF",
        "BUILD_TESTING": "OFF",
        "USING_UV_SHARE": "OFF",
    },
    generate_crosstool_file = True,
    lib_name = "libuv_a",
    lib_source = "@com_github_libuv_libuv//:all",
    make_commands = [
        "make uv_a",
        "make install",
    ],
)

cmake(
    name = "libarchive",
    cache_entries = {
        "ENABLE_CAT": "OFF",
        "ENABLE_CAT_SHARED": "OFF",
        "ENABLE_CNG": "OFF",
        "ENABLE_CPIO": "OFF",
        "ENABLE_CPIO_SHARED": "OFF",
        "ENABLE_TAR": "OFF",
        "ENABLE_TAR_SHARED": "OFF",
        "ENABLE_TEST": "OFF",
    },
    generate_crosstool_file = True,
    lib_name = "libarchive",
    lib_source = "@com_github_libarchive_libarchive//:all",
)

make(
    name = "libbpf",
    lib_source = "//third_party:libbpf_source",
    make_commands = ["BUILD_STATIC_ONLY=y make -C src install PREFIX=out; mv src/out/lib64/libbpf.a $INSTALLDIR/lib/libbpf.a; mv src/out/include $INSTALLDIR"],
    # The right way to setup this target should be the following, but it's not working.
    # So we use the hack above.
    # See: https://github.com/bazelbuild/rules_foreign_cc/issues/325
    #    make_commands = ["BUILD_STATIC_ONLY=y make -C src install PREFIX=out"],
    #    out_include_dir = "out/include",
    #    out_lib_dir = "out/lib64",
    out_static_libs = [
        "libbpf.a",
    ],
)

cmake(
    name = "bcc",
    generate_crosstool_file = True,
    lib_name = "libbcc_static",
    lib_source = "//third_party:bcc_source",
    # These link opts are dependencies of bcc.
    linkopts = [
        # ELF binary parsing.
        "-lelf",
    ],
    make_commands = [
        "make -j$(nproc) -C src/cc install",
    ],
    out_static_libs = [
        "libapi-static.a",
        "libbcc.a",
        "libbcc_bpf.a",
        "libbcc-loader-static.a",
        "libb_frontend.a",
        "libclang_frontend.a",
        "libusdt-static.a",
    ],
)
