diff --git a/output/decoder.go b/output/decoder.go
index fe2dc96..ad89311 100644
--- a/output/decoder.go
+++ b/output/decoder.go
@@ -1,86 +1 @@
-//  Fluent Bit Go!
-//  ==============
-//  Copyright (C) 2015-2017 Treasure Data Inc.
-//
-//  Licensed under the Apache License, Version 2.0 (the "License");
-//  you may not use this file except in compliance with the License.
-//  You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-//  Unless required by applicable law or agreed to in writing, software
-//  distributed under the License is distributed on an "AS IS" BASIS,
-//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  See the License for the specific language governing permissions and
-//  limitations under the License.
-//
-
 package output
-
-import (
-	"unsafe"
-	"reflect"
-	"encoding/binary"
-	"github.com/ugorji/go/codec"
-	"time"
-	"C"
-)
-
-type FLBDecoder struct {
-	handle *codec.MsgpackHandle
-	mpdec  *codec.Decoder
-}
-
-type FLBTime struct {
-	time.Time
-}
-
-func (f FLBTime) WriteExt(interface{}) []byte {
-	panic("unsupported")
-}
-
-func (f FLBTime) ReadExt(i interface{}, b []byte) {
-	out := i.(*FLBTime)
-	sec := binary.BigEndian.Uint32(b)
-	usec := binary.BigEndian.Uint32(b[4:])
-	out.Time = time.Unix(int64(sec), int64(usec))
-}
-
-func (f FLBTime) ConvertExt(v interface{}) interface{} {
-	return nil
-}
-
-func (f FLBTime) UpdateExt(dest interface{}, v interface{}) {
-	panic("unsupported")
-}
-
-func NewDecoder(data unsafe.Pointer, length int) (*FLBDecoder) {
-	var b []byte
-
-	dec := new(FLBDecoder)
-	dec.handle = new(codec.MsgpackHandle)
-	dec.handle.SetExt(reflect.TypeOf(FLBTime{}), 0, &FLBTime{})
-
-	b = C.GoBytes(data, C.int(length))
-	dec.mpdec = codec.NewDecoderBytes(b, dec.handle)
-
-	return dec
-}
-
-func GetRecord(dec *FLBDecoder) (ret int, ts interface{}, rec map[interface{}]interface{}) {
-	var check error
-	var m interface{}
-
-	check = dec.mpdec.Decode(&m)
-	if check != nil {
-		return -1, 0, nil
-	}
-
-	slice := reflect.ValueOf(m)
-	t := slice.Index(0).Interface()
-	data := slice.Index(1)
-
-	map_data := data.Interface().(map[interface{}] interface{})
-
-	return 0, t, map_data
-}
diff --git a/output/flb_plugin.h b/output/flb_plugin.h
index fbdd9e8..8e29566 100644
--- a/output/flb_plugin.h
+++ b/output/flb_plugin.h
@@ -29,6 +29,9 @@
 #define FLB_PROXY_OUTPUT_PLUGIN    2
 #define FLB_PROXY_GOLANG          11
 
+#define FLB_OUTPUT_NET 32
+#define FLB_IO_OPT_TLS 4
+
 /* This structure is used for registration.
  * It matches the one in flb_plugin_proxy.h in fluent-bit source code.
  */
diff --git a/output/output.go b/output/output.go
index 4cc0ffa..cd2c708 100644
--- a/output/output.go
+++ b/output/output.go
@@ -35,6 +35,10 @@ const (
 
 	FLB_PROXY_OUTPUT_PLUGIN = C.FLB_PROXY_OUTPUT_PLUGIN
 	FLB_PROXY_GOLANG        = C.FLB_PROXY_GOLANG
+
+
+    FLB_OUTPUT_NET = C.FLB_OUTPUT_NET
+    FLB_IO_OPT_TLS = C.FLB_IO_OPT_TLS
 )
 
 // Local type to define a plugin definition
@@ -45,11 +49,11 @@ type FLBOutPlugin C.struct_flbgo_output_plugin
 // is passed and the next step is to invoke this FLBPluginRegister() function
 // to fill the required information: type, proxy type, flags name and
 // description.
-func FLBPluginRegister(def unsafe.Pointer, name, desc string) int {
+func FLBPluginRegister(def unsafe.Pointer, name, desc string, flags int) int {
 	p := (*FLBPluginProxyDef)(def)
 	p._type = FLB_PROXY_OUTPUT_PLUGIN
 	p.proxy = FLB_PROXY_GOLANG
-	p.flags = 0
+	p.flags = C.int(flags)
 	p.name = C.CString(name)
 	p.description = C.CString(desc)
 	return 0
@@ -81,3 +85,9 @@ func FLBPluginSetContext(plugin unsafe.Pointer, ctx interface{}) {
 func FLBPluginGetContext(i unsafe.Pointer) interface{} {
 	return contexts[int(uintptr(i))]
 }
+
+func NewPlugin() unsafe.Pointer {
+    p := &FLBOutPlugin{}
+    p.context = &C.struct_flb_plugin_proxy_context{}
+    return unsafe.Pointer(p)
+}
